<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:12:50 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2009-10-14+AND+created+%3C%3D+2009-10-21+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="18" total="18"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-146] configuration to work on Avro within Eclipse</title>
                <link>https://issues.apache.org/jira/browse/AVRO-146</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The soon-to-be-attached patch lets you work on Avro from within Eclipse, if that&apos;s your style.&lt;/p&gt;

&lt;p&gt;I&apos;ve added the following to the README:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;USING ECLIPSE&lt;/p&gt;

&lt;p&gt;To use Eclipse, use the &quot;ant eclipse&quot; target to trigger generating a .classpath&lt;br/&gt;
file, and also trigger compilation (to pull in the maven dependencies, etc.)&lt;br/&gt;
You must also make sure that your avro checkout directory is &quot;avro&quot;.  You&lt;br/&gt;
should then be able to create an Eclipse project pointed to your checkout, and&lt;br/&gt;
run the unit tests from Eclipse&apos;s runner.&lt;/p&gt;

&lt;p&gt;Note that the &quot;Eclipse Builder&quot; is configured to compile twice: once with&lt;br/&gt;
Eclipse&apos;s built-in compiler, and another time with ant.  Eclipse is happier&lt;br/&gt;
this way, though the classpath is configured to ignore Eclipse&apos;s compilation.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Everything here is incomprehensible XML boilerplate.  There&apos;s a new ant target to create the .classpath file.&lt;/p&gt;

&lt;p&gt;I&apos;m able to run all but the interop test that requires a server from within Eclipse.  I welcome other Eclipse users trying this out to see if it works.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12438027">AVRO-146</key>
            <summary>configuration to work on Avro within Eclipse</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="philip">Philip Zeyliger</assignee>
                                    <reporter username="philip">Philip Zeyliger</reporter>
                        <labels>
                    </labels>
                <created>Wed, 14 Oct 2009 00:11:59 +0000</created>
                <updated>Tue, 13 Dec 2011 19:08:34 +0000</updated>
                            <resolved>Thu, 22 Oct 2009 22:24:49 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>doc</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12765335" author="phunt" created="Wed, 14 Oct 2009 00:28:41 +0000"  >&lt;p&gt;fyi, not sure what approach is better but we recently added eclipse support to zookeeper in &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-539&quot; title=&quot;generate eclipse project via ant target&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-539&quot;&gt;&lt;del&gt;ZOOKEEPER-539&lt;/del&gt;&lt;/a&gt; via&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sourceforge.net/projects/ant-eclipse/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://sourceforge.net/projects/ant-eclipse/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12766284" author="philip" created="Thu, 15 Oct 2009 22:05:06 +0000"  >&lt;p&gt;Patrick,&lt;/p&gt;

&lt;p&gt;Thanks for the reference.  I&apos;m uploading a new patch, which:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Works.  (I dropped the .project file in the previous patch, so, had you tried it, it wouldn&apos;t have worked :/)&lt;/li&gt;
	&lt;li&gt;Uses ant-eclipse.  For simple things, ant-eclipse seems to work well.  The bixo project (see &lt;a href=&quot;http://www.google.com/codesearch/p?hl=en&amp;amp;sa=N&amp;amp;cd=1&amp;amp;ct=rc#hMNiHrMJ4Bc/ivy.xml&amp;amp;q=ivy.xml%20ant-eclipse&amp;amp;l=44&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.google.com/codesearch/p?hl=en&amp;amp;sa=N&amp;amp;cd=1&amp;amp;ct=rc#hMNiHrMJ4Bc/ivy.xml&amp;amp;q=ivy.xml%20ant-eclipse&amp;amp;l=44&lt;/a&gt; ) manages to pull in ant-eclipse via Ivy, but I haven&apos;t been able to figure out how they do it.  So, I followed zookeepers approach and pull it in manually.  Patrick &amp;#8212; any clever thoughts here?&lt;/li&gt;
	&lt;li&gt;Changes build.xml to separate out build/test/classes and build/test/generated/classes.  The only things that Avro tests absolutely need paranamer to run on are the classes generated from the schemas.  By having two distinct classpaths in there, it&apos;s easier to configure eclipse to compile the tests themselves, but to rely on ant to build the generated code.  That&apos;s a mouthful: I think, in general, it&apos;s reasonable to have one &quot;classes&quot; directory per &quot;src&quot; directory, and this makes this true.&lt;/li&gt;
	&lt;li&gt;Seems to be snappier, because Eclipse no longer calls ant; you only need to call it when you change code that needs to get generated.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;If someone here uses Eclipse, would be great to have someone else try it.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12766309" author="philip" created="Thu, 15 Oct 2009 22:58:10 +0000"  >&lt;p&gt;Another quick fix.  The settings files that ant-eclipse was generating because of the &amp;lt;settings&amp;gt; flag were making the Eclipse editor unhappy (it was doing type erasure of some sort).  I&apos;ve deleted the settings, and things are better.  (I&apos;m actually trying to write some code, so this Eclipse stuff may keep coming...)&lt;/p&gt;</comment>
                            <comment id="12766401" author="phunt" created="Fri, 16 Oct 2009 04:21:08 +0000"  >&lt;p&gt;Philip, donno about clever, afaict ant-eclipse is not deployed to any maven repository. So the next best thing&lt;br/&gt;
I could think of was to pull it manually (which I basically coped from the way the ivy jar is d/l as part&lt;br/&gt;
of the build bootstrapping). Perhaps if the ivy docs were more understandable, or maybe it&apos;s just that I&apos;m&lt;br/&gt;
not smart enough to understand them, I might have figured out a better way.&lt;/p&gt;</comment>
                            <comment id="12766426" author="philip" created="Fri, 16 Oct 2009 05:42:54 +0000"  >&lt;p&gt;I couldn&apos;t resist and checked out bixo.  They&apos;ve packaged ant-eclipse into a Maven repository at &lt;a href=&quot;http://oss.101tec.com/nexus/content/groups/public/ant-eclipse/ant-eclipse-jvm1.2/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://oss.101tec.com/nexus/content/groups/public/ant-eclipse/ant-eclipse-jvm1.2/&lt;/a&gt; .  I don&apos;t know how one gets things into &quot;official&quot; ivy repositories.  For now, I&apos;ve copied your method, and it gets the job done.&lt;/p&gt;</comment>
                            <comment id="12766607" author="cutting" created="Fri, 16 Oct 2009 17:06:48 +0000"  >&lt;p&gt;&amp;gt; The only things that Avro tests absolutely need paranamer to run on are the classes generated from the schemas.&lt;/p&gt;

&lt;p&gt;We actually only need to run paranamer on protocol interfaces, not schemas, to find message parameter names.  So we could change the ant task to accept a list of protocol interface names, or perhaps use .avpr files to identify classes (although those don&apos;t exist when reflection&apos;s used).  Shuffling generated code to a different directory seems like a halfway fix.  Why bother?&lt;/p&gt;

&lt;p&gt;Also, I&apos;m uncomfortable building much knowledge of Avro&apos;s build into this, since it may have to be updated whenever Avro&apos;s build changes, which non-Eclipse users will be unable to test.  Even Eclipse users will probably not test this frequently, since they&apos;re unlikely to re-generate their project.  I don&apos;t want to make a release and then later discover that &apos;ant eclipse&apos; generates an unbuildable project.&lt;/p&gt;

&lt;p&gt;The simplest approach is to configure Eclipse to call just back to Ant for all compilation.  That&apos;s ideal from a maintenance perspective.  Since we have to do that anyway for paranamer, why use Eclipse for any compilation?  (As a non-Eclipse user I am a natural devil&apos;s advocate here.)&lt;/p&gt;</comment>
                            <comment id="12766631" author="philip" created="Fri, 16 Oct 2009 17:58:42 +0000"  >&lt;p&gt;Doug,&lt;/p&gt;

&lt;p&gt;I think you&apos;re being overly conservative here.  Eclipse, once you get past the learning curve and configuration, is a powerful tool for code exploration and debugging, and requires relatively few concessions.  It has a deep understanding of Java, so it works best (and is least flakey) when it is the compiler.  Its configuration is roughly made up of two things: (1) what are all the source files?  These Eclipse lets you edit, and it builds them for you.  Because it &quot;understands&quot; them, it builds them continually (if you so choose) and incrementally.  (2) What are the libraries?  These are jars or directories of .class files, and it puts them on the classpath.&lt;/p&gt;

&lt;p&gt;The concessions that Eclipse requires are that you separate out the sources files from the libraries.  In Avro&apos;s case (and in other systems that use some generated-code), this means considering generated code as a library, but considering the source stuff as source.  So, I&apos;ve had to separate the classes/ directory for the generated code away from the classes/ directory for the rest of the test code.  That in itself is probably for the better: collapsing multiple source trees (src/test/java and build/test/src, I think) into one classes/ tree feels icky to me in itself.&lt;/p&gt;

&lt;p&gt;I totally understand that you don&apos;t wish the maintenance hassle of Eclipse.  The ant-eclipse task makes it pretty minor: you certainly don&apos;t have to update the classpath file every time a dependency changes, and that&apos;s a win.  Every time you make a structural change--adding new source directories in one way or another, you&apos;ll have to enlist an Eclipse user to help you edit that configuration.  How often, in Java, should that be happening?  In its ideal, Java is dead simple: source trees layed out as packages, and jar files.  If having Eclipse in there makes a push to have the build be simpler, that&apos;s a good thing &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  I could probably rig up a system that runs Eclipse in headless mode and tests that the configuration worked, but it&apos;s probably more hassle than it&apos;s worth right now.&lt;/p&gt;

&lt;p&gt;BTW, I used the Eclipse stuff for several hours yesterday, and it worked well for working with Avro.  When I ran into something I didn&apos;t understand in the code base, I double-clicked in the margins to set a breakpoint, clicked the &quot;Debug AllTests&quot; button, and, one second later, I was staring at how the method I was trying to understand was called, by which test, and with what parameters.  It&apos;s a tool, it&apos;s not perfect, but it&apos;d good enough that I make concessions to it.&lt;/p&gt;

&lt;p&gt;You should give it a chance in the build file.&lt;/p&gt;</comment>
                            <comment id="12766638" author="cutting" created="Fri, 16 Oct 2009 18:22:09 +0000"  >&lt;p&gt;Philip, you told me a lot about Eclipse&apos;s awesomeness, and I&apos;ll trust you on that.  Viva Eclipse!&lt;/p&gt;

&lt;p&gt;I think you may have answered one of my questions: the reason why you don&apos;t want Eclipse to compile everything via Ant (my first choice) is that this would somehow disable lots of Eclipse awesomeness.  Is that right?  Eclipse doesn&apos;t just need to know where the sources and classes are, it needs to generate the .class files itself in order to be most awesome?&lt;/p&gt;

&lt;p&gt;I don&apos;t think you answered my other implicit question, so I&apos;ll make it explicit: can Eclipse actually not handle multiple source trees that share a classes directory?  You seemed to motivate this change with the assertion that Avro only needs to run paranamer on generated code, but that&apos;s not true.  It only needs to run it on Java interfaces used as protocols, a set that intersects generated code, but is neither a proper superset nor subset.  Your statements make it clear that you dislike this sharing, but not whether this is mandated by Eclipse.  Is it actually?&lt;/p&gt;

&lt;p&gt;We had Eclipse support built into Hadoop a long time ago.  It compiled, but wasn&apos;t maintained.  Nice, innocent folks would try to use it in releases and it would fail.  I want to avoid that.  Making this as simple as possible without losing intense awesomeness is my goal here.&lt;/p&gt;</comment>
                            <comment id="12766936" author="philip" created="Sat, 17 Oct 2009 16:23:45 +0000"  >&lt;p&gt;Doug, I think you pin-pointed the heart of the build issue, though, and my understanding of it was wrong.  Specifically:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Paranamer&amp;#93;&lt;/span&gt; only needs to run it on Java interfaces used as protocols, a set that intersects generated code, but is neither a proper superset nor subset.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is what I hadn&apos;t internalized.  Currently, paranamer only runs on generated test code, because that&apos;s the only place where we use an interface as a protocol in the code base.  Would you agree that we should change the build so that paranamer runs only on the set of files that we need it to run on?  I&apos;m not quite sure how to make that happen, actually, since the ParanamerGeneratorTask seems to take entire directories.&lt;/p&gt;

&lt;p&gt;Here&apos;s the paranamer source I was looking at:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.google.com/codesearch/p?ct=rc#OCCc6t7eB3k/trunk/paranamer-ant/src/java/com/thoughtworks/paranamer/ant/ParanamerGeneratorTask.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.google.com/codesearch/p?ct=rc#OCCc6t7eB3k/trunk/paranamer-ant/src/java/com/thoughtworks/paranamer/ant/ParanamerGeneratorTask.java&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.google.com/codesearch/p?ct=rc#OCCc6t7eB3k/trunk/paranamer-generator/src/java/com/thoughtworks/paranamer/generator/QdoxParanamerGenerator.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.google.com/codesearch/p?ct=rc#OCCc6t7eB3k/trunk/paranamer-generator/src/java/com/thoughtworks/paranamer/generator/QdoxParanamerGenerator.java&lt;/a&gt;&lt;br/&gt;
If you have Paranamer checked out, it&apos;s just ParanamerGeneratorTask and QdoxParanamerGenerator.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If we can separate out the files that paranamer runs on, then since they&apos;re already enumerated in the build, I can figure out how to make Eclipse understand them.&lt;/p&gt;

&lt;p&gt;How do you think it best to move forward?  Write a paranamer macro that copies one file out of a tree into a parallel temporary tree, works on it, and pushes it back?  Something way more clever?&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Some misgivings about paranamer&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This discussion has given me some misgivings about first generating Java code, and then running paranamer on it.  If we&apos;re generating code, can&apos;t we just generate the parameter information and stuff it into a static field in the interface, and be done with it?  (We can, in fact, even use their interface and add __PARANAMER_DATA, so that there&apos;s only one read path.)  People with trivial build systems will want to punt, generate the code with a command-line tool once, check in the generated code as if it&apos;s their own, and be done with it.  (Checking in of generated code happens a lot with Thrift, in part because Thrift has, in the past, been recalcitrant to build.)  But that&apos;s not enough: they also have to run paranamer on it, at which point they&apos;re checking in .class files, and that&apos;s not nice.  More advanced users will generate code from schemas at build-time.  Some of those people will be doing so with Eclipse...  I&apos;m a little worried that we&apos;re imposing more hoops on those people than they deserve.&lt;/p&gt;

&lt;p&gt;Anyway, that&apos;s neither here nor there for Eclipse support.  I think it&apos;ll get worked out as we build some tutorials of how to use Avro.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Eclipe Questions&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;You asked some specific questions about Eclipse; I&apos;ve done my best to answer below.  Sorry it&apos;s so wordy.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;You&amp;#93;&lt;/span&gt; don&apos;t want Eclipse to compile everything via Ant (my first choice) &lt;span class=&quot;error&quot;&gt;&amp;#91;because&amp;#93;&lt;/span&gt; this would somehow disable lots of Eclipse awesomeness. Is that right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yep, that&apos;s right.  Part of that awesomeness is speed (calling out to ant is slower), and part of that is that Eclipse&apos;s native compiler integrates with the editor and the debugger.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;can Eclipse actually not handle multiple source trees that share a classes directory?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;b&gt;The Eclipse background&lt;/b&gt;&lt;br/&gt;
The problem is a bit more nuanced than that.  It doesn&apos;t like the overlap of &quot;sources&quot; and &quot;libraries&quot;.  &quot;Sources&quot; are directories with a Java source tree, and &quot;libraries&quot; are either classes/ directories or jar files.  The classes/ directory which comes from sources doesn&apos;t get included in the configuration--Eclipse prefers to compile to classes itself.  (Eclipse is configured to build the .classes tree in .eclipse/something-or-other, and I don&apos;t want to colocate that with where ant builds it, because I want to very explicitly avoid at all costs accidentally packaging something compiled by Eclipse.)&lt;/p&gt;

&lt;p&gt;I think a specific example would help.  Let&apos;s say we have two classes: FooProtocol.java, which is generated and compiled by ant (because it needs paranamer).  It&apos;s in classes/FooProtocol.class and build/src/FooProtocol.java.  And then we have SpecificCompiler.java, in classes/SpecificCompiler.class and src/SpecificCompiler.java.  If I tell Eclipse that &quot;src&quot; is one of the package sourcs, and &quot;classes&quot; is one of the libraries, then, when I do a lookup for &quot;SpecificCompiler&quot;, it will give me two things: both SpecificCompiler.java and SpecificCompiler.class, because both are available to it.  It&apos;s possible to convince it that SpecificCompiler.java is &quot;ahead of&quot; SpecificCompiler.class, but it makes Ecilpse work worse.  And if you get the classpath misconfigured, it can get confused about which one it should run.  So, the best thing to do is to not tell Eclipse about SpecificCompiler.class at all.  You can do this by explicitly excluding it (hard to do when there are 100 of these), or by putting it in a different directory.&lt;/p&gt;

&lt;p&gt;Does that make sense?  Anyway, that&apos;s the problem.&lt;/p&gt;

&lt;p&gt;I think I can make Eclipse work with however AVRO sets up the build.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;We had Eclipse support built into Hadoop a long time ago.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Two observations here:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;There was and is an Eclipse plug-in for Hadoop.  It suffers from lack of use and development.&lt;/li&gt;
	&lt;li&gt;There is an ant target called &quot;eclipse-files&quot;.  It doesn&apos;t always work, but I can tell you that it works right now in mapred and hdfs.  I&apos;m one of the people who tries to post a patch every time I run into it being broken.  The most common failure is that the dependencies/ivy have changed.  If the way that Avro manages that turns out to work, I will try to port that over to Hadoop as well; it&apos;ll fix the most common error.  Besides that frequent but easy-to-fix problem, the Eclipse stuff has been mostly working.  The JIRA process (and how Hadoop stores the Eclipse templates in a separate directory, which don&apos;t show up in &quot;svn diff&quot;) imposes some friction on trivial fixes, so I sense that people who are using Eclipse are well-versed enough with it to just work around problems as they come.&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;since they&apos;re unlikely to re-generate their project.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I tend to regenerate frequently, but it depends on the person.  It helps that &quot;ant clean&quot; will blow it away &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12767401" author="cutting" created="Mon, 19 Oct 2009 17:37:17 +0000"  >&lt;p&gt;&amp;gt; If we can separate out the files that paranamer runs on [ ... ]&lt;/p&gt;

&lt;p&gt;I agree that this is a potential problem.  Currently it does not impact build time significantly.  This should be addressed as a separate issue.  Ideally we could change things like this in the build without breaking Eclipse projects, e.g., if Eclipse used Ant for all compilation, but that doesn&apos;t seem acceptable to you.&lt;/p&gt;

&lt;p&gt;&amp;gt; If we&apos;re generating code, can&apos;t we just generate the parameter information and stuff it into a static field in the interface, and be done with it?&lt;/p&gt;

&lt;p&gt;Yes, we could probably do this for generated code, but we still need Paranamer for reflected code.  For generated interfaces, in fact, we can simply include the Avro protocol as a constant and be done with it, just as we include the Avro schema in generated classes.&lt;/p&gt;

&lt;p&gt;Is the current version of the patch something that you feel is ready to commit?  If so, can some other Eclipse user confirm that it also works for them?&lt;/p&gt;</comment>
                            <comment id="12768080" author="philip" created="Wed, 21 Oct 2009 05:15:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;Yes, we could probably do this for generated code, but we still need Paranamer for reflected code. For generated interfaces, in fact, we can simply include the Avro protocol as a constant and be done with it, just as we include the Avro schema in generated classes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve filed &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-164&quot; title=&quot;Generate paranamer metadata for interfaces as part of SpecificCompiler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-164&quot;&gt;&lt;del&gt;AVRO-164&lt;/del&gt;&lt;/a&gt; for this.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is the current version of the patch something that you feel is ready to commit? If so, can some other Eclipse user confirm that it also works for them?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, I&apos;m ready to commit what&apos;s there.  I&apos;ll ask Eli or Tom to try the Eclipse configuration to make sure it works not just for me.&lt;/p&gt;</comment>
                            <comment id="12768677" author="tomwhite" created="Thu, 22 Oct 2009 13:09:10 +0000"  >&lt;p&gt;I used the Eclipse configuration to successfully run the tests (except the interop tests, as noted in the README).&lt;/p&gt;</comment>
                            <comment id="12768939" author="cutting" created="Thu, 22 Oct 2009 22:24:49 +0000"  >&lt;p&gt;I just committed this.  Thanks, Philip!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12422041" name="AVRO-146.patch.txt" size="5675" author="philip" created="Wed, 14 Oct 2009 00:13:25 +0000"/>
                            <attachment id="12422287" name="AVRO-146.patch.v2.txt" size="7412" author="philip" created="Thu, 15 Oct 2009 22:05:06 +0000"/>
                            <attachment id="12422297" name="AVRO-146.patch.v3.txt" size="7278" author="philip" created="Thu, 15 Oct 2009 22:58:10 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 14 Oct 2009 00:28:41 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94474</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 14 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dyj3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79524</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-147] Using configure to set up Makefiles for C++</title>
                <link>https://issues.apache.org/jira/browse/AVRO-147</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I used autoconf to create a configure file, which in turn can be used to create a Makefile.&lt;/p&gt;

&lt;p&gt;This is to replace the hand-edited System.mk files that were there before, as now configure tries to figure it out.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12438031">AVRO-147</key>
            <summary>Using configure to set up Makefiles for C++</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sbanacho">Scott Banachowski</assignee>
                                    <reporter username="sbanacho">Scott Banachowski</reporter>
                        <labels>
                    </labels>
                <created>Wed, 14 Oct 2009 01:01:15 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:01 +0000</updated>
                            <resolved>Thu, 15 Oct 2009 15:47:48 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12765347" author="sbanacho" created="Wed, 14 Oct 2009 01:07:41 +0000"  >&lt;p&gt;Here is the patch.&lt;br/&gt;
Since it adds and removes files, I added a shell script to apply the patch and invoke the right steps for svn.&lt;/p&gt;
</comment>
                            <comment id="12765348" author="sbanacho" created="Wed, 14 Oct 2009 01:13:12 +0000"  >&lt;p&gt;update to the apply patch&lt;/p&gt;</comment>
                            <comment id="12765349" author="sbanacho" created="Wed, 14 Oct 2009 01:15:37 +0000"  >&lt;p&gt;fixed&lt;/p&gt;</comment>
                            <comment id="12765350" author="sbanacho" created="Wed, 14 Oct 2009 01:25:10 +0000"  >&lt;p&gt;To test out the patch, copy both applypatch147.sh and &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-147&quot; title=&quot;Using configure to set up Makefiles for C++&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-147&quot;&gt;&lt;del&gt;AVRO-147&lt;/del&gt;&lt;/a&gt;.patch to the root of avro trunk, then run:&lt;/p&gt;

&lt;p&gt;&amp;gt; sh applypatch147.sh &lt;/p&gt;

&lt;p&gt;Then:&lt;br/&gt;
&amp;gt; cd src/c++&lt;br/&gt;
&amp;gt; sh configure&lt;/p&gt;

&lt;p&gt;Assume that goes well: &lt;br/&gt;
&amp;gt; make&lt;br/&gt;
&amp;gt; make check&lt;/p&gt;

&lt;p&gt;Note if you&apos;re like me you may have boost staged instead of installed.  in that case you may need:&lt;br/&gt;
&amp;gt; sh configure --with-boost=/path/to/boost&lt;br/&gt;
and&lt;br/&gt;
&amp;gt; export LD_LIBRARY_PATH=/path/to/boost/lib &lt;/p&gt;

&lt;p&gt;I&apos;ve tried it on Linux and Mac, and works for both.  I&apos;m hoping somebody else can try it on their setup and report problems if any.&lt;/p&gt;

&lt;p&gt;Once this is checked in I also have some changes that will build this as part of the root-level ant build.&lt;/p&gt;


</comment>
                            <comment id="12765395" author="thiru_mg" created="Wed, 14 Oct 2009 05:10:00 +0000"  >&lt;p&gt;On cygwin, it basically works. But there are some issues:&lt;/p&gt;

&lt;p&gt;sh ./configure gives the following warnings:&lt;/p&gt;

&lt;p&gt;{{&lt;br/&gt;
...&lt;br/&gt;
config.status: creating Makefile&lt;br/&gt;
configure: WARNING: you should use --build, --host, --target&lt;br/&gt;
configure: WARNING: you should use --build, --host, --target&lt;br/&gt;
configure: WARNING: you should use --build, --host, --target&lt;br/&gt;
checking for C++ compiler default output file name... a.exe&lt;br/&gt;
checking whether the C++ compiler works... yes&lt;br/&gt;
...&lt;br/&gt;
}}&lt;/p&gt;

&lt;p&gt;Also, make sometimes gives:&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;make: warning:  Clock skew detected.  Your build may be incomplete.&lt;/tt&gt;&lt;/p&gt;
</comment>
                            <comment id="12765609" author="sbanacho" created="Wed, 14 Oct 2009 16:11:42 +0000"  >&lt;p&gt;Thanks Thiru,&lt;br/&gt;
I&apos;ll try to supress the warnings for configure.  &lt;/p&gt;

&lt;p&gt;Regarding the clock skew issue, I don&apos;t think it has anything to do with configure.  When I&apos;ve seen it, usually it&apos;s a mismatch between nfs server time and the host time, or ntpd in action.  I&apos;ve also heard that it&apos;s frequent in FAT filesystems due to less granular timestamp info (this might be the case for cygwin).&lt;/p&gt;


</comment>
                            <comment id="12765661" author="thiru_mg" created="Wed, 14 Oct 2009 17:39:42 +0000"  >&lt;p&gt;I&apos;m sorry Scott. It was a false alarm. It appears that the patch got applied twice in my machine so the config file got doubled. When tried with a clean copy, it worked. The only problem I noticed this time was the clock skew.&lt;/p&gt;</comment>
                            <comment id="12765740" author="sbanacho" created="Wed, 14 Oct 2009 20:35:45 +0000"  >&lt;p&gt;Ok, thanks.  I tried cygwin on an XP machine and it worked for me too.&lt;/p&gt;</comment>
                            <comment id="12765816" author="cutting" created="Wed, 14 Oct 2009 23:39:31 +0000"  >&lt;p&gt;+1  Works for me.  Should we ignore config.log and config.status?&lt;/p&gt;</comment>
                            <comment id="12766095" author="sbanacho" created="Thu, 15 Oct 2009 15:37:05 +0000"  >&lt;p&gt;Yes, I think config.log and config.status can be ignored.  When I add the ant build, those files will end up in the build directories instead of the source directories.&lt;/p&gt;</comment>
                            <comment id="12766104" author="sbanacho" created="Thu, 15 Oct 2009 15:47:48 +0000"  >&lt;p&gt;Committed revision 825526.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12422048" name="AVRO-147.patch" size="254865" author="sbanacho" created="Wed, 14 Oct 2009 01:07:41 +0000"/>
                            <attachment id="12422051" name="applypatch147.sh" size="533" author="sbanacho" created="Wed, 14 Oct 2009 01:15:37 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 14 Oct 2009 05:10:00 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94475</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 15 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dyjb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79525</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-148] Add ant target to build c++ project</title>
                <link>https://issues.apache.org/jira/browse/AVRO-148</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I have a preliminary patch for this, but it has a dependency on &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-147&quot; title=&quot;Using configure to set up Makefiles for C++&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-147&quot;&gt;&lt;del&gt;AVRO-147&lt;/del&gt;&lt;/a&gt;, so I&apos;m waiting to commit that before posting this.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12438033">AVRO-148</key>
            <summary>Add ant target to build c++ project</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sbanacho">Scott Banachowski</assignee>
                                    <reporter username="sbanacho">Scott Banachowski</reporter>
                        <labels>
                    </labels>
                <created>Wed, 14 Oct 2009 01:27:53 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:02 +0000</updated>
                            <resolved>Tue, 20 Oct 2009 22:32:20 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12766338" author="sbanacho" created="Fri, 16 Oct 2009 00:05:38 +0000"  >&lt;p&gt;Here&apos;s a change that allows the ant build to include cpp stuff now.&lt;/p&gt;

&lt;p&gt;There&apos;s a patch, and a shell to apply the patch (one file got renamed, hence the shell).&lt;/p&gt;

&lt;p&gt;All the cpp targets work ok for me on linux and mac.  I&apos;m curious if it&apos;ll work for others.  &lt;/p&gt;

&lt;p&gt;I haven&apos;t been able to do a full ant build because of the java stuff is not working for me (do we need to have both java5 and 6 installed to work?)&lt;/p&gt;

</comment>
                            <comment id="12766646" author="cutting" created="Fri, 16 Oct 2009 18:37:58 +0000"  >&lt;p&gt;+1  This integration is great to have!&lt;/p&gt;

&lt;p&gt;The only nit I have is that the c++ docs should be linked into the rest of the docs, by adding a link in src/doc/content/xdocs/site.xml.&lt;/p&gt;

&lt;p&gt;You need to have Java 5 installed to build the documentation, since Forrest requires it.  (Sigh.)&lt;/p&gt;

&lt;p&gt;I have the following in ~/build.properties to make Forrest work for me in all Hadoop projects and sites:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java5.home=/home/cutting/local/java-1.5.0-sun
forrest.home=/home/cutting/local/forrest
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12767499" author="sbanacho" created="Mon, 19 Oct 2009 20:00:43 +0000"  >&lt;p&gt;revised patch, adds c++ docs to site.xml&lt;/p&gt;</comment>
                            <comment id="12767568" author="cutting" created="Mon, 19 Oct 2009 21:51:38 +0000"  >&lt;p&gt;+1 Looks great to me!&lt;/p&gt;</comment>
                            <comment id="12767987" author="sbanacho" created="Tue, 20 Oct 2009 22:32:20 +0000"  >&lt;p&gt;Thanks for testing.  I committed revision 827822.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12422603" name="AVR0-148.patch" size="29129" author="sbanacho" created="Mon, 19 Oct 2009 20:13:36 +0000"/>
                            <attachment id="12422306" name="AVRO-148.patch" size="22971" author="sbanacho" created="Fri, 16 Oct 2009 00:05:38 +0000"/>
                            <attachment id="12422307" name="applypatch148.sh" size="126" author="sbanacho" created="Fri, 16 Oct 2009 00:05:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 16 Oct 2009 18:37:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94476</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 14 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dyjj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79526</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-149] &quot;avrotool&quot; runner to execute avro commands from command-line</title>
                <link>https://issues.apache.org/jira/browse/AVRO-149</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;There&apos;s already an ant task to generate java code based on a schema, but you can&apos;t do it from the command-line, with any ease.  I will shortly upload a patch that does just that.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12438168">AVRO-149</key>
            <summary>&quot;avrotool&quot; runner to execute avro commands from command-line</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="philip">Philip Zeyliger</assignee>
                                    <reporter username="philip">Philip Zeyliger</reporter>
                        <labels>
                    </labels>
                <created>Thu, 15 Oct 2009 05:42:37 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:02 +0000</updated>
                            <resolved>Tue, 27 Oct 2009 23:59:03 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12765925" author="philip" created="Thu, 15 Oct 2009 06:04:51 +0000"  >&lt;p&gt;The attached patch introdues &quot;avrotool&quot;, a wrapper for calling tools, for Avro, written in Java.  Right now there&apos;s only one &quot;tool&quot;, called &quot;compile&quot;, for compiling schemas and protocols.  &quot;binary2text&quot;, &quot;text2binary&quot;, &quot;validate_schema&quot;, etc. all make sense, and can be further work.&lt;/p&gt;

&lt;p&gt;To walk you through the patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;There are two shell scripts: avrotool.sh and avrotool-dev.sh.  The latter is intended to be called from a checked-out tree, and should work after an &quot;ant compile-java&quot;.  The former is copied into build/avro-1.2.0-devel/avrotool, has a VERSION tag replaced (to point to the current jar), and is set executable.  The scripts are essentially the same, and both are just a few lines.  I chose to have two scripts to make it way obvious what&apos;s going on.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;There&apos;s a new interface called &quot;Tool&quot; to run tools, a new package (avro.tool), and a runner class (avro.tool.Main()).  I hope all of this is considered &quot;evolving&quot; in terms of interfaces: ideally we&apos;d standardize on command-line parsing, help text, return codes, etc., but I wanted to get the most minimal reasonable thing working first.  There&apos;s certainly much to be done with SpecificCompiler in terms of usability, but, hey, at least now you can compile both schemas and protocols without changing the code &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I added a dependency on google collections for avrotool.  We already pull it in somewhere (it shows up in lib/), and I&apos;m using its ImmutableMap.Builder.  If we want to avoid the extra dependency, I&apos;m happy to blow it away.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;At some point, we might want to separate the runtime and the tools into their own jars.  I don&apos;t think that point is this change.  The jar is &quot;only&quot; 221k.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;In the future, it would be very reasonable to write some of the tools in C or python.  Do you think sitting on the name &quot;avrotool&quot; is bad?  I could do &quot;avrojtool&quot;?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There aren&apos;t yet tests.  I did the following manually and checked that the temporary directories were filled with java files.&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;# From the directory created by &quot;ant package&quot;
$./avrotool compile protocol src/test/schemata/namespace.avpr /tmp/bar
$./avrotool compile schema src/test/schemata/interop.avsc /tmp/foo
# From the checkout directory
$src/scripts/avrotool-dev.sh  compile schema src/test/schemata/interop.avsc /tmp/foo
$src/scripts/avrotool-dev.sh  compile protocol src/test/schemata/simple.avpr /tmp/bar
# Check some bad arguments.  These should output errors.
$ src/scripts/avrotool-dev.sh 
$ src/scripts/avrotool-dev.sh  foo
$ src/scripts/avrotool-dev.sh  compile protocol notenoughargs
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I feel bad that the tests aren&apos;t automated: suggestions?  Shell script invoked by ant?&lt;/p&gt;</comment>
                            <comment id="12766111" author="cutting" created="Thu, 15 Oct 2009 16:25:08 +0000"  >&lt;p&gt;This is a great addition! &lt;/p&gt;

&lt;p&gt;&amp;gt; I chose to have two scripts to make it way obvious what&apos;s going on.&lt;/p&gt;

&lt;p&gt;I think this will prove confusing.  Can you please fold these together?  We can add build/classes and build/lib when they exist.  This is what Hadoop&apos;s done for years.&lt;/p&gt;

&lt;p&gt;&amp;gt; I added a dependency on google collections for avrotool.&lt;/p&gt;

&lt;p&gt;If this is easy to avoid then I&apos;d prefer it.  I don&apos;t know how we&apos;re getting that, but it&apos;s not currently an explicit dependency and we should add those more cautiously.&lt;/p&gt;

&lt;p&gt;&amp;gt; Do you think sitting on the name &quot;avrotool&quot; is bad? I could do &quot;avrojtool&quot;?&lt;/p&gt;

&lt;p&gt;I&apos;d vote for either just &apos;avro&apos; or perhaps &apos;avroj&apos;.  This will be the primary (java-based) command-line interface to Avro, so we needn&apos;t further qualify it.&lt;/p&gt;

&lt;p&gt;&amp;gt; I feel bad that the tests aren&apos;t automated: suggestions? Shell script invoked by ant?&lt;/p&gt;

&lt;p&gt;Guilt is good!  A shell script invoked by ant that checks return status and output would be fabulous.&lt;/p&gt;</comment>
                            <comment id="12766165" author="philip" created="Thu, 15 Oct 2009 18:47:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think this will prove confusing. Can you please fold these together? We can add build/classes and build/lib when they exist. This is what Hadoop&apos;s done for years.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Done.  (I actually find Hadoop&apos;s mode confusing, because I don&apos;t always know whether i&apos;m using the jars or the classes dir, so I left in an echo if you&apos;re using the &quot;development&quot; version.)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If this is easy to avoid then I&apos;d prefer it. I don&apos;t know how we&apos;re getting that, but it&apos;s not currently an explicit dependency and we should add those more cautiously.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Gone.  It&apos;s from checkstyle (&quot;ant -v clean&quot;), btw, so only a compile-time dependency:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;ivy:retrieve&amp;#93;&lt;/span&gt; == resolving dependencies checkstyle#checkstyle;5.0-&amp;gt;com.google.collections#google-collections;0.9 &lt;span class=&quot;error&quot;&gt;&amp;#91;compile-&amp;gt;runtime(*)&amp;#93;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;d vote for either just &apos;avro&apos; or perhaps &apos;avroj&apos;. This will be the primary (java-based) command-line interface to Avro, so we needn&apos;t further qualify it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I gave it avroj.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Guilt is good! A shell script invoked by ant that checks return status and output would be fabulous.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Did something simple.  Will attach new patch soon.&lt;/p&gt;</comment>
                            <comment id="12766180" author="philip" created="Thu, 15 Oct 2009 19:13:02 +0000"  >&lt;p&gt;Here&apos;s a new version with concerns addressed.  I had to do some ant stuff to make the shell scripts executable in the tarball.&lt;/p&gt;</comment>
                            <comment id="12766184" author="philip" created="Thu, 15 Oct 2009 19:16:13 +0000"  >&lt;p&gt;BTW, if you want to just follow the latest changes, my history is up at &lt;a href=&quot;http://github.com/philz/avro/commits/tool&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/philz/avro/commits/tool&lt;/a&gt; .&lt;/p&gt;</comment>
                            <comment id="12766659" author="cutting" created="Fri, 16 Oct 2009 18:58:31 +0000"  >&lt;p&gt;&amp;gt; BTW, if you want to just follow the latest changes, my history is up at &lt;a href=&quot;http://github.com/philz/avro/commits/tool&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/philz/avro/commits/tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I actually prefer to read the full patch again each time.  Really!&lt;/p&gt;

&lt;p&gt;Also, when you upload a new version to Jira, please don&apos;t add a version number to the file name.  Jira will datestamp it, and that way we don&apos;t end up with a big list of files at the top of the page to choose among.  (The top one is not always the most recent.)&lt;/p&gt;

&lt;p&gt;You renamed the script, but you did not rename the various comments that still use the term &quot;avrotool&quot;.  These should all be changed to &quot;avroj&quot;, no?&lt;/p&gt;

&lt;p&gt;Most other projects commonly use the bin/ directory for executable scripts, and do not have two copies in releases.  I&apos;d prefer that.  Is there a reason you&apos;ve avoided that?  I don&apos;t see the advantage of having the jar&apos;s version in the script: the script runs the code in a relative directory, giving preference to the classes directory over any avro-XX.jar file found.&lt;/p&gt;

&lt;p&gt;The warnings generated by the script will be annoying to developers like me, who will use these scripts a lot.  They should at least be prefixed &quot;Warning&quot;, but I&apos;d really prefer they were removed.  As I said above, the contract of the script is to run the code in the tree where the script lives, giving precedence to built code over shipped code.  If an end-user hacks some of our code and rebuilds, the script should run their hacked code without complaint.  Many users hack open source code.  This is normal, and does not warrant warnings.&lt;/p&gt;

&lt;p&gt;Finally, how about naming it &apos;avroj&apos; rather than &apos;avroj.sh&apos;?  Ant, forrest, findbugs, etc. all name their scripts without a &apos;.sh&apos;.&lt;/p&gt;</comment>
                            <comment id="12766816" author="philip" created="Sat, 17 Oct 2009 02:05:28 +0000"  >&lt;p&gt;I&apos;ll update the patch with your suggestions as soon as I have a chance.  I have no objections to &quot;bin/avroj&quot;, except that it hides the fact that scripts are, well, source, and not binary, and they have a language, so they should have an extension.  What I did was make &quot;src/scripts/avroj.sh&quot; be filtered (to replace @VERSION@), renamed (to avroj), and executable in the build/avro-VERSION directory as part of &quot;ant package&quot;.  Should tests go in &quot;src/test/bin&quot;?&lt;/p&gt;

&lt;p&gt;Anyway, I&apos;ll make it bin/avroj as soon as I have a chance.&lt;/p&gt;</comment>
                            <comment id="12766817" author="philip" created="Sat, 17 Oct 2009 02:07:31 +0000"  >&lt;p&gt;One more question:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;please don&apos;t add a version number to the file name&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was doing this because I saw people doing it on the Hadoop JIRA.  I tried it for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-154&quot; title=&quot;Tool to induce schema using reflection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-154&quot;&gt;&lt;del&gt;AVRO-154&lt;/del&gt;&lt;/a&gt;, and JIRA still has a long list of files, you just have to scrutinize the date column to figure out which to click.  Is that what you prefer?&lt;/p&gt;</comment>
                            <comment id="12767410" author="cutting" created="Mon, 19 Oct 2009 17:43:08 +0000"  >&lt;p&gt;&amp;gt; I tried it for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-154&quot; title=&quot;Tool to induce schema using reflection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-154&quot;&gt;&lt;del&gt;AVRO-154&lt;/del&gt;&lt;/a&gt;, and JIRA still has a long list of files, you just have to scrutinize the date column to figure out which to click. Is that what you prefer?&lt;/p&gt;

&lt;p&gt;Yes, I prefer that.  The older version is grayed out, making it easy to find the most recent.&lt;/p&gt;</comment>
                            <comment id="12768071" author="philip" created="Wed, 21 Oct 2009 04:59:22 +0000"  >&lt;p&gt;Back from travels; clearing out the queue!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You renamed the script, but you did not rename the various comments that still use the term &quot;avrotool&quot;. These should all be changed to &quot;avroj&quot;, no?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yep, fixed.  The package is still org.apache.avro.tool, which I prefer over &quot;avroj&quot;, but if you have a strong preference, the search and replace would be trivial.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Most other projects commonly use the bin/ directory for executable scripts, and do not have two copies in releases.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve moved the script into bin/avroj.  I&apos;ve removed the VERSION substitution.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The warnings generated by the script will be annoying to developers like me, who will use these scripts a lot. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Removed the warning.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;avroj vs. avroj.sh&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s &quot;avroj&quot; now.  The test script still has a &quot;.sh&quot; suffix on it, since it&apos;s really in the src/ tree.&lt;/p&gt;


&lt;p&gt;BTW, are you aware of anything that auto-generates stubs like &quot;avroj&quot;?  It seems like every Java project in the world has to have one of these.  Inevitably, we&apos;ll be adding things similar to $HADOOP_CLASSPATH to this script soon.  I&apos;d use a canned script if I knew of one that was liked.&lt;/p&gt;

&lt;p&gt;The diff is also updated to fix some trivial merge conflicts in build.xml.&lt;/p&gt;</comment>
                            <comment id="12770551" author="philip" created="Tue, 27 Oct 2009 16:16:39 +0000"  >&lt;p&gt;Doug,&lt;/p&gt;

&lt;p&gt;Care to take another look?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12770642" author="cutting" created="Tue, 27 Oct 2009 21:12:40 +0000"  >&lt;p&gt;Philip, this looks good to me.  Thanks!&lt;/p&gt;

&lt;p&gt;Before we commit this, should we consider how &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-163&quot; title=&quot;Each language Avro supports should be a separate package&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-163&quot;&gt;&lt;del&gt;AVRO-163&lt;/del&gt;&lt;/a&gt; impacts it?  If our primary release is to a src tarball, should we also make an avroj binary release?  We could distribute avroj as a giant tarball with all required libraries included.  Then we almost wouldn&apos;t need a shell script, since it would just be &apos;java -jar avroj.jar ...&apos;.  Thoughts?&lt;/p&gt;</comment>
                            <comment id="12770672" author="philip" created="Tue, 27 Oct 2009 22:13:26 +0000"  >&lt;p&gt;Doug,&lt;/p&gt;

&lt;p&gt;I&apos;m +1 on the approach in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-163&quot; title=&quot;Each language Avro supports should be a separate package&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-163&quot;&gt;&lt;del&gt;AVRO-163&lt;/del&gt;&lt;/a&gt;.  (Quoting you&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We could package avroj as an executable jar that includes all of the jars we depend on, and release that as a separate binary artifact.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yep, I think having a jar file that contains everything would be a boon.&lt;/p&gt;

&lt;p&gt;I&apos;d suggest we commit this as is, and then create a new JIRA to re-formulate avroj as avroj.jar.  Seems like that would be easier after the dust in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-163&quot; title=&quot;Each language Avro supports should be a separate package&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-163&quot;&gt;&lt;del&gt;AVRO-163&lt;/del&gt;&lt;/a&gt; settles.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12770685" author="philip" created="Tue, 27 Oct 2009 22:34:08 +0000"  >&lt;p&gt;I&apos;m working on updating the build.xml file to create the &quot;big jar&quot; that includes everything, so stay tuned.&lt;/p&gt;</comment>
                            <comment id="12770701" author="philip" created="Tue, 27 Oct 2009 23:39:13 +0000"  >&lt;p&gt;Attached patch drops the shell script and combines everything in build/lib and build/classes into one jar, called &quot;avroj-${version}.jar&quot;.  Nothing on the java side has changed (with the possible exception of my cleaning up some trailing whitespace on lines added in this patch) but build.xml has changed.&lt;/p&gt;</comment>
                            <comment id="12770710" author="cutting" created="Tue, 27 Oct 2009 23:59:03 +0000"  >&lt;p&gt;I just committed this.  Thanks, Philip!&lt;/p&gt;

&lt;p&gt;I changed two javadoc comments, to make them more user-focused and less developer-focused.&lt;/p&gt;</comment>
                            <comment id="12770714" author="cutting" created="Wed, 28 Oct 2009 00:09:09 +0000"  >&lt;p&gt;It just occurred to me that, if we&apos;re going to distribute this binary, we should include the Apache license and the licenses of the included libraries.  Also, a &quot;version&quot; command would be nice to have, that prints the current version.  Shall I file these as separate issues?&lt;/p&gt;</comment>
                            <comment id="12770741" author="philip" created="Wed, 28 Oct 2009 01:14:08 +0000"  >&lt;p&gt;I filed &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-173&quot; title=&quot;Add &amp;quot;avroj version&amp;quot; command&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-173&quot;&gt;&lt;del&gt;AVRO-173&lt;/del&gt;&lt;/a&gt; (version) and &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-174&quot; title=&quot;Add appropriate license files to &amp;quot;avroj.jar&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-174&quot;&gt;&lt;del&gt;AVRO-174&lt;/del&gt;&lt;/a&gt; (license).  If you&apos;re aware of any Apache-precedent for the license files, please advice in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-174&quot; title=&quot;Add appropriate license files to &amp;quot;avroj.jar&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-174&quot;&gt;&lt;del&gt;AVRO-174&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12423374" name="AVRO-149.patch.txt" size="10608" author="philip" created="Tue, 27 Oct 2009 23:39:13 +0000"/>
                            <attachment id="12422766" name="AVRO-149.patch.txt" size="12125" author="philip" created="Wed, 21 Oct 2009 04:59:40 +0000"/>
                            <attachment id="12422186" name="AVRO-149.patch.txt" size="10086" author="philip" created="Thu, 15 Oct 2009 06:04:51 +0000"/>
                            <attachment id="12422264" name="AVRO-149.patch.v2.txt" size="12762" author="philip" created="Thu, 15 Oct 2009 19:13:02 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 15 Oct 2009 16:25:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94477</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 13 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dyjr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79527</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-150] Ant tasks re-generate code even if it&apos;s up-to-date</title>
                <link>https://issues.apache.org/jira/browse/AVRO-150</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The Ant tasks for Java&apos;s protocol and schema should skip generation when the generated files are newer than their source.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12438220">AVRO-150</key>
            <summary>Ant tasks re-generate code even if it&apos;s up-to-date</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="johnyu0520">John Yu</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Thu, 15 Oct 2009 16:48:32 +0000</created>
                <updated>Wed, 8 Sep 2010 21:07:37 +0000</updated>
                            <resolved>Tue, 15 Jun 2010 23:39:38 +0000</resolved>
                                    <version>1.3.3</version>
                                    <fixVersion>1.4.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12875471" author="johnyu0520" created="Fri, 4 Jun 2010 04:48:04 +0000"  >&lt;p&gt;Hi, we are a group of CMU master students that is thinking of contributing to Avro. We plan to tackle this issue first,  and would just like to check-in with you beforehand to see if this is ok.&lt;/p&gt;</comment>
                            <comment id="12875473" author="hammer" created="Fri, 4 Jun 2010 04:51:54 +0000"  >&lt;p&gt;Hey John,&lt;/p&gt;

&lt;p&gt;Welcome! It&apos;s certainly okay to tackle this issue. Excited to have new contributors in the community.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Jeff&lt;/p&gt;</comment>
                            <comment id="12875490" author="johnyu0520" created="Fri, 4 Jun 2010 05:32:53 +0000"  >&lt;p&gt;Hi Jeff,&lt;/p&gt;

&lt;p&gt;Thanks for the reply. Because we are new to this, what is our next step? Will you assign this issue to us or anyone can submit patch to it? &lt;/p&gt;

&lt;p&gt;John&lt;/p&gt;</comment>
                            <comment id="12875619" author="hammer" created="Fri, 4 Jun 2010 14:57:31 +0000"  >&lt;p&gt;Hey John,&lt;/p&gt;

&lt;p&gt;The next step is for you to attach a patch to this issue. See &lt;a href=&quot;https://cwiki.apache.org/confluence/display/AVRO/How+To+Contribute&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/confluence/display/AVRO/How+To+Contribute&lt;/a&gt; for more detailed instructions on how to generate the patch.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Jeff&lt;/p&gt;</comment>
                            <comment id="12875841" author="johnyu0520" created="Sat, 5 Jun 2010 02:48:54 +0000"  >&lt;p&gt;Hi Jeff,&lt;/p&gt;

&lt;p&gt;I have attached a patch we have worked on today. Can you give any comments or feedbacks of it? Thanks&lt;/p&gt;

&lt;p&gt;John&lt;/p&gt;</comment>
                            <comment id="12876346" author="cutting" created="Mon, 7 Jun 2010 18:11:36 +0000"  >&lt;p&gt;Unfortunately I think this is a little harder than that.  The compiler&apos;s destination is a root directory.  If you compile a protocol named org.foo.Bar then it will generate an interface in org/foo/Bar.java.  If that protocol uses a record named com.baz.Goop then it will also write com/baz/Goop.java.  Etc.&lt;/p&gt;

&lt;p&gt;If we assume that org.foo.Bar lives in a file named ${src}/org/foo/Bar.avpr, then we can simply check the dates between that and  ${dest}/org/foo/Bar.java, but I&apos;m not sure whether we should assume that.&lt;/p&gt;

&lt;p&gt;An alternative would be to change SpecificCompiler#compileToDestination() to compare dates and write nothing when the existing file is newer.  The SpecificCompiler still has to parse the input file and generate output, but, if no new files are written it should prevent subsequent javac and jar processing.&lt;/p&gt;</comment>
                            <comment id="12876350" author="johnyu0520" created="Mon, 7 Jun 2010 18:22:41 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Thanks for the reply. First, I think we should not make that assumption because in quickstart tutorial, the ant task scan all &quot;avpr&quot; and &quot;avsc&quot; files in input folder &quot;*&lt;b&gt;/&lt;/b&gt;.avpr&quot;. &lt;/p&gt;

&lt;p&gt;Second, if we change SpecificCompiler#compileToDestination(), that means everytime we need to pay computation cost to parse the schema and protocol file. Most of the computation time are not saved. But it actually can avoid running later tasks, such as jar. I want to go with the second choice. What do you think? &lt;/p&gt;</comment>
                            <comment id="12876351" author="cutting" created="Mon, 7 Jun 2010 18:26:52 +0000"  >&lt;p&gt;I agree that fixing this in compileToDestination() is preferable.&lt;/p&gt;</comment>
                            <comment id="12876545" author="johnyu0520" created="Tue, 8 Jun 2010 04:50:28 +0000"  >&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;Just to double check and clarify the following two things.&lt;/p&gt;

&lt;p&gt;First, we will do the checking of timestamp in SpecificCompiler#compileToDestination() and write nothing when the existing file is newer.  Out of curiosity, couldn&apos;t we write what we have into disk, since we have already spent the computation power to parse the protocol and schema?  Or would doing that cause logical problems or because writing to disk could also be very resource intensive in this case?&lt;/p&gt;

&lt;p&gt;Second, in the comment you have mentioned &quot;if no new files are written it should prevent subsequent javac and jar processing.&quot;  We are thinking that while the protocols and schemas may not have changed, other java source files might have.  So we are not sure if we should really prevent the javac and jar from running if no new parsing for avpr/avsc has happened.  In addition, since we can&apos;t assume the order in which the tasks are called in Ant, would it be ok if we stop Ant right then and there?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12876721" author="cutting" created="Tue, 8 Jun 2010 16:46:16 +0000"  >&lt;p&gt;&amp;gt; couldn&apos;t we write what we have into disk, since we have already spent the computation power to parse the protocol and schema?&lt;/p&gt;

&lt;p&gt;That would trigger further re-compilation, which we are trying to avoid.  We might, when the file is present but with a newer date, check its size.  If it&apos;s not the same size, then we should re-write it anyway, as the schema has probably changed even though the date is wrong.  We could even compare the content before re-writing, and only re-write if the content is different, but that&apos;s more expensive and probably overkill.  If a workspace becomes confused and folks are seeing unexpected problems, &apos;ant clean&apos; should always repair things.  So I&apos;d suggest checking the size as a double-check, but wouldn&apos;t bother checking the content.&lt;/p&gt;

&lt;p&gt;&amp;gt; we are not sure if we should really prevent the javac and jar from running&lt;/p&gt;

&lt;p&gt;You shouldn&apos;t have to do anything explicit to stop these.  The javac task will only compile things if .java files are newer than corresponding .class files.  For jar, if we pass update=&quot;true&quot; then it will incrementally update changed files in the jar rather than re-writing the entire jar.&lt;/p&gt;</comment>
                            <comment id="12877292" author="johnyu0520" created="Thu, 10 Jun 2010 02:18:26 +0000"  >&lt;p&gt;Hello everyone,&lt;/p&gt;

&lt;p&gt;1. I accidentally set the status of this issue to &quot;patch available&quot;, which is a mistake.  Can someone who has the privileges unset it for me?&lt;/p&gt;

&lt;p&gt;2. A new patch that reflects the discussion with Doug has been uploaded.&lt;/p&gt;


&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12879188" author="cutting" created="Tue, 15 Jun 2010 23:39:38 +0000"  >&lt;p&gt;I just committed this.  I fixed a few other things in build.xml so that, e.g., javacc files are not re-generated either.  Now when running &apos;ant compile; ant compile&apos; the second compilation does nothing.  The patch also failed to correctly detect unchanged protocol files, so I fixed that too, and fixed the test to remove its files before running, so that it can be run twice without &apos;ant clean&apos; between.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12446734" name="AVRO-150.patch" size="3718" author="johnyu0520" created="Thu, 10 Jun 2010 02:15:56 +0000"/>
                            <attachment id="12446382" name="AVRO-150.patch" size="3242" author="johnyu0520" created="Fri, 4 Jun 2010 23:27:34 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 4 Jun 2010 04:48:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94478</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 32 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dyjz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79528</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-151] Validating Avro schema parser in C</title>
                <link>https://issues.apache.org/jira/browse/AVRO-151</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;This Jira is for tracking commit r825593 &quot;Added a validating Avro schema parser in C&quot;&lt;/p&gt;

&lt;p&gt;This commit adds a schema parser which validates the schema while generating an intermediate tree of value objects for printing, reading, skipping and writing avro values.  You&apos;ll notice that the C code is written in an object-oriented fashion with clear interfaces, data encapsulation, etc.  My primary focus at this time is to make the core source as easy to understand and work on as possible to make it easier to add new developers moving forward.  I plan to add a developers guide to src/c soon to help toward that end as well.  I&apos;ve separated the public API into avro.h and the private API into avro_private.h.  You&apos;ll notice that currently there is no public API.  Once the internals are built correctly (with better error reporting), sketching out the public API will be easier and can focus on usability and flexibility for consumers of Avro in C.&lt;/p&gt;

&lt;p&gt;I&apos;m very near to having Avro file object containers working and you can see the code for that in the source (avro_file_container.c).  It correctly parses the interop.avsc and reads the non-recursive elements.  My only blocker for file containers now is support for reading recursive schemas (I&apos;m currently using a decorator when I should have use a factory) and the fact that a few complex types don&apos;t have reading/writing support.  I expect file object container support to be finished soon.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12438260">AVRO-151</key>
            <summary>Validating Avro schema parser in C</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="massie">Matt Massie</assignee>
                                    <reporter username="massie">Matt Massie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 15 Oct 2009 23:35:56 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:02 +0000</updated>
                            <resolved>Thu, 15 Oct 2009 23:44:43 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12766324" author="massie" created="Thu, 15 Oct 2009 23:44:27 +0000"  >&lt;p&gt;My apologies for having two commit to push this code.  The second commit was required because I failed to update CHANGES.txt.  &lt;/p&gt;

&lt;p&gt;------------------------------------------------------------------------&lt;br/&gt;
r825702 | massie | 2009-10-15 16:41:26 -0700 (Thu, 15 Oct 2009) | 2 lines&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-151&quot; title=&quot;Validating Avro schema parser in C&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-151&quot;&gt;&lt;del&gt;AVRO-151&lt;/del&gt;&lt;/a&gt;. Validating Avro schema parser for C (code committed r825593)&lt;/p&gt;

&lt;p&gt;------------------------------------------------------------------------&lt;br/&gt;
r825593 | massie | 2009-10-15 11:00:21 -0700 (Thu, 15 Oct 2009) | 3 lines&lt;/p&gt;

&lt;p&gt;Added a validating Avro schema parser in C&lt;/p&gt;</comment>
                            <comment id="12766387" author="thiru_mg" created="Fri, 16 Oct 2009 03:11:46 +0000"  >&lt;p&gt;It appears that you forgot to check-in src/c/configure. Or am I missing something?&lt;/p&gt;</comment>
                            <comment id="12766394" author="massie" created="Fri, 16 Oct 2009 03:45:35 +0000"  >&lt;p&gt;$ ant compile-c&lt;/p&gt;

&lt;p&gt;takes care of generating the configure script.  You can also just run&lt;br/&gt;
`autoreconf -f -i` in the src/c directory to create it.&lt;/p&gt;

&lt;p&gt;-Matt&lt;/p&gt;

&lt;p&gt;On Thu, Oct 15, 2009 at 8:12 PM, Thiruvalluvan M. G. (JIRA) &amp;lt;jira@apache.org&lt;/p&gt;
</comment>
                            <comment id="12766403" author="phunt" created="Fri, 16 Oct 2009 04:31:48 +0000"  >&lt;p&gt;Matt, Re Thiru&apos;s comment, also a lesson learned in zookeeper, we found that not distributing configure with the release&lt;br/&gt;
was a problem in some cases. However checking into svn is not optimal either. An alternative that seems to be&lt;br/&gt;
working well is to; 1) don&apos;t checking configure to svn, just the configure.in and other auto* src files, 2) generate&lt;br/&gt;
configure as part of the package target in build.xml and include the generated files in the release.&lt;/p&gt;

&lt;p&gt;When researching for ZK I found the following to give some very good insight, see the section &quot;great idea in theory&quot;:&lt;br/&gt;
&lt;a href=&quot;http://www.redhat.com/magazine/012oct05/features/autotools/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.redhat.com/magazine/012oct05/features/autotools/&lt;/a&gt;&lt;br/&gt;
&quot;Unfortunately, due to the fact that the original software developer probably uses older versions of the autotools than the RPM packager, this does not always do the right thing.&quot;&lt;/p&gt;</comment>
                            <comment id="12766418" author="massie" created="Fri, 16 Oct 2009 05:15:27 +0000"  >&lt;p&gt;Patrick-&lt;/p&gt;

&lt;p&gt;My current approach is to checkin the configure.in and Makefile.am files.  In build.xml, there is an uptodate target that checks for a configure script and if it&apos;s not there runs `autoreconf -f -i`.  In the near future, I plan to use the &apos;distdir&apos; target in autotools to create a C source directory for distribution.  This will ensure that consumers of Avro C code don&apos;t need to have autotools installed to build it.&lt;/p&gt;

&lt;p&gt;For pure autotools projects, a simple `make distcheck` runs unit tests for the package and, if they pass, creates a tarball ready for distribution.  I&apos;ll try to mimic that behavior in Avro as much as possible although bolting an autotools project to an ant project isn&apos;t optimal.  &lt;/p&gt;

&lt;p&gt;You can expect a new &apos;package-c&apos; target in build.xml from me soon.  Thanks for the feedback and link.  &lt;/p&gt;

&lt;p&gt;-Matt&lt;/p&gt;</comment>
                            <comment id="12766425" author="phunt" created="Fri, 16 Oct 2009 05:38:08 +0000"  >&lt;p&gt;Sounds good, I think your point &quot;This will ensure that consumers of Avro C code don&apos;t need to have autotools installed to build it.&quot; is&lt;br/&gt;
part of the issue we saw in zk and the key point here - the std use case for end users is to have a configure such that they can&lt;br/&gt;
&quot;./configure; make&quot; and off to the races.&lt;/p&gt;</comment>
                            <comment id="12766609" author="cutting" created="Fri, 16 Oct 2009 17:15:34 +0000"  >&lt;p&gt;For future reference, the primary commit for this issue was revision 825593.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://svn.apache.org/viewvc?rev=825593&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?rev=825593&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Matt, in the future, remember to not only update CHANGES.txt, but also to name the Jira issue in each commit message.  That creates links from Jira to the commit, which can be very convenient.&lt;/p&gt;

&lt;p&gt;The C code is still in an early state, and does not yet require reviews before each commit.  But it&apos;s still best practice to file an issue, post the patch, and then wait a day or so for feedback before committing.  As the C code becomes complete and others start to use and contribute to it, this will evolve to requiring another committer to +1 each patch before it commits.  We&apos;re willing to streamline that now, but we still want a Jira issue per patch and an opportunity for folks to remark on things before they&apos;re committed.  Thanks!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 16 Oct 2009 03:11:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94479</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 15 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dyk7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79529</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-152] Adding &quot;doc&quot; to record schemas, a la javadoc field and class comments.</title>
                <link>https://issues.apache.org/jira/browse/AVRO-152</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The patch to follow adds &quot;doc&quot; to the understood schema language (for records and enums), and uses said doc when it generates java in SpecificCompiler.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12438264">AVRO-152</key>
            <summary>Adding &quot;doc&quot; to record schemas, a la javadoc field and class comments.</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="philip">Philip Zeyliger</assignee>
                                    <reporter username="philip">Philip Zeyliger</reporter>
                        <labels>
                    </labels>
                <created>Fri, 16 Oct 2009 03:00:34 +0000</created>
                <updated>Tue, 13 Dec 2011 19:06:52 +0000</updated>
                            <resolved>Fri, 8 Jan 2010 19:50:19 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12766392" author="philip" created="Fri, 16 Oct 2009 03:18:05 +0000"  >&lt;p&gt;If you want to follow along how this patch developed, see &lt;a href=&quot;http://github.com/philz/avro/tree/docs&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/philz/avro/tree/docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This patch, which won&apos;t apply without &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-149&quot; title=&quot;&amp;quot;avrotool&amp;quot; runner to execute avro commands from command-line&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-149&quot;&gt;&lt;del&gt;AVRO-149&lt;/del&gt;&lt;/a&gt; (though I could make it independent, if that proves to be useful; I sense that 149 will go in first, though), does the following:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Updates the spec to understand &quot;doc&quot; for records (both for the record class and its fields) and enums (only for the enum class).  I haven&apos;t dealt with the enum values themselves, because they&apos;re specified as an array, so don&apos;t have a natural place to put the &quot;doc&quot;.  I could make it a parallel array, of course, but for now I&apos;ve left it off.  I&apos;ve also not annotated protocols with &quot;docs&quot;, though they deserve the same treatment.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Everywhere where Schema and Field previous just had name, there&apos;s now &quot;name, doc&quot;.  That code was largely limited to Schema.java, so it wasn&apos;t a big deal.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I did minor refactoring and clean-up in Schema.java, and made TestSchema.java run all of its schemas through the SpecificCompiler.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I changed SpecificCompiler to output to a String, separating the generation, and the file-writing.  Performance isn&apos;t critical here, and this let me debug and test the actual code generation, without dealing with File IO.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I fixed a random bug in TestReflect, where the equals() method was wrong, and fixed a bug in TestValidatingIO, where I asserted that it is nonsense to have a fixed field of 0 bytes.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12766701" author="cutting" created="Fri, 16 Oct 2009 21:04:18 +0000"  >&lt;p&gt;You&apos;ve attached the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-149&quot; title=&quot;&amp;quot;avrotool&amp;quot; runner to execute avro commands from command-line&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-149&quot;&gt;&lt;del&gt;AVRO-149&lt;/del&gt;&lt;/a&gt;, not for this issue.&lt;/p&gt;</comment>
                            <comment id="12766707" author="cutting" created="Fri, 16 Oct 2009 21:16:42 +0000"  >&lt;p&gt;From your description, above, it sounds like you&apos;re doing a lot more than one thing in this patch.  Is it possible to put the bugfixes and refactorings into separate issues?&lt;/p&gt;</comment>
                            <comment id="12766718" author="philip" created="Fri, 16 Oct 2009 21:36:38 +0000"  >&lt;p&gt;Attaching the right patch this time; sorry about that.&lt;/p&gt;

&lt;p&gt;I could do a separate patch for TestReflect() and TestValidationIO().  I don&apos;t think the other stuff deserves it, though if you insist, I can take a stab at separating the doc support and the refactoring.&lt;/p&gt;</comment>
                            <comment id="12766766" author="cutting" created="Fri, 16 Oct 2009 23:06:25 +0000"  >&lt;p&gt;&amp;gt; if you insist, I can take a stab at separating the doc support and the refactoring [ ... ]&lt;/p&gt;

&lt;p&gt;I&apos;ve not had a chance to review this yet, but patches that do many things are harder to review.  Ease of review is important.  It&apos;s almost always better to have more small, specific, patches than one jumbo general patch.&lt;/p&gt;</comment>
                            <comment id="12766768" author="cutting" created="Fri, 16 Oct 2009 23:08:30 +0000"  >&lt;p&gt;&amp;gt; I&apos;ve not had a chance to review this yet [ ...]&lt;/p&gt;

&lt;p&gt;In concrete terms: if this were multiple, small patches, some of them might be reviewed and committed already.  As it stands, I don&apos;t want to dive into this one until Monday.&lt;/p&gt;</comment>
                            <comment id="12766781" author="philip" created="Sat, 17 Oct 2009 00:11:46 +0000"  >&lt;p&gt;I certainly agree in general.  Annoyingly, as often happens, the actual process was (do first steps), (realize need to refactor something), (do the rest) was not commutative, and I didn&apos;t stop myself in time to re-order the steps as they happened.&lt;/p&gt;

&lt;p&gt;Give it a shot for 10-20 minutes on Monday.  If it doesn&apos;t make sense, I&apos;ll find some other way to present it that does.  If it helps to see the steps I took explicitly, you can look at the git patches below.  Unfortunately, since they&apos;re not really independent, individually I can&apos;t file a JIRA for one of them, since they&apos;d either not apply or be works-in-progress that don&apos;t make sense.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/philz/avro/commit/b00e1a3bf4d1afc4244ccec15168b23229e2033e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/philz/avro/commit/b00e1a3bf4d1afc4244ccec15168b23229e2033e&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://github.com/philz/avro/commit/97db7d7b8ecc40c2ff112411247f6db14260a98f&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/philz/avro/commit/97db7d7b8ecc40c2ff112411247f6db14260a98f&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://github.com/philz/avro/commit/11b5d4c9caf68544de1027d3ed9da5baa2b21837&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/philz/avro/commit/11b5d4c9caf68544de1027d3ed9da5baa2b21837&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://github.com/philz/avro/commit/4d8c5bace37ef843fbfde2c8d63d35419f4125a8&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/philz/avro/commit/4d8c5bace37ef843fbfde2c8d63d35419f4125a8&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12766799" author="cutting" created="Sat, 17 Oct 2009 00:46:02 +0000"  >&lt;p&gt;If, after reviewing, I think they&apos;re separable, independent changes, and you&apos;re unwilling to split them into separate issues, then I&apos;ll split them myself.  But I&apos;d rather you did it first!&lt;/p&gt;

&lt;p&gt;And, again, I&apos;m not interested in looking at github anymore than I am in using Eclipse.  If you want me to look at something, please attach a patch to an issue in Jira.  Thanks!&lt;/p&gt;</comment>
                            <comment id="12767587" author="cutting" created="Mon, 19 Oct 2009 22:30:33 +0000"  >&lt;p&gt;Some comments on the patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You added a &quot;never returns null&quot; to Schema#getName().  This is not relevant to this issue, and it&apos;s not true.  The record schema used to represent a message&apos;s parameter list is anonymous.&lt;/li&gt;
	&lt;li&gt;You&apos;ve also made style changes (e.g., adding braces) in code unrelated to this issue.  Can you please remove these?&lt;/li&gt;
	&lt;li&gt;Do you intend the addition of new parameters to public Schema methods to be an incompatible change?  I&apos;m okay with this, but it must be called out, so that we&apos;re sure to list it as an incompatible change in the next release.&lt;/li&gt;
	&lt;li&gt;The refactoring of SpecificCompiler does not seem required by this issue.  It does perhaps simplify TestSpecificCompiler, but that also could be written to instead operate on files.  In either case, I would prefer this were addressed in a separate issue.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12768112" author="philip" created="Wed, 21 Oct 2009 06:38:50 +0000"  >&lt;p&gt;Thanks for the feedback.  As you&apos;ve no doubt noticed, I&apos;ve started a handful of JIRAs for the stuff that you feel is unrelated.  Once those settle down, I&apos;ll ressurect this one.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You added a &quot;never returns null&quot; to Schema#getName(). This is not relevant to this issue, and it&apos;s not true. The record schema used to represent a message&apos;s parameter list is anonymous.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ah, I see.  Schema.createRecord() is called by Protocol.parse().&lt;/p&gt;</comment>
                            <comment id="12770813" author="philip" created="Wed, 28 Oct 2009 07:13:46 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-165&quot; title=&quot;TestReflect has a bug in its equals method.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-165&quot;&gt;&lt;del&gt;AVRO-165&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-166&quot; title=&quot;Minor refactoring of Schema.java to better error reporting on bad schemas.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-166&quot;&gt;&lt;del&gt;AVRO-166&lt;/del&gt;&lt;/a&gt;, and &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-167&quot; title=&quot;Refactor of SpecificCompiler to facilitate easier testing&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-167&quot;&gt;&lt;del&gt;AVRO-167&lt;/del&gt;&lt;/a&gt; were pulled out into their own issues from the previous patches here.  The patch attached does what this ticket originally intended &amp;#8212; adds the notion of &quot;doc&quot; to schemas.&lt;/p&gt;</comment>
                            <comment id="12771179" author="cutting" created="Wed, 28 Oct 2009 22:58:41 +0000"  >&lt;p&gt;We should also add doc to protocols and their messages.  Note that this will require that the specific compiler generate a per-interface constant with the protocol definition, which is probably a good idea anyway.  (Currently we use reflection to re-construct specific protocols, which is fragile.)&lt;/p&gt;</comment>
                            <comment id="12795150" author="philip" created="Tue, 29 Dec 2009 20:56:43 +0000"  >&lt;p&gt;Finally got a chance to re-visit this.  Attaching a new patch; it applies against trunk.&lt;/p&gt;

&lt;p&gt;I added &quot;doc&quot; messages to protocols.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note that this will require that the specific compiler generate a per-interface constant with the protocol definition, which is probably a good idea anyway. (Currently we use reflection to re-construct specific protocols, which is fragile.)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m not quite sure what you mean here.  Docs aren&apos;t being generated when a schema is retrieved via reflection.&lt;/p&gt;

&lt;p&gt;I haven&apos;t added per-parameter docs (akin to &quot;@param&quot; in javadoc) yet.  That&apos;s a natural next thing to do, though.  I&apos;d like to get this in with the current functionality, though.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12797778" author="cutting" created="Thu, 7 Jan 2010 20:14:34 +0000"  >&lt;p&gt;This looks good.  A few minor issues:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the patch is stale, since I took so long to review it.  Sorry!&lt;/li&gt;
	&lt;li&gt;why all the SpecificCompiler#doc() methods?  Why not just call, e.g., doc(out, indent, schema.getDoc())?&lt;/li&gt;
	&lt;li&gt;shouldn&apos;t we now also extend avrogen to copy comments through?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12797886" author="philip" created="Fri, 8 Jan 2010 02:40:26 +0000"  >&lt;blockquote&gt;&lt;p&gt;the patch is stale, since I took so long to review it. Sorry!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No worries.  I&apos;ve updated the patch.&lt;/p&gt;

&lt;p&gt;It&apos;s always strangely pleasant when patches go stale because there are new features to adapt to.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;why all the SpecificCompiler#doc() methods? Why not just call, e.g., doc(out, indent, schema.getDoc())?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It was a good idea when there were only 2 types, and it felt cleaner.  Fixed it to just use String and one doc() method.  Avoided the temptation to introduce a &quot;hasDoc&quot; interface.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;shouldn&apos;t we now also extend avrogen to copy comments through?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve filed &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-296&quot; title=&quot;Extend Avro IDL (was genavro) to do &amp;quot;doc&amp;quot; fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-296&quot;&gt;&lt;del&gt;AVRO-296&lt;/del&gt;&lt;/a&gt;.  It needs to be done, but it&apos;s not 100% trivial (because javacc strips out comments, and that needs to get undone), so I&apos;d rather take a pass at it separately.&lt;/p&gt;</comment>
                            <comment id="12798155" author="cutting" created="Fri, 8 Jan 2010 19:50:19 +0000"  >&lt;p&gt;I just committed this.  Thanks, Philip!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12445121">AVRO-300</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12422319" name="AVRO-149.patch.txt" size="10086" author="philip" created="Fri, 16 Oct 2009 03:18:05 +0000"/>
                            <attachment id="12429707" name="AVRO-152.patch.txt" size="33254" author="philip" created="Fri, 8 Jan 2010 02:40:26 +0000"/>
                            <attachment id="12429088" name="AVRO-152.patch.txt" size="32111" author="philip" created="Tue, 29 Dec 2009 20:56:43 +0000"/>
                            <attachment id="12423418" name="AVRO-152.patch.txt" size="23202" author="philip" created="Wed, 28 Oct 2009 07:13:46 +0000"/>
                            <attachment id="12422401" name="AVRO-152.patch.txt" size="45002" author="philip" created="Fri, 16 Oct 2009 21:36:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 16 Oct 2009 21:04:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94480</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10342"><![CDATA[Incompatible change]]></customfieldvalue>
    <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 3 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dykf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79530</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Signature of Schema constructors has been changed to include a &amp;quot;doc&amp;quot; parameter.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-153] Naming conventions for avro schemas, records and protocols</title>
                <link>https://issues.apache.org/jira/browse/AVRO-153</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;It would be nice to add a few paragraphs to the spec with suggested naming conventions.  I&apos;m ambivalent as to what they actually are, but while the paint hasn&apos;t fully settled, it might be nice to lead the project in one direction or another.&lt;/p&gt;

&lt;p&gt;Any thoughts on what the best style here is?&lt;/p&gt;</description>
                <environment></environment>
        <key id="12438266">AVRO-153</key>
            <summary>Naming conventions for avro schemas, records and protocols</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="philip">Philip Zeyliger</reporter>
                        <labels>
                    </labels>
                <created>Fri, 16 Oct 2009 03:20:43 +0000</created>
                <updated>Mon, 25 Oct 2010 17:33:08 +0000</updated>
                                                                            <component>spec</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12766699" author="cutting" created="Fri, 16 Oct 2009 21:02:14 +0000"  >&lt;p&gt;We currently define identifiers with:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Record, field and enum names must:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;start with &lt;span class=&quot;error&quot;&gt;&amp;#91;A-Za-z_&amp;#93;&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;subsequently contain only &lt;span class=&quot;error&quot;&gt;&amp;#91;A-Za-z0-9_&amp;#93;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;We however don&apos;t say anything about namespaces.  I propose that namespaces must be a series of dot-delimited identifiers as defined above.&lt;/p&gt;

&lt;p&gt;As for encouraged naming conventions, I&apos;d opt for Java&apos;s:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;namespaces are hierarchical, with the root at left, starting with a reversed domain name.&lt;/li&gt;
	&lt;li&gt;namespace elements are lowercase&lt;/li&gt;
	&lt;li&gt;record and enum names are capitalized CamelCase&lt;/li&gt;
	&lt;li&gt;field and message names are uncapitalized camelCase&lt;/li&gt;
	&lt;li&gt;enum symbols are all-cap&lt;/li&gt;
	&lt;li&gt;acronyms embeeded in names are capitalized, e.g., Md5Hash, BaseUrl, etc.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12778511" author="hammer" created="Mon, 16 Nov 2009 20:34:33 +0000"  >&lt;p&gt;Pulling in some comments from Doug on the dev mailing list about the expanded scope for this issue:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The spec should be updated.  Schemas can specify a namespace.  If they&apos;re nested in another schema or protocol then the namespace defaults to the namespace of the containing schema or protocol.&lt;/p&gt;

&lt;p&gt;Another thing that should be updated in the spec is that a name can be namespace-qualified.  This is useful to refer to types in a different namespace, e.g., a field like:&lt;/p&gt;
 &lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {&amp;quot;name&amp;quot;}&lt;/span&gt; &lt;/div&gt;

&lt;p&gt;This is related to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-153&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-153&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The spec currently prohibits dots in identifiers.  We should clarify that dots are permitted in namespaces, and that, if present in a name, the last dot separates the name from the namespace.&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="12801953" author="cutting" created="Mon, 18 Jan 2010 21:06:03 +0000"  >&lt;p&gt;This is mostly a duplicate of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-253&quot; title=&quot;Spec should indicate rules for forming full name from &amp;quot;name&amp;quot; and &amp;quot;namespace&amp;quot; properties for named schemas&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-253&quot;&gt;&lt;del&gt;AVRO-253&lt;/del&gt;&lt;/a&gt;, which has been fixed.  The spec now better defines names and namespaces.  The spec does not yet have recommendations about, e.g., use of capitalization within names, etc.  Philip, do you still feel we should add that to the spec?&lt;/p&gt;</comment>
                            <comment id="12924105" author="plinehan" created="Sat, 23 Oct 2010 01:16:36 +0000"  >&lt;p&gt;I think it makes sense to recommend naming conventions.  If not in the spec itself, at least in some kind of &quot;style guide&quot; quickly accessible from the main Avro web pages.  Protobut has a style guide in this vein:  &lt;a href=&quot;http://code.google.com/apis/protocolbuffers/docs/style.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://code.google.com/apis/protocolbuffers/docs/style.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It would also be good to include on that page the recommended file extensions for the various Avro files.  As a n00b, I had to induce this convention from disparate pages on the web.  The convention seems to be:&lt;/p&gt;

&lt;p&gt;*.avsc:  Avro type schema&lt;br/&gt;
*.avpr:  Avro protocol schema&lt;br/&gt;
*.avdl:  Avro IDL file&lt;br/&gt;
*.avro:  Avro data file&lt;/p&gt;</comment>
                            <comment id="12924639" author="cutting" created="Mon, 25 Oct 2010 17:33:08 +0000"  >&lt;p&gt;+1 for a style guide &amp;amp; standard documenting file extensions.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12443235">AVRO-253</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 16 Oct 2009 21:02:14 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94481</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 14 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dykn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79531</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-154] Tool to induce schema using reflection</title>
                <link>https://issues.apache.org/jira/browse/AVRO-154</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Patch that follows gives command-line access to ReflectData&apos;s getSchema() API, which creates an AVRO schema based on reflection.&lt;/p&gt;

&lt;p&gt;Here&apos;s an example:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;   $ src/scripts/avroj.sh induce build/test/classes org.apache.avro.BarRecord
    {&quot;type&quot;:&quot;record&quot;,&quot;name&quot;:&quot;BarRecord&quot;,&quot;namespace&quot;:&quot;org.apache.avro&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;beerMsg&quot;,&quot;type&quot;:&quot;string&quot;}]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12438272">AVRO-154</key>
            <summary>Tool to induce schema using reflection</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="philip">Philip Zeyliger</assignee>
                                    <reporter username="philip">Philip Zeyliger</reporter>
                        <labels>
                    </labels>
                <created>Fri, 16 Oct 2009 06:17:34 +0000</created>
                <updated>Tue, 13 Dec 2011 19:06:52 +0000</updated>
                            <resolved>Fri, 20 Nov 2009 04:39:47 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12766437" author="philip" created="Fri, 16 Oct 2009 06:19:28 +0000"  >&lt;p&gt;Patch depends on &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-149&quot; title=&quot;&amp;quot;avrotool&amp;quot; runner to execute avro commands from command-line&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-149&quot;&gt;&lt;del&gt;AVRO-149&lt;/del&gt;&lt;/a&gt;, naturally.&lt;/p&gt;</comment>
                            <comment id="12766698" author="cutting" created="Fri, 16 Oct 2009 20:51:06 +0000"  >&lt;p&gt;This is a great addition.&lt;/p&gt;

&lt;p&gt;Should we add an option to pretty-print the schema?&lt;/p&gt;

&lt;p&gt;Should we add an option/command to induce protocols from an interface too?&lt;/p&gt;</comment>
                            <comment id="12766743" author="philip" created="Fri, 16 Oct 2009 22:27:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;Should we add an option to pretty-print the schema?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, but not quite yet?  I want to figure out how to do command-line parsing for tools, but I want to do some more research and have a couple more examples before I get there.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Should we add an option/command to induce protocols from an interface too?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Probably, but I&apos;m not yet sure how to do it.  getProtocol() requires paranamer, so whereas it makes sense to point &quot;induce&quot; at a POJO, I&apos;m not sure if it makes sense to point it at an arbitrary class &amp;#8212; chances are, it won&apos;t have the paranamer data.  We could run paranamer from within the tool, but that&apos;s sufficiently different that I&apos;d rather leave it for a different JIRA.&lt;/p&gt;</comment>
                            <comment id="12766745" author="philip" created="Fri, 16 Oct 2009 22:28:24 +0000"  >&lt;p&gt;1-line change to previous patch to get the singleton ReflectData instead of constructing a new one.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;[0]doorstop:induce:avro(213828)$git show
commit aa3c28c9ba2fc058fcd4b275eeff80090c54e8fc
Author: Philip Zeyliger &amp;lt;philip@cloudera.com&amp;gt;
Date:   Fri Oct 16 15:26:52 2009 -0700

    Grabbing singleton instance of ReflectData.

diff --git a/src/java/org/apache/avro/reflect/InduceSchemaTool.java b/src/java/org/apache/avro/reflect/InduceSchemaTool.java
index de6121f..4245dff 100644
--- a/src/java/org/apache/avro/reflect/InduceSchemaTool.java
+++ b/src/java/org/apache/avro/reflect/InduceSchemaTool.java
@@ -54,6 +54,6 @@ public class InduceSchemaTool implements Tool {
     }
 
     Class&amp;lt;?&amp;gt; klass = classLoader.loadClass(className);
-    System.out.println(new ReflectData().getSchema(klass).toString());
+    System.out.println(ReflectData.get().getSchema(klass).toString());
   }
 }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12770808" author="philip" created="Wed, 28 Oct 2009 06:34:02 +0000"  >&lt;p&gt;Doug,&lt;/p&gt;

&lt;p&gt;Now that &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-149&quot; title=&quot;&amp;quot;avrotool&amp;quot; runner to execute avro commands from command-line&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-149&quot;&gt;&lt;del&gt;AVRO-149&lt;/del&gt;&lt;/a&gt; is done, this is ready for review/commit.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12780398" author="philip" created="Fri, 20 Nov 2009 02:57:45 +0000"  >&lt;p&gt;Updated patch to work on current trunk.&lt;/p&gt;</comment>
                            <comment id="12780431" author="cutting" created="Fri, 20 Nov 2009 04:39:47 +0000"  >&lt;p&gt;I just committed this.  Thanks, Philip!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12425561" name="AVRO-154.patch.txt" size="4537" author="philip" created="Fri, 20 Nov 2009 02:57:45 +0000"/>
                            <attachment id="12422410" name="AVRO-154.patch.txt" size="3857" author="philip" created="Fri, 16 Oct 2009 22:28:24 +0000"/>
                            <attachment id="12422325" name="AVRO-154.patch.txt" size="4241" author="philip" created="Fri, 16 Oct 2009 06:19:28 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 16 Oct 2009 20:51:06 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94482</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 10 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dykv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79532</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-155] Make avro.io.DataFileReader iterable</title>
                <link>https://issues.apache.org/jira/browse/AVRO-155</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;When reading records out of a file object container using the Python bindings, it would be great to be able to say:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; record in dfr:
  &amp;lt;&lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; something with record&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There&apos;s already a &quot;next()&quot; method defined on the DataFileReader, but the _&lt;em&gt;iter&lt;/em&gt;_ method is not defined and we &quot;return None&quot; instead of &quot;raise StopIteration&quot; when out of records.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12438423">AVRO-155</key>
            <summary>Make avro.io.DataFileReader iterable</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="hammer">Jeff Hammerbacher</assignee>
                                    <reporter username="hammer">Jeff Hammerbacher</reporter>
                        <labels>
                    </labels>
                <created>Mon, 19 Oct 2009 08:53:31 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:02 +0000</updated>
                            <resolved>Tue, 20 Oct 2009 06:27:16 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>python</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12767250" author="hammer" created="Mon, 19 Oct 2009 09:05:00 +0000"  >&lt;p&gt;Make DataFileReader iterable. Note that I didn&apos;t run the tests because I only have Java 5 on my box (thanks, Apple). If you have Java 6 and can check that tests pass, that would be great. If folks rely on next() returning &quot;None&quot; in a test, then some things will break.&lt;/p&gt;</comment>
                            <comment id="12767280" author="sharadag" created="Mon, 19 Oct 2009 10:44:42 +0000"  >&lt;p&gt;ant test worked fine with the patch.&lt;/p&gt;</comment>
                            <comment id="12767282" author="sharadag" created="Mon, 19 Oct 2009 10:45:36 +0000"  >&lt;p&gt;Added the test case.&lt;/p&gt;</comment>
                            <comment id="12767284" author="hammer" created="Mon, 19 Oct 2009 10:49:06 +0000"  >&lt;p&gt;Thanks Sharad! Feel free to commit or ignore as you see fit.&lt;/p&gt;</comment>
                            <comment id="12767721" author="sharadag" created="Tue, 20 Oct 2009 06:27:16 +0000"  >&lt;p&gt;I just committed this. Thanks Jeff.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12422536" name="AVRO-155.patch" size="752" author="hammer" created="Mon, 19 Oct 2009 09:05:00 +0000"/>
                            <attachment id="12422544" name="AVRO-155_with_test.patch" size="1446" author="sharadag" created="Mon, 19 Oct 2009 10:45:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 19 Oct 2009 10:44:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94483</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 14 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dyl3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79533</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-156] Update links on website to point to correct wiki pages</title>
                <link>https://issues.apache.org/jira/browse/AVRO-156</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The wiki is case sensitive, and the &quot;wiki&quot; and &quot;FAQ&quot; links point to &quot;avro&quot; instead of &quot;Avro&quot;.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12438536">AVRO-156</key>
            <summary>Update links on website to point to correct wiki pages</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.svg">Trivial</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="hammer">Jeff Hammerbacher</assignee>
                                    <reporter username="hammer">Jeff Hammerbacher</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Oct 2009 08:01:13 +0000</created>
                <updated>Tue, 13 Dec 2011 19:06:49 +0000</updated>
                            <resolved>Tue, 20 Oct 2009 18:01:58 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12767742" author="hammer" created="Tue, 20 Oct 2009 08:01:47 +0000"  >&lt;p&gt;Trivial patch, fixing the links.&lt;/p&gt;</comment>
                            <comment id="12767895" author="cutting" created="Tue, 20 Oct 2009 18:01:58 +0000"  >&lt;p&gt;I just committed this.  Thanks, Jeff!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12422661" name="AVRO-156.patch" size="834" author="hammer" created="Tue, 20 Oct 2009 08:01:47 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 20 Oct 2009 18:01:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94484</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 14 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dylb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79534</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-157] Changes from code review</title>
                <link>https://issues.apache.org/jira/browse/AVRO-157</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;A couple weeks ago, Thiru did a walk-through of the code, and made some suggestions, which included:&lt;br/&gt;
some reorganization&lt;br/&gt;
thread safety&lt;br/&gt;
renaming some functions&lt;br/&gt;
some minor nit picking&lt;/p&gt;

&lt;p&gt;This patch is the result of those comments.  Nothing major has changed, but lots of code was touched due to renames, etc.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12438605">AVRO-157</key>
            <summary>Changes from code review</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sbanacho">Scott Banachowski</assignee>
                                    <reporter username="sbanacho">Scott Banachowski</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Oct 2009 18:20:02 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:02 +0000</updated>
                            <resolved>Wed, 28 Oct 2009 20:27:26 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12767901" author="sbanacho" created="Tue, 20 Oct 2009 18:38:03 +0000"  >&lt;p&gt;copy patch and sh to your trunk directory, then &lt;br/&gt;
sh applypatch157.sh&lt;/p&gt;</comment>
                            <comment id="12768067" author="sbanacho" created="Wed, 21 Oct 2009 04:01:45 +0000"  >&lt;p&gt;Revised patch, the original one won&apos;t work after &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-148&quot; title=&quot;Add ant target to build c++ project&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-148&quot;&gt;&lt;del&gt;AVRO-148&lt;/del&gt;&lt;/a&gt; was committed.  This patch is now compatible with the current revision.&lt;/p&gt;</comment>
                            <comment id="12771095" author="sbanacho" created="Wed, 28 Oct 2009 20:27:26 +0000"  >&lt;p&gt;Committed revision 830750.&lt;/p&gt;

&lt;p&gt;I went ahead and committed these, since changes were already previously suggested, and there were no further comments.&lt;br/&gt;
Thanks to Thiru for his suggestions, and if anybody else has input please feel free to make suggestions or submit patches.&lt;/p&gt;


</comment>
                    </comments>
                    <attachments>
                            <attachment id="12422764" name="AVRO-157.patch" size="50519" author="sbanacho" created="Wed, 21 Oct 2009 04:01:45 +0000"/>
                            <attachment id="12422707" name="applypatch157.sh" size="99" author="sbanacho" created="Tue, 20 Oct 2009 18:38:03 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94485</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 13 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dylj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79535</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-158] permit data file appends from java</title>
                <link>https://issues.apache.org/jira/browse/AVRO-158</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Avro file object container are mutable and we should test that fact.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12438615">AVRO-158</key>
            <summary>permit data file appends from java</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="hammer">Jeff Hammerbacher</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Oct 2009 20:12:56 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:02 +0000</updated>
                            <resolved>Sat, 7 Nov 2009 00:56:33 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12767969" author="cutting" created="Tue, 20 Oct 2009 22:05:31 +0000"  >&lt;p&gt;Here&apos;s a patch that implements this.&lt;/p&gt;</comment>
                            <comment id="12768000" author="cutting" created="Tue, 20 Oct 2009 23:01:41 +0000"  >&lt;p&gt;This patch adds a new DataFileWriter constructor that opens an existing data file.  Would it be better to have a single contructor (or perhaps factory method) that accepts an &quot;overwrite&quot; flag?  This would, when overwrite=false, if a file exists, open it for append, otherwise create a new one.  If overwrite=true, it would always create a new file.  Which is the most useful API for applications?&lt;/p&gt;</comment>
                            <comment id="12768121" author="philip" created="Wed, 21 Oct 2009 07:41:20 +0000"  >&lt;p&gt;Overall, looks good.&lt;/p&gt;

&lt;p&gt;Some comments:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Return the number of records in the file.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You removed &quot;according to its metadata&quot; from this comment.  I&apos;m not tied to the exact wording, but when I ran into this method for the first time, I assumed that it was going through the entire file and counting records, and thought, &quot;boy, that&apos;s a bad idea&quot;.  Exposing a bit of information about how it works, or what it&apos;s runtime is would be helpful.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;public DataFileWriter(File file, DatumWriter&amp;lt;D&amp;gt; dout)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t mind convenience methods for File, but the fact that DataFileWriter(File, DatumWriter) is so very different from DataFileWriter(Schema, File, DatumWriter) bugs me a bit.  I&apos;d prefer DataFileWriter.createForAppend(File, DatumWriter) as a factory method.  Isn&apos;t it possible to append with a different schema, btw?  How does that work?&lt;/p&gt;

&lt;p&gt;To answer the question you posed, I think a factory method with an enum, or just several factory methods.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;if (!file.exists())&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The Sun style guidelines prefer braces around if statements.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;} catch (Exception e) { &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If the code happens to throw a RuntimeException (OOM, say), it will get re-wrapped in another RuntimeException, which seems unnecessary.  Perhaps better to catch NoSuchAlgorithmException explicitly?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;testGenericAppend&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;testGenericAppend looks like it depends on testGenericWrite executing first.  I&apos;m not that familiar with this version of JUnit, but is it a goal that the individual tests run standalone?  In Junit3, setUp() and tearDown() were used for this.&lt;/p&gt;
</comment>
                            <comment id="12774082" author="cutting" created="Thu, 5 Nov 2009 21:21:18 +0000"  >&lt;p&gt;&amp;gt; You removed &quot;according to its metadata&quot; from this comment. &lt;/p&gt;

&lt;p&gt;Do you have alternate wording?  Arraylist#size() just says, &quot;Returns the number of elements in this list.&quot;  The arraylist class-level document does define order-of-algorithms bounds for different operations, including size().  So I suppose we could say, &quot;Runs in constant time&quot;, although we don&apos;t bother giving the order of algorithms for most other methods here.  Personally I think it&apos;s overkill.  We should perhaps warn folks away from things that might be unexpectedly slow, but I don&apos;t see a need to tell them that something that they should expect to be fast is in fact fast.&lt;/p&gt;

&lt;p&gt;&amp;gt; I&apos;d prefer DataFileWriter.createForAppend(File, DatumWriter) as a factory method.&lt;/p&gt;

&lt;p&gt;Factory methods make it hard to subclass.  Probably we should make opening the writer a separate method(s) from the constructor, but that should be done in a separate issue, and could be done for both readers and writers and would be an incompatible change.  If you feel strongly about this, please file that issue.&lt;/p&gt;

&lt;p&gt;&amp;gt; Perhaps better to catch NoSuchAlgorithmException explicitly?&lt;/p&gt;

&lt;p&gt;Done.  Good catch.&lt;/p&gt;

&lt;p&gt;&amp;gt; In Junit3, setUp() and tearDown() were used for this.&lt;/p&gt;

&lt;p&gt;I think @Before and @After methods are what&apos;s replaced these.  But they unfortunately are run before and after each @Test, so are a poor means to express dependencies.  In practice, JUnit runs tests in the order they are defined. The file to which this test is added already depends on this, as do many others, so I don&apos;t see addressing that as relevant to the current issue.&lt;/p&gt;</comment>
                            <comment id="12774502" author="philip" created="Sat, 7 Nov 2009 00:11:30 +0000"  >&lt;p&gt;I&apos;m +1 the current patch.&lt;/p&gt;

&lt;p&gt;Some responses to the comments:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do you have alternate wording?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, it&apos;s fine.  It just seemed unrelated, so I was wondering what was going on.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Factory methods make it hard to subclass.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Do you expect DataFileWriter to be subclassed?  It&apos;s not final, so presumably the answer is &quot;yes&quot;.  I&apos;m fine with the current implementation, but something about DataFileWriter(File, DatumWriter) being so different than DataFileWriter(Schema, OutputStream, DatumWriter) strikes me as odd.&lt;/p&gt;</comment>
                            <comment id="12774518" author="cutting" created="Sat, 7 Nov 2009 00:56:33 +0000"  >&lt;p&gt;I just committed this.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12438625">AVRO-161</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12424154" name="AVRO-158.patch" size="9329" author="cutting" created="Thu, 5 Nov 2009 21:21:18 +0000"/>
                            <attachment id="12422735" name="AVRO-158.patch" size="9219" author="cutting" created="Tue, 20 Oct 2009 22:05:31 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 20 Oct 2009 22:05:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94486</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 12 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dylr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79536</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-159] maven-avro-plugin: Allow maven builds to use avro</title>
                <link>https://issues.apache.org/jira/browse/AVRO-159</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description></description>
                <environment></environment>
        <key id="12438616">AVRO-159</key>
            <summary>maven-avro-plugin: Allow maven builds to use avro</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21146&amp;avatarType=issuetype">Sub-task</type>
                            <parent id="12472990">AVRO-647</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="scott_carey">Scott Carey</assignee>
                                    <reporter username="chirino">Hiram Chirino</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Oct 2009 20:14:09 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:47 +0000</updated>
                            <resolved>Thu, 16 Dec 2010 00:41:56 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="12767926" author="chirino" created="Tue, 20 Oct 2009 20:15:24 +0000"  >&lt;p&gt;Attaching a maven plugin implementation.  See BUILD.txt for details of how to build.  Need to get ant to automatically do that for us.&lt;/p&gt;</comment>
                            <comment id="12768013" author="phunt" created="Tue, 20 Oct 2009 23:41:24 +0000"  >&lt;p&gt;Hiram, I took a quick look at this and it differs pretty significantly from the approach I took:&lt;br/&gt;
&lt;a href=&quot;http://github.com/phunt/avro-maven-plugin&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/phunt/avro-maven-plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In particular I based mine on examples like javacc&apos;s plugin, which is more oriented to client use. From&lt;br/&gt;
what I see in what you&apos;ve attached it&apos;s more geared to building avro itself (paths in the mojo for avro main code, test&lt;br/&gt;
code, etc...)&lt;/p&gt;

&lt;p&gt;I did my docs in github (textile readme) while you are using maven docs (which is better) and you also&lt;br/&gt;
have a more sophisticated pom file.&lt;/p&gt;

&lt;p&gt;Can you review my mojo implementation (it&apos;s pretty simple) which splits the protocol and compiler (not committed yet,&lt;br/&gt;
but you get the idea) into separate goals. I propose that we use my mojo as the basis for the implementation, with&lt;br/&gt;
 your docs/pom updated to support. What do you think?&lt;/p&gt;</comment>
                            <comment id="12768085" author="phunt" created="Wed, 21 Oct 2009 05:29:19 +0000"  >&lt;p&gt;The attached patch does the following:&lt;/p&gt;

&lt;p&gt;1) protocol, schema compiler, and readme from phunt&apos;s github&lt;br/&gt;
2) pom and build file from the gz that Hiram attached (the gz is no longer needed, this takes precedence)&lt;br/&gt;
3) takes the basic contrib build structure from zookeeper&lt;/p&gt;

&lt;p&gt;and mashes them up.&lt;/p&gt;

&lt;p&gt;pending issues:&lt;/p&gt;

&lt;p&gt;1) how do you get maven to output to other than &quot;target&quot;? I tried specifying the build path&lt;br/&gt;
in pom.xml but it didn&apos;t seem to take.&lt;br/&gt;
2) build.xml for contrib is not tested (&quot;mvn compile&quot; in avro-maven-plugin works though)&lt;br/&gt;
3) need to add tests to verify protocol and schema compiler&lt;/p&gt;</comment>
                            <comment id="12768286" author="phunt" created="Wed, 21 Oct 2009 15:37:41 +0000"  >&lt;p&gt;another issue that I think also needs to be handled:&lt;/p&gt;

&lt;p&gt;4) really we don&apos;t want to compile the plugin against the latest avro release (1.2.0 say when 1.3.0 is being worked on)&lt;br/&gt;
so the pom file really needs to pickup the avro classes from the local avro build directory, not from maven repo (or&lt;br/&gt;
somehting like that)&lt;/p&gt;</comment>
                            <comment id="12769098" author="phunt" created="Fri, 23 Oct 2009 05:54:17 +0000"  >&lt;p&gt;Update: I had a chat with Hiram on IRC and he&apos;s going to look at 1 &amp;amp; 4, after which I&apos;ll tackle 2 &amp;amp;3.&lt;/p&gt;</comment>
                            <comment id="12888891" author="hammer" created="Thu, 15 Jul 2010 19:11:23 +0000"  >&lt;p&gt;Two implementations at &lt;a href=&quot;http://github.com/phunt/avro-maven-plugin/forkqueue&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/phunt/avro-maven-plugin/forkqueue&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12907685" author="philip" created="Thu, 9 Sep 2010 17:16:02 +0000"  >&lt;p&gt;I&apos;ve been using phunt&apos;s avro-maven-plugin and it&apos;s handy.  Would be even more handy if it were part of avro&apos;s published artifacts.&lt;/p&gt;

&lt;p&gt;Is anyone listening sufficiently a build.xml and Maven expert to make that work?&lt;/p&gt;</comment>
                            <comment id="12907688" author="scott_carey" created="Thu, 9 Sep 2010 17:22:00 +0000"  >&lt;p&gt;I&apos;ve been using something similar (built off the earlier version that only did *.avpr), but only for *.avsc files and not yet for *.avpr.    It would be very easy for me add this as a maven module, and build with maven, but then the build would depend on maven.  As you might expect, using maven to make a maven artifact is relatively easy.&lt;br/&gt;
I&apos;m not sure how to build a maven plugin artifact with ant/ivy since I&apos;m less familiar with that.&lt;/p&gt;</comment>
                            <comment id="12907695" author="philip" created="Thu, 9 Sep 2010 17:55:12 +0000"  >&lt;p&gt;Scott,&lt;/p&gt;

&lt;p&gt;The &quot;mvn-install&quot; target already does some magic to get avro into my ~/.m2cache (or whatever it is that it does).  Could we do something similar here?&lt;/p&gt;

&lt;p&gt;(Again, I&apos;m speaking with plenty of ignorance.)&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12971903" author="scott_carey" created="Thu, 16 Dec 2010 00:41:56 +0000"  >&lt;p&gt;Fixed as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-647&quot; title=&quot;Break avro.jar into avro.jar, avro-dev.jar and avro-hadoop.jar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-647&quot;&gt;&lt;del&gt;AVRO-647&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12466614">AVRO-572</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12472990">AVRO-647</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12422767" name="AVRO-159.patch" size="26094" author="phunt" created="Wed, 21 Oct 2009 05:29:19 +0000"/>
                            <attachment id="12422712" name="maven-avro-plugin.tar.gz" size="8558" author="chirino" created="Tue, 20 Oct 2009 20:15:24 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 20 Oct 2009 23:41:24 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4191</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 6 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dylz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79537</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-160] file format should be friendly to streaming</title>
                <link>https://issues.apache.org/jira/browse/AVRO-160</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;It should be possible to stream through an Avro data file without seeking to the end.&lt;/p&gt;

&lt;p&gt;Currently the interpretation is that schemas written to the file apply to all entries before them.  If this were changed so that they instead apply to all entries that follow, and the initial schema is written at the start of the file, then streaming could be supported.&lt;/p&gt;

&lt;p&gt;Note that the only change permitted to a schema as a file is written is to, if it is a union, to add new branches at the end of that union.  If it is not a union, no changes may be made.  So it is still the case that the final schema in a file can read every entry in the file and thus may be used to randomly access the file.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12438617">AVRO-160</key>
            <summary>file format should be friendly to streaming</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Oct 2009 20:30:35 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:02 +0000</updated>
                            <resolved>Thu, 31 Dec 2009 17:32:27 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>spec</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12767929" author="cutting" created="Tue, 20 Oct 2009 20:31:45 +0000"  >&lt;p&gt;This was suggested by Thiru.&lt;/p&gt;</comment>
                            <comment id="12767943" author="massie" created="Tue, 20 Oct 2009 21:19:55 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="12768117" author="philip" created="Wed, 21 Oct 2009 07:17:43 +0000"  >&lt;p&gt;I think you&apos;ll also have to get rid of getCount(), no?  I won&apos;t miss it.&lt;/p&gt;</comment>
                            <comment id="12768517" author="cutting" created="Wed, 21 Oct 2009 23:27:01 +0000"  >&lt;p&gt;&amp;gt; I think you&apos;ll also have to get rid of getCount(), no? I won&apos;t miss it.&lt;/p&gt;

&lt;p&gt;It would certainly be unavailable to a streaming reader.  But the existing reader is not streaming, but random access, in order to support splitting and seeking.&lt;/p&gt;

&lt;p&gt;However this raises the question of whether we should continue to also flush the metadata on close.  If so, then we could still keep a count of entries.  To support random access and schema changes, we need to be able to read the final schema in the file.  To make this efficient, we must flush the metadata at close, otherwise we&apos;ll have to scan for the final metadata.  So, entries that appear after the last metadata would not be included in the count, but such entries should only occur if a program crashes, and might reasonably be considered to be after the last &quot;commit point&quot; and hence ignored.&lt;/p&gt;

&lt;p&gt;So giving up on counts is also giving up on the ability to change the schema.  The motivation for putting metadata at the end rather than in a header was precisely to permit appends that alter metadata.&lt;/p&gt;

&lt;p&gt;So my inclination is to continue to ignore entries after the final metadata, that it always re-iterates the penultimate metadata.  Each time the schema changes, the metadata must be re-written, to support schema changes for streaming readers.  And when the file is closed, metadata is also dumped.&lt;/p&gt;

&lt;p&gt;To be consistent, we might prohibit appends that do not first truncate to the end of the last metadata.  A streaming reader might still read these, however.  Sigh.  This is getting messy!&lt;/p&gt;</comment>
                            <comment id="12768766" author="philip" created="Thu, 22 Oct 2009 17:21:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;Note that the only change permitted to a schema as a file is written is to, if it is a union, to add new branches at the end of that union. If it is not a union, no changes may be made. So it is still the case that the final schema in a file can read every entry in the file and thus may be used to randomly access the file.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For some reason, I thought you could go from &lt;/p&gt;

&lt;p&gt; { &quot;type&quot;: &quot;record&quot;, &quot;name&quot;: &quot;foo&quot;, &quot;namespace&quot;: &quot;foo&quot;, &quot;fields&quot;: [&lt;/p&gt;
{ &quot;name&quot;: &quot;x&quot;, &quot;type&quot;: &quot;string&quot; }
&lt;p&gt;] } &lt;/p&gt;

&lt;p&gt;to &lt;/p&gt;

&lt;p&gt;  { &quot;type&quot;: &quot;record&quot;, &quot;name&quot;: &quot;foo&quot;, &quot;namespace&quot;: &quot;foo&quot;, &quot;fields&quot;: [&lt;/p&gt;
{ &quot;name&quot;: &quot;x&quot;, &quot;type&quot;: &quot;string&quot; }
&lt;p&gt;, &lt;/p&gt;
{&quot;name&quot;: &quot;y&quot;, &quot;type&quot;: [&quot;null&quot;, &quot;string&quot;] ] }

&lt;p&gt;(That is, adding an optional extra field within some record, not just modifying the top-level.)&lt;/p&gt;

&lt;p&gt;Is that not the case?&lt;/p&gt;</comment>
                            <comment id="12768781" author="cutting" created="Thu, 22 Oct 2009 17:53:01 +0000"  >&lt;p&gt;&amp;gt; Is that not the case?&lt;/p&gt;

&lt;p&gt;No, that would not work.  You can only add clauses to unions.  So you can in theory go from:&lt;/p&gt;

&lt;p&gt; { &quot;type&quot;: &quot;record&quot;, &quot;name&quot;: &quot;Foo&quot;, &quot;fields&quot;: [&lt;/p&gt;
{ &quot;name&quot;: &quot;x&quot;, &quot;type&quot;: [&quot;int&quot;, &quot;string&quot;]}
&lt;p&gt;]}&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;p&gt; { &quot;type&quot;: &quot;record&quot;, &quot;name&quot;: &quot;Foo&quot;, &quot;fields&quot;: [&lt;/p&gt;
{ &quot;name&quot;: &quot;x&quot;, &quot;type&quot;: [&quot;int&quot;, &quot;string&quot;, &quot;float&quot;]}
&lt;p&gt;]}&lt;/p&gt;

&lt;p&gt;However the current Java API doesn&apos;t permit this: it only permits adding clauses to a top-level union.  The Java implementation could be improved to do a smarter compatibility check when you attempt to augment a file&apos;s schema.&lt;/p&gt;

&lt;p&gt;This restriction is created by the binary format: a record is simply serialized as its fields, with no added per-field tags or other per-record data.&lt;/p&gt;

&lt;p&gt;In the strict streaming case you could reset the schema entirely each time metadata is dumped.  However that would prohibit random access operations.&lt;/p&gt;

&lt;p&gt;Perhaps the schema should instead be dumped once per block?  Random access already requires that you find a block start.  Changing the schema would then force a block flush.  If we go this way we might also switch to using a binary format for the schema, and/or increasing the block size.  Note that the DatumReader has a setSchema() method, so each time one would seek to a new block, the container could inform the DatumReader of the new schema, so that it could appropriately handle, e.g., new or missing fields.&lt;/p&gt;</comment>
                            <comment id="12768806" author="philip" created="Thu, 22 Oct 2009 18:27:12 +0000"  >&lt;p&gt;Ok, that makes sense.&lt;/p&gt;

&lt;p&gt;For some reason, I thought you could write AAAAAXBBBBBBY where records A are written with schema X, and then records B are written with schema Y, where X and Y are resolvable using schema resolution.  But that doesn&apos;t work because though X and Y may be resolvable, they may not have the same serialization.&lt;/p&gt;

&lt;p&gt;So, it turns out there are two types of schema compatibility: writer-reader compatibility, which means that we can read when we have both schemas available, and writer-writer compatibility, which concerns whether we can read (or write) data with only one of the two schemas.  I don&apos;t like those names, though.&lt;/p&gt;

&lt;p&gt;There&apos;s something appealing about writing the schema frequently.  You could also store an offset pointer to the schema in every block header, instead of the entire thing.&lt;/p&gt;

&lt;p&gt;What use cases are you thinking about?&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Map/reduce outputs tend to be uniform, since it&apos;s unlikely that a M/R program changes its output in media res.&lt;/li&gt;
	&lt;li&gt;Map/reduce inputs might be heterogeneous because you&apos;re combining logs from last year with logs from this year, though it&apos;s likely that individual files are homogeneous.  (And if you bother to combine files, you may as well do the schema resolution as part of the concatentation, and keep the new file homogeneous.)&lt;/li&gt;
	&lt;li&gt;HBase cells are not likely to use this format, but rather keep the schema per column.&lt;/li&gt;
	&lt;li&gt;An individual program&apos;s log files are likely to be homogeneous.  There&apos;s no harm in starting a new log file when you upgrade, rather than appending to the old one.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12768839" author="scott_carey" created="Thu, 22 Oct 2009 19:47:26 +0000"  >&lt;p&gt;Sounds to me like this file type is trying to be too many things.&lt;/p&gt;

&lt;p&gt;Perhaps this type should not be optimized for random access.  Perhaps it is possible but slow, seeking forward or back for a metadata block to find the schema for that block? &lt;/p&gt;

&lt;p&gt;A file type optimized for random access would either need embedded indexes or external indexes anyway &amp;#8211; at minimum indexes to the start of each block.  And it has very different &quot;schema visibility and compatibility&quot; requirements.&lt;/p&gt;

&lt;p&gt;I believe that if this main file type is optimized for streaming writes and reads, and possible appending writes and &quot;seek and stream&quot; reads, many challenges are simplified.&lt;br/&gt;
It will be simpler, easier to test and implement, and meet the majority of use cases.&lt;/p&gt;

&lt;p&gt;A format designed with random access in mind can come later.  I suspect that due to the &quot;schema visibility&quot; requirements of random access there will be significant differences not just in implementation, but API.&lt;br/&gt;
Additionally, it may be possible for an index file to encapsulate all the random access concerns and use the above format for its data storage.  For example, the index over the raw file can be built by one streaming read, and modified with each appends write.&lt;/p&gt;</comment>
                            <comment id="12768871" author="cutting" created="Thu, 22 Oct 2009 20:33:32 +0000"  >&lt;p&gt;&amp;gt; Perhaps this type should not be optimized for random access.&lt;/p&gt;

&lt;p&gt;For mapreduce, we need to be able to seek to an arbitrary point in the file, then scan to the next sync point and start reading the file.  That&apos;s mostly what I mean by random access.&lt;/p&gt;

&lt;p&gt;It should also be possible to layer indexes on top of this, to support random access by key.  Indexes might be stored as side files, or perhaps in the file&apos;s metadata.  To support these, it should be possible to ask, while writing, the position of the current block start, so that one may store that in an index and subsequently seek to it, then scan the block for the desired entry.&lt;/p&gt;

&lt;p&gt;Let me elaborate on my last proposal.  We put a schema at the start of every block.  Every entry in a block must use the same schema.  If you change the schema while writing, then you must start writing a new block.  In effect, the schema is a compression dictionary for the block.  (Blocks are also the unit of compression.)&lt;/p&gt;

&lt;p&gt;Benefits:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;supports streaming&lt;/li&gt;
	&lt;li&gt;supports random access&lt;/li&gt;
	&lt;li&gt;permits arbitrary schema changes&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Costs:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;increases the file size, but this can be ameliorated by:
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;writing the schema in binary (using a schema for schemas) and/or&lt;/li&gt;
		&lt;li&gt;writing larger blocks&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think it still may make sense to flush metadata at the end of the file.  It may no longer contain the schema, but it can contain things like counts and indexes.  Streaming applications would not be able to use this, but other applications might find it very useful.  Side files in HDFS are expensive.&lt;/p&gt;</comment>
                            <comment id="12768905" author="cutting" created="Thu, 22 Oct 2009 21:07:00 +0000"  >&lt;p&gt;&amp;gt; You could also store an offset pointer to the schema in every block header, instead of the entire thing.&lt;/p&gt;

&lt;p&gt;Hmm.  Seeks are expensive.  If the schema never changed, and folks have to read the file header anyway, then I guess a pointer back to the first schema shouldn&apos;t create another seek, if we implement it well.  But once you do change the schema, then many seeks in the file would have to do an extra seek back to read the schema.  Caching would help, so maybe it&apos;s not a big problem, but, if schemas are small and fast to read, then it shouldn&apos;t be bad to put one at the start of each block.  So, maybe this works...&lt;/p&gt;

&lt;p&gt;&amp;gt; What use cases are you thinking about?&lt;/p&gt;

&lt;p&gt;Append is one case where schemas might change: the appending program might differ from that that which originally created the file.  Other cases are where folks want to lazily add schemas to a file as they write things.  So, someone had an event logging system, where different daemons might log different events.  You could use a schema that includes all possible events, if you knew them, or you could, on the fly, add new events to the top-level union the first time they&apos;re written.&lt;/p&gt;</comment>
                            <comment id="12768975" author="scott_carey" created="Thu, 22 Oct 2009 23:45:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;For mapreduce, we need to be able to seek to an arbitrary point in the file, then scan to the next sync point and start reading the file. That&apos;s mostly what I mean by random access.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok, I misinterpreted.  I&apos;ll call that &quot;seek and scan&quot; for the rest of this comment, as opposed to random access which I interpret as &quot;go to tuple # 655321&quot; or &quot;read the first tuple following location X&quot;.  It also is related to the limitation that all schemas in the file must be representable in one big union schema.  If the requirement to read a tuple is only that the reader knows the schema in the prior metadata block, then what can be stored in one file is less restrictive.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It should also be possible to layer indexes on top of this, to support random access by key. Indexes might be stored as side files, or perhaps in the file&apos;s metadata. To support these, it should be possible to ask, while writing, the position of the current block start, so that one may store that in an index and subsequently seek to it, then scan the block for the desired entry.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I agree.  It is useful to leave open the option for index type metadata in the metadata block.  I&apos;ll add that the metadata block might also contain an index into that block to avoid scanning it (for large blocks).  Unfortunately, to do this with streaming writes, the metadata block with the index must be &lt;em&gt;after&lt;/em&gt; the block.  So, perhaps the metadata block needs two types of metadata, that which describes a previous block(s) and that which describes the next one?  &lt;/p&gt;

&lt;p&gt;This is where I start to wonder if serving too many needs in one file type is the right choice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let me elaborate on my last proposal. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like it, but if we ever want true optimized random access (perhaps not) it would have to change or we would need side files.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;br/&gt;
I think it still may make sense to flush metadata at the end of the file. It may no longer contain the schema, but it can contain things like counts and indexes. Streaming applications would not be able to use this, but other applications might find it very useful. Side files in HDFS are expensive.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It definitely makes sense to flush some metadata at the end, but much of that might be optional.&lt;/p&gt;

&lt;p&gt;One useful thing would be the following. &lt;br/&gt;
This allows MapReduce to not have to &quot;seek and scan&quot; but instead find the start of the metadata block nearest the HDFS block boundary. If counts are stored, it also allows basic random access by tuple number.&lt;/p&gt;

&lt;p&gt;When a file is closed, the last metadata block can contain the offset of each known metadata block.  Perhaps this is optional, but if it exists then the input splitter can split on those boundaries and avoid seeking.  When the file is appended, it can either copy-forward this crude index or keep a reference to the prior &quot;finish&quot; metadata block.&lt;/p&gt;

&lt;p&gt;Maybe, a straightforward thing to do is consider that each block in this file has a header, a data block, and a footer.  The header has the schema of the tuples in the block and any other information required to read the block, like the compression codec, etc.  The footer contains the tuple count and other optional info (like an index) and the length of the block.  The sync marker is in every footer, and in the first block&apos;s header.&lt;/p&gt;

&lt;p&gt;Ok, I think I&apos;m done with my speculation for now &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12769302" author="cutting" created="Fri, 23 Oct 2009 17:09:14 +0000"  >&lt;p&gt;&amp;gt; It is useful to leave open the option for index type metadata in the metadata block.&lt;/p&gt;

&lt;p&gt;I don&apos;t see the use case.  Blocks should be small enough that seek time dominates, so scanning should not be a dominant cost.  Note that scanning is required anyway when blocks are compressed.  Avro scanning should be at least as fast as decompression.&lt;/p&gt;

&lt;p&gt;&amp;gt; if we ever want true optimized random access [ ... ]&lt;/p&gt;

&lt;p&gt;So long as we&apos;re supporting compression, we&apos;ll never support seeks directly to individual entries.  But blocks are a relatively constant size, so we can support constant-time access to individual entries.&lt;/p&gt;

&lt;p&gt;&amp;gt; This allows MapReduce to not have to &quot;seek and scan&quot; but instead find the start of the metadata block nearest the HDFS block boundary.&lt;/p&gt;

&lt;p&gt;Yes, if we kept a global block index, we could avoid this scan.  However since HDFS blocks are ~64MB, and Avro file blocks are ~64k, the scan is less than a tenth of a percent of the overall map cost, so this is perhaps not a worthwhile optimization.&lt;/p&gt;

&lt;p&gt;&amp;gt; Maybe, a straightforward thing to do is consider that each block in this file has a header, a data block, and a footer.&lt;/p&gt;

&lt;p&gt;That could work.  We&apos;d also need to terminate blocks with the length of their footer metadata, so that a reader can efficiently find the last footer on open, where, by convention, global data is written.&lt;/p&gt;</comment>
                            <comment id="12769378" author="scott_carey" created="Fri, 23 Oct 2009 19:31:59 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Yes, if we kept a global block index, we could avoid this scan. However since HDFS blocks are ~64MB, and Avro file blocks are ~64k, the scan is less than a tenth of a percent of the overall map cost, so this is perhaps not a worthwhile optimization.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I had imagined that blocks were closer to 1MB for whatever reason.  I had actually imagined that many writers would want to minimize the metadata blocks if they were not changing their schema.   I had also imagined that there might be some use case where a single tuple was MBs in size (perhaps a large array, or a byte[] representing some sort of media, or the text content of a document).  At that point, should there be a metadata block per tuple?&lt;/p&gt;

&lt;p&gt;There are a lot of trade-offs with respect to block sizes.&lt;/p&gt;

&lt;p&gt;At what size does the metadata block overhead represent larger overhead than storing extra information per tuple like Thrift/Protobuf?  Put another way, if blocks are too small and schemas large, Avro&apos;s size advantage could be lost.&lt;/p&gt;

&lt;p&gt;At what size does compression become less effective?  Are larger blocks better for streaming read/write performance?&lt;/p&gt;

&lt;p&gt;An index of all of a 1TB file&apos;s block locations is fairly small if the blocks are 4MB, but very large if they are 64KB.  So the usefulness and costs of such an index varies.&lt;/p&gt;

&lt;p&gt;If the expectation is smaller blocks (around 64K) then seeking to the next will be cheap and my main concern is minimizing the metadata block size.&lt;/p&gt;

&lt;p&gt;If there is an expectation that large block sizes will be used, i&apos;m concerned with the time it takes to find the start of a block and the efficiency of file splitting.&lt;/p&gt;</comment>
                            <comment id="12769519" author="cutting" created="Fri, 23 Oct 2009 22:57:01 +0000"  >&lt;p&gt;&amp;gt; At what size does the metadata block overhead represent larger overhead than storing extra information per tuple like Thrift/Protobuf?&lt;/p&gt;

&lt;p&gt;That&apos;s a hard to calculate, but I think we&apos;re a ways from that, especially if we write the schema in binary.&lt;/p&gt;

&lt;p&gt;&amp;gt; At what size does compression become less effective?&lt;/p&gt;

&lt;p&gt;I think we&apos;ve found that, after ~64k, the compression ratio does not typically significantly improve.&lt;/p&gt;

&lt;p&gt;&amp;gt; Are larger blocks better for streaming read/write performance?&lt;/p&gt;

&lt;p&gt;In, e.g., mapreduce, we stream through a series of blocks, so we&apos;re still sequentially accessing ~64MB chunks, regardless of the compression-block size.&lt;/p&gt;</comment>
                            <comment id="12790320" author="cutting" created="Mon, 14 Dec 2009 20:03:23 +0000"  >&lt;p&gt;I&apos;m now having second thoughts about the current proposal to include the schema with each block.  We&apos;re going through a lot of work in order to support changing the schema within a file, yet I don&apos;t actually believe that to be a common usage.  I wonder if instead we should simply make the schema a part of the file header and not permit it to be modified while writing.  This would support mapreduce well.  If someone wishes to modify or intermix schemas, then they have to copy their data to a new file, using a new schema.&lt;/p&gt;

&lt;p&gt;So, my new, reductionist approach is that a data file has just:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;a header with
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;a magic number identifying this file format (incremented from current data file)&lt;/li&gt;
		&lt;li&gt;a sync marker&lt;/li&gt;
		&lt;li&gt;a json-format schema&lt;/li&gt;
		&lt;li&gt;a compression codec name (default is null)&lt;/li&gt;
		&lt;li&gt;an avro encoding name (text/binary, default is binary)&lt;/li&gt;
		&lt;li&gt;optionally other, user-provided metadata&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;followed by a sequence of blocks, each with:
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;the sync marker from the header&lt;/li&gt;
		&lt;li&gt;the count of instances in this block&lt;/li&gt;
		&lt;li&gt;the length in bytes of this compressed block&lt;/li&gt;
		&lt;li&gt;the compressed block data
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a sequence of &apos;count&apos; entries corresponding to the header&apos;s schema&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That&apos;s it.  Thoughts?&lt;/p&gt;


</comment>
                            <comment id="12790324" author="hammer" created="Mon, 14 Dec 2009 20:09:22 +0000"  >&lt;p&gt;Not crazy. Eric Anderson, who works on the DataSeries project at HP Labs, pointed out that he wish they had not encoded the schema with each block as well, as the use case was not common and the overhead was significant. &lt;/p&gt;</comment>
                            <comment id="12790395" author="philip" created="Mon, 14 Dec 2009 22:01:47 +0000"  >&lt;p&gt;I like the simpler model.  I&apos;m pretty confident that other formats will evolve (Hadoop sure has a handful: SeqFile, MapFile, TFile, RCFile), and it&apos;s good to start way simple.&lt;/p&gt;

&lt;p&gt;To be clear, you&apos;re preserving appendability and splittabability, but ditching schema-evolution-for-appendability.  That seems very sensible.&lt;/p&gt;

&lt;p&gt;How big are blocks (rule of thumb?)?  DataSeries does parallel decompression, which is easily doable for this file format too, as long as blocks aren&apos;t too big.&lt;/p&gt;

&lt;p&gt;You could conceivably store compression codec per block.  Probably not worth it.&lt;/p&gt;

&lt;p&gt;Should Avro allow a user-specified trailer block?  It&apos;s simpler if it doesn&apos;t.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12790405" author="scott_carey" created="Mon, 14 Dec 2009 22:17:45 +0000"  >&lt;p&gt;I agree, a simple format for 80%+ of the use cases is a good thing.  It alleviates my prior feeling that this might be trying to do &quot;too many things&quot;.  In the future, another format (or slight variation on this) might support appends with schema changes or compression codec changes in a much simpler way than the earlier design in this ticket (store only the schema when it changes, with an index in a footer ?)&lt;/p&gt;

&lt;p&gt;The last thing I want to clarify is the sync marker behavior.  Even with a 16 byte marker there needs to be well defined behavior for collisions and disambiguation.  Is there documentation on this, or only in the code?&lt;br/&gt;
8 bytes or less might be plenty depending on how the sync marker behavior on writes and reads is defined.&lt;/p&gt;

&lt;p&gt;There are many approaches to this &amp;#8211;&lt;/p&gt;

&lt;p&gt;The first increases the cost and complexity of writing and but makes marker identification unambiguous.&lt;br/&gt;
While writing, make sure no sequence of bytes match, and if there is a match, follow the match with a &quot;is_literal&quot; marker byte that cannot be found in what usually follows the sync marker (if what follows is a count of block entries, then encode -1?).&lt;br/&gt;
The marker could even be 4 bytes with this approach.  Detecting a collision on output and inserting literal marker byte may not be trivial however and surely will add overhead.  But it will make seeking to block boundaries clear and error handling code on the reading side simple.&lt;/p&gt;


&lt;p&gt;Another way is to write blindly and then have a well defined behavior for detecting the various types of corruption possible when one assumes data after the marker is a valid header, and what to do when it happens.  Although improbable, it is possible for random data to mimic a block header, and for errors to only be detected when attempting to deserialize entries.  There are several cases to disambiguate a corrupted block from a normal block that happens to have the sync marker in its data.  One doesn&apos;t want to accidentally skip a block without reporting corruption, or fail to read because of a collision.&lt;/p&gt;

&lt;p&gt;Additionally, if the marker (start of block) is aligned it would speed up the marker detection on both the writer and reader side and lessen the collision probability slightly (by a factor of the alignment width). &lt;/p&gt;


&lt;p&gt;There a lot of options for dealing with the sync marker and its collision and disambiguation behavior, I feel that whatever it is needs to be well defined in a specification.&lt;/p&gt;</comment>
                            <comment id="12790429" author="cutting" created="Mon, 14 Dec 2009 22:51:23 +0000"  >&lt;p&gt;Philip&amp;gt; To be clear, you&apos;re preserving appendability and splittabability, but ditching schema-evolution-for-appendability.&lt;/p&gt;

&lt;p&gt;The other thing we&apos;re ditching is computed metadata.  Previously you could store the total count of items or an index of items in the metadata at end of file.  This is certainly useful, but complicates things.  Side files are the alternative, and the only problem with them is that adding more files is HDFS-unfriendly.&lt;/p&gt;

&lt;p&gt;Philip&amp;gt; How big are blocks (rule of thumb?)?&lt;/p&gt;

&lt;p&gt;64kB.  Just big enough for compression to work and for per-block overheads to be insignificant.&lt;/p&gt;

&lt;p&gt;Scott&amp;gt; The last thing I want to clarify is the sync marker behavior.&lt;/p&gt;

&lt;p&gt;The assumption is that with a 16-byte marker there will never be a collision.  We&apos;ve never seen a collision yet with this approach in the lifetime of Hadoop.  The odds are in our favor: it would take a file with well over an exabyte (1000 petabytes, 1M terabytes) before this is near likely.  I suspect the chances are significantly greater that all three replicas of a file in HDFS will become corrupt.  The significant advantage of this approach is that no escape processing is required: bytes can travel to and from the file unexamined in bulk.&lt;/p&gt;

&lt;p&gt;The count of items and bytes per block provide a checksum of sorts: if the next sync marker is not found where expected then the file is either corrupt or a collision has occurred.  Corruption should be noticed by the filesystem.  A collision does not cause data loss, since the file can still be processed from its start.  So I suppose one could specify that, if the next sync marker is not found where expected then one should scan back earlier or later in the file (as appropriate) to find a different sync marker and start processing there.&lt;/p&gt;</comment>
                            <comment id="12790504" author="scott_carey" created="Tue, 15 Dec 2009 01:09:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;The other thing we&apos;re ditching is computed metadata. Previously you could store the total count of items or an index of items in the metadata at end of file. This is certainly useful, but complicates things. Side files are the alternative, and the only problem with them is that adding more files is HDFS-unfriendly.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This problem is really an HDFS problem.  A future feature for HDFS should probably make side files cheap rather than complicating issues for file type implementations (multiple data streams in one file, side files are just optional extra data streams &amp;#8211; crc&apos;s, indexes, parity, etc).  I should probably open a ticket for that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The assumption is that with a 16-byte marker there will never be a collision. We&apos;ve never seen a collision yet with this approach in the lifetime of Hadoop. The odds are in our favor: it would take a file with well over an exabyte (1000 petabytes, 1M terabytes) before this is near likely. I suspect the chances are significantly greater that all three replicas of a file in HDFS will become corrupt. The significant advantage of this approach is that no escape processing is required: bytes can travel to and from the file unexamined in bulk.&lt;/p&gt;&lt;/blockquote&gt; 

&lt;p&gt;Sounds good, lets just make sure there is an expected standard thing to do when it does happen &amp;#8211; even if it is just a very clear error message.  It should be trivial to make test files that cause collisions and/or are corrupted.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;The count of items and bytes per block provide a checksum of sorts: if the next sync marker is not found where expected then the file is either corrupt or a collision has occurred. Corruption should be noticed by the filesystem. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Background data corruption yes, but corruption caused by bugs in a writer implementation won&apos;t be.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A collision does not cause data loss, since the file can still be processed from its start. So I suppose one could specify that, if the next sync marker is not found where expected then one should scan back earlier or later in the file (as appropriate) to find a different sync marker and start processing there.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m concerned about silent data loss during processing mostly &amp;#8211; a M/R job runs, a collision (or any form of corruption) occurs, a block gets skipped silently, and some calculation runs with missing tuples.  I&apos;d hate to hear about some LHC processing missed a new fundamental particle due to an unlucky sequence of bytes in their Petabytes of data &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
So I&apos;ll keep my eye out for a set of guidelines for implementations to follow for collision/corruptioin correct/detect/log.&lt;/p&gt;

&lt;p&gt;Here is a quick stab at it:&lt;/p&gt;

&lt;p&gt;Reading sequentially:  The start of the block is implicit and only fails due to corruption.&lt;br/&gt;
1a  Validate that the sync marker matches.  If it does not log an error for a corrupt block at this location.  &lt;br/&gt;
1b  Validate the other block header values, log an error for a corrupt header if invalid (length or count out of bounds?)&lt;br/&gt;
If Either 1a or 1b fail:&lt;br/&gt;
1c  scan for the sync marker up to X bytes ahead, repeating 1b as needed until it does not fail, or X bytes have been read.&lt;br/&gt;
2a  Upon finding a valid block header, log an error containing the end of the corrupted part of the file only if there was an error in part 1 before.  &lt;br/&gt;
2b  Read data from the block. If there is an error here, or the data or number of tuples do not match the header, log an error and scan ahead, as in 1c above.  &lt;/p&gt;


&lt;p&gt;Reading from the middle of a file and seeking slightly differs.  It essentially starts at 1c above.  However if there is an invalid header it could be a collision rather than corruption.  So there is not an error unless it has reached 2b.  Another way to put it is that sequential reading fails if the implicit next block has any error at all.  Seeking from the middle can only error after it has either detected what appears to be a valid block or reached its maximum search window. &lt;/p&gt;

&lt;p&gt;For Hadoop input splits there is one other critical bit &amp;#8211; at the end of a split, it needs to validate the next block header (if it exists) and log an error if it does not appear valid.  Otherwise, the following split may have skipped over some data without error while seeking to find the start of a block.  Another way to look at that, is that part of validating a block is to make sure that the next block is indeed right after it or it is the end of the file (otherwise it is corrupt).  In fact, conceptually it might be easier to think of the sync marker as being between blocks, not the front or back. &lt;/p&gt;

&lt;p&gt;I think that covers the corner cases.&lt;/p&gt;</comment>
                            <comment id="12790516" author="philip" created="Tue, 15 Dec 2009 01:35:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;This problem is really an HDFS problem. A future feature for HDFS should probably make side files cheap rather than complicating issues for file type implementations (multiple data streams in one file, side files are just optional extra data streams - crc&apos;s, indexes, parity, etc). I should probably open a ticket for that.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Several applications can work with multiple files.  If you want per-block extra stuff (indexes, bloom-filters, whatever), side files work less well because they lose being co-located with the original data.  And that&apos;s fine; applications that need that will develop more complicated file formats.&lt;/p&gt;</comment>
                            <comment id="12790540" author="philip" created="Tue, 15 Dec 2009 03:06:20 +0000"  >&lt;p&gt;Doug&amp;gt; The count of items and bytes per block provide a checksum of sorts&lt;/p&gt;

&lt;p&gt;Are we cool with not having checksums in these files?  Some compressors have their own, and file systems (HDFS, certainly) are likely to do something too.  Should there be another layer?&lt;/p&gt;</comment>
                            <comment id="12790840" author="cutting" created="Tue, 15 Dec 2009 17:40:27 +0000"  >&lt;p&gt;Scott&amp;gt; I&apos;m concerned about silent data loss during processing mostly - a M/R job runs, a collision (or any form of corruption) occurs, a block gets skipped silently, and some calculation runs with missing tuples.&lt;/p&gt;

&lt;p&gt;Who&apos;s silently skipping blocks?  That sounds like the source of the problem.  Normally, if corruption is detected an exception should be thrown and the task should fail.  Hopefully the task will succeed on another non-corrupt replica.  If you truly require that things run to completion on corrupt data, then you&apos;ll necessarily miss some tuples.  It should be possible to configure things this way, but it should not be the default.&lt;/p&gt;

&lt;p&gt;Since I never expect to see a collision, I don&apos;t feel an urgent need to add code to recover from one.  Detecting them and failing might be wise, just in case.&lt;/p&gt;

&lt;p&gt;Philip&amp;gt; Are we cool with not having checksums in these files?&lt;/p&gt;

&lt;p&gt;I am.&lt;/p&gt;</comment>
                            <comment id="12790879" author="scott_carey" created="Tue, 15 Dec 2009 18:50:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;Who&apos;s silently skipping blocks?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Code that jumps to the middle of the file and finds the start of the next block by finding the sync marker and either:&lt;br/&gt;
1: there is a collision and it skips to the next sync marker rather than failing.&lt;br/&gt;
2: the file was written corruptly (a sync marker is missing or corrupted on write; block size/count are wrong but consistent with each other), a reader or file split that assumes correctness can skip data silently on a seek and scan.&lt;/p&gt;

&lt;p&gt;Detecting and failing on these conditions is important, no matter how unlikely.  Making test files that contain these flaws is also easy.&lt;/p&gt;</comment>
                            <comment id="12790896" author="cutting" created="Tue, 15 Dec 2009 19:05:01 +0000"  >&lt;p&gt;&amp;gt; there is a collision&lt;br/&gt;
&amp;gt; the file was written corruptly&lt;/p&gt;

&lt;p&gt;These should both cause failures.  If you catch an exception and continue anyway, then you&apos;ll skip data, as expected.  In neither case would we silently skip data.&lt;/p&gt;</comment>
                            <comment id="12791693" author="cutting" created="Thu, 17 Dec 2009 00:18:01 +0000"  >&lt;p&gt;Here&apos;s a patch that implements this for Java and updates the spec.&lt;/p&gt;

&lt;p&gt;It&apos;s slightly different from what&apos;s proposed above.  A file is a header followed by zero or more blocks.  These each contain:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;header
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;magic&lt;/li&gt;
		&lt;li&gt;metadata&lt;/li&gt;
		&lt;li&gt;sync&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;block
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;length&lt;/li&gt;
		&lt;li&gt;data&lt;/li&gt;
		&lt;li&gt;sync&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thus every block is both preceded and followed by a sync marker.&lt;/p&gt;

&lt;p&gt;I also split the Java data file reading code into two classes: a base class that only permits sequential access, and a subclass that supports random access.  This will permit us to, e.g., process standard input.&lt;/p&gt;</comment>
                            <comment id="12791790" author="cutting" created="Thu, 17 Dec 2009 05:18:43 +0000"  >&lt;p&gt;BTW, you need to &apos;svn cp src/java/org/apache/avro/file/DataFileReader.java src/java/org/apache/avro/file/DataFileStream.java&apos; before applying this patch.  I&apos;m not totally happy with these class names yet.&lt;/p&gt;</comment>
                            <comment id="12792370" author="philip" created="Fri, 18 Dec 2009 06:46:38 +0000"  >&lt;p&gt;Took a look at the patch.  I hadn&apos;t read the old code, so made some comments on stuff that&apos;s probably pre-existing...&lt;/p&gt;

&lt;p&gt;I love the (relative) simplicity of the new file format.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;File metadata consists of:&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Would it be fair to add to spec.xml, that the file metadata&lt;br/&gt;
can be read with the schema &lt;br/&gt;
  { type: array, items: record &lt;/p&gt;
{ fields: [string, bytes] }
&lt;p&gt; }&lt;br/&gt;
Ah, no, looking at DataFileStream, it&apos;s really (more fake-syntax)&lt;/p&gt;
  { type: map, key-type: string, value-type: bytes }

&lt;blockquote&gt;&lt;p&gt;in.read(magic);&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Should this throw an exception if in.read(magic)&lt;br/&gt;
didn&apos;t return magic.length?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;this.vin = new BinaryDecoder(in);&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we should use the specific API here&lt;br/&gt;
if we can.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;public synchronized byte[] getMeta(String key)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why does this needs to be synchronized?  The meta&lt;br/&gt;
map is created at construction, so could be marked&lt;br/&gt;
final, no?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;public synchronized D next(D reuse) throws IOException {&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As you suggested in person, this API is a bit&lt;br/&gt;
broken for iteration, since values may well be null.&lt;br/&gt;
That&apos;s fair game for another schema, though.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;long blockCount;                                // # entries in block &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was surprised that blockCount was decremented, instead of incremented,&lt;br/&gt;
when I first ran into it.  I don&apos;t care eight way, but perhaps&lt;br/&gt;
&quot;# entries remaining in current block&quot; would be more clear.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;/** Move to the specified synchronization point, as returned by {@link DataFileWriter#sync()}. */&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m a bit lost as to what that comment means.  Ah, ok.  I think what might&lt;br/&gt;
be more helpful is: &quot;Move the specific synchronization point,&lt;br/&gt;
as returned by &lt;/p&gt;
{@link DataFileWriter#sync())}
&lt;p&gt;.  If pre-established&lt;br/&gt;
synchornization points are not available, use &lt;/p&gt;
{@link sync(pos)}
&lt;p&gt; to move&lt;br/&gt;
to the first synchronization point at or past pos.&quot;  i.e.,&lt;br/&gt;
specifically discuss the distinction between seek() and sync(), since&lt;br/&gt;
they&apos;re similar, but quite different.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;if (j == sync.length) {                     /* position before sync */ sin.seek(sin.tell() - DataFileConstants.SYNC_SIZE);&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Does this work?  In the old code, next() first skipped a synchronization marker,&lt;br/&gt;
so this was right.  But in the new code, if blockCount=0, it reads in the&lt;br/&gt;
number of records.  So I think this should have been changed too.  Of course,&lt;br/&gt;
I&apos;m probably just missing something.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;((SeekableBufferedInput)in).seek(position);&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;These casts feel icky.  You could just have an extra&lt;br/&gt;
field in DataFileReader, no?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;DataFileWriter: appendTo, create&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why are these synchronized?  (There are lots of methods in this&lt;br/&gt;
class that are synchronized... in the common case, there&apos;s&lt;br/&gt;
only one thread writing, so seems to be easier to force&lt;br/&gt;
the user to do his own.)&lt;/p&gt;


&lt;p&gt;Would be great to have tests for trying to setMeta() when appending,&lt;br/&gt;
or after file has had records in it.&lt;/p&gt;

&lt;p&gt;I didn&apos;t see any tests for the random access stuff.&lt;/p&gt;</comment>
                            <comment id="12792729" author="cutting" created="Sat, 19 Dec 2009 00:48:17 +0000"  >&lt;p&gt;;; This buffer is for notes you don&apos;t want to save, and for Lisp evaluation.&lt;br/&gt;
;; If you want to create a file, visit that file with C-x C-f,&lt;br/&gt;
;; then enter the text in that file&apos;s own buffer.&lt;/p&gt;

&lt;p&gt;&amp;gt; Would it be fair to add to spec.xml, that the file metadata&lt;br/&gt;
&amp;gt; &lt;/p&gt;
{ type: map, key-type: string, value-type: bytes }

&lt;p&gt;Yes, I&apos;ve added a schema to the spec.  BTW, maps don&apos;t have key-types,&lt;br/&gt;
so it&apos;s just &lt;/p&gt;
{type: map, values: bytes}
&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;&amp;gt; in.read(magic);&lt;br/&gt;
&amp;gt; Should this throw an exception if in.read(magic) didn&apos;t return magic.length?&lt;/p&gt;

&lt;p&gt;In this case it doesn&apos;t matter.  Java initializes arrays with nulls,&lt;br/&gt;
and the expected value has no nulls, so, if it doesn&apos;t read the entire&lt;br/&gt;
thing it will always fail.  But I&apos;ve changed it&lt;br/&gt;
tovin.readFixed(magic), since that has readFully() semantics and is&lt;br/&gt;
what we use to read sync markers.&lt;/p&gt;

&lt;p&gt;&amp;gt; this.vin = new BinaryDecoder(in);&lt;br/&gt;
&amp;gt; I think we should use the specific API here if we can.&lt;/p&gt;

&lt;p&gt;I&apos;m fine with adding the header schema to the spec, but I&apos;m not eager&lt;br/&gt;
to use specific to implement the header in this patch.  For one thing,&lt;br/&gt;
it makes bootstrapping harder.  The build already has some wacky stuff&lt;br/&gt;
so that the specific compiler is compiled before the IPC code which&lt;br/&gt;
depends on specific compiler output.  Perhaps we should really&lt;br/&gt;
re-organize the code tree into stuff that depends on specific output&lt;br/&gt;
and stuff that does not, but that would separate files that are&lt;br/&gt;
otherwise closely related.  Or we could add a special comment to files&lt;br/&gt;
required to compile the specific compiler use an ant &amp;lt;contains&amp;gt; filter&lt;br/&gt;
to compile those first.  In any case, can we address this separately?&lt;/p&gt;

&lt;p&gt;&amp;gt; public synchronized byte[] getMeta(String key)&lt;br/&gt;
&amp;gt; Why does this needs to be synchronized?&lt;/p&gt;

&lt;p&gt;It doesn&apos;t any longer.  This is a relic from when metadata was&lt;br/&gt;
read/write.  Good catch.  Fixed.&lt;/p&gt;

&lt;p&gt;&amp;gt; public synchronized D next(D reuse) throws IOException {&lt;br/&gt;
&amp;gt; As you suggested in person, this API is a bit broken for iteration&lt;/p&gt;

&lt;p&gt;I&apos;ve now provided an iterator API.&lt;/p&gt;

&lt;p&gt;&amp;gt; long blockCount; // # entries in block &lt;br/&gt;
&amp;gt; I was surprised that blockCount was decremented&lt;/p&gt;

&lt;p&gt;I changed the name of the variable.&lt;/p&gt;

&lt;p&gt;&amp;gt; /** Move to the specified synchronization point, as returned by &lt;/p&gt;
{@link DataFileWriter#sync()}
&lt;p&gt;. */&lt;br/&gt;
&amp;gt; I&apos;m a bit lost as to what that comment means.&lt;/p&gt;

&lt;p&gt;I updated that comment.&lt;/p&gt;

&lt;p&gt;&amp;gt; if (j == sync.length) { /* position before sync */ sin.seek(sin.tell() - DataFileConstants.SYNC_SIZE);&lt;br/&gt;
&amp;gt; Does this work?&lt;/p&gt;

&lt;p&gt;Probably not.  I forgot to update it, and it&apos;s never had tests.  I&apos;ve&lt;br/&gt;
updated it now and added a test.&lt;/p&gt;

&lt;p&gt;&amp;gt; ((SeekableBufferedInput)in).seek(position);&lt;br/&gt;
&amp;gt; These casts feel icky.&lt;/p&gt;

&lt;p&gt;I replaced this with a field.&lt;/p&gt;

&lt;p&gt;&amp;gt; DataFileWriter: appendTo, create&lt;br/&gt;
&amp;gt; Why are these synchronized?&lt;/p&gt;

&lt;p&gt;Things used in Hadoop InputFormats should be thread safe to make them&lt;br/&gt;
easy to use from multi-threaded mappers.  SequenceFile is thread-safe&lt;br/&gt;
for this reason, and we want this to be a drop-in replacement for&lt;br/&gt;
SequenceFile.&lt;/p&gt;

&lt;p&gt;&amp;gt; Would be great to have tests for trying to setMeta() when appending, or after file has had records in it.&lt;/p&gt;

&lt;p&gt;Yes, lots more tests would be good, including that.&lt;/p&gt;

&lt;p&gt;&amp;gt; I didn&apos;t see any tests for the random access stuff.&lt;/p&gt;

&lt;p&gt;I&apos;ve added one now.&lt;/p&gt;</comment>
                            <comment id="12793421" author="philip" created="Mon, 21 Dec 2009 23:45:10 +0000"  >&lt;p&gt;Thanks for addressing my comments.  Some minor notes&lt;br/&gt;
below, but I&apos;m comfortable with this being committed. +1.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;org.apache.avro.file.Header (from the spec)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Cool.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Things used in Hadoop InputFormats should be thread safe to make them easy to use from multi-threaded mappers. SequenceFile is thread-safe for this reason, and we want this to be a drop-in replacement for SequenceFile.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It might be handy to make a note in DataFileReader&apos;s javadoc&lt;br/&gt;
to mention that it is thread-safe.  AVRO could later add&lt;br/&gt;
a non-thread-safe version, if it&apos;s deemed faster.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;To read up to that synchoronization point, call pastSync(long)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;pastSync doesn&apos;t seem to do any reading, so this might be out of date.&lt;br/&gt;
Also, synchronization is misspelled.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;DataFileStream: vin.readFixed(magic);&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hate to waffle on you here, but this throws EOFException on&lt;br/&gt;
a two-byte file, whereas &quot;Not a data file&quot; would be clearer.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;DataFileStream: synchronization of hasNext(), next(D), close.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Do these need to be synchronized for Hadoop compatibility, too?&lt;br/&gt;
If so, I think it&apos;s appropriate to note in the javadoc&lt;br/&gt;
for DataFileStream that multiple threads can use it concurrently,&lt;br/&gt;
though they are not allowed to use the underlying inputstream.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;//System.out.println(&quot;sync = &quot;+ &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;//System.out.println(&quot;start = &quot;&lt;ins&gt;start&lt;/ins&gt;&quot; end = &quot;+end);&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You may want to delete these two before checkin.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;TestDataFile: readFile()&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the reuse parameter is unused here now.&lt;/p&gt;</comment>
                            <comment id="12793805" author="hammer" created="Tue, 22 Dec 2009 21:52:16 +0000"  >&lt;p&gt;Hey Doug,&lt;/p&gt;

&lt;p&gt;The most recent patch seems to write both the length of the block in number of entries as well as bytes. I seemed to recall you mentioning removing the former. Am I mistaken?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Jeff&lt;/p&gt;</comment>
                            <comment id="12793944" author="hammer" created="Wed, 23 Dec 2009 06:16:24 +0000"  >&lt;p&gt;Here&apos;s a patch that implements the new format in Python. It&apos;s pretty minimal, and only works with my new Python implementation (see &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-219&quot; title=&quot;Rewrite Python implementation&amp;#39;s IO path (schema.py, io.py, genericio.py, datafile.py) and associated tests&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-219&quot;&gt;&lt;del&gt;AVRO-219&lt;/del&gt;&lt;/a&gt;), but the tests pass on my machine. I don&apos;t know that I got things exactly right, so please take a look and let me know.&lt;/p&gt;</comment>
                            <comment id="12795154" author="cutting" created="Tue, 29 Dec 2009 21:09:05 +0000"  >&lt;p&gt;Philip&amp;gt; pastSync doesn&apos;t seem to do any reading, so this might be out of date.&lt;/p&gt;

&lt;p&gt;Yes, that comment was confusing.  I have updated it.&lt;/p&gt;

&lt;p&gt;Philip&amp;gt; this throws EOFException on a two-byte file, whereas &quot;Not a data file&quot; would be clearer.&lt;/p&gt;

&lt;p&gt;I fixed that.&lt;/p&gt;

&lt;p&gt;Philip&amp;gt; DataFileStream: synchronization of hasNext(), next(D), close.&lt;br/&gt;
Philip&amp;gt; Do these need to be synchronized for Hadoop compatibility, too?&lt;/p&gt;

&lt;p&gt;It&apos;s not so much Hadoop compatibility as consistency: The API should either be thread-safe or not.  If you feel that thread safety is not useful here and has a performance penalty then synchronization could be moved to the to-be-written InputFormat implementation that will use this.  Would you prefer that?&lt;/p&gt;

&lt;p&gt;Philip&amp;gt; TestDataFile: readFile()&lt;br/&gt;
Philip&amp;gt; I think the reuse parameter is unused here now.&lt;/p&gt;

&lt;p&gt;Removed.&lt;/p&gt;

&lt;p&gt;I also fixed a bug in the sync handling code.&lt;/p&gt;</comment>
                            <comment id="12795161" author="cutting" created="Tue, 29 Dec 2009 21:36:24 +0000"  >&lt;p&gt;Jeff&amp;gt; The most recent patch seems to write both the length of the block in number of entries as well as bytes.&lt;/p&gt;

&lt;p&gt;Yes.  I&apos;ve vacillated on that.  The existing code does not use the byte count, but I suspect when we add compression codecs the length will be useful.  If we wish to support a pluggable codec API, we could either make it stream-based or buffer-based.  If we have block lengths written, then the codec API can be a simple buffer-based API like &apos;byte[] compress(byte[]); byte[] decompress(byte[])&apos;.  But if we don&apos;t have block lengths written, then the contract for codec plugins is more complex, so I&apos;m leaning towards them.  This would make it really easy to add, e.g., a FastLZ codec (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-135&quot; title=&quot;add compression to data files&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-135&quot;&gt;&lt;del&gt;AVRO-135&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="12795387" author="philip" created="Wed, 30 Dec 2009 18:50:59 +0000"  >&lt;p&gt;Looked over the patch again.  Looks good.  Synchronization issue is still open.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It&apos;s not so much Hadoop compatibility as consistency: The API should either be thread-safe or not. If you feel that thread safety is not useful here and has a performance penalty then synchronization could be moved to the to-be-written InputFormat implementation that will use this. Would you prefer that?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My preference is against thread-safety in the basic container object.  (Just imagine me with big signs in a protest march... &quot;Say No to Thread Safety&quot;... Oy.)  I don&apos;t actually have any good numbers on how much synchronized blocks cost us.  Java has certainly moved towards ArrayList (and away from Vector), and I think that&apos;s not a crazy parallel.  Waxing more philosophical, half the time I find thread-safe containers don&apos;t buy you much: if you&apos;re using two of them and they need to be modified atomically, you still have to do your own synchronization work.&lt;/p&gt;

&lt;p&gt;hasNext() and next() are methods that make very little sense, btw, synchronized.  You can only call next() when hasNext() is true, but who&apos;s to say someone hasn&apos;t gone in and advanced the pointer while you weren&apos;t looking...&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12795473" author="cutting" created="Wed, 30 Dec 2009 22:35:11 +0000"  >&lt;p&gt;Here&apos;s what I hope will be the final version of this.  I have:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed synchronization&lt;/li&gt;
	&lt;li&gt;Removed the block size.  Codecs may store the block size themselves if they need it.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12795476" author="philip" created="Wed, 30 Dec 2009 22:41:45 +0000"  >&lt;p&gt;+1!&lt;/p&gt;</comment>
                            <comment id="12795529" author="apurtell" created="Thu, 31 Dec 2009 03:23:32 +0000"  >&lt;p&gt;Some quick comments from over on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2055&quot; title=&quot;Serialize WAL as Avro records&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2055&quot;&gt;&lt;del&gt;HBASE-2055&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I see that SYNC_INTERVAL is a constant. Should be configurable? We want 64k, others might want different?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Looking at the most recent patch (2009-12-30 10:35 PM), DataFileWriter will hold up to SYNC_INTERVAL bytes in a buffer before writing out the block, via writeBlock(). We want to hsync after a group of related commits in our write ahead log whether SYNC_INTERVAL is reached or not, but also have the stream marked with a sync marker at each SYNC_INTERVAL. Some kind of flush method that forces writeBlock() would work.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;What happens if the first block is not available but others are? It makes sense to me not to support changing the schema mid-file, but does it make sense to put the schema in multiple places, like super blocks in ext3?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12795598" author="hammer" created="Thu, 31 Dec 2009 13:38:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;Some kind of flush method that forces writeBlock() would work.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Pretty trivial to add. Check out the Python implementation, which already has this method.&lt;/p&gt;</comment>
                            <comment id="12795622" author="cutting" created="Thu, 31 Dec 2009 17:32:27 +0000"  >&lt;p&gt;I just committed this.&lt;/p&gt;</comment>
                            <comment id="12795624" author="cutting" created="Thu, 31 Dec 2009 17:42:33 +0000"  >&lt;p&gt;Andrew: sorry, I committed this before I saw your comments.&lt;/p&gt;

&lt;p&gt;&amp;gt; I see that SYNC_INTERVAL is a constant. Should be configurable?&lt;/p&gt;

&lt;p&gt;Yes.  I&apos;ve filed &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-274&quot; title=&quot;make data file sync interval configurable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-274&quot;&gt;&lt;del&gt;AVRO-274&lt;/del&gt;&lt;/a&gt; to address this.&lt;/p&gt;

&lt;p&gt;&amp;gt; Some kind of flush method that forces writeBlock() would work.&lt;/p&gt;

&lt;p&gt;DataFileWriter#flush() and #sync() both force a writeBlock().  The difference is that the #sync() method does not also force a flush of the file to disk and it returns the position of the sync point, for passing to DataFileReader#seek().&lt;/p&gt;

&lt;p&gt;&amp;gt; does it make sense to put the schema in multiple places, like super blocks in ext3?&lt;/p&gt;

&lt;p&gt;This file format does not attempt to address data integrity issues, rather trusting that to the filesytem.  To process a file whose first block is corrupted would be difficult not just because of the missing schema, but also because of the missing sync marker.  The sync marker may be recoverable from EOF if the file is not truncated, but that is difficult to detect with certainty.&lt;/p&gt;</comment>
                            <comment id="12795752" author="hammer" created="Fri, 1 Jan 2010 14:16:53 +0000"  >&lt;p&gt;Hey Doug,&lt;/p&gt;

&lt;p&gt;To clarify, for the block format, you have removed the count of the number of objects, but you have kept the count of the number of bytes, correct? That&apos;s what the new spec says.&lt;/p&gt;

&lt;p&gt;Also, you use the term &quot;split&quot; in the Java code but do not use it in the spec. You have some logic to force splits. Do you mean for this to be a part of the spec, or is it just a Java-specific optimization?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Jeff&lt;/p&gt;</comment>
                            <comment id="12795870" author="cutting" created="Sat, 2 Jan 2010 16:58:43 +0000"  >&lt;p&gt;&amp;gt; you have removed the count of the number of objects, but you have kept the count of the number of bytes, correct? That&apos;s what the new spec says&lt;/p&gt;

&lt;p&gt;No, the spec currently says each block is prefixed by &quot;a long indicating the count of objects in this block&quot;.  This is as it was before, without a byte count.  Byte counts are left to codec implementations on an as-needed basis.&lt;/p&gt;

&lt;p&gt;&amp;gt; Also, you use the term &quot;split&quot; in the Java code but do not use it in the spec.&lt;/p&gt;

&lt;p&gt;I use that term in the unit test.  The term is borrowed from Hadoop MapReduce, where it refers to dividing a file at arbitrary points among tasks.  This is an important use case for the Java data file implementation.  It requires nothing in the spec more than periodic sync markers.  Probably only the Java implementation needs to implement methods like DataFileReader#sync() and DataFileReader#pastSync(), since Hadoop MapReduce is in Java.&lt;/p&gt;</comment>
                            <comment id="12804653" author="scott_carey" created="Mon, 25 Jan 2010 19:12:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;No, the spec currently says each block is prefixed by &quot;a long indicating the count of objects in this block&quot;. This is as it was before, without a byte count. Byte counts are left to codec implementations on an as-needed basis.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;While working through some use cases, I think it would make sense to have each block have both the record count, and the size in bytes (encoded) of the block.&lt;/p&gt;

&lt;p&gt;Use cases:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Concatenate two avro files with the same schema (and codec).  To do this efficiently, one would want to simply copy the bytes in each block, and not decode any records at all.&lt;/li&gt;
	&lt;li&gt;Convert the codec in a file (read file A with codec X and output file B with codec Y &amp;#8211; for example to compress a file)  In this use case one wants access to the raw bytes in a block, but again decoding and re-encoding the records is a waste of time.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Several other use cases can take advantage of knowing the block size and avoid decoding and encoding records.&lt;/p&gt;

&lt;p&gt;Without the size, one could scan for the sync marker to find the end of the block, but this is both much slower, and unsafe.  A sync marker collision (as rare as that may be) can only be detected by validating the record count, which requires decoding the records.  With the size of the block in the format, use cases where the raw binary block is copied around are simple and safer.&lt;/p&gt;

&lt;p&gt;Furthermore, having the length of the block will allow the Codec interface to perhaps just take the (byte[], offset, length) of the block rather than an Input/Output stream which would improve performance.  &lt;/p&gt;

&lt;p&gt;A byte count of the uncompressed size should be left to the codec.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12805150" author="scott_carey" created="Tue, 26 Jan 2010 19:37:34 +0000"  >&lt;p&gt;Any thoughts on a possible change to the file format to add the size of the block?&lt;/p&gt;

&lt;p&gt;I have a real world use case now for both concatenation and codec conversion.  If the format has the size of the block in it, then implementing that in the file classes is relatively trivial.   Should I open a different ticket?  &lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;-Scott&lt;/p&gt;</comment>
                            <comment id="12805252" author="philip" created="Tue, 26 Jan 2010 22:40:11 +0000"  >&lt;p&gt;Hi Scott,&lt;/p&gt;

&lt;p&gt;I don&apos;t have strong opinions either way on storing another length in there.  To be clear, I think you mean &quot;size in bytes (after codec compression) of the block&quot;.  &quot;encoded&quot; might mean Avro-encoded, which isn&apos;t what you mean, I think.&lt;/p&gt;

&lt;p&gt;For the re-compression use case, codecs need to know when the stream ends anyway, so I&apos;m not sure there&apos;s a big win of having the length.  Though most codecs will be (byte[], offset, length), I would like to leave the door open for codecs operating on the encoder/decoder level (instead of the byte[] level), because they might be able to do more clever things (like columnar storage).&lt;/p&gt;

&lt;p&gt;Another use case for having the block length is being able to do parallel de-compression at the framework, rather than codec, level.  You can read several blocks into memory, and then start threads to decompress or what have you.  Hard to do that if you rely on the codec to tell you where the boundaries are.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12805287" author="scott_carey" created="Tue, 26 Jan 2010 23:57:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;To be clear, I think you mean &quot;size in bytes (after codec compression) of the block&quot;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I would like to leave the door open for codecs operating on the encoder/decoder level (instead of the byte[] level), because they might be able to do more clever things (like columnar storage).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Isn&apos;t that more of a different encoder/decoder implementation than a codec?  Where do we draw that line?  It seems like a fundamentally different layer. if you wanted to do a columnar storage optimization, would you want to have:&lt;br/&gt;
codec: gzip&lt;br/&gt;
codec: fastlz&lt;br/&gt;
codec: columnar&lt;br/&gt;
codec: columnar-gzip&lt;br/&gt;
codec: columnar-fastlz?&lt;/p&gt;

&lt;p&gt;I feel that the layer that does blind lossless compression or other work (crc&apos;s, etc) on the binary data should have one API, and anything that is some sort of schema-aware transform of the data should have another.&lt;/p&gt;

&lt;p&gt;All codecs aren&apos;t stream based or naturally define when their stream ends like gzip does either, if we depend on the codec defining where the boundary of the block is, we are forcing all codecs to implement that feature.  The file format already defines the block boundary markers, why not also define their boundaries more explicitly?  The drawback is a copule extra bytes per block (usually 2 or 3), and the requirement of knowing the size of the block before writing, which is similar to the requirement of knowing the record count before writing that already exists.&lt;/p&gt;</comment>
                            <comment id="12805297" author="philip" created="Wed, 27 Jan 2010 00:28:12 +0000"  >&lt;p&gt;&amp;gt; Isn&apos;t that more of a different encoder/decoder implementation than a codec?&lt;/p&gt;

&lt;p&gt;Yep, you&apos;re right, it would be a different encoder implementation.&lt;/p&gt;

&lt;p&gt;It&apos;s true that codecs already are having to implement boundary knowledge, so we&apos;d get more re-use if we put the length in.  I find that reasonably compelling... we&apos;ve certainly oscillated back and forth here quite a bit.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12805305" author="cutting" created="Wed, 27 Jan 2010 00:51:47 +0000"  >&lt;p&gt;I am okay adding length to blocks, but it should be done in a new issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12443789">HBASE-2055</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12428793" name="AVRO-160-python.patch" size="15575" author="hammer" created="Wed, 23 Dec 2009 06:16:24 +0000"/>
                            <attachment id="12429179" name="AVRO-160.patch" size="42072" author="cutting" created="Wed, 30 Dec 2009 22:35:11 +0000"/>
                            <attachment id="12429090" name="AVRO-160.patch" size="41926" author="cutting" created="Tue, 29 Dec 2009 21:09:05 +0000"/>
                            <attachment id="12428505" name="AVRO-160.patch" size="40365" author="cutting" created="Sat, 19 Dec 2009 00:48:16 +0000"/>
                            <attachment id="12428243" name="AVRO-160.patch" size="33964" author="cutting" created="Thu, 17 Dec 2009 00:18:01 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 20 Oct 2009 21:19:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94487</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10342"><![CDATA[Incompatible change]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dym7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79538</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-161] Add test to Python bindings for opening a non-empty file object container and successfully adding new elements</title>
                <link>https://issues.apache.org/jira/browse/AVRO-161</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Avro file object container are mutable and we should test that fact. testio.py currently just tests open a file for writing, writing a few records, closing the file, then reading the file back in.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12438625">AVRO-161</key>
            <summary>Add test to Python bindings for opening a non-empty file object container and successfully adding new elements</summary>
                <type id="6" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/requirement.png">Test</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="hammer">Jeff Hammerbacher</assignee>
                                    <reporter username="hammer">Jeff Hammerbacher</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Oct 2009 21:26:57 +0000</created>
                <updated>Mon, 1 Mar 2010 21:47:26 +0000</updated>
                            <resolved>Wed, 23 Dec 2009 13:14:29 +0000</resolved>
                                                                    <component>python</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12769158" author="hammer" created="Fri, 23 Oct 2009 10:01:23 +0000"  >&lt;p&gt;I&apos;ve gotten this code path working in a slightly unusual fashion: I implemented Philip&apos;s suggestion in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-158&quot; title=&quot;permit data file appends from java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-158&quot;&gt;&lt;del&gt;AVRO-158&lt;/del&gt;&lt;/a&gt; to have a factory method called DataFileWriter.create_for_append() and I also added a factory method DataFileWriter.create_new() to replace the old, plain constructor. These new methods are implemented using Python&apos;s @classmethod decorator.&lt;/p&gt;

&lt;p&gt;It&apos;s been a while since I wrote production code, so this implementation may be hacky. I&apos;ve gotten it working for realz in a script that you can see at &lt;a href=&quot;http://github.com/hammer/avro-rpc-quickstart/blob/master/src/main/python/serialize_message.py&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/hammer/avro-rpc-quickstart/blob/master/src/main/python/serialize_message.py&lt;/a&gt;. I will turn that patch into a new test in testio.py once I get confirmation on the approach I&apos;ve taken.&lt;/p&gt;

&lt;p&gt;Looking forward to the feedback!&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Jeff&lt;/p&gt;</comment>
                            <comment id="12770080" author="philip" created="Mon, 26 Oct 2009 16:22:29 +0000"  >&lt;p&gt;Seems reasonable from far away, though I&apos;m not currently very familiar with the python code.&lt;/p&gt;

&lt;p&gt;You should add pydoc to _&lt;em&gt;init&lt;/em&gt;_, create_new, and create_for_append, since it&apos;s not clear which one one is supposed to use.  You should move the &quot;from avro.genericio import DatumReader&quot; up to the top of the file.  In create_for_append and create_enw, the existence of the kwargs variable seems unnecessary; you might just do:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;return cls(writer, dwriter, schema=schema.parse(...),
  sync=...,
  codec=...,
  ...
)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Besides that, though, everything seems reasonable.&lt;/p&gt;</comment>
                            <comment id="12773666" author="hammer" created="Wed, 4 Nov 2009 22:18:08 +0000"  >&lt;p&gt;Hey,&lt;/p&gt;

&lt;p&gt;Could a Python committer please take a look at this patch? To address Philip&apos;s comments:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You should add pydoc to &lt;em&gt;init&lt;/em&gt;, create_new, and create_for_append, since it&apos;s not clear which one one is supposed to use.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sure, can do that. More generally, do we need a &quot;create_new&quot;, or should _&lt;em&gt;init&lt;/em&gt;_ default to new?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You should move the &quot;from avro.genericio import DatumReader&quot; up to the top of the file.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can&apos;t due to some fun circular importing.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In create_for_append and create_enw, the existence of the kwargs variable seems unnecessary&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sure, I can do that. I thought kwargs was cleaner, but happy to have constructors with seven arguments if folks like them.&lt;/p&gt;</comment>
                            <comment id="12773816" author="sharadag" created="Thu, 5 Nov 2009 07:39:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;You should add pydoc to init, create_new, and create_for_append, since it&apos;s not clear which one one is supposed to use.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Other alternative could be to use _&lt;em&gt;init&lt;/em&gt;_(self, writer, dwriter, schm=None) which would assume &apos;append&apos; if schema is not passed. Documentation can clearly mention that. This will avoid to have extra factory methods.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can&apos;t due to some fun circular importing.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;io.py should not be using generic.py as it is supposed to be other way round. I think we would have to move DataFileWriter and DataFileReader to different package say datafile.py on the same lines as java which has it in different package.&lt;/p&gt;</comment>
                            <comment id="12778293" author="hammer" created="Mon, 16 Nov 2009 10:53:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we would have to move DataFileWriter and DataFileReader to different package say datafile.py on the same lines as java which has it in different package.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good idea, Sharad. I&apos;ve made the change over at &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-201&quot; title=&quot;Move DataFile[Reader|Writer] from io.py into datafile.py &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-201&quot;&gt;&lt;del&gt;AVRO-201&lt;/del&gt;&lt;/a&gt;. If you review and commit that change, I&apos;ll clean up this patch and get it ready for submission using the new &quot;datafile&quot; module.&lt;/p&gt;</comment>
                            <comment id="12794047" author="hammer" created="Wed, 23 Dec 2009 13:14:29 +0000"  >&lt;p&gt;Fixed in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-219&quot; title=&quot;Rewrite Python implementation&amp;#39;s IO path (schema.py, io.py, genericio.py, datafile.py) and associated tests&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-219&quot;&gt;&lt;del&gt;AVRO-219&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12440781">AVRO-201</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12438615">AVRO-158</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12422999" name="AVRO-161.patch" size="3273" author="hammer" created="Fri, 23 Oct 2009 10:01:23 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 26 Oct 2009 16:22:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94488</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 5 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dymf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79539</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-162] Ensure that the &apos;make distcheck&apos; target works</title>
                <link>https://issues.apache.org/jira/browse/AVRO-162</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The &apos;make distcheck&apos; target command will roll up a tarball that is ready for distribution.  This target will also do a number of important package checks and ensure that all unit tests pass.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Tested on Linux Centos 5.3  by running &apos;make distcheck&apos;&lt;/p&gt;</environment>
        <key id="12438631">AVRO-162</key>
            <summary>Ensure that the &apos;make distcheck&apos; target works</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="massie">Matt Massie</assignee>
                                    <reporter username="massie">Matt Massie</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Oct 2009 22:09:58 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:02 +0000</updated>
                            <resolved>Thu, 22 Oct 2009 16:17:27 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12768737" author="massie" created="Thu, 22 Oct 2009 16:17:27 +0000"  >&lt;p&gt;------------------------------------------------------------------------&lt;br/&gt;
r828771 | massie | 2009-10-22 09:16:00 -0700 (Thu, 22 Oct 2009) | 2 lines&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-162&quot; title=&quot;Ensure that the &amp;#39;make distcheck&amp;#39; target works&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-162&quot;&gt;&lt;del&gt;AVRO-162&lt;/del&gt;&lt;/a&gt;. Ensure that &apos;make distcheck&apos; target works correctly&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12422736" name="AVRO-162.patch" size="38384" author="massie" created="Tue, 20 Oct 2009 22:11:02 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94489</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 14 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dymn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79540</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-163] Each language Avro supports should be a separate package</title>
                <link>https://issues.apache.org/jira/browse/AVRO-163</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;&lt;b&gt;Build Issue&lt;/b&gt;&lt;br/&gt;
While ant is used for building Java projects, it is almost never used to build python, c++ or c projects.  C and C++ projects are often managed using autotools while Python uses setuptools.  Forcing these languages to use a foreign build system (&apos;ant&apos;) is suboptimal and will cause us headaches as we move forward.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Release issue&lt;/b&gt;&lt;br/&gt;
Releasing a single monolithic package forces users of one language to download binary and source for all languages.  For example, at this time the Avro C distribution is only 384K in size (built using autotools &apos;make distcheck&apos; target).  People interested in using the C implementation would be forced to download a large monolithic tarball (currently 3.8 MB) that includes dozens of third-party jar files for the Java implementation.  Furthermore, C users would be forced to use &apos;ant&apos; as the top-level build tool.  This monolithic approach would also prevent us from submitting Avro for inclusion in Linux distribution yum/apt repositories as RPM and Debian packages.  It&apos;s important to allow C/C++ code to have a pristine release tarball on which to base Debian and RPM packaging.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Solution&lt;/b&gt;&lt;br/&gt;
Create top-level directories: &apos;java&apos;, &apos;python&apos;, &apos;c++ &apos; , &apos;c&apos;, &apos;shared&apos; and &apos;release&apos;.  Each language directory would contain the source for that language and use the build system natural for that language, e.g. ant, autotools, setuptools, gem, etc.  The &apos;shared&apos; directory would have, for example, common test schema and data files for interoperability testing between each language.  A simple top-level bash script would call into each language to build a release package, documentation, etc. into the &apos;release&apos; directory.  Each Avro release would then be compromised of package(s) for each language Avro supports, e.g. avro-java-1.2.3.tar.gz, pyavro-1.2.3.tar.gz, avro-c++-1.2.3.tar.gz and avro-c-1.2.3.tar.gz.  Later on, we&apos;ll also likely have libavro-devel-1.2.3-1.x86_64.rpm too.&lt;/p&gt;


</description>
                <environment>&lt;p&gt;We currently release Avro as a single monolithic tarball with ant being used to build all the languages that Avro supports.&lt;/p&gt;</environment>
        <key id="12438635">AVRO-163</key>
            <summary>Each language Avro supports should be a separate package</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.svg">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="massie">Matt Massie</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Oct 2009 23:01:20 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:03 +0000</updated>
                            <resolved>Tue, 12 Jan 2010 01:13:54 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>c</component>
                    <component>c++</component>
                    <component>java</component>
                    <component>python</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                    <timeoriginalestimate seconds="28800">8h</timeoriginalestimate>
                            <timeestimate seconds="28800">8h</timeestimate>
                                        <comments>
                            <comment id="12768003" author="cutting" created="Tue, 20 Oct 2009 23:15:20 +0000"  >&lt;p&gt;The top-level build should probably use a build system, as it will use dependencies.  For example, running interop testing requires first building all ports, then launching their daemons, then running the tests, and finally shutting everything down.  Similarly, coordinating a pan-language documentation build may not be trivial.&lt;/p&gt;

&lt;p&gt;Also, a single release artifact simplifies the release process.  We might subsequently break it into multiple artifacts, but we expect to make coordinated releases and hence for folks to vote on all of the implementations at once, and a single artifact makes it clear that we&apos;re all in agreement.&lt;/p&gt;

&lt;p&gt;It&apos;s useful to easily grab independent parts of the release artifact, either as subdirectories or as nested archives.  We currently include the jars in the release and also then push them to Maven.  Other distributions should also be trivial to extract from the release artifact.&lt;/p&gt;</comment>
                            <comment id="12768044" author="massie" created="Wed, 21 Oct 2009 01:10:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;The top-level build should probably use a build system, as it will use dependencies. For example, running interop testing requires first building all ports, then launching their daemons, then running the tests, and finally shutting everything down. Similarly, coordinating a pan-language documentation build may not be trivial. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You&apos;re probably right here.  We might want to use &apos;ant&apos; or &apos;make&apos; as the top-level build system in order to have the dependency management for interoperability tests since it requires tight coordination between languages (e.g. starting/stopping daemons).  I&apos;d be surprised if there would be any pan-language dependencies for building documentation.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also, a single release artifact simplifies the release process. We might subsequently break it into multiple artifacts, but we expect to make coordinated releases and hence for folks to vote on all of the implementations at once, and a single artifact makes it clear that we&apos;re all in agreement.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree with you that the team should be in complete agreement during a release.  However, I&apos;m not sure that a single release artifact demonstrates team agreement any more or less than having the word &apos;avro&apos; and the umbrella release version in multiple artifact names at the same base URL.  To be clear, I&apos;m not advocating that each language have a separate release cycle.  That fragmentation would be bad for the team and confusing for users.  I&apos;m just saying that when we run &apos;ant release&apos; or &apos;make release&apos; that multiple artifacts be generated instead of one.  We should all vote at the same time for the release artifacts that comprise each release.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It&apos;s useful to easily grab independent parts of the release artifact, either as subdirectories or as nested archives. We currently include the jars in the release and also then push them to Maven. Other distributions should also be trivial to extract from the release artifact.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Would this monolithic release artifact be a light-weight source-only artifact like thrift and protobuf have (~1MB)?  I might be able to use a source-only release as the pristine basis for packaging Avro for Linux distributions.  Binary packages shouldn&apos;t be used for pristine source, e.g. from the Fedora packaging guidelines:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When you encounter prebuilt binaries in a package you MUST:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Remove all pre-built program binaries and program libraries in %prep prior to the building of the package. Examples include, but are not limited to, *.class, *.dll, *.DS_Store, *.exe, *.jar, *.o, *.pyc, *.pyo, *.so files.&lt;/li&gt;
	&lt;li&gt;Ask upstream to remove the binaries in their next release.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we continue to release a monolithic binary release artifact with loads of third-party jar files, I&apos;ll be forced to continually track the binary files and remove them as part of my C/C++ packaging effort.&lt;/p&gt;

&lt;p&gt;Alternatively, the nested archives idea might work but I&apos;ve never seen it done in practice.  Part of the problem is that you have to submit a full URL to the pristine source package for the program you are packaging and I&apos;ve never heard of a package maintainer pointing to a tarball within a tarball for pristine source.  If we&apos;re already generating the tarball as part of the release process, why not just drop it on the web server and give it a unique URL for Debian/RPM packaging in the process?&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Debian New Maintainer&apos;s Guide &lt;a href=&quot;http://www.debian.org/doc/manuals/maint-guide/index.en.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.debian.org/doc/manuals/maint-guide/index.en.html&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Fedora Packaging Guidelines &lt;a href=&quot;https://fedoraproject.org/wiki/Packaging/Guidelines&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://fedoraproject.org/wiki/Packaging/Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12768950" author="massie" created="Thu, 22 Oct 2009 22:47:33 +0000"  >&lt;p&gt;To reiterate my points above more succinctly (I hope):&lt;/p&gt;

&lt;p&gt;1. I don&apos;t care which tool manages the top-level build/release process (e.g. ant, bash, autotools, etc) since that is for internal consumption anyway.  We should use whatever the team feels most comfortable with and gets the job done.&lt;/p&gt;

&lt;p&gt;2. I&apos;m not advocating different release cycles for each language that Avro supports.  However, I strongly believe that each release should generate an artifact (or artifacts) for each language.  These artifacts should be released at the same time, voted on at the same time and shared with the world at the same time from a common base URL (e.g. &lt;a href=&quot;http://www.apache.org/dist/hadoop/avro/avro-1.2.0/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/dist/hadoop/avro/avro-1.2.0/&lt;/a&gt;). Each language should be free to use whatever build system is natural for that language (e.g. ant for java, setuptools for python, autotools for C/C++, etc).&lt;/p&gt;

&lt;p&gt;3. It is unworkable for me to take a monolithic binary release tarball (like we have now) as a basis for packaging Avro for Linux distributions (or MacOS ports, FreeBSD, etc). &lt;/p&gt;

</comment>
                            <comment id="12768952" author="cutting" created="Thu, 22 Oct 2009 22:49:24 +0000"  >&lt;p&gt;So maybe the top-level &apos;ant release&apos; or &apos;make release&apos; target should:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;build a src tarball, with all project sources, buildable.&lt;/li&gt;
	&lt;li&gt;separately build a few binary artifacts, e.g.,
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;jars to be pushed to maven repos&lt;/li&gt;
		&lt;li&gt;documentation tarball&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Would we still need a Java binary release, that includes the bin/avroj shell script and all of the jars we depend on?  Maybe not.  We could package avroj as an executable jar that includes all of the jars we depend on, and release that as a separate binary artifact.&lt;/p&gt;</comment>
                            <comment id="12768954" author="hammer" created="Thu, 22 Oct 2009 22:52:49 +0000"  >&lt;p&gt;Hey,&lt;/p&gt;

&lt;p&gt;Matt&apos;s direction seems very sane to me. As Avro matures, there will hopefully be multiple robust server implementations native to many language bindings, as well as language-specific code for code generation (when needed) that will cause the distribution to bloat as the number of language bindings increases. Also, in the early stages, the different language bindings can differ greatly, so packaging them together may be creating unrealistic expectations in the end user.&lt;/p&gt;

&lt;p&gt;Later,&lt;br/&gt;
Jeff&lt;/p&gt;</comment>
                            <comment id="12768961" author="eli" created="Thu, 22 Oct 2009 23:10:10 +0000"  >&lt;p&gt;+1 to Matt&apos;s proposal, in particular, each language shouldn&apos;t depend on the build infrastructure of the others. &lt;/p&gt;</comment>
                            <comment id="12769317" author="cutting" created="Fri, 23 Oct 2009 17:32:53 +0000"  >&lt;p&gt;No one&apos;s yet responded to my proposal.  Hmm.&lt;/p&gt;

&lt;p&gt;I think, as a project, just as we need a single subversion repository that is the subject of our commit review process, we should build a single src tarball that is the subject of our release voting process:  Folks should be able examine this alone to vote on the release.  Anything that needs to be fixed in the release should be fixed here.&lt;/p&gt;

&lt;p&gt;We can also distribute additional artifacts alongside this as a service to consumers of our releases.  This includes jars, pristine c and c++ tarballs, python eggs, pre-built binaries, etc.  Folks can and should test these independently, but they should be derivable from the primary src tarball.&lt;/p&gt;

&lt;p&gt;My rationale is that I worry that if we only have separate, disjoint artifacts, that represent disjoint source trees, with different folks voting on the different artifacts, then effectively we&apos;ve become a set of projects rather than a single project.  Long-term that may be where we need to go, but for now I don&apos;t think we need to encourage that.  Currently it is possible to build and test all of the versions with a single command on some platforms, including their interoperability.  This is a good thing, and we should encourage it as long as we can.&lt;/p&gt;</comment>
                            <comment id="12769407" author="massie" created="Fri, 23 Oct 2009 20:22:26 +0000"  >&lt;p&gt;NOTE: this patch depends on &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-168&quot; title=&quot;corrected libtool shared library versioning and project version&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-168&quot;&gt;&lt;del&gt;AVRO-168&lt;/del&gt;&lt;/a&gt; which I just committed to trunk.&lt;/p&gt;

&lt;p&gt;This simple patch changes the way that C source code is distributed:&lt;/p&gt;

&lt;p&gt;1. &quot;ant tar&quot; will generate an autotools package along with md5 and sha1 signatures and place them in the top-level &apos;c&apos; directory of the monolithic avro tarball&lt;br/&gt;
2. &quot;ant test&quot; will now test &lt;b&gt;both&lt;/b&gt; the C source and the autotools package as well (see below)&lt;br/&gt;
3. The &quot;ant compile-c&quot; rule has been removed. C code &lt;b&gt;consumers&lt;/b&gt; will use the blessed autotools package.  C code &lt;b&gt;producers&lt;/b&gt; will bootstrap &apos;src/c&apos;.&lt;/p&gt;

&lt;p&gt;I hope this hybrid approach is a good compromise, Doug.  &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;We&apos;ll continue voting on a single monolithic package which includes all languages that we support.&lt;/li&gt;
	&lt;li&gt;Once this monolithic package has passed voting, I request that the files in the &apos;c&apos; directory be published at the same base URL as the monolithic package.  This will allow me a definitive URL for the pristine C source package for Debian/RPM packaging.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&apos;make distcheck&apos; note:&lt;/p&gt;

&lt;p&gt;To properly distribute the Avro C source, we need to run tests on the source &lt;b&gt;and&lt;/b&gt; the autotools build system.  This is accomplished by running the autotools &apos;make distcheck&apos; rule which will make a distribution, try to do a VPATH build, run the test suite, and finally make another tarball to ensure the distribution is self-contained.  This rigorous process will ensure that C users have a distribution that works &quot;out of the box&quot; without hassles.&lt;/p&gt;




</comment>
                            <comment id="12769458" author="cutting" created="Fri, 23 Oct 2009 21:21:43 +0000"  >&lt;p&gt;I don&apos;t see the point of putting the autotools package into the &quot;monolithic&quot; tar ball.  &lt;/p&gt;

&lt;p&gt;I thought the plan was to:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;rename the primary tarball avro-src-X.X.X.tar.gz.  this will mostly contain a snapshot of svn, in particular:
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;all source code&lt;/li&gt;
		&lt;li&gt;no jar files&lt;/li&gt;
		&lt;li&gt;no C or C++ binaries from it&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;generate the following sibling files:
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;avro-X.X.X.jar&lt;/li&gt;
		&lt;li&gt;avro-doc-X.X.X.tar.gz&lt;/li&gt;
		&lt;li&gt;avro-c-src.X.X.X.tar.gz&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;we distribute all of these&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you only want to do the C-related parts of this now, that&apos;s probably fine, and we can file issues to do the others before we next release.  But packaging the autotools package into the primary tarball seems like a step in the wrong direction.&lt;/p&gt;

&lt;p&gt;I can&apos;t tell whether there&apos;s something you don&apos;t like about my proposal, or something you don&apos;t get about it.  Is it that you don&apos;t like having a primary tarball with sources for all languages?  I thought your priority was to distribute a C-only src tarball.  I understand the utility of that and embrace it.  My priority is to have a single artifact that we can vote on.  That&apos;s the way things are done at Apache, and I don&apos;t see a compelling reason to try to invent new Apache policy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.apache.org/dev/release.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/dev/release.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; To properly distribute the Avro C source, we need to run tests on the source and the autotools build system.&lt;/p&gt;

&lt;p&gt;Then please make that a part of the target run by &apos;ant test&apos; at the top-level, if you have not already.  That target is intended for folks who&apos;d like to try to test everything fully.&lt;/p&gt;</comment>
                            <comment id="12769560" author="massie" created="Sat, 24 Oct 2009 01:13:26 +0000"  >&lt;p&gt;Submitted a revised patch to build.xml which:&lt;/p&gt;

&lt;p&gt;1. Changes &quot;package&quot; target to just do a raw copy of the &apos;src/c&apos; from subversion. No C binaries.&lt;br/&gt;
2. Adds a new &quot;tar-c&quot; convenience target for generate a C package artifact &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I don&apos;t see the point of putting the autotools package into the &quot;monolithic&quot; tar ball.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That was because of my misunderstanding the voting process.  I thought that in order to release a C package artifact it would need to be packaged in the release we vote on.  Now I understand that the vote is on a particular subversion tag basically.  I&apos;ve completed removed the autotools package and now the &apos;src/c&apos; directory is just copied verbatim from subversion.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;I thought the plan was to:&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I completely agree with this plan and the updated patch moves us closer toward this goal.&lt;/p&gt;

&lt;p&gt;However, I &lt;b&gt;didn&apos;t&lt;/b&gt; (for now):&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Change the primary tarball name to avro-src.&lt;/li&gt;
	&lt;li&gt;Changed packaging for any other language but C&lt;/li&gt;
	&lt;li&gt;Change how documentation is being generated&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;If you only want to do the C-related parts of this now, that&apos;s probably fine, and we can file issues to do the others before we next release. But packaging the autotools package into the primary tarball seems like a step in the wrong direction.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed.  See above.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I can&apos;t tell whether there&apos;s something you don&apos;t like about my proposal, or something you don&apos;t get about it. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I can promise without qualification that if I don&apos;t like a proposal, I will publicly state so.  I misunderstood the requirements and process.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...and I don&apos;t see a compelling reason to try to invent new Apache policy. &lt;a href=&quot;http://www.apache.org/dev/release.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/dev/release.html&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I wasn&apos;t trying to invent new policies and thank you for helping me learn more about the release process at Apache.  I&apos;m sorry for any frustration my initial ignorance caused.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Then please make that a part of the target run by &apos;ant test&apos; at the top-level, if you have not already. That target is intended for folks who&apos;d like to try to test everything fully.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I did that in the original and subsequent patch updates.&lt;/p&gt;

&lt;p&gt;I&apos;ve also add a convenience &apos;tar-c&apos; target for building a release.  If you want to generate the C side artifacts at the same time as the primary tarball, you can simply run&lt;/p&gt;

&lt;p&gt;$ ant tar tar-c&lt;/p&gt;

&lt;p&gt;The build directory will then have the primary tarball with signatures &lt;b&gt;and&lt;/b&gt; the C side artifacts with signatures.&lt;/p&gt;

&lt;p&gt;Doug, I hope that you and rest of the Avro team have a good weekend.&lt;/p&gt;
</comment>
                            <comment id="12770639" author="cutting" created="Tue, 27 Oct 2009 21:05:00 +0000"  >&lt;p&gt;This patch looks good.  Before we make our next release though I think we should consistently use this style for all languages.  We can either:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;commit this and file other blocker issues for other languages&lt;/li&gt;
	&lt;li&gt;update others here too&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Which do you prefer?&lt;/p&gt;</comment>
                            <comment id="12770713" author="massie" created="Wed, 28 Oct 2009 00:05:53 +0000"  >&lt;p&gt;I prefer the &lt;ins&gt;update others here too&lt;/ins&gt; option in order to keep all the information about the work in one Jira issue.  It would also be nice if we all move to the new build/release setup at the same time.&lt;/p&gt;

&lt;p&gt;I can do the C++ changes if Scott approves.  The &apos;ant&apos; targets he&apos;s currently using are copy-paste of the C rules I wrote previously (which is a Good thing) and makes it easy to update C++ .  As a first pass, I&apos;d just tar up src/c++ to generate the C++ tarball artifact.  I might also be able to help create the separate documentation tarball artifact.&lt;/p&gt;

&lt;p&gt;The Python re-factoring doesn&apos;t seem too painful (just ensure no *.pyc *.pyo files end up in the source release) but I really feel sorry for the guy who has to do the Java changes.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Does it make sense to create a new &apos;release&apos; target that creates a &quot;release-${version}&quot; directory with the source tarball and all the artifacts?  For example, right now it would just depend on &quot;tar&quot; and &quot;tar-c&quot; (and soon tar-c++).&lt;/p&gt;









</comment>
                            <comment id="12770716" author="cutting" created="Wed, 28 Oct 2009 00:12:40 +0000"  >&lt;p&gt;The java changes should be just removing the copy of the jars into the src package, and moving the checksums of these outside too.  All files intended for distribution should be checksummed.&lt;/p&gt;</comment>
                            <comment id="12770724" author="sbanacho" created="Wed, 28 Oct 2009 00:33:53 +0000"  >&lt;p&gt;Matt, no problem if want to do the C++ changes.  Let me know if I can help.  Scott&lt;/p&gt;</comment>
                            <comment id="12770745" author="massie" created="Wed, 28 Oct 2009 01:33:04 +0000"  >&lt;p&gt;Scott-&lt;/p&gt;

&lt;p&gt;Here is a patch for the C++ implementation for you to take a look at.  The changes are pretty minimal.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Binaries from &apos;make install&apos; aren&apos;t part of the main source package we&apos;ll all vote on&lt;/li&gt;
	&lt;li&gt;The &apos;test-cpp&apos; ant target is still functional so we can easily run &apos;ant test&apos; across all languages we support&lt;/li&gt;
	&lt;li&gt;The &apos;compile-cpp&apos; ant target has been dropped&lt;/li&gt;
	&lt;li&gt;A new &apos;tar-cpp&apos; target was added to create C++ build artifact for C++ users.  Allows them to simply &quot;./configure; make&quot; your autotools tarball.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This isn&apos;t in its final form but I want to let you quickly see what changes to expect so you can comment.&lt;/p&gt;

&lt;p&gt;I think we&apos;re going to stitch the &apos;tar&apos;, &apos;tar-c&apos; and &apos;tar-cpp&apos; targets into a single &apos;release&apos; rule that creates directory with our main source release and all the build artifacts.  Does that sound correct, Doug?&lt;/p&gt;</comment>
                            <comment id="12771016" author="sbanacho" created="Wed, 28 Oct 2009 17:42:22 +0000"  >&lt;p&gt;Hi Matt&lt;br/&gt;
I tried the patch.  ant tar-cpp doesn&apos;t quite work.  The reason is that it goes to the source directory and does &quot;make clean&quot;, but until configure is run, there is no makefile so the command fails and ant stops.&lt;/p&gt;

&lt;p&gt;It&apos;s a pretty good guess if there&apos;s no Makefile in the source directory that it is already clean, so we could just set  failonerror=&quot;false&quot; for that step.  Or first check for the presence of Makefile and skip that step if it does not exist.  &lt;/p&gt;

&lt;p&gt;Another comment, should this step call &quot;make distclean&quot; instead of &quot;make clean&quot;   Clean won&apos;t usually remove the Makefile and other products of configure, but distclean should.  (BTW c++ I didn&apos;t use the full autotools chain, so my targets may not be fully gnupliant. but I can certainly add a disctlean target if needed).&lt;/p&gt;

</comment>
                            <comment id="12771030" author="massie" created="Wed, 28 Oct 2009 18:08:43 +0000"  >&lt;p&gt;If you use automake to build C+&lt;ins&gt;, then we can drop the &apos;make clean&apos;/ &apos;make distclean&apos; altogether since it won&apos;t be needed.  We&apos;ll just use a simple &apos;make distcheck&apos; to build a tested C&lt;/ins&gt;+ distribution.&lt;/p&gt;

&lt;p&gt;If you use automake, you&apos;ll be required to explicitly state all the files, unit tests, etc in your distribution in Makefile.am.  Any files that are not part of your distribution will just be ignored (and prevent unwanted artifacts from creeping into your distribution).  Automake will give you the &apos;distcheck&apos; rule for free once you move over.  I&apos;m happy to help getting automake working for the C++ build if you need it.  You could use the src/c/Makefile.am as a guide for your work.&lt;/p&gt;

&lt;p&gt;Alternatively, using the failonerror=false attribute could serve as a quick workaround if you don&apos;t have time.&lt;/p&gt;</comment>
                            <comment id="12771086" author="sbanacho" created="Wed, 28 Oct 2009 20:01:12 +0000"  >&lt;p&gt;I&apos;ll convert to automake sometime soon--it&apos;ll give me a chance to better learn those tools.  But until then, we can do the no-failonerror approach.&lt;/p&gt;</comment>
                            <comment id="12771176" author="cutting" created="Wed, 28 Oct 2009 22:49:29 +0000"  >&lt;p&gt;Thinking more about Java, what we might do to be consistent is:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;move src/java to src/java/core&lt;/li&gt;
	&lt;li&gt;move src/test/java to src/java/test&lt;/li&gt;
	&lt;li&gt;move src/test/schemata to src/share&lt;/li&gt;
	&lt;li&gt;use an svn:external to link src/java/share to src/share&lt;/li&gt;
	&lt;li&gt;add src/java/build.xml with java-specific build logic&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This would make src/java build standalone, like src/c and src/c++.  The Java distribution artifacts would be:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;avro-X.Y.Z.jar
{,md5,sha1}&lt;br/&gt;
 - avro-tool-X.Y.Z.jar{,md5,sha1}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We should probably do something similar with Python too.&lt;/p&gt;

&lt;p&gt;Also, in addition to checksum files, every derived artifact we intend to release must include appropriate licenses and notices, as required by the Apache license.&lt;/p&gt;

&lt;p&gt;As for documentation, I think the top-level build should bundle together the documentation for all languages into a single doc tarball.&lt;/p&gt;</comment>
                            <comment id="12771267" author="thiru_mg" created="Thu, 29 Oct 2009 03:10:58 +0000"  >&lt;p&gt;+1 for Doug&apos;s proposal for directory structure.&lt;/p&gt;

&lt;p&gt;There are merits of having java, c++ etc at one level above core and test and there are also advantages of having the opposite. There doesn&apos;t seem to be a clear winner. The latter one which is the maven convention is reasonably well understood and widely used.  But unfortunately it does not suit us because maven convention is best suited for single artifact builds; it makes it difficult to support language specific builds. This means that it&apos;ll be hard to move to maven, if we want, in the future. I&apos;m okay with it.&lt;/p&gt;</comment>
                            <comment id="12789947" author="hammer" created="Sun, 13 Dec 2009 21:23:00 +0000"  >&lt;p&gt;It seems that we came to an agreement on how to proceed on this issue in October but have made no progress on implementing this refactoring. What is the timeline for making this refactoring happen?&lt;/p&gt;</comment>
                            <comment id="12790286" author="cutting" created="Mon, 14 Dec 2009 18:51:23 +0000"  >&lt;p&gt;I&apos;d like to implement this before the 1.3 release, but perhaps only after most other things we intend for that release are committed, so we break fewer patches.  I&apos;m willing to make the java-specific changes.  I&apos;m currently hoping we can get 1.3 out in January, including &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-160&quot; title=&quot;file format should be friendly to streaming&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-160&quot;&gt;&lt;del&gt;AVRO-160&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12790325" author="hammer" created="Mon, 14 Dec 2009 20:11:43 +0000"  >&lt;p&gt;Great, thanks for the update Doug! I&apos;ll ensure the Python stuff works correctly and could knock off &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-136&quot; title=&quot;add support for building/releasing python eggs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-136&quot;&gt;&lt;del&gt;AVRO-136&lt;/del&gt;&lt;/a&gt; at the same time. When are you thinking about a 1.3 release?&lt;/p&gt;</comment>
                            <comment id="12796885" author="cutting" created="Tue, 5 Jan 2010 22:40:17 +0000"  >&lt;p&gt;Starting work on this.&lt;/p&gt;

&lt;p&gt;I&apos;m currently planning to put most things under src/, i.e.:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;src
  share
    schemas
    test
  doc
  java
    src
    test
    lib
  py
    src
    lib
  c
  c++
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My preference is to create all artifacts in a top-level build/ directory, treating the src/ tree as read-only.  It makes bundling the sources into a release simpler, makes the &quot;clean&quot; target easier to implement, simplifies ignore file maintenance, etc.  On the other hand, we want each src subdirectory to be organized according to the norms of its language, using the build tools of that language, etc, which may or may not make this simple.&lt;/p&gt;

&lt;p&gt;If we decide against this, then perhaps the top-level src/ directory should be elided.&lt;/p&gt;

&lt;p&gt;The top-level build file should have the following targets:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;test, runs tests for all languages, including interop tests&lt;/li&gt;
	&lt;li&gt;doc, builds all docs in build/doc&lt;/li&gt;
	&lt;li&gt;forrestdoc builds top-level docs in build/doc&lt;/li&gt;
	&lt;li&gt;package, creates in build/
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;avro-src-X.Y.Z.tar.gz &amp;#8211; includes all sources&lt;/li&gt;
		&lt;li&gt;avro-doc-X.Y.Z.tar.gz &amp;#8211; full, generated documentation&lt;/li&gt;
		&lt;li&gt;avro-X.Y.Z.jar &amp;#8211; compiled java jar&lt;/li&gt;
		&lt;li&gt;avro-tools-X.Y.Z.jar&lt;/li&gt;
		&lt;li&gt;avro-c-X.Y.Z.tar.gz &amp;#8211; ready-to-build C&lt;/li&gt;
		&lt;li&gt;avro-cpp-X.Y.Z.tar.gz &amp;#8211; ready-to-build C++&lt;/li&gt;
		&lt;li&gt;etc.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;clean&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Each language should support the targets:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;test to run all of its internal tests&lt;/li&gt;
	&lt;li&gt;gen-interop-data to generate test data files in build/test/interop/data/$lang&lt;/li&gt;
	&lt;li&gt;start-interop-daemon to start a daemon, recording the port in build/test/interop/daemons/$lang&lt;/li&gt;
	&lt;li&gt;doc to build its docs and install them in build/docs/$lang&lt;/li&gt;
	&lt;li&gt;package to post its generated release artifacts to build/release&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12796926" author="hammer" created="Wed, 6 Jan 2010 00:00:21 +0000"  >&lt;p&gt;Do we need examples of serialized data? I recall wanting that during my testing. I suppose I can use an existing library to serialize some data for testing, but it may be handy to have another directory under share/ for that stuff?&lt;/p&gt;</comment>
                            <comment id="12796930" author="cutting" created="Wed, 6 Jan 2010 00:13:52 +0000"  >&lt;p&gt;&amp;gt; Do we need examples of serialized data?&lt;/p&gt;

&lt;p&gt;The interop testing has each impl generate serialized data that all the others read.  We could also commit some serialized data to subversion if we like.&lt;/p&gt;

&lt;p&gt;I&apos;ve thought of someday adding a random datum generator to interop testing.  If all implementations used the same generation rules and the same random number generator (e.g., linear congruential), then each could post the random seed with generated data and others could then fully validate the data that they read.&lt;/p&gt;</comment>
                            <comment id="12796956" author="philip" created="Wed, 6 Jan 2010 01:54:48 +0000"  >&lt;p&gt;I think if someone was writing a test for a specific feature, and wanted to use the same data across several languages, they could use src/share/test/feature_foo/*, with a README, and test data, as they desire.  I think as long as the data is relatively small (to avoid SCM bloat), it&apos;s fair game.  A random number generator would be great, too, but overkill for some things.&lt;/p&gt;

&lt;p&gt;It&apos;s a bit of a bitch to compile python into a separate directory: it tends to leave *.pyc files lying around.  Similarly make and autoconf tend to leave things lying around.  Are we going to run into undue trouble keeping the src/ tree read-only?  Matt--do you have an opinion?  &lt;/p&gt;

&lt;p&gt;Having top-level directories per implementation, plus shared, plus build/ for final artificats, and intermediate artifacts in per-language appropriate version ways would be reasonable too.  That represents the fact that avro is a spec, with N implementations, which happen to all depend on the same shared test data.  But this is a pretty idle concern: I&apos;m happy either way.&lt;/p&gt;</comment>
                            <comment id="12797003" author="massie" created="Wed, 6 Jan 2010 06:19:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think if someone was writing a test for a specific feature, and wanted to use the same data across several languages, they could use src/share/test/feature_foo/*, with a README, and test data, as they desire. I think as long as the data is relatively small (to avoid SCM bloat), it&apos;s fair game. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It&apos;s a bit of a bitch to compile python into a separate directory: it tends to leave *.pyc files lying around. Similarly make and autoconf tend to leave things lying around. Are we going to run into undue trouble keeping the src/ tree read-only? Matt--do you have an opinion?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m using VPATH builds so a &quot;read-only&quot; src would be ok as far as I&apos;m concerned.  &lt;/p&gt;

&lt;p&gt;The layout as shown works for me although I&apos;d prefer to elide the top-level &apos;src&apos; directory altogether.&lt;/p&gt;

&lt;p&gt;@doug&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Each language should support the targets:...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Are you planning to put all the targets for all languages into a single top-level ant file?  &lt;/p&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;p&gt;Using a simple bash script which does something like...&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; lang in py java c++ c
&lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt;
  src/$lang/avro-build.sh gen-interop-data build/test/interop/data/$lang
done
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;




</comment>
                            <comment id="12797215" author="cutting" created="Wed, 6 Jan 2010 18:14:35 +0000"  >&lt;p&gt;&amp;gt; Are you planning to put all the targets for all languages into a single top-level ant file?&lt;/p&gt;

&lt;p&gt;I was thinking there would be a top-level ant file that has an, e.g., &quot;dist&quot; target that invokes something like &apos;make dist&apos; for C and C++, and &apos;ant dist&apos; for Java and Python.  I was hoping that the top-level build file need not have targets for, e.g., &quot;package-c&quot;, but I also don&apos;t think we need a uniform way of invoking the sub-builds.  If we change Python to use something other than Ant for its build, then we&apos;d also have to update the top-level build file.  So the top-level build.xml might contain something like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&amp;lt;target name=&lt;span class=&quot;code-quote&quot;&gt;&quot;dist&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;ant dir=&lt;span class=&quot;code-quote&quot;&gt;&quot;java&quot;&lt;/span&gt; target=&lt;span class=&quot;code-quote&quot;&gt;&quot;dist&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;ant dir=&lt;span class=&quot;code-quote&quot;&gt;&quot;py&quot;&lt;/span&gt; target=&lt;span class=&quot;code-quote&quot;&gt;&quot;dist&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;exec dir=&lt;span class=&quot;code-quote&quot;&gt;&quot;c&quot;&lt;/span&gt; command=&lt;span class=&quot;code-quote&quot;&gt;&quot;make dist&quot;&lt;/span&gt; failonerror=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;exec dir=&lt;span class=&quot;code-quote&quot;&gt;&quot;c++&quot;&lt;/span&gt; command=&lt;span class=&quot;code-quote&quot;&gt;&quot;make dist&quot;&lt;/span&gt; failonerror=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;/&amp;gt;
&amp;lt;/target&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we&apos;d like &apos;cd c; make dist&apos; to create dist/avro-c-X.Y.Z with the right version.  So the version has  to be stored to a file somewhere, e.g., VERSION.txt at top-level.&lt;/p&gt;

&lt;p&gt;&amp;gt; I&apos;d prefer to elide the top-level &apos;src&apos; directory altogether.&lt;/p&gt;

&lt;p&gt;I tried that, and &apos;ls&apos; looked wrong to me.  Aesthetically I preferred seeing at top-level something like:&lt;/p&gt;

&lt;p&gt;CHANGES.txt LICENSE.txt README.txt  VERSION.txt build.xml build/ src/&lt;/p&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;p&gt;CHANGES.txt LICENSE.txt README.txt  VERSION.txt  build.xml c/ c++/ dist/ doc/ java/ py/ share/&lt;/p&gt;

&lt;p&gt;Is that just me?  If so, I can easily change this.  As I write this I care less and less about this distinction.&lt;/p&gt;

&lt;p&gt;Note that, if we don&apos;t label things &apos;src&apos; at top-level, then, to my thinking, each should have its own src/ and build/ within, and we&apos;re abandoning the notion that these are read-only.  But we still need a top-level directory where each sub-build places artifacts for distribution, i.e., dist/.&lt;/p&gt;

&lt;p&gt;&amp;gt; Using a simple bash script which does something like...&lt;/p&gt;

&lt;p&gt;We&apos;d need a script for each top-level target (package, test, doc &amp;amp; clean), or, I suppose we could have a single script with something like:&lt;/p&gt;

&lt;p&gt;src/$lang/build.sh $target&lt;/p&gt;

&lt;p&gt;but I still don&apos;t see the advantage of maintaining a build.sh in each directory over maintaining a top-level build file that performs the same function: translating from these logical targets to the build system each implementation uses.&lt;/p&gt;</comment>
                            <comment id="12797240" author="massie" created="Wed, 6 Jan 2010 18:47:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;I was thinking there would be a top-level ant file that has an, e.g., &quot;dist&quot; target that invokes something like &apos;make dist&apos; for C and C++, and &apos;ant dist&apos; for Java and Python.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That works for me.  It&apos;s not much different that what we have now.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So the version has to be stored to a file somewhere, e.g., VERSION.txt at top-level.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It would be nice to have the VERSION.txt file.  If you look at src/c/version.sh, you see that I&apos;m just using sed on the top-level build.xml to extract the version now.  Having the VERSION.txt means I&apos;ll change to &apos;cat&apos;. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I tried that, and &apos;ls&apos; looked wrong to me.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t feel strongly about this really.  My current C source tree has a &apos;src&apos; directory.  It seems a little odd in the docs to tell people to look for the C source at &apos;src/c/src&apos;.  Having a &apos;src&apos; with multiple implementations in different languages is unusual to me.  What if the top-level &apos;src&apos; directory was renamed to &apos;lang&apos; or &apos;impl&apos;?   e.g. lang/java/src, lang/c/src.  I will be perfectly happy if we keep the top-level &apos;src&apos; directory too.  Functionally it really doesn&apos;t matter.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I still don&apos;t see the advantage of maintaining a build.sh in each directory&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s not a big deal one way or another.  The advantages that I see:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Aside from Java developers, most other developers don&apos;t know &apos;ant&apos; as well as &apos;bash&apos;.&lt;/li&gt;
	&lt;li&gt;It provides a little more delegation to each language implementer and allows the top-level script to be simpler, cleaner and easier to understand.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I don&apos;t want any of my comments to slow progress on this ticket though.  If my suggestions complicate things, please ignore them.&lt;/p&gt;


</comment>
                            <comment id="12797395" author="philip" created="Wed, 6 Jan 2010 23:41:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;Note that, if we don&apos;t label things &apos;src&apos; at top-level, then, to my thinking, each should have its own src/ and build/ within, and we&apos;re abandoning the notion that these are read-only. But we still need a top-level directory where each sub-build places artifacts for distribution, i.e., dist/.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Are the options we&apos;re discussing essentially one of the two (source code location, intermediate build artificat location)-pairs? (src/LANG/src, build/LANG) and (LANG/src, LANG/build).&lt;/p&gt;

&lt;p&gt;A nice advantage of the latter is that a language&apos;s specific build never needs to go up the directory tree, but that&apos;s a small advantage.  I&apos;m game for either.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12797408" author="cutting" created="Thu, 7 Jan 2010 00:15:53 +0000"  >&lt;p&gt;&amp;gt; A nice advantage of the latter is that a language&apos;s specific build never needs to go up the directory tree [ ... ]&lt;/p&gt;

&lt;p&gt;Somehow release artifacts need to make it up to the top-level dist/ directory.  I&apos;d assumed this would be done by each language implementing a &apos;dist&apos; target that pushes its release artifacts to dist/.  Similarly, each language&apos;s &apos;doc&apos; target would push generated documentation to the top-level build/doc/$lang directory so that the top-level build can bundle these into dist/avro-doc-X.Y.Z.tar.gz.  With this approach, language-specific builds would still need to go up the directory tree.&lt;/p&gt;

&lt;p&gt;Alternately we could have the top-level build pull docs and other release artifacts from the language-specific builds.  The langauge-specific &apos;dist&apos; and &apos;docs&apos; targets would create artifacts in language-specific places, and the top-level build would know where these are and pull them from there to the top-level dist/ directory.&lt;/p&gt;

&lt;p&gt;Note that we can use &apos;svn export&apos; to create the src release in the top-level build, so the presence of language-specific generated files should not complicate that.&lt;/p&gt;</comment>
                            <comment id="12797807" author="cutting" created="Thu, 7 Jan 2010 22:06:03 +0000"  >&lt;p&gt;Let&apos;s put all the implementations under lang/, so we have lang/java,&lt;br/&gt;
lang/c, etc.  Then at top-level, we&apos;ll have share/, doc/, and&lt;br/&gt;
dist/.&lt;/p&gt;

&lt;p&gt;Langs builds will not be entirely standalone, but will read schemas&lt;br/&gt;
from ../../share/schemas, read test data from ../../share/test/data,&lt;br/&gt;
write interop data to ../../share/build/test/interop and publish&lt;br/&gt;
release artifacts to ../../dist.  (We can&apos;t use symlinks, since they don&apos;t work on Windows.)&lt;/p&gt;

&lt;p&gt;The top-level build will be a shell script, build.sh, containing the&lt;br/&gt;
following targets:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;test
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;invokes each lang&apos;s test target&lt;/li&gt;
		&lt;li&gt;invokes each lang&apos;s interop-gen target, placing output in ../../share/build/test/interop/$lang&lt;/li&gt;
		&lt;li&gt;invokes each lang&apos;s test-interop target, reading ../../share/build/test/interop/*&lt;/li&gt;
		&lt;li&gt;invokes each lang&apos;s start-interop-daemon target, copying ports &amp;amp; pids to ../../share/build/test/interop/$lang.
{port,pid}&lt;/li&gt;
		&lt;li&gt;invokes each lang&apos;s test-interop-rpc target, which sends requests to ../../share/build/test/interop/*.port&lt;/li&gt;
		&lt;li&gt;kills each process in share/build/test/interop/*.pid&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;dist
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;uses &apos;svn export&apos; to create source release in dist/&lt;/li&gt;
		&lt;li&gt;invokes each lang&apos;s dist target, which writes output to dist/&lt;/li&gt;
		&lt;li&gt;invokes each lang&apos;s doc target, which writes output to share/build/$lang/doc, then tars these to dist/&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;clean, invokes each lang&apos;s clean target and removes share/build&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The top-level build will invoke the lang targets in language-specific&lt;br/&gt;
ways, e.g., running &apos;ant dist&apos; for Java, and &apos;make dist&apos; for C.&lt;/p&gt;

&lt;p&gt;In the first version of this, for simplifcation, I will leave out&lt;br/&gt;
interop testing.&lt;/p&gt;</comment>
                            <comment id="12797856" author="philip" created="Fri, 8 Jan 2010 00:59:39 +0000"  >&lt;p&gt;Sounds great.&lt;/p&gt;</comment>
                            <comment id="12797858" author="cutting" created="Fri, 8 Jan 2010 01:09:35 +0000"  >&lt;p&gt;Here&apos;s a script that does the &apos;svn mv&apos; commands, and a patch file that should be applied afterwards.  So far, only the java build has been updated.&lt;/p&gt;</comment>
                            <comment id="12798431" author="hammer" created="Sun, 10 Jan 2010 00:50:30 +0000"  >&lt;p&gt;One last question: it would be great to have a &quot;tutorial&quot; across languages that comes with a source checkout and shows folks how to get moving with a simple Avro data file, client, and server. Thrift, for example, has &lt;a href=&quot;http://svn.apache.org/viewvc/incubator/thrift/trunk/tutorial/tutorial.thrift?view=markup&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/incubator/thrift/trunk/tutorial/tutorial.thrift?view=markup&lt;/a&gt;. Could we leave a directory for that?&lt;/p&gt;</comment>
                            <comment id="12798752" author="cutting" created="Mon, 11 Jan 2010 18:05:46 +0000"  >&lt;p&gt;Tutorial&apos;s might best go in the forrest docs, no?&lt;/p&gt;</comment>
                            <comment id="12798854" author="hammer" created="Mon, 11 Jan 2010 20:44:06 +0000"  >&lt;p&gt;I suppose, but I prefer working code that I don&apos;t have to copy and paste.&lt;/p&gt;</comment>
                            <comment id="12798901" author="cutting" created="Mon, 11 Jan 2010 22:37:13 +0000"  >&lt;p&gt;I didn&apos;t notice that the file you first pointed to was part of a larger demo tree.  That&apos;d be a great thing to have for Avro, but I&apos;m not sure what provisions you&apos;d like for it in the directory organization.  Would you want each implementation to include the tutorial code within its tree, or would you prefer a top-level tutorial tree?  Either way, I don&apos;t see that it affects the current restructuring much.  Am I missing something?&lt;/p&gt;</comment>
                            <comment id="12798902" author="hammer" created="Mon, 11 Jan 2010 22:41:07 +0000"  >&lt;p&gt;I think a top-level tutorial folder is better than a per-implementation tutorial. I only bring it up now as it&apos;s a directory layout issue. Sorry for holding up this change, we can debate a tutorial later.&lt;/p&gt;</comment>
                            <comment id="12798974" author="cutting" created="Tue, 12 Jan 2010 01:13:54 +0000"  >&lt;p&gt;I just committed this.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12445249">AVRO-309</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12437350">AVRO-136</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12423383" name="AVRO-163-cpp.patch" size="2514" author="massie" created="Wed, 28 Oct 2009 01:33:04 +0000"/>
                            <attachment id="12429698" name="AVRO-163.patch" size="2276294" author="cutting" created="Fri, 8 Jan 2010 01:09:35 +0000"/>
                            <attachment id="12423091" name="AVRO-163.patch" size="2817" author="massie" created="Sat, 24 Oct 2009 01:13:26 +0000"/>
                            <attachment id="12423055" name="AVRO-163.patch" size="2374" author="massie" created="Fri, 23 Oct 2009 20:22:26 +0000"/>
                            <attachment id="12429697" name="AVRO-163.sh" size="624" author="cutting" created="Fri, 8 Jan 2010 01:09:35 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 20 Oct 2009 23:15:20 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94490</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10342"><![CDATA[Incompatible change]]></customfieldvalue>
    <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 2 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dymv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79541</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
