<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:23:28 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2016-5-18+AND+created+%3C%3D+2016-5-25+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="6" total="6"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1847] IDL compiler should use BigDecimal to represent decimal logical type.</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1847</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Version 1.8.0 has added the support of logical types. A conversion class (Conversions.DecimalConversion) has also been added for decimal type. However, the IDL compiler still uses ByteBuffer for decimal types, which is not the same behaviour as data, time or timestamp type (added in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1684&quot; title=&quot;Add date, time, and timestamp to specific object model classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1684&quot;&gt;&lt;del&gt;AVRO-1684&lt;/del&gt;&lt;/a&gt;). &lt;/p&gt;</description>
                <environment></environment>
        <key id="12970780">AVRO-1847</key>
            <summary>IDL compiler should use BigDecimal to represent decimal logical type.</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="Yibing">Yibing Shi</assignee>
                                    <reporter username="Yibing">Yibing Shi</reporter>
                        <labels>
                    </labels>
                <created>Wed, 18 May 2016 14:28:43 +0000</created>
                <updated>Sun, 2 Apr 2017 21:46:30 +0000</updated>
                            <resolved>Wed, 22 Jun 2016 22:08:44 +0000</resolved>
                                    <version>1.8.0</version>
                                    <fixVersion>1.9.0</fixVersion>
                    <fixVersion>1.8.2</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="15289414" author="rdblue" created="Wed, 18 May 2016 17:46:21 +0000"  >&lt;p&gt;Thanks for working on this, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Yibing&quot; class=&quot;user-hover&quot; rel=&quot;Yibing&quot;&gt;Yibing Shi&lt;/a&gt;. For specific, we have to do a bit more work than just adding the conversion. The IDL would need to have a &quot;decimal(S,P)&quot; type added or else this will only work when compiling schemas. We also need to add tests, like the ones that were added for date, time, and timestamp that verify this works and is compatible with classes generated by older versions of the compiler. I&apos;m glad to see that it&apos;s so close to working with small changes, though. Shouldn&apos;t be too much more work to get this in.&lt;/p&gt;</comment>
                            <comment id="15290055" author="yibing" created="Wed, 18 May 2016 23:14:49 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, thanks for the guide! I will modify the patch and submit it again.&lt;/p&gt;</comment>
                            <comment id="15294854" author="yibing" created="Sat, 21 May 2016 08:45:15 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, I have attached another patch that adds the missing parts mentioned in your previous comment. Could you please help have another look?&lt;/p&gt;</comment>
                            <comment id="15309321" author="yibing" created="Wed, 1 Jun 2016 05:47:00 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, could you please help have a look at the new patch?&lt;/p&gt;</comment>
                            <comment id="15310618" author="rdblue" created="Wed, 1 Jun 2016 16:48:19 +0000"  >&lt;p&gt;Sorry, I haven&apos;t had time for an in-depth review of this lately. It is in the queue, but I can&apos;t say when I&apos;ll have time.&lt;/p&gt;</comment>
                            <comment id="15311336" author="yibing" created="Wed, 1 Jun 2016 23:18:46 +0000"  >&lt;p&gt;Understood! Thanks for the response!&lt;/p&gt;</comment>
                            <comment id="15316560" author="yibing" created="Mon, 6 Jun 2016 14:34:15 +0000"  >&lt;p&gt;Attach another patch, which fixes the problem where classes generated by IDL compiler cannot be constructed via builder properly.&lt;/p&gt;</comment>
                            <comment id="15320572" author="yibing" created="Wed, 8 Jun 2016 13:44:06 +0000"  >&lt;p&gt;Add another patch, which add the backward compatibility of logical type support. That is, by default the compiler still defines class member types based on &quot;type&quot; in schema (such as ByteBuffer for decimal), but also add a parameter which enables defining members based on &quot;logicalType&quot; (such as BigDecimal for decimal).&lt;/p&gt;</comment>
                            <comment id="15327642" author="busbey" created="Mon, 13 Jun 2016 15:53:54 +0000"  >
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/Conversions.java b/lang/java/avro/src/main/java/org/apache/avro/Conversions.java
index 14408d9..62b9b5e 100644
...
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; convertToLogicalType(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; datum, Schema schema, LogicalType type,
+                                            Conversion&amp;lt;?&amp;gt; conversion) {
+    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
...
+
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; convertToRawType(Schema schema, LogicalType logicalType,
+                                            Conversion&amp;lt;T&amp;gt; conversion, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; datum) {
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; datum;
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Why do we do a null check that turns this into a no-op in only one direction of the conversion? Seems like either both should be IllegalArgumentException or if we want the passthrough behavior both ought to do it.&lt;/p&gt;</comment>
                            <comment id="15327644" author="busbey" created="Mon, 13 Jun 2016 15:55:04 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/Conversions.java b/lang/java/avro/src/main/java/org/apache/avro/Conversions.java
index 14408d9..62b9b5e 100644
...
+
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; convertToRawType(Schema schema, LogicalType logicalType,
+                                            Conversion&amp;lt;T&amp;gt; conversion, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; datum) {
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; datum;
+    }
+    &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;T&amp;gt; fromClass = conversion.getConvertedType();
+    &lt;span class=&quot;code-keyword&quot;&gt;switch&lt;/span&gt; (schema.getType()) {
+      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; RECORD:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toRecord(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; ENUM:    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toEnumSymbol(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; ARRAY:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toArray(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; MAP:     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toMap(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; FIXED:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toFixed(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; STRING:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toCharSequence(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; BYTES:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toBytes(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; INT:     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toInt(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; LONG:    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toLong(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; FLOAT:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toFloat(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; DOUBLE:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toDouble(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; BOOLEAN: &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toBoolean(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+    }
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; datum;
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There should be a try/catch block for ClassCastException here.&lt;/p&gt;</comment>
                            <comment id="15327717" author="busbey" created="Mon, 13 Jun 2016 16:42:09 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java b/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java
index 8e34a36..03780dd 100644
--- a/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java
+++ b/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java
...
+  /**
+   * Gets the &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; value of the given field, &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; any.
+   * @param field the field whose &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; value should be retrieved.
+   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; the &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; value associated with the given field,
+   * or &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; none is specified in the schema.
+   * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
+   */
+  @SuppressWarnings({ &lt;span class=&quot;code-quote&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;unchecked&quot;&lt;/span&gt; })
+  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; defaultValue(Field field, Conversion&amp;lt;?&amp;gt; conversion) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
+    &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; rawDefaultValue = data.deepCopy(field.schema(), data.getDefaultValue(field));
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; rawDefaultValue;
+    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Conversions.convertToLogicalType(rawDefaultValue, field.schema(), field.schema().getLogicalType(), conversion);
+    }
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the convert to/from methods are made consistent on null conversions meaning a no-op, this code can be simplified away.&lt;/p&gt;</comment>
                            <comment id="15327757" author="busbey" created="Mon, 13 Jun 2016 17:04:59 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-    Conversion&amp;lt;?&amp;gt; conversion = SPECIFIC
-        .getConversionFor(schema.getLogicalType());
-    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conversion != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
-      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.getConvertedType().getName();
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (enableLogicalTypes) {
+      Conversion&amp;lt;?&amp;gt; conversion = SPECIFIC
+          .getConversionFor(schema.getLogicalType());
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conversion != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.getConvertedType().getName();
+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think this makes this patch a breaking change for users with schemas that contain e.g. date, time, or timestamp logical types right? since before by default they would get the logical type and not the backing raw representation.&lt;/p&gt;

&lt;p&gt;Anyone have opinions on this? it would mean 1.9+ only.&lt;/p&gt;</comment>
                            <comment id="15327760" author="busbey" created="Mon, 13 Jun 2016 17:06:54 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; 
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; conversionInstance(Schema schema) {
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (schema == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || schema.getLogicalType() == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;;
+    }
+
     &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LogicalTypes.date().equals(schema.getLogicalType())) {
       &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;DATE_CONVERSION&quot;&lt;/span&gt;;
     } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LogicalTypes.timeMillis().equals(schema.getLogicalType())) {
       &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;TIME_CONVERSION&quot;&lt;/span&gt;;
     } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LogicalTypes.timestampMillis().equals(schema.getLogicalType())) {
       &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;TIMESTAMP_CONVERSION&quot;&lt;/span&gt;;
+    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LogicalTypes.Decimal.&lt;span class=&quot;code-keyword&quot;&gt;class.&lt;/span&gt;equals(schema.getLogicalType().getClass())) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;DECIMAL_CONVERSION&quot;&lt;/span&gt;;
     }
-    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;;
+    &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Cannot find a conversion &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; logical type [&quot;&lt;/span&gt; + schema.getLogicalType() + &lt;span class=&quot;code-quote&quot;&gt;&quot;]&quot;&lt;/span&gt;);
   }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;why this change in behavior? what&apos;s the advantage over returning &quot;null&quot; when a given logical type doesn&apos;t match our internal conversions? won&apos;t this limit the ability of downstream folks to make their own version of hte specific compiler with additional logical types? Essentially they&apos;ll have to change from handling a null return to handling an exception for normal control flow.&lt;/p&gt;

&lt;p&gt;(Including this change to RTE would also push me towards flagging this as 1.9+ only)&lt;/p&gt;</comment>
                            <comment id="15327762" author="busbey" created="Mon, 13 Jun 2016 17:09:22 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;diff --git a/lang/java/compiler/src/main/javacc/org/apache/avro/compiler/idl/idl.jj b/lang/java/compiler/src/main/javacc/org/apache/avro/compiler/idl/idl.jj
index 775a8cb..4905302 100644
--- a/lang/java/compiler/src/main/javacc/org/apache/avro/compiler/idl/idl.jj
+++ b/lang/java/compiler/src/main/javacc/org/apache/avro/compiler/idl/idl.jj
...
 &lt;span class=&quot;code-comment&quot;&gt;/* LITERALS */&lt;/span&gt;
Stage &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; hunk [y,n,q,a,d,/,j,J,g,e,?]? y
@@ -1488,6 +1489,19 @@ Schema PrimitiveType():
 | &lt;span class=&quot;code-quote&quot;&gt;&quot;date&quot;&lt;/span&gt; { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; LogicalTypes.date().addToSchema(Schema.create(Type.INT)); }
 | &lt;span class=&quot;code-quote&quot;&gt;&quot;time_ms&quot;&lt;/span&gt; { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; LogicalTypes.timeMillis().addToSchema(Schema.create(Type.INT)); }
 | &lt;span class=&quot;code-quote&quot;&gt;&quot;timestamp_ms&quot;&lt;/span&gt; { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; LogicalTypes.timestampMillis().addToSchema(Schema.create(Type.LONG)); }
+| &lt;span class=&quot;code-quote&quot;&gt;&quot;decimal&quot;&lt;/span&gt; { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; DecimalTypeProperties(); }
+}
+
+Schema DecimalTypeProperties():
+{
+  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; pricision;
+  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; scale;
+}
+{
+  &lt;span class=&quot;code-quote&quot;&gt;&quot;(&quot;&lt;/span&gt; {pricision = Json().asInt();} &lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt; {scale = Json().asInt();} &lt;span class=&quot;code-quote&quot;&gt;&quot;)&quot;&lt;/span&gt;
+  {
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; LogicalTypes.decimal(pricision, scale).addToSchema(Schema.create(Type.BYTES));
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;please rename &quot;pricision&quot; to &quot;precision&quot;&lt;/p&gt;</comment>
                            <comment id="15327769" author="busbey" created="Mon, 13 Jun 2016 17:13:50 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java
index 83db1c0..7f7b62d 100644
--- a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java
@@ -123,6 +123,13 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;AbstractAvroMojo &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; AbstractMojo {
   &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; createSetters;
 
   /**
+   * Determines whether or not to use Java classes &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; decimal types
+   *
+   * @parameter &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;-value=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;&quot;&lt;/span&gt;
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; enableLogicalTypes;
+
+  /**
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This has the same compatibility concern as the change to the specific compiler itself.&lt;/p&gt;</comment>
                            <comment id="15327771" author="busbey" created="Mon, 13 Jun 2016 17:15:11 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;diff --git a/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java b/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java
index b038b4e..ce8ee38 100644
--- a/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java
+++ b/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java
...
@@ -67,6 +69,11 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;SpecificCompilerTool &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Tool {
       arg++;
     }
 
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-quote&quot;&gt;&quot;-enableLogicalTypes&quot;&lt;/span&gt;.equalsIgnoreCase(args.get(arg))) {
+      enableLogicalTypes = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
+      arg++;
+    }
+
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;same concern as the programmatic specific compiler and the maven plugin.&lt;/p&gt;</comment>
                            <comment id="15327802" author="rdblue" created="Mon, 13 Jun 2016 17:34:43 +0000"  >&lt;p&gt;On the write path, the object&apos;s class is part of the conversion lookup. There&apos;s no equivalent on the read path because we will use just one representation of the object.&lt;/p&gt;

&lt;p&gt;The rationale for this on the write path is that you may want to convert multiple concrete classes into the same Avro representation. For example, an application could pass either a Joda timestamp or a Java8 timestamp and both should be stored with the same logical type.&lt;/p&gt;</comment>
                            <comment id="15327808" author="rdblue" created="Mon, 13 Jun 2016 17:37:28 +0000"  >&lt;p&gt;Agreed. The default behavior is to use the date/time logical types if they are present. This should have separate flags for date/time types (default on) and decimal types (default off).&lt;/p&gt;</comment>
                            <comment id="15327903" author="busbey" created="Mon, 13 Jun 2016 18:46:37 +0000"  >&lt;p&gt;I can see that, but then we just move the check for a non-null conversion out to where this gets called (and then treat it as pass-through).&lt;/p&gt;

&lt;p&gt;Any objection to just making both of them do pass-through when the conversion is null?&lt;/p&gt;</comment>
                            <comment id="15327904" author="busbey" created="Mon, 13 Jun 2016 18:47:12 +0000"  >&lt;p&gt;this would address my concerns for backwards compatibility, so long as those same switches were then exposed via the maven plugin and the specific compiler tool.&lt;/p&gt;</comment>
                            <comment id="15327910" author="rdblue" created="Mon, 13 Jun 2016 18:48:51 +0000"  >&lt;p&gt;Sounds fine to me.&lt;/p&gt;</comment>
                            <comment id="15327914" author="busbey" created="Mon, 13 Jun 2016 18:51:06 +0000"  >&lt;p&gt;it occurs to me that changing this to match the convertToLogicalType side of things (i.e. throwing AvroRuntimeException instead of ClassCastException in the case of a CCE) will be non-backwards compatible.&lt;/p&gt;

&lt;p&gt;I&apos;d still like to see them match. I&apos;m happy to apply the matching version to the branch with 1.9-SNAP in it and then modify the backport to 1.8-SNAP to maintain the current behavior.&lt;/p&gt;</comment>
                            <comment id="15327928" author="rdblue" created="Mon, 13 Jun 2016 18:55:52 +0000"  >&lt;p&gt;I don&apos;t think that there was a chance of a ClassCastException prior to this change. The conversion is looked up based on the datum&apos;s class, so this cast should always succeed. Now that this is public and no longer an internal call, there&apos;s a possibility that the conversion doesn&apos;t match the datum and I agree that there should be a try/catch. But if we wouldn&apos;t see a cast exception before then we can use AvroRuntimeException without a behavior change.&lt;/p&gt;</comment>
                            <comment id="15327939" author="busbey" created="Mon, 13 Jun 2016 19:01:13 +0000"  >&lt;p&gt;I dunno. the change is equally visible to anyone extending GenericDatumWriter and then relying on the protected &lt;tt&gt;convert&lt;/tt&gt; method, which would have allowed them to pass their own conversions in.&lt;/p&gt;</comment>
                            <comment id="15328006" author="rdblue" created="Mon, 13 Jun 2016 19:27:42 +0000"  >&lt;p&gt;I think you&apos;re right. In that case, we could have a common method that throws ClassCastException and make this new one catch it and throw AvroRuntimeException. Or if that&apos;s not possible because of package layout, we could do the opposite temporarily even though that would be odd.&lt;/p&gt;</comment>
                            <comment id="15328665" author="yibing" created="Tue, 14 Jun 2016 00:03:02 +0000"  >&lt;p&gt;Agree. Since these 2 methods are now public, I add checking for all the parameters. If any of them is null, an AvroRuntimeException will be thrown out. IMO, adding the pass through function to these functions makes them coupled with callers. Please let me know if you don&apos;t think so.&lt;/p&gt;</comment>
                            <comment id="15329494" author="yibing" created="Tue, 14 Jun 2016 13:26:24 +0000"  >&lt;p&gt;The &lt;tt&gt;conver&lt;/tt&gt; method is newly added by this patch. It didn&apos;t exist in master branch. However, the exception it throws does get out through method &lt;tt&gt;write&lt;/tt&gt;. I agree with &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt; that we should keep the exceptions the same as before.&lt;br/&gt;
On the other hand, it also makes sense to make the to convert methods in &lt;tt&gt;Conversions&lt;/tt&gt; behave similarly. So I prefer throwing AvroRuntimeException in &lt;tt&gt;convertToRawType&lt;/tt&gt;, but catch this exception in &lt;tt&gt;GenericDatumWriter.convert&lt;/tt&gt; and throw its cause out to keep backwards compatibility. Maybe we can change this feature in later versions?&lt;br/&gt;
The code is like below:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; convert(Schema schema, LogicalType logicalType,
                               Conversion&amp;lt;T&amp;gt; conversion, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; datum) {
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; datum;
      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Conversions.convertToRawType(datum, schema, logicalType, conversion);
      }
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (AvroRuntimeException e) {
      Throwable cause = e.getCause();
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (cause != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; cause.getClass() == ClassCastException.class) {
        &lt;span class=&quot;code-comment&quot;&gt;// This is to keep backwards compatibility. The convert function here used to
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; CCE. When prompted to Conversions, it &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; AvroRuntimeException. So,
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the cause is a CCE, rethrow it in &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; any child &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;checks it. This
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// behaviour can be changed later in &lt;span class=&quot;code-keyword&quot;&gt;future&lt;/span&gt; versions to make it consistent with
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// reading path, which &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; AvroRuntimeException
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; (ClassCastException)cause;
      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
      }
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please let me know your opinion.&lt;/p&gt;</comment>
                            <comment id="15329495" author="yibing" created="Tue, 14 Jun 2016 13:27:55 +0000"  >&lt;p&gt;I have removed the passthrough behaviour in convert to/from methods. As a result, this part of code keeps intact.&lt;/p&gt;</comment>
                            <comment id="15329501" author="yibing" created="Tue, 14 Jun 2016 13:35:03 +0000"  >&lt;p&gt;Since we always try to use Joda or Java classes for date/time types, I prefer not to add a new flag. Instead, I just check the whether the the logical type is one of the date/time types. If yes, I apply the conversions if they are present.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; javaType(Schema schema) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (useLogicalTypesForNonDateTimeTypes
        || LogicalTypes.isDateTimeType(schema.getLogicalType())) {
      Conversion&amp;lt;?&amp;gt; conversion = SPECIFIC
          .getConversionFor(schema.getLogicalType());
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conversion != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.getConvertedType().getName();
      }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="15329511" author="yibing" created="Tue, 14 Jun 2016 13:41:02 +0000"  >&lt;p&gt;I didn&apos;t think of childrens of this class may need to check its return value. I thought an exception made more sense here because there is an unknown logical type was found. Now I agree with you that return null makes their life easier. Have changed the code back according to your suggestion.&lt;/p&gt;</comment>
                            <comment id="15329515" author="yibing" created="Tue, 14 Jun 2016 13:41:35 +0000"  >&lt;p&gt;Oops! Have corrected it.&lt;/p&gt;</comment>
                            <comment id="15329521" author="yibing" created="Tue, 14 Jun 2016 13:43:36 +0000"  >&lt;p&gt;As mentioned above, I don&apos;t think we need a separate flag for date/time types since their behaviour has never changed. I just make sure to use JODA/Java classes for these types no matter the value of this parameter. This parameter has also been renamed as &lt;tt&gt;enableLogicalTypesForNonDateTimeTypes&lt;/tt&gt;&lt;/p&gt;</comment>
                            <comment id="15329522" author="yibing" created="Tue, 14 Jun 2016 13:44:00 +0000"  >&lt;p&gt;Same as above&lt;/p&gt;</comment>
                            <comment id="15329573" author="yibing" created="Tue, 14 Jun 2016 14:22:19 +0000"  >&lt;p&gt;Upload the new patch that contains all the changes based on code review.&lt;/p&gt;</comment>
                            <comment id="15329647" author="busbey" created="Tue, 14 Jun 2016 15:18:07 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; convertToLogicalType(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; datum, Schema schema, LogicalType type,
+                                            Conversion&amp;lt;?&amp;gt; conversion) {
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (datum == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || schema == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || type == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AvroRuntimeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Parameters cannot be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;! Parameter values:&quot;&lt;/span&gt; +
+          Arrays.deepToString(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;[]{datum, schema, type, conversion}));
+    }
...
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; convertToRawType(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; datum, Schema schema, LogicalType type,
+                                            Conversion&amp;lt;T&amp;gt; conversion) {
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (datum == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || schema == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || type == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AvroRuntimeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Parameters cannot be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;! Parameter values:&quot;&lt;/span&gt; +
+          Arrays.deepToString(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;[]{datum, schema, type, conversion}));
+    }
+
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These both will need javadocs. IllegalArgumentException is a better fit for both of those checks.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; isDateTimeType(LogicalType type) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Needs javadoc&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java b/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java
index 8e34a36..de27d6c 100644
--- a/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java
+++ b/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java
...
@@ -135,6 +137,25 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;RecordBuilderBase&amp;lt;T &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; IndexedRecord&amp;gt;
     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; data.deepCopy(field.schema(), data.getDefaultValue(field));
   }
 
+  /**
+   * Gets the &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; value of the given field, &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; any.
+   * @param field the field whose &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; value should be retrieved.
+   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; the &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; value associated with the given field,
+   * or &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; none is specified in the schema.
+   * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
+   */
+  @SuppressWarnings({ &lt;span class=&quot;code-quote&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;unchecked&quot;&lt;/span&gt; })
+  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; defaultValue(Field field, Conversion&amp;lt;?&amp;gt; conversion) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
+    Schema schema = field.schema();
+    &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; rawDefaultValue = data.deepCopy(schema, data.getDefaultValue(field));
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; rawDefaultValue;
+    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Conversions.convertToLogicalType(rawDefaultValue, schema,
+          schema.getLogicalType(), conversion);
+    }
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we&apos;re relying on an invariant here, that things with conversions passed in have schema&apos;s with a logical type (sine the convertToLogicalType will throw if the logical type is null). I think that&apos;s the same as before? Is it worth noting in the javadoc?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumWriter.java b/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumWriter.java
index e66726e..cf06d63 100644
--- a/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumWriter.java
+++ b/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumWriter.java
...
@@ -76,25 +78,25 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;GenericDatumWriter&amp;lt;D&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; DatumWriter&amp;lt;D&amp;gt; {
 
   &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; convert(Schema schema, LogicalType logicalType,
                                Conversion&amp;lt;T&amp;gt; conversion, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; datum) {
-    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
-      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; datum;
-    }
-    &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;T&amp;gt; fromClass = conversion.getConvertedType();
-    &lt;span class=&quot;code-keyword&quot;&gt;switch&lt;/span&gt; (schema.getType()) {
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; RECORD:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toRecord(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; ENUM:    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toEnumSymbol(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; ARRAY:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toArray(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; MAP:     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toMap(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; FIXED:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toFixed(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; STRING:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toCharSequence(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; BYTES:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toBytes(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; INT:     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toInt(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; LONG:    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toLong(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; FLOAT:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toFloat(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; DOUBLE:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toDouble(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; BOOLEAN: &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toBoolean(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; datum;
+      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Conversions.convertToRawType(datum, schema, logicalType, conversion);
+      }
+    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (AvroRuntimeException e) {
+      Throwable cause = e.getCause();
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (cause != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; cause.getClass() == ClassCastException.class) {
+        &lt;span class=&quot;code-comment&quot;&gt;// This is to keep backwards compatibility. The convert function here used to
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; CCE. When prompted to Conversions, it &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; AvroRuntimeException. So,
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the cause is a CCE, rethrow it in &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; any child &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;checks it. This
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// behaviour can be changed later in &lt;span class=&quot;code-keyword&quot;&gt;future&lt;/span&gt; versions to make it consistent with
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// reading path, which &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; AvroRuntimeException
&lt;/span&gt;+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; (ClassCastException)cause;
+      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
+      }
     }
-    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; datum;
   }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We should add javadocs here about which params may be null and which will cause an exception (e.g. logicalType can&apos;t be null if conversion is non-null).&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumReader.java b/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumReader.java
index 6133d6b..a3161be 100644
--- a/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumReader.java
+++ b/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumReader.java
...
@@ -191,26 +192,7 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;GenericDatumReader&amp;lt;D&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; DatumReader&amp;lt;D&amp;gt; {
 
   &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; convert(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; datum, Schema schema, LogicalType type,
                            Conversion&amp;lt;?&amp;gt; conversion) {
-    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
-      &lt;span class=&quot;code-keyword&quot;&gt;switch&lt;/span&gt; (schema.getType()) {
-      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; RECORD:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.fromRecord((IndexedRecord) datum, schema, type);
-      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; ENUM:    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.fromEnumSymbol((GenericEnumSymbol) datum, schema, type);
-      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; ARRAY:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.fromArray(getData().getArrayAsCollection(datum), schema, type);
-      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; MAP:     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.fromMap((Map&amp;lt;?, ?&amp;gt;) datum, schema, type);
-      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; FIXED:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.fromFixed((GenericFixed) datum, schema, type);
-      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; STRING:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.fromCharSequence((CharSequence) datum, schema, type);
-      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; BYTES:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.fromBytes((ByteBuffer) datum, schema, type);
-      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; INT:     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.fromInt((&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;) datum, schema, type);
-      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; LONG:    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.fromLong((&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;) datum, schema, type);
-      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; FLOAT:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.fromFloat((&lt;span class=&quot;code-object&quot;&gt;Float&lt;/span&gt;) datum, schema, type);
-      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; DOUBLE:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.fromDouble((&lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;) datum, schema, type);
-      &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; BOOLEAN: &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.fromBoolean((&lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt;) datum, schema, type);
-      }
-      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; datum;
-    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (ClassCastException e) {
-      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AvroRuntimeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Cannot convert &quot;&lt;/span&gt; + datum + &lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt; +
-          datum.getClass().getSimpleName() + &lt;span class=&quot;code-quote&quot;&gt;&quot;: expected &lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt; type&quot;&lt;/span&gt;, e);
-    }
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Conversions.convertToLogicalType(datum, schema, type, conversion);
   }
 
   /** Called to read a record instance. May be overridden &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; alternate record
diff --git a/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumWriter.java b/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumWriter.java
index e66726e..cf06d63 100644
--- a/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumWriter.java
+++ b/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumWriter.java
...
@@ -76,25 +78,25 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;GenericDatumWriter&amp;lt;D&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; DatumWriter&amp;lt;D&amp;gt; {
 
   &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; convert(Schema schema, LogicalType logicalType,
                                Conversion&amp;lt;T&amp;gt; conversion, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; datum) {
-    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
-      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; datum;
-    }
-    &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;T&amp;gt; fromClass = conversion.getConvertedType();
-    &lt;span class=&quot;code-keyword&quot;&gt;switch&lt;/span&gt; (schema.getType()) {
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; RECORD:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toRecord(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; ENUM:    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toEnumSymbol(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; ARRAY:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toArray(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; MAP:     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toMap(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; FIXED:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toFixed(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; STRING:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toCharSequence(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; BYTES:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toBytes(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; INT:     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toInt(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; LONG:    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toLong(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; FLOAT:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toFloat(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; DOUBLE:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toDouble(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; BOOLEAN: &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toBoolean(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; datum;
+      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Conversions.convertToRawType(datum, schema, logicalType, conversion);
+      }
+    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (AvroRuntimeException e) {
+      Throwable cause = e.getCause();
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (cause != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; cause.getClass() == ClassCastException.class) {
+        &lt;span class=&quot;code-comment&quot;&gt;// This is to keep backwards compatibility. The convert function here used to
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; CCE. When prompted to Conversions, it &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; AvroRuntimeException. So,
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the cause is a CCE, rethrow it in &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; any child &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;checks it. This
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// behaviour can be changed later in &lt;span class=&quot;code-keyword&quot;&gt;future&lt;/span&gt; versions to make it consistent with
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// reading path, which &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; AvroRuntimeException
&lt;/span&gt;+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; (ClassCastException)cause;
+      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
+      }
     }
-    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; datum;
   }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What did GenericDatumReader/Writer do on &lt;tt&gt;null&lt;/tt&gt; for &lt;tt&gt;Schema&lt;/tt&gt; or &lt;tt&gt;LogicalType&lt;/tt&gt; prior to this patch? I think it depends on the specific &lt;tt&gt;Conversion&lt;/tt&gt; implementation and now they&apos;ll be throwing either &lt;tt&gt;AvroRuntimeException&lt;/tt&gt; or &lt;tt&gt;IllegalArgumentException&lt;/tt&gt; based on the feedback above? Similarly, &lt;tt&gt;GenericDatumReader.convert&lt;/tt&gt; used to throw NPE for a null conversion (but only for some schema types), but now it will throw one of ARE or IAE all the time, I think? this sounds breaking. Maybe we do the null checks only in the 1.9 branch?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;+  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; useLogicalTypesForNonDateTimeTypes = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
 
   /*
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem with this approach is we also have another non-date-time logical type without an implementation, UUID. so we wouldn&apos;t be able to add a UUID implementation without breaking things (since right now setting this to true should get you logical overlay for decimal and not for uuid). What if we just make a flag for using logical type with decimal specifically? This would also let us remove the &lt;tt&gt;LogicalTypes.isDateTimeType&lt;/tt&gt; method, since we could check specifically for the decimal type.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; conversionInstance(Schema schema) {
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (schema == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || schema.getLogicalType() == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;;
+    }
+
     &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LogicalTypes.date().equals(schema.getLogicalType())) {
       &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;DATE_CONVERSION&quot;&lt;/span&gt;;
     } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LogicalTypes.timeMillis().equals(schema.getLogicalType())) {
       &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;TIME_CONVERSION&quot;&lt;/span&gt;;
     } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LogicalTypes.timestampMillis().equals(schema.getLogicalType())) {
       &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;TIMESTAMP_CONVERSION&quot;&lt;/span&gt;;
+    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LogicalTypes.Decimal.&lt;span class=&quot;code-keyword&quot;&gt;class.&lt;/span&gt;equals(schema.getLogicalType().getClass())) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;DECIMAL_CONVERSION&quot;&lt;/span&gt;;
     }
-    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;;
+
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
   }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We should add a javadoc here. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. This also still changes behavior, from returning the string &quot;null&quot; to returning an actual null. Is there a reason not to just return the string version like before?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;diff --git a/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java b/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java
index b038b4e..e2f9b8a 100644
--- a/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java
+++ b/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java
@@ -19,6 +19,7 @@ &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.avro.tool;
 
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.File;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.FilenameFilter;
+&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.InputStream;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.PrintStream;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;
@@ -42,7 +43,7 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;SpecificCompilerTool &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Tool {
       List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; args) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
     &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (args.size() &amp;lt; 3) {
       &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.err
-          .println(&lt;span class=&quot;code-quote&quot;&gt;&quot;Usage: [-encoding &amp;lt;outputencoding&amp;gt;] [-string] (schema|protocol) input... outputdir&quot;&lt;/span&gt;);
+          .println(&lt;span class=&quot;code-quote&quot;&gt;&quot;Usage: [-encoding &amp;lt;outputencoding&amp;gt;] [-string] [-enableLogicalTypes] (schema|protocol) input... outputdir&quot;&lt;/span&gt;);
       &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.err
           .println(&lt;span class=&quot;code-quote&quot;&gt;&quot; input - input files or directories&quot;&lt;/span&gt;);
       &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.err
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This help message is wrong now.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;diff --git a/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java b/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java
index 3668d2f..b831c73 100644
--- a/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java
+++ b/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java
...
   @Test
-  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testLogicalTypes() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testLogicalTypesUsingJavaClasses() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
     SpecificCompiler compiler = createCompiler();
+    compiler.setUseLogicalTypesForNonDateTimeTypes(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
 
...
+  @Test
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testLogicalTypesNotUsingJavaClasses() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
+    SpecificCompiler compiler = createCompiler();
+    compiler.setUseLogicalTypesForNonDateTimeTypes(&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;please update these test method names to reflect that only Decimal support is being toggled.&lt;/p&gt;</comment>
                            <comment id="15329708" author="rdblue" created="Tue, 14 Jun 2016 15:51:51 +0000"  >&lt;p&gt;I think there should also be a test for this to make sure logical types without conversions don&apos;t break the specific compiler.&lt;/p&gt;</comment>
                            <comment id="15329709" author="rdblue" created="Tue, 14 Jun 2016 16:16:51 +0000"  >&lt;p&gt;Should we even expose the conversion method? You&apos;re right about the invariant, which was okay before because it wasn&apos;t public code (if you subclassed GenericData, you were expected to get it right). I&apos;d rather not put a bunch of checks in this because it&apos;s in a tight loop, but it doesn&apos;t seem right to expose a method that&apos;s so difficult to get right.&lt;/p&gt;</comment>
                            <comment id="15330700" author="rdblue" created="Tue, 14 Jun 2016 21:54:06 +0000"  >&lt;p&gt;I think this logic should just apply the conversions if they are present. That way we only need to have enabled/disabled logic to add types to the SPECIFIC instance of the data model. That means we have to change fewer places in the code and can later refactor to pass in the data model with custom conversions.&lt;/p&gt;</comment>
                            <comment id="15331268" author="yibing" created="Wed, 15 Jun 2016 07:02:58 +0000"  >&lt;ol&gt;
	&lt;li&gt;I will add javadoc to those public functions&lt;/li&gt;
	&lt;li&gt;I will change the test case names.&lt;/li&gt;
	&lt;li&gt;I will correct the help messages for compiler tool. Do you think it worth to use Apache Commons Options package to process the parameters? (maybe leave it for a later?)&lt;/li&gt;
	&lt;li&gt;The null and &quot;null&quot; thing is a typo. Sorry for this stupid mistake. A null value will cause problems for SpecificRecordCompiler.&lt;/li&gt;
	&lt;li&gt;I will make the parameter in compiler and maven plugin only affects decimal type, which will minimize the impact of this patch. Thanks for the suggestion!&lt;/li&gt;
	&lt;li&gt;For the invariant problem in &lt;tt&gt;RecordBuilderBase.defaultValue(Field field, Conversion&amp;lt;?&amp;gt; conversion)&lt;/tt&gt;, I will add a checking to make sure that logical type is not null before call the &lt;tt&gt;convertToLogicalType&lt;/tt&gt; method.&lt;/li&gt;
	&lt;li&gt;For the convert to logical/raw type methods, I will change it a bit to have them return null if the original value passed in is null.&lt;/li&gt;
	&lt;li&gt;The focus here is the &lt;tt&gt;convert&lt;/tt&gt; method in GenericDatumWriter. You are correct about the invariant here. But as &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt; explains below, this used to be not a problem because the caller within GenericDatumWriter won&apos;t pass in any null pointer. I tends not to add the checking here. One reason is it is good for performance. The second reason is that a null schema or logical type is definitely a bad error, and I don&apos;t think any children would try to capture or process it.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="15331271" author="yibing" created="Wed, 15 Jun 2016 07:03:40 +0000"  >&lt;p&gt;I had a very busy day. Will work on this tonight and upload a new patch.&lt;/p&gt;</comment>
                            <comment id="15331759" author="yibing" created="Wed, 15 Jun 2016 13:34:10 +0000"  >&lt;p&gt;Method &lt;tt&gt;GenericDatumWriter.convert&lt;/tt&gt; is a protected method from the very beginning. Changing it to private would be a behaviour change. I prefer not to make this change. Please let me know you opinion.&lt;/p&gt;</comment>
                            <comment id="15331828" author="yibing" created="Wed, 15 Jun 2016 14:26:26 +0000"  >&lt;p&gt;Upload a new patch&lt;/p&gt;</comment>
                            <comment id="15332090" author="rdblue" created="Wed, 15 Jun 2016 16:57:06 +0000"  >&lt;p&gt;I&apos;m not suggesting we change it to private, but leave it as-is. I&apos;m thinking that it doesn&apos;t make sense to expose a new public method with that signature, when there are assumptions about relationships between what you pass in. It would be better to expose a function that takes a Schema and a data model (GenericData instance), then gets the logical type from the schema and the conversion from the data model.&lt;/p&gt;</comment>
                            <comment id="15333984" author="busbey" created="Thu, 16 Jun 2016 15:20:56 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;+  /**
+   * Convert the underlying representation of a logical type (such as a
+   * ByteBuffer) to a higher level object (such as a BigDecimal).
+   * @param datum The object to be converted
+   * @param schema The schema of datum. Cannot be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; datum is not &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;.
+   * @param type The {@link org.apache.avro.LogicalType} of datum. Cannot
+   *             be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; datum is not &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;.
+   * @param conversion The tool used to finish the conversion. Should be a
+   *                   child of {@link org.apache.avro.Conversion}. Cannot
+   *                   be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; datum is not &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;.
+   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; The result object, which is a meaningful object to the logical type
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; convertToLogicalType(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; datum, Schema schema, LogicalType type,
+                                            Conversion&amp;lt;?&amp;gt; conversion) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The line about conversion being a child of org.apache.avro.Conversion should be left out; it&#8217;s already implied by the type of the argument.&lt;/p&gt;

&lt;p&gt;the return description should state that the result of passing datum in as null is a null result.&lt;/p&gt;

&lt;p&gt;the javadoc needs to say what exception we throw and what it means.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;+
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (schema == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || type == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AvroRuntimeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Parameters cannot be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;! Parameter values:&quot;&lt;/span&gt; +
+          Arrays.deepToString(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;[]{datum, schema, type, conversion}));
+    }
+

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What&#8217;s the advantage of using &lt;tt&gt;AvroRuntimeException&lt;/tt&gt; here instead of &lt;tt&gt;IllegalArgumentException&lt;/tt&gt;? Giving the wrong kind of parameters usually results in IAE.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;+
+  /**
+   * Convert a high level object &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; a logical type (such as a BigDecimal)
+   * to the its underlying representation object (such as a ByteBuffer)
+   * @param datum The object to be converted.
+   * @param schema The schema of datum. Cannot be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; datum is not &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;.
+   * @param type The {@link org.apache.avro.LogicalType} of datum. Cannot
+   *             be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; datum is not &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;.
+   * @param conversion The tool used to finish the conversion. Should be a
+   *                   child of {@link org.apache.avro.Conversion}. Cannot
+   *                   be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; datum is not &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;.
+   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; The result object, which is a meaningful object to the logical type
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; convertToRawType(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; datum, Schema schema, LogicalType type,
+                                            Conversion&amp;lt;T&amp;gt; conversion) {
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (datum == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
+    }
+
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (schema == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || type == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AvroRuntimeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Parameters cannot be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;! Parameter values:&quot;&lt;/span&gt; +
+          Arrays.deepToString(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;[]{datum, schema, type, conversion}));
+    }
+
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Same feedback as on the &lt;tt&gt;convertToLogicalType&lt;/tt&gt; method.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumWriter.java b/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumWriter.java
index e66726e..cf06d63 100644
--- a/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumWriter.java
+++ b/lang/java/avro/src/main/java/org/apache/avro/&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;/GenericDatumWriter.java
@@ -24,8 +24,10 @@ &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.Iterator;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.Collection;
 
+&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.AvroRuntimeException;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.AvroTypeException;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Conversion;
+&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Conversions;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.LogicalType;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Schema;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Schema.Field;
@@ -76,25 +78,25 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;GenericDatumWriter&amp;lt;D&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; DatumWriter&amp;lt;D&amp;gt; {
 
   &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; convert(Schema schema, LogicalType logicalType,
                                Conversion&amp;lt;T&amp;gt; conversion, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; datum) {
-    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
-      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; datum;
-    }
-    &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;T&amp;gt; fromClass = conversion.getConvertedType();
-    &lt;span class=&quot;code-keyword&quot;&gt;switch&lt;/span&gt; (schema.getType()) {
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; RECORD:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toRecord(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; ENUM:    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toEnumSymbol(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; ARRAY:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toArray(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; MAP:     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toMap(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; FIXED:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toFixed(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; STRING:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toCharSequence(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; BYTES:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toBytes(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; INT:     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toInt(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; LONG:    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toLong(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; FLOAT:   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toFloat(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; DOUBLE:  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toDouble(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
-    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; BOOLEAN: &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; conversion.toBoolean(fromClass.&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(datum), schema, logicalType);
+    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conversion == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; datum;
+      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Conversions.convertToRawType(datum, schema, logicalType, conversion);
+      }
+    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (AvroRuntimeException e) {
+      Throwable cause = e.getCause();
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (cause != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; cause.getClass() == ClassCastException.class) {
+        &lt;span class=&quot;code-comment&quot;&gt;// This is to keep backwards compatibility. The convert function here used to
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; CCE. When prompted to Conversions, it &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; AvroRuntimeException. So,
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the cause is a CCE, rethrow it in &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; any child &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;checks it. This
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// behaviour can be changed later in &lt;span class=&quot;code-keyword&quot;&gt;future&lt;/span&gt; versions to make it consistent with
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// reading path, which &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; AvroRuntimeException
&lt;/span&gt;+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; (ClassCastException)cause;
+      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
+      }
     }
-    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; datum;
   }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is still going to change the behavior of the protected convert method when arguments are wrong. I&#8217;m fine with that so long as we add javadocs to the method and call it out in the release note for this lira.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt; you fine with this too? or would you prefer that this version go into the 1.9 branch and I munge things as needed to keep the same failure path in the 1.8 branch?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;diff --git a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java
index 6bf7bd5..54e955c 100644
--- a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java
+++ b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java
&#8230;
@@ -106,6 +108,7 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;SpecificCompiler {
   &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; createSetters = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
   &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; createAllArgsConstructor = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
   &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; outputCharacterEncoding;
+  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; enableDecimalLogicalType = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
 
   /*
    * Used in the record.vm template.
@@ -208,6 +211,14 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;SpecificCompiler {
     &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.createSetters = createSetters;
   }
 
+  /**
+   * Set to &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt; to use meaningful Java classes &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; logical types. For example,
+   * use {@link java.math.BigDecimal} instead of {@link java.nio.ByteBuffer} &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; logical type &lt;span class=&quot;code-quote&quot;&gt;&quot;decimal&quot;&lt;/span&gt;
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setEnableDecimalLogicalType(&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; enableDecimalLogicalType) {
+    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.enableDecimalLogicalType = enableDecimalLogicalType;
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;should be &#8220;set to true to use meaningful&#8230;&#8221; I think? Also should say &#8220;for the decimal logical type&#8221; rather than for logical types generally.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think there should also be a test for this to make sure logical types without conversions don&apos;t break the specific compiler.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I see that there&#8217;s a check of the correct java type in &lt;tt&gt;TestSpecificCompiler&lt;/tt&gt;. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt; is this what you had in mind with this request, or were you looking for end-to-end via something like the tests in TestSpecificLogicalTypes?&lt;/p&gt;</comment>
                            <comment id="15333987" author="busbey" created="Thu, 16 Jun 2016 15:22:50 +0000"  >&lt;p&gt;sorry, missed this one:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will correct the help messages for compiler tool. Do you think it worth to use Apache Commons Options package to process the parameters? (maybe leave it for a later?)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;definitely wait for later. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15335962" author="yibing" created="Fri, 17 Jun 2016 12:40:07 +0000"  >&lt;p&gt;Upload a new patch:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Fixed all the javadoc errors pointed out by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Use &lt;tt&gt;IllegalArugumentException&lt;/tt&gt; instead of &lt;tt&gt;AvroRuntimeException&lt;/tt&gt; in &lt;tt&gt;Conversions.convert...&lt;/tt&gt; functions&lt;/li&gt;
	&lt;li&gt;Add javadoc to &lt;tt&gt;GenericDatumWriter/Reader.convert&lt;/tt&gt; to describe the behaviour change (different exception type is thrown out now). &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, would you please help confirm whether this is OK for you?&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;And as &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt; said, I have added below test cases in &lt;tt&gt;TestSpecificCompiler&lt;/tt&gt;:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;testJavaTypeWithDecimalLogicalTypeEnabled&lt;/li&gt;
	&lt;li&gt;testJavaTypeWithoutDecimalLogicalTypeEnabled&lt;br/&gt;
to test whether the decimal logical type enablement would affect other logical types. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, please help confirm whether it is enough, or you want to add more tests?&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="15336103" author="busbey" created="Fri, 17 Jun 2016 13:41:07 +0000"  >&lt;blockquote&gt;
&lt;p&gt;And as Sean Busbey said, I have added below test cases in TestSpecificCompiler:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;testJavaTypeWithDecimalLogicalTypeEnabled&lt;/li&gt;
	&lt;li&gt;testJavaTypeWithoutDecimalLogicalTypeEnabled&lt;br/&gt;
to test whether the decimal logical type enablement would affect other logical types. Ryan Blue, please help confirm whether it is enough, or you want to add more tests?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was guessing it would be a test with UUID, since that type never has a conversion.&lt;/p&gt;</comment>
                            <comment id="15336194" author="busbey" created="Fri, 17 Jun 2016 14:21:12 +0000"  >&lt;p&gt;I&apos;m good with v7. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt; (or whomever else) please let me know if there&apos;s something else you&apos;d like included.&lt;/p&gt;</comment>
                            <comment id="15337884" author="yibing" created="Sat, 18 Jun 2016 13:32:06 +0000"  >&lt;p&gt;Yes, I did add the test for UUID. It always use CharSequence as type.&lt;/p&gt;</comment>
                            <comment id="15337885" author="yibing" created="Sat, 18 Jun 2016 13:33:18 +0000"  >&lt;p&gt;Thank you very much for your help, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt;!&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, please let me know if you have anything else to add.&lt;/p&gt;</comment>
                            <comment id="15338538" author="yibing" created="Sun, 19 Jun 2016 14:42:06 +0000"  >&lt;p&gt;I forgot to apply the decimal type flag to &lt;tt&gt;SpecificCompiler.conversionInstance&lt;/tt&gt;. Upload a new patch that corrects this problem, and adds 2 unit tests to cover this.&lt;/p&gt;</comment>
                            <comment id="15340249" author="busbey" created="Mon, 20 Jun 2016 19:32:04 +0000"  >&lt;p&gt;great catch &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Yibing&quot; class=&quot;user-hover&quot; rel=&quot;Yibing&quot;&gt;Yibing Shi&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;anything else you&apos;d like to see &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="15345255" author="jira-bot" created="Wed, 22 Jun 2016 22:01:45 +0000"  >&lt;p&gt;Commit 89a31b9236c92b2036b8f4ddd190183a18c630fc in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Yibing&quot; class=&quot;user-hover&quot; rel=&quot;Yibing&quot;&gt;Yibing Shi&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=89a31b9&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=89a31b9&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1847&quot; title=&quot;IDL compiler should use BigDecimal to represent decimal logical type.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1847&quot;&gt;&lt;del&gt;AVRO-1847&lt;/del&gt;&lt;/a&gt; IDL compiler should use BigDecimal to represent decimal logical type.&lt;/p&gt;

&lt;p&gt;Allows opt-in for the specific compiler to use BigDecimal when generating Java&lt;br/&gt;
classes for a Schema with decimal types.&lt;/p&gt;

&lt;p&gt;Signed-off-by: Sean Busbey &amp;lt;busbey@cloudera.com&amp;gt;&lt;/p&gt;</comment>
                            <comment id="15345256" author="busbey" created="Wed, 22 Jun 2016 22:02:36 +0000"  >&lt;p&gt;I pushed this to master. Once &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1867&quot; title=&quot;branch-1.8 needs to be updated to 1.8.2-SNAPSHOT&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1867&quot;&gt;&lt;del&gt;AVRO-1867&lt;/del&gt;&lt;/a&gt; lands I&apos;ll push it to branch-1.8 as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt; if you think of anything else you&apos;d like handled feel free to reopen or link to a follow on.&lt;/p&gt;</comment>
                            <comment id="15345259" author="rdblue" created="Wed, 22 Jun 2016 22:04:14 +0000"  >&lt;p&gt;Thanks, sorry about missing your note before. This looks good to me. Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Yibing&quot; class=&quot;user-hover&quot; rel=&quot;Yibing&quot;&gt;Yibing Shi&lt;/a&gt; for contributing the fix!&lt;/p&gt;</comment>
                            <comment id="15345261" author="jira-bot" created="Wed, 22 Jun 2016 22:04:46 +0000"  >&lt;p&gt;Commit ff5bb456e751e9128606c6bbffe638e256ee2c1c in avro&apos;s branch refs/heads/branch-1.8 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Yibing&quot; class=&quot;user-hover&quot; rel=&quot;Yibing&quot;&gt;Yibing Shi&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=ff5bb45&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=ff5bb45&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1847&quot; title=&quot;IDL compiler should use BigDecimal to represent decimal logical type.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1847&quot;&gt;&lt;del&gt;AVRO-1847&lt;/del&gt;&lt;/a&gt; IDL compiler should use BigDecimal to represent decimal logical type.&lt;/p&gt;

&lt;p&gt;Allows opt-in for the specific compiler to use BigDecimal when generating Java&lt;br/&gt;
classes for a Schema with decimal types.&lt;/p&gt;

&lt;p&gt;Signed-off-by: Sean Busbey &amp;lt;busbey@cloudera.com&amp;gt;&lt;/p&gt;</comment>
                            <comment id="15346370" author="yibing" created="Thu, 23 Jun 2016 12:49:20 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, thank you for your help on this!&lt;/p&gt;</comment>
                            <comment id="15346379" author="busbey" created="Thu, 23 Jun 2016 12:56:15 +0000"  >&lt;p&gt;you&apos;re very welcome. thanks for the contribution!&lt;/p&gt;</comment>
                            <comment id="15387949" author="jira-bot" created="Thu, 21 Jul 2016 16:01:56 +0000"  >&lt;p&gt;Commit 5259f26ecee6c268f0ddc86ef45104fe967f267a in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Yibing&quot; class=&quot;user-hover&quot; rel=&quot;Yibing&quot;&gt;Yibing Shi&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=5259f26&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=5259f26&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1877&quot; title=&quot;AVRO-1847 accidentally breaks javaUnbox method in SpecificCompiler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1877&quot;&gt;&lt;del&gt;AVRO-1877&lt;/del&gt;&lt;/a&gt; restore correct javaUnbox in Specific Compiler.&lt;/p&gt;

&lt;p&gt;Time logical types were broken by the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1847&quot; title=&quot;IDL compiler should use BigDecimal to represent decimal logical type.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1847&quot;&gt;&lt;del&gt;AVRO-1847&lt;/del&gt;&lt;/a&gt;, this&lt;br/&gt;
patch restores correct behavior with some minor refactoring to&lt;br/&gt;
clean up duplicate code.&lt;/p&gt;

&lt;p&gt;Signed-off-by: Sean Busbey &amp;lt;busbey@cloudera.com&amp;gt;&lt;/p&gt;</comment>
                            <comment id="15387952" author="jira-bot" created="Thu, 21 Jul 2016 16:04:32 +0000"  >&lt;p&gt;Commit 941187a2295197d9da2d9a865fda41e621813f4e in avro&apos;s branch refs/heads/branch-1.8 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Yibing&quot; class=&quot;user-hover&quot; rel=&quot;Yibing&quot;&gt;Yibing Shi&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=941187a&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=941187a&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1877&quot; title=&quot;AVRO-1847 accidentally breaks javaUnbox method in SpecificCompiler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1877&quot;&gt;&lt;del&gt;AVRO-1877&lt;/del&gt;&lt;/a&gt; restore correct javaUnbox in Specific Compiler.&lt;/p&gt;

&lt;p&gt;Time logical types were broken by the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1847&quot; title=&quot;IDL compiler should use BigDecimal to represent decimal logical type.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1847&quot;&gt;&lt;del&gt;AVRO-1847&lt;/del&gt;&lt;/a&gt;, this&lt;br/&gt;
patch restores correct behavior with some minor refactoring to&lt;br/&gt;
clean up duplicate code.&lt;/p&gt;

&lt;p&gt;Signed-off-by: Sean Busbey &amp;lt;busbey@cloudera.com&amp;gt;&lt;/p&gt;</comment>
                            <comment id="15952221" author="vijayprof@gmail.com" created="Sat, 1 Apr 2017 13:19:10 +0000"  >&lt;p&gt;Hi Yibing Shi, &lt;/p&gt;

&lt;p&gt;I&apos;m using Big Decimal data types in my schema and need to generate Java files with Big Decimal types. I understand this was not working until 1.8.1 and has been fixed as a patch and will be released part of 1.8.2.&lt;/p&gt;

&lt;p&gt;II&apos;m awaiting for the 1.8.2 to be released and kindly let me know the release date for 1.8.2&lt;/p&gt;

&lt;p&gt;Also kindly advise if I can get the avro-tools-1.8.2.jar before the release for testing purpose.&lt;/p&gt;

&lt;p&gt;Appreciate your quick reply. &lt;/p&gt;

&lt;p&gt;Thanks and Regards&lt;br/&gt;
VIjayakumar Ramachandran&lt;/p&gt;</comment>
                            <comment id="15952612" author="yibing" created="Sun, 2 Apr 2017 10:08:16 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vijayprof%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;vijayprof@gmail.com&quot;&gt;Vijayakumar Ramachandran&lt;/a&gt;, I have no idea about the release date of 1.8.2. Maybe &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt; or &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt; can answer your question.&lt;/p&gt;</comment>
                            <comment id="15952861" author="busbey" created="Sun, 2 Apr 2017 21:46:30 +0000"  >&lt;p&gt;Releases of Apache Avro are driven by the community. If you&apos;d like to discuss what current blockers there are on a 1.8.2 release, or how folks can help get one out sooner, please &lt;a href=&quot;http://lists.apache.org/list.html?dev@avro.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;bring the topic up on the dev@avro mailing list&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12987398">AVRO-1877</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12804672" name="AVRO-1847.1.patch" size="2090" author="Yibing" created="Wed, 18 May 2016 14:34:50 +0000"/>
                            <attachment id="12805414" name="AVRO-1847.2.patch" size="26522" author="Yibing" created="Sat, 21 May 2016 08:45:15 +0000"/>
                            <attachment id="12808401" name="AVRO-1847.3.patch" size="38967" author="Yibing" created="Mon, 6 Jun 2016 14:34:15 +0000"/>
                            <attachment id="12808927" name="AVRO-1847.4.patch" size="49161" author="Yibing" created="Wed, 8 Jun 2016 13:44:06 +0000"/>
                            <attachment id="12810402" name="AVRO-1847.5.patch" size="52489" author="Yibing" created="Tue, 14 Jun 2016 14:22:19 +0000"/>
                            <attachment id="12810856" name="AVRO-1847.6.patch" size="54630" author="Yibing" created="Wed, 15 Jun 2016 14:26:26 +0000"/>
                            <attachment id="12811354" name="AVRO-1847.7.patch" size="56128" author="Yibing" created="Fri, 17 Jun 2016 12:40:07 +0000"/>
                            <attachment id="12811708" name="AVRO-1847.8.patch" size="59254" author="Yibing" created="Sun, 19 Jun 2016 14:42:06 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 18 May 2016 17:46:21 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 42 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2y5dj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Users of the Java Specific API who have decimal logical types may now opt-in to having their generated classes use BigDecimal to represent values rather than the serialized ByteBuffer.&lt;br/&gt;
&lt;br/&gt;
To use this feature programmatically with the SpecificCompiler class, pass true to the setEnableDecimalLogicalType method.&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
To use this feature with the specific compiler tool, pass the cli arg &amp;#39;-bigDecimal&amp;#39;.&lt;br/&gt;
&lt;br/&gt;
To use this feature with the avro maven plugin&amp;#39;s code generation, set the configuration parameter enableDecimalLogicalType to true.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1848] Can&apos;t use null or false defaults in Ruby</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1848</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;When calling &lt;tt&gt;to_avro&lt;/tt&gt; on an &lt;tt&gt;Avro::Schema::Field&lt;/tt&gt; instance (part of calling &lt;tt&gt;to_avro&lt;/tt&gt; on an instance of &lt;tt&gt;Avro::Schema::RecordSchema&lt;/tt&gt;), it will not include the default value definition if the default value is falsey.&lt;/p&gt;

&lt;p&gt;The offending code is:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-ruby&quot;&gt;      &lt;span class=&quot;code-keyword&quot;&gt;def&lt;/span&gt; to_avro(names=Set.new)
        {&lt;span class=&quot;code-quote&quot;&gt;&apos;name&apos;&lt;/span&gt; =&amp;gt; name, &lt;span class=&quot;code-quote&quot;&gt;&apos;type&apos;&lt;/span&gt; =&amp;gt; type.to_avro(names)}.tap &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; |avro|
          avro[&lt;span class=&quot;code-quote&quot;&gt;&apos;default&apos;&lt;/span&gt;] = default &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; default
          avro[&lt;span class=&quot;code-quote&quot;&gt;&apos;order&apos;&lt;/span&gt;] = order &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; order
        &lt;span class=&quot;code-keyword&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;code-keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using the &lt;tt&gt;if default&lt;/tt&gt; conditional predicate here is inappropriate, as is relying on &lt;tt&gt;nil&lt;/tt&gt; values to represent no default, because &lt;tt&gt;null&lt;/tt&gt; in JSON maps to &lt;tt&gt;nil&lt;/tt&gt; in Ruby.&lt;/p&gt;

&lt;p&gt;This is a critical show-stopper to using AvroTurf with the Confluent Schema Registry because it is quietly uploading incorrect schemas, causing downstream readers to behave incorrectly and also causing the schema registry to reject new schema versions as incompatible when they are actually just fine if the falsey default values are included when submitting the schema to the registry.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Any&lt;/p&gt;</environment>
        <key id="12971320">AVRO-1848</key>
            <summary>Can&apos;t use null or false defaults in Ruby</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.svg">Critical</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="theturtle32">Brian McKelvey</assignee>
                                    <reporter username="theturtle32">Brian McKelvey</reporter>
                        <labels>
                            <label>easyfix</label>
                    </labels>
                <created>Thu, 19 May 2016 22:22:05 +0000</created>
                <updated>Fri, 10 Feb 2017 04:48:37 +0000</updated>
                            <resolved>Sun, 4 Sep 2016 01:01:10 +0000</resolved>
                                    <version>1.8.0</version>
                                    <fixVersion>1.8.2</fixVersion>
                                    <component>ruby</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                    <timeoriginalestimate seconds="7200">2h</timeoriginalestimate>
                            <timeestimate seconds="7200">2h</timeestimate>
                                        <comments>
                            <comment id="15292287" author="githubbot" created="Thu, 19 May 2016 22:47:27 +0000"  >&lt;p&gt;GitHub user theturtle32 opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/96&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/96&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1848&quot; title=&quot;Can&amp;#39;t use null or false defaults in Ruby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1848&quot;&gt;&lt;del&gt;AVRO-1848&lt;/del&gt;&lt;/a&gt;: Fix handling of falsey default values in Ruby&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1848&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1848&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/dollarshaveclub/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/dollarshaveclub/avro&lt;/a&gt; FIX-&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1848&quot; title=&quot;Can&amp;#39;t use null or false defaults in Ruby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1848&quot;&gt;&lt;del&gt;AVRO-1848&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/96.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/96.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #96&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit d33ab415caea7e9bd8c596e74c5c4ce4245682a0&lt;br/&gt;
Author: Brian McKelvey &amp;lt;theturtle32@gmail.com&amp;gt;&lt;br/&gt;
Date:   2016-05-19T22:43:58Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1848&quot; title=&quot;Can&amp;#39;t use null or false defaults in Ruby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1848&quot;&gt;&lt;del&gt;AVRO-1848&lt;/del&gt;&lt;/a&gt;: Fix handling of falsey default values in Ruby&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="15292290" author="theturtle32" created="Thu, 19 May 2016 22:49:54 +0000"  >&lt;p&gt;&lt;a href=&quot;https://github.com/apache/avro/pull/96&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/96&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15461986" author="jira-bot" created="Sun, 4 Sep 2016 00:58:50 +0000"  >&lt;p&gt;Commit d7e12314832f1ef58f87d2f5106ac6b49c5a0be9 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=theturtle32&quot; class=&quot;user-hover&quot; rel=&quot;theturtle32&quot;&gt;Brian McKelvey&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=d7e1231&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=d7e1231&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1848&quot; title=&quot;Can&amp;#39;t use null or false defaults in Ruby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1848&quot;&gt;&lt;del&gt;AVRO-1848&lt;/del&gt;&lt;/a&gt;: Ruby: Fix handling of falsey default values.&lt;/p&gt;</comment>
                            <comment id="15461989" author="rdblue" created="Sun, 4 Sep 2016 01:01:10 +0000"  >&lt;p&gt;I committed the fix, along with a test. Thanks for contributing, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=theturtle32&quot; class=&quot;user-hover&quot; rel=&quot;theturtle32&quot;&gt;Brian McKelvey&lt;/a&gt;!&lt;/p&gt;</comment>
                            <comment id="15860701" author="githubbot" created="Fri, 10 Feb 2017 04:48:37 +0000"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/96&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/96&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12990761">AVRO-1885</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 19 May 2016 22:47:27 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310250" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10431"><![CDATA[Important]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 49 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2y8pj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1849] C++ printJson fails on record with no fields</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1849</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The function NodeRecord::printJson in lang/c++/impl/NodeImpl.cc does not correctly handle a record with no fields. It injects an extra closing curly brace, and the result is invalid JSON. &lt;br/&gt;
Starting with a schema&lt;/p&gt;
{
  &quot;type&quot;: &quot;record&quot;, 
  &quot;name&quot;: &quot;Example&quot;,
  &quot;fields&quot; : [
  ]
}
and parsing it to create a ValidSchema, then calling toJson on the ValidSchema generates
{
  &quot;type&quot;: &quot;record&quot;, 
  &quot;name&quot;: &quot;Example&quot;,
  &quot;fields&quot; : [
    }
&lt;p&gt;  ]&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;A record with no fields is unusual but we have encountered use cases for it, avro does not invalidate a record with no fields, and I&apos;ve confirmed that Java, C and C# handle this case correctly. (I have not checked the other supported languages.)&lt;/p&gt;


</description>
                <environment>&lt;p&gt;Not relevant&lt;/p&gt;</environment>
        <key id="12971680">AVRO-1849</key>
            <summary>C++ printJson fails on record with no fields</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="Simon24601">Simon Woodford</assignee>
                                    <reporter username="Simon24601">Simon Woodford</reporter>
                        <labels>
                    </labels>
                <created>Fri, 20 May 2016 22:03:22 +0000</created>
                <updated>Mon, 3 Dec 2018 20:13:41 +0000</updated>
                            <resolved>Tue, 27 Sep 2016 14:54:42 +0000</resolved>
                                    <version>1.7.7</version>
                    <version>1.8.0</version>
                                    <fixVersion>1.9.0</fixVersion>
                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="15297347" author="githubbot" created="Mon, 23 May 2016 23:33:16 +0000"  >&lt;p&gt;GitHub user Simon24601 opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/97&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/97&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1849&quot; title=&quot;C++ printJson fails on record with no fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1849&quot;&gt;&lt;del&gt;AVRO-1849&lt;/del&gt;&lt;/a&gt; Fix C++ schema to JSON converter&lt;/p&gt;

&lt;p&gt;    A ValidSchema with no records produced invalid JSON when converting to JSON in C++. This is now fixed.&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/Simon24601/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/Simon24601/avro&lt;/a&gt; master&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/97.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/97.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #97&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit a2718fed6f8e32073ae71292b49d843adb65643d&lt;br/&gt;
Author: Simon Woodford &amp;lt;simonwoodford@gmail.com&amp;gt;&lt;br/&gt;
Date:   2016-05-23T23:22:33Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1849&quot; title=&quot;C++ printJson fails on record with no fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1849&quot;&gt;&lt;del&gt;AVRO-1849&lt;/del&gt;&lt;/a&gt; Fix the issue where converting the schema of a record with no fields produced an invalid JSON&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="15526372" author="jira-bot" created="Tue, 27 Sep 2016 14:51:51 +0000"  >&lt;p&gt;Commit 1296ce9238a315b4323db351483dc66ec1a1afe3 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tomwhite&quot; class=&quot;user-hover&quot; rel=&quot;tomwhite&quot;&gt;Tom White&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=1296ce9&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=1296ce9&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1849&quot; title=&quot;C++ printJson fails on record with no fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1849&quot;&gt;&lt;del&gt;AVRO-1849&lt;/del&gt;&lt;/a&gt;: C++: printJson fails on record with no fields. Contributed by Simon Woodford.&lt;/p&gt;</comment>
                            <comment id="15526381" author="tomwhite" created="Tue, 27 Sep 2016 14:54:42 +0000"  >&lt;p&gt;I just committed this. Thanks Simon (and Zoltan for reviewing).&lt;/p&gt;</comment>
                            <comment id="15529473" author="githubbot" created="Wed, 28 Sep 2016 12:39:14 +0000"  >&lt;p&gt;Github user Simon24601 closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/97&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/97&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16707731" author="jira-bot" created="Mon, 3 Dec 2018 20:13:41 +0000"  >&lt;p&gt;Commit b5bec5ca18901507f6fc01d635f10465fd3edcdf in avro&apos;s branch refs/heads/master from Simon24601&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=b5bec5c&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=b5bec5c&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Avro1363  C# union schema can now contain multiple entries with the same name and different namespace (#131)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1849&quot; title=&quot;C++ printJson fails on record with no fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1849&quot;&gt;&lt;del&gt;AVRO-1849&lt;/del&gt;&lt;/a&gt; Fix the issue where converting the schema of a record with no fields produced an invalid JSON&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fix style issues in the code.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fix the build scripts; build.sh requires the :z addition to work on SELinux (see Jira 1925). lang/c+&lt;ins&gt;/build.sh refers to the lang/c&lt;/ins&gt;+/build directory which is empty. These are now fixed.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Update to use BOOST_TEST_CHECKPOINT&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1926&quot; title=&quot;lang/c++ build.sh  doesn&amp;#39;t work&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1926&quot;&gt;&lt;del&gt;AVRO-1926&lt;/del&gt;&lt;/a&gt; Revert changes to the lang/c++/build.sh script and add the SchemaTests to the list of tests. Also revert SELinux changes to build.sh as these should be committed separately&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1363&quot; title=&quot;C# UnionSchema fails to parse the the unions with same type names with different namespaces&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1363&quot;&gt;&lt;del&gt;AVRO-1363&lt;/del&gt;&lt;/a&gt; Fix the parsing of a union schema with duplicate names but different namespaces. In Java, this works, but not in C#&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Remove c++ changes from the AVRO1363 branch&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 23 May 2016 23:33:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2yaxj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1850] Align JSON and binary record serialization</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1850</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The documentation describes the encoding of Avro records as:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Binary: A record is encoded by encoding the values of its fields in the order that they are declared. In other words, a record is encoded as just the concatenation of the encodings of its fields. Field values are encoded per their schema.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;JSON: Except for unions, the JSON encoding is the same as is used to encode field default values.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The &lt;em&gt;field default values&lt;/em&gt; table says that records and maps are both encoded as JSON type &lt;em&gt;object&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Enhancement:&lt;/b&gt;&lt;br/&gt;
There is currently no way to write an Avro schema describing a JSON array of positional parameters (i.e. an array containing variables of possibly different type).  An Avro record is the datatype representing an ordered collection of values.  For consistency with the binary encoding, and to allow Avro to represent a schema for JSON tuples, encoding should say:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;JSON: Except for unions and records, the JSON encoding is the same as is used to encode field default values.  A record is encoded as an array by encoding the values of its fields in the order that they are declared.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For the example schema:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;{&quot;namespace&quot;: &quot;example.avro&quot;,
 &quot;type&quot;: &quot;record&quot;,
 &quot;name&quot;: &quot;User&quot;,
 &quot;fields&quot;: [
     {&quot;name&quot;: &quot;name&quot;, &quot;type&quot;: &quot;string&quot;},
     {&quot;name&quot;: &quot;favorite_number&quot;,  &quot;type&quot;: [&quot;int&quot;, &quot;null&quot;]},
     {&quot;name&quot;: &quot;favorite_color&quot;, &quot;type&quot;: [&quot;string&quot;, &quot;null&quot;]}
 ]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;the JSON encoding currently converts an Avro record to an Avro map (JSON object):&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;{           &quot;name&quot;: &quot;Joe&quot;,
 &quot;favorite_number&quot;: 42,
  &quot;favorite_color&quot;: null  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Instead Avro records should be encoded in JSON in the same manner as they are encoded in binary, as a JSON array containing the fields in the order they are defined:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;[&quot;Joe&quot;, 42, null]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The set of JSON texts validated by the example Avro schema and by the corresponding JSON schema should be equal:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;{
  &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,
  &quot;type&quot;: &quot;array&quot;,
  &quot;name&quot;: &quot;User&quot;,
  &quot;items&quot;: [
    {&quot;name&quot;:&quot;name&quot;, &quot;type&quot;: &quot;string&quot;},
    {&quot;name&quot;:&quot;favorite_number&quot;, &quot;type&quot;:[&quot;integer&quot;,&quot;null&quot;]},
    {&quot;name&quot;:&quot;favorite_color&quot;, &quot;type&quot;:[&quot;string&quot;,&quot;null&quot;]}
  ]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12971814">AVRO-1850</key>
            <summary>Align JSON and binary record serialization</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="davek22">David Kay</reporter>
                        <labels>
                            <label>Encoding</label>
                            <label>Record</label>
                    </labels>
                <created>Sat, 21 May 2016 18:04:16 +0000</created>
                <updated>Sun, 30 Dec 2018 05:38:51 +0000</updated>
                                                                            <component>spec</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 35 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2ybrb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1851] Serialization of anonymous enum fails with nullable union</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1851</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Error received when serializing an object containing a nullable anonymous enum:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;org.apache.avro.SchemaParseException: Empty name

	at org.apache.avro.Schema.validateName(Schema.java:1108)
	at org.apache.avro.Schema.access$200(Schema.java:80)
	at org.apache.avro.Schema$Name.&amp;lt;init&amp;gt;(Schema.java:468)
	at org.apache.avro.Schema.createRecord(Schema.java:151)
	at org.apache.avro.reflect.ReflectData.createSchema(ReflectData.java:466)
	at org.apache.avro.specific.SpecificData.getSchema(SpecificData.java:189)
	at org.apache.avro.reflect.ReflectData.isRecord(ReflectData.java:168)
	at org.apache.avro.generic.GenericData.getSchemaName(GenericData.java:613)
	at org.apache.avro.specific.SpecificData.getSchemaName(SpecificData.java:265)
	at org.apache.avro.generic.GenericData.resolveUnion(GenericData.java:602)
	at org.apache.avro.generic.GenericDatumWriter.resolveUnion(GenericDatumWriter.java:151)
	at org.apache.avro.generic.GenericDatumWriter.write(GenericDatumWriter.java:71)
	at org.apache.avro.reflect.ReflectDatumWriter.write(ReflectDatumWriter.java:143)
	at org.apache.avro.generic.GenericDatumWriter.writeField(GenericDatumWriter.java:114)
	at org.apache.avro.reflect.ReflectDatumWriter.writeField(ReflectDatumWriter.java:175)
	at org.apache.avro.generic.GenericDatumWriter.writeRecord(GenericDatumWriter.java:104)
	at org.apache.avro.generic.GenericDatumWriter.write(GenericDatumWriter.java:66)
	at org.apache.avro.reflect.ReflectDatumWriter.write(ReflectDatumWriter.java:143)
	at org.apache.avro.generic.GenericDatumWriter.write(GenericDatumWriter.java:58)
	at org.apache.avro.reflect.TestReflectDatumReader.serializeWithReflectDatumWriter(TestReflectDatumReader.java:45)
	at org.apache.avro.reflect.TestReflectDatumReader.testWrite_AnonymousEnum(TestReflectDatumReader.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is a unit test derived from TestReflectDatumReader to reproduce:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    @Test
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testWrite_AnonymousEnum() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
        &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] serializedBytes =
                serializeWithReflectDatumWriter(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MyObject(AnonymousEnum.A), MyObject.class, AllowNull.get());
        assertNotNull(serializedBytes);
    }

    &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; AnonymousEnum {
        A {
            @Override
            &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; doSomething() {
                &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;A is doing something&quot;&lt;/span&gt;;
            }
        };

        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; doSomething();
    }

    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;MyObject {
        &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; AnonymousEnum ae;

        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; MyObject(AnonymousEnum ae) {
            &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.ae = ae;
        }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12972094">AVRO-1851</key>
            <summary>Serialization of anonymous enum fails with nullable union</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="zkobza">Zack Kobza</reporter>
                        <labels>
                    </labels>
                <created>Mon, 23 May 2016 15:49:54 +0000</created>
                <updated>Mon, 23 May 2016 15:49:54 +0000</updated>
                                            <version>1.7.7</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>2</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 35 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2ydhj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1852] Make org.apache.avro.Schema serializable (java.io.Serializable)</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1852</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;here is a commit describing the implementation: &lt;a href=&quot;https://github.com/zolyfarkas/avro/commit/867f4d6a0f2e65a4ca8084f02b0d704a3acdb9d0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/zolyfarkas/avro/commit/867f4d6a0f2e65a4ca8084f02b0d704a3acdb9d0&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12972460">AVRO-1852</key>
            <summary>Make org.apache.avro.Schema serializable (java.io.Serializable)</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="zolyfarkas">Zoltan Farkas</reporter>
                        <labels>
                    </labels>
                <created>Tue, 24 May 2016 17:51:22 +0000</created>
                <updated>Sun, 30 Dec 2018 04:09:33 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 34 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2yfqn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>
