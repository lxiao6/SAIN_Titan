<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:22:07 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2015-7-15+AND+created+%3C%3D+2015-7-22+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="5" total="5"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1704] Standardized format for encoding messages with Avro</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1704</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I&apos;m currently using the Datafile format for encoding messages that are written to Kafka and Cassandra. This seems rather wasteful:&lt;/p&gt;

&lt;p&gt;1. I only encode a single record at a time, so there&apos;s no need for sync markers and other metadata related to multi-record files.&lt;br/&gt;
2. The entire schema is inlined every time.&lt;/p&gt;

&lt;p&gt;However, the Datafile format is the only one that has been standardized, meaning that I can read and write data with minimal effort across the various languages in use in my organization. If there was a standardized format for encoding single values that was optimized for out-of-band schema transfer, I would much rather use that.&lt;/p&gt;

&lt;p&gt;I think the necessary pieces of the format would be:&lt;/p&gt;

&lt;p&gt;1. A format version number.&lt;br/&gt;
2. A schema fingerprint type identifier, i.e. Rabin, MD5, SHA256, etc.&lt;br/&gt;
3. The actual schema fingerprint (according to the type.)&lt;br/&gt;
4. Optional metadata map.&lt;br/&gt;
5. The encoded datum.&lt;/p&gt;

&lt;p&gt;The language libraries would implement a MessageWriter that would encode datums in this format, as well as a MessageReader that, given a SchemaStore, would be able to decode datums. The reader would decode the fingerprint and ask its SchemaStore to return the corresponding writer&apos;s schema.&lt;/p&gt;

&lt;p&gt;The idea is that SchemaStore would be an abstract interface that allowed library users to inject custom backends. A simple, file system based one could be provided out of the box.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12845517">AVRO-1704</key>
            <summary>Standardized format for encoding messages with Avro</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="nielsbasjes">Niels Basjes</assignee>
                                    <reporter username="dasch">Daniel Schierbeck</reporter>
                        <labels>
                    </labels>
                <created>Thu, 16 Jul 2015 08:38:35 +0000</created>
                <updated>Thu, 1 Jun 2017 14:36:28 +0000</updated>
                            <resolved>Sun, 4 Sep 2016 20:45:23 +0000</resolved>
                                                    <fixVersion>1.9.0</fixVersion>
                    <fixVersion>1.8.2</fixVersion>
                                    <component>java</component>
                    <component>spec</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>17</watches>
                                                                <comments>
                            <comment id="14629488" author="githubbot" created="Thu, 16 Jul 2015 09:31:16 +0000"  >&lt;p&gt;GitHub user dasch opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/43&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/43&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1704&quot; title=&quot;Standardized format for encoding messages with Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1704&quot;&gt;&lt;del&gt;AVRO-1704&lt;/del&gt;&lt;/a&gt;: Standardized format for encoding messages with Avro&lt;/p&gt;

&lt;p&gt;    This is a proof of concept implementation of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1704&quot; title=&quot;Standardized format for encoding messages with Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1704&quot;&gt;&lt;del&gt;AVRO-1704&lt;/del&gt;&lt;/a&gt;(&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1704&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1704&lt;/a&gt;).&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The fingerprint implementation is mocked out.&lt;/li&gt;
	&lt;li&gt;Only 64-bit fingerprints are supported.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/dasch/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/dasch/avro&lt;/a&gt; dasch/message-format&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/43.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/43.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #43&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit 5765e59879e2c70ec2095dd666105d26e0d592fc&lt;br/&gt;
Author: Daniel Schierbeck &amp;lt;dasch@zendesk.com&amp;gt;&lt;br/&gt;
Date:   2015-07-16T09:05:38Z&lt;/p&gt;

&lt;p&gt;    Add the Avro::Message format&lt;/p&gt;

&lt;p&gt;commit f1286548ebf0e2b8ef50d604251fcfbd70137b8b&lt;br/&gt;
Author: Daniel Schierbeck &amp;lt;dasch@zendesk.com&amp;gt;&lt;br/&gt;
Date:   2015-07-16T09:28:03Z&lt;/p&gt;

&lt;p&gt;    Add SchemaStore&lt;/p&gt;

&lt;p&gt;    Currently it&apos;s using a mock fingerprint implementation and only stores&lt;br/&gt;
    64-bit fingerprints.&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="14733377" author="dasch" created="Mon, 7 Sep 2015 08:21:01 +0000"  >&lt;p&gt;&lt;b&gt;bump&lt;/b&gt;&lt;/p&gt;</comment>
                            <comment id="14739165" author="rdblue" created="Thu, 10 Sep 2015 17:13:47 +0000"  >&lt;p&gt;I think this is a good idea. Quite a few people are doing this already, but with ad-hoc formats. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=granthenke&quot; class=&quot;user-hover&quot; rel=&quot;granthenke&quot;&gt;Grant Henke&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gwenshap&quot; class=&quot;user-hover&quot; rel=&quot;gwenshap&quot;&gt;Gwen Shapira&lt;/a&gt; are probably interested in this topic as well.&lt;/p&gt;

&lt;p&gt;I think the one that is the most widely used is simply the 8-byte schema fingerprint from Java (SHA256?) followed by the encoded bytes. For compatibility with existing data in Kafka, I&apos;d recommend going with that unless we have good reason to change it. I think it&apos;s better to specify the fingerprint ahead of time so we don&apos;t waste space encoding which one (or requiring more complicated code).&lt;/p&gt;

&lt;p&gt;That leaves the format version number and metadata map, keeping in mind that if we decide we need either one then we are breaking compatibility with existing data and tools &amp;#8211; that&apos;s not too bad, but we should be aware of it. I like the idea of a format version number, but it might be unnecessary. I&apos;m interested to hear what you envision the key/value metadata would be used for, too.&lt;/p&gt;</comment>
                            <comment id="14740476" author="dasch" created="Fri, 11 Sep 2015 09:32:32 +0000"  >&lt;p&gt;I think it&apos;s fine to standardize on a single fingerprint type. As for the metadata map, I was thinking that it would be nice for generic tools to use, e.g. keeping track of Kafka offsets and partitions when moving encoded data around. It&apos;s not a requirement, though, so if it&apos;s easier to get traction without it I wouldn&apos;t mind.&lt;/p&gt;</comment>
                            <comment id="14740477" author="dasch" created="Fri, 11 Sep 2015 09:33:20 +0000"  >&lt;p&gt;If we can agree on a format I can do the Ruby implementation.&lt;/p&gt;</comment>
                            <comment id="14900357" author="dasch" created="Mon, 21 Sep 2015 08:09:10 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt; If there&apos;s already widespread usage of `&amp;lt;sha256&amp;gt;&amp;lt;data&amp;gt;` then I can simply implement that.&lt;/p&gt;</comment>
                            <comment id="14906640" author="rdblue" created="Thu, 24 Sep 2015 16:57:34 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dasch&quot; class=&quot;user-hover&quot; rel=&quot;dasch&quot;&gt;Daniel Schierbeck&lt;/a&gt;, I think the most common one is CRC-64-AVRO. That&apos;s exactly why we need to standardize this though. I think we should go with just one and it would be good to have confirmation from the Kafka and Flume communities on which one they currently use.&lt;/p&gt;</comment>
                            <comment id="15133238" author="githubbot" created="Thu, 4 Feb 2016 22:53:43 +0000"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/43&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/43&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15189402" author="nielsbasjes" created="Thu, 10 Mar 2016 15:09:59 +0000"  >&lt;p&gt;I&apos;ve been looking into what kind of solution would work here since I&apos;m working on a project where we need datastructures going into Kafka and be available to multiple consumers.&lt;/p&gt;

&lt;p&gt;The fundamental problem we need to solve is that of &quot;Schema Evolution&quot; in a streaming environment (Let&apos;s assume Kafka with the built in persistence of records).&lt;br/&gt;
We need three things to make this happen:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;A way to recognize a &apos;blob&apos; is a serialized AVRO record.
	&lt;ul&gt;
		&lt;li&gt;We can simply assume it is always an AVRO record.&lt;/li&gt;
		&lt;li&gt;I think we should simply let such a record start with &quot;AVRO&quot; to ensure we can cleanly catch problems like this &lt;a href=&quot;https://issues.apache.org/jira/browse/STORM-512&quot; title=&quot;KafkaBolt doesn&amp;#39;t handle ticks properly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;STORM-512&quot;&gt;&lt;del&gt;STORM-512&lt;/del&gt;&lt;/a&gt; (Summary: Timer ticks we written into Kafka which caused a lot of deserialization errors in reading the AVRO records.)&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;A way to determine the schema this was written with.
	&lt;ul&gt;
		&lt;li&gt;As indicated above I vote for using the CRC-64-AVRO.
		&lt;ul&gt;
			&lt;li&gt;I noticed that a simple typo fix in the documentation of a Schema causes a new fingerprint to be generated.&lt;/li&gt;
			&lt;li&gt;Proposal: I think we should &apos;clean&apos; the schema before calculating the fingerprint. I.e. remove the things that do not impact the binary form of the record (like the doc field).&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Have a place where we can find the schemas using the fingerprint as the key.
	&lt;ul&gt;
		&lt;li&gt;Here I think (looking at &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1124&quot; title=&quot;RESTful service for holding schemas&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1124&quot;&gt;AVRO-1124&lt;/a&gt; and the fact that there are ready to run implementations like this &lt;a href=&quot;http://docs.confluent.io/current/schema-registry/docs/index.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Schema Registry&lt;/a&gt;) we should limit what we keep inside Avro to something like a &quot;SchemaFactory&quot; interface (as the storage/retrieval interface to get a Schema) and a very basic implementation that simply reads the available schema&apos;s from a (set of) property file(s). Using this others can write additional implementations that can read/write to things like databases or the above mentioned Schema Registry.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;So to summarize my proposal on the standard for the &lt;tt&gt;Single record serialization format&lt;/tt&gt; can be written as:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;AVRO&quot;&lt;/span&gt;&amp;lt;CRC-64-AVRO(Normalized Schema)&amp;gt;&amp;lt;regular binary form of the actual record&amp;gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, I&apos;m seeking feedback from you guys on this proposal. &lt;/p&gt;</comment>
                            <comment id="15189473" author="nielsbasjes" created="Thu, 10 Mar 2016 16:04:41 +0000"  >&lt;p&gt;Note that having the &quot;AVRO&quot; prefix will also limit the number of needless calls to the Schema registry when bad records are put into the stream (like the Timer ticks example).&lt;/p&gt;</comment>
                            <comment id="15189594" author="cutting" created="Thu, 10 Mar 2016 17:29:46 +0000"  >&lt;blockquote&gt;&lt;p&gt;remove the things that do not impact the binary form of the record&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is already done as part of fingerprint calculation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://avro.apache.org/docs/current/spec.html#Parsing+Canonical+Form+for+Schemas&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://avro.apache.org/docs/current/spec.html#Parsing+Canonical+Form+for+Schemas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, if we opt for a prefix, we might use something like &apos;A&apos;&lt;ins&gt;&apos;v&apos;&lt;/ins&gt;&apos;r&apos;+0, where the last character also indicates the format version, including schema hash function.  That&apos;s similar to what&apos;s used to label the file format, and has a side benefit of clearly demonstrating that this is binary, non-textual data.&lt;/p&gt;</comment>
                            <comment id="15190866" author="nielsbasjes" created="Fri, 11 Mar 2016 12:46:01 +0000"  >&lt;p&gt;Thanks for pointing this out. &lt;/p&gt;

&lt;p&gt;My updated proposal for this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Avro&amp;lt;version&amp;gt;&amp;lt;fingerprint&amp;gt;&amp;lt;record&amp;gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&quot;version&quot; = 1 byte indicating the version (or &quot;schema&quot;) of the rest of the bytes.&lt;br/&gt;
if version == 0x00&lt;/li&gt;
	&lt;li&gt;&quot;Fingerprint&quot; = the CRC-64-AVRO of the Canonical form of the Schema.&lt;/li&gt;
	&lt;li&gt;&quot;Record&quot; = the record serialized to byte using the existing serialization system.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I personally do not like these &apos;chopped&apos; prefixes if there is no &quot;really good reason to chop them&quot; (like the length). &lt;br/&gt;
Because the projects name is so short: In this proposal I&apos;m sticking to using the full name of the project as the prefix: &quot;Avro&quot; (i.e. these 4 bytes 0x41, 0x76, 0x72, 0x6F)&lt;/p&gt;</comment>
                            <comment id="15210535" author="nielsbasjes" created="Thu, 24 Mar 2016 16:48:30 +0000"  >&lt;p&gt;I did some experimenting over the last week and I posted my changed version of Avro here: &lt;a href=&quot;https://github.com/nielsbasjes/avro/tree/AVRO-1704&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/nielsbasjes/avro/tree/AVRO-1704&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What I did so far:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Added to Schema the getFingerPrint() method that uses the CRC-64-AVRO to calculate the schema finger print.&lt;/li&gt;
	&lt;li&gt;Added a few SchemaStorage related classes that allow storing schemas in memory.&lt;/li&gt;
	&lt;li&gt;Added to the generated classes the toBytes() method and the fromBytes static method. Both effectively call the &apos;real&apos; implementations which are in the SpecificRecordBase class.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;All of this passes all of the Java unit testing.&lt;/p&gt;

&lt;p&gt;At the application end my test code (using 3 slightly different variations of the same schema) looks like this. &lt;br/&gt;
This works exactly as I expect it to.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;SchemaFactory.put(com.bol.measure.v1.Measurement.getClassSchema());
SchemaFactory.put(com.bol.measure.v2.Measurement.getClassSchema());
SchemaFactory.put(com.bol.measure.v3.Measurement.getClassSchema());

com.bol.measure.v1.Measurement measurement = DummyMeasurementFactory.createTestMeasurement(timestamp);
&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bytesV1 = measurement.toBytes();

com.bol.measure.v2.Measurement newBornV2 = com.bol.measure.v2.Measurement.fromBytes(bytesV1);
com.bol.measure.v3.Measurement newBornV3 = com.bol.measure.v3.Measurement.fromBytes(bytesV1);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Things currently missing: Documentation, extra tests, etc.&lt;/p&gt;

&lt;p&gt;I could really use some feedback on the structure of my change and advice on how to approach the need to call a &apos;close()&apos; method on the schema storage part.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="15234304" author="nielsbasjes" created="Sun, 10 Apr 2016 22:07:18 +0000"  >&lt;p&gt;During the last few weeks I spent some time figuring out what I think the format should be. I created this patch which includes specification for the new format, code generators for Java and unit tests that validate the format in light of schema evolution and corrupt data.&lt;/p&gt;

&lt;p&gt;I documented the new format as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Schema tagged Binary Encoding specification&lt;/p&gt;

&lt;p&gt;The wrapper format consists of a header and a body.&lt;br/&gt;
The header is always the 4 bytes representing the UTF-8 of the word &quot;Avro&quot; followed by a single byte indicating the version of the body format.&lt;/p&gt;

&lt;p&gt;Version 0 of the body (currently the ONLY body format that has been defined) consists of:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;the finger print (see the section about Schema Fingerprints of the schema (a 64 bit long) that was written in the same byte order as a long is when written if it was a field in a record.&lt;/li&gt;
	&lt;li&gt;the record serialized to byte using the binary encoding.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although I think this is already &quot;pretty good&quot; I really think this needs your comments and improvement suggestions.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="15235438" author="rdblue" created="Mon, 11 Apr 2016 16:36:27 +0000"  >&lt;p&gt;Thanks for working on this, Niels. I&apos;ll make some comments later today or tomorrow.&lt;/p&gt;</comment>
                            <comment id="15238996" author="nielsbasjes" created="Wed, 13 Apr 2016 10:05:16 +0000"  >&lt;p&gt;I have a first addition: Think about supporting encrytion. &lt;/p&gt;</comment>
                            <comment id="15244347" author="rdblue" created="Sat, 16 Apr 2016 19:08:34 +0000"  >&lt;p&gt;Looks like I was a little too optimistic about time to review things this week. Sorry for the delay. I think we&apos;re close to a spec. Here are some additional thoughts.&lt;/p&gt;

&lt;p&gt;Looks like everyone is for using the CRC-64-AVRO fingerprint, which is good because it can be implemented in each language and doesn&apos;t require a library dependency. That&apos;s also what&apos;s often used in practice.&lt;/p&gt;

&lt;p&gt;+1 for an interface in Avro that lets you plug in a schema resolver.&lt;/p&gt;

&lt;p&gt;I think the fingerprint should be considered part of the header rather than the body. It&apos;s a small distinction, but the fingerprint is a proxy for the schema here and the body/payload depends on it. Schema is in the container file header, so it is consistent.&lt;/p&gt;

&lt;p&gt;I want to avoid a 4-byte sentinel value in each message. There are two uses for it: to make sure the message is Avro and to communicate the format version should we want to change it later.&lt;/p&gt;

&lt;p&gt;Because the schema fingerprint is included in the message, it is very unlikely that unknown payloads will be read as Avro messages because it requires a collision with an 8-byte schema fingerprint. I think that&apos;s plenty of protection from passing along corrupt data. The concern that doesn&apos;t address is what happens when a fingerprint is unknown, which is a lot of cases will cause a REST call to resolve it. I don&apos;t think adding 4 bytes to every encoded payload is worth avoiding this case when the lookup can detect some number of failures and stop making the RPC calls. I just don&apos;t think we should design around a solvable problem in the format like that.&lt;/p&gt;

&lt;p&gt;I think the second use, versioning the format, is a good idea. That only requires one byte and including that byte can also serve as a way to detect non-Avro payloads, just with a higher probability of collision. I think that&apos;s a reasonable compromise. There would be something a 1/256 chance that the first byte collides, assuming that byte is random in the non-Avro payload. That dramatically reduces the problem of making RPC calls to resolve unknown schema FPs. We want to choose the version byte carefully because other formats could easily have 0x00, 0x01, or an ASCII character there. I propose the version number with the MSB set, 0x80. That&apos;s unlikely to conflict with a flags byte, the first byte of a number, or the first character of a string.&lt;/p&gt;

&lt;p&gt;That makes the format:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;message = header body
 header = 0x80 CRC-64-AVRO(schema) (8 bytes, little endian)
   body = encoded Avro bytes using schema
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could additionally have a format with a 4-byte FP, version 0x81, if anyone is interested in it. Something simple like XOR the first 4 bytes with the second 4 bytes of the CRC-64-AVRO fingerprint. 8 bytes just seems like a lot when this gets scaled up to billions of records.&lt;/p&gt;

&lt;p&gt;One last thought: in the implementation, it would be nice to allow skipping the version byte because a lot of people have already implemented this as CRC-64-AVRO + encoded bytes. That would make the Avro implementation compatible with existing data flows and increase the chances that we can move to this standard format.&lt;/p&gt;</comment>
                            <comment id="15244947" author="nielsbasjes" created="Sun, 17 Apr 2016 22:26:19 +0000"  >&lt;p&gt;A few of the thoughts I had when creating the current patch:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Regarding the &apos;Avro&apos; header (which I still believe to be &apos;the way to go&apos;)
	&lt;ul&gt;
		&lt;li&gt;The cost of going to the Schema registry is high on a &apos;cache mis&apos;. Problems like I ran into with &lt;a href=&quot;https://issues.apache.org/jira/browse/STORM-512&quot; title=&quot;KafkaBolt doesn&amp;#39;t handle ticks properly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;STORM-512&quot;&gt;&lt;del&gt;STORM-512&lt;/del&gt;&lt;/a&gt; will occur in other systems too and may very well cause an overload on the schema registry.&lt;/li&gt;
		&lt;li&gt;I consider the cost of a fixed header of 4 bytes to be low. But that really depends on the size of the record being transmitted (my records are in the 500-1000 bytes range).
		&lt;ul&gt;
			&lt;li&gt;These extra bytes will only be persisted in streaming systems like Kafka. Long term file formats (like AVRO, Parquet and ORC) won&apos;t store this.&lt;/li&gt;
			&lt;li&gt;In network traffic the overhead is &apos;unmeasurably small&apos; because it is unlikely the record will go over the size of a single TCP packet (1500) because of these 4 bytes.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Regarding the schema fingerprint (which I consider a &apos;body&apos; part).
	&lt;ul&gt;
		&lt;li&gt;The idea of the &apos;version&apos; was that someone may want to use a different &apos;hash&apos; instead of the CRC-64-AVRO.&lt;/li&gt;
		&lt;li&gt;I think that in case of encryption we should have the fingerprint encrypted too.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;b&gt;In light of the encryption option and your comments I&apos;m now considering this &lt;em&gt;brainwave&lt;/em&gt;&lt;/b&gt;:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The &apos;header of the message&apos; should be pluggable.
	&lt;ul&gt;
		&lt;li&gt;The default is a &apos;fixed shape&apos; which includes a format id. (Same as what my current patch does).&lt;/li&gt;
		&lt;li&gt;I expect that making this pluggable too is possible but that would have some restrictions like &quot;all records of a schema must adhere to the same base format&quot;.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;The &apos;body of the message&apos; should be pluggable too.
	&lt;ul&gt;
		&lt;li&gt;Format &apos;0&apos; is hardcoded (fingerprint+record).&lt;/li&gt;
		&lt;li&gt;Yet other versions (we should define a range like 0x80-0xFF) can be used by anyone to define a custom body definition (including encryption). I expect these versions to only exist within a specific company. If they need to exchange data with others they should share their format specification anyway.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;If we set the code up right we can have a layering system: I.e. someone can &apos;insert&apos; an encryption layer and still use the &apos;standard&apos; body (after decryption).
	&lt;ul&gt;
		&lt;li&gt;Such an &apos;encryption layer&apos; would add additional parts like a encryption type and a key id.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15244991" author="rdblue" created="Mon, 18 Apr 2016 00:01:03 +0000"  >&lt;p&gt;Sorry if what I said wasn&apos;t clear. I&apos;m not proposing that we get rid of the header. I&apos;m saying that we make it one byte instead of 4. I think what I outlined addresses the case where the schema cache miss is expensive and balances that with the per-message overhead. (I&apos;m fine moving forward with the FP considered part of the body.)&lt;/p&gt;

&lt;p&gt;A one-byte header results in lower than a 1/256 chance of an expensive lookup (by choosing carefully). Why is that too high? Why 4 bytes and not, for example, 2 for a 1/65536 chance?&lt;/p&gt;

&lt;p&gt;I disagree that the impact of extra bytes is too small to matter. It (probably) won&apos;t cause fragmentation when sending one message, but we&apos;re not talking about just one message. Kafka&apos;s performance depends on batching records together for network operations and each message takes up space on disk. What matters is the percentage of data that is overhead. 4 bytes if your messages are 500 is 0.8%, and it is 4% if your messages are 100 bytes.&lt;/p&gt;

&lt;p&gt;In terms of how much older data I can keep in a Kafka topic, that accounts for 11m 30s to 57m 30s per day. If I provision for a 3-day window of data in Kafka, I&apos;m losing between half an hour and 3 hours of that just to store &apos;Avr0&apos; over and over. That&apos;s why I think we have to strike a balance between the two concerns. 1 or 2 bytes should really be sufficient, depending on the probability of a false-positive we want. And false-positives are only that costly if each one causes an RPC, which we can avoid with a little failure detection logic.&lt;/p&gt;</comment>
                            <comment id="15247442" author="nielsbasjes" created="Tue, 19 Apr 2016 09:48:16 +0000"  >&lt;p&gt;I agree with what you are saying. So the header should be shorter, but not too short.&lt;br/&gt;
I think that having only 1 byte is too short, 2 bytes should be fine: 1 marker byte, 1 body version byte.&lt;/p&gt;

&lt;p&gt;So the updated proposal becomes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Header becomes 2 bytes in total. &apos;&#195;&apos; &apos;&amp;lt;body version byte&amp;gt;&apos;
	&lt;ul&gt;
		&lt;li&gt;I chose the &#195; (0xC3) because
		&lt;ul&gt;
			&lt;li&gt;It is a &apos;human readable character&apos;&lt;/li&gt;
			&lt;li&gt;it looks like an &apos;A&apos; (from Avro) under a &apos;Wave&apos; and since currently the primary use case is streaming this seems like the right marker.&lt;/li&gt;
			&lt;li&gt;Also this is a very uncommon character so if we see this the collision probability drops dramatically.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
		&lt;li&gt;The &apos;&amp;lt;body version byte&amp;gt;&apos; can be any byte that essentially defines the record structure that follows. This can be used to indicate for example the difference between a normal record and an encrypted record.
		&lt;ul&gt;
			&lt;li&gt;I think that we should also pick an &apos;uncommon&apos; byte for this one to mark the default record version. I think this one is a good candicate: &apos;&#187;&apos; (0xBB) because it looks like a symbol for &apos;fast&apos;.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;The default body (i.e. version 0xBB) becomes
	&lt;ul&gt;
		&lt;li&gt;body: fingerprint record
		&lt;ul&gt;
			&lt;li&gt;fingerprint = CRC-64-AVRO(normalized schema) (8 bytes, little endian)&lt;/li&gt;
			&lt;li&gt;record = encoded Avro bytes using schema&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So the overall record using the default body structure would look like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;message = header body
 header = &lt;span class=&quot;code-quote&quot;&gt;&apos;&#195;&#187;&apos;&lt;/span&gt; (== 0xC3 0xBB)
   body = &amp;lt;CRC-64-AVRO(Normalized(schema)) (8 bytes, little endian)&amp;gt; &amp;lt;encoded Avro bytes using schema&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the generated code I&apos;ll see what can be done to make both the header and body code &apos;pluggable&apos;.&lt;br/&gt;
I think that the Schema Storage should get a capped &apos;cache&apos; (LRU?) that retains the fingerprints that are &apos;known to not exist&apos;.&lt;/p&gt;
</comment>
                            <comment id="15254092" author="nielsbasjes" created="Fri, 22 Apr 2016 15:26:18 +0000"  >&lt;p&gt;Question: What would be the preferred way of handling error situations like &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Unknown schema fingerprint&lt;/li&gt;
	&lt;li&gt;Bad set of bytes (in various forms)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I see at least in two general directions:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Return null&lt;/li&gt;
	&lt;li&gt;Throw an error&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;What is preferred in this case?&lt;br/&gt;
Which is &apos;better&apos; for the application developers?&lt;/p&gt;</comment>
                            <comment id="15268218" author="nielsbasjes" created="Tue, 3 May 2016 06:47:06 +0000"  >&lt;p&gt;This patch does just about everything we talked about.&lt;br/&gt;
Both the schema storage and the serialization of the body are pluggable. &lt;/p&gt;

&lt;p&gt;I created a single record serializer that does an &apos;xor&apos; obfuscation on the binary. I see this as enough proof that someone else can later create a proper encryption layer.&lt;/p&gt;

&lt;p&gt;Main things that still need to be done:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;What do we call this? &quot;Single record serializer&quot; ?&lt;/li&gt;
	&lt;li&gt;The currently generated methods are toBytes and fromBytes. Do we keep those names or should it be more explicit? Like toSingleRecordBytes or toBytesWithSchema or ...&lt;/li&gt;
	&lt;li&gt;Check the format of the fingerprint in the byte[] (should be little endian) and see if there is an existing method that does this in a performant way (suggestions are welcome).&lt;/li&gt;
	&lt;li&gt;Naming of packages and classes. I find some of the current names I came up with &quot;sub-optimal&quot;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Please review and provide input to the points above.&lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="15268611" author="nielsbasjes" created="Tue, 3 May 2016 12:24:05 +0000"  >&lt;p&gt;Although this patch is not yet finished I would really like review comments at this point from other committers (like &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt; and if possible &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;).&lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="15268928" author="rdblue" created="Tue, 3 May 2016 15:49:08 +0000"  >&lt;p&gt;Yeah, sorry about not replying yet. I haven&apos;t gotten a great chance for a review.&lt;/p&gt;

&lt;p&gt;My current thought is that I&apos;m fine with 2 bytes and 0xC3. It seems strange to me to pick an arbitrary byte for the version, maybe it would be better to go with 0x00. Also, I have some code that I&apos;ve been using that I want to compare with what you have here and think about the API since it will be a popular one.&lt;/p&gt;</comment>
                            <comment id="15271178" author="cutting" created="Wed, 4 May 2016 18:46:19 +0000"  >&lt;p&gt;A few quick comments:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A prefix with non-printing characters has the benefit of making it clear this is binary data and should not be treated as text.  This may or may not matter here, but, for example, it is useful that there are non-printing characters at the start of a data file so that applications don&apos;t ever guess that these are text and subject to CRLF manipulation, etc.  Or, if instead, we want it to be printable, we should perhaps just use standard ASCII &apos;A&apos; and &apos;&amp;gt;&apos;.  I don&apos;t see the advantage of using &apos;rare&apos; printing characters, that just seems confusing to me.&lt;/li&gt;
	&lt;li&gt;the changes to Schema#hashCode() may have performance implications, so we should at least run the Perf.java benchmarks before this is committed&lt;/li&gt;
	&lt;li&gt;getFingerprint() needs javadoc&lt;/li&gt;
	&lt;li&gt;invalidateHashes() is package-private, should be private&lt;/li&gt;
	&lt;li&gt;SingleRecordSerializer is specific to SpecificRecord, so perhaps belongs in the specific package?&lt;/li&gt;
	&lt;li&gt;Is this really for records only, or for any object?&lt;/li&gt;
	&lt;li&gt;maybe the base class/interface should be called MessageEncoder instead of RecordSerializer, the package could be named &apos;message&apos;, and the storage could be called MessageSchemaRepo?&lt;/li&gt;
	&lt;li&gt;the Xor example should be in a test package, not in the released library, no?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15271360" author="cutting" created="Wed, 4 May 2016 20:15:35 +0000"  >&lt;p&gt;A few more comments:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think we can move all of the SpecificRecord#toBytes() and #fromBytes() code to SpecificRecordBase instead of generating it for each class.  I prefer to minimize generated code.  This might look like:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;SpecificRecordBase&amp;lt;T &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; SpecificRecordBase&amp;gt; {
  ...
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; T fromBytes(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[]) { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (T)...; }
}
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Player &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; SpecificRecordBase&amp;lt;Player&amp;gt; {
  ... 
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;I suspect using DataInputStream and DataOutputStream in public APIs may be problematic for performance long-term.  Maybe the only public API in the first version should be &apos;T fromMessage(byte[])&apos; and &apos;byte[] toMessage(T)&apos;?  This can then be optimized, and, if needed a higher-performance lower-level API can be added.&lt;/li&gt;
	&lt;li&gt;We should implement this API for more than just specific data.  This should work for generic data, Thrift, protobuf, etc., producing an identical format.  So the base implementation should be passed a GenericData, which all of these inherit from, since it can create an appropriate DatumReader or DatumWriter.  So this might look something like:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.avro.data;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;MessageCoder&amp;lt;T&amp;gt; {
   &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; GenericData data;
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; MessageCoder(GenericData data, MessageSchemaRepo repo) { &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.data = data; }
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] toMessage(T object) { ... }
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; T fromMessage(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bytes) { ... }
}&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Permitting alternate schema repos and alternate in-memory object representations is important, but supporting alternate message formats is not.  The goal here is to standardize a message format, so I would not design things for extensibility on that axis.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15273205" author="nielsbasjes" created="Thu, 5 May 2016 22:11:33 +0000"  >&lt;p&gt;Thanks for the great feedback. &lt;br/&gt;
I&apos;m going to work on these points.&lt;/p&gt;</comment>
                            <comment id="15352338" author="githubbot" created="Tue, 28 Jun 2016 04:37:56 +0000"  >&lt;p&gt;GitHub user rdblue opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/103&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/103&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1704&quot; title=&quot;Standardized format for encoding messages with Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1704&quot;&gt;&lt;del&gt;AVRO-1704&lt;/del&gt;&lt;/a&gt;: Add DatumEncoder API&lt;/p&gt;



&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/rdblue/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/rdblue/avro&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1704&quot; title=&quot;Standardized format for encoding messages with Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1704&quot;&gt;&lt;del&gt;AVRO-1704&lt;/del&gt;&lt;/a&gt;-add-datum-encoder-decoder&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/103.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/103.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #103&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit 79a2993151ea7589c06b854ee7ac8e951816ecce&lt;br/&gt;
Author: Ryan Blue &amp;lt;blue@apache.org&amp;gt;&lt;br/&gt;
Date:   2016-06-28T03:37:56Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1869&quot; title=&quot;Decimal conversion from ByteBuffer ignores buffer position and limit&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1869&quot;&gt;&lt;del&gt;AVRO-1869&lt;/del&gt;&lt;/a&gt;: Java: Fix Decimal conversion from ByteBuffer.&lt;/p&gt;

&lt;p&gt;commit 3ca6a15ddf75e4c39468ddd1d454331f3f54f1e3&lt;br/&gt;
Author: Ryan Blue &amp;lt;blue@apache.org&amp;gt;&lt;br/&gt;
Date:   2016-06-28T03:40:14Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1704&quot; title=&quot;Standardized format for encoding messages with Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1704&quot;&gt;&lt;del&gt;AVRO-1704&lt;/del&gt;&lt;/a&gt;: Java: Add type parameter to createDatumReader and Writer.&lt;/p&gt;

&lt;p&gt;commit d91b90544f4486a72da8d3ff5b81dfc3c79d7c2f&lt;br/&gt;
Author: Ryan Blue &amp;lt;blue@apache.org&amp;gt;&lt;br/&gt;
Date:   2016-06-28T03:41:40Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1704&quot; title=&quot;Standardized format for encoding messages with Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1704&quot;&gt;&lt;del&gt;AVRO-1704&lt;/del&gt;&lt;/a&gt;: Java: Add DatumEncoder and SchemaStore.&lt;/p&gt;

&lt;p&gt;commit 7fa75aab405c6460077d7cc7e403c664cce84431&lt;br/&gt;
Author: Ryan Blue &amp;lt;blue@apache.org&amp;gt;&lt;br/&gt;
Date:   2016-06-28T03:44:06Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1704&quot; title=&quot;Standardized format for encoding messages with Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1704&quot;&gt;&lt;del&gt;AVRO-1704&lt;/del&gt;&lt;/a&gt;: Java: Add toByteArray and fromByteArray to specific.&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="15352355" author="rdblue" created="Tue, 28 Jun 2016 04:49:13 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nielsbasjes&quot; class=&quot;user-hover&quot; rel=&quot;nielsbasjes&quot;&gt;Niels Basjes&lt;/a&gt;, sorry it&apos;s taken so long for me to get back to you on this.&lt;/p&gt;

&lt;p&gt;On the spec:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;I think we should go with the header: 0xC3 0x01. The first byte makes it easily recognizable as you suggest and meets my requirement of minimizing the number of non-Avro payloads that match. Using 0x01 makes it easy to see the version and will prevent programs confusing payloads with text as Doug suggests.&lt;/li&gt;
	&lt;li&gt;I don&apos;t see much value in reserving space in the second byte. I don&apos;t think there will be many formats for serializing Avro payloads and I don&apos;t think we will have problems with collision.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;ve had a look at your patch and there&apos;s a lot in there: an update to the spec, an implementation, an XOR demo, changes to Schema hashing, specific support, and static default classes. I think it would be helpful to get this in by breaking up the work into separate patches, pull requests, or issues.&lt;/p&gt;

&lt;p&gt;I also think we should simply the API a bit. I&apos;d like to keep it small and grow it was we need to keep the maintenance and compatibility simple. For example, SchemaStorage has open and close methods that are only used in a test. I&apos;d rather not add life-cycle methods like those unless the life-cycle of a SchemaStorage needs to be managed by Avro. To that end, I think we can simplify the API and I propose the following API:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; SchemaStore {
  Schema findByFingerprint(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I also think that the message API should be focused around a datum and a buffer or stream. The data model (GenericData instance) and other things can be passed in to create it and then reused for efficiency. I&apos;ve actually implemented this already for a project that stores Avro-encoded payloads in Parquet so I&apos;ve &lt;a href=&quot;https://github.com/apache/avro/pull/103&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;adapted that implementation&lt;/a&gt; to look up fingerprints from a SchemaStore. The API is broken into encoder and decoder sides to deal with separate concerns: for the encoder that&apos;s how to manage buffers and for the decoder it&apos;s how to resolve schemas and datum reuse.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; DatumEncoder&amp;lt;D&amp;gt; {
  DatumDecoder(GenericData model, Schema, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; copyBuffer);
  ByteBuffer encode(D datum); &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; copyBuffer was &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; is a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; buffer
&lt;/span&gt;  void encode(D datum, OutputStream);
}

&lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; DatumDecoder&amp;lt;D&amp;gt; {
  DatumDecoder(GenericData model, Schema, SchemaStore);
  D decode(ByteBuffer);
  D decode(ByteBuffer, D reuseDatum);
  D decode(InputStream);
  D decode(InputStream, D reuseDatum);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My branch is broken into a few commits. The first two are bug fixes, but the third is &lt;a href=&quot;https://github.com/apache/avro/pull/103/commits/d91b90544f4486a72da8d3ff5b81dfc3c79d7c2f&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;the DatumEncoder implementation, d91b905&lt;/a&gt;,  and the fourth is &lt;a href=&quot;https://github.com/apache/avro/pull/103/commits/7fa75aab405c6460077d7cc7e403c664cce84431&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;support for the Specific data model, 7fa75aa&lt;/a&gt;, based on your patch.&lt;/p&gt;

&lt;p&gt;I&apos;d like to hear what you think of the DatumEncoder API in that branch. It implements a few things that I think we&apos;ll need, like datum reuse, and it reuses encoders, DatumWriters, and buffers. It implements two encoder/decoder pairs, &quot;raw&quot; that is just the datum bytes and &quot;binary&quot; that implements the header and schema lookup. Definitely needs some improvements, like more through tests and better naming, like Doug&apos;s suggestion to use &quot;message&quot;.&lt;/p&gt;</comment>
                            <comment id="15353614" author="cutting" created="Tue, 28 Jun 2016 19:58:19 +0000"  >&lt;p&gt;That decoder interface seems particularly wide.  Might these be better as base classes rather than interfaces?  What power does the interface add?&lt;/p&gt;

&lt;p&gt;The initial implementations also have hidden performance pitfalls; some operations allocate streams &amp;amp; arrays for every call.  We might either go with a lean-and-mean API, or make sure that all of the supported invocations are efficient.  I&apos;d prefer inefficiencies be manifest, forcing clients to allocate streams per call rather than folks assuming they&apos;re using a ByteBuffer-optimized API.&lt;/p&gt;

&lt;p&gt;To optimize these in a thread-safe manner I think we&apos;d add a ThreadLocal&amp;lt;ByteArrayInput/OutputStream&amp;gt; field, right?&lt;/p&gt;

&lt;p&gt;Do we really need the raw format support?  This is supported by the existing API.  The primary goal here is to add support for a new, non-raw &quot;message&quot; format.&lt;/p&gt;

&lt;p&gt;Without the interface &amp;amp; the raw format, this could become just two utility classes, MessageEncoder and MessageDecoder.  Is that too reductive?&lt;/p&gt;</comment>
                            <comment id="15353737" author="rdblue" created="Tue, 28 Jun 2016 21:18:17 +0000"  >&lt;p&gt;I agree that the current interface is wide. I think we should have the datum reuse methods, which doubles the API. I think we definitely want the ByteBuffer methods. Do you think we don&apos;t need the InputStream methods? In the pull request there are also byte array methods, but it&apos;s easy for callers to use ByteBuffer instead.&lt;/p&gt;

&lt;p&gt;I like having the interface so that alternative implementations can be independent. There&apos;s no guarantee that Avro&apos;s base class is useful to implementers and I don&apos;t see a need to force people to inherit from an Avro class when it may not make sense. There&apos;s an optional base class for convenience, so I think the benefits outweigh the cost.&lt;/p&gt;

&lt;p&gt;+1 for getting rid of the performance pitfalls. I think we just need to find a reusable ByteArrayInputStream and make sure we can change the buffer list in ByteBufferInputStream. I&apos;ll look into it.&lt;/p&gt;

&lt;p&gt;For thread safety we can just make the reused state thread-local like you suggest. Right now the Specific methods use a thread-local DatumEncoder/DatumDecoder. Do you think the DatumEncoder implementations should be thread-safe?&lt;/p&gt;

&lt;p&gt;I think we do need the raw format. Right now there are a lot of systems already serializing Avro records in the equivalent of the raw format so I would like to have an Avro class that helps move to the new spec. Also, if the schema is fixed then there&apos;s no need for 10 extra bytes per payload so it is independently useful. For example, I use the raw format to store JSON payloads. The schema won&apos;t change and Avro is much smaller and faster.&lt;/p&gt;</comment>
                            <comment id="15353906" author="cutting" created="Tue, 28 Jun 2016 23:18:41 +0000"  >&lt;p&gt;I think all the methods are useful but some of them (e.g., non-reuse) will always be implemented by boilerplate and are thus not core to the interface, but rather something more suitable for a base class.&lt;/p&gt;

&lt;p&gt;An abstract base class would still permit independent alternative implementations.  The only additional power an interface has is that one can implement multiple interfaces.  But interfaces don&apos;t let you implement convenience methods, nor do they permit compatible evolution (if you ever add or remove a method, you break implementations, because you cannot provide default impls).  But if you feel multiple inheritance is important here, then it&apos;s probably easier to stick to an interface than, e.g., refactor into encoder/decoder provider classes that are separate from the user-invoked classes or some other way to avoid such boilerplate implementations.&lt;/p&gt;

&lt;p&gt;Encoding to a ByteBuffer should be thread-safe, since it has no caller-visible state, no?&lt;/p&gt;</comment>
                            <comment id="15369378" author="rdblue" created="Sun, 10 Jul 2016 01:30:36 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, I&apos;ve pushed a couple new commits to the pull request. The changes include:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Add ReusableByteBufferInputStream and ReusableByteArrayInputStream&lt;/li&gt;
	&lt;li&gt;Make the encoder and decoder instances thread-safe&lt;/li&gt;
	&lt;li&gt;Remove the thread-local encoder from Specific because the static encoder and decoder are now thread-safe&lt;/li&gt;
	&lt;li&gt;Add tests using generic&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That addresses the review feedback other than the question of whether to use an interface or an abstract class. I think the patch has the best of both options by including both an interface and an abstract base class (DatumDecoder.BaseDecoder) that implementations can use to cut down on boilerplate and maintain compatibility. That leaves the choice up to the implementer. If you have a strong opinion here, I can change it but I think having both is a good solution.&lt;/p&gt;

&lt;p&gt;Also, some of the tests are ignored because they don&apos;t pass without a modification to the ResolvingGrammarGenerator. Aliases don&apos;t appear to be working. I&apos;m opening another issue with a patch for it.&lt;/p&gt;</comment>
                            <comment id="15369379" author="rdblue" created="Sun, 10 Jul 2016 01:31:35 +0000"  >&lt;p&gt;Forgot to add: I&apos;ve kept the new commits separate so you can see what changed. I&apos;ll squash them into the implementation when it is time to commit to master if this implementation is accepted.&lt;/p&gt;</comment>
                            <comment id="15371389" author="cutting" created="Mon, 11 Jul 2016 18:45:49 +0000"  >&lt;p&gt;I don&apos;t see why anyone would prefer the interface to the abstract base class.  It seems like belt and suspenders (&lt;a href=&quot;https://youtube.com/watch?v=VuWzeoIr7J4&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://youtube.com/watch?v=VuWzeoIr7J4&lt;/a&gt;).   Who do we imagine would implement this outside of the project?&lt;/p&gt;

&lt;p&gt;Frankly, I question this needs even be abstract.  Applications will use this API because they want to use Avro&apos;s tagged binary encoding for messages.  Applications that want an untagged binary encoding can use the existing APIs.  The in-memory format is already abstracted, and the encoding is fixed.  What we&apos;re providing here isn&apos;t an extensible framework, it&apos;s some utility code.  Folks who seek to optimize away the 10-byte overhead can use a DatumWriter &amp;amp; BinaryEncoder as they do today.  That&apos;s an unsafe encoding and we needn&apos;t further simplify it.  Our goal is to provide an easy-to-use, safe, standard encoding for messages.&lt;/p&gt;

&lt;p&gt;I also worry that names like BinaryDatumDecoder are confusing, when we already have BinaryDecoder and DatumReader.  We might instead call a so-prefixed binary encoded datum a &quot;message&quot;, and have MessageWriter and MessageReader classes that implement this and a MessageSchemaStore, perhaps even placing these all in a new &quot;message&quot; package.&lt;/p&gt;

&lt;p&gt;I won&apos;t reject this patch over these differences in style.  I prefer to not hide things behind abstractions until there&apos;s clear need.  At that point, when multiple implementations are required, one has a better idea of what the abstraction should be.  In the mean time, code is substantially smaller, easier to read, debug, maintain, etc.  But this is a style issue where reasonable folks might differ.&lt;/p&gt;

&lt;p&gt;It&apos;s hard to believe we don&apos;t already have reusable array i/o streams around!  Perhaps these should go in the util package so they can be used more widely?&lt;/p&gt;

&lt;p&gt;I like the convenience methods generated for specific data.  We might also add utilities for generic &amp;amp; reflect, like, model#getMessageWriter(Schema)?&lt;/p&gt;</comment>
                            <comment id="15381561" author="rdblue" created="Sun, 17 Jul 2016 22:45:43 +0000"  >&lt;p&gt;I think this should be abstract. The format that we&apos;re adding solves one set of uses, but the utility methods have value beyond that. Encoding a single Avro record is fairly common, but the implementations vary widely in quality because it is difficult to find the right setup of DatumWriter, BinaryEncoder, and ByteArrayOutputStream. Simplifying and improving applications that already do this is a good thing. And some of those uses, like the case I mentioned where we&apos;re embedding Avro in Parquet records, don&apos;t need the header or schema at all because that&apos;s defined in the file metadata.&lt;/p&gt;

&lt;p&gt;The abstraction is also useful for transitioning to the format we&apos;re defining here. The normal way to encode messages in Kafka is the 8-byte fingerprint followed by the encoded message payload. With the abstraction, you can write a decoder that checks for the header and then deserializes, or assumes the old format if the header is missing. That would enable rolling upgrades using the same Kafka topics, rather than needing a hard transition.&lt;/p&gt;

&lt;p&gt;I would also include the abstraction in case we want to change or introduce a new format later.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I also worry that names like BinaryDatumDecoder&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve pushed a new commit that moves the classes to org.apache.avro.message and renames them to MessageEncoder and MessageDecoder. I used &quot;encoder&quot; instead of &quot;reader&quot; to contrast with the DatumReader and DatumWriter, since there is little difference between a datum and a message (a datum to encode by itself).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Perhaps &lt;span class=&quot;error&quot;&gt;&amp;#91;the reusable i/o streams&amp;#93;&lt;/span&gt; should go in the util package so they can be used more widely?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve moved them there. I avoided it before so that they weren&apos;t added to the public API, but I think it&apos;s fine to make them available.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We might also add utilities for generic &amp;amp; reflect, like, model#getMessageWriter(Schema)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I looked at this, but then the GenericData classes would have both createDatumWriter and getMessageWriter, which looks confusing to me. Keeping the DatumEncoder above the level of the data models helps separate the DatumWriter from the MessageEncoder.&lt;/p&gt;

&lt;p&gt;If we want to make instantiating these easier, then maybe a builder would be more appropriate. That would allow us to pass multiple writer schemas to the MessageDecoder.&lt;/p&gt;</comment>
                            <comment id="15382696" author="cutting" created="Mon, 18 Jul 2016 17:45:30 +0000"  >&lt;p&gt;I doubt we&apos;ll ever need this abstracted, and having it so might encourage a proliferation of message formats, but it might also prove useful someday, so I can live with that.  However I still don&apos;t see the need for multiple levels of abstraction (interface + abstract base class).  That still seems like vast overkill to me, but is probably not worth fighting about.&lt;/p&gt;

&lt;p&gt;As far as terminology, &quot;datum&quot; is used to refer to the in-memory data structure (generic, specific, reflect, Thrift, protobuf) while &quot;encode/decode&quot; refer to specific serialized formats (binary, json).  A reader/writer translates between the in-memory structure and the abstract encoding API.  So where does &quot;message&quot; fit into this taxonomy?  I suppose it&apos;s a new serialized format, an extension of &quot;binary&quot;, so &quot;encode/decode&quot; are probably more appropriate than &quot;read/write&quot;.&lt;/p&gt;

&lt;p&gt;Not sure what you mean about the builder.&lt;/p&gt;</comment>
                            <comment id="15387031" author="rdblue" created="Thu, 21 Jul 2016 02:30:14 +0000"  >&lt;p&gt;I agree with your reasoning on naming, so lets go with MessageEncoder. I think that&apos;s reasonably distinct from the other classes.&lt;/p&gt;

&lt;p&gt;By my builder comment, I meant that if we want to make it easier to instantiate a MessageDecoder we could add a builder rather than a factory method. That would make it easy to seed the decoder with compatible Schemas and select the GenericData subclass. Something like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;MessageDecoder&amp;lt;MyDatum&amp;gt; decoder = MessageDecoder.builder()
    .read(MyDatum.class)
    .schema(oldSchema1)
    .schema(oldSchema2)
    .build();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don&apos;t think this is needed yet, since the constructors are fairly simple.&lt;/p&gt;

&lt;p&gt;I think the implementation is about ready to commit, followed by the spec updated for the 2-byte header used in this implementation. Is there anything else you think we should change?&lt;/p&gt;</comment>
                            <comment id="15389787" author="cutting" created="Fri, 22 Jul 2016 16:33:08 +0000"  >&lt;p&gt;+1 overall.&lt;/p&gt;

&lt;p&gt;Two minor questions:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is the change to the createDatumReader/Writer API fully back-compatible?&lt;/li&gt;
	&lt;li&gt;I think a few of the new public methods don&apos;t have javadoc.  It&apos;s probably worth building the docs and glancing through them to see how they look.  That usually inspires a lot of improvements and is especially useful with new APIs like this.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Other than that, LGTM.&lt;/p&gt;</comment>
                            <comment id="15390333" author="rdblue" created="Fri, 22 Jul 2016 22:56:55 +0000"  >&lt;p&gt;For the createDatumReader/Writer change: it is &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html#jls-13.4.13&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;binary compatible because of type erasure&lt;/a&gt;, but not source compatible.&lt;/p&gt;

&lt;p&gt;To work around not constructing these with the type parameter, some users will cast to the right type, like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;DatumReader&amp;lt;GenericRecord&amp;gt; reader = (DatumReader&amp;lt;GenericRecord&amp;gt;) GenericData.get().createDatumReader(schema);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That compiles in 1.8.1 because it is casting &lt;tt&gt;DatumReader&lt;/tt&gt; to &lt;tt&gt;DatumReader&amp;lt;GenericRecord&amp;gt;&lt;/tt&gt;, but not with this change. After the change, it returns a &lt;tt&gt;DatumReader&amp;lt;Object&amp;gt;&lt;/tt&gt; that Java won&apos;t convert. The fix is to remove the cast and then Java correctly infers that the type parameter is &lt;tt&gt;GenericRecord&lt;/tt&gt; instead of &lt;tt&gt;Object&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Do we guarantee source compatibility? Even if we do not, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt;, what do you think about including this incompatibility?&lt;/p&gt;</comment>
                            <comment id="15391091" author="cutting" created="Sun, 24 Jul 2016 15:43:45 +0000"  >&lt;p&gt;We don&apos;t promise source-compatibility for minor Avro releases, but do for dot releases.  So this should not go into 1.8.x but could go into 1.9.0.  (An incompatible change to data formats would require a 2.0.)&lt;/p&gt;</comment>
                            <comment id="15391117" author="rdblue" created="Sun, 24 Jul 2016 17:32:17 +0000"  >&lt;p&gt;Sounds good to me! I&apos;ll fix the missing Javadoc and remove that change.&lt;/p&gt;</comment>
                            <comment id="15391186" author="jira-bot" created="Sun, 24 Jul 2016 22:22:28 +0000"  >&lt;p&gt;Commit e3c5da696d4762b287bfec0d133efec20ddb8b14 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=e3c5da6&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=e3c5da6&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1704&quot; title=&quot;Standardized format for encoding messages with Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1704&quot;&gt;&lt;del&gt;AVRO-1704&lt;/del&gt;&lt;/a&gt;: Java: Add support for single-message encoding.&lt;/p&gt;</comment>
                            <comment id="15391187" author="jira-bot" created="Sun, 24 Jul 2016 22:22:30 +0000"  >&lt;p&gt;Commit f6c044e56f9de7d3e34eeb1702c11fa4add04d84 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=f6c044e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=f6c044e&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1704&quot; title=&quot;Standardized format for encoding messages with Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1704&quot;&gt;&lt;del&gt;AVRO-1704&lt;/del&gt;&lt;/a&gt;: Java: Add toByteArray and fromByteArray to specific.&lt;/p&gt;</comment>
                            <comment id="15391188" author="githubbot" created="Sun, 24 Jul 2016 22:22:42 +0000"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/103&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/103&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15391193" author="rdblue" created="Sun, 24 Jul 2016 22:56:19 +0000"  >&lt;p&gt;I just committed the Java implementation, with additional Javadoc. This did not include the incompatible changes, which should be done in a separate issue.&lt;/p&gt;

&lt;p&gt;I also took the spec from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nielsbasjes&quot; class=&quot;user-hover&quot; rel=&quot;nielsbasjes&quot;&gt;Niels Basjes&lt;/a&gt;&apos;s patch and updated it:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Use &quot;object&quot; instead of &quot;record&quot; to be more clear that it doesn&apos;t have to be an Avro record&lt;/li&gt;
	&lt;li&gt;Use C3 01 for the header&lt;/li&gt;
	&lt;li&gt;Simplify the encoding spec as much as possible&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15391974" author="busbey" created="Mon, 25 Jul 2016 14:20:52 +0000"  >&lt;p&gt;FWIW, I belatedly agree with Doug&apos;s statement.&lt;/p&gt;

&lt;p&gt;Do we have our compatibility promises documented somewhere? I feel like I have a good sense of them, but I don&apos;t know if that&apos;s just because I&apos;ve been in the community for several years.&lt;/p&gt;</comment>
                            <comment id="15394177" author="busbey" created="Tue, 26 Jul 2016 17:42:59 +0000"  >&lt;p&gt;what&apos;s left to commit before this gets closed out?&lt;/p&gt;</comment>
                            <comment id="15394180" author="rdblue" created="Tue, 26 Jul 2016 17:44:13 +0000"  >&lt;p&gt;The last patch, with the changes to the Avro spec.&lt;/p&gt;</comment>
                            <comment id="15461947" author="rdblue" created="Sun, 4 Sep 2016 00:28:36 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt;, could you have a look at the last patch I posted with the spec changes? I&apos;d like to get it into 1.8.2 since the code is. Thank you!&lt;/p&gt;</comment>
                            <comment id="15461949" author="rdblue" created="Sun, 4 Sep 2016 00:29:38 +0000"  >&lt;p&gt;I&apos;m marking this as a blocker for the 1.8.2 release because the code is committed. If we release the implementation, I think we should also include the spec changes.&lt;/p&gt;</comment>
                            <comment id="15463379" author="busbey" created="Sun, 4 Sep 2016 19:23:29 +0000"  >&lt;p&gt;+1 on &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1704&quot; title=&quot;Standardized format for encoding messages with Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1704&quot;&gt;&lt;del&gt;AVRO-1704&lt;/del&gt;&lt;/a&gt;.4.patch&lt;/p&gt;</comment>
                            <comment id="15463476" author="jira-bot" created="Sun, 4 Sep 2016 20:43:24 +0000"  >&lt;p&gt;Commit 30408a9c192c5f4eaaf42f01f0ffbfffd705aa57 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=30408a9&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=30408a9&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1704&quot; title=&quot;Standardized format for encoding messages with Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1704&quot;&gt;&lt;del&gt;AVRO-1704&lt;/del&gt;&lt;/a&gt;: Add single-record encoding spec. (Contributed by Niels Basjes)&lt;/p&gt;</comment>
                            <comment id="15463478" author="rdblue" created="Sun, 4 Sep 2016 20:43:50 +0000"  >&lt;p&gt;Thanks for reviewing!&lt;/p&gt;</comment>
                            <comment id="15463480" author="rdblue" created="Sun, 4 Sep 2016 20:45:24 +0000"  >&lt;p&gt;I committed the last patch with the spec changes, which closes out this issue. Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nielsbasjes&quot; class=&quot;user-hover&quot; rel=&quot;nielsbasjes&quot;&gt;Niels Basjes&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt;, and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dasch&quot; class=&quot;user-hover&quot; rel=&quot;dasch&quot;&gt;Daniel Schierbeck&lt;/a&gt; for making this happen!&lt;/p&gt;</comment>
                            <comment id="15572398" author="radai" created="Thu, 13 Oct 2016 16:22:57 +0000"  >&lt;p&gt;At LinkedIn we use a similar scheme for our avro payloads over kafka, but we use a 128bit hash for schema identifier.&lt;br/&gt;
Would it be possible to still make the hashing scheme changeable to make the transition easier for organizations not using 64bit schema ids?&lt;/p&gt;</comment>
                            <comment id="15572449" author="radai" created="Thu, 13 Oct 2016 16:39:24 +0000"  >&lt;p&gt;Also, since this is somewhat Kafka related, i would like to point to this kafka proposal for headers in the kafka wire format - &lt;a href=&quot;https://cwiki.apache.org/confluence/display/KAFKA/KIP-82+-+Add+Record+Headers&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/confluence/display/KAFKA/KIP-82+-+Add+Record+Headers&lt;/a&gt;&lt;br/&gt;
discussion thread is here - &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/kafka-dev/201609.mbox/%3C1474572662302.81658%40ig.com%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/kafka-dev/201609.mbox/%3C1474572662302.81658%40ig.com%3E&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15712090" author="david.chapman@mavensecurities.com" created="Thu, 1 Dec 2016 14:26:06 +0000"  >&lt;p&gt;I&apos;m curious as to why the 64 bit hash was chosen. Give that cost of calculating the fingerprint is paid when creating the serializer/deserializer not per message surely erring on the side of caution would be better? &lt;/p&gt;</comment>
                            <comment id="15712508" author="rdblue" created="Thu, 1 Dec 2016 17:14:03 +0000"  >&lt;p&gt;With a spec like this, we want to be careful about having too many things that must be implemented. I think there would have to be a very good reason to add additional hashes to the spec.&lt;/p&gt;

&lt;p&gt;If you&apos;re interested in using the Avro MessageEncoder and MessageDecoder, then that shouldn&apos;t be too difficult because the code is modular enough you can implement a decoder for your message format fairly easily.&lt;/p&gt;</comment>
                            <comment id="15712516" author="rdblue" created="Thu, 1 Dec 2016 17:17:04 +0000"  >&lt;p&gt;You mean erring on the side of caution and using a larger hash? I don&apos;t think collisions with a 64-bit fingerprint are likely enough to cause any trouble. And, while you don&apos;t calculate the fingerprint every time, you do send it in the message.&lt;/p&gt;</comment>
                            <comment id="16033034" author="jrideout" created="Thu, 1 Jun 2017 14:08:05 +0000"  >&lt;p&gt;What needs to be done to land this in 1.8.3?&lt;/p&gt;</comment>
                            <comment id="16033060" author="busbey" created="Thu, 1 Jun 2017 14:26:46 +0000"  >&lt;p&gt;The JIRA is resolved and it was listed as a blocker for 1.8.2. Is it not actually in branch-1.8?&lt;/p&gt;</comment>
                            <comment id="16033065" author="busbey" created="Thu, 1 Jun 2017 14:29:31 +0000"  >&lt;p&gt;Looks like it&apos;s in 1.8.2 to me: &lt;a href=&quot;http://avro.apache.org/docs/1.8.2/spec.html#single_object_encoding&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/docs/1.8.2/spec.html#single_object_encoding&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16033068" author="jrideout" created="Thu, 1 Jun 2017 14:30:31 +0000"  >&lt;p&gt;Hmmm ... It looks like it is in the branch-1.8. I am confused since it is NOT listed in &lt;a href=&quot;https://s.apache.org/avro-release-note-1.8.2&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://s.apache.org/avro-release-note-1.8.2&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16033078" author="busbey" created="Thu, 1 Jun 2017 14:36:28 +0000"  >&lt;p&gt;I think that&apos;s because the fix version wasn&apos;t properly set when it got closed out. I&apos;ve updated it to be 1.8.2 now, so it should be in the release notes.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12990761">AVRO-1885</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12992118">AVRO-1888</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12801910" name="AVRO-1704-2016-05-03-Unfinished.patch" size="60572" author="nielsbasjes" created="Tue, 3 May 2016 06:47:06 +0000"/>
                            <attachment id="12797945" name="AVRO-1704-20160410.patch" size="39301" author="nielsbasjes" created="Sun, 10 Apr 2016 21:54:45 +0000"/>
                            <attachment id="12819837" name="AVRO-1704.3.patch" size="3850" author="rdblue" created="Sun, 24 Jul 2016 22:50:54 +0000"/>
                            <attachment id="12819838" name="AVRO-1704.4.patch" size="3838" author="rdblue" created="Sun, 24 Jul 2016 22:56:33 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 16 Jul 2015 09:31:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 33 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2hbqn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1705] Set up CI job to test all languages using Docker</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1705</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The ASF Jenkins instance now supports Docker (&lt;a href=&quot;https://issues.apache.org/jira/browse/INFRA-10348&quot; title=&quot;please consider providing Docker on Jenkins slaves&quot; class=&quot;issue-link&quot; data-issue-key=&quot;INFRA-10348&quot;&gt;&lt;del&gt;BUILDS-25&lt;/del&gt;&lt;/a&gt;), so we could run all the tests (for all languages that Avro supports) using the Avro Dockerfile. We might also do a nightly build of the whole distribution.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12845588">AVRO-1705</key>
            <summary>Set up CI job to test all languages using Docker</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21148&amp;avatarType=issuetype">Task</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.svg">Critical</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="Fokko">Fokko Driesprong</assignee>
                                    <reporter username="tomwhite">Tom White</reporter>
                        <labels>
                            <label>starter</label>
                    </labels>
                <created>Thu, 16 Jul 2015 13:34:02 +0000</created>
                <updated>Mon, 12 Nov 2018 16:19:48 +0000</updated>
                            <resolved>Mon, 12 Nov 2018 16:09:59 +0000</resolved>
                                    <version>1.7.7</version>
                                    <fixVersion>1.9.0</fixVersion>
                                    <component>build</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="15108811" author="busbey" created="Wed, 20 Jan 2016 16:14:40 +0000"  >&lt;p&gt;note that the current nightly CI builds are done on buildbot:  &lt;a href=&quot;http://ci.apache.org/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://ci.apache.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if/when we move to jenkins we should decommission the buildbot jobs.&lt;/p&gt;</comment>
                            <comment id="15108814" author="busbey" created="Wed, 20 Jan 2016 16:14:51 +0000"  >&lt;p&gt;do we know if buildbot supports docker?&lt;/p&gt;</comment>
                            <comment id="15254119" author="rdblue" created="Fri, 22 Apr 2016 15:55:22 +0000"  >&lt;p&gt;Is this the right approach to CI?&lt;/p&gt;

&lt;p&gt;I think we should consider per-implementation runs. While it&apos;s great to be able to do checks on all of the languages easily and at one time, we don&apos;t need to waste time and resources building and testing all languages when there&apos;s a change to just one.&lt;/p&gt;

&lt;p&gt;At the same time, we should be doing more thorough testing for some implementations, like Ruby. We ran into issues last release where some Ruby versions had test failures, but Ruby has tooling built around testing packages in multiple versions we could be using (and arguably should be).&lt;/p&gt;

&lt;p&gt;What do you guys think about having multiple profiles to do better testing for each implementation?&lt;/p&gt;</comment>
                            <comment id="15254130" author="busbey" created="Fri, 22 Apr 2016 16:00:08 +0000"  >&lt;p&gt;I think that should be a different ticket that&apos;s filed as an improvement. I agree it would be a great addition, but right now I see this ticket as covering a gap of the &quot;house is on fire&quot; sort.&lt;/p&gt;</comment>
                            <comment id="15254146" author="rdblue" created="Fri, 22 Apr 2016 16:09:18 +0000"  >&lt;p&gt;Sounds reasonable to me.&lt;/p&gt;</comment>
                            <comment id="16639117" author="fokko" created="Fri, 5 Oct 2018 01:07:59 +0000"  >&lt;p&gt;I would like to move to Travis (I&apos;m open for other CI services), to run CI at every commit and PR, so we can make sure that everything is still working as it should. And as a committer we don&apos;t have to run the whole testsuite on our own machine.&lt;/p&gt;</comment>
                            <comment id="16639159" author="busbey" created="Fri, 5 Oct 2018 01:52:43 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Fokko&quot; class=&quot;user-hover&quot; rel=&quot;Fokko&quot;&gt;Fokko Driesprong&lt;/a&gt; you should start a discussion on the dev list. I really want us to use Yetus, because it&apos;ll get us more than just what our build tests and it&apos;ll go faster. Currently I know Yetus works well from ASF jenkins, and AFAIK there&apos;s no Travis support.&lt;/p&gt;</comment>
                            <comment id="16639160" author="busbey" created="Fri, 5 Oct 2018 01:53:43 +0000"  >&lt;p&gt;(for reference, the jira covering Yetus integration for CI checking of contributions is &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1887&quot; title=&quot;set up precommit checks via Apache Yetus&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1887&quot;&gt;&lt;del&gt;AVRO-1887&lt;/del&gt;&lt;/a&gt;)&lt;/p&gt;</comment>
                            <comment id="16640588" author="fokko" created="Sat, 6 Oct 2018 06:40:46 +0000"  >&lt;p&gt;We use Travis for Apache Airflow, but I&apos;m definitely not married to Travis.&lt;/p&gt;

&lt;p&gt;I have to look into Yetus. Thanks for providing the link to the PR. I&apos;ve noticed that they are using something similar for Beam: &lt;a href=&quot;https://github.com/apache/beam/pull/6598&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/beam/pull/6598&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12738800">AVRO-1578</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="13188188">AVRO-2233</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12738801">AVRO-1579</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 20 Jan 2016 16:14:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            15 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2hc67:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1706] Ensure Java and cross-implementation check on simple fingerprints</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1706</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Make sure we have MD5 and SHA256 fingerprints for normalized schemas in Java and interop tests set up&lt;/p&gt;</description>
                <environment></environment>
        <key id="12845611">AVRO-1706</key>
            <summary>Ensure Java and cross-implementation check on simple fingerprints</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="busbey">Sean Busbey</assignee>
                                    <reporter username="busbey">Sean Busbey</reporter>
                        <labels>
                            <label>starter</label>
                    </labels>
                <created>Thu, 16 Jul 2015 14:33:57 +0000</created>
                <updated>Wed, 16 Dec 2015 19:32:54 +0000</updated>
                                                                            <component>build</component>
                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                    <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12843182">AVRO-1694</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 27 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2hcbb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1707] Java serialization readers/writers in generated Java classes</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1707</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;the following static instances are declared in the generated classes:&lt;/p&gt;

&lt;p&gt;  private static final org.apache.avro.io.DatumWriter&lt;br/&gt;
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  &lt;/p&gt;


&lt;p&gt;  private static final org.apache.avro.io.DatumReader&lt;br/&gt;
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  &lt;/p&gt;

&lt;p&gt; the reaser/writer hold on to a reference to the &quot;Creator Thread&quot;:&lt;br/&gt;
&quot;private final Thread creator;&quot;&lt;/p&gt;

&lt;p&gt;which inhibits GC-ing thread locals... for this thread...&lt;/p&gt;




</description>
                <environment></environment>
        <key id="12846340">AVRO-1707</key>
            <summary>Java serialization readers/writers in generated Java classes</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="zolyfarkas">Zoltan Farkas</reporter>
                        <labels>
                    </labels>
                <created>Mon, 20 Jul 2015 19:30:58 +0000</created>
                <updated>Sun, 30 Dec 2018 04:17:16 +0000</updated>
                                            <version>1.8.0</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="14634135" author="zolyfarkas" created="Mon, 20 Jul 2015 21:48:37 +0000"  >&lt;p&gt;I propose:&lt;/p&gt;

&lt;p&gt;1) Making this reference to the creator thread a SoftReference, this way we do not hold onto this thread instance past its expiration date...&lt;br/&gt;
2) make these readers/writers which are only used for java serialization Lazy, this way users who do not use java serialization do not pay the class loading penalty to initialize this reader/writer pair...&lt;/p&gt;

&lt;p&gt;implementation:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zolyfarkas/avro/commit/762ccdc2aecd4cd8668a86562165e5babdce019b&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/zolyfarkas/avro/commit/762ccdc2aecd4cd8668a86562165e5babdce019b&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14963947" author="rdblue" created="Mon, 19 Oct 2015 19:55:19 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zolyfarkas&quot; class=&quot;user-hover&quot; rel=&quot;zolyfarkas&quot;&gt;Zoltan Farkas&lt;/a&gt;, good catch on the thread-local gc problem. I&apos;d like to get that in. I&apos;m not sure about the Lazy datum reader/writer though. It seems like two objects for each Avro class used is fairly reasonable and probably not worth the laziness. Are you seeing a problem with this in practice?&lt;/p&gt;</comment>
                            <comment id="15245015" author="zolyfarkas" created="Mon, 18 Apr 2016 00:51:17 +0000"  >&lt;p&gt;No problems with the practice if the readers are fixed to stop keeping references to a thread... (which were the cause of large memory waste in our apps)&lt;/p&gt;

&lt;p&gt;In  our use cases java serialization is not a common use case so it seemed like a waste to have these readers and writers initialized without being used... and it is so simple to make this lazy and being initialized only when needed...&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 19 Oct 2015 19:55:19 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 40 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2hgo7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1708] Memory leak with WeakIdentityHashMap?</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1708</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;WeakIdentityHashMap used in GenericDatumReader has only weak Keys, &lt;br/&gt;
it seems to grow, and values remain in map which looks like a memory leak...&lt;/p&gt;

&lt;p&gt;java WeakhashMap has Weak Entries which allows the GC to collect a entire entry, which prevents leaks...&lt;/p&gt;

&lt;p&gt;the javadoc of this class claims: &quot;Implements a combination of WeakHashMap and IdentityHashMap.&quot; which is not really the case&lt;/p&gt;</description>
                <environment></environment>
        <key id="12846669">AVRO-1708</key>
            <summary>Memory leak with WeakIdentityHashMap?</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="zolyfarkas">Zoltan Farkas</reporter>
                        <labels>
                    </labels>
                <created>Tue, 21 Jul 2015 20:38:59 +0000</created>
                <updated>Mon, 18 Apr 2016 17:02:23 +0000</updated>
                            <resolved>Mon, 18 Apr 2016 01:21:27 +0000</resolved>
                                    <version>1.8.0</version>
                                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="15245030" author="zolyfarkas" created="Mon, 18 Apr 2016 01:21:27 +0000"  >&lt;p&gt;I am not sure issue was related with WeakIdentityHashMap implementation, and more with the fact that weak references GC overhead is high..&lt;br/&gt;
In any case it would be useful to review the uses of these caches.&lt;/p&gt;</comment>
                            <comment id="15246016" author="rdblue" created="Mon, 18 Apr 2016 17:02:23 +0000"  >&lt;p&gt;We&apos;re replacing the use of weak and identity hashmaps with guava implementations. If you think this one isn&apos;t correct, let&apos;s fix it that way.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 18 Apr 2016 17:02:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 40 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2himv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
