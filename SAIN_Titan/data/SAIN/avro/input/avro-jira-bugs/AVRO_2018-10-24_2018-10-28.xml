<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:27:25 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2018-10-24+AND+created+%3C%3D+2018-10-28+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="3" total="3"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-2247] Improve Java reading performance with a new reader</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2247</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Complementary to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;, I have been working on decoding of Avro objects in Java and am suggesting a new implementation of a DatumReader that improves read performance for both generic and specific records by approximately 20% (and even more in cases of nested objects with defaults, a case I encounter a lot in practical use).&lt;/p&gt;

&lt;p&gt;Key concept is to create a detailed execution plan once at DatumReader. This execution plan contains all required defaulting/lookup values so they need not be looked up during object traversal while reading.&lt;/p&gt;

&lt;p&gt;The reader implementation can be enabled and disabled per GenericData instance. The system default is set via the system variable &quot;org.apache.avro.fastread&quot; (defaults to &quot;false&quot;).&lt;/p&gt;

&lt;p&gt;Attached a performance comparison of the existing implementation with the proposed one. Will open a pull request with respective code in a bit (not including interoperability with the optimizations of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; yet). Please let me know your opinion of whether this is worth pursuing further.&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;</description>
                <environment></environment>
        <key id="13193887">AVRO-2247</key>
            <summary>Improve Java reading performance with a new reader</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="unchuckable">Martin Jubelgas</reporter>
                        <labels>
                    </labels>
                <created>Wed, 24 Oct 2018 14:24:56 +0000</created>
                <updated>Fri, 30 Nov 2018 09:11:38 +0000</updated>
                                                            <fixVersion>1.9.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="16662357" author="githubbot" created="Wed, 24 Oct 2018 14:31:40 +0000"  >&lt;p&gt;unchuckable opened a new pull request #354: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/354&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/354&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   This is the first implementation of a proposed new reader design as described in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; that improves reading performance both for generic and specific records. Please let me know what you think. Classes could be consolidated into inner classes, but I did not want to spend too much aestetics work before getting feedback on whether this feature is feasible.&lt;/p&gt;

&lt;p&gt;   Feature can be enabled per GenericData or SpecfiicData instance of by setting system property `org.apache.avro.fastread` to `true`. Note that in order to see effects in Perf, it would be required to replace calls to `new GenericDatumReader( schema )` with `GenericData.get().createDatumReader( schema )` (this change is not included yet).&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16678347" author="githubbot" created="Wed, 7 Nov 2018 15:02:02 +0000"  >&lt;p&gt;Fokko commented on issue #354: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/354#issuecomment-436652418&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/354#issuecomment-436652418&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Can you rebase and fix the merge conflict?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16678735" author="githubbot" created="Wed, 7 Nov 2018 20:25:35 +0000"  >&lt;p&gt;unchuckable commented on issue #354: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/354#issuecomment-436765147&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/354#issuecomment-436765147&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Rebased as requested, and added small change to Perf.java to use `GenericData.get().createDatumReader( schema )` instead of `new GenericDatumReader( schema )`.&lt;br/&gt;
   Also, using `WeakIdentityHashMap` instead of `WeakHashMap` for schema lookups for additional speedup.&lt;/p&gt;

&lt;p&gt;   As noted, am curious for any feedback and willing to work on implementation and style details. Just need to know if this is something worth pursuing.&lt;/p&gt;

&lt;p&gt;   With current changes, I get the following Perf.java comparison:&lt;/p&gt;

&lt;p&gt;   test name | time (fast read disabled) | time (fast read enabled)&lt;br/&gt;
   ---&lt;del&gt;|&lt;/del&gt;---&lt;del&gt;|&lt;/del&gt;---&lt;br/&gt;
   FooBarSpecificRecordTestRead | 5534 ms |   3115 ms&lt;br/&gt;
   GenericRead | 4711 ms |3422 ms&lt;br/&gt;
   GenericStringsRead | 4902 ms |   3695 ms&lt;br/&gt;
   GenericNested_Read | 7190 ms |  4961 ms&lt;br/&gt;
   GenericNestedFake_Read | 2581 ms |   2461 ms&lt;br/&gt;
   GenericWithDefault_Read | 8400 ms |  3746 ms&lt;br/&gt;
   GenericWithOutOfOrder_Read | 4627 ms |   3549 ms&lt;br/&gt;
   GenericWithPromotion_Read | 4991 ms |   3673 ms&lt;br/&gt;
   GenericOneTimeDecoderUse_Read | 4618 ms |   3496 ms&lt;br/&gt;
   GenericOneTimeReaderUse_Read | 7035 ms |   4693 ms&lt;br/&gt;
   GenericOneTimeUse_Read  | 6965 ms |   4721 ms&lt;/p&gt;





&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16678762" author="githubbot" created="Wed, 7 Nov 2018 20:55:22 +0000"  >&lt;p&gt;Fokko commented on issue #354: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/354#issuecomment-436773869&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/354#issuecomment-436773869&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Wow, that is an incredible speedup. Just curious, why implement a completely new reader, instead of optimizing the existing ones? Would be nice to run the speed tests every time, to avoid performance regression.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16678839" author="githubbot" created="Wed, 7 Nov 2018 21:57:14 +0000"  >&lt;p&gt;cutting commented on issue #354: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/354#issuecomment-436792455&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/354#issuecomment-436792455&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I don&apos;t see where ExcecutionSteps are created.  Is some of the code missing from the patch?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16678879" author="githubbot" created="Wed, 7 Nov 2018 22:24:57 +0000"  >&lt;p&gt;unchuckable commented on issue #354: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/354#issuecomment-436800295&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/354#issuecomment-436800295&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @Fokko - Actually, reason was twofold: For one, I was looking at the code generation of Raymie for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; and was considering working up a concept to do on-the-fly bytecode generation for deserialization. And coming up with something that creates an execution plan was kinda the natural first step for that. I&apos;d really like to extend that in a way that makes the ExecutionSteps generate inlined bytecode at a later point on the fly, so they JVM can optimize even more.  And on the other hand, I tried to understand the ResolvingGrammarGenerator and had a hard time with it, so I tried to build something that felt easier for me, and was kinda surprised with the results. I&apos;m well aware it would be preferable to improve on what&apos;s already there, but I felt that the one-stage &quot;execution plan&quot; approach was too different from the two-stage &quot;DatumReader and ResolvingDecoder&quot; approach. I&apos;m happy tho even if this PR only serves as inspiration for other changes, and am willing to assist in getting things done another way, too.&lt;/p&gt;

&lt;p&gt;   @cutting - The ExecutionSteps are created in `FastReader.initializeRecordReader(...)`.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16681607" author="githubbot" created="Fri, 9 Nov 2018 15:41:59 +0000"  >&lt;p&gt;rstata commented on issue #354: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/354#issuecomment-437398604&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/354#issuecomment-437398604&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I&apos;ve been meaning to comment on this for a while.  Looking at your code quickly, I wasn&apos;t convinced that it worked for recursive records (and maybe not even for nested records).  Also, the solution as posted re-implements schema resolution.  The schema-resolution code is subjected to a large number of regression tests that came about because the resolution logic is subtle in places.  A re-implementation of that logic should subject itself to that test suite, which yours does not.&lt;/p&gt;

&lt;p&gt;   Inspired by both your JIRA (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt;) and my own thoughts about further improving performance of reading with resolution, I have refactored the schema-resolution logic away from the resolving-grammar generation logic.  I have published this in the branch &lt;span class=&quot;error&quot;&gt;&amp;#91;`&amp;#39;refactor-resolving-2018-11-09`&amp;#93;&lt;/span&gt;(&lt;a href=&quot;https://github.com/rstata-projects/avro/tree/refactor-resolving-2018-11-09&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/rstata-projects/avro/tree/refactor-resolving-2018-11-09&lt;/a&gt;) of my Avro fork.  This code is &quot;bug for bug&quot; compatible with Avro&apos;s existing schema resolution (e.g., it implements the funky &quot;best match&quot; algorithm currently used for unions), and it passes the full schema-resolution regression suite.&lt;/p&gt;

&lt;p&gt;   You might want to look to see if this would be a good foundation for implementing your improvements.  Start at the new &lt;span class=&quot;error&quot;&gt;&amp;#91;Resolver&amp;#93;&lt;/span&gt;(&lt;a href=&quot;https://github.com/rstata-projects/avro/blob/refactor-resolving-2018-11-09/lang/java/avro/src/main/java/org/apache/avro/Resolver.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/rstata-projects/avro/blob/refactor-resolving-2018-11-09/lang/java/avro/src/main/java/org/apache/avro/Resolver.java&lt;/a&gt;) class, and also look to see how ResolvingGrammarGenerator uses the output of Resolver.  However, be warned that I intend to &quot;re-write history&quot; on this code pretty severely before proposing it as an actual improvement, so you might want to wait about a week before actually depending upon this code.&lt;/p&gt;

&lt;p&gt;   Over the last few weeks I&apos;ve been working on the performance-testing suite.  What I&apos;ve found is that the variance between runs of this suite varies &lt;em&gt;significantly:&lt;/em&gt; in places, over 30%!  Across the board, I see variance of over 5% between runs for over 40% of the test cases.  With this much variance, it&apos;s impossible to say if a proposed performance improvement is really an improvement (and impossible to tell whether or not an attempt to improve one set of performance cases has degraded performance elsewhere).&lt;/p&gt;

&lt;p&gt;   By the end of next week I should have a proposed set of changes to the performance benchmark, plus a &quot;cookbook&quot; for using it (on AWS), which minimizes variance between runs of the suite.  With that in place, I will return to the `refactor-resolving` work and submit it along with testing that shows it doesn&apos;t degrade performance (and, in fact, improves it in places).&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16682085" author="githubbot" created="Fri, 9 Nov 2018 23:56:07 +0000"  >&lt;p&gt;unchuckable commented on issue #354: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/354#issuecomment-437531886&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/354#issuecomment-437531886&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thanks for your feedback, raymie. Hadn&apos;t expected to receive that much input, but I&apos;ll try to address your points:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I moved the feature switch from `GenericData.createDatumReader` to `GenericDatumReader.read`. (even tho I don&apos;t quite get why the factory method isn&apos;t the default way to instantiate a new reader, can someone help me understand?). This way, the newly written code is subject to ALL unit tests of the project. (Admittedly, I had to disable the `ReusingArrayReader` due to some problems there, will address that later on if desired). With little adjustments (most of which having been fixing the Exception types and messages), all tests seem to pass. If there&apos;s further test frameworks to use, please do let me know.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I am well aware of the deviations in performance measurements. That&apos;s why everyone should take `Perf.java` results with a grain of salt. Most tests there are VERY sensitive on even small changes and have a too large spread. Actually, for performance measurement, a module that makes use of JMH or similar would be preferable (ideally one that not only measures time, but also allocation activity). Also, structures of different depth and diversity should be checked.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;It&apos;s nice to see you having pursued similar ideas with your branch. I think the main difference is that I am trying to do all verifications ONCE at Reader creation, while your take still makes use of the existing `DatumReader`, which requires some avoidable lookups at read time (things like `SpecificData.getClass()`, etc ) and `ResolvingDecoder`, which still relies on parser information for nearly every read operation. My approach is *&lt;b&gt;replacing&lt;/b&gt;* usage of `ResolvingDecoder` and `DatumReader`, using a different approach that makes all necessary decisions only once where possible, storing results in instance variables instead of maps (hoping to affect performance positively that way, see note above). Downside of my approach in its current form is that it only works for Generic and Specific records. Have not looked into what needs to be changed in order to use the other kinds of data (reflective, protobuf, thrift), but I consider generic and specific records to be the most important use case.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Sadly, the mechanism I present does not take advantage of the generated reader code of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;, but offers performance benefits in a similar extent and works for all kinds of generic and specific records&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The big benefit of the current approach is the strong speedup when dealing with default values. Maybe a huge part of the gain could be achieved with a smaller change, I do agree.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   I would be very grateful for some feedback on whether you consider the current approach I present worth spending more time on or whether there are more/other things that would keep it from being considered beneficial for the project.&lt;/p&gt;


&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16682093" author="githubbot" created="Sat, 10 Nov 2018 00:09:21 +0000"  >&lt;p&gt;unchuckable edited a comment on issue #354: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/354#issuecomment-437531886&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/354#issuecomment-437531886&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thanks for your feedback, raymie. Hadn&apos;t expected to receive that much input, but I&apos;ll try to address your points:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I moved the feature switch from `GenericData.createDatumReader` to `GenericDatumReader.read`. (even tho I don&apos;t quite get why the factory method isn&apos;t the default way to instantiate a new reader, can someone help me understand?). This way, the newly written code is subject to ALL unit tests of the project. (Admittedly, I had to disable the `ReusingArrayReader` due to some problems there, will address that later on if desired). With little adjustments (most of which having been fixing the Exception types and messages), all tests seem to pass. If there&apos;s further test frameworks to use, please do let me know.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I am well aware of the deviations in performance measurements. That&apos;s why everyone should take `Perf.java` results with a grain of salt. Most tests there are VERY sensitive on even small changes and have a too large spread. Actually, for performance measurement, a module that makes use of JMH or similar would be preferable (ideally one that not only measures time, but also allocation activity). Also, structures of different depth and diversity should be checked.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;It&apos;s nice to see you having pursued similar ideas with your branch. I think the main difference is that I am trying to do all verifications ONCE at Reader creation, while your take still makes use of the existing `DatumReader`, which requires some avoidable lookups at read time (things like `SpecificData.getClass()`, etc ) and `ResolvingDecoder`, which still relies on parser information for nearly every read operation. My approach is *&lt;b&gt;replacing&lt;/b&gt;* usage of `ResolvingDecoder` and `DatumReader`, using a different approach that makes all necessary decisions only once where possible, storing results in instance variables instead of maps (hoping to affect performance positively that way, see note above). Downside of my approach in its current form is that it only works for Generic and Specific records. Have not looked into what needs to be changed in order to use the other kinds of data (reflective, protobuf, thrift), but I consider generic and specific records to be the most important use case.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Sadly, the mechanism I present does not take advantage of the generated reader code of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;, but offers performance benefits in a similar extent (depending on actual data structures) and works for all kinds of generic and specific records&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The big benefit of the current approach is the strong speedup when dealing with default values. Maybe a huge part of the gain could be achieved with a smaller change, I do agree.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   I would be very grateful for some feedback on whether you consider the current approach I present worth spending more time on or whether there are more/other things that would keep it from being considered beneficial for the project.&lt;/p&gt;


&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16682263" author="githubbot" created="Sat, 10 Nov 2018 07:52:19 +0000"  >&lt;p&gt;unchuckable commented on issue #354: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/354#issuecomment-437565988&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/354#issuecomment-437565988&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Okay, just ran across a major showstopper with this approach when it comes to using default values (and subsequent modifications of the latter).&lt;/p&gt;

&lt;p&gt;   Also, the discussion above and the following study of some of the code Raymie pointed me to have helped me understand some concepts that I somehow couldn&apos;t get my head wrapped around before.&lt;br/&gt;
   I&apos;ll try to evaluate how I can fix the problem, or how I might be able to incorporate some ideas into existing code with less intrusive action &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;   Thanks for everyone who took the time to look over my submission. I&apos;ve learned aplenty from it already.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16682264" author="githubbot" created="Sat, 10 Nov 2018 07:52:19 +0000"  >&lt;p&gt;unchuckable closed pull request #354: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/354&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/354&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java b/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java&lt;br/&gt;
index ba538d2fb..093d01154 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java&lt;br/&gt;
@@ -49,6 +49,7 @@&lt;br/&gt;
 import org.apache.avro.io.BinaryEncoder;&lt;br/&gt;
 import org.apache.avro.io.DecoderFactory;&lt;br/&gt;
 import org.apache.avro.io.EncoderFactory;&lt;br/&gt;
+import org.apache.avro.io.fastreader.FastReader;&lt;br/&gt;
 import org.apache.avro.io.DatumReader;&lt;br/&gt;
 import org.apache.avro.io.DatumWriter;&lt;br/&gt;
 import org.apache.avro.util.Utf8;&lt;br/&gt;
@@ -70,6 +71,9 @@&lt;br/&gt;
   public static final String STRING_PROP = &quot;avro.java.string&quot;;&lt;br/&gt;
   protected static final String STRING_TYPE_STRING = &quot;String&quot;;&lt;/p&gt;

&lt;p&gt;+  private boolean fastReaderEnabled = Boolean.parseBoolean( System.getProperty(&quot;org.apache.avro.fastread&quot;, &quot;false&quot; ) );&lt;br/&gt;
+  private ThreadLocal&amp;lt;FastReader&amp;gt; fastReader = ThreadLocal.withInitial( ()-&amp;gt;new FastReader( this ) );&lt;br/&gt;
+&lt;br/&gt;
   private final ClassLoader classLoader;&lt;/p&gt;

&lt;p&gt;   /** Set the Java type to be used when reading this schema.  Meaningful only&lt;br/&gt;
@@ -99,6 +103,18 @@ public GenericData(ClassLoader classLoader) {&lt;br/&gt;
   /** Return the class loader that&apos;s used (by subclasses). */&lt;br/&gt;
   public ClassLoader getClassLoader() &lt;/p&gt;
{ return classLoader; }

&lt;p&gt;+  public void setFastReaderEnabled( boolean enabled ) &lt;/p&gt;
{
+    this.fastReaderEnabled = enabled;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public boolean isFastReaderEnabled() &lt;/p&gt;
{
+    return fastReaderEnabled;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public FastReader getFastReader() &lt;/p&gt;
{
+    return this.fastReader.get();
+  }
&lt;p&gt;+&lt;br/&gt;
   private Map&amp;lt;String, Conversion&amp;lt;?&amp;gt;&amp;gt; conversions =&lt;br/&gt;
       new HashMap&amp;lt;&amp;gt;();&lt;/p&gt;

&lt;p&gt;@@ -420,12 +436,12 @@ public int compareTo(GenericEnumSymbol that) {&lt;/p&gt;

&lt;p&gt;   /** Returns a &lt;/p&gt;
{@link DatumReader} for this kind of data. */&lt;br/&gt;
   public DatumReader createDatumReader(Schema schema) {
-    return new GenericDatumReader(schema, schema, this);
+    return createDatumReader( schema, schema );
   }&lt;br/&gt;
 &lt;br/&gt;
   /** Returns a {@link DatumReader}
&lt;p&gt; for this kind of data. */&lt;br/&gt;
   public DatumReader createDatumReader(Schema writer, Schema reader) &lt;/p&gt;
{
-    return new GenericDatumReader(writer, reader, this);
+  return new GenericDatumReader( writer, reader, this );
   }

&lt;p&gt;   /** Returns a &lt;/p&gt;
{@link DatumWriter}
&lt;p&gt; for this kind of data. */&lt;br/&gt;
@@ -1097,7 +1113,7 @@ private Object deepCopyRaw(Schema schema, Object value) {&lt;br/&gt;
         Map&amp;lt;CharSequence, Object&amp;gt; mapCopy =&lt;br/&gt;
           new HashMap&amp;lt;&amp;gt;(mapValue.size());&lt;br/&gt;
         for (Map.Entry&amp;lt;CharSequence, Object&amp;gt; entry : mapValue.entrySet()) &lt;/p&gt;
{
-          mapCopy.put((CharSequence)(deepCopy(STRINGS, entry.getKey())),
+          mapCopy.put((deepCopy(STRINGS, entry.getKey())),
               deepCopy(schema.getValueType(), entry.getValue()));
         }
&lt;p&gt;         return mapCopy;&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java b/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java&lt;br/&gt;
index 9b7b04cd9..0a513e411 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java&lt;br/&gt;
@@ -18,14 +18,13 @@&lt;br/&gt;
 package org.apache.avro.generic;&lt;/p&gt;

&lt;p&gt; import java.io.IOException;&lt;br/&gt;
+import java.lang.reflect.Constructor;&lt;br/&gt;
+import java.lang.reflect.InvocationTargetException;&lt;br/&gt;
+import java.nio.ByteBuffer;&lt;br/&gt;
+import java.util.Collection;&lt;br/&gt;
 import java.util.HashMap;&lt;br/&gt;
 import java.util.IdentityHashMap;&lt;br/&gt;
 import java.util.Map;&lt;br/&gt;
-import java.util.Collection;&lt;br/&gt;
-import java.nio.ByteBuffer;&lt;br/&gt;
-import java.lang.reflect.Constructor;&lt;br/&gt;
-import java.lang.reflect.InvocationTargetException;&lt;br/&gt;
-&lt;br/&gt;
 import org.apache.avro.AvroRuntimeException;&lt;br/&gt;
 import org.apache.avro.Conversion;&lt;br/&gt;
 import org.apache.avro.Conversions;&lt;br/&gt;
@@ -36,6 +35,7 @@&lt;br/&gt;
 import org.apache.avro.io.Decoder;&lt;br/&gt;
 import org.apache.avro.io.DecoderFactory;&lt;br/&gt;
 import org.apache.avro.io.ResolvingDecoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.FastReader;&lt;br/&gt;
 import org.apache.avro.util.Utf8;&lt;br/&gt;
 import org.apache.avro.util.WeakIdentityHashMap;&lt;/p&gt;

&lt;p&gt;@@ -45,6 +45,9 @@&lt;br/&gt;
   private Schema actual;&lt;br/&gt;
   private Schema expected;&lt;/p&gt;

&lt;p&gt;+  private DatumReader&amp;lt;D&amp;gt; fastDatumReader = null;&lt;br/&gt;
+  private FastReader     creatorFastReader = null;&lt;br/&gt;
+&lt;br/&gt;
   private ResolvingDecoder creatorResolver = null;&lt;br/&gt;
   private final Thread creator;&lt;/p&gt;

&lt;p&gt;@@ -86,6 +89,7 @@ public void setSchema(Schema writer) &lt;/p&gt;
{
       expected = actual;
     }
&lt;p&gt;     creatorResolver = null;&lt;br/&gt;
+    fastDatumReader = null;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   /** Get the reader&apos;s schema. */&lt;br/&gt;
@@ -95,11 +99,13 @@ public void setSchema(Schema writer) {&lt;br/&gt;
   public void setExpected(Schema reader) &lt;/p&gt;
{
     this.expected = reader;
     creatorResolver = null;
+    fastDatumReader = null;
   }

&lt;p&gt;   private static final ThreadLocal&amp;lt;Map&amp;lt;Schema,Map&amp;lt;Schema,ResolvingDecoder&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
     RESOLVER_CACHE =&lt;br/&gt;
     new ThreadLocal&amp;lt;Map&amp;lt;Schema,Map&amp;lt;Schema,ResolvingDecoder&amp;gt;&amp;gt;&amp;gt;() {&lt;br/&gt;
+    @Override&lt;br/&gt;
     protected Map&amp;lt;Schema,Map&amp;lt;Schema,ResolvingDecoder&amp;gt;&amp;gt; initialValue() &lt;/p&gt;
{
       return new WeakIdentityHashMap&amp;lt;&amp;gt;();
     }
&lt;p&gt;@@ -140,11 +146,37 @@ protected final ResolvingDecoder getResolver(Schema actual, Schema expected)&lt;br/&gt;
   @Override&lt;br/&gt;
   @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
   public D read(D reuse, Decoder in) throws IOException {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ResolvingDecoder resolver = getResolver(actual, expected);&lt;/li&gt;
	&lt;li&gt;resolver.configure(in);&lt;/li&gt;
	&lt;li&gt;D result = (D) read(reuse, expected, resolver);&lt;/li&gt;
	&lt;li&gt;resolver.drain();&lt;/li&gt;
	&lt;li&gt;return result;&lt;br/&gt;
+    if ( data.isFastReaderEnabled() ) 
{
+      return (D) getFastDatumReader().read(reuse, in);
+    }
&lt;p&gt;+    else &lt;/p&gt;
{
+      ResolvingDecoder resolver = getResolver(actual, expected);
+      resolver.configure(in);
+      D result = (D) read(reuse, expected, resolver);
+      resolver.drain();
+      return result;
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+  private DatumReader&amp;lt;D&amp;gt; getFastDatumReader() &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    if ( fastDatumReader == null ) {
+      fastDatumReader = getFastReader().createDatumReader( actual, expected );
+    }+    return fastDatumReader;+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+  private FastReader getFastReader() &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    Thread currThread = Thread.currentThread();+    if (currThread == creator &amp;amp;&amp;amp; creatorFastReader != null) {
+      return creatorFastReader;
+    }++    FastReader reader = data.getFastReader();+    if ( currThread == creator ) {
+      this.creatorFastReader = reader;
+    }+    return reader;   }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   /** Called to read data.*/&lt;br/&gt;
@@ -536,7 +568,7 @@ public static void skip(Schema schema, Decoder in) throws IOException {&lt;br/&gt;
       }&lt;br/&gt;
       break;&lt;br/&gt;
     case UNION:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;skip(schema.getTypes().get((int)in.readIndex()), in);&lt;br/&gt;
+      skip(schema.getTypes().get(in.readIndex()), in);&lt;br/&gt;
       break;&lt;br/&gt;
     case FIXED:&lt;br/&gt;
       in.skipFixed(schema.getFixedSize());&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/FastReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/FastReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..1dd1ab6a4
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/FastReader.java&lt;br/&gt;
@@ -0,0 +1,609 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader;&lt;br/&gt;
+&lt;br/&gt;
+import java.util.ArrayList;&lt;br/&gt;
+import java.util.Collection;&lt;br/&gt;
+import java.util.Collections;&lt;br/&gt;
+import java.util.List;&lt;br/&gt;
+import java.util.Map;&lt;br/&gt;
+import java.util.Optional;&lt;br/&gt;
+import java.util.function.Function;&lt;br/&gt;
+import java.util.function.IntFunction;&lt;br/&gt;
+import java.util.function.Supplier;&lt;br/&gt;
+import java.util.stream.Collectors;&lt;br/&gt;
+import org.apache.avro.AvroMissingFieldException;&lt;br/&gt;
+import org.apache.avro.Conversion;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.Schema.Type;&lt;br/&gt;
+import org.apache.avro.generic.GenericData;&lt;br/&gt;
+import org.apache.avro.generic.IndexedRecord;&lt;br/&gt;
+import org.apache.avro.io.DatumReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.ArrayReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.BooleanReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.BytesReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.DoubleReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.EnumReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FailureReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FieldReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FixedReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FloatReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.IntegerReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.LongReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.MapReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.NullReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.ReconfigurableReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.RecordReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.RecordReader.Stage;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.StringReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.UnionReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.Utf8Reader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.conversion.BytesConversionReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.conversion.FixedConversionReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.conversion.GenericConversionReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.conversion.IntegerConversionReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.conversion.LongConversionReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.conversion.StringConversionReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.promotion.DoublePromotionReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.promotion.FloatPromotionReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.promotion.LongPromotionReader;&lt;br/&gt;
+import org.apache.avro.io.fastreader.steps.ExecutionStep;&lt;br/&gt;
+import org.apache.avro.io.fastreader.steps.FieldDefaulter;&lt;br/&gt;
+import org.apache.avro.io.fastreader.steps.FieldSetter;&lt;br/&gt;
+import org.apache.avro.io.fastreader.steps.FieldSkipper;&lt;br/&gt;
+import org.apache.avro.io.fastreader.utils.ReflectionUtils;&lt;br/&gt;
+import org.apache.avro.specific.SpecificData;&lt;br/&gt;
+import org.apache.avro.specific.SpecificData.SchemaConstructable;&lt;br/&gt;
+import org.apache.avro.specific.SpecificRecordBase;&lt;br/&gt;
+import org.apache.avro.util.WeakIdentityHashMap;&lt;br/&gt;
+&lt;br/&gt;
+public class FastReader {&lt;br/&gt;
+&lt;br/&gt;
+  private static final ExecutionStep[] EMPTY_EXECUTION_STEPS = new ExecutionStep&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Generic/SpecificData instance that contains basic functionalities like instantiation of objects&lt;br/&gt;
+   */&lt;br/&gt;
+  private final GenericData data;&lt;br/&gt;
+&lt;br/&gt;
+  /** first schema is reader schema, second is writer schema */&lt;br/&gt;
+  private final Map&amp;lt;Schema, Map&amp;lt;Schema, RecordReader&amp;lt;?&amp;gt;&amp;gt;&amp;gt; readerCache = new WeakIdentityHashMap&amp;lt;&amp;gt;();&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * if set to &amp;lt;b&amp;gt;true&amp;lt;/b&amp;gt;, fail in reader/writer creation when an illegal conversion state exists,&lt;br/&gt;
+   * if set to &amp;lt;b&amp;gt;false&amp;lt;/b&amp;gt;, fail when such a state is encountered during serialization or&lt;br/&gt;
+   * deserialization (in many cases, it might not even occur, e.g. in unions or enums)&lt;br/&gt;
+   */&lt;br/&gt;
+  private boolean failFast = false;&lt;br/&gt;
+&lt;br/&gt;
+  private boolean keyClassEnabled = true;&lt;br/&gt;
+&lt;br/&gt;
+  private boolean classPropEnabled = true;&lt;br/&gt;
+&lt;br/&gt;
+  public static FastReader get() 
{
+    return new FastReader(GenericData.get());
+  }
&lt;p&gt;+&lt;br/&gt;
+  public static FastReader getSpecific() &lt;/p&gt;
{
+    return new FastReader(SpecificData.get());
+  }
&lt;p&gt;+&lt;br/&gt;
+  public FastReader(GenericData parentData) &lt;/p&gt;
{
+    this.data = parentData;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public FastReader withFailFast(boolean failFast) &lt;/p&gt;
{
+    this.failFast = failFast;
+    return this;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public boolean isFailingFast() &lt;/p&gt;
{
+    return this.failFast;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public FastReader withKeyClassEnabled(boolean enabled) &lt;/p&gt;
{
+    this.keyClassEnabled = enabled;
+    return this;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public boolean isKeyClassEnabled() &lt;/p&gt;
{
+    return this.keyClassEnabled;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public FastReader withClassPropEnabled(boolean enabled) &lt;/p&gt;
{
+    this.classPropEnabled = enabled;
+    return this;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public boolean isClassPropEnabled() &lt;/p&gt;
{
+    return this.classPropEnabled;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public &amp;lt;D&amp;gt; DatumReader&amp;lt;D&amp;gt; createReconfigurableDatumReader(Schema writerSchema,&lt;br/&gt;
+      Schema readerSchema) &lt;/p&gt;
{
+    return new ReconfigurableReader&amp;lt;&amp;gt;(this, readerSchema, writerSchema);
+  }
&lt;p&gt;+&lt;br/&gt;
+  @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+  public &amp;lt;D&amp;gt; DatumReader&amp;lt;D&amp;gt; createDatumReader(Schema writerSchema, Schema readerSchema) &lt;/p&gt;
{
+    return (DatumReader&amp;lt;D&amp;gt;) getReaderFor(readerSchema, writerSchema);
+  }
&lt;p&gt;+&lt;br/&gt;
+  public &amp;lt;D extends IndexedRecord&amp;gt; RecordReader&amp;lt;D&amp;gt; createRecordReader(Schema readerSchema,&lt;br/&gt;
+      Schema writerSchema) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    // record readers are created in a two-step process, first registering it, then initializing it,+    // to prevent endless loops on recursive types+    RecordReader&amp;lt;D&amp;gt; recordReader = getRecordReaderFromCache(readerSchema, writerSchema);++    // only need to initialize once+    if (recordReader.getInitializationStage() == Stage.NEW) {
+      initializeRecordReader(recordReader, readerSchema, writerSchema);
+    }++    return recordReader;+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+  private &amp;lt;D extends IndexedRecord&amp;gt; RecordReader&amp;lt;D&amp;gt; initializeRecordReader(&lt;br/&gt;
+      RecordReader&amp;lt;D&amp;gt; recordReader, Schema readerSchema, Schema writerSchema) {&lt;br/&gt;
+    try {&lt;br/&gt;
+      recordReader.startInitialization();&lt;br/&gt;
+&lt;br/&gt;
+      // generate supplier for the new object instances&lt;br/&gt;
+      Supplier&amp;lt;? extends IndexedRecord&amp;gt; supplier = getObjectSupplier(readerSchema);&lt;br/&gt;
+      IntFunction&amp;lt;Conversion&amp;lt;?&amp;gt;&amp;gt; conversionSupplier = getConversionSupplier(supplier.get());&lt;br/&gt;
+&lt;br/&gt;
+      ExecutionStep[] readSteps = new ExecutionStep&lt;span class=&quot;error&quot;&gt;&amp;#91;writerSchema.getFields().size()&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+      List&amp;lt;ExecutionStep&amp;gt; defaultingSteps = new ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;
+&lt;br/&gt;
+      // populate read steps with steps that read data that occurs in readerSchema&lt;br/&gt;
+      for (Schema.Field readerField : readerSchema.getFields()) {&lt;br/&gt;
+        Schema.Field writerField = findSourceField(readerField, writerSchema);&lt;br/&gt;
+        if (writerField != null) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+          // fields of reader schema that are found in writer schema will be read via FieldReader+          // instances+          Conversion&amp;lt;?&amp;gt; conversion = conversionSupplier.apply(readerField.pos());+          FieldReader&amp;lt;?&amp;gt; fieldReader =+              getReaderFor(readerField.schema(), writerField.schema(), conversion);+          int writerPos = writerField.pos();+          if (readSteps[writerPos] != null) {
+            throw new IllegalStateException(
+                &quot;Schemas not compatible. Two uses of writer field &quot; + writerField.name());
+          }+          readSteps[writerPos] = new FieldSetter&amp;lt;&amp;gt;(readerField.pos(), fieldReader);+        }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt; else &lt;/p&gt;
{
+          defaultingSteps.add(getDefaultingStep(readerSchema, writerSchema, readerField));
+        }
&lt;p&gt;+      }&lt;br/&gt;
+&lt;br/&gt;
+      // fields of writer schema that are not being red from will be skipped&lt;br/&gt;
+      for (int i = 0; i &amp;lt; readSteps.length; i++) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+        if (readSteps[i] == null) {
+          Schema fieldSchema = writerSchema.getFields().get(i).schema();
+          readSteps[i] = new FieldSkipper(getReaderFor(fieldSchema, fieldSchema));
+        }+      }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+      ExecutionStep[] defaultingStepsArray = defaultingSteps.toArray(EMPTY_EXECUTION_STEPS);&lt;br/&gt;
+&lt;br/&gt;
+      // store execution plan in RecordReader&lt;br/&gt;
+      recordReader.finishInitialization(readSteps, defaultingStepsArray, supplier);&lt;br/&gt;
+&lt;br/&gt;
+      return recordReader;&lt;br/&gt;
+    } catch (final Exception e) &lt;/p&gt;
{
+      // if an exception is set, don&apos;t leave record reader in &apos;initializing&apos; state.
+      recordReader.reset();
+      throw e;
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+  private ExecutionStep getDefaultingStep(Schema readerSchema, Schema writerSchema, Schema.Field field) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    try {
+      Object defaultValue = data.getDefaultValue(field);
+      return new FieldDefaulter(field.pos(), defaultValue);
+    } catch (AvroMissingFieldException e) {
+      return getFailureReaderOrFail(&quot;Found &quot; + writerSchema.getFullName() + &quot;, expecting &quot; + readerSchema.getFullName() + &quot;, missing required field &quot; + field.name() );
+    }+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+  private IntFunction&amp;lt;Conversion&amp;lt;?&amp;gt;&amp;gt; getConversionSupplier(IndexedRecord record) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    if (record instanceof SpecificRecordBase) {
+      return ((SpecificRecordBase) record)::getConversion;
+    } else {
+      return index -&amp;gt; null;
+    }+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+  @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+  private &amp;lt;D extends IndexedRecord&amp;gt; RecordReader&amp;lt;D&amp;gt; getRecordReaderFromCache(Schema readerSchema,&lt;br/&gt;
+      Schema writerSchema) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    synchronized ( readerCache ) {
+      Map&amp;lt;Schema, RecordReader&amp;lt;?&amp;gt;&amp;gt; writerMap =
+        readerCache.computeIfAbsent(readerSchema, k -&amp;gt; new WeakIdentityHashMap&amp;lt;&amp;gt;());
+      return (RecordReader&amp;lt;D&amp;gt;) writerMap.computeIfAbsent(writerSchema, k -&amp;gt; new RecordReader&amp;lt;&amp;gt;());
+    }+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+  @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+  private Supplier&amp;lt;? extends IndexedRecord&amp;gt; getObjectSupplier(Schema readerSchema) {&lt;br/&gt;
+    final Object object = data.newRecord(null, readerSchema);&lt;br/&gt;
+    final Class&amp;lt;?&amp;gt; clazz = object.getClass();&lt;br/&gt;
+&lt;br/&gt;
+    if (IndexedRecord.class.isAssignableFrom(clazz)) {&lt;br/&gt;
+      Supplier&amp;lt;IndexedRecord&amp;gt; supplier;&lt;br/&gt;
+&lt;br/&gt;
+      if (SchemaConstructable.class.isAssignableFrom(clazz)) &lt;/p&gt;
{
+        supplier = ReflectionUtils.getOneArgConstructorAsSupplier((Class&amp;lt;IndexedRecord&amp;gt;) clazz,
+            Schema.class, readerSchema);
+      }
&lt;p&gt; else &lt;/p&gt;
{
+        supplier = ReflectionUtils.getConstructorAsSupplier((Class&amp;lt;IndexedRecord&amp;gt;) clazz);
+      }
&lt;p&gt;+&lt;br/&gt;
+      if (supplier != null) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+        // test supplier and check for schema match with created class+        // (otherwise, if the SpecificRecord has a different schema, BAD things will happen)+        IndexedRecord sampleRecord = supplier.get();+        if (sampleRecord.getSchema().equals(readerSchema)) {
+          return supplier;
+        }+      }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+    }&lt;br/&gt;
+&lt;br/&gt;
+    return () -&amp;gt; new GenericData.Record(readerSchema);&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt; getReaderFor(Schema readerSchema, Schema writerSchema) &lt;/p&gt;
{
+    return getReaderFor(readerSchema, writerSchema, null);
+  }
&lt;p&gt;+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt; getReaderFor(Schema readerSchema, Schema writerSchema,&lt;br/&gt;
+      Conversion&amp;lt;?&amp;gt; explicitConversion) &lt;/p&gt;
{
+    final FieldReader&amp;lt;?&amp;gt; baseReader = getReaderForBaseType(readerSchema, writerSchema);
+    return applyConversions(readerSchema, baseReader, explicitConversion);
+  }
&lt;p&gt;+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt; applyConversions(Schema readerSchema, FieldReader&amp;lt;?&amp;gt; reader,&lt;br/&gt;
+      Conversion&amp;lt;?&amp;gt; explicitConversion) {&lt;br/&gt;
+    Conversion&amp;lt;?&amp;gt; conversion = explicitConversion;&lt;br/&gt;
+&lt;br/&gt;
+    if (conversion == null) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+      if (readerSchema.getLogicalType() == null) {
+        return reader;
+      }++      conversion = data.getConversionFor(readerSchema.getLogicalType());+    }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+    if (conversion == null) &lt;/p&gt;
{
+      return reader;
+    }
&lt;p&gt;+&lt;br/&gt;
+    switch (readerSchema.getType()) &lt;/p&gt;
{
+      case LONG:
+        return new LongConversionReader&amp;lt;&amp;gt;(reader, conversion, readerSchema);
+      case INT:
+        return new IntegerConversionReader&amp;lt;&amp;gt;(reader, conversion, readerSchema);
+      case BYTES:
+        return new BytesConversionReader&amp;lt;&amp;gt;(reader, conversion, readerSchema);
+      case FIXED:
+        return new FixedConversionReader&amp;lt;&amp;gt;(reader, conversion, readerSchema);
+      default:
+        // use less optimized converter for all more exotic types
+        return new GenericConversionReader&amp;lt;&amp;gt;(reader, conversion, readerSchema);
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt; getReaderForBaseType(Schema readerSchema, Schema writerSchema) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    if ( readerSchema.getType() != writerSchema.getType() ) {
+      return resolveMismatchedReader( readerSchema, writerSchema );
+    }++    switch (readerSchema.getType()) {
+      case STRING:
+        return createStringReader(readerSchema, writerSchema);
+      case INT:
+        return IntegerReader.get();
+      case NULL:
+        return NullReader.get();
+      case RECORD:
+        return createRecordReader(readerSchema, writerSchema);
+      case DOUBLE:
+        return DoubleReader.get();
+      case UNION:
+        return createUnionReader(readerSchema, writerSchema);
+      case MAP:
+        return createMapReader(readerSchema, writerSchema);
+      case LONG:
+        return LongReader.get();
+      case ARRAY:
+        return createArrayReader(readerSchema, writerSchema);
+      case BOOLEAN:
+        return BooleanReader.get();
+      case BYTES:
+        return BytesReader.get();
+      case ENUM:
+        return createEnumReader(readerSchema, writerSchema);
+      case FIXED:
+        return createFixedReader(readerSchema, writerSchema);
+      case FLOAT:
+        return FloatReader.get();
+      default:
+        return getFailureReaderOrFail(&quot;Type &quot; + readerSchema.getType() + &quot; not yet supported.&quot;);
+    }+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt; resolveMismatchedReader( Schema readerSchema, Schema writerSchema ) {&lt;br/&gt;
+    if ( writerSchema.getType() == Type.UNION ) &lt;/p&gt;
{ // and reader isnt union type
+      Schema pseudoUnion = Schema.createUnion( readerSchema );
+      return getReaderFor( pseudoUnion, writerSchema );
+    }
&lt;p&gt;+&lt;br/&gt;
+    switch ( readerSchema.getType() ) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+      case UNION}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+    return getSchemaMismatchError(readerSchema, writerSchema);&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt; createStringReader(Schema readerSchema, Schema writerSchema) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    FieldReader&amp;lt;?&amp;gt; stringReader = createSimpleStringReader(readerSchema);+    if (isClassPropEnabled()) {
+      return getTransformingStringReader(readerSchema.getProp(SpecificData.CLASS_PROP),
+          stringReader);
+    } else {
+      return stringReader;
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt; createSimpleStringReader(Schema readerSchema) {&lt;br/&gt;
+    String stringProperty = readerSchema.getProp(GenericData.STRING_PROP);&lt;br/&gt;
+    if (GenericData.StringType.String.name().equals(stringProperty)) {
+      return StringReader.get();
+    } else {
+      return Utf8Reader.get();
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt; createUnionReader(Schema readerSchema, Schema writerSchema) {&lt;br/&gt;
+    List&amp;lt;Schema&amp;gt; readerTypes = readerSchema.getTypes();&lt;br/&gt;
+    List&amp;lt;Schema&amp;gt; writerTypes = writerSchema.getTypes();&lt;br/&gt;
+&lt;br/&gt;
+    FieldReader&amp;lt;?&amp;gt;[] unionReaders = new FieldReader&lt;span class=&quot;error&quot;&gt;&amp;#91;writerTypes.size()&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+&lt;br/&gt;
+    int i = 0;&lt;br/&gt;
+    for (Schema thisWriterSchema : writerTypes) {&lt;br/&gt;
+      Schema thisReaderSchema = findUnionType(thisWriterSchema, readerTypes);&lt;br/&gt;
+      if (thisReaderSchema == null) {
+        unionReaders[i++] = getFailureReaderOrFail(&quot;Found &quot; + thisWriterSchema.getType().getName().toLowerCase() + &quot;, expecting &quot; + getUnionDescriptor(readerSchema));
+      } else {
+        unionReaders[i++] = getReaderFor(thisReaderSchema, thisWriterSchema);
+      }&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    return new UnionReader(unionReaders);&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+  private String getUnionDescriptor(Schema schema) {&lt;br/&gt;
+    List&amp;lt;Schema&amp;gt; types = schema.getTypes();&lt;br/&gt;
+    if ( types.size() == 1 ) {
+      return schema.getTypes().get(0).getName().toLowerCase();
+    }&lt;br/&gt;
+&lt;br/&gt;
+    return &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot; + schema.getTypes().stream().map( Schema::getName ).collect( Collectors.joining(&amp;quot;,&amp;quot;) ) + &amp;quot;&amp;#93;&lt;/span&gt;&quot;;&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private Schema findUnionType(Schema schema, List&amp;lt;Schema&amp;gt; readerTypes) {&lt;br/&gt;
+    // try for perfect match first&lt;br/&gt;
+    for ( Schema thisReaderSchema : readerTypes ) {&lt;br/&gt;
+      if ( thisReaderSchema.equals( schema ) ) {
+        return thisReaderSchema;
+      }&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    // then try for compatible&lt;br/&gt;
+    for (Schema thisReaderSchema : readerTypes) {&lt;br/&gt;
+      if ( areCompatible( thisReaderSchema, schema ) ) {+        return thisReaderSchema;+      }&lt;br/&gt;
+    }&lt;br/&gt;
+    return null;&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+  private boolean areCompatible( Schema readerSchema, Schema writerSchema ) {&lt;br/&gt;
+    try {
+      FieldReader&amp;lt;?&amp;gt; reader = getReaderFor(readerSchema, writerSchema);
+      return !( reader instanceof FailureReader );
+    }&lt;br/&gt;
+    catch ( Exception e ) {
+      return false;
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private Schema.Field findSourceField(Schema.Field field, Schema writerSchema) {&lt;br/&gt;
+    Schema.Field sourceField = findSourceFieldByName(field.name(), writerSchema);&lt;br/&gt;
+    if (sourceField == null) {&lt;br/&gt;
+      for (String thisAlias : emptyIfNull(field.aliases())) {&lt;br/&gt;
+        sourceField = findSourceFieldByName(thisAlias, writerSchema);&lt;br/&gt;
+        if (sourceField != null) {
+          break;
+        }&lt;br/&gt;
+      }&lt;br/&gt;
+    }&lt;br/&gt;
+    return sourceField;&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private Schema.Field findSourceFieldByName(String fieldName, Schema writerSchema) {&lt;br/&gt;
+    for (Schema.Field thisWriterField : writerSchema.getFields()) {&lt;br/&gt;
+      if (thisWriterField.name().equals(fieldName)) {
+        return thisWriterField;
+      }&lt;br/&gt;
+      for (String thisAlias : emptyIfNull(thisWriterField.aliases())) {&lt;br/&gt;
+        if (thisAlias.equals(fieldName)) {
+          return thisWriterField;
+        }&lt;br/&gt;
+      }&lt;br/&gt;
+    }&lt;br/&gt;
+    return null;&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt; createMapReader(Schema readerSchema, Schema writerSchema) {
+    FieldReader&amp;lt;?&amp;gt; keyReader = createMapKeyReader(readerSchema);
+    FieldReader&amp;lt;?&amp;gt; valueReader =
+        getReaderFor(readerSchema.getValueType(), writerSchema.getValueType());
+    return new MapReader&amp;lt;&amp;gt;(keyReader, valueReader);
+  }&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt; createMapKeyReader(Schema readerSchema) {&lt;br/&gt;
+    FieldReader&amp;lt;?&amp;gt; stringReader = createSimpleStringReader(readerSchema);&lt;br/&gt;
+    if (isKeyClassEnabled()) {
+      return getTransformingStringReader(readerSchema.getProp(SpecificData.KEY_CLASS_PROP),
+          createSimpleStringReader(readerSchema));
+    } else {+      return stringReader;+    }+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt; getTransformingStringReader(String valueClass,&lt;br/&gt;
+      FieldReader&amp;lt;?&amp;gt; stringReader) {&lt;br/&gt;
+    if (valueClass == null) &lt;/p&gt;
{
+      return stringReader;
+    }
&lt;p&gt; else &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+      Function&amp;lt;String, ?&amp;gt; transformer = findClass(valueClass)+          .map(clazz -&amp;gt; ReflectionUtils.getConstructorAsFunction(String.class, clazz)).orElse(null);++      if (transformer != null) {
+        return new StringConversionReader(transformer, StringReader.get());
+      }+    }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+    return stringReader;&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+  private Optional&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; findClass(String clazz) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    try {
+      return Optional.of(data.getClassLoader().loadClass(clazz));
+    } catch (ReflectiveOperationException e) {
+      return Optional.empty();
+    }+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt; createArrayReader(Schema readerSchema, Schema writerSchema) &lt;/p&gt;
{
+    FieldReader&amp;lt;?&amp;gt; fieldReader =
+        getReaderFor(readerSchema.getElementType(), writerSchema.getElementType());
+    return ArrayReader.of(fieldReader, readerSchema);
+  }
&lt;p&gt;+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt; createEnumReader(Schema readerSchema, Schema writerSchema) {&lt;br/&gt;
+    List&amp;lt;String&amp;gt; writerSymbols = writerSchema.getEnumSymbols();&lt;br/&gt;
+    List&amp;lt;String&amp;gt; readerSymbols = readerSchema.getEnumSymbols();&lt;br/&gt;
+    Object[] enumObjects = new Object&lt;span class=&quot;error&quot;&gt;&amp;#91;writerSymbols.size()&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+&lt;br/&gt;
+    // pre-get all possible instances of the enum and cache them&lt;br/&gt;
+    int i = 0;&lt;br/&gt;
+    for (String thisWriterSymbol : writerSymbols) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+      if (readerSymbols.contains(thisWriterSymbol)) {
+        enumObjects[i] = data.createEnum(thisWriterSymbol, readerSchema);
+      } else if (isFailingFast()) {
+        fail(&quot;Enum reader does not contain writer&apos;s symbol &quot; + thisWriterSymbol);
+      }+      i++;+    }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+    return new EnumReader(enumObjects, writerSchema);&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt; createFixedReader(Schema readerSchema, Schema writerSchema) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    if (readerSchema.getFixedSize() != writerSchema.getFixedSize()) {
+      return getFailureReaderOrFail(&quot;Reader and writer schemas do not match. Fixed &quot;
+          + readerSchema.getName() + &quot; expects &quot; + readerSchema.getFixedSize()
+          + &quot; bytes, but writer is writing &quot; + writerSchema.getFixedSize());
+    }++    return new FixedReader(data, readerSchema);+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+  private FailureReader getSchemaMismatchError(Schema readerSchema, Schema writerSchema) &lt;/p&gt;
{
+    return getFailureReaderOrFail( &quot;Found &quot; + writerSchema.getType() + &quot;, expecting &quot; + readerSchema.getType() );
+  }
&lt;p&gt;+&lt;br/&gt;
+  private FailureReader getFailureReaderOrFail(String message) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    if (failFast) {
+      throw new InvalidDataException(message);
+    } else {
+      return new FailureReader(message);
+    }+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+  private void fail(String message) &lt;/p&gt;
{
+    throw new InvalidDataException(message);
+  }
&lt;p&gt;+&lt;br/&gt;
+  private static &amp;lt;T&amp;gt; Collection&amp;lt;T&amp;gt; emptyIfNull(Collection&amp;lt;T&amp;gt; collection) &lt;/p&gt;
{
+    return (collection == null) ? Collections.emptyList() : collection;
+  }
&lt;p&gt;+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/InvalidDataException.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/InvalidDataException.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..a00729e2b&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/InvalidDataException.java&lt;br/&gt;
@@ -0,0 +1,30 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader;&lt;br/&gt;
+&lt;br/&gt;
+public class InvalidDataException extends RuntimeException 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+  private static final long serialVersionUID = 7701853368178317793L;++  public InvalidDataException(String message, Throwable cause) {
+    super(message, cause);
+  }++  public InvalidDataException(String message) {
+    super(message);
+  }+}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/ArrayReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/ArrayReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..b3ea9fec2&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/ArrayReader.java&lt;br/&gt;
@@ -0,0 +1,73 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import java.util.List;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.generic.GenericData;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class ArrayReader&amp;lt;D&amp;gt; implements FieldReader&amp;lt;List&amp;lt;D&amp;gt;&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private final FieldReader&amp;lt;D&amp;gt; elementReader;&lt;br/&gt;
+  private final Schema schema;&lt;br/&gt;
+&lt;br/&gt;
+  public static &amp;lt;D&amp;gt; ArrayReader&amp;lt;D&amp;gt; of( FieldReader&amp;lt;D&amp;gt; elementReader, Schema schema ) 
{
+    // there is a big in ReusingArrayReader() that needs to be addressed. until then, only use ArrayReader
+    // return elementReader.canReuse() ? new ReusingArrayReader&amp;lt;&amp;gt;( elementReader, schema ) : new ArrayReader&amp;lt;&amp;gt;( elementReader, schema );
+    return new ArrayReader&amp;lt;&amp;gt;( elementReader, schema );
+  }
&lt;p&gt;+&lt;br/&gt;
+  public ArrayReader(FieldReader&amp;lt;D&amp;gt; elementReader, Schema schema ) &lt;/p&gt;
{
+    this.elementReader = elementReader;
+    this.schema = schema;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public FieldReader&amp;lt;D&amp;gt; getElementReader() &lt;/p&gt;
{
+    return this.elementReader;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public Schema getSchema() &lt;/p&gt;
{
+    return this.schema;
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public List&amp;lt;D&amp;gt; read(List&amp;lt;D&amp;gt; reuse, Decoder decoder) throws IOException {&lt;br/&gt;
+    long l = decoder.readArrayStart();&lt;br/&gt;
+    List&amp;lt;D&amp;gt; array = new GenericData.Array&amp;lt;&amp;gt;( (int)l, getSchema() );&lt;br/&gt;
+    while (l &amp;gt; 0) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+      for (long i = 0; i &amp;lt; l; i++) {
+        array.add(elementReader.read(null, decoder));
+      }+      l = decoder.arrayNext();+    }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+    return array;&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {&lt;br/&gt;
+    long l = decoder.readArrayStart();&lt;br/&gt;
+    while (l &amp;gt; 0) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+      for (long i = 0; i &amp;lt; l; i++) {
+        elementReader.skip(decoder);
+      }+      l = decoder.arrayNext();+    }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/BooleanReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/BooleanReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..99ce85a16&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/BooleanReader.java&lt;br/&gt;
@@ -0,0 +1,42 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class BooleanReader implements FieldReader&amp;lt;Boolean&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private static final BooleanReader INSTANCE = new BooleanReader();&lt;br/&gt;
+&lt;br/&gt;
+  public static BooleanReader get() 
{
+    return INSTANCE;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private BooleanReader() {}&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public Boolean read(Boolean reuse, Decoder decoder) throws IOException {
+    return decoder.readBoolean();
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {
+    decoder.readBoolean();
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/BytesReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/BytesReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..d627aff1b&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/BytesReader.java&lt;br/&gt;
@@ -0,0 +1,48 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import java.nio.ByteBuffer;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class BytesReader implements FieldReader&amp;lt;ByteBuffer&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private static final BytesReader INSTANCE = new BytesReader();&lt;br/&gt;
+&lt;br/&gt;
+  public static BytesReader get() {+    return INSTANCE;+  }
&lt;p&gt;+&lt;br/&gt;
+  private BytesReader() {}&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public boolean canReuse() &lt;/p&gt;
{
+    return true;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public ByteBuffer read(ByteBuffer reuse, Decoder decoder) throws IOException {
+    return decoder.readBytes(reuse);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {
+    decoder.skipBytes();
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/DoubleReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/DoubleReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..d011b0802&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/DoubleReader.java&lt;br/&gt;
@@ -0,0 +1,42 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class DoubleReader implements FieldReader&amp;lt;Double&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private static final DoubleReader INSTANCE = new DoubleReader();&lt;br/&gt;
+&lt;br/&gt;
+  public static DoubleReader get() {
+    return INSTANCE;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private DoubleReader() {}&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public Double read(Double reuse, Decoder decoder) throws IOException {
+    return decoder.readDouble();
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {
+    decoder.readDouble();
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/EnumReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/EnumReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..e3890240a&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/EnumReader.java&lt;br/&gt;
@@ -0,0 +1,51 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.AvroTypeException;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class EnumReader implements FieldReader&amp;lt;Object&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private final Object[] enumObjects;&lt;br/&gt;
+  private final Schema writerSchema;&lt;br/&gt;
+&lt;br/&gt;
+  public EnumReader(Object[] enumObjects, Schema writerSchema) {
+    this.enumObjects = enumObjects;
+    this.writerSchema = writerSchema;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public Object read(Object reuse, Decoder decoder) throws IOException {&lt;br/&gt;
+    int index = decoder.readEnum();&lt;br/&gt;
+    Object resultObject = enumObjects&lt;span class=&quot;error&quot;&gt;&amp;#91;index&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+&lt;br/&gt;
+    if (resultObject == null) {
+      throw new AvroTypeException( &quot;No match for &quot; + writerSchema.getEnumSymbols().get(index) );
+    }&lt;br/&gt;
+&lt;br/&gt;
+    return resultObject;&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {
+    decoder.readEnum();
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/FailureReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/FailureReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..d795ea4bd&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/FailureReader.java&lt;br/&gt;
@@ -0,0 +1,52 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.AvroTypeException;&lt;br/&gt;
+import org.apache.avro.generic.IndexedRecord;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.steps.ExecutionStep;&lt;br/&gt;
+&lt;br/&gt;
+/**&lt;br/&gt;
+ * Reader for lazy errors, e.g. trying to read or skip from this will result in an error being&lt;br/&gt;
+ * thrown. Used in schema conversion of unions with non-matching types.&lt;br/&gt;
+ */&lt;br/&gt;
+public class FailureReader implements FieldReader&amp;lt;Object&amp;gt;, ExecutionStep {&lt;br/&gt;
+&lt;br/&gt;
+  private final String errorMessage;&lt;br/&gt;
+&lt;br/&gt;
+  public FailureReader(String errorMessage) {
+    this.errorMessage = errorMessage;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public Object read(Object reuse, Decoder decoder) throws IOException {
+    throw new AvroTypeException(errorMessage);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {+    throw new AvroTypeException(errorMessage);+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void execute(IndexedRecord record, Decoder decoder) throws IOException {
+    throw new AvroTypeException(errorMessage);
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/FieldReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/FieldReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..ec6260fcb&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/FieldReader.java&lt;br/&gt;
@@ -0,0 +1,40 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.io.DatumReader;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public interface FieldReader&amp;lt;D&amp;gt; extends DatumReader&amp;lt;D&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public D read(D reuse, Decoder decoder) throws IOException;&lt;br/&gt;
+&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException;&lt;br/&gt;
+&lt;br/&gt;
+  public default boolean canReuse() {
+    return false;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  default void setSchema(Schema schema) {
+    throw new UnsupportedOperationException();
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/FixedReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/FixedReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..8104bbd87&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/FixedReader.java&lt;br/&gt;
@@ -0,0 +1,52 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.generic.GenericData;&lt;br/&gt;
+import org.apache.avro.generic.GenericFixed;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class FixedReader implements FieldReader&amp;lt;Object&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private final GenericData data;&lt;br/&gt;
+  private final Schema readerSchema;&lt;br/&gt;
+&lt;br/&gt;
+  public FixedReader(GenericData data, Schema readerSchema) {
+    this.data = data;
+    this.readerSchema = readerSchema;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public boolean canReuse() {+    return true;+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public Object read(Object reuse, Decoder decoder) throws IOException &lt;/p&gt;
{
+    GenericFixed fixed = (GenericFixed) data.createFixed(reuse, readerSchema);
+    decoder.readFixed(fixed.bytes(), 0, readerSchema.getFixedSize());
+    return fixed;
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException &lt;/p&gt;
{
+    decoder.skipFixed(readerSchema.getFixedSize());
+  }
&lt;p&gt;+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/FloatReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/FloatReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..902b8a24b&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/FloatReader.java&lt;br/&gt;
@@ -0,0 +1,43 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class FloatReader implements FieldReader&amp;lt;Float&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private static final FloatReader INSTANCE = new FloatReader();&lt;br/&gt;
+&lt;br/&gt;
+  public static FloatReader get() 
{
+    return INSTANCE;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private FloatReader() {}&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public Float read(Float reuse, Decoder decoder) throws IOException {
+    return decoder.readFloat();
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {
+    decoder.readFloat();
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/IntegerReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/IntegerReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..fe8c73eb6&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/IntegerReader.java&lt;br/&gt;
@@ -0,0 +1,42 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class IntegerReader implements FieldReader&amp;lt;Integer&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private static final IntegerReader INSTANCE = new IntegerReader();&lt;br/&gt;
+&lt;br/&gt;
+  public static IntegerReader get() {+    return INSTANCE;+  }
&lt;p&gt;+&lt;br/&gt;
+  private IntegerReader() {}&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public Integer read(Integer reuse, Decoder decoder) throws IOException &lt;/p&gt;
{
+    return decoder.readInt();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException &lt;/p&gt;
{
+    decoder.readInt();
+  }
&lt;p&gt;+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/LongReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/LongReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..fe72ff434&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/LongReader.java&lt;br/&gt;
@@ -0,0 +1,42 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class LongReader implements FieldReader&amp;lt;Long&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private static final LongReader INSTANCE = new LongReader();&lt;br/&gt;
+&lt;br/&gt;
+  public static LongReader get() 
{
+    return INSTANCE;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private LongReader() {}&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public Long read(Long reuse, Decoder decoder) throws IOException {
+    return decoder.readLong();
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {
+    decoder.readLong();
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/MapReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/MapReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..6cd5d67e9&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/MapReader.java&lt;br/&gt;
@@ -0,0 +1,63 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import java.util.HashMap;&lt;br/&gt;
+import java.util.Map;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class MapReader&amp;lt;K, V&amp;gt; implements FieldReader&amp;lt;Map&amp;lt;K, V&amp;gt;&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private FieldReader&amp;lt;K&amp;gt; keyReader;&lt;br/&gt;
+  private FieldReader&amp;lt;V&amp;gt; valueReader;&lt;br/&gt;
+&lt;br/&gt;
+  public MapReader(FieldReader&amp;lt;K&amp;gt; keyReader, FieldReader&amp;lt;V&amp;gt; valueReader) {
+    this.keyReader = keyReader;
+    this.valueReader = valueReader;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public Map&amp;lt;K, V&amp;gt; read(Map&amp;lt;K, V&amp;gt; reuse, Decoder decoder) throws IOException {&lt;br/&gt;
+    long l = decoder.readMapStart();&lt;br/&gt;
+    Map&amp;lt;K, V&amp;gt; targetMap = new HashMap&amp;lt;&amp;gt;();&lt;br/&gt;
+&lt;br/&gt;
+    while (l &amp;gt; 0) {&lt;br/&gt;
+      for (int i = 0; i &amp;lt; l; i++) {
+        K key = keyReader.read(null, decoder);
+        V value = valueReader.read(null, decoder);
+        targetMap.put(key, value);
+      }&lt;br/&gt;
+      l = decoder.mapNext();&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    return targetMap;&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {&lt;br/&gt;
+    long l = decoder.readMapStart();&lt;br/&gt;
+    while (l &amp;gt; 0) {&lt;br/&gt;
+      for (int i = 0; i &amp;lt; l; i++) {
+        keyReader.skip(decoder);
+        valueReader.skip(decoder);
+      }&lt;br/&gt;
+      l = decoder.mapNext();&lt;br/&gt;
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/NullReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/NullReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..61119930a&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/NullReader.java&lt;br/&gt;
@@ -0,0 +1,43 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class NullReader implements FieldReader&amp;lt;Object&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private static final NullReader INSTANCE = new NullReader();&lt;br/&gt;
+&lt;br/&gt;
+  public static NullReader get() {+    return INSTANCE;+  }
&lt;p&gt;+&lt;br/&gt;
+  private NullReader() {}&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public Object read(Object reuse, Decoder decoder) throws IOException &lt;/p&gt;
{
+    decoder.readNull();
+    return null;
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException &lt;/p&gt;
{
+    decoder.readNull();
+  }
&lt;p&gt;+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/ReconfigurableReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/ReconfigurableReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..7be769391&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/ReconfigurableReader.java&lt;br/&gt;
@@ -0,0 +1,59 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.io.DatumReader;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.FastReader;&lt;br/&gt;
+&lt;br/&gt;
+public class ReconfigurableReader&amp;lt;T&amp;gt; implements DatumReader&amp;lt;T&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private final FastReader fastData;&lt;br/&gt;
+  private final Schema readerSchema;&lt;br/&gt;
+  private Schema writerSchema;&lt;br/&gt;
+  private FieldReader&amp;lt;T&amp;gt; reader;&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+  public ReconfigurableReader(FastReader fastData, Schema readerSchema, Schema writerSchema) 
{
+    this.fastData = fastData;
+    this.readerSchema = readerSchema;
+    setSchema(writerSchema);
+  }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void setSchema(Schema schema) &lt;/p&gt;
{
+    this.writerSchema = schema;
+    this.reader = null;
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public T read(T reuse, Decoder in) throws IOException &lt;/p&gt;
{
+    return getReader().read(reuse, in);
+  }
&lt;p&gt;+&lt;br/&gt;
+  @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+  private FieldReader&amp;lt;T&amp;gt; getReader() &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    if (reader == null) {
+      reader = (FieldReader&amp;lt;T&amp;gt;) fastData.createDatumReader(writerSchema, readerSchema);
+    }+    return reader;+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/RecordReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/RecordReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..c673fac00&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/RecordReader.java&lt;br/&gt;
@@ -0,0 +1,86 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import java.util.function.Supplier;&lt;br/&gt;
+import org.apache.avro.generic.IndexedRecord;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.steps.ExecutionStep;&lt;br/&gt;
+&lt;br/&gt;
+public class RecordReader&amp;lt;D extends IndexedRecord&amp;gt; implements FieldReader&amp;lt;D&amp;gt; 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {++  public enum Stage {
+    NEW,
+    INITIALIZING,
+    INITIALIZED
+  }++  private ExecutionStep[] readSteps;+  private ExecutionStep[] defaultingSteps;++  private Supplier&amp;lt;D&amp;gt; supplier;+  private Stage stage = Stage.NEW;++  public Stage getInitializationStage() {
+    return this.stage;
+  }++  public void reset() {
+    this.stage = Stage.NEW;
+  }++  public void startInitialization() {
+    this.stage = Stage.INITIALIZING;
+  }++  @SuppressWarnings(&amp;quot;unchecked&amp;quot;)+  public void finishInitialization(+      ExecutionStep[] readSteps,+      ExecutionStep[] defaultingSteps,+      Supplier&amp;lt;? extends IndexedRecord&amp;gt; newInstanceSupplier) {
+    this.readSteps = readSteps;
+    this.defaultingSteps = defaultingSteps;
+    this.supplier = (Supplier&amp;lt;D&amp;gt;) newInstanceSupplier;
+    this.stage = Stage.INITIALIZED;
+  }++  @Override+  public boolean canReuse() {
+    return true;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public D read(D reuse, Decoder decoder) throws IOException {&lt;br/&gt;
+      D object = reuse != null ? reuse : supplier.get();&lt;br/&gt;
+      for (ExecutionStep thisStep : readSteps) {
+        thisStep.execute(object, decoder);
+      }&lt;br/&gt;
+      for (ExecutionStep thisStep : defaultingSteps) {+        thisStep.execute(object, decoder);+      }&lt;br/&gt;
+      return object;&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {&lt;br/&gt;
+    for (ExecutionStep thisStep : readSteps) {
+      thisStep.skip(decoder);
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/ReusingArrayReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/ReusingArrayReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..ce26163a2&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/ReusingArrayReader.java&lt;br/&gt;
@@ -0,0 +1,71 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import java.util.Iterator;&lt;br/&gt;
+import java.util.List;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.generic.GenericArray;&lt;br/&gt;
+import org.apache.avro.generic.GenericData;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class ReusingArrayReader&amp;lt;D&amp;gt; extends ArrayReader&amp;lt;D&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  public ReusingArrayReader(FieldReader&amp;lt;D&amp;gt; parentReader, Schema schema) {
+    super( parentReader, schema );
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public List&amp;lt;D&amp;gt; read(List&amp;lt;D&amp;gt; reuse, Decoder decoder) throws IOException {&lt;br/&gt;
+    if ( reuse != null ) {&lt;br/&gt;
+      Iterator&amp;lt;D&amp;gt; reuseIterator = reuse.iterator();&lt;br/&gt;
+      GenericArray&amp;lt;D&amp;gt; reuseArray = (GenericArray&amp;lt;D&amp;gt;)reuse;&lt;br/&gt;
+      long l = decoder.readArrayStart();&lt;br/&gt;
+&lt;br/&gt;
+      GenericArray&amp;lt;D&amp;gt; newArray = new GenericData.Array&amp;lt;&amp;gt;( (int) l, getSchema() );&lt;br/&gt;
+&lt;br/&gt;
+      while (l &amp;gt; 0) {&lt;br/&gt;
+        for (long i = 0; i &amp;lt; l; i++) {
+          newArray.add( getElementReader().read( getNextReusableElement( reuseIterator ), decoder));
+        }&lt;br/&gt;
+        l = decoder.arrayNext();&lt;br/&gt;
+      }&lt;br/&gt;
+      return reuseArray;&lt;br/&gt;
+    }&lt;br/&gt;
+    else {
+      return super.read( reuse, decoder );
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private D getNextReusableElement( Iterator&amp;lt;D&amp;gt; iterator ) {&lt;br/&gt;
+    if ( iterator.hasNext() ) {
+      return iterator.next();
+    }&lt;br/&gt;
+    else {
+      return null;
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public boolean canReuse() {+    return true;+  }+++}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/StringReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/StringReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..7d3f9af71&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/StringReader.java&lt;br/&gt;
@@ -0,0 +1,42 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class StringReader implements FieldReader&amp;lt;String&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private static final StringReader INSTANCE = new StringReader();&lt;br/&gt;
+&lt;br/&gt;
+  public static StringReader get() 
{
+    return INSTANCE;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private StringReader() {}&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public String read(String reuse, Decoder decoder) throws IOException {
+    return decoder.readString();
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {
+    decoder.skipString();
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/UnionReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/UnionReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..9422e870d&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/UnionReader.java&lt;br/&gt;
@@ -0,0 +1,42 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class UnionReader implements FieldReader&amp;lt;Object&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private FieldReader&amp;lt;?&amp;gt;[] unionReaders;&lt;br/&gt;
+&lt;br/&gt;
+  public UnionReader(FieldReader&amp;lt;?&amp;gt;[] readers) {
+    this.unionReaders = readers;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public Object read(Object reuse, Decoder decoder) throws IOException {
+    final int selection = decoder.readIndex();
+    return unionReaders[selection].read(null, decoder);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {
+    final int selection = decoder.readIndex();
+    unionReaders[selection].skip(decoder);
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/Utf8Reader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/Utf8Reader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..f40c7371e&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/Utf8Reader.java&lt;br/&gt;
@@ -0,0 +1,48 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.util.Utf8;&lt;br/&gt;
+&lt;br/&gt;
+public class Utf8Reader implements FieldReader&amp;lt;Utf8&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private static final Utf8Reader INSTANCE = new Utf8Reader();&lt;br/&gt;
+&lt;br/&gt;
+  public static Utf8Reader get() {+    return INSTANCE;+  }
&lt;p&gt;+&lt;br/&gt;
+  private Utf8Reader() {}&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public boolean canReuse() &lt;/p&gt;
{
+    return true;
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public Utf8 read(Utf8 reuse, Decoder decoder) throws IOException &lt;/p&gt;
{
+    return decoder.readString(reuse);
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException &lt;/p&gt;
{
+    decoder.skipString();
+  }
&lt;p&gt;+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/BytesConversionReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/BytesConversionReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..4260c5f3e&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/BytesConversionReader.java&lt;br/&gt;
@@ -0,0 +1,55 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers.conversion;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import java.nio.ByteBuffer;&lt;br/&gt;
+import org.apache.avro.Conversion;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FieldReader;&lt;br/&gt;
+&lt;br/&gt;
+public class BytesConversionReader&amp;lt;D&amp;gt; implements FieldReader&amp;lt;D&amp;gt; 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {++  private final FieldReader&amp;lt;ByteBuffer&amp;gt; parentReader;+  private final Conversion&amp;lt;D&amp;gt; conversion;+  private final Schema schema;++  @SuppressWarnings(&amp;quot;unchecked&amp;quot;)+  public BytesConversionReader(+      FieldReader&amp;lt;?&amp;gt; parentReader, Conversion&amp;lt;?&amp;gt; conversion, Schema schema) {
+    this.parentReader = (FieldReader&amp;lt;ByteBuffer&amp;gt;) parentReader;
+    this.conversion = (Conversion&amp;lt;D&amp;gt;) conversion;
+    this.schema = schema;
+  }++  @Override+  public D read(D reuse, Decoder decoder) throws IOException {
+    return conversion.fromBytes(parentReader.read(null, decoder), schema, schema.getLogicalType());
+  }++  @Override+  public boolean canReuse() {
+    return false;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {
+    parentReader.skip(decoder);
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/FixedConversionReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/FixedConversionReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..ef4c0f1c0&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/FixedConversionReader.java&lt;br/&gt;
@@ -0,0 +1,55 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers.conversion;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.Conversion;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.generic.GenericFixed;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FieldReader;&lt;br/&gt;
+&lt;br/&gt;
+public class FixedConversionReader&amp;lt;D&amp;gt; implements FieldReader&amp;lt;D&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private final FieldReader&amp;lt;Object&amp;gt; parentReader;&lt;br/&gt;
+  private final Conversion&amp;lt;D&amp;gt; conversion;&lt;br/&gt;
+  private final Schema schema;&lt;br/&gt;
+&lt;br/&gt;
+  @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+  public FixedConversionReader(&lt;br/&gt;
+      FieldReader&amp;lt;?&amp;gt; parentReader, Conversion&amp;lt;?&amp;gt; conversion, Schema schema) {
+    this.parentReader = (FieldReader&amp;lt;Object&amp;gt;) parentReader;
+    this.conversion = (Conversion&amp;lt;D&amp;gt;) conversion;
+    this.schema = schema;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public D read(D reuse, Decoder decoder) throws IOException {
+    return conversion.fromFixed((GenericFixed)parentReader.read(null, decoder), schema, schema.getLogicalType());
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public boolean canReuse() {+    return false;+  }++  @Override+  public void skip(Decoder decoder) throws IOException {
+    parentReader.skip(decoder);
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/GenericConversionReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/GenericConversionReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..0e0b41c74&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/GenericConversionReader.java&lt;br/&gt;
@@ -0,0 +1,92 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers.conversion;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import java.nio.ByteBuffer;&lt;br/&gt;
+import java.util.Collection;&lt;br/&gt;
+import java.util.Map;&lt;br/&gt;
+import org.apache.avro.Conversion;&lt;br/&gt;
+import org.apache.avro.LogicalType;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.generic.GenericEnumSymbol;&lt;br/&gt;
+import org.apache.avro.generic.GenericFixed;&lt;br/&gt;
+import org.apache.avro.generic.IndexedRecord;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FieldReader;&lt;br/&gt;
+&lt;br/&gt;
+public class GenericConversionReader&amp;lt;D&amp;gt; implements FieldReader&amp;lt;D&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private final FieldReader&amp;lt;?&amp;gt; parentReader;&lt;br/&gt;
+  private final Conversion&amp;lt;D&amp;gt; conversion;&lt;br/&gt;
+  private final Schema schema;&lt;br/&gt;
+&lt;br/&gt;
+  @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+  public GenericConversionReader(FieldReader&amp;lt;?&amp;gt; parentReader, Conversion&amp;lt;?&amp;gt; conversion,&lt;br/&gt;
+      Schema schema) {
+    this.parentReader = parentReader;
+    this.conversion = (Conversion&amp;lt;D&amp;gt;) conversion;
+    this.schema = schema;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public D read(D reuse, Decoder decoder) throws IOException {&lt;br/&gt;
+    final LogicalType logicalType = schema.getLogicalType();&lt;br/&gt;
+    final Object parentObject = parentReader.read(null, decoder);&lt;br/&gt;
+    switch (schema.getType()) {
+      case ARRAY:
+        return conversion.fromArray((Collection&amp;lt;?&amp;gt;) parentObject, schema, logicalType);
+      case BOOLEAN:
+        return conversion.fromBoolean((Boolean) parentObject, schema, logicalType);
+      case BYTES:
+        return conversion.fromBytes((ByteBuffer) parentObject, schema, logicalType);
+      case DOUBLE:
+        return conversion.fromDouble((Double) parentObject, schema, logicalType);
+      case ENUM:
+        return conversion.fromEnumSymbol((GenericEnumSymbol) parentObject, schema, logicalType);
+      case FIXED:
+        return conversion.fromFixed((GenericFixed) parentObject, schema, logicalType);
+      case FLOAT:
+        return conversion.fromFloat((Float) parentObject, schema, logicalType);
+      case INT:
+        return conversion.fromInt((Integer) parentObject, schema, logicalType);
+      case LONG:
+        return conversion.fromLong((Long) parentObject, schema, logicalType);
+      case MAP:
+        return conversion.fromMap((Map&amp;lt;?, ?&amp;gt;) parentObject, schema, logicalType);
+      case RECORD:
+        return conversion.fromRecord((IndexedRecord) parentObject, schema, logicalType);
+      case STRING:
+        return conversion.fromCharSequence((CharSequence) parentObject, schema, logicalType);
+      case UNION:
+      case NULL:
+      default:
+        throw new IllegalArgumentException(&quot;Conversion not possible for type &quot; + schema.getType());
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public boolean canReuse() {
+    return false;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {+    parentReader.skip(decoder);+  }+}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/IntegerConversionReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/IntegerConversionReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..53e1111d8&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/IntegerConversionReader.java&lt;br/&gt;
@@ -0,0 +1,54 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers.conversion;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.Conversion;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FieldReader;&lt;br/&gt;
+&lt;br/&gt;
+public class IntegerConversionReader&amp;lt;D&amp;gt; implements FieldReader&amp;lt;D&amp;gt; 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {++  private final FieldReader&amp;lt;Integer&amp;gt; parentReader;+  private final Conversion&amp;lt;D&amp;gt; conversion;+  private final Schema schema;++  @SuppressWarnings(&amp;quot;unchecked&amp;quot;)+  public IntegerConversionReader(+      FieldReader&amp;lt;?&amp;gt; parentReader, Conversion&amp;lt;?&amp;gt; conversion, Schema schema) {
+    this.parentReader = (FieldReader&amp;lt;Integer&amp;gt;) parentReader;
+    this.conversion = (Conversion&amp;lt;D&amp;gt;) conversion;
+    this.schema = schema;
+  }++  @Override+  public D read(D reuse, Decoder decoder) throws IOException {
+    return conversion.fromInt(parentReader.read(null, decoder), schema, schema.getLogicalType());
+  }++  @Override+  public boolean canReuse() {
+    return false;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {
+    parentReader.skip(decoder);
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/LongConversionReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/LongConversionReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..aebb1c4cb&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/LongConversionReader.java&lt;br/&gt;
@@ -0,0 +1,54 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers.conversion;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.Conversion;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FieldReader;&lt;br/&gt;
+&lt;br/&gt;
+public class LongConversionReader&amp;lt;D&amp;gt; implements FieldReader&amp;lt;D&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private final FieldReader&amp;lt;Long&amp;gt; parentReader;&lt;br/&gt;
+  private final Conversion&amp;lt;D&amp;gt; conversion;&lt;br/&gt;
+  private final Schema schema;&lt;br/&gt;
+&lt;br/&gt;
+  @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+  public LongConversionReader(&lt;br/&gt;
+      FieldReader&amp;lt;?&amp;gt; parentReader, Conversion&amp;lt;?&amp;gt; conversion, Schema schema) {
+    this.parentReader = (FieldReader&amp;lt;Long&amp;gt;) parentReader;
+    this.conversion = (Conversion&amp;lt;D&amp;gt;) conversion;
+    this.schema = schema;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public D read(D reuse, Decoder decoder) throws IOException {
+    return conversion.fromLong(parentReader.read(null, decoder), schema, schema.getLogicalType());
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public boolean canReuse() {+    return false;+  }++  @Override+  public void skip(Decoder decoder) throws IOException {
+    parentReader.skip(decoder);
+  }+}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/StringConversionReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/StringConversionReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..ecd080bce&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/conversion/StringConversionReader.java&lt;br/&gt;
@@ -0,0 +1,46 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers.conversion;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import java.util.function.Function;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FieldReader;&lt;br/&gt;
+&lt;br/&gt;
+public class StringConversionReader implements FieldReader&amp;lt;Object&amp;gt; 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {++  private final Function&amp;lt;String, ?&amp;gt; conversionFunction;+  private final FieldReader&amp;lt;?&amp;gt; stringReader;++  public StringConversionReader(Function&amp;lt;String, ?&amp;gt; conversionFunction,+      FieldReader&amp;lt;?&amp;gt; stringReader) {
+    this.conversionFunction = conversionFunction;
+    this.stringReader = stringReader;
+  }++  @Override+  public Object read(Object reuse, Decoder decoder) throws IOException {
+    return conversionFunction.apply( stringReader.read(null, decoder).toString() );
+  }++  @Override+  public void skip(Decoder decoder) throws IOException {
+    stringReader.skip(decoder);
+  }++}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/promotion/DoublePromotionReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/promotion/DoublePromotionReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..a578bab75&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/promotion/DoublePromotionReader.java&lt;br/&gt;
@@ -0,0 +1,42 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers.promotion;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FieldReader;&lt;br/&gt;
+&lt;br/&gt;
+public class DoublePromotionReader implements FieldReader&amp;lt;Double&amp;gt; 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {++  private final FieldReader&amp;lt;? extends Number&amp;gt; numberReader;++  public DoublePromotionReader( FieldReader&amp;lt;? extends Number&amp;gt; numberReader ) {
+    this.numberReader = numberReader;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public Double read(Double reuse, Decoder decoder) throws IOException {
+    return numberReader.read( null, decoder ).doubleValue();
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {
+    numberReader.skip( decoder );
+  }&lt;br/&gt;
+&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/promotion/FloatPromotionReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/promotion/FloatPromotionReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..05224a746&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/promotion/FloatPromotionReader.java&lt;br/&gt;
@@ -0,0 +1,42 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers.promotion;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FieldReader;&lt;br/&gt;
+&lt;br/&gt;
+public class FloatPromotionReader implements FieldReader&amp;lt;Float&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+  private final FieldReader&amp;lt;? extends Number&amp;gt; numberReader;&lt;br/&gt;
+&lt;br/&gt;
+  public FloatPromotionReader( FieldReader&amp;lt;? extends Number&amp;gt; numberReader ) {+    this.numberReader = numberReader;+  }++  @Override+  public Float read(Float reuse, Decoder decoder) throws IOException {
+    return numberReader.read( null, decoder ).floatValue();
+  }++  @Override+  public void skip(Decoder decoder) throws IOException {
+    numberReader.skip( decoder );
+  }++}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/promotion/LongPromotionReader.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/promotion/LongPromotionReader.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..2abceb944&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/readers/promotion/LongPromotionReader.java&lt;br/&gt;
@@ -0,0 +1,42 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.readers.promotion;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FieldReader;&lt;br/&gt;
+&lt;br/&gt;
+public class LongPromotionReader implements FieldReader&amp;lt;Long&amp;gt; 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {++  private final FieldReader&amp;lt;Integer&amp;gt; intReader;++  public LongPromotionReader( FieldReader&amp;lt;Integer&amp;gt; intReader ) {
+    this.intReader = intReader;
+  }++  @Override+  public Long read(Long reuse, Decoder decoder) throws IOException {
+    return intReader.read( null, decoder ).longValue();
+  }++  @Override+  public void skip(Decoder decoder) throws IOException {
+    intReader.skip( decoder );
+  }++}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/steps/ExecutionStep.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/steps/ExecutionStep.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..a09867d7f&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/steps/ExecutionStep.java&lt;br/&gt;
@@ -0,0 +1,28 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.steps;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.generic.IndexedRecord;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public interface ExecutionStep 
{
+  public void execute(IndexedRecord record, Decoder decoder) throws IOException;
+
+  public void skip(Decoder decoder) throws IOException;
+}
&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/steps/FieldDefaulter.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/steps/FieldDefaulter.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..ba3b9cec6&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/steps/FieldDefaulter.java&lt;br/&gt;
@@ -0,0 +1,43 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.steps;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.generic.IndexedRecord;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+&lt;br/&gt;
+public class FieldDefaulter implements ExecutionStep 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {++  private final int fieldIndex;+  private final Object value;++  public FieldDefaulter(int fieldIndex, Object value) {
+    this.fieldIndex = fieldIndex;
+    this.value = value;
+  }++  @Override+  public void execute(IndexedRecord record, Decoder decoder) throws IOException {
+    record.put(fieldIndex, value);
+  }++  @Override+  public void skip(Decoder decoder) throws IOException {
+    // if defaulting is skipped, nothing needs to be done
+  }+}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/steps/FieldSetter.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/steps/FieldSetter.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..d7c3ef0a1&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/steps/FieldSetter.java&lt;br/&gt;
@@ -0,0 +1,48 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.steps;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.generic.IndexedRecord;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FieldReader;&lt;br/&gt;
+&lt;br/&gt;
+public class FieldSetter&amp;lt;D&amp;gt; implements ExecutionStep 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {++  private final int fieldNumber;+  private final boolean reuse;+  private final FieldReader&amp;lt;D&amp;gt; reader;++  public FieldSetter(int fieldNumber, FieldReader&amp;lt;D&amp;gt; reader) {
+    this.fieldNumber = fieldNumber;
+    this.reader = reader;
+    this.reuse = reader.canReuse();
+  }++  @SuppressWarnings(&amp;quot;unchecked&amp;quot;)+  @Override+  public void execute(IndexedRecord record, Decoder decoder) throws IOException {
+    D reusableObject = reuse ? (D) record.get(fieldNumber) : null;
+    record.put(fieldNumber, reader.read(reusableObject, decoder));
+  }++  @Override+  public void skip(Decoder decoder) throws IOException {
+    reader.skip(decoder);
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/steps/FieldSkipper.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/steps/FieldSkipper.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..410283972&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/steps/FieldSkipper.java&lt;br/&gt;
@@ -0,0 +1,42 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.steps;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import org.apache.avro.generic.IndexedRecord;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.fastreader.readers.FieldReader;&lt;br/&gt;
+&lt;br/&gt;
+public class FieldSkipper implements ExecutionStep {&lt;br/&gt;
+&lt;br/&gt;
+  private final FieldReader&amp;lt;?&amp;gt; reader;&lt;br/&gt;
+&lt;br/&gt;
+  public FieldSkipper(FieldReader&amp;lt;?&amp;gt; reader) {
+    this.reader = reader;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void execute(IndexedRecord record, Decoder decoder) throws IOException {
+    skip(decoder);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skip(Decoder decoder) throws IOException {+    reader.skip(decoder);+  }+}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/utils/LoggingDecoder.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/utils/LoggingDecoder.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..7d1d700bb&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/utils/LoggingDecoder.java&lt;br/&gt;
@@ -0,0 +1,162 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.utils;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import java.nio.ByteBuffer;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.util.Utf8;&lt;br/&gt;
+import org.slf4j.Logger;&lt;br/&gt;
+import org.slf4j.LoggerFactory;&lt;br/&gt;
+&lt;br/&gt;
+public class LoggingDecoder extends Decoder {&lt;br/&gt;
+&lt;br/&gt;
+  private static final Logger LOGGER = LoggerFactory.getLogger(LoggingDecoder.class);&lt;br/&gt;
+&lt;br/&gt;
+  private final Decoder parentDecoder;&lt;br/&gt;
+&lt;br/&gt;
+  public LoggingDecoder(Decoder parentDecoder) 
{
+    this.parentDecoder = parentDecoder;
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void readNull() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;readNull&quot;);
+    parentDecoder.readNull();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public boolean readBoolean() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;readBoolean&quot;);
+    return parentDecoder.readBoolean();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public int readInt() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;readInt&quot;);
+    return parentDecoder.readInt();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public long readLong() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;readLong&quot;);
+    return parentDecoder.readLong();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public float readFloat() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;readFloat&quot;);
+    return parentDecoder.readFloat();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public double readDouble() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;readDouble&quot;);
+    return parentDecoder.readDouble();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public Utf8 readString(Utf8 old) throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;readString(UTF8)&quot;);
+    return parentDecoder.readString(old);
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public String readString() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;readString&quot;);
+    return parentDecoder.readString();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skipString() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;skipString&quot;);
+    parentDecoder.skipString();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public ByteBuffer readBytes(ByteBuffer old) throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;readBytes&quot;);
+    return parentDecoder.readBytes(old);
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skipBytes() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;skipBytes&quot;);
+    parentDecoder.skipBytes();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void readFixed(byte[] bytes, int start, int length) throws IOException {&lt;br/&gt;
+    LOGGER.info(&quot;readFixed(length={})&quot;, length);&lt;br/&gt;
+    parentDecoder.readFixed(bytes, start, length);&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void skipFixed(int length) throws IOException {&lt;br/&gt;
+    LOGGER.info(&quot;skipFixed(length={})&quot;, length);&lt;br/&gt;
+    parentDecoder.skipFixed(length);&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public int readEnum() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;readEnum&quot;);
+    return parentDecoder.readEnum();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public long readArrayStart() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;readArrayStart&quot;);
+    return parentDecoder.readArrayStart();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public long arrayNext() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;arrayNext&quot;);
+    return parentDecoder.arrayNext();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public long skipArray() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;skipArray&quot;);
+    return parentDecoder.skipArray();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public long readMapStart() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;readMapStart&quot;);
+    return parentDecoder.readMapStart();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public long mapNext() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;mapNext&quot;);
+    return parentDecoder.mapNext();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public long skipMap() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;skipMap&quot;);
+    return parentDecoder.skipMap();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public int readIndex() throws IOException &lt;/p&gt;
{
+    LOGGER.info(&quot;readIndex&quot;);
+    return parentDecoder.readIndex();
+  }
&lt;p&gt;+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/utils/ReflectionUtils.java b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/utils/ReflectionUtils.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..8228b9cf9&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/fastreader/utils/ReflectionUtils.java&lt;br/&gt;
@@ -0,0 +1,87 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.io.fastreader.utils;&lt;br/&gt;
+&lt;br/&gt;
+import java.lang.invoke.CallSite;&lt;br/&gt;
+import java.lang.invoke.LambdaMetafactory;&lt;br/&gt;
+import java.lang.invoke.MethodHandle;&lt;br/&gt;
+import java.lang.invoke.MethodHandles;&lt;br/&gt;
+import java.lang.invoke.MethodType;&lt;br/&gt;
+import java.util.function.Function;&lt;br/&gt;
+import java.util.function.Supplier;&lt;br/&gt;
+&lt;br/&gt;
+public class ReflectionUtils {&lt;br/&gt;
+&lt;br/&gt;
+  private ReflectionUtils() 
{
+    // static helper class, don&apos;t initiate
+  }
&lt;p&gt;+&lt;br/&gt;
+  public static &amp;lt;D&amp;gt; Supplier&amp;lt;D&amp;gt; getConstructorAsSupplier( Class&amp;lt;D&amp;gt; clazz ) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    try {
+      MethodHandles.Lookup lookup = MethodHandles.lookup();
+      MethodHandle constructorHandle = lookup.findConstructor( clazz, MethodType.methodType(void.class) );
+
+      CallSite site = LambdaMetafactory.metafactory( lookup,
+          &quot;get&quot;,
+          MethodType.methodType( Supplier.class ),
+          constructorHandle.type().generic(),
+          constructorHandle,
+          constructorHandle.type() );
+
+        return (Supplier&amp;lt;D&amp;gt;) site.getTarget().invokeExact();
+    }+    catch ( Throwable t ) {
+      // if anything goes wrong, don&apos;t provide a Supplier
+      return null;
+    }+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+  public static &amp;lt;V,R&amp;gt; Supplier&amp;lt;R&amp;gt; getOneArgConstructorAsSupplier( Class&amp;lt;R&amp;gt; clazz, Class&amp;lt;V&amp;gt; argumentClass, V argument ) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+      Function&amp;lt;V,R&amp;gt; supplierFunction = getConstructorAsFunction( argumentClass, clazz );+      if ( supplierFunction != null ) {
+        return () -&amp;gt; supplierFunction.apply( argument );
+      }+      else {
+        return null;
+      }+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+  public static &amp;lt;V,R&amp;gt; Function&amp;lt;V,R&amp;gt; getConstructorAsFunction( Class&amp;lt;V&amp;gt; parameterClass, Class&amp;lt;R&amp;gt; clazz ) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    try {
+      MethodHandles.Lookup lookup = MethodHandles.lookup();
+      MethodHandle constructorHandle = lookup.findConstructor( clazz, MethodType.methodType(void.class, parameterClass ) );
+
+      CallSite site = LambdaMetafactory.metafactory( lookup,
+          &quot;apply&quot;,
+          MethodType.methodType( Function.class ),
+          constructorHandle.type().generic(),
+          constructorHandle,
+          constructorHandle.type() );
+
+        return (Function&amp;lt;V,R&amp;gt;) site.getTarget().invokeExact();
+    }+    catch ( Throwable t ) {
+      // if something goes wrong, do not provide a Function instance
+      return null;
+    }+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java b/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java&lt;br/&gt;
index d26d1f9d8..60472a2ad 100644&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;a/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java&lt;br/&gt;
@@ -103,6 +103,11 @@ public ReflectData(ClassLoader classLoader) {&lt;br/&gt;
   /** Return the singleton instance. */&lt;br/&gt;
   public static ReflectData get() 
{ return INSTANCE; }&lt;br/&gt;
 &lt;br/&gt;
+  @Override&lt;br/&gt;
+  public boolean isFastReaderEnabled() {
+    return false;
+  }&lt;br/&gt;
+&lt;br/&gt;
   /** Cause a class to be treated as though it had an {@link Stringable}&lt;br/&gt;
    ** annotation. */&lt;br/&gt;
   public ReflectData addStringable(Class c) {&lt;br/&gt;
@@ -365,6 +370,7 @@ static Class getClassProp(Schema schema, String prop) {&lt;br/&gt;
    * It returns false for non-string-maps because Avro writes out such maps&lt;br/&gt;
    * as an array of records. Even their JSON representation is an array.&lt;br/&gt;
    */&lt;br/&gt;
+  @Override&lt;br/&gt;
   protected boolean isMap(Object datum) {
     return (datum instanceof Map) &amp;amp;&amp;amp; !isNonStringMap(datum);
   }&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
index d7b2bf825..851393789 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
@@ -116,12 +116,17 @@ public SpecificData(ClassLoader classLoader) {&lt;br/&gt;
 &lt;br/&gt;
   @Override&lt;br/&gt;
   public DatumReader createDatumReader(Schema schema) {
-    return new SpecificDatumReader(schema, schema, this);
+    return createDatumReader( schema, schema );
   }&lt;br/&gt;
 &lt;br/&gt;
   @Override&lt;br/&gt;
   public DatumReader createDatumReader(Schema writer, Schema reader) {&lt;br/&gt;
-    return new SpecificDatumReader(writer, reader, this);&lt;br/&gt;
+    if ( isFastReaderEnabled() ) {
+      return getFastReader().createReconfigurableDatumReader(writer, reader);
+    }&lt;br/&gt;
+    else {
+      return new SpecificDatumReader( writer, reader, this );
+    }&lt;br/&gt;
   }&lt;br/&gt;
 &lt;br/&gt;
   @Override&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCompatibilityEnumDefaults.java b/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCompatibilityEnumDefaults.java&lt;br/&gt;
index f85f3979a..ba349eb24 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCompatibilityEnumDefaults.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCompatibilityEnumDefaults.java&lt;br/&gt;
@@ -131,7 +131,7 @@ private GenericRecord serializeWithWriterThenDeserializeWithReader(Schema writer&lt;br/&gt;
     Decoder decoder = DecoderFactory.get().resolvingDecoder(&lt;br/&gt;
       writerSchema, readerSchema,&lt;br/&gt;
       DecoderFactory.get().binaryDecoder(bytes, null));&lt;br/&gt;
-    DatumReader&amp;lt;Object&amp;gt; datumReader = new GenericDatumReader&amp;lt;&amp;gt;(readerSchema);&lt;br/&gt;
+    DatumReader&amp;lt;Object&amp;gt; datumReader = GenericData.get().createDatumReader(readerSchema);&lt;br/&gt;
     return (GenericRecord)datumReader.read(null, decoder);&lt;br/&gt;
   }&lt;br/&gt;
 &lt;br/&gt;
diff --git a/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java b/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
index 8f525b4cd..5c1ec33e1 100644&lt;br/&gt;
&amp;#8212; a/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
+++ b/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
@@ -18,8 +18,8 @@&lt;br/&gt;
 package org.apache.avro.io;&lt;br/&gt;
 &lt;br/&gt;
 import java.io.ByteArrayOutputStream;&lt;br/&gt;
-import java.io.IOException;&lt;br/&gt;
 import java.io.FileOutputStream;&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
 import java.io.PrintStream;&lt;br/&gt;
 import java.lang.reflect.Array;&lt;br/&gt;
 import java.nio.ByteBuffer;&lt;br/&gt;
@@ -29,19 +29,17 @@&lt;br/&gt;
 import java.util.List;&lt;br/&gt;
 import java.util.Map;&lt;br/&gt;
 import java.util.Random;&lt;br/&gt;
-&lt;br/&gt;
 import org.apache.avro.FooBarSpecificRecord;&lt;br/&gt;
 import org.apache.avro.Schema;&lt;br/&gt;
 import org.apache.avro.Schema.Field;&lt;br/&gt;
 import org.apache.avro.TypeEnum;&lt;br/&gt;
 import org.apache.avro.generic.GenericData;&lt;br/&gt;
-import org.apache.avro.generic.GenericDatumReader;&lt;br/&gt;
 import org.apache.avro.generic.GenericDatumWriter;&lt;br/&gt;
 import org.apache.avro.generic.GenericRecord;&lt;br/&gt;
 import org.apache.avro.reflect.ReflectData;&lt;br/&gt;
 import org.apache.avro.reflect.ReflectDatumReader;&lt;br/&gt;
 import org.apache.avro.reflect.ReflectDatumWriter;&lt;br/&gt;
-import org.apache.avro.specific.SpecificDatumReader;&lt;br/&gt;
+import org.apache.avro.specific.SpecificData;&lt;br/&gt;
 import org.apache.avro.specific.SpecificDatumWriter;&lt;br/&gt;
 import org.apache.avro.specific.SpecificRecordBase;&lt;br/&gt;
 import org.apache.avro.util.Utf8;&lt;br/&gt;
@@ -1169,7 +1167,7 @@ protected void readInternal(Decoder d) throws IOException {&lt;br/&gt;
 &lt;br/&gt;
   static class GenericTest extends BasicTest {&lt;br/&gt;
     GenericRecord[] sourceData = null;&lt;br/&gt;
-    protected final GenericDatumReader&amp;lt;Object&amp;gt; reader;&lt;br/&gt;
+    protected final DatumReader&amp;lt;Object&amp;gt; reader;&lt;br/&gt;
     public GenericTest() throws IOException {
       this(&quot;Generic&quot;);
     }&lt;br/&gt;
@@ -1180,11 +1178,11 @@ protected GenericTest(String name, String writerSchema) throws IOException {
       super(name, writerSchema, 12);
       reader = newReader();
     }&lt;br/&gt;
-    protected GenericDatumReader&amp;lt;Object&amp;gt; getReader() {&lt;br/&gt;
+    protected DatumReader&amp;lt;Object&amp;gt; getReader() {
       return reader;
     }&lt;br/&gt;
-    protected GenericDatumReader&amp;lt;Object&amp;gt; newReader() {&lt;br/&gt;
-      return new GenericDatumReader&amp;lt;&amp;gt;(schema);&lt;br/&gt;
+    protected DatumReader&amp;lt;Object&amp;gt; newReader() {
+      return GenericData.get().createDatumReader(schema);
     }&lt;br/&gt;
     @Override&lt;br/&gt;
     void genSourceData() {
@@ -1342,8 +1340,8 @@ protected GenericResolving(String name)
       isWriteTest = false;
     }&lt;br/&gt;
     @Override&lt;br/&gt;
-    protected GenericDatumReader&amp;lt;Object&amp;gt; newReader() {&lt;br/&gt;
-      return new GenericDatumReader&amp;lt;&amp;gt;(schema, getReaderSchema());&lt;br/&gt;
+    protected DatumReader&amp;lt;Object&amp;gt; newReader() {
+      return GenericData.get().createDatumReader(schema, getReaderSchema());
     }&lt;br/&gt;
     protected abstract Schema getReaderSchema();&lt;br/&gt;
   }&lt;br/&gt;
@@ -1395,7 +1393,7 @@ public GenericOneTimeReaderUse() throws IOException {
       isWriteTest = false;
     }&lt;br/&gt;
     @Override&lt;br/&gt;
-    protected GenericDatumReader&amp;lt;Object&amp;gt; getReader() {&lt;br/&gt;
+    protected DatumReader&amp;lt;Object&amp;gt; getReader() {
       return newReader();
     }&lt;br/&gt;
   }&lt;br/&gt;
@@ -1406,7 +1404,7 @@ public GenericOneTimeUse() throws IOException {       isWriteTest = false;     }&lt;br/&gt;
     @Override&lt;br/&gt;
-    protected GenericDatumReader&amp;lt;Object&amp;gt; getReader() {&lt;br/&gt;
+    protected DatumReader&amp;lt;Object&amp;gt; getReader() {
       return newReader();
     }&lt;br/&gt;
     @Override&lt;br/&gt;
@@ -1416,7 +1414,7 @@ protected Decoder getDecoder() {&lt;br/&gt;
   }&lt;br/&gt;
 &lt;br/&gt;
   static abstract class SpecificTest&amp;lt;T extends SpecificRecordBase&amp;gt; extends BasicTest {&lt;br/&gt;
-    protected final SpecificDatumReader&amp;lt;T&amp;gt; reader;&lt;br/&gt;
+    protected final DatumReader&amp;lt;T&amp;gt; reader;&lt;br/&gt;
     protected final SpecificDatumWriter&amp;lt;T&amp;gt; writer;&lt;br/&gt;
     private Object[] sourceData;&lt;br/&gt;
 &lt;br/&gt;
@@ -1425,14 +1423,14 @@ protected SpecificTest(String name, String writerSchema) throws IOException {
       reader = newReader();
       writer = newWriter();
     }&lt;br/&gt;
-    protected SpecificDatumReader&amp;lt;T&amp;gt; getReader() {&lt;br/&gt;
+    protected DatumReader&amp;lt;T&amp;gt; getReader() {       return reader;     }&lt;br/&gt;
-    protected SpecificDatumWriter&amp;lt;T&amp;gt; getWriter() {&lt;br/&gt;
+    protected DatumWriter&amp;lt;T&amp;gt; getWriter() {
       return writer;
     }&lt;br/&gt;
-    protected SpecificDatumReader&amp;lt;T&amp;gt; newReader() {&lt;br/&gt;
-      return new SpecificDatumReader&amp;lt;&amp;gt;(schema);&lt;br/&gt;
+    protected DatumReader&amp;lt;T&amp;gt; newReader() {
+      return SpecificData.get().createDatumReader( schema );
     }&lt;br/&gt;
     protected SpecificDatumWriter&amp;lt;T&amp;gt; newWriter() {&lt;br/&gt;
       return new SpecificDatumWriter&amp;lt;&amp;gt;(schema);&lt;br/&gt;
diff --git a/lang/java/pom.xml b/lang/java/pom.xml&lt;br/&gt;
index eae6899de..99f66996e 100644&lt;br/&gt;
&amp;#8212; a/lang/java/pom.xml&lt;br/&gt;
+++ b/lang/java/pom.xml&lt;br/&gt;
@@ -207,6 +207,18 @@&lt;br/&gt;
                 &amp;lt;/systemPropertyVariables&amp;gt;&lt;br/&gt;
               &amp;lt;/configuration&amp;gt;&lt;br/&gt;
             &amp;lt;/execution&amp;gt;&lt;br/&gt;
+            &amp;lt;execution&amp;gt;&lt;br/&gt;
+              &amp;lt;id&amp;gt;test-with-fast-readers&amp;lt;/id&amp;gt;&lt;br/&gt;
+              &amp;lt;phase&amp;gt;test&amp;lt;/phase&amp;gt;&lt;br/&gt;
+              &amp;lt;goals&amp;gt;&lt;br/&gt;
+                &amp;lt;goal&amp;gt;test&amp;lt;/goal&amp;gt;&lt;br/&gt;
+              &amp;lt;/goals&amp;gt;&lt;br/&gt;
+              &amp;lt;configuration&amp;gt;&lt;br/&gt;
+                &amp;lt;systemPropertyVariables&amp;gt;&lt;br/&gt;
+                  &amp;lt;org.apache.avro.fastread&amp;gt;true&amp;lt;/org.apache.avro.fastread&amp;gt;&lt;br/&gt;
+                &amp;lt;/systemPropertyVariables&amp;gt;&lt;br/&gt;
+              &amp;lt;/configuration&amp;gt;&lt;br/&gt;
+            &amp;lt;/execution&amp;gt;&lt;br/&gt;
           &amp;lt;/executions&amp;gt;&lt;br/&gt;
           &amp;lt;configuration&amp;gt;&lt;br/&gt;
             &amp;lt;includes&amp;gt;&lt;br/&gt;
diff --git a/lang/java/protobuf/src/main/java/org/apache/avro/protobuf/ProtobufData.java b/lang/java/protobuf/src/main/java/org/apache/avro/protobuf/ProtobufData.java&lt;br/&gt;
index c725ca0a5..5f7098933 100644&lt;br/&gt;
&amp;#8212; a/lang/java/protobuf/src/main/java/org/apache/avro/protobuf/ProtobufData.java&lt;br/&gt;
+++ b/lang/java/protobuf/src/main/java/org/apache/avro/protobuf/ProtobufData.java&lt;br/&gt;
@@ -63,6 +63,11 @@ protected ProtobufData() {}&lt;br/&gt;
   /** Return the singleton instance. */&lt;br/&gt;
   public static ProtobufData get() { return INSTANCE; }&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  @Override&lt;br/&gt;
+  public boolean isFastReaderEnabled() &lt;/p&gt;
{
+    return false;
+  }&lt;br/&gt;
+&lt;br/&gt;
   @Override&lt;br/&gt;
   public DatumReader createDatumReader(Schema schema) {&lt;br/&gt;
     return new ProtobufDatumReader(schema, schema, this);&lt;br/&gt;
@@ -193,6 +198,7 @@ public Schema getSchema(Class c) {&lt;br/&gt;
 &lt;br/&gt;
   private static final ThreadLocal&amp;lt;Map&amp;lt;Descriptor,Schema&amp;gt;&amp;gt; SEEN&lt;br/&gt;
     = new ThreadLocal&amp;lt;Map&amp;lt;Descriptor,Schema&amp;gt;&amp;gt;() {&lt;br/&gt;
+    @Override&lt;br/&gt;
     protected Map&amp;lt;Descriptor,Schema&amp;gt; initialValue() {
       return new IdentityHashMap&amp;lt;&amp;gt;();
     }&lt;br/&gt;
diff --git a/lang/java/thrift/src/main/java/org/apache/avro/thrift/ThriftData.java b/lang/java/thrift/src/main/java/org/apache/avro/thrift/ThriftData.java&lt;br/&gt;
index 654cd0fc3..fcad34bbb 100644&lt;br/&gt;
&amp;#8212; a/lang/java/thrift/src/main/java/org/apache/avro/thrift/ThriftData.java&lt;br/&gt;
+++ b/lang/java/thrift/src/main/java/org/apache/avro/thrift/ThriftData.java&lt;br/&gt;
@@ -59,6 +59,11 @@ protected ThriftData() {}&lt;br/&gt;
   /** Return the singleton instance. */&lt;br/&gt;
   public static ThriftData get() { return INSTANCE; }&lt;br/&gt;
 &lt;br/&gt;
+  @Override&lt;br/&gt;
+  public boolean isFastReaderEnabled() {+    return false;+  }
&lt;p&gt;+&lt;br/&gt;
   @Override&lt;br/&gt;
   public DatumReader createDatumReader(Schema schema) {&lt;br/&gt;
     return new ThriftDatumReader(schema, schema, this);&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16682275" author="githubbot" created="Sat, 10 Nov 2018 08:39:52 +0000"  >&lt;p&gt;unchuckable commented on issue #354: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/354#issuecomment-437568430&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/354#issuecomment-437568430&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Note: I&apos;d still be grateful for feedback on the concept of the readers as I tried to implement them (i.e. unifying `DatumReader`, `ResolvingDecoder` and `Parser` into one functional structure for faster evaluation)&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16698788" author="githubbot" created="Mon, 26 Nov 2018 11:09:48 +0000"  >&lt;p&gt;unchuckable opened a new pull request #391: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/391&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/391&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Cannot reopen the original PR (#354), since I&apos;ve rebased to current master.&lt;/p&gt;

&lt;p&gt;   I&apos;ve tried to adress the points that @rstata brought up with my approach. The feature switch between traditional and newly suggested reader mechanism now is done inside `GenericDatumReader`. All tests provided with the avro project run smoothly (I stole @rstata&apos;s idea to trigger the tests an additional time with the feature switch enabled). Also fixed defaulting in a way that takes advantage of immutable values and only actually re-reads default objects with a distinct decoder when really required.&lt;/p&gt;

&lt;p&gt;   If there is any more things that would need testing, please do give me a pointer.&lt;/p&gt;

&lt;p&gt;   Overall, the newly proposed writer sacrifices time building a `DatumReader`, allowing it to perform the actual reading at a highly improved rate. For all applications that are remotely &quot;big data&quot;, that tradeoff should turn out highly beneficial.&lt;/p&gt;

&lt;p&gt;   I also included a small module (`benchmark`) that uses JMH to test the performance of the proposed reader approach against the current generic reader. Using JMH should be preferable to Perf.java, for it allows to perform benchmarks in a controlled and statistical significant way.&lt;/p&gt;

&lt;p&gt;   As stated in the last PR, I&apos;m open to any changes, fire ahead. It&apos;s the overall concept and its aparent reader performance gains that I&apos;m chasing after, not having my implementation find its way into the main branch 1:1.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16699651" author="githubbot" created="Mon, 26 Nov 2018 22:37:40 +0000"  >&lt;p&gt;rstata commented on issue #391: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/391#issuecomment-441827690&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/391#issuecomment-441827690&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I will play with it.&lt;/p&gt;

&lt;p&gt;   To get it to build, I added licenses to all the files:&lt;/p&gt;

&lt;p&gt;   &lt;a href=&quot;https://github.com/rstata-projects/avro/tree/unchuckable-fast-avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/rstata-projects/avro/tree/unchuckable-fast-avro&lt;/a&gt;(&lt;a href=&quot;https://github.com/rstata-projects/avro/tree/unchuckable-fast-avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/rstata-projects/avro/tree/unchuckable-fast-avro&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;   For some reason I can&apos;t issue a pull request to your fork, can you pull this change from my repo?&lt;/p&gt;

&lt;p&gt;   Also, how do you invoke the benchmark?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16700045" author="githubbot" created="Tue, 27 Nov 2018 08:10:55 +0000"  >&lt;p&gt;unchuckable commented on issue #391: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/391#issuecomment-441965011&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/391#issuecomment-441965011&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Hi, @rstata.&lt;/p&gt;

&lt;p&gt;   First of all, thanks for looking into it. It means a lot. I&apos;m sorry about the license files; totally forgot about them files this time �� &lt;/p&gt;

&lt;p&gt;   I pulled your change from your repo and pushed it into mine. No clue what&apos;s up with github and the pull request there, if anybody has a pointer on what I would need to set in my repo, any advice is welcome.&lt;/p&gt;

&lt;p&gt;   Invoking the benchmark:&lt;br/&gt;
   `cd lang/java/benchmark`&lt;br/&gt;
   `mvn clean package`&lt;br/&gt;
   `java -jar target/benchmarks.jar` (not the `benchmark-1.9.0-SNAPSHOT`)&lt;/p&gt;

&lt;p&gt;   By default, it will use 5 warmup iterations and 5 measurement iterations with 10 seconds each, and do all of that 5 times, which totals up to almost 3 hours, but it can easily be reduced to more reasonable limits (20 minutes), like:&lt;br/&gt;
   `java -jar target/benchmarks.jar -wi 3 -i 3 -f 1` (3 iterations for warmup and measurement and only 1 repetition)&lt;br/&gt;
   Adding `-e Building` will exclude the buiding of the DatumReaders from the benchmark, and reduce  the total time of evaluation by half currently.&lt;/p&gt;

&lt;p&gt;   The current benchmark classes are only a small excerpt of cases of Perf.java (but trying to replicate them as good as possible). I can gladly add more if it helps the project; it might make sense to move that to a different ticket though, I guess.&lt;/p&gt;


&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16701425" author="githubbot" created="Wed, 28 Nov 2018 06:03:45 +0000"  >&lt;p&gt;rstata commented on issue #391: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/391#issuecomment-442330623&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/391#issuecomment-442330623&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I&apos;ve run your code against `Perf.java` and uploaded the &lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;results here&amp;#93;&lt;/span&gt;(&lt;a href=&quot;https://github.com/apache/avro/files/2623075/AVRO-2247-Perf-results-11-27.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/files/2623075/AVRO-2247-Perf-results-11-27.pdf&lt;/a&gt;).  This report contains two sets of results:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The &quot;avro-2247 (calibration)&quot; column presents the results of running the 2247 branch against itself three different times.  These results are useful for understanding where the Perf.java benchmark tends to have a lot of internal variability.  As an example, the BooleanRead/Write shows a lot of natural variability, which is something I&apos;ve notice in a lot of my previous performance testing.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The &quot;avro-2274 (w/ custom coders) vs&quot; column presents the result of running three different treatments against my avro-2274 branch.  The three sub-columns here are as follows: &quot;master&quot; is the Apache Avro master branch (just prior to avro-2274 being merged into it); &quot;2247 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/lightbulb.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot; branch is the 2247 code with fast-coder turned off; &quot;2247 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/lightbulb_on.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot; is the 2247 branch with coders turned on.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   The last sub-column of &quot;avro-2274 (...) vs&quot; results is the more relevant.  What we see here are a large number of record-related cases showing speedups of 20-30% and even more.  This is very promising.&lt;/p&gt;

&lt;p&gt;   I am currently running the JMH-based benchmarks.  These do &lt;em&gt;not&lt;/em&gt; have an (obvious) mechanism for comparing the &quot;before/after&quot; performance of your proposed changes, but I will be interested in seeing if they do better in reducing the variance between runs.&lt;/p&gt;

&lt;p&gt;   I haven&apos;t inspected your code yet.  I&apos;ll do that as well, and offer some opinions.&lt;/p&gt;


&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16702319" author="githubbot" created="Wed, 28 Nov 2018 19:35:10 +0000"  >&lt;p&gt;unchuckable commented on issue #391: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/391#issuecomment-442576105&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/391#issuecomment-442576105&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I agree that JMH will still be hard pressed for before/after comparisons, unless the change can be toggled with a feature switch at runtime (which fortunately is the case with the proposed change).&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16703673" author="githubbot" created="Thu, 29 Nov 2018 19:13:25 +0000"  >&lt;p&gt;unchuckable commented on issue #391: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/391#issuecomment-442957245&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/391#issuecomment-442957245&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Am currently refactoring the code, to use the refactored `Resolver` of #395. Will post updates soon.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16703867" author="githubbot" created="Thu, 29 Nov 2018 21:48:44 +0000"  >&lt;p&gt;rstata commented on issue #391: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/391#issuecomment-443005833&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/391#issuecomment-443005833&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   On the one hand, the performance results I posted a few days ago certainly demonstrate there is some perfomance improvements to be had for GenericDatumReader.&lt;/p&gt;

&lt;p&gt;   On the other hand, this change introduces 2800 lines of new code that looks like it&apos;d be tedious to maintain.  Also, the comparison here isn&apos;t apples to apples, because the old code is more aggressive about reusing objects, and it attempts to apply conversions, which is pure overhead for the performance tests we&apos;re using but aren&apos;t in other cases.  Finally, looking more closely at GenericDatumReader, it has built into it a BUNCH of &quot;customization&quot; points &amp;#8211; methods and objects that can be replaced to customize the reading process, all of which add overhead in the inner-most loop.  It&apos;s not clear whether how much of the performance gains come from the pre-computation of actions versus simply getting rid of all these customization points.&lt;/p&gt;

&lt;p&gt;   I&apos;m tempted to extend the &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2275&quot; title=&quot;Refactor schema-resolution code from grammar-generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2275&quot;&gt;AVRO-2275&lt;/a&gt; work so that the Action-tree generated by Resolver is a complete mirror of the reader&apos;s schema (right now, it stops at DoNothing nodes, which for Unions in particular could be pretty high-up in the schema&apos;s tree).  Then one could write a FastGenericDatumReader class that simply walks that tree to decode the object.  I suspect the resulting code would be on the order of 100 lines and would capture almost all the speed found in this fast-avro patch.  (And one could decorate the Action objects with any Conversions for LogicalTypes found in the reader&apos;s schema, making it quick and easy to apply conversions while doing the walk.)&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16704451" author="githubbot" created="Fri, 30 Nov 2018 09:11:38 +0000"  >&lt;p&gt;rstata commented on issue #391: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt; - improved java reading performance with new reader&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/391#issuecomment-443139676&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/391#issuecomment-443139676&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @unchuckable &amp;#8211; send an email to &quot;rstata - at - yahoo - . - com&quot; to better coordinate.  Thanks.&lt;br/&gt;
   &apos;&lt;br/&gt;
   &apos;&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12945409" name="Perf-Comparison.md" size="1726" author="unchuckable" created="Wed, 24 Oct 2018 14:23:19 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 24 Oct 2018 14:31:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3zl9b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2248] Added support for Java parameterised types with ReflectData in Avro</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2248</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Hi all,&lt;/p&gt;

&lt;p&gt;Avro doesn&apos;t have support for Parameterised types currently. Ex:&lt;/p&gt;

&lt;p&gt;class Pair&amp;lt;K,V&amp;gt; &lt;/p&gt;
{

K key;

V value;

}

&lt;p&gt;For the above class, the schema generation fails when using ReflectData and ReflectDatumWriter. This is because the type information is not handled within the avro code and is not passed over.&#160;&lt;/p&gt;

&lt;p&gt;For Map/Collection, it is explictly hardcoded and supported within the code but for other generic types, it is not. The fix is modelled on how Map is solved internally and generalises it for all generic type parameters.&lt;/p&gt;

&lt;p&gt;The fix (and patch attached) addresses this by adding a new type called PARAM (like MAP) and is handled in all places including:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;schema generation using ReflectData..getSchema(..&lt;/li&gt;
	&lt;li&gt;schema parsing using Schema.Parser&lt;/li&gt;
	&lt;li&gt;serialization to bytes using ReflectDatumWriter&lt;/li&gt;
	&lt;li&gt;de-serialization from bytes to object using ReflectDatumReader&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The test for the above cases is included in the patch and we have tested it with ~15 level nested type param schemas in our codebase internally here. The current code works for our cases. We are open to fixing bugs that might arise out of this if any.&lt;/p&gt;

&lt;p&gt;Please help us mainline this into avro code as it can be a very useful feature to all. Thanks a lot for the great project!&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;</description>
                <environment></environment>
        <key id="13194229">AVRO-2248</key>
            <summary>Added support for Java parameterised types with ReflectData in Avro</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="10002" iconUrl="https://issues.apache.org/jira/images/icons/statuses/document.png" description="A patch for this issue has been uploaded to JIRA by a contributor.">Patch Available</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="vamsi360">Vamsi Subhash Achanta</reporter>
                        <labels>
                            <label>pull-request-available</label>
                    </labels>
                <created>Thu, 25 Oct 2018 19:31:52 +0000</created>
                <updated>Sun, 28 Oct 2018 10:41:00 +0000</updated>
                                            <version>1.8.2</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="16664205" author="githubbot" created="Thu, 25 Oct 2018 19:33:38 +0000"  >&lt;p&gt;vamsi360 opened a new pull request #356: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2248&quot; title=&quot;Added support for Java parameterised types with ReflectData in Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2248&quot;&gt;AVRO-2248&lt;/a&gt; Custom parameterized types&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/356&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/356&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   This patch allows support for Java Parameterised types in Avro. Ex: Pair&amp;lt;K, V&amp;gt;&lt;/p&gt;

&lt;p&gt;   Corresponding JIRA is: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2248&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-2248&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;   Please review this and I am willing to take suggestions and make required changes to mainline this. Thanks&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16664215" author="vamsi360" created="Thu, 25 Oct 2018 19:38:34 +0000"  >&lt;p&gt;&lt;a href=&quot;https://github.com/apache/avro/pull/356&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/356&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16664380" author="githubbot" created="Thu, 25 Oct 2018 22:48:19 +0000"  >&lt;p&gt;cutting commented on issue #356: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2248&quot; title=&quot;Added support for Java parameterised types with ReflectData in Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2248&quot;&gt;AVRO-2248&lt;/a&gt; Added support for Java parameterized types&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/356#issuecomment-433230868&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/356#issuecomment-433230868&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Adding a new fundamental type of schema is incompatible.  In particular, any implementation that has not implemented this will be unable to read data that uses this feature.  Inclusion of this would thus force a major release of Avro, i.e., 2.0.&lt;/p&gt;

&lt;p&gt;   Also, does this correspond to a natural language feature in all or most of the languages where Avro is implemented?  For those that it does not, how should it appear?  Related, in Java, tests and examples using Generic and Specific data would be useful.  How is a parameterized type&apos;s data represented in Json?  We should not add a fundamental type that&apos;s only really supported by Java&apos;s ReflectData.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16664697" author="githubbot" created="Fri, 26 Oct 2018 05:38:34 +0000"  >&lt;p&gt;vamsi360 commented on issue #356: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2248&quot; title=&quot;Added support for Java parameterised types with ReflectData in Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2248&quot;&gt;AVRO-2248&lt;/a&gt; Added support for Java parameterized types&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/356#issuecomment-433292283&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/356#issuecomment-433292283&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Hi Cutting,&lt;br/&gt;
   Thanks a lot for the reply. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Sure. I have introduced param as a type because that seemed to be a good way to approach this. We can either take this to Avro 2.0 or I can work on making it backwards compatibile - ex: modelling it on top of existing types with extra checks in code to encode/decode as type parameters.&lt;/li&gt;
	&lt;li&gt;The changes are there primarily in GenericData - so they should work with both Specific and ReflectData. I can take up the tests for SpecificData and test the code generation as well. I can submit them in this PR.&lt;/li&gt;
	&lt;li&gt;Reg. schema representation, it is a type &quot;param&quot; with a record underneath. The field types are represented like &quot;name&quot;, &quot;type&quot; as shown below. This is like how Map is implemented already in the code. Ex:&lt;br/&gt;
   ```&lt;br/&gt;
   class Pair&amp;lt;K, V&amp;gt; 
{
   K key;
   V value;
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   {&quot;type&quot;:&quot;param&quot;,&quot;values&quot;:{&quot;type&quot;:&quot;record&quot;,&quot;name&quot;:&quot;PairIntegerString6f72de2f3285b50e&quot;,&quot;namespace&quot;:&quot;org.apache.avro&quot;,&quot;fields&quot;:[&lt;/p&gt;
{&quot;name&quot;:&quot;key&quot;,&quot;type&quot;:&quot;int&quot;}
&lt;p&gt;,&lt;/p&gt;
{&quot;name&quot;:&quot;value&quot;,&quot;type&quot;:&quot;string&quot;}
&lt;p&gt;],&quot;java-class&quot;:&quot;org.apache.avro.TestParamTypes$Pair&quot;}}&lt;br/&gt;
   ```&lt;/p&gt;


&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16665432" author="githubbot" created="Fri, 26 Oct 2018 17:22:20 +0000"  >&lt;p&gt;vamsi360 commented on issue #356: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2248&quot; title=&quot;Added support for Java parameterised types with ReflectData in Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2248&quot;&gt;AVRO-2248&lt;/a&gt; Added support for Java parameterized types&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/356#issuecomment-433482002&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/356#issuecomment-433482002&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Missed one case to handle - the above code only works if the class has only type parameters. I am now working on making it work for mix of both typed-params and normal supported types. Ex:&lt;br/&gt;
   class ABC&amp;lt;U,V&amp;gt; &lt;/p&gt;
{
   U val1;
   V val2;
   String val3;
   Integer val4;
   }

&lt;p&gt;   Will validate approaches and submit the updated patch soon. Will think about solving this with existing types if possible instead of using &quot;param&quot; type.&lt;/p&gt;

&lt;p&gt;   Do let me know if you have any design already in mind for this. Thanks&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16666349" author="githubbot" created="Sun, 28 Oct 2018 10:41:00 +0000"  >&lt;p&gt;vamsi360 commented on issue #356: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2248&quot; title=&quot;Added support for Java parameterised types with ReflectData in Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2248&quot;&gt;AVRO-2248&lt;/a&gt; Added support for Java parameterized types&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/356#issuecomment-433693601&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/356#issuecomment-433693601&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   The case mentioned above of a mix of normal typed params and parameterized types is now working. Ex:&lt;br/&gt;
   class ABC&amp;lt;U,V&amp;gt; &lt;/p&gt;
{
   U val1;
   V val2;
   String val3;
   Integer val4;
   }

&lt;p&gt;   The test for this is also added&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 25 Oct 2018 19:33:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310250" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10430"><![CDATA[Patch]]></customfieldvalue>
    <customfieldvalue key="10431"><![CDATA[Important]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            12 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3zndb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2249] Fix the C++ tests</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2249</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Currently the C++ tests are failing:&lt;br/&gt;
```&lt;br/&gt;
Scanning dependencies of target avrocpp_s&lt;br/&gt;
[  1%] Building CXX object CMakeFiles/avrocpp_s.dir/impl/Compiler.cc.o&lt;br/&gt;
/testptch/unknown/lang/c++/impl/Compiler.cc:174:15: warning: &#226;&#8364;&#732;std::string avro::nameof(const NodePtr&amp;amp;)&#226;&#8364;&#8482; defined but not used &lt;span class=&quot;error&quot;&gt;&amp;#91;-Wunused-function&amp;#93;&lt;/span&gt;&lt;br/&gt;
 static string nameof(const NodePtr&amp;amp; n)&lt;br/&gt;
               ^&lt;br/&gt;
[  2%] Building CXX object CMakeFiles/avrocpp_s.dir/impl/Node.cc.o&lt;br/&gt;
[  4%] Building CXX object CMakeFiles/avrocpp_s.dir/impl/NodeImpl.cc.o&lt;br/&gt;
/testptch/unknown/lang/c++/impl/NodeImpl.cc: In function &#226;&#8364;&#732;std::string avro::&lt;/p&gt;
{anonymous}::escape(const string&amp;amp;)&#226;&#8364;&#8482;:&lt;br/&gt;
/testptch/unknown/lang/c+&lt;ins&gt;/impl/NodeImpl.cc:31:8: warning: &#226;&#8364;&#732;auto&#226;&#8364;&#8482; changes meaning in C&lt;/ins&gt;+11; please remove it &lt;span class=&quot;error&quot;&gt;&amp;#91;-Wc++0x-compat&amp;#93;&lt;/span&gt;&lt;br/&gt;
   for (auto c : unescaped) {&lt;br/&gt;
        ^&lt;br/&gt;
/testptch/unknown/lang/c++/impl/NodeImpl.cc:31:13: error: &#226;&#8364;&#732;c&#226;&#8364;&#8482; does not name a type&lt;br/&gt;
   for (auto c : unescaped) {&lt;br/&gt;
             ^&lt;br/&gt;
/testptch/unknown/lang/c++/impl/NodeImpl.cc:67:3: error: expected &#226;&#8364;&#732;;&#226;&#8364;&#8482; before &#226;&#8364;&#732;return&#226;&#8364;&#8482;&lt;br/&gt;
   return s;&lt;br/&gt;
   ^&lt;br/&gt;
/testptch/unknown/lang/c++/impl/NodeImpl.cc:67:3: error: expected primary-expression before &#226;&#8364;&#732;return&#226;&#8364;&#8482;&lt;br/&gt;
/testptch/unknown/lang/c++/impl/NodeImpl.cc:67:3: error: expected &#226;&#8364;&#732;;&#226;&#8364;&#8482; before &#226;&#8364;&#732;return&#226;&#8364;&#8482;&lt;br/&gt;
/testptch/unknown/lang/c++/impl/NodeImpl.cc:67:3: error: expected primary-expression before &#226;&#8364;&#732;return&#226;&#8364;&#8482;&lt;br/&gt;
/testptch/unknown/lang/c++/impl/NodeImpl.cc:67:3: error: expected &#226;&#8364;&#732;)&#226;&#8364;&#8482; before &#226;&#8364;&#732;return&#226;&#8364;&#8482;&lt;br/&gt;
In file included from /usr/include/boost/assert.hpp:51:0,&lt;br/&gt;
                 from /usr/include/boost/format/parsing.hpp:21,&lt;br/&gt;
                 from /usr/include/boost/format.hpp:50,&lt;br/&gt;
                 from /testptch/unknown/lang/c++/api/Exception.hh:24,&lt;br/&gt;
                 from /testptch/unknown/lang/c++/api/Node.hh:28,&lt;br/&gt;
                 from /testptch/unknown/lang/c++/api/GenericDatum.hh:29,&lt;br/&gt;
                 from /testptch/unknown/lang/c++/api/NodeImpl.hh:23,&lt;br/&gt;
                 from /testptch/unknown/lang/c++/impl/NodeImpl.cc:21:&lt;br/&gt;
/testptch/unknown/lang/c++/impl/NodeImpl.cc: In member function &#226;&#8364;&#732;virtual void avro::NodeRecord::printJson(std::ostream&amp;amp;, int) const&#226;&#8364;&#8482;:&lt;br/&gt;
/testptch/unknown/lang/c++/impl/NodeImpl.cc:247:59: warning: comparison between signed and unsigned integer expressions &lt;span class=&quot;error&quot;&gt;&amp;#91;-Wsign-compare&amp;#93;&lt;/span&gt;&lt;br/&gt;
     assert(defaultValues.empty() || (defaultValues.size() == fields));&lt;br/&gt;
                                                           ^&lt;br/&gt;
/testptch/unknown/lang/c++/impl/NodeImpl.cc: In member function &#226;&#8364;&#732;virtual void avro::NodePrimitive::printDefaultToJson(const avro::GenericDatum&amp;amp;, std::ostream&amp;amp;, int) const&#226;&#8364;&#8482;:&lt;br/&gt;
/testptch/unknown/lang/c++/impl/NodeImpl.cc:292:13: error: &#226;&#8364;&#732;to_string&#226;&#8364;&#8482; is not a member of &#226;&#8364;&#732;std&#226;&#8364;&#8482;&lt;br/&gt;
       os &amp;lt;&amp;lt; std::to_string(g.value&amp;lt;float&amp;gt;());&lt;br/&gt;
             ^&lt;br/&gt;
/testptch/unknown/lang/c++/impl/NodeImpl.cc:295:13: error: &#226;&#8364;&#732;to_string&#226;&#8364;&#8482; is not a member of &#226;&#8364;&#732;std&#226;&#8364;&#8482;&lt;br/&gt;
       os &amp;lt;&amp;lt; std::to_string(g.value&amp;lt;double&amp;gt;());&lt;br/&gt;
             ^&lt;br/&gt;
/testptch/unknown/lang/c++/impl/NodeImpl.cc: In function &#226;&#8364;&#732;std::string avro::{anonymous}
&lt;p&gt;::escape(const string&amp;amp;)&#226;&#8364;&#8482;:&lt;br/&gt;
/testptch/unknown/lang/c++/impl/NodeImpl.cc:68:1: warning: control reaches end of non-void function &lt;span class=&quot;error&quot;&gt;&amp;#91;-Wreturn-type&amp;#93;&lt;/span&gt;&lt;br/&gt;
 }&lt;br/&gt;
 ^&lt;br/&gt;
CMakeFiles/avrocpp_s.dir/build.make:100: recipe for target &apos;CMakeFiles/avrocpp_s.dir/impl/NodeImpl.cc.o&apos; failed&lt;br/&gt;
make&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;: *** &lt;span class=&quot;error&quot;&gt;&amp;#91;CMakeFiles/avrocpp_s.dir/impl/NodeImpl.cc.o&amp;#93;&lt;/span&gt; Error 1&lt;br/&gt;
make&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;: *** &lt;span class=&quot;error&quot;&gt;&amp;#91;CMakeFiles/avrocpp_s.dir/all&amp;#93;&lt;/span&gt; Error 2&lt;br/&gt;
CMakeFiles/Makefile2:425: recipe for target &apos;CMakeFiles/avrocpp_s.dir/all&apos; failed&lt;br/&gt;
make: *** &lt;span class=&quot;error&quot;&gt;&amp;#91;all&amp;#93;&lt;/span&gt; Error 2&lt;br/&gt;
Makefile:147: recipe for target &apos;all&apos; failed&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;</description>
                <environment></environment>
        <key id="13194395">AVRO-2249</key>
            <summary>Fix the C++ tests</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21148&amp;avatarType=issuetype">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thiru_mg">Thiruvalluvan M. G.</assignee>
                                    <reporter username="Fokko">Fokko Driesprong</reporter>
                        <labels>
                    </labels>
                <created>Fri, 26 Oct 2018 12:05:09 +0000</created>
                <updated>Sun, 28 Oct 2018 12:55:42 +0000</updated>
                            <resolved>Sun, 28 Oct 2018 12:55:42 +0000</resolved>
                                    <version>1.8.2</version>
                                    <fixVersion>1.8.4</fixVersion>
                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="16665905" author="thiru_mg" created="Sat, 27 Oct 2018 04:27:07 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Fokko&quot; class=&quot;user-hover&quot; rel=&quot;Fokko&quot;&gt;Fokko Driesprong&lt;/a&gt; I made a pull request for the fix of this issue. Is it possible for you to verify that it indeed fixes your problem? If yes, please merge the pull request and mark this issue resolved.&lt;/p&gt;

&lt;p&gt;If you have difficulty in building outside `master`, I&apos;ll merge the PR and you can then verify and mark the issue resolved. Thank you.&lt;/p&gt;</comment>
                            <comment id="16666341" author="githubbot" created="Sun, 28 Oct 2018 09:50:03 +0000"  >&lt;p&gt;Fokko closed pull request #360: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2249&quot; title=&quot;Fix the C++ tests&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2249&quot;&gt;&lt;del&gt;AVRO-2249&lt;/del&gt;&lt;/a&gt; Fix for C++ build failures&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/360&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/360&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/c+&lt;ins&gt;/api/DataFile.hh b/lang/c&lt;/ins&gt;+/api/DataFile.hh&lt;br/&gt;
index d95f09bbc..30cae5ada 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/api/DataFile.hh&lt;br/&gt;
+++ b/lang/c++/api/DataFile.hh&lt;br/&gt;
@@ -183,7 +183,7 @@ public:&lt;br/&gt;
  */&lt;br/&gt;
 class AVRO_DECL DataFileReaderBase : boost::noncopyable {&lt;br/&gt;
     const std::string filename_;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;const std::auto_ptr&amp;lt;SeekableInputStream&amp;gt; stream_;&lt;br/&gt;
+    const std::auto_ptr&amp;lt;InputStream&amp;gt; stream_;&lt;br/&gt;
     const DecoderPtr decoder_;&lt;br/&gt;
     int64_t objectCount_;&lt;br/&gt;
     bool eof_;&lt;br/&gt;
@@ -207,6 +207,7 @@ class AVRO_DECL DataFileReaderBase : boost::noncopyable 
{
     void readHeader();
 
     bool readDataBlock();
+    void doSeek(int64_t position);
 public:
     /**
      * Returns the current decoder for this reader.
diff --git a/lang/c++/impl/DataFile.cc b/lang/c++/impl/DataFile.cc
index fdfd5b97a..56ec6195b 100644
--- a/lang/c++/impl/DataFile.cc
+++ b/lang/c++/impl/DataFile.cc
@@ -90,12 +90,12 @@ DataFileWriterBase::DataFileWriterBase(const char* filename, const ValidSchema&amp;amp;
 
 DataFileWriterBase::DataFileWriterBase(std::auto_ptr&amp;lt;OutputStream&amp;gt; outputStream,
     const ValidSchema&amp;amp; schema, size_t syncInterval, Codec codec) :
-    filename_(nullptr),
+    filename_(NULL),
     schema_(schema),
     encoderPtr_(binaryEncoder()),
     syncInterval_(syncInterval),
     codec_(codec),
-    stream_(std::move(outputStream)),
+    stream_(outputStream),
     buffer_(memoryOutputStream()),
     sync_(makeSync()),
     objectCount_(0)
@@ -281,7 +281,7 @@ DataFileReaderBase::DataFileReaderBase(const char* filename) :
 }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; DataFileReaderBase::DataFileReaderBase(std::auto_ptr&amp;lt;InputStream&amp;gt; inputStream) :&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;filename_(nullptr), stream_(inputStream),&lt;br/&gt;
+    filename_(NULL), stream_(inputStream),&lt;br/&gt;
     decoder_(binaryDecoder()), objectCount_(0), eof_(false)
 {
     readHeader();
@@ -527,25 +527,27 @@ void DataFileReaderBase::readHeader()
     blockStart_ = stream_-&amp;gt;byteCount();
 }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;-void DataFileReaderBase::seek(int64_t position) {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if (!eof_) {&lt;/li&gt;
	&lt;li&gt;dataDecoder_-&amp;gt;init(*dataStream_);&lt;/li&gt;
	&lt;li&gt;drain(*dataStream_);&lt;br/&gt;
+void DataFileReaderBase::doSeek(int64_t position) {&lt;br/&gt;
+    if (SeekableInputStream *ss = dynamic_cast&amp;lt;SeekableInputStream *&amp;gt;(stream_.get())) 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+        if (!eof_) {
+            dataDecoder_-&amp;gt;init(*dataStream_);
+            drain(*dataStream_);
+        }+        decoder_-&amp;gt;init(*stream_);+        ss-&amp;gt;seek(position);+        eof_ = false;+    }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt; else &lt;/p&gt;
{
+        throw Exception(&quot;seek not supported on non-SeekableInputStream&quot;);
     }&lt;/li&gt;
	&lt;li&gt;decoder_-&amp;gt;init(*stream_);&lt;/li&gt;
	&lt;li&gt;stream_-&amp;gt;seek(position);&lt;/li&gt;
	&lt;li&gt;eof_ = false;&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+void DataFileReaderBase::seek(int64_t position) 
{
+    doSeek(position);
     readDataBlock();
 }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; void DataFileReaderBase::sync(int64_t position) {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if (!eof_) 
{
-        dataDecoder_-&amp;gt;init(*dataStream_);
-        drain(*dataStream_);
-    }&lt;/li&gt;
	&lt;li&gt;decoder_-&amp;gt;init(*stream_);&lt;/li&gt;
	&lt;li&gt;stream_-&amp;gt;seek(position);&lt;/li&gt;
	&lt;li&gt;eof_ = false;&lt;br/&gt;
+    doSeek(position);&lt;br/&gt;
     DataFileSync sync_buffer;&lt;br/&gt;
     const uint8_t *p = 0;&lt;br/&gt;
     size_t n = 0;&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/impl/NodeImpl.cc b/lang/c&lt;/ins&gt;+/impl/NodeImpl.cc&lt;br/&gt;
index 435d2ef5d..1969406da 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/c++/impl/NodeImpl.cc&lt;br/&gt;
+++ b/lang/c++/impl/NodeImpl.cc&lt;br/&gt;
@@ -28,7 +28,8 @@ namespace {&lt;br/&gt;
 std::string escape(const std::string &amp;amp;unescaped) {&lt;br/&gt;
   std::string s;&lt;br/&gt;
   s.reserve(unescaped.length());&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;for (auto c : unescaped) {&lt;br/&gt;
+  for (std::string::const_iterator it = unescaped.begin(); it != unescaped.end(); ++it) {&lt;br/&gt;
+    char c = *it;&lt;br/&gt;
     switch (c) {&lt;br/&gt;
       case &apos;&lt;br class=&quot;atl-forced-newline&quot; /&gt;&apos;:&lt;br/&gt;
       case &apos;&quot;&apos;:&lt;br/&gt;
@@ -289,10 +290,10 @@ void NodePrimitive::printDefaultToJson(const GenericDatum &amp;amp;g, std::ostream &amp;amp;os,&lt;br/&gt;
       os &amp;lt;&amp;lt; g.value&amp;lt;int64_t&amp;gt;();&lt;br/&gt;
       break;&lt;br/&gt;
     case AVRO_FLOAT:&lt;/li&gt;
	&lt;li&gt;os &amp;lt;&amp;lt; std::to_string(g.value&amp;lt;float&amp;gt;());&lt;br/&gt;
+      os &amp;lt;&amp;lt; g.value&amp;lt;float&amp;gt;();&lt;br/&gt;
       break;&lt;br/&gt;
     case AVRO_DOUBLE:&lt;/li&gt;
	&lt;li&gt;os &amp;lt;&amp;lt; std::to_string(g.value&amp;lt;double&amp;gt;());&lt;br/&gt;
+      os &amp;lt;&amp;lt; g.value&amp;lt;double&amp;gt;();&lt;br/&gt;
       break;&lt;br/&gt;
     case AVRO_STRING:&lt;br/&gt;
       os &amp;lt;&amp;lt; &quot;\&quot;&quot; &amp;lt;&amp;lt; escape(g.value&amp;lt;std::string&amp;gt;()) &amp;lt;&amp;lt; &quot;\&quot;&quot;;&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16666342" author="jira-bot" created="Sun, 28 Oct 2018 09:50:08 +0000"  >&lt;p&gt;Commit c9a62f3c2530f5c957edca4b5096f74c78b408a3 in avro&apos;s branch refs/heads/master from Thiruvalluvan M G&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=c9a62f3&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=c9a62f3&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2249&quot; title=&quot;Fix the C++ tests&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2249&quot;&gt;&lt;del&gt;AVRO-2249&lt;/del&gt;&lt;/a&gt; Fix for C++ build failures (#360)&lt;/p&gt;
</comment>
                            <comment id="16666389" author="thiru_mg" created="Sun, 28 Oct 2018 12:55:42 +0000"  >&lt;p&gt;Thank you &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Fokko&quot; class=&quot;user-hover&quot; rel=&quot;Fokko&quot;&gt;Fokko Driesprong&lt;/a&gt; for merging the pull request.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 27 Oct 2018 04:27:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            12 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3zoe7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
