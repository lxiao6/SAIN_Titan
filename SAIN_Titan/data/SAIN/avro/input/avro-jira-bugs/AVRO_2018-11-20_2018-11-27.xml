<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:27:33 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2018-11-20+AND+created+%3C%3D+2018-11-27+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="5" total="5"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-2271] C++ Support for Custom Fields </title>
                <link>https://issues.apache.org/jira/browse/AVRO-2271</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;To support following schemas:&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;R&quot;({&quot;type&quot;: &quot;string&quot;, &quot;logicalType&quot;: &quot;foo&quot;, &quot;sqlType&quot;: &quot;datetime&quot;})&quot;,
R&quot;({&quot;type&quot;: &quot;bytes&quot;, &quot;logicalType&quot;: &quot;decimal&quot;, &quot;precision&quot;: 12, &quot;scale&quot;: 6, &quot;sqlType&quot;: &quot;datetime&quot;})&quot;,
R&quot;({&quot;type&quot;: &quot;null&quot;, &quot;extra attribute&quot;: &quot;custom field&quot;})&quot;,
R&quot;({&quot;type&quot;: &quot;boolean&quot;, &quot;extra1&quot;: 1, &quot;extra2&quot;: 2, &quot;extra3&quot;: 3})&quot;,
R&quot;({&quot;type&quot;: &quot;fixed&quot;, &quot;name&quot;: &quot;Test&quot;, &quot;size&quot;: 1, &quot;extra attribute&quot;: 1})&quot;, 
R&quot;([&quot;null&quot;, \{&quot;type&quot;: &quot;string&quot;, &quot;extra attribute&quot;: &quot;custom field&quot;}])&quot;,
R&quot;([\{&quot;type&quot;: &quot;string&quot;, &quot;extra attribute&quot;: &quot;custom field&quot;}, &quot;null&quot;])&quot;,
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;</description>
                <environment></environment>
        <key id="13199495">AVRO-2271</key>
            <summary>C++ Support for Custom Fields </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="aniket486">Aniket Mokashi</assignee>
                                    <reporter username="aniket486">Aniket Mokashi</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Nov 2018 03:12:15 +0000</created>
                <updated>Mon, 31 Dec 2018 06:22:13 +0000</updated>
                                            <version>1.8.2</version>
                                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="16692591" author="githubbot" created="Tue, 20 Nov 2018 03:14:11 +0000"  >&lt;p&gt;aniket486 opened a new pull request #387: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2271&quot; title=&quot;C++ Support for Custom Fields &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2271&quot;&gt;AVRO-2271&lt;/a&gt;: C++ Support for Custom Fields&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/387&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/387&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16692902" author="githubbot" created="Tue, 20 Nov 2018 09:17:09 +0000"  >&lt;p&gt;Fokko commented on issue #387: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2271&quot; title=&quot;C++ Support for Custom Fields &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2271&quot;&gt;AVRO-2271&lt;/a&gt;: C++ Support for Custom Fields&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/387#issuecomment-440199939&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/387#issuecomment-440199939&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Sad CI:&lt;br/&gt;
   ```&lt;br/&gt;
   Scanning dependencies of target avrocpp_s&lt;br/&gt;
   [  1%] Building CXX object CMakeFiles/avrocpp_s.dir/impl/Compiler.cc.o&lt;br/&gt;
   /testptch/unknown/lang/c++/impl/Compiler.cc: In function &#226;&#8364;&#732;void avro::addCustomFields(const NodePtr&amp;amp;, const Object&amp;amp;)&#226;&#8364;&#8482;:&lt;br/&gt;
   /testptch/unknown/lang/c+&lt;ins&gt;/impl/Compiler.cc:299:53: error: in C&lt;/ins&gt;+98 &#226;&#8364;&#732;kKnownFields&#226;&#8364;&#8482; must be initialized by constructor, not by &#226;&#8364;&#732;&lt;/p&gt;
{...}
&lt;p&gt;&#226;&#8364;&#8482;&lt;br/&gt;
             &quot;values&quot;, &quot;precision&quot;, &quot;scale&quot;, &quot;namespace&quot;};&lt;br/&gt;
                                                        ^&lt;br/&gt;
   /testptch/unknown/lang/c++/impl/Compiler.cc:299:53: error: could not convert &#226;&#8364;&#732;&lt;/p&gt;
{&quot;name&quot;, &quot;type&quot;, &quot;default&quot;, &quot;doc&quot;, &quot;size&quot;, &quot;logicalType&quot;, &quot;values&quot;, &quot;precision&quot;, &quot;scale&quot;, &quot;namespace&quot;}
&lt;p&gt;&#226;&#8364;&#8482; from &#226;&#8364;&#732;&amp;lt;brace-enclosed initializer list&amp;gt;&#226;&#8364;&#8482; to &#226;&#8364;&#732;const std::__debug::vector&amp;lt;std::basic_string&amp;lt;char&amp;gt;, std::allocator&amp;lt;std::basic_string&amp;lt;char&amp;gt; &amp;gt; &amp;gt;&#226;&#8364;&#8482;&lt;br/&gt;
   /testptch/unknown/lang/c+&lt;ins&gt;/impl/Compiler.cc:300:16: warning: &#226;&#8364;&#732;auto&#226;&#8364;&#8482; changes meaning in C&lt;/ins&gt;+11; please remove it &lt;span class=&quot;error&quot;&gt;&amp;#91;-Wc++0x-compat&amp;#93;&lt;/span&gt;&lt;br/&gt;
        for (const auto &amp;amp;entry : m) {&lt;br/&gt;
                   ^&lt;br/&gt;
   /testptch/unknown/lang/c+&lt;ins&gt;/impl/Compiler.cc:300:22: error: ISO C&lt;/ins&gt;+ forbids declaration of &#226;&#8364;&#732;entry&#226;&#8364;&#8482; with no type &lt;span class=&quot;error&quot;&gt;&amp;#91;-fpermissive&amp;#93;&lt;/span&gt;&lt;br/&gt;
        for (const auto &amp;amp;entry : m) {&lt;br/&gt;
                         ^&lt;br/&gt;
   /testptch/unknown/lang/c+&lt;ins&gt;/impl/Compiler.cc:300:30: error: range-based &#226;&#8364;&#732;for&#226;&#8364;&#8482; loops are not allowed in C&lt;/ins&gt;+98 mode&lt;br/&gt;
        for (const auto &amp;amp;entry : m) {&lt;br/&gt;
                                 ^&lt;br/&gt;
   /testptch/unknown/lang/c++/impl/Compiler.cc:301:71: error: request for member &#226;&#8364;&#732;first&#226;&#8364;&#8482; in &#226;&#8364;&#732;entry&#226;&#8364;&#8482;, which is of non-class type &#226;&#8364;&#732;const int&#226;&#8364;&#8482;&lt;br/&gt;
            if (std::find(kKnownFields.begin(), kKnownFields.end(), entry.first)&lt;br/&gt;
                                                                          ^&lt;br/&gt;
   /testptch/unknown/lang/c++/impl/Compiler.cc:303:40: error: request for member &#226;&#8364;&#732;first&#226;&#8364;&#8482; in &#226;&#8364;&#732;entry&#226;&#8364;&#8482;, which is of non-class type &#226;&#8364;&#732;const int&#226;&#8364;&#8482;&lt;br/&gt;
                node-&amp;gt;addCustomField(entry.first, entry.second);&lt;br/&gt;
                                           ^&lt;br/&gt;
   /testptch/unknown/lang/c++/impl/Compiler.cc:303:53: error: request for member &#226;&#8364;&#732;second&#226;&#8364;&#8482; in &#226;&#8364;&#732;entry&#226;&#8364;&#8482;, which is of non-class type &#226;&#8364;&#732;const int&#226;&#8364;&#8482;&lt;br/&gt;
                node-&amp;gt;addCustomField(entry.first, entry.second);&lt;br/&gt;
                                                        ^&lt;br/&gt;
   make&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;: *** &lt;span class=&quot;error&quot;&gt;&amp;#91;CMakeFiles/avrocpp_s.dir/impl/Compiler.cc.o&amp;#93;&lt;/span&gt; Error 1&lt;br/&gt;
   CMakeFiles/avrocpp_s.dir/build.make:54: recipe for target &apos;CMakeFiles/avrocpp_s.dir/impl/Compiler.cc.o&apos; failed&lt;br/&gt;
   make&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;: *** &lt;span class=&quot;error&quot;&gt;&amp;#91;CMakeFiles/avrocpp_s.dir/all&amp;#93;&lt;/span&gt; Error 2&lt;br/&gt;
   CMakeFiles/Makefile2:425: recipe for target &apos;CMakeFiles/avrocpp_s.dir/all&apos; failed&lt;br/&gt;
   make: *** &lt;span class=&quot;error&quot;&gt;&amp;#91;all&amp;#93;&lt;/span&gt; Error 2&lt;br/&gt;
   Makefile:147: recipe for target &apos;all&apos; failed&lt;br/&gt;
   ```&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16696203" author="githubbot" created="Thu, 22 Nov 2018 19:06:35 +0000"  >&lt;p&gt;gioragutt commented on issue #387: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2271&quot; title=&quot;C++ Support for Custom Fields &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2271&quot;&gt;AVRO-2271&lt;/a&gt;: C++ Support for Custom Fields&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/387#issuecomment-441105415&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/387#issuecomment-441105415&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   You&apos;re using C+&lt;ins&gt;11 features, such as `initializer_list` and `range-for`, and seeing that the CI runs the code on C&lt;/ins&gt;+98 (or just anything under 11) is problematic...&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16697638" author="githubbot" created="Sat, 24 Nov 2018 04:34:16 +0000"  >&lt;p&gt;thiru-apache commented on issue #387: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2271&quot; title=&quot;C++ Support for Custom Fields &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2271&quot;&gt;AVRO-2271&lt;/a&gt;: C++ Support for Custom Fields&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/387#issuecomment-441342983&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/387#issuecomment-441342983&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Instead of having a new class `CustomFields` can we not define a simple `typedef`?&lt;/p&gt;

&lt;p&gt;           typedef std::map&amp;lt;std::string, json::Entity&amp;gt;&lt;/p&gt;

&lt;p&gt;   There is a little bit check done in `addCustomField()` member of the new class. That can be moved into its caller namely `addCustomField()` of `Node`.&lt;/p&gt;

&lt;p&gt;   At @gioragutt has mentioned, the code needs to compile under pre-2011 compilers.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16699813" author="githubbot" created="Tue, 27 Nov 2018 02:14:08 +0000"  >&lt;p&gt;aniket486 commented on issue #387: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2271&quot; title=&quot;C++ Support for Custom Fields &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2271&quot;&gt;AVRO-2271&lt;/a&gt;: C++ Support for Custom Fields&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/387#issuecomment-441872020&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/387#issuecomment-441872020&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thanks. I have made changes to CMakeLists.txt to catch C++98 compat issues sooner during development process.&lt;/p&gt;

&lt;p&gt;   I have made suggested changes to the code. PTAL.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 20 Nov 2018 03:14:11 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|s00oiw:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2272] SchemaParseException: Can&apos;t redefine: list in AvroIndexedRecordConverter</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2272</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Companion issue to &lt;a href=&quot;https://issues.apache.org/jira/browse/PARQUET-1441&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PARQUET-1441&lt;/a&gt;, and &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-25588&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/SPARK-25588&lt;/a&gt;, since those issues in downstream projects don&apos;t seem to be getting any notice.&lt;/p&gt;

&lt;p&gt;I&apos;ve been able to create unit tests that reproduce the issue downstream in Spark and Parquet; I would appreciate any help reproducing the issue in the Avro codebase directly.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13199899">AVRO-2272</key>
            <summary>SchemaParseException: Can&apos;t redefine: list in AvroIndexedRecordConverter</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="heuermh">Michael Heuer</reporter>
                        <labels>
                    </labels>
                <created>Wed, 21 Nov 2018 18:16:19 +0000</created>
                <updated>Sun, 25 Nov 2018 13:25:56 +0000</updated>
                                            <version>1.8.2</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="16698058" author="thiru_mg" created="Sun, 25 Nov 2018 04:45:40 +0000"  >&lt;p&gt;Let me take a stab at it.&lt;/p&gt;</comment>
                            <comment id="16698169" author="thiru_mg" created="Sun, 25 Nov 2018 13:25:56 +0000"  >&lt;p&gt;Looked at it and &lt;a href=&quot;https://issues.apache.org/jira/browse/PARQUET-1441?focusedCommentId=16698168&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16698168&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;commented&lt;/a&gt; on &lt;a href=&quot;https://issues.apache.org/jira/browse/PARQUET-1441&quot; title=&quot;SchemaParseException: Can&amp;#39;t redefine: list in AvroIndexedRecordConverter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PARQUET-1441&quot;&gt;PARQUET-1441&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 25 Nov 2018 04:45:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|s00qyg:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2273] Release 1.8.3</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2273</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;This ticket is for releasing Avro 1.8.3 and discussing any topics related to it.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13200357">AVRO-2273</key>
            <summary>Release 1.8.3</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21148&amp;avatarType=issuetype">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="thiru_mg">Thiruvalluvan M. G.</reporter>
                        <labels>
                    </labels>
                <created>Sat, 24 Nov 2018 12:57:58 +0000</created>
                <updated>Sun, 30 Dec 2018 05:18:38 +0000</updated>
                                                            <fixVersion>1.8.3</fixVersion>
                                    <component>release</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="16700244" author="iemejia" created="Tue, 27 Nov 2018 11:04:22 +0000"  >&lt;p&gt;What are the goals here? Apart of minor fixes? The security issues have not been backported yet. Maybe we should just encourage people to move to 1.9.0 better, no?&lt;br/&gt;
Otherwise probably we should do the list of issues/PRs to backport but seems like a lot of extra work vs jumping straight to 1.9.x.&lt;/p&gt;</comment>
                            <comment id="16706286" author="fokko" created="Sun, 2 Dec 2018 13:49:44 +0000"  >&lt;p&gt;I agree with you on this one Isma&#235;l.&lt;/p&gt;</comment>
                            <comment id="16709009" author="busbey" created="Tue, 4 Dec 2018 17:20:17 +0000"  >&lt;p&gt;Reminder that in Avro the second number is a major version. So asking folks to upgrade to 1.9.0 is a lot to ask. The project can certainly require that; any folks who want to still have the earlier versions can come help drive those releases. Just something to be aware of, probably worth a DISCUSS thread on dev@avro?&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 27 Nov 2018 11:04:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|s00trc:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2274] Improve resolving performance when schemas don&apos;t change</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2274</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Decoding optimizations based on the observation that schemas don&apos;t change very much.  We add special-case paths to optimize the case where a _sub_schema of the reader and the writer are the same.  The specific cases are:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;In the case of an enumeration, if the reader and writer are the same, then we can simply return the tag written by the writer rather than &quot;adjust&quot; it as if it might have been re-ordered.  In fact, we can do this (directly return the tag written by the writer) as long as the reader-schema is an &quot;extension&quot; of the writer&apos;s in that it may have added new symbols but hasn&apos;t renumbered any of the writer&apos;s symbols.  Enumerations that either don&apos;t change at all or are &quot;extended&quot; as defined here are the common ways to extend enumerations.  (Our tests show this optimization improves performance by about 3%.)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;When the reader and writer subschemas are both unions, resolution is expensive: we have an outer union preceded by a &quot;writer-union action&quot;, but each branch of this outer union consist of union-adjust actions, which are heavy weight.  We optimize this case when the reader and writer unions are the same: we fall back on the standard grammar used for a union, avoiding all these adjustments.  Since unions are commonly used to encode &quot;nullable&quot; fields in Avro, and nullability rarely changes as a schema evolves, this optimization should help many users.  (Our tests show this optimization improves performance by 25-30%, a significant win.)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The &quot;custom code&quot; generated for reading records has to read fields in a loop that uses a switch statement to deal with writers that may have re-ordered fields.  In most cases, however, fields have not been reordered (esp. in more complex records with many record sub-schemas).  So we&apos;ve added a new method to ResolvingDecoder called readFieldOrderIfDiff, which is a variant of the existing readFieldOrder.  If the field order has indeed changed, then readFieldOrderIfDiff returns the new field order, just like readFieldOrder does.  However, if the field-order hasn&apos;t changed, then readFieldOrderIfDiff returns null.  We then modified the generation of custom-decoders for records to add a special-case path that simply reads the record&apos;s fields in order, without incurring the overhead of the loop or the switch statement.  (Our tests show this optimization improves performance by 8-9%, on top of the 35-40% produced by the original custom-coder optimization.)&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="13200470">AVRO-2274</key>
            <summary>Improve resolving performance when schemas don&apos;t change</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="raymie">Raymie Stata</assignee>
                                    <reporter username="raymie">Raymie Stata</reporter>
                        <labels>
                    </labels>
                <created>Mon, 26 Nov 2018 00:45:00 +0000</created>
                <updated>Wed, 28 Nov 2018 03:34:16 +0000</updated>
                            <resolved>Wed, 28 Nov 2018 03:34:16 +0000</resolved>
                                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="16699547" author="githubbot" created="Mon, 26 Nov 2018 20:33:35 +0000"  >&lt;p&gt;rstata opened a new pull request #393: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/393&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/393&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Optimize schema-resolution code in cases where subschemas of the reader and writer don&apos;t change.  Short story: unchanged enumerations improve by 3%, SpecificRecord with unchanged field-order improve by 8-9%, and unchanged unions improve by 25% (should be a big win for record schemas with lots of nullable fields).  See &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt;(&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-2274&lt;/a&gt;) for details.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16699817" author="githubbot" created="Tue, 27 Nov 2018 02:18:10 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #393: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/393#discussion_r236498083&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/393#discussion_r236498083&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -490,10 +511,20 @@ public static EnumAdjustAction enumAdjustAction(int rsymCount, Object[] adj) {&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   public static class EnumAdjustAction extends IntCheckAction {&lt;br/&gt;
+    public final boolean noAdjustments;&lt;br/&gt;
     public final Object[] adjustments;&lt;br/&gt;
     @Deprecated public EnumAdjustAction(int rsymCount, Object[] adjustments) {&lt;br/&gt;
       super(rsymCount);&lt;br/&gt;
       this.adjustments = adjustments;&lt;br/&gt;
+      boolean noAdj = true;&lt;br/&gt;
+      if (adjustments != null) {&lt;br/&gt;
+        int count = Math.min(rsymCount, adjustments.length);&lt;br/&gt;
+        noAdj = (adjustments.length &amp;lt;= rsymCount);&lt;br/&gt;
+        for (int i = 0; noAdj &amp;amp;&amp;amp; i &amp;lt; count; i++)&lt;br/&gt;
+          noAdj &amp;amp;= ((adjustments&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; instanceof Integer)&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   We can break out of the loop when we see first `false`.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16699818" author="githubbot" created="Tue, 27 Nov 2018 02:18:10 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #393: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/393#discussion_r236497934&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/393#discussion_r236497934&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -559,9 +590,14 @@ public static FieldOrderAction fieldOrderAction(Schema.Field[] fields) {&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   public static final class FieldOrderAction extends ImplicitAction {&lt;br/&gt;
+    public final boolean noReorder;&lt;br/&gt;
     public final Schema.Field[] fields;&lt;br/&gt;
     @Deprecated public FieldOrderAction(Schema.Field[] fields) {&lt;br/&gt;
       this.fields = fields;&lt;br/&gt;
+      boolean noReorder = true;&lt;br/&gt;
+      for (int i = 0; i &amp;lt; fields.length; i++)&lt;br/&gt;
+        noReorder &amp;amp;= (i == fields&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos());&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Same as above loop optimization.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16699871" author="githubbot" created="Tue, 27 Nov 2018 03:14:59 +0000"  >&lt;p&gt;rstata commented on a change in pull request #393: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/393#discussion_r236507073&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/393#discussion_r236507073&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -559,9 +590,14 @@ public static FieldOrderAction fieldOrderAction(Schema.Field[] fields) {&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   public static final class FieldOrderAction extends ImplicitAction {&lt;br/&gt;
+    public final boolean noReorder;&lt;br/&gt;
     public final Schema.Field[] fields;&lt;br/&gt;
     @Deprecated public FieldOrderAction(Schema.Field[] fields) {&lt;br/&gt;
       this.fields = fields;&lt;br/&gt;
+      boolean noReorder = true;&lt;br/&gt;
+      for (int i = 0; i &amp;lt; fields.length; i++)&lt;br/&gt;
+        noReorder &amp;amp;= (i == fields&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos());&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   New version breaks out early.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16699872" author="githubbot" created="Tue, 27 Nov 2018 03:15:31 +0000"  >&lt;p&gt;rstata commented on a change in pull request #393: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/393#discussion_r236507147&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/393#discussion_r236507147&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -490,10 +511,20 @@ public static EnumAdjustAction enumAdjustAction(int rsymCount, Object[] adj) {&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   public static class EnumAdjustAction extends IntCheckAction {&lt;br/&gt;
+    public final boolean noAdjustments;&lt;br/&gt;
     public final Object[] adjustments;&lt;br/&gt;
     @Deprecated public EnumAdjustAction(int rsymCount, Object[] adjustments) {&lt;br/&gt;
       super(rsymCount);&lt;br/&gt;
       this.adjustments = adjustments;&lt;br/&gt;
+      boolean noAdj = true;&lt;br/&gt;
+      if (adjustments != null) {&lt;br/&gt;
+        int count = Math.min(rsymCount, adjustments.length);&lt;br/&gt;
+        noAdj = (adjustments.length &amp;lt;= rsymCount);&lt;br/&gt;
+        for (int i = 0; noAdj &amp;amp;&amp;amp; i &amp;lt; count; i++)&lt;br/&gt;
+          noAdj &amp;amp;= ((adjustments&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; instanceof Integer)&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   I think you highlighted this as an illustration, rather than as a &quot;todo&quot; item, so I&apos;m resolving the comment.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16699897" author="githubbot" created="Tue, 27 Nov 2018 04:01:08 +0000"  >&lt;p&gt;rstata commented on issue #393: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/393#issuecomment-441896997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/393#issuecomment-441896997&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Grumble: hit the date-formatting problem again:&lt;/p&gt;

&lt;p&gt;       &lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt;   TestSpecificLogicalTypes.testAbilityToReadJodaRecordWrittenAsJsr310Record:203 &lt;br/&gt;
       Expected: is &quot;03:26:37&quot;&lt;br/&gt;
            but: was &quot;03:26:37.000&quot;&lt;/p&gt;

&lt;p&gt;   Will try to restart build.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16699899" author="githubbot" created="Tue, 27 Nov 2018 04:02:05 +0000"  >&lt;p&gt;rstata closed pull request #393: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/393&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/393&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java b/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java&lt;br/&gt;
index 8f1f6a95b..45ff922fd 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java&lt;br/&gt;
@@ -129,6 +129,19 @@ public static Object resolve(Schema writer, Schema reader)&lt;br/&gt;
       fields;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+  /**&lt;br/&gt;
+   * Same as &lt;/p&gt;
{@link readFieldOrder}
&lt;p&gt; except that it returns&lt;br/&gt;
+   * &amp;lt;tt&amp;gt;null&amp;lt;/tt&amp;gt; if there was no reordering of fields, i.e., if the&lt;br/&gt;
+   * correct thing for the reader to do is to read (all) of its fields&lt;br/&gt;
+   * in the order specified by its own schema (useful for&lt;br/&gt;
+   * optimizations).&lt;br/&gt;
+   */&lt;br/&gt;
+  public final Schema.Field[] readFieldOrderIfDiff() throws IOException &lt;/p&gt;
{
+    Symbol.FieldOrderAction top
+      = (Symbol.FieldOrderAction) parser.advance(Symbol.FIELD_ACTION);
+    return (top.noReorder ? null : top.fields);
+  }
&lt;p&gt;+&lt;br/&gt;
   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Consume any more data that has been written by the writer but not&lt;/li&gt;
	&lt;li&gt;needed by the reader so that the the underlying decoder is in proper&lt;br/&gt;
@@ -252,6 +265,7 @@ public int readEnum() throws IOException {&lt;br/&gt;
     parser.advance(Symbol.ENUM);&lt;br/&gt;
     Symbol.EnumAdjustAction top = (Symbol.EnumAdjustAction) parser.popSymbol();&lt;br/&gt;
     int n = in.readEnum();&lt;br/&gt;
+    if (top.noAdjustments) return n;&lt;br/&gt;
     Object o = top.adjustments&lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;;&lt;br/&gt;
     if (o instanceof Integer) {&lt;br/&gt;
       return ((Integer) o).intValue();&lt;br/&gt;
@@ -263,9 +277,17 @@ public int readEnum() throws IOException {&lt;br/&gt;
   @Override&lt;br/&gt;
   public int readIndex() throws IOException {&lt;br/&gt;
     parser.advance(Symbol.UNION);&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Symbol.UnionAdjustAction top = (Symbol.UnionAdjustAction) parser.popSymbol();&lt;/li&gt;
	&lt;li&gt;parser.pushSymbol(top.symToParse);&lt;/li&gt;
	&lt;li&gt;return top.rindex;&lt;br/&gt;
+    Symbol top = parser.popSymbol();&lt;br/&gt;
+    int result;&lt;br/&gt;
+    if (top instanceof Symbol.UnionAdjustAction) 
{
+      result = ((Symbol.UnionAdjustAction) top).rindex;
+      top = ((Symbol.UnionAdjustAction) top).symToParse;
+    }
&lt;p&gt; else &lt;/p&gt;
{
+      result = in.readIndex();
+      top = ((Symbol.Alternative) top).getSymbol(result);
+    }
&lt;p&gt;+    parser.pushSymbol(top);&lt;br/&gt;
+    return result;&lt;br/&gt;
   }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   @Override&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java b/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java&lt;br/&gt;
index 71978824b..61073dce8 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java&lt;br/&gt;
@@ -76,8 +76,8 @@ public final Symbol generate(Schema writer, Schema reader)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@return          The start symbol for the resolving grammar&lt;/li&gt;
	&lt;li&gt;@throws IOException&lt;br/&gt;
    */&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public Symbol generate(Schema writer, Schema reader,&lt;/li&gt;
	&lt;li&gt;Map&amp;lt;LitS, Symbol&amp;gt; seen) throws IOException&lt;br/&gt;
+  private Symbol generate(Schema writer, Schema reader, Map&amp;lt;LitS, Symbol&amp;gt; seen)&lt;br/&gt;
+    throws IOException&lt;br/&gt;
   {&lt;br/&gt;
     final Schema.Type writerType = writer.getType();&lt;br/&gt;
     final Schema.Type readerType = reader.getType();&lt;br/&gt;
@@ -204,6 +204,9 @@ public Symbol generate(Schema writer, Schema reader,&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   private Symbol resolveUnion(Schema writer, Schema reader,&lt;br/&gt;
       Map&amp;lt;LitS, Symbol&amp;gt; seen) throws IOException {&lt;br/&gt;
+    boolean needsAdj = ! unionEquiv(writer, reader, new HashMap&amp;lt;&amp;gt;());&lt;br/&gt;
+    List&amp;lt;Schema&amp;gt; alts2 = (!needsAdj ? reader.getTypes() : null);&lt;br/&gt;
+&lt;br/&gt;
     List&amp;lt;Schema&amp;gt; alts = writer.getTypes();&lt;br/&gt;
     final int size = alts.size();&lt;br/&gt;
     Symbol[] symbols = new Symbol&lt;span class=&quot;error&quot;&gt;&amp;#91;size&amp;#93;&lt;/span&gt;;&lt;br/&gt;
@@ -215,12 +218,72 @@ private Symbol resolveUnion(Schema writer, Schema reader,&lt;br/&gt;
      */&lt;br/&gt;
     int i = 0;&lt;br/&gt;
     for (Schema w : alts) &lt;/p&gt;
{
-      symbols[i] = generate(w, reader, seen);
+      symbols[i] = generate(w, (needsAdj ? reader : alts2.get(i)), seen);
       labels[i] = w.getFullName();
       i++;
     }
&lt;p&gt;+    if (! needsAdj)&lt;br/&gt;
+      return Symbol.seq(Symbol.alt(symbols, labels), Symbol.UNION);&lt;br/&gt;
     return Symbol.seq(Symbol.alt(symbols, labels),&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Symbol.writerUnionAction());&lt;br/&gt;
+                      Symbol.WRITER_UNION_ACTION);&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private static boolean unionEquiv(Schema w, Schema r, Map&amp;lt;LitS, Boolean&amp;gt; seen) {&lt;br/&gt;
+    Schema.Type wt = w.getType();&lt;br/&gt;
+    if (wt != r.getType()) return false;&lt;br/&gt;
+    if ((wt == Schema.Type.RECORD || wt == Schema.Type.FIXED || wt == Schema.Type.ENUM)&lt;br/&gt;
+        &amp;amp;&amp;amp; ! (w.getFullName() == null || w.getFullName().equals(r.getFullName())))&lt;br/&gt;
+      return false;&lt;br/&gt;
+&lt;br/&gt;
+    switch (w.getType()) {&lt;br/&gt;
+    case NULL: case BOOLEAN: case INT: case LONG: case FLOAT: case DOUBLE:&lt;br/&gt;
+    case STRING: case BYTES:&lt;br/&gt;
+      return true;&lt;br/&gt;
+&lt;br/&gt;
+    case ARRAY: return unionEquiv(w.getElementType(), r.getElementType(), seen);&lt;br/&gt;
+    case MAP: return unionEquiv(w.getValueType(), r.getValueType(), seen);&lt;br/&gt;
+&lt;br/&gt;
+    case FIXED: return w.getFixedSize() == r.getFixedSize();&lt;br/&gt;
+&lt;br/&gt;
+    case ENUM: 
{
+      List&amp;lt;String&amp;gt; ws = w.getEnumSymbols();
+      List&amp;lt;String&amp;gt; rs = r.getEnumSymbols();
+      if (ws.size() != rs.size()) return false;
+      int i = 0;
+      for (i = 0; i &amp;lt; ws.size(); i++)
+        if (! ws.get(i).equals(rs.get(i))) break;
+      return i == ws.size();
+    }
&lt;p&gt;+&lt;br/&gt;
+    case UNION: &lt;/p&gt;
{
+      List&amp;lt;Schema&amp;gt; wb = w.getTypes();
+      List&amp;lt;Schema&amp;gt; rb = r.getTypes();
+      if (wb.size() != rb.size()) return false;
+      int i = 0;
+      for (i = 0; i &amp;lt; wb.size(); i++)
+        if (! unionEquiv(wb.get(i), rb.get(i), seen)) break;
+      return i == wb.size();
+    }
&lt;p&gt;+&lt;br/&gt;
+    case RECORD: {&lt;br/&gt;
+      LitS wsc = new LitS2(w, r);&lt;br/&gt;
+      if (! seen.containsKey(wsc)) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+        seen.put(wsc, true); // Be optimistic, but we may change our minds+        List&amp;lt;Field&amp;gt; wb = w.getFields();+        List&amp;lt;Field&amp;gt; rb = r.getFields();+        if (wb.size() != rb.size()) seen.put(wsc, false);+        else {
+          int i = 0;
+          for (i = 0; i &amp;lt; wb.size(); i++)
+            if (! unionEquiv(wb.get(i).schema(), rb.get(i).schema(), seen)) break;
+          seen.put(wsc, (i == wb.size()));
+        }+      }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+      return seen.get(wsc);&lt;br/&gt;
+    }&lt;br/&gt;
+    default:&lt;br/&gt;
+      throw new IllegalArgumentException(&quot;Unknown schema type: &quot; + w.getType());&lt;br/&gt;
+    }&lt;br/&gt;
   }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   private Symbol resolveRecords(Schema writer, Schema reader,&lt;br/&gt;
@@ -564,4 +627,3 @@ public int hashCode() {&lt;br/&gt;
      }&lt;br/&gt;
    }&lt;br/&gt;
 }&lt;br/&gt;
-&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java b/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java&lt;br/&gt;
index 187942400..4494ec0a2 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java&lt;br/&gt;
@@ -156,6 +156,27 @@ public int flattenedSize() {&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;tt&amp;gt;Sequence&amp;lt;/tt&amp;gt; in the input are replaced by its production recursively.&lt;/li&gt;
	&lt;li&gt;Non-&amp;lt;tt&amp;gt;Sequence&amp;lt;/tt&amp;gt; symbols, they internally have other symbols&lt;/li&gt;
	&lt;li&gt;those internal symbols also get flattened.&lt;br/&gt;
+   * When flattening is done, the only place there might be Sequence&lt;br/&gt;
+   * symbols is in the productions of a Repeater, Alternative, or the&lt;br/&gt;
+   * symToParse and symToSkip in a UnionAdjustAction or SkipAction.&lt;br/&gt;
+   *&lt;br/&gt;
+   * Why is this done?  We want our parsers to be fast.  If we left&lt;br/&gt;
+   * the grammars unflattened, then the parser would be constantly&lt;br/&gt;
+   * copying the contents of nested Sequence productions onto the&lt;br/&gt;
+   * parsing stack.  Instead, because of flattening, we have a long&lt;br/&gt;
+   * top-level production with no Sequences unless the Sequence is&lt;br/&gt;
+   * absolutely needed, e.g., in the case of a Repeater or an&lt;br/&gt;
+   * Alterantive.&lt;br/&gt;
+   *&lt;br/&gt;
+   * Well, this is not exactly true when recursion is involved.  Where&lt;br/&gt;
+   * there is a recursive record, that record will be &quot;inlined&quot; once,&lt;br/&gt;
+   * but any internal (ie, recursive) references to that record will&lt;br/&gt;
+   * be a Sequence for the record.  That Sequence will not further&lt;br/&gt;
+   * inline itself &amp;#8211; it will refer to itself as a Sequence.  The same&lt;br/&gt;
+   * is true for any records nested in this outer recursive record.&lt;br/&gt;
+   * Recursion is rare, and we want things to be fast in the typical&lt;br/&gt;
+   * case, which is why we do the flattening optimization.&lt;br/&gt;
+   *&lt;br/&gt;
    *&lt;/li&gt;
	&lt;li&gt;The algorithm does a few tricks to handle recursive symbol definitions.&lt;/li&gt;
	&lt;li&gt;In order to avoid infinite recursion with recursive symbols, we have a map&lt;br/&gt;
@@ -490,10 +511,20 @@ public static EnumAdjustAction enumAdjustAction(int rsymCount, Object[] adj) {&lt;br/&gt;
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   public static class EnumAdjustAction extends IntCheckAction {&lt;br/&gt;
+    public final boolean noAdjustments;&lt;br/&gt;
     public final Object[] adjustments;&lt;br/&gt;
     @Deprecated public EnumAdjustAction(int rsymCount, Object[] adjustments) {&lt;br/&gt;
       super(rsymCount);&lt;br/&gt;
       this.adjustments = adjustments;&lt;br/&gt;
+      boolean noAdj = true;&lt;br/&gt;
+      if (adjustments != null) &lt;/p&gt;
{
+        int count = Math.min(rsymCount, adjustments.length);
+        noAdj = (adjustments.length &amp;lt;= rsymCount);
+        for (int i = 0; noAdj &amp;amp;&amp;amp; i &amp;lt; count; i++)
+          noAdj &amp;amp;= ((adjustments[i] instanceof Integer)
+                    &amp;amp;&amp;amp; i == (Integer)adjustments[i]);
+      }
&lt;p&gt;+      this.noAdjustments = noAdj;&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;@@ -559,9 +590,14 @@ public static FieldOrderAction fieldOrderAction(Schema.Field[] fields) {&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   public static final class FieldOrderAction extends ImplicitAction {&lt;br/&gt;
+    public final boolean noReorder;&lt;br/&gt;
     public final Schema.Field[] fields;&lt;br/&gt;
     @Deprecated public FieldOrderAction(Schema.Field[] fields) &lt;/p&gt;
{
       this.fields = fields;
+      boolean noReorder = true;
+      for (int i = 0; noReorder &amp;amp;&amp;amp; i &amp;lt; fields.length; i++)
+        noReorder &amp;amp;= (i == fields[i].pos());
+      this.noReorder = noReorder;
     }
&lt;p&gt;   }&lt;/p&gt;

&lt;p&gt;@@ -645,6 +681,8 @@ public int findLabel(String l) {&lt;br/&gt;
   public static final Symbol MAP_END = new Symbol.Terminal(&quot;map-end&quot;);&lt;br/&gt;
   public static final Symbol ITEM_END = new Symbol.Terminal(&quot;item-end&quot;);&lt;/p&gt;

&lt;p&gt;+  public static final Symbol WRITER_UNION_ACTION = writerUnionAction();&lt;br/&gt;
+&lt;br/&gt;
   /* a pseudo terminal used by parsers */&lt;br/&gt;
   public static final Symbol FIELD_ACTION =&lt;br/&gt;
     new Symbol.Terminal(&quot;field-action&quot;);&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/io/parsing/SymbolTest.java b/lang/java/avro/src/test/java/org/apache/avro/io/parsing/SymbolTest.java&lt;br/&gt;
index ce4d7df96..f5b9ca0b9 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/io/parsing/SymbolTest.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/io/parsing/SymbolTest.java&lt;br/&gt;
@@ -50,9 +50,7 @@&lt;br/&gt;
   @Test&lt;br/&gt;
   public void testSomeMethod() throws IOException &lt;/p&gt;
{
     Schema schema = new Schema.Parser().parse(SCHEMA);
-
-    Symbol root = Symbol.root(new ResolvingGrammarGenerator()
-        .generate(schema, schema, new HashMap&amp;lt;&amp;gt;()));
+    Symbol root = new ResolvingGrammarGenerator().generate(schema, schema);
     validateNonNull(root, new HashSet&amp;lt;&amp;gt;());
   }

&lt;p&gt;diff --git a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
index 523c151fc..bef14252d 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
+++ b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
@@ -555,25 +555,40 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
   @Override protected void customDecode(org.apache.avro.io.ResolvingDecoder in)&lt;br/&gt;
     throws java.io.IOException&lt;br/&gt;
   {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrder();&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt; $schema.getFields().size(); i++) {&lt;/li&gt;
	&lt;li&gt;switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;br/&gt;
+    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();&lt;br/&gt;
+    if (fieldOrder == null) {&lt;br/&gt;
+## Common case: order of fields hasn&apos;t changed, so read them in a&lt;br/&gt;
+## fixed order according to reader&apos;s schema&lt;br/&gt;
+#set ($nv = 0)## Counter to ensure unique var-names&lt;br/&gt;
+#set ($maxnv = 0)## Holds high-water mark during recursion&lt;br/&gt;
+#foreach ($field in $schema.getFields())&lt;br/&gt;
+#set ($n = $this.mangle($field.name(), $schema.isError()))&lt;br/&gt;
+#set ($s = $field.schema())&lt;br/&gt;
+#set ($rs = &quot;SCHEMA$.getField(&quot;&quot;${n}&quot;&quot;).schema()&quot;)&lt;br/&gt;
+#decodeVar(2 &quot;this.${n}&quot; $s $rs)&lt;br/&gt;
+&lt;br/&gt;
+#set ($nv = $maxnv)&lt;br/&gt;
+#end&lt;br/&gt;
+    } else {&lt;br/&gt;
+      for (int i = 0; i &amp;lt; $schema.getFields().size(); i++) {&lt;br/&gt;
+        switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;br/&gt;
 #set ($fieldno = 0)&lt;br/&gt;
 #set ($nv = 0)## Counter to ensure unique var-names&lt;br/&gt;
 #set ($maxnv = 0)## Holds high-water mark during recursion&lt;br/&gt;
 #foreach ($field in $schema.getFields())&lt;/li&gt;
	&lt;li&gt;case $fieldno:&lt;br/&gt;
+        case $fieldno:&lt;br/&gt;
 #set ($n = $this.mangle($field.name(), $schema.isError()))&lt;br/&gt;
 #set ($s = $field.schema())&lt;br/&gt;
 #set ($rs = &quot;SCHEMA$.getField(&quot;&quot;${n}&quot;&quot;).schema()&quot;)&lt;br/&gt;
-#decodeVar(4 &quot;this.${n}&quot; $s $rs)&lt;/li&gt;
	&lt;li&gt;break;&lt;br/&gt;
+#decodeVar(6 &quot;this.${n}&quot; $s $rs)&lt;br/&gt;
+          break;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; #set ($nv = $maxnv)&lt;br/&gt;
 #set ($fieldno = $fieldno + 1)&lt;br/&gt;
 #end&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;default:&lt;/li&gt;
	&lt;li&gt;throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+        default:&lt;br/&gt;
+          throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+        }&lt;br/&gt;
       }&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;br/&gt;
diff --git a/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java b/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java&lt;br/&gt;
index c972235ed..af6e486cb 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java&lt;br/&gt;
+++ b/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java&lt;br/&gt;
@@ -503,40 +503,64 @@ public Player build() {&lt;br/&gt;
   @Override protected void customDecode(org.apache.avro.io.ResolvingDecoder in)&lt;br/&gt;
     throws java.io.IOException&lt;br/&gt;
   {&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrder();&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt; 4; i++) {&lt;/li&gt;
	&lt;li&gt;switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;/li&gt;
	&lt;li&gt;case 0:&lt;/li&gt;
	&lt;li&gt;this.number = in.readInt();&lt;/li&gt;
	&lt;li&gt;break;&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;case 1:&lt;/li&gt;
	&lt;li&gt;this.first_name = in.readString();&lt;/li&gt;
	&lt;li&gt;break;&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;case 2:&lt;/li&gt;
	&lt;li&gt;this.last_name = in.readString();&lt;/li&gt;
	&lt;li&gt;break;&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;case 3:&lt;/li&gt;
	&lt;li&gt;long size0 = in.readArrayStart();&lt;/li&gt;
	&lt;li&gt;java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position;&lt;/li&gt;
	&lt;li&gt;if (a0 == null) 
{
-          a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());
-          this.position = a0;
-        } else a0.clear();&lt;br/&gt;
-        SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;br/&gt;
-        for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) {&lt;br/&gt;
-          for ( ; size0 != 0; size0--) {
-            avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
-            e0 = avro.examples.baseball.Position.values()[in.readEnum()];
-            a0.add(e0);
-          }&lt;br/&gt;
+    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();&lt;br/&gt;
+    if (fieldOrder == null) {&lt;br/&gt;
+      this.number = in.readInt();&lt;br/&gt;
+&lt;br/&gt;
+      this.first_name = in.readString();&lt;br/&gt;
+&lt;br/&gt;
+      this.last_name = in.readString();&lt;br/&gt;
+&lt;br/&gt;
+      long size0 = in.readArrayStart();&lt;br/&gt;
+      java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position;&lt;br/&gt;
+      if (a0 == null) {
+        a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());
+        this.position = a0;
+      } else a0.clear();&lt;br/&gt;
+      SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;br/&gt;
+      for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) {&lt;br/&gt;
+        for ( ; size0 != 0; size0--) {
+          avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
+          e0 = avro.examples.baseball.Position.values()[in.readEnum()];
+          a0.add(e0);
         }&lt;br/&gt;
-        break;&lt;br/&gt;
+      }&lt;br/&gt;
+&lt;br/&gt;
+    } else {&lt;br/&gt;
+      for (int i = 0; i &amp;lt; 4; i++) {&lt;br/&gt;
+        switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;br/&gt;
+        case 0:&lt;br/&gt;
+          this.number = in.readInt();&lt;br/&gt;
+          break;&lt;br/&gt;
+&lt;br/&gt;
+        case 1:&lt;br/&gt;
+          this.first_name = in.readString();&lt;br/&gt;
+          break;&lt;br/&gt;
+&lt;br/&gt;
+        case 2:&lt;br/&gt;
+          this.last_name = in.readString();&lt;br/&gt;
+          break;&lt;br/&gt;
+&lt;br/&gt;
+        case 3:&lt;br/&gt;
+          long size0 = in.readArrayStart();&lt;br/&gt;
+          java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position;&lt;br/&gt;
+          if (a0 == null) {
+            a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());
+            this.position = a0;
+          } else a0.clear();&lt;br/&gt;
+          SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;br/&gt;
+          for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) {&lt;br/&gt;
+            for ( ; size0 != 0; size0--) {
+              avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
+              e0 = avro.examples.baseball.Position.values()[in.readEnum()];
+              a0.add(e0);
+            }&lt;br/&gt;
+          }&lt;br/&gt;
+          break;&lt;br/&gt;
 &lt;br/&gt;
-      default:&lt;br/&gt;
-        throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+        default:&lt;br/&gt;
+          throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+        }&lt;br/&gt;
       }&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;br/&gt;
diff --git a/lang/java/tools/src/test/compiler/output/Player.java b/lang/java/tools/src/test/compiler/output/Player.java&lt;br/&gt;
index af4e8f783..8376389f1 100644&lt;br/&gt;
&amp;#8212; a/lang/java/tools/src/test/compiler/output/Player.java&lt;br/&gt;
+++ b/lang/java/tools/src/test/compiler/output/Player.java&lt;br/&gt;
@@ -503,40 +503,64 @@ public Player build() {&lt;br/&gt;
   @Override protected void customDecode(org.apache.avro.io.ResolvingDecoder in)&lt;br/&gt;
     throws java.io.IOException&lt;br/&gt;
   {&lt;br/&gt;
-    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrder();&lt;br/&gt;
-    for (int i = 0; i &amp;lt; 4; i++) {&lt;br/&gt;
-      switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;br/&gt;
-      case 0:&lt;br/&gt;
-        this.number = in.readInt();&lt;br/&gt;
-        break;&lt;br/&gt;
-&lt;br/&gt;
-      case 1:&lt;br/&gt;
-        this.first_name = in.readString(this.first_name instanceof Utf8 ? (Utf8)this.first_name : null);&lt;br/&gt;
-        break;&lt;br/&gt;
-&lt;br/&gt;
-      case 2:&lt;br/&gt;
-        this.last_name = in.readString(this.last_name instanceof Utf8 ? (Utf8)this.last_name : null);&lt;br/&gt;
-        break;&lt;br/&gt;
-&lt;br/&gt;
-      case 3:&lt;br/&gt;
-        long size0 = in.readArrayStart();&lt;br/&gt;
-        java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position;&lt;br/&gt;
-        if (a0 == null) {-          a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());-          this.position = a0;-        }
&lt;p&gt; else a0.clear();&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;/li&gt;
	&lt;li&gt;for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) {&lt;/li&gt;
	&lt;li&gt;for ( ; size0 != 0; size0--) 
{
-            avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
-            e0 = avro.examples.baseball.Position.values()[in.readEnum()];
-            a0.add(e0);
-          }
&lt;p&gt;+    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();&lt;br/&gt;
+    if (fieldOrder == null) {&lt;br/&gt;
+      this.number = in.readInt();&lt;br/&gt;
+&lt;br/&gt;
+      this.first_name = in.readString(this.first_name instanceof Utf8 ? (Utf8)this.first_name : null);&lt;br/&gt;
+&lt;br/&gt;
+      this.last_name = in.readString(this.last_name instanceof Utf8 ? (Utf8)this.last_name : null);&lt;br/&gt;
+&lt;br/&gt;
+      long size0 = in.readArrayStart();&lt;br/&gt;
+      java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position;&lt;br/&gt;
+      if (a0 == null) &lt;/p&gt;
{
+        a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());
+        this.position = a0;
+      }
&lt;p&gt; else a0.clear();&lt;br/&gt;
+      SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;br/&gt;
+      for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) {&lt;br/&gt;
+        for ( ; size0 != 0; size0--) &lt;/p&gt;
{
+          avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
+          e0 = avro.examples.baseball.Position.values()[in.readEnum()];
+          a0.add(e0);
         }&lt;/li&gt;
	&lt;li&gt;break;&lt;br/&gt;
+      }&lt;br/&gt;
+&lt;br/&gt;
+    } else {&lt;br/&gt;
+      for (int i = 0; i &amp;lt; 4; i++) {&lt;br/&gt;
+        switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;br/&gt;
+        case 0:&lt;br/&gt;
+          this.number = in.readInt();&lt;br/&gt;
+          break;&lt;br/&gt;
+&lt;br/&gt;
+        case 1:&lt;br/&gt;
+          this.first_name = in.readString(this.first_name instanceof Utf8 ? (Utf8)this.first_name : null);&lt;br/&gt;
+          break;&lt;br/&gt;
+&lt;br/&gt;
+        case 2:&lt;br/&gt;
+          this.last_name = in.readString(this.last_name instanceof Utf8 ? (Utf8)this.last_name : null);&lt;br/&gt;
+          break;&lt;br/&gt;
+&lt;br/&gt;
+        case 3:&lt;br/&gt;
+          long size0 = in.readArrayStart();&lt;br/&gt;
+          java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position;&lt;br/&gt;
+          if (a0 == null) 
{
+            a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());
+            this.position = a0;
+          }
&lt;p&gt; else a0.clear();&lt;br/&gt;
+          SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;br/&gt;
+          for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+            for ( ; size0 != 0; size0--) {
+              avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
+              e0 = avro.examples.baseball.Position.values()[in.readEnum()];
+              a0.add(e0);
+            }+          }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+          break;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;default:&lt;/li&gt;
	&lt;li&gt;throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+        default:&lt;br/&gt;
+          throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+        }&lt;br/&gt;
       }&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16699901" author="githubbot" created="Tue, 27 Nov 2018 04:02:10 +0000"  >&lt;p&gt;rstata opened a new pull request #393: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/393&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/393&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Optimize schema-resolution code in cases where subschemas of the reader and writer don&apos;t change.  Short story: unchanged enumerations improve by 3%, SpecificRecord with unchanged field-order improve by 8-9%, and unchanged unions improve by 25% (should be a big win for record schemas with lots of nullable fields).  See &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt;(&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-2274&lt;/a&gt;) for details.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16701360" author="githubbot" created="Wed, 28 Nov 2018 03:32:49 +0000"  >&lt;p&gt;thiru-apache closed pull request #393: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/393&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/393&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java b/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java&lt;br/&gt;
index 8f1f6a95b..45ff922fd 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java&lt;br/&gt;
@@ -129,6 +129,19 @@ public static Object resolve(Schema writer, Schema reader)&lt;br/&gt;
       fields;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+  /**&lt;br/&gt;
+   * Same as &lt;/p&gt;
{@link readFieldOrder}
&lt;p&gt; except that it returns&lt;br/&gt;
+   * &amp;lt;tt&amp;gt;null&amp;lt;/tt&amp;gt; if there was no reordering of fields, i.e., if the&lt;br/&gt;
+   * correct thing for the reader to do is to read (all) of its fields&lt;br/&gt;
+   * in the order specified by its own schema (useful for&lt;br/&gt;
+   * optimizations).&lt;br/&gt;
+   */&lt;br/&gt;
+  public final Schema.Field[] readFieldOrderIfDiff() throws IOException &lt;/p&gt;
{
+    Symbol.FieldOrderAction top
+      = (Symbol.FieldOrderAction) parser.advance(Symbol.FIELD_ACTION);
+    return (top.noReorder ? null : top.fields);
+  }
&lt;p&gt;+&lt;br/&gt;
   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Consume any more data that has been written by the writer but not&lt;/li&gt;
	&lt;li&gt;needed by the reader so that the the underlying decoder is in proper&lt;br/&gt;
@@ -252,6 +265,7 @@ public int readEnum() throws IOException {&lt;br/&gt;
     parser.advance(Symbol.ENUM);&lt;br/&gt;
     Symbol.EnumAdjustAction top = (Symbol.EnumAdjustAction) parser.popSymbol();&lt;br/&gt;
     int n = in.readEnum();&lt;br/&gt;
+    if (top.noAdjustments) return n;&lt;br/&gt;
     Object o = top.adjustments&lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;;&lt;br/&gt;
     if (o instanceof Integer) {&lt;br/&gt;
       return ((Integer) o).intValue();&lt;br/&gt;
@@ -263,9 +277,17 @@ public int readEnum() throws IOException {&lt;br/&gt;
   @Override&lt;br/&gt;
   public int readIndex() throws IOException {&lt;br/&gt;
     parser.advance(Symbol.UNION);&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Symbol.UnionAdjustAction top = (Symbol.UnionAdjustAction) parser.popSymbol();&lt;/li&gt;
	&lt;li&gt;parser.pushSymbol(top.symToParse);&lt;/li&gt;
	&lt;li&gt;return top.rindex;&lt;br/&gt;
+    Symbol top = parser.popSymbol();&lt;br/&gt;
+    int result;&lt;br/&gt;
+    if (top instanceof Symbol.UnionAdjustAction) 
{
+      result = ((Symbol.UnionAdjustAction) top).rindex;
+      top = ((Symbol.UnionAdjustAction) top).symToParse;
+    }
&lt;p&gt; else &lt;/p&gt;
{
+      result = in.readIndex();
+      top = ((Symbol.Alternative) top).getSymbol(result);
+    }
&lt;p&gt;+    parser.pushSymbol(top);&lt;br/&gt;
+    return result;&lt;br/&gt;
   }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   @Override&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java b/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java&lt;br/&gt;
index 71978824b..61073dce8 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java&lt;br/&gt;
@@ -76,8 +76,8 @@ public final Symbol generate(Schema writer, Schema reader)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@return          The start symbol for the resolving grammar&lt;/li&gt;
	&lt;li&gt;@throws IOException&lt;br/&gt;
    */&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public Symbol generate(Schema writer, Schema reader,&lt;/li&gt;
	&lt;li&gt;Map&amp;lt;LitS, Symbol&amp;gt; seen) throws IOException&lt;br/&gt;
+  private Symbol generate(Schema writer, Schema reader, Map&amp;lt;LitS, Symbol&amp;gt; seen)&lt;br/&gt;
+    throws IOException&lt;br/&gt;
   {&lt;br/&gt;
     final Schema.Type writerType = writer.getType();&lt;br/&gt;
     final Schema.Type readerType = reader.getType();&lt;br/&gt;
@@ -204,6 +204,9 @@ public Symbol generate(Schema writer, Schema reader,&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   private Symbol resolveUnion(Schema writer, Schema reader,&lt;br/&gt;
       Map&amp;lt;LitS, Symbol&amp;gt; seen) throws IOException {&lt;br/&gt;
+    boolean needsAdj = ! unionEquiv(writer, reader, new HashMap&amp;lt;&amp;gt;());&lt;br/&gt;
+    List&amp;lt;Schema&amp;gt; alts2 = (!needsAdj ? reader.getTypes() : null);&lt;br/&gt;
+&lt;br/&gt;
     List&amp;lt;Schema&amp;gt; alts = writer.getTypes();&lt;br/&gt;
     final int size = alts.size();&lt;br/&gt;
     Symbol[] symbols = new Symbol&lt;span class=&quot;error&quot;&gt;&amp;#91;size&amp;#93;&lt;/span&gt;;&lt;br/&gt;
@@ -215,12 +218,72 @@ private Symbol resolveUnion(Schema writer, Schema reader,&lt;br/&gt;
      */&lt;br/&gt;
     int i = 0;&lt;br/&gt;
     for (Schema w : alts) &lt;/p&gt;
{
-      symbols[i] = generate(w, reader, seen);
+      symbols[i] = generate(w, (needsAdj ? reader : alts2.get(i)), seen);
       labels[i] = w.getFullName();
       i++;
     }
&lt;p&gt;+    if (! needsAdj)&lt;br/&gt;
+      return Symbol.seq(Symbol.alt(symbols, labels), Symbol.UNION);&lt;br/&gt;
     return Symbol.seq(Symbol.alt(symbols, labels),&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Symbol.writerUnionAction());&lt;br/&gt;
+                      Symbol.WRITER_UNION_ACTION);&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private static boolean unionEquiv(Schema w, Schema r, Map&amp;lt;LitS, Boolean&amp;gt; seen) {&lt;br/&gt;
+    Schema.Type wt = w.getType();&lt;br/&gt;
+    if (wt != r.getType()) return false;&lt;br/&gt;
+    if ((wt == Schema.Type.RECORD || wt == Schema.Type.FIXED || wt == Schema.Type.ENUM)&lt;br/&gt;
+        &amp;amp;&amp;amp; ! (w.getFullName() == null || w.getFullName().equals(r.getFullName())))&lt;br/&gt;
+      return false;&lt;br/&gt;
+&lt;br/&gt;
+    switch (w.getType()) {&lt;br/&gt;
+    case NULL: case BOOLEAN: case INT: case LONG: case FLOAT: case DOUBLE:&lt;br/&gt;
+    case STRING: case BYTES:&lt;br/&gt;
+      return true;&lt;br/&gt;
+&lt;br/&gt;
+    case ARRAY: return unionEquiv(w.getElementType(), r.getElementType(), seen);&lt;br/&gt;
+    case MAP: return unionEquiv(w.getValueType(), r.getValueType(), seen);&lt;br/&gt;
+&lt;br/&gt;
+    case FIXED: return w.getFixedSize() == r.getFixedSize();&lt;br/&gt;
+&lt;br/&gt;
+    case ENUM: 
{
+      List&amp;lt;String&amp;gt; ws = w.getEnumSymbols();
+      List&amp;lt;String&amp;gt; rs = r.getEnumSymbols();
+      if (ws.size() != rs.size()) return false;
+      int i = 0;
+      for (i = 0; i &amp;lt; ws.size(); i++)
+        if (! ws.get(i).equals(rs.get(i))) break;
+      return i == ws.size();
+    }
&lt;p&gt;+&lt;br/&gt;
+    case UNION: &lt;/p&gt;
{
+      List&amp;lt;Schema&amp;gt; wb = w.getTypes();
+      List&amp;lt;Schema&amp;gt; rb = r.getTypes();
+      if (wb.size() != rb.size()) return false;
+      int i = 0;
+      for (i = 0; i &amp;lt; wb.size(); i++)
+        if (! unionEquiv(wb.get(i), rb.get(i), seen)) break;
+      return i == wb.size();
+    }
&lt;p&gt;+&lt;br/&gt;
+    case RECORD: {&lt;br/&gt;
+      LitS wsc = new LitS2(w, r);&lt;br/&gt;
+      if (! seen.containsKey(wsc)) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+        seen.put(wsc, true); // Be optimistic, but we may change our minds+        List&amp;lt;Field&amp;gt; wb = w.getFields();+        List&amp;lt;Field&amp;gt; rb = r.getFields();+        if (wb.size() != rb.size()) seen.put(wsc, false);+        else {
+          int i = 0;
+          for (i = 0; i &amp;lt; wb.size(); i++)
+            if (! unionEquiv(wb.get(i).schema(), rb.get(i).schema(), seen)) break;
+          seen.put(wsc, (i == wb.size()));
+        }+      }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+      return seen.get(wsc);&lt;br/&gt;
+    }&lt;br/&gt;
+    default:&lt;br/&gt;
+      throw new IllegalArgumentException(&quot;Unknown schema type: &quot; + w.getType());&lt;br/&gt;
+    }&lt;br/&gt;
   }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   private Symbol resolveRecords(Schema writer, Schema reader,&lt;br/&gt;
@@ -564,4 +627,3 @@ public int hashCode() {&lt;br/&gt;
      }&lt;br/&gt;
    }&lt;br/&gt;
 }&lt;br/&gt;
-&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java b/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java&lt;br/&gt;
index 187942400..4494ec0a2 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java&lt;br/&gt;
@@ -156,6 +156,27 @@ public int flattenedSize() {&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;tt&amp;gt;Sequence&amp;lt;/tt&amp;gt; in the input are replaced by its production recursively.&lt;/li&gt;
	&lt;li&gt;Non-&amp;lt;tt&amp;gt;Sequence&amp;lt;/tt&amp;gt; symbols, they internally have other symbols&lt;/li&gt;
	&lt;li&gt;those internal symbols also get flattened.&lt;br/&gt;
+   * When flattening is done, the only place there might be Sequence&lt;br/&gt;
+   * symbols is in the productions of a Repeater, Alternative, or the&lt;br/&gt;
+   * symToParse and symToSkip in a UnionAdjustAction or SkipAction.&lt;br/&gt;
+   *&lt;br/&gt;
+   * Why is this done?  We want our parsers to be fast.  If we left&lt;br/&gt;
+   * the grammars unflattened, then the parser would be constantly&lt;br/&gt;
+   * copying the contents of nested Sequence productions onto the&lt;br/&gt;
+   * parsing stack.  Instead, because of flattening, we have a long&lt;br/&gt;
+   * top-level production with no Sequences unless the Sequence is&lt;br/&gt;
+   * absolutely needed, e.g., in the case of a Repeater or an&lt;br/&gt;
+   * Alterantive.&lt;br/&gt;
+   *&lt;br/&gt;
+   * Well, this is not exactly true when recursion is involved.  Where&lt;br/&gt;
+   * there is a recursive record, that record will be &quot;inlined&quot; once,&lt;br/&gt;
+   * but any internal (ie, recursive) references to that record will&lt;br/&gt;
+   * be a Sequence for the record.  That Sequence will not further&lt;br/&gt;
+   * inline itself &amp;#8211; it will refer to itself as a Sequence.  The same&lt;br/&gt;
+   * is true for any records nested in this outer recursive record.&lt;br/&gt;
+   * Recursion is rare, and we want things to be fast in the typical&lt;br/&gt;
+   * case, which is why we do the flattening optimization.&lt;br/&gt;
+   *&lt;br/&gt;
    *&lt;/li&gt;
	&lt;li&gt;The algorithm does a few tricks to handle recursive symbol definitions.&lt;/li&gt;
	&lt;li&gt;In order to avoid infinite recursion with recursive symbols, we have a map&lt;br/&gt;
@@ -490,10 +511,20 @@ public static EnumAdjustAction enumAdjustAction(int rsymCount, Object[] adj) {&lt;br/&gt;
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   public static class EnumAdjustAction extends IntCheckAction {&lt;br/&gt;
+    public final boolean noAdjustments;&lt;br/&gt;
     public final Object[] adjustments;&lt;br/&gt;
     @Deprecated public EnumAdjustAction(int rsymCount, Object[] adjustments) {&lt;br/&gt;
       super(rsymCount);&lt;br/&gt;
       this.adjustments = adjustments;&lt;br/&gt;
+      boolean noAdj = true;&lt;br/&gt;
+      if (adjustments != null) &lt;/p&gt;
{
+        int count = Math.min(rsymCount, adjustments.length);
+        noAdj = (adjustments.length &amp;lt;= rsymCount);
+        for (int i = 0; noAdj &amp;amp;&amp;amp; i &amp;lt; count; i++)
+          noAdj &amp;amp;= ((adjustments[i] instanceof Integer)
+                    &amp;amp;&amp;amp; i == (Integer)adjustments[i]);
+      }
&lt;p&gt;+      this.noAdjustments = noAdj;&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;@@ -559,9 +590,14 @@ public static FieldOrderAction fieldOrderAction(Schema.Field[] fields) {&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   public static final class FieldOrderAction extends ImplicitAction {&lt;br/&gt;
+    public final boolean noReorder;&lt;br/&gt;
     public final Schema.Field[] fields;&lt;br/&gt;
     @Deprecated public FieldOrderAction(Schema.Field[] fields) &lt;/p&gt;
{
       this.fields = fields;
+      boolean noReorder = true;
+      for (int i = 0; noReorder &amp;amp;&amp;amp; i &amp;lt; fields.length; i++)
+        noReorder &amp;amp;= (i == fields[i].pos());
+      this.noReorder = noReorder;
     }
&lt;p&gt;   }&lt;/p&gt;

&lt;p&gt;@@ -645,6 +681,8 @@ public int findLabel(String l) {&lt;br/&gt;
   public static final Symbol MAP_END = new Symbol.Terminal(&quot;map-end&quot;);&lt;br/&gt;
   public static final Symbol ITEM_END = new Symbol.Terminal(&quot;item-end&quot;);&lt;/p&gt;

&lt;p&gt;+  public static final Symbol WRITER_UNION_ACTION = writerUnionAction();&lt;br/&gt;
+&lt;br/&gt;
   /* a pseudo terminal used by parsers */&lt;br/&gt;
   public static final Symbol FIELD_ACTION =&lt;br/&gt;
     new Symbol.Terminal(&quot;field-action&quot;);&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/io/parsing/SymbolTest.java b/lang/java/avro/src/test/java/org/apache/avro/io/parsing/SymbolTest.java&lt;br/&gt;
index ce4d7df96..f5b9ca0b9 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/io/parsing/SymbolTest.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/io/parsing/SymbolTest.java&lt;br/&gt;
@@ -50,9 +50,7 @@&lt;br/&gt;
   @Test&lt;br/&gt;
   public void testSomeMethod() throws IOException &lt;/p&gt;
{
     Schema schema = new Schema.Parser().parse(SCHEMA);
-
-    Symbol root = Symbol.root(new ResolvingGrammarGenerator()
-        .generate(schema, schema, new HashMap&amp;lt;&amp;gt;()));
+    Symbol root = new ResolvingGrammarGenerator().generate(schema, schema);
     validateNonNull(root, new HashSet&amp;lt;&amp;gt;());
   }

&lt;p&gt;diff --git a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
index 523c151fc..bef14252d 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
+++ b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
@@ -555,25 +555,40 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
   @Override protected void customDecode(org.apache.avro.io.ResolvingDecoder in)&lt;br/&gt;
     throws java.io.IOException&lt;br/&gt;
   {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrder();&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt; $schema.getFields().size(); i++) {&lt;/li&gt;
	&lt;li&gt;switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;br/&gt;
+    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();&lt;br/&gt;
+    if (fieldOrder == null) {&lt;br/&gt;
+## Common case: order of fields hasn&apos;t changed, so read them in a&lt;br/&gt;
+## fixed order according to reader&apos;s schema&lt;br/&gt;
+#set ($nv = 0)## Counter to ensure unique var-names&lt;br/&gt;
+#set ($maxnv = 0)## Holds high-water mark during recursion&lt;br/&gt;
+#foreach ($field in $schema.getFields())&lt;br/&gt;
+#set ($n = $this.mangle($field.name(), $schema.isError()))&lt;br/&gt;
+#set ($s = $field.schema())&lt;br/&gt;
+#set ($rs = &quot;SCHEMA$.getField(&quot;&quot;${n}&quot;&quot;).schema()&quot;)&lt;br/&gt;
+#decodeVar(2 &quot;this.${n}&quot; $s $rs)&lt;br/&gt;
+&lt;br/&gt;
+#set ($nv = $maxnv)&lt;br/&gt;
+#end&lt;br/&gt;
+    } else {&lt;br/&gt;
+      for (int i = 0; i &amp;lt; $schema.getFields().size(); i++) {&lt;br/&gt;
+        switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;br/&gt;
 #set ($fieldno = 0)&lt;br/&gt;
 #set ($nv = 0)## Counter to ensure unique var-names&lt;br/&gt;
 #set ($maxnv = 0)## Holds high-water mark during recursion&lt;br/&gt;
 #foreach ($field in $schema.getFields())&lt;/li&gt;
	&lt;li&gt;case $fieldno:&lt;br/&gt;
+        case $fieldno:&lt;br/&gt;
 #set ($n = $this.mangle($field.name(), $schema.isError()))&lt;br/&gt;
 #set ($s = $field.schema())&lt;br/&gt;
 #set ($rs = &quot;SCHEMA$.getField(&quot;&quot;${n}&quot;&quot;).schema()&quot;)&lt;br/&gt;
-#decodeVar(4 &quot;this.${n}&quot; $s $rs)&lt;/li&gt;
	&lt;li&gt;break;&lt;br/&gt;
+#decodeVar(6 &quot;this.${n}&quot; $s $rs)&lt;br/&gt;
+          break;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; #set ($nv = $maxnv)&lt;br/&gt;
 #set ($fieldno = $fieldno + 1)&lt;br/&gt;
 #end&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;default:&lt;/li&gt;
	&lt;li&gt;throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+        default:&lt;br/&gt;
+          throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+        }&lt;br/&gt;
       }&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;br/&gt;
diff --git a/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java b/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java&lt;br/&gt;
index c972235ed..af6e486cb 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java&lt;br/&gt;
+++ b/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java&lt;br/&gt;
@@ -503,40 +503,64 @@ public Player build() {&lt;br/&gt;
   @Override protected void customDecode(org.apache.avro.io.ResolvingDecoder in)&lt;br/&gt;
     throws java.io.IOException&lt;br/&gt;
   {&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrder();&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt; 4; i++) {&lt;/li&gt;
	&lt;li&gt;switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;/li&gt;
	&lt;li&gt;case 0:&lt;/li&gt;
	&lt;li&gt;this.number = in.readInt();&lt;/li&gt;
	&lt;li&gt;break;&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;case 1:&lt;/li&gt;
	&lt;li&gt;this.first_name = in.readString();&lt;/li&gt;
	&lt;li&gt;break;&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;case 2:&lt;/li&gt;
	&lt;li&gt;this.last_name = in.readString();&lt;/li&gt;
	&lt;li&gt;break;&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;case 3:&lt;/li&gt;
	&lt;li&gt;long size0 = in.readArrayStart();&lt;/li&gt;
	&lt;li&gt;java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position;&lt;/li&gt;
	&lt;li&gt;if (a0 == null) 
{
-          a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());
-          this.position = a0;
-        } else a0.clear();&lt;br/&gt;
-        SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;br/&gt;
-        for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) {&lt;br/&gt;
-          for ( ; size0 != 0; size0--) {
-            avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
-            e0 = avro.examples.baseball.Position.values()[in.readEnum()];
-            a0.add(e0);
-          }&lt;br/&gt;
+    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();&lt;br/&gt;
+    if (fieldOrder == null) {&lt;br/&gt;
+      this.number = in.readInt();&lt;br/&gt;
+&lt;br/&gt;
+      this.first_name = in.readString();&lt;br/&gt;
+&lt;br/&gt;
+      this.last_name = in.readString();&lt;br/&gt;
+&lt;br/&gt;
+      long size0 = in.readArrayStart();&lt;br/&gt;
+      java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position;&lt;br/&gt;
+      if (a0 == null) {
+        a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());
+        this.position = a0;
+      } else a0.clear();&lt;br/&gt;
+      SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;br/&gt;
+      for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) {&lt;br/&gt;
+        for ( ; size0 != 0; size0--) {
+          avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
+          e0 = avro.examples.baseball.Position.values()[in.readEnum()];
+          a0.add(e0);
         }&lt;br/&gt;
-        break;&lt;br/&gt;
+      }&lt;br/&gt;
+&lt;br/&gt;
+    } else {&lt;br/&gt;
+      for (int i = 0; i &amp;lt; 4; i++) {&lt;br/&gt;
+        switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;br/&gt;
+        case 0:&lt;br/&gt;
+          this.number = in.readInt();&lt;br/&gt;
+          break;&lt;br/&gt;
+&lt;br/&gt;
+        case 1:&lt;br/&gt;
+          this.first_name = in.readString();&lt;br/&gt;
+          break;&lt;br/&gt;
+&lt;br/&gt;
+        case 2:&lt;br/&gt;
+          this.last_name = in.readString();&lt;br/&gt;
+          break;&lt;br/&gt;
+&lt;br/&gt;
+        case 3:&lt;br/&gt;
+          long size0 = in.readArrayStart();&lt;br/&gt;
+          java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position;&lt;br/&gt;
+          if (a0 == null) {
+            a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());
+            this.position = a0;
+          } else a0.clear();&lt;br/&gt;
+          SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;br/&gt;
+          for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) {&lt;br/&gt;
+            for ( ; size0 != 0; size0--) {
+              avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
+              e0 = avro.examples.baseball.Position.values()[in.readEnum()];
+              a0.add(e0);
+            }&lt;br/&gt;
+          }&lt;br/&gt;
+          break;&lt;br/&gt;
 &lt;br/&gt;
-      default:&lt;br/&gt;
-        throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+        default:&lt;br/&gt;
+          throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+        }&lt;br/&gt;
       }&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;br/&gt;
diff --git a/lang/java/tools/src/test/compiler/output/Player.java b/lang/java/tools/src/test/compiler/output/Player.java&lt;br/&gt;
index af4e8f783..8376389f1 100644&lt;br/&gt;
&amp;#8212; a/lang/java/tools/src/test/compiler/output/Player.java&lt;br/&gt;
+++ b/lang/java/tools/src/test/compiler/output/Player.java&lt;br/&gt;
@@ -503,40 +503,64 @@ public Player build() {&lt;br/&gt;
   @Override protected void customDecode(org.apache.avro.io.ResolvingDecoder in)&lt;br/&gt;
     throws java.io.IOException&lt;br/&gt;
   {&lt;br/&gt;
-    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrder();&lt;br/&gt;
-    for (int i = 0; i &amp;lt; 4; i++) {&lt;br/&gt;
-      switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;br/&gt;
-      case 0:&lt;br/&gt;
-        this.number = in.readInt();&lt;br/&gt;
-        break;&lt;br/&gt;
-&lt;br/&gt;
-      case 1:&lt;br/&gt;
-        this.first_name = in.readString(this.first_name instanceof Utf8 ? (Utf8)this.first_name : null);&lt;br/&gt;
-        break;&lt;br/&gt;
-&lt;br/&gt;
-      case 2:&lt;br/&gt;
-        this.last_name = in.readString(this.last_name instanceof Utf8 ? (Utf8)this.last_name : null);&lt;br/&gt;
-        break;&lt;br/&gt;
-&lt;br/&gt;
-      case 3:&lt;br/&gt;
-        long size0 = in.readArrayStart();&lt;br/&gt;
-        java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position;&lt;br/&gt;
-        if (a0 == null) {-          a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());-          this.position = a0;-        }
&lt;p&gt; else a0.clear();&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;/li&gt;
	&lt;li&gt;for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) {&lt;/li&gt;
	&lt;li&gt;for ( ; size0 != 0; size0--) 
{
-            avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
-            e0 = avro.examples.baseball.Position.values()[in.readEnum()];
-            a0.add(e0);
-          }
&lt;p&gt;+    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();&lt;br/&gt;
+    if (fieldOrder == null) {&lt;br/&gt;
+      this.number = in.readInt();&lt;br/&gt;
+&lt;br/&gt;
+      this.first_name = in.readString(this.first_name instanceof Utf8 ? (Utf8)this.first_name : null);&lt;br/&gt;
+&lt;br/&gt;
+      this.last_name = in.readString(this.last_name instanceof Utf8 ? (Utf8)this.last_name : null);&lt;br/&gt;
+&lt;br/&gt;
+      long size0 = in.readArrayStart();&lt;br/&gt;
+      java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position;&lt;br/&gt;
+      if (a0 == null) &lt;/p&gt;
{
+        a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());
+        this.position = a0;
+      }
&lt;p&gt; else a0.clear();&lt;br/&gt;
+      SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;br/&gt;
+      for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) {&lt;br/&gt;
+        for ( ; size0 != 0; size0--) &lt;/p&gt;
{
+          avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
+          e0 = avro.examples.baseball.Position.values()[in.readEnum()];
+          a0.add(e0);
         }&lt;/li&gt;
	&lt;li&gt;break;&lt;br/&gt;
+      }&lt;br/&gt;
+&lt;br/&gt;
+    } else {&lt;br/&gt;
+      for (int i = 0; i &amp;lt; 4; i++) {&lt;br/&gt;
+        switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;br/&gt;
+        case 0:&lt;br/&gt;
+          this.number = in.readInt();&lt;br/&gt;
+          break;&lt;br/&gt;
+&lt;br/&gt;
+        case 1:&lt;br/&gt;
+          this.first_name = in.readString(this.first_name instanceof Utf8 ? (Utf8)this.first_name : null);&lt;br/&gt;
+          break;&lt;br/&gt;
+&lt;br/&gt;
+        case 2:&lt;br/&gt;
+          this.last_name = in.readString(this.last_name instanceof Utf8 ? (Utf8)this.last_name : null);&lt;br/&gt;
+          break;&lt;br/&gt;
+&lt;br/&gt;
+        case 3:&lt;br/&gt;
+          long size0 = in.readArrayStart();&lt;br/&gt;
+          java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position;&lt;br/&gt;
+          if (a0 == null) 
{
+            a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());
+            this.position = a0;
+          }
&lt;p&gt; else a0.clear();&lt;br/&gt;
+          SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;br/&gt;
+          for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+            for ( ; size0 != 0; size0--) {
+              avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
+              e0 = avro.examples.baseball.Position.values()[in.readEnum()];
+              a0.add(e0);
+            }+          }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+          break;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;default:&lt;/li&gt;
	&lt;li&gt;throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+        default:&lt;br/&gt;
+          throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+        }&lt;br/&gt;
       }&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16701361" author="jira-bot" created="Wed, 28 Nov 2018 03:32:52 +0000"  >&lt;p&gt;Commit 6eb25603b96169bf8d77269176218c63c181e9f4 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=raymie&quot; class=&quot;user-hover&quot; rel=&quot;raymie&quot;&gt;Raymie Stata&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=6eb2560&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=6eb2560&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change. (#393)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Break out of field-no-reorder loop as early as possible.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16701362" author="jira-bot" created="Wed, 28 Nov 2018 03:32:53 +0000"  >&lt;p&gt;Commit 6eb25603b96169bf8d77269176218c63c181e9f4 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=raymie&quot; class=&quot;user-hover&quot; rel=&quot;raymie&quot;&gt;Raymie Stata&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=6eb2560&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=6eb2560&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change. (#393)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Break out of field-no-reorder loop as early as possible.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16701363" author="jira-bot" created="Wed, 28 Nov 2018 03:32:55 +0000"  >&lt;p&gt;Commit 6eb25603b96169bf8d77269176218c63c181e9f4 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=raymie&quot; class=&quot;user-hover&quot; rel=&quot;raymie&quot;&gt;Raymie Stata&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=6eb2560&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=6eb2560&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change. (#393)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Improve resolving performance when schemas don&apos;t change.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2274&quot; title=&quot;Improve resolving performance when schemas don&amp;#39;t change&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2274&quot;&gt;&lt;del&gt;AVRO-2274&lt;/del&gt;&lt;/a&gt; Break out of field-no-reorder loop as early as possible.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16701366" author="thiru_mg" created="Wed, 28 Nov 2018 03:34:16 +0000"  >&lt;p&gt;Merged the PR. Thank you &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=raymie&quot; class=&quot;user-hover&quot; rel=&quot;raymie&quot;&gt;Raymie Stata&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 26 Nov 2018 20:33:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|s00ug8:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2275] Refactor schema-resolution code from grammar-generation</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2275</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;In my own work to extend &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;, and also in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt;, an alternative approach optimizing decoders, we were forced to re-implement Schema resolution logic because it&apos;s currently embedded deeply in ResolvingGrammarGenerator.  However, in the past the Avro community found it hard to maintain multiple implementations of the schema resolution code, as it is tedious and error-prone code.&lt;/p&gt;

&lt;p&gt;In this JIRA we&apos;ve refactored the resolution code into a new class called Resolver, and have rewritten ResolvingGrammarGenerator to be a client of this class.  This rewrite passes the full regression suite, including bug-for-bug compatibility with a few questionable resolutions rules, such as the &quot;soft matching&quot; rule for record in unions.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13200471">AVRO-2275</key>
            <summary>Refactor schema-resolution code from grammar-generation</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="raymie">Raymie Stata</assignee>
                                    <reporter username="raymie">Raymie Stata</reporter>
                        <labels>
                    </labels>
                <created>Mon, 26 Nov 2018 01:02:44 +0000</created>
                <updated>Sat, 1 Dec 2018 07:25:55 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="16701386" author="githubbot" created="Wed, 28 Nov 2018 04:27:54 +0000"  >&lt;p&gt;rstata opened a new pull request #395: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2275&quot; title=&quot;Refactor schema-resolution code from grammar-generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2275&quot;&gt;AVRO-2275&lt;/a&gt; Refactor schema-resolution code from grammar-generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/395&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/395&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Efforts to improve performance by code-generation and other means have been hampered by the fact that our schema-resolution logic is embedded in resolving-grammar-generation logic (see &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2275&quot; title=&quot;Refactor schema-resolution code from grammar-generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2275&quot;&gt;AVRO-2275&lt;/a&gt;(&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2275&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-2275&lt;/a&gt;)).  This patch factors the resolution logic out from the grammar-generation logic, so the resolution logic can be more easily reused.  See the design document included in this patch for more information.&lt;/p&gt;

&lt;p&gt;   This patch consists of the following pieces:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;A design/user-guide document (`refactoring-resolution.md`).&lt;/li&gt;
	&lt;li&gt;Core changes: a new file, `Resolver.java`, containing the extracted resolution logic, and a rewrite of `ResolvingGrammarGenerator.java` based on the new `Resolver.java`.&lt;/li&gt;
	&lt;li&gt;Changes to resolution-related tests.  These changes do not change the tests themselves, but rather output more diagnostic information upon failure to help developers resolve bugs.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16704269" author="githubbot" created="Fri, 30 Nov 2018 04:48:34 +0000"  >&lt;p&gt;rstata commented on issue #395: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2275&quot; title=&quot;Refactor schema-resolution code from grammar-generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2275&quot;&gt;AVRO-2275&lt;/a&gt; Refactor schema-resolution code from grammar-generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/395#issuecomment-443090279&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/395#issuecomment-443090279&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I just checked in a few changes: some cosmetic name-changes, plus a few API changes that will make it easier to utilize `Resolver.Action` trees.  Also, reused `Schema.SeenPair` rather than reimplement it in `Resolver`.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16705698" author="githubbot" created="Sat, 1 Dec 2018 07:25:55 +0000"  >&lt;p&gt;rstata commented on issue #395: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2275&quot; title=&quot;Refactor schema-resolution code from grammar-generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2275&quot;&gt;AVRO-2275&lt;/a&gt; Refactor schema-resolution code from grammar-generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/395#issuecomment-443406637&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/395#issuecomment-443406637&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @unchuckable  and I have been writing some code against the new `Resolver` code.  This exercise has already led to changes that I&apos;ve pushed, and more tweaks will likely come.  Thus, it&apos;d premature to commit this change, but I&apos;d love to get feedback from a wider audience.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 28 Nov 2018 04:27:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|s00ugg:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>
