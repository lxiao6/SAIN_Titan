<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:25:26 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2017-8-16+AND+created+%3C%3D+2017-8-23+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="2" total="2"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-2067] Add object-value attribute support to SchemaBuilder.PropBuilder</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2067</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Add object-value attribute support to &lt;em&gt;SchemaBuilder.PropBuilder&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; S prop(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; name, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; value) 

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;    The avro 1.8.2 specification permits the use of undefined schema attributes as metadata:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&quot;Attributes not defined in this document are permitted as metadata, but must not affect the format of serialized data.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The permitted types of attribute values is unclear from the above, but attributes with object values (non-string) are supported when parsing a schema and in the JsonProperties base class from which both Schema and Schema.Field inherit.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;JsonProperties&lt;/em&gt; supports object-valued attributes through its &lt;em&gt;addProp()&lt;/em&gt; and &lt;em&gt;getObjectProps()&lt;/em&gt; methods.&lt;/p&gt;

&lt;p&gt;In our use case, we need to  programmatically normalize and augment user-supplied schemas which may contain attributes with object values like booleans and arrays of strings. The absence of a method in &lt;em&gt;SchemaBuilder.PropBuilder&lt;/em&gt; which support object-valued attributes makes this difficult.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13096468">AVRO-2067</key>
            <summary>Add object-value attribute support to SchemaBuilder.PropBuilder</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jmullins">Jeffrey Mullins</assignee>
                                    <reporter username="jmullins">Jeffrey Mullins</reporter>
                        <labels>
                    </labels>
                <created>Mon, 21 Aug 2017 16:04:31 +0000</created>
                <updated>Wed, 28 Mar 2018 21:45:02 +0000</updated>
                            <resolved>Wed, 28 Mar 2018 21:45:02 +0000</resolved>
                                                    <fixVersion>1.9.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="16135368" author="jmullins" created="Mon, 21 Aug 2017 16:08:23 +0000"  >&lt;p&gt;Attaching patch with proposed code change and tests.&lt;/p&gt;</comment>
                            <comment id="16135369" author="jmullins" created="Mon, 21 Aug 2017 16:10:18 +0000"  >&lt;p&gt;Patch submitted. Please review.&lt;/p&gt;</comment>
                            <comment id="16316739" author="jmullins" created="Mon, 8 Jan 2018 18:28:21 +0000"  >&lt;p&gt;Patch has been sitting a bit. Anyone available for a review? Also, let me know if there&apos;s anything else I can do on my end to help.&lt;/p&gt;</comment>
                            <comment id="16417587" author="jmullins" created="Wed, 28 Mar 2018 15:50:31 +0000"  >&lt;p&gt;At Bloomberg, we&apos;re very much interested in this PR. Anyone available for a review?&lt;/p&gt;</comment>
                            <comment id="16417696" author="cutting" created="Wed, 28 Mar 2018 16:31:52 +0000"  >&lt;p&gt;Patch looks reasonable: simple change + lots of tests.&#160; I&apos;ll try to commit it later today.&#160; If you have a chance to convert it to a GitHub pull request in the meantime that would make my life a little easier.&lt;/p&gt;</comment>
                            <comment id="16418022" author="jmullins" created="Wed, 28 Mar 2018 19:53:36 +0000"  >&lt;p&gt;Will do. I&apos;ll convert it to a GitHub PR this afternoon.&lt;/p&gt;</comment>
                            <comment id="16418061" author="githubbot" created="Wed, 28 Mar 2018 20:29:15 +0000"  >&lt;p&gt;jmullins opened a new pull request #304: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2067&quot; title=&quot;Add object-value attribute support to SchemaBuilder.PropBuilder&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2067&quot;&gt;&lt;del&gt;AVRO-2067&lt;/del&gt;&lt;/a&gt;: Add object-value attrs to PropBuilder&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/304&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/304&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Add object-value attribute support to SchemaBuilder.PropBuilder:&lt;br/&gt;
           public final S prop(String name, Object value)&lt;/p&gt;

&lt;p&gt;   JsonProperties supports object-valued attributes through its&lt;br/&gt;
   addProp() and getObjectProps() methods.  Extend SchemaBuilder.PropBuilder&lt;br/&gt;
   to also support object-valued attributes so that schemas with non-string&lt;br/&gt;
   attributes can be created programmatically.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16418065" author="jmullins" created="Wed, 28 Mar 2018 20:30:01 +0000"  >&lt;p&gt;Added PR: &lt;a href=&quot;https://github.com/apache/avro/pull/304&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/304&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16418168" author="githubbot" created="Wed, 28 Mar 2018 21:42:05 +0000"  >&lt;p&gt;cutting closed pull request #304: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2067&quot; title=&quot;Add object-value attribute support to SchemaBuilder.PropBuilder&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2067&quot;&gt;&lt;del&gt;AVRO-2067&lt;/del&gt;&lt;/a&gt;: Add object-value attrs to PropBuilder&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/304&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/304&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java b/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java&lt;br/&gt;
index cdc43e032..9c768f279 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java&lt;br/&gt;
@@ -30,6 +30,7 @@&lt;br/&gt;
 import org.apache.avro.Schema.Field;&lt;br/&gt;
 import org.apache.avro.generic.GenericData;&lt;br/&gt;
 import org.apache.avro.generic.GenericRecord;&lt;br/&gt;
+import org.apache.avro.util.internal.JacksonUtils;&lt;br/&gt;
 import org.codehaus.jackson.JsonNode;&lt;br/&gt;
 import org.codehaus.jackson.io.JsonStringEncoder;&lt;br/&gt;
 import org.codehaus.jackson.map.ObjectMapper;&lt;br/&gt;
@@ -339,6 +340,13 @@ public final S prop(String name, String val) &lt;/p&gt;
{
       return prop(name, TextNode.valueOf(val));
     }

&lt;p&gt;+    /**&lt;br/&gt;
+     * Set name-value pair properties for this type or field.&lt;br/&gt;
+     */&lt;br/&gt;
+    public final S prop(String name, Object value) &lt;/p&gt;
{
+      return prop(name, JacksonUtils.toJsonNode(value));
+    }
&lt;p&gt;+&lt;br/&gt;
     // for internal use by the Parser&lt;br/&gt;
     final S prop(String name, JsonNode val) {&lt;br/&gt;
       if(!hasProps()) {&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java b/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java&lt;br/&gt;
index 99e8e3097..e250ffef1 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java&lt;br/&gt;
@@ -22,7 +22,9 @@&lt;br/&gt;
 import java.nio.ByteBuffer;&lt;br/&gt;
 import java.util.ArrayList;&lt;br/&gt;
 import java.util.Arrays;&lt;br/&gt;
+import java.util.Collection;&lt;br/&gt;
 import java.util.HashMap;&lt;br/&gt;
+import java.util.Iterator;&lt;br/&gt;
 import java.util.List;&lt;br/&gt;
 import java.util.Map;&lt;/p&gt;

&lt;p&gt;@@ -93,6 +95,286 @@ public void testProps() &lt;/p&gt;
{
     Assert.assertEquals(&quot;v2real&quot;, s.getProp(&quot;p2&quot;));
   }

&lt;p&gt;+  @Test&lt;br/&gt;
+  public void testObjectProps() {&lt;br/&gt;
+    Schema s = SchemaBuilder.builder().intBuilder()&lt;br/&gt;
+      .prop(&quot;booleanProp&quot;, true)&lt;br/&gt;
+      .prop(&quot;intProp&quot;, Integer.MAX_VALUE)&lt;br/&gt;
+      .prop(&quot;longProp&quot;, Long.MAX_VALUE)&lt;br/&gt;
+      .prop(&quot;floatProp&quot;, 1.0f)&lt;br/&gt;
+      .prop(&quot;doubleProp&quot;, Double.MAX_VALUE)&lt;br/&gt;
+      .prop(&quot;byteProp&quot;, new byte[] &lt;/p&gt;
{0x41, 0x42, 0x43} )&lt;br/&gt;
+      .prop(&quot;stringProp&quot;, &quot;abc&quot; )&lt;br/&gt;
+      .endInt();&lt;br/&gt;
+&lt;br/&gt;
+    //string properties&lt;br/&gt;
+    @SuppressWarnings(&quot;deprecation&quot;)&lt;br/&gt;
+    Map&amp;lt;String, String&amp;gt; stringProps = s.getProps();&lt;br/&gt;
+    Assert.assertEquals(2, stringProps.size());&lt;br/&gt;
+    Assert.assertEquals(&quot;ABC&quot;, stringProps.get(&quot;byteProp&quot;));&lt;br/&gt;
+    Assert.assertEquals(&quot;abc&quot;, stringProps.get(&quot;stringProp&quot;));&lt;br/&gt;
+&lt;br/&gt;
+    //object properties&lt;br/&gt;
+    Assert.assertEquals(7, s.getObjectProps().size());&lt;br/&gt;
+    Assert.assertTrue(s.getObjectProp(&quot;booleanProp&quot;) instanceof Boolean);&lt;br/&gt;
+    Assert.assertEquals(true, s.getObjectProp(&quot;booleanProp&quot;));&lt;br/&gt;
+    Assert.assertTrue(s.getObjectProp(&quot;intProp&quot;) instanceof Integer);&lt;br/&gt;
+    Assert.assertEquals(Integer.MAX_VALUE, s.getObjectProp(&quot;intProp&quot;));&lt;br/&gt;
+    Assert.assertTrue(s.getObjectProp(&quot;intProp&quot;) instanceof Integer);&lt;br/&gt;
+    Assert.assertTrue(s.getObjectProp(&quot;longProp&quot;) instanceof Long);&lt;br/&gt;
+    Assert.assertEquals(Long.MAX_VALUE, s.getObjectProp(&quot;longProp&quot;));&lt;br/&gt;
+    Assert.assertTrue(s.getObjectProp(&quot;floatProp&quot;) instanceof Double);&lt;br/&gt;
+    //float converts to double&lt;br/&gt;
+    Assert.assertEquals(1.0d, s.getObjectProp(&quot;floatProp&quot;));&lt;br/&gt;
+    Assert.assertTrue(s.getObjectProp(&quot;doubleProp&quot;) instanceof Double);&lt;br/&gt;
+    Assert.assertEquals(Double.MAX_VALUE, s.getObjectProp(&quot;doubleProp&quot;));&lt;br/&gt;
+    //byte[] converts to string&lt;br/&gt;
+    Assert.assertTrue(s.getObjectProp(&quot;byteProp&quot;) instanceof String);&lt;br/&gt;
+    Assert.assertEquals(&quot;ABC&quot;, s.getObjectProp(&quot;byteProp&quot;));&lt;br/&gt;
+    Assert.assertTrue(s.getObjectProp(&quot;stringProp&quot;) instanceof String);&lt;br/&gt;
+    Assert.assertEquals(&quot;abc&quot;, s.getObjectProp(&quot;stringProp&quot;));&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testFieldObjectProps() {&lt;br/&gt;
+    Schema s = SchemaBuilder.builder().record(&quot;MyRecord&quot;)&lt;br/&gt;
+      .fields().name(&quot;myField&quot;)&lt;br/&gt;
+      .prop(&quot;booleanProp&quot;, true)&lt;br/&gt;
+      .prop(&quot;intProp&quot;, Integer.MAX_VALUE)&lt;br/&gt;
+      .prop(&quot;longProp&quot;, Long.MAX_VALUE)&lt;br/&gt;
+      .prop(&quot;floatProp&quot;, 1.0f)&lt;br/&gt;
+      .prop(&quot;doubleProp&quot;, Double.MAX_VALUE)&lt;br/&gt;
+      .prop(&quot;byteProp&quot;, new byte[] {0x41, 0x42, 0x43}
&lt;p&gt; )&lt;br/&gt;
+      .prop(&quot;stringProp&quot;, &quot;abc&quot; )&lt;br/&gt;
+      .type().intType()&lt;br/&gt;
+      .noDefault()&lt;br/&gt;
+      .endRecord();&lt;br/&gt;
+&lt;br/&gt;
+    Schema.Field f = s.getField(&quot;myField&quot;);&lt;br/&gt;
+&lt;br/&gt;
+    //string properties&lt;br/&gt;
+    @SuppressWarnings(&quot;deprecation&quot;)&lt;br/&gt;
+    Map&amp;lt;String, String&amp;gt; stringProps = f.getProps();&lt;br/&gt;
+    Assert.assertEquals(2, stringProps.size());&lt;br/&gt;
+    Assert.assertEquals(&quot;ABC&quot;, stringProps.get(&quot;byteProp&quot;));&lt;br/&gt;
+    Assert.assertEquals(&quot;abc&quot;, stringProps.get(&quot;stringProp&quot;));&lt;br/&gt;
+&lt;br/&gt;
+    //object properties&lt;br/&gt;
+    Assert.assertEquals(7, f.getObjectProps().size());&lt;br/&gt;
+    Assert.assertTrue(f.getObjectProp(&quot;booleanProp&quot;) instanceof Boolean);&lt;br/&gt;
+    Assert.assertEquals(true, f.getObjectProp(&quot;booleanProp&quot;));&lt;br/&gt;
+    Assert.assertTrue(f.getObjectProp(&quot;intProp&quot;) instanceof Integer);&lt;br/&gt;
+    Assert.assertEquals(Integer.MAX_VALUE, f.getObjectProp(&quot;intProp&quot;));&lt;br/&gt;
+    Assert.assertTrue(f.getObjectProp(&quot;intProp&quot;) instanceof Integer);&lt;br/&gt;
+    Assert.assertTrue(f.getObjectProp(&quot;longProp&quot;) instanceof Long);&lt;br/&gt;
+    Assert.assertEquals(Long.MAX_VALUE, f.getObjectProp(&quot;longProp&quot;));&lt;br/&gt;
+    Assert.assertTrue(f.getObjectProp(&quot;floatProp&quot;) instanceof Double);&lt;br/&gt;
+    //float converts to double&lt;br/&gt;
+    Assert.assertEquals(1.0d, f.getObjectProp(&quot;floatProp&quot;));&lt;br/&gt;
+    Assert.assertTrue(f.getObjectProp(&quot;doubleProp&quot;) instanceof Double);&lt;br/&gt;
+    Assert.assertEquals(Double.MAX_VALUE, f.getObjectProp(&quot;doubleProp&quot;));&lt;br/&gt;
+    //byte[] converts to string&lt;br/&gt;
+    Assert.assertTrue(f.getObjectProp(&quot;byteProp&quot;) instanceof String);&lt;br/&gt;
+    Assert.assertEquals(&quot;ABC&quot;, f.getObjectProp(&quot;byteProp&quot;));&lt;br/&gt;
+    Assert.assertTrue(f.getObjectProp(&quot;stringProp&quot;) instanceof String);&lt;br/&gt;
+    Assert.assertEquals(&quot;abc&quot;, f.getObjectProp(&quot;stringProp&quot;));&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testArrayObjectProp() {&lt;br/&gt;
+    List&amp;lt;Object&amp;gt; values = new ArrayList&amp;lt;Object&amp;gt;();&lt;br/&gt;
+    values.add(true);&lt;br/&gt;
+    values.add(Integer.MAX_VALUE);&lt;br/&gt;
+    values.add(Long.MAX_VALUE);&lt;br/&gt;
+    values.add(1.0f);&lt;br/&gt;
+    values.add(Double.MAX_VALUE);&lt;br/&gt;
+    values.add(new byte[] &lt;/p&gt;
{0x41, 0x42, 0x43});&lt;br/&gt;
+    values.add(&quot;abc&quot;);&lt;br/&gt;
+&lt;br/&gt;
+    Schema s = SchemaBuilder.builder().intBuilder()&lt;br/&gt;
+      .prop(&quot;arrayProp&quot;, values)&lt;br/&gt;
+      .endInt();&lt;br/&gt;
+&lt;br/&gt;
+    //string properties&lt;br/&gt;
+    @SuppressWarnings(&quot;deprecation&quot;)&lt;br/&gt;
+    int size = s.getProps().size();&lt;br/&gt;
+    Assert.assertEquals(0, size);&lt;br/&gt;
+&lt;br/&gt;
+    //object properties&lt;br/&gt;
+    Assert.assertEquals(1, s.getObjectProps().size());&lt;br/&gt;
+&lt;br/&gt;
+    Assert.assertTrue(s.getObjectProp(&quot;arrayProp&quot;) instanceof Collection);&lt;br/&gt;
+    @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+    Collection&amp;lt;Object&amp;gt; valueCollection = (Collection&amp;lt;Object&amp;gt;) s.getObjectProp(&quot;arrayProp&quot;);&lt;br/&gt;
+    Iterator&amp;lt;Object&amp;gt; iter = valueCollection.iterator();&lt;br/&gt;
+    Assert.assertEquals(7, valueCollection.size());&lt;br/&gt;
+    Assert.assertEquals(true, iter.next());&lt;br/&gt;
+    Assert.assertEquals(Integer.MAX_VALUE, iter.next());&lt;br/&gt;
+    Assert.assertEquals(Long.MAX_VALUE, iter.next());&lt;br/&gt;
+    //float converts to double&lt;br/&gt;
+    Assert.assertEquals(1.0d, iter.next());&lt;br/&gt;
+    Assert.assertEquals(Double.MAX_VALUE, iter.next());&lt;br/&gt;
+    //byte[] converts to string&lt;br/&gt;
+    Assert.assertEquals(&quot;ABC&quot;, iter.next());&lt;br/&gt;
+    Assert.assertEquals(&quot;abc&quot;, iter.next());&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testFieldArrayObjectProp() {&lt;br/&gt;
+    List&amp;lt;Object&amp;gt; values = new ArrayList&amp;lt;Object&amp;gt;();&lt;br/&gt;
+    values.add(true);&lt;br/&gt;
+    values.add(Integer.MAX_VALUE);&lt;br/&gt;
+    values.add(Long.MAX_VALUE);&lt;br/&gt;
+    values.add(1.0f);&lt;br/&gt;
+    values.add(Double.MAX_VALUE);&lt;br/&gt;
+    values.add(new byte[] {0x41, 0x42, 0x43}
&lt;p&gt;);&lt;br/&gt;
+    values.add(&quot;abc&quot;);&lt;br/&gt;
+&lt;br/&gt;
+    Schema s = SchemaBuilder.builder().record(&quot;MyRecord&quot;)&lt;br/&gt;
+      .fields().name(&quot;myField&quot;)&lt;br/&gt;
+      .prop(&quot;arrayProp&quot;, values)&lt;br/&gt;
+      .type().intType()&lt;br/&gt;
+      .noDefault()&lt;br/&gt;
+      .endRecord();&lt;br/&gt;
+&lt;br/&gt;
+    Schema.Field f = s.getField(&quot;myField&quot;);&lt;br/&gt;
+&lt;br/&gt;
+    //string properties&lt;br/&gt;
+    @SuppressWarnings(&quot;deprecation&quot;)&lt;br/&gt;
+    int size = f.getProps().size();&lt;br/&gt;
+    Assert.assertEquals(0, size);&lt;br/&gt;
+&lt;br/&gt;
+    //object properties&lt;br/&gt;
+    Assert.assertEquals(1, f.getObjectProps().size());&lt;br/&gt;
+&lt;br/&gt;
+    Assert.assertTrue(f.getObjectProp(&quot;arrayProp&quot;) instanceof Collection);&lt;br/&gt;
+    @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+    Collection&amp;lt;Object&amp;gt; valueCollection = (Collection&amp;lt;Object&amp;gt;) f.getObjectProp(&quot;arrayProp&quot;);&lt;br/&gt;
+    Iterator&amp;lt;Object&amp;gt; iter = valueCollection.iterator();&lt;br/&gt;
+    Assert.assertEquals(7, valueCollection.size());&lt;br/&gt;
+    Assert.assertEquals(true, iter.next());&lt;br/&gt;
+    Assert.assertEquals(Integer.MAX_VALUE, iter.next());&lt;br/&gt;
+    Assert.assertEquals(Long.MAX_VALUE, iter.next());&lt;br/&gt;
+    //float converts to double&lt;br/&gt;
+    Assert.assertEquals(1.0d, iter.next());&lt;br/&gt;
+    Assert.assertEquals(Double.MAX_VALUE, iter.next());&lt;br/&gt;
+    //byte[] converts to string&lt;br/&gt;
+    Assert.assertEquals(&quot;ABC&quot;, iter.next());&lt;br/&gt;
+    Assert.assertEquals(&quot;abc&quot;, iter.next());&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testMapObjectProp() {&lt;br/&gt;
+    Map&amp;lt;String, Object&amp;gt; values = new HashMap&amp;lt;String, Object&amp;gt;();&lt;br/&gt;
+    values.put(&quot;booleanKey&quot;, true);&lt;br/&gt;
+    values.put(&quot;intKey&quot;, Integer.MAX_VALUE);&lt;br/&gt;
+    values.put(&quot;longKey&quot;, Long.MAX_VALUE);&lt;br/&gt;
+    values.put(&quot;floatKey&quot;, 1.0f);&lt;br/&gt;
+    values.put(&quot;doubleKey&quot;, Double.MAX_VALUE);&lt;br/&gt;
+    values.put(&quot;byteKey&quot;, new byte[] &lt;/p&gt;
{0x41, 0x42, 0x43});&lt;br/&gt;
+    values.put(&quot;stringKey&quot;, &quot;abc&quot;);&lt;br/&gt;
+&lt;br/&gt;
+    Schema s = SchemaBuilder.builder().intBuilder()&lt;br/&gt;
+      .prop(&quot;mapProp&quot;, values)&lt;br/&gt;
+      .endInt();&lt;br/&gt;
+&lt;br/&gt;
+    //string properties&lt;br/&gt;
+    @SuppressWarnings(&quot;deprecation&quot;)&lt;br/&gt;
+    int size = s.getProps().size();&lt;br/&gt;
+    Assert.assertEquals(0, size);&lt;br/&gt;
+    Assert.assertEquals(1, s.getObjectProps().size());&lt;br/&gt;
+&lt;br/&gt;
+    //object properties&lt;br/&gt;
+    Assert.assertTrue(s.getObjectProp(&quot;mapProp&quot;) instanceof Map);&lt;br/&gt;
+    @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+    Map&amp;lt;String, Object&amp;gt; valueMap = (Map&amp;lt;String, Object&amp;gt;) s.getObjectProp(&quot;mapProp&quot;);&lt;br/&gt;
+    Assert.assertEquals(values.size(), valueMap.size());&lt;br/&gt;
+&lt;br/&gt;
+    Assert.assertTrue(valueMap.get(&quot;booleanKey&quot;) instanceof Boolean);&lt;br/&gt;
+    Assert.assertEquals(true, valueMap.get(&quot;booleanKey&quot;));&lt;br/&gt;
+    Assert.assertTrue(valueMap.get(&quot;intKey&quot;) instanceof Integer);&lt;br/&gt;
+    Assert.assertEquals(Integer.MAX_VALUE, valueMap.get(&quot;intKey&quot;));&lt;br/&gt;
+    Assert.assertTrue(valueMap.get(&quot;longKey&quot;) instanceof Long);&lt;br/&gt;
+    Assert.assertEquals(Long.MAX_VALUE, valueMap.get(&quot;longKey&quot;));&lt;br/&gt;
+    //float converts to double&lt;br/&gt;
+    Assert.assertTrue(valueMap.get(&quot;floatKey&quot;) instanceof Double);&lt;br/&gt;
+    Assert.assertEquals(1.0d, valueMap.get(&quot;floatKey&quot;));&lt;br/&gt;
+    Assert.assertTrue(valueMap.get(&quot;doubleKey&quot;) instanceof Double);&lt;br/&gt;
+    Assert.assertEquals(Double.MAX_VALUE, valueMap.get(&quot;doubleKey&quot;));&lt;br/&gt;
+    //byte[] converts to string&lt;br/&gt;
+    Assert.assertTrue(valueMap.get(&quot;byteKey&quot;) instanceof String);&lt;br/&gt;
+    Assert.assertEquals(&quot;ABC&quot;, valueMap.get(&quot;byteKey&quot;));&lt;br/&gt;
+    Assert.assertTrue(valueMap.get(&quot;stringKey&quot;) instanceof String);&lt;br/&gt;
+    Assert.assertEquals(&quot;abc&quot;, valueMap.get(&quot;stringKey&quot;));&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testFieldMapObjectProp() {&lt;br/&gt;
+    Map&amp;lt;String, Object&amp;gt; values = new HashMap&amp;lt;String, Object&amp;gt;();&lt;br/&gt;
+    values.put(&quot;booleanKey&quot;, true);&lt;br/&gt;
+    values.put(&quot;intKey&quot;, Integer.MAX_VALUE);&lt;br/&gt;
+    values.put(&quot;longKey&quot;, Long.MAX_VALUE);&lt;br/&gt;
+    values.put(&quot;floatKey&quot;, 1.0f);&lt;br/&gt;
+    values.put(&quot;doubleKey&quot;, Double.MAX_VALUE);&lt;br/&gt;
+    values.put(&quot;byteKey&quot;, new byte[] {0x41, 0x42, 0x43}
&lt;p&gt;);&lt;br/&gt;
+    values.put(&quot;stringKey&quot;, &quot;abc&quot;);&lt;br/&gt;
+&lt;br/&gt;
+    Schema s = SchemaBuilder.builder().record(&quot;MyRecord&quot;)&lt;br/&gt;
+      .fields().name(&quot;myField&quot;)&lt;br/&gt;
+      .prop(&quot;mapProp&quot;, values)&lt;br/&gt;
+      .type().intType()&lt;br/&gt;
+      .noDefault()&lt;br/&gt;
+      .endRecord();&lt;br/&gt;
+&lt;br/&gt;
+    Schema.Field f = s.getField(&quot;myField&quot;);&lt;br/&gt;
+&lt;br/&gt;
+    //string properties&lt;br/&gt;
+    @SuppressWarnings(&quot;deprecation&quot;)&lt;br/&gt;
+    int size = f.getProps().size();&lt;br/&gt;
+    Assert.assertEquals(0, size);&lt;br/&gt;
+    Assert.assertEquals(1, f.getObjectProps().size());&lt;br/&gt;
+&lt;br/&gt;
+    //object properties&lt;br/&gt;
+    Assert.assertTrue(f.getObjectProp(&quot;mapProp&quot;) instanceof Map);&lt;br/&gt;
+    @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+    Map&amp;lt;String, Object&amp;gt; valueMap = (Map&amp;lt;String, Object&amp;gt;) f.getObjectProp(&quot;mapProp&quot;);&lt;br/&gt;
+    Assert.assertEquals(values.size(), valueMap.size());&lt;br/&gt;
+&lt;br/&gt;
+    Assert.assertTrue(valueMap.get(&quot;booleanKey&quot;) instanceof Boolean);&lt;br/&gt;
+    Assert.assertEquals(true, valueMap.get(&quot;booleanKey&quot;));&lt;br/&gt;
+    Assert.assertTrue(valueMap.get(&quot;intKey&quot;) instanceof Integer);&lt;br/&gt;
+    Assert.assertEquals(Integer.MAX_VALUE, valueMap.get(&quot;intKey&quot;));&lt;br/&gt;
+    Assert.assertTrue(valueMap.get(&quot;longKey&quot;) instanceof Long);&lt;br/&gt;
+    Assert.assertEquals(Long.MAX_VALUE, valueMap.get(&quot;longKey&quot;));&lt;br/&gt;
+    //float converts to double&lt;br/&gt;
+    Assert.assertTrue(valueMap.get(&quot;floatKey&quot;) instanceof Double);&lt;br/&gt;
+    Assert.assertEquals(1.0d, valueMap.get(&quot;floatKey&quot;));&lt;br/&gt;
+    Assert.assertTrue(valueMap.get(&quot;doubleKey&quot;) instanceof Double);&lt;br/&gt;
+    Assert.assertEquals(Double.MAX_VALUE, valueMap.get(&quot;doubleKey&quot;));&lt;br/&gt;
+    //byte[] converts to string&lt;br/&gt;
+    Assert.assertTrue(valueMap.get(&quot;byteKey&quot;) instanceof String);&lt;br/&gt;
+    Assert.assertEquals(&quot;ABC&quot;, valueMap.get(&quot;byteKey&quot;));&lt;br/&gt;
+    Assert.assertTrue(valueMap.get(&quot;stringKey&quot;) instanceof String);&lt;br/&gt;
+    Assert.assertEquals(&quot;abc&quot;, valueMap.get(&quot;stringKey&quot;));&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test(expected = AvroRuntimeException.class)&lt;br/&gt;
+  public void testNullObjectProp() &lt;/p&gt;
{
+    SchemaBuilder.builder().intBuilder()
+      .prop(&quot;nullProp&quot;, (Object) null)
+      .endInt();
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test(expected = AvroRuntimeException.class)&lt;br/&gt;
+  public void testFieldNullObjectProp() &lt;/p&gt;
{
+    SchemaBuilder.builder().record(&quot;MyRecord&quot;)
+      .fields().name(&quot;myField&quot;)
+      .prop(&quot;nullProp&quot;, (Object) null)
+      .type().intType()
+      .noDefault()
+      .endRecord();
+  }
&lt;p&gt;+&lt;br/&gt;
   @Test&lt;br/&gt;
   public void testNamespaces() {&lt;br/&gt;
     Schema s1 = SchemaBuilder.record(&quot;myrecord&quot;)&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16418169" author="jira-bot" created="Wed, 28 Mar 2018 21:42:09 +0000"  >&lt;p&gt;Commit 82a57ada210dcda48a206b3ab47cb320a3e96bec in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmullins&quot; class=&quot;user-hover&quot; rel=&quot;jmullins&quot;&gt;Jeffrey Mullins&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=82a57ad&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=82a57ad&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2067&quot; title=&quot;Add object-value attribute support to SchemaBuilder.PropBuilder&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2067&quot;&gt;&lt;del&gt;AVRO-2067&lt;/del&gt;&lt;/a&gt;: Add object-value attrs to PropBuilder&lt;/p&gt;

&lt;p&gt;Add object-value attribute support to SchemaBuilder.PropBuilder:&lt;br/&gt;
        public final S prop(String name, Object value)&lt;/p&gt;

&lt;p&gt;JsonProperties supports object-valued attributes through its&lt;br/&gt;
addProp() and getObjectProps() methods.  Extend SchemaBuilder.PropBuilder&lt;br/&gt;
to also support object-valued attributes so that schemas with non-string&lt;br/&gt;
attributes can be created programmatically.&lt;/p&gt;</comment>
                            <comment id="16418170" author="jira-bot" created="Wed, 28 Mar 2018 21:42:10 +0000"  >&lt;p&gt;Commit 463fbc07df0072570789a2b36592def8f3611fd0 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=463fbc0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=463fbc0&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Merge pull request #304 from jmullins/&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2067&quot; title=&quot;Add object-value attribute support to SchemaBuilder.PropBuilder&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2067&quot;&gt;&lt;del&gt;AVRO-2067&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2067&quot; title=&quot;Add object-value attribute support to SchemaBuilder.PropBuilder&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2067&quot;&gt;&lt;del&gt;AVRO-2067&lt;/del&gt;&lt;/a&gt;: Add object-value attrs to PropBuilder.&lt;/p&gt;</comment>
                            <comment id="16418171" author="jira-bot" created="Wed, 28 Mar 2018 21:42:11 +0000"  >&lt;p&gt;Commit 463fbc07df0072570789a2b36592def8f3611fd0 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=463fbc0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=463fbc0&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Merge pull request #304 from jmullins/&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2067&quot; title=&quot;Add object-value attribute support to SchemaBuilder.PropBuilder&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2067&quot;&gt;&lt;del&gt;AVRO-2067&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2067&quot; title=&quot;Add object-value attribute support to SchemaBuilder.PropBuilder&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2067&quot;&gt;&lt;del&gt;AVRO-2067&lt;/del&gt;&lt;/a&gt;: Add object-value attrs to PropBuilder.&lt;/p&gt;</comment>
                            <comment id="16418174" author="cutting" created="Wed, 28 Mar 2018 21:45:02 +0000"  >&lt;p&gt;I committed this.&#160; Thanks, Jeffrey!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12882899" name="AVRO-2067.patch" size="13307" author="jmullins" created="Mon, 21 Aug 2017 16:08:06 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 28 Mar 2018 16:31:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            42 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3j3i7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2068] Improve EnumSchema constructor performance</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2068</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;at &lt;a href=&quot;https://github.com/apache/avro/blob/master/lang/java/avro/src/main/java/org/apache/avro/Schema.java#L745&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/blob/master/lang/java/avro/src/main/java/org/apache/avro/Schema.java#L745&lt;/a&gt; :&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;....
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;EnumSchema &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; NamedSchema {
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; symbols;
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; ordinals;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; EnumSchema(Name name, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; doc,
        LockableArrayList&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; symbols) {
      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(Type.ENUM, name, doc);
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.symbols = symbols.lock();
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.ordinals = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt;();
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0;
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; symbol : symbols)
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (ordinals.put(validateName(symbol), i++) != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;)
          &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SchemaParseException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Duplicate &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; symbol: &quot;&lt;/span&gt;+symbol);
    }
....
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;should be changed to:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;....
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;EnumSchema &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; NamedSchema {
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; symbols;
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; ordinals;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; EnumSchema(Name name, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; doc,
        LockableArrayList&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; symbols) {
      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(Type.ENUM, name, doc);
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.symbols = symbols.lock();
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.ordinals = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt;(symbols.size());
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0;
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; symbol : symbols)
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (ordinals.put(validateName(symbol), i++) != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;)
          &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SchemaParseException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Duplicate &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; symbol: &quot;&lt;/span&gt;+symbol);
    }
....
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="13096802">AVRO-2068</key>
            <summary>Improve EnumSchema constructor performance</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.svg">Trivial</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="zolyfarkas">Zoltan Farkas</reporter>
                        <labels>
                    </labels>
                <created>Tue, 22 Aug 2017 16:24:27 +0000</created>
                <updated>Sun, 30 Dec 2018 04:09:31 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 21 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3j5j3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>
