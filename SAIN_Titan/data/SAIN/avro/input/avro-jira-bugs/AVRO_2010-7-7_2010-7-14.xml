<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:14:13 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2010-7-7+AND+created+%3C%3D+2010-7-14+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="3" total="3"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-593] Java: add support for Hadoop&apos;s new mapreduce APIs</title>
                <link>https://issues.apache.org/jira/browse/AVRO-593</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Avro should work with Hadoop&apos;s newer org.apache.hadoop.mapreduce API, in addition to the older org.apache.hadoop.mapred API.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Avro 1.3.3, Hadoop 0.20.2&lt;/p&gt;</environment>
        <key id="12468744">AVRO-593</key>
            <summary>Java: add support for Hadoop&apos;s new mapreduce APIs</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="gwu">Garrett Wu</assignee>
                                    <reporter username="sseverance">Steve Severance</reporter>
                        <labels>
                    </labels>
                <created>Wed, 7 Jul 2010 18:16:26 +0000</created>
                <updated>Mon, 11 Jun 2012 20:01:35 +0000</updated>
                            <resolved>Fri, 13 Apr 2012 19:03:45 +0000</resolved>
                                    <version>1.3.2</version>
                    <version>1.3.3</version>
                                    <fixVersion>1.7.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>8</votes>
                                    <watches>17</watches>
                                                                <comments>
                            <comment id="12886111" author="scott_carey" created="Wed, 7 Jul 2010 22:11:42 +0000"  >&lt;p&gt;The old mapred API is being un-deprecated for 0.21 and is not going away soon. The new mapreduce API is not yet finished.&lt;/p&gt;

&lt;p&gt;However we will eventually need to support the newer API.&lt;/p&gt;</comment>
                            <comment id="12886145" author="scott_carey" created="Wed, 7 Jul 2010 22:56:10 +0000"  >&lt;p&gt;Is there a specific use case where this is failing for you or is it just the use of deprecated APIs that is a problem?&lt;/p&gt;

&lt;p&gt;I suppose that integrating Avro with another library that is on the newer API could be an issue.&lt;/p&gt;</comment>
                            <comment id="12926441" author="gwu" created="Fri, 29 Oct 2010 20:27:50 +0000"  >&lt;p&gt;I&apos;m also interested in using the newer mapreduce API with Avro, so I&apos;m trying to write an AvroWritable and some input and output format classes that know how to deal with the schemas.  I should have a patch next week, but the idea is:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Introduce new classes AvroKey and AvroValue that implement Writable.&lt;/li&gt;
	&lt;li&gt;Users can call AvroJob.setInputKeySchema(), AvroJob.setInputValueSchema(), AvroJob.setMapOutputKeySchema(), AvroJob.setMapOutputValueSchema(), AvroJob.setReduceOutputKeySchema(), AvroJob.setReduceOutputValueSchema() as needed.&lt;/li&gt;
	&lt;li&gt;Provide AvroContainerFileInputFormat/AvroContainerFileOutputFormat, AvroSequenceFileInputFormat, AvroSequenceFileOutputFormat that read and write the schemas for the data appropriately.  The schema in the sequence files can be stored in the header&apos;s metadata.&lt;/li&gt;
	&lt;li&gt;Users can write Mappers and Reducers as they normally would.  Note that this differs slightly from the org.apache.avro.mapred.* way of doing things &amp;#8211; I don&apos;t plan to supply special AvroMapper and AvroReducer base classes or a new Serialization, since the AvroKey/AvroValue classes are Writable just like any other hadoop key/value type.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12926450" author="scott_carey" created="Fri, 29 Oct 2010 20:45:17 +0000"  >&lt;p&gt;FYI: Wrapping Avro serialization &apos;inside&apos; of Writable will work, but there will be some non-trivial performance cost to that.  Writable requires more fine-grained reads and writes from the underlying stream preventing optimal buffering for Avro.&lt;/p&gt;</comment>
                            <comment id="12928308" author="gwu" created="Thu, 4 Nov 2010 19:01:48 +0000"  >&lt;p&gt;Thanks for the info, Scott.&lt;/p&gt;

&lt;p&gt;Trying to avoid putting avro serialization &apos;inside&apos; of Writables, I came up with this patch that tries to keep features/changes to a bare minimum.  Let me know what you think.&lt;/p&gt;</comment>
                            <comment id="12978917" author="jjh" created="Fri, 7 Jan 2011 18:58:12 +0000"  >&lt;p&gt;I have one small issue with this, mapred.AvroSerialization has new protected methods added to it so that mapreduce.AvroSerialization may inherit from it.  This makes it a bit problematic to use this patch without fully patching the avro tree.  If mapreduce.AvroSerialization was completely separated from mapred.AvroSerialization then this patch could be used alongside existing 1.4.1.&lt;/p&gt;

&lt;p&gt;I will attempt to rework this patch to do this, but it may not be until next week or so.  &lt;/p&gt;
</comment>
                            <comment id="12978962" author="cutting" created="Fri, 7 Jan 2011 20:57:44 +0000"  >&lt;p&gt;I&apos;d actually prefer it if the implementations shared more rather than less, so that fixes and improvements would not need to be made twice.  For example, &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-669&quot; title=&quot;Avro Mapreduce Doesn&amp;#39;t Work With Reflect Schemas&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-669&quot;&gt;&lt;del&gt;AVRO-669&lt;/del&gt;&lt;/a&gt; made significant changes to the mapred code that would also be useful for the mapreduce version.  So might be nice if both versions of AvroJob shared a common base class, with shared setters and getters, e.g., getInputKeyDatumReader(), etc. to minimize replication of logic.&lt;/p&gt;</comment>
                            <comment id="12979234" author="jjh" created="Sat, 8 Jan 2011 23:53:25 +0000"  >&lt;p&gt;I can definitely see that, My goal is to be able to use the mapreduce api for avro alongside the current stable release of avro.  If you have a suggestion of where these mapred/mapreduce base classes should live package structure wise (org.apache.avro.mapreduce.common?), I&apos;ll work on it, and rework this patch to apply to current trunk also.&lt;/p&gt;</comment>
                            <comment id="12979735" author="cutting" created="Mon, 10 Jan 2011 20:21:11 +0000"  >&lt;p&gt;I don&apos;t have a strong opinion about where the base classes should live.  Perhaps they can just live in the mapred package?&lt;/p&gt;

&lt;p&gt;Thanks for working on this!&lt;/p&gt;</comment>
                            <comment id="13051395" author="tomwhite" created="Fri, 17 Jun 2011 23:14:25 +0000"  >&lt;p&gt;Is anyone still working on this?&lt;/p&gt;</comment>
                            <comment id="13167468" author="hammer" created="Mon, 12 Dec 2011 12:16:54 +0000"  >&lt;p&gt;There&apos;s some code at &lt;a href=&quot;https://github.com/friso/avro-mapreduce&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/friso/avro-mapreduce&lt;/a&gt; for working with the new MapReduce API&lt;/p&gt;</comment>
                            <comment id="13167855" author="gwu" created="Mon, 12 Dec 2011 22:08:58 +0000"  >&lt;p&gt;Coincidentally, we just announced the release of our avro mapreduce code today as well: &lt;a href=&quot;https://github.com/wibidata/odiago-avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/wibidata/odiago-avro&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13167925" author="cutting" created="Mon, 12 Dec 2011 23:04:25 +0000"  >&lt;p&gt;Garrett, I just glanced at this and it looks great!  You&apos;ve factored things so that much of the code is shared between the &apos;mapred&apos; and &apos;mapreduce&apos; implementations.&lt;/p&gt;

&lt;p&gt;The stuff in the &apos;file&apos; and &apos;io&apos; packages should probably be renamed.  Currently the &apos;io&apos; and &apos;file&apos; packages are in the main avro jar, which does not require Hadoop.  I think it&apos;s best not to split packages across multiple jars and these classes depend on Hadoop so probably belong in the avro-mapred jar.  Perhaps they should be renamed &apos;org.apache.avro.mapred.&lt;/p&gt;
{io,file}
&lt;p&gt;&apos;?&lt;/p&gt;

&lt;p&gt;Also, do you intend this code to be contributed to Apache Avro?  (I ask as a legal formality.)&lt;/p&gt;</comment>
                            <comment id="13167943" author="gwu" created="Mon, 12 Dec 2011 23:33:32 +0000"  >&lt;p&gt;Thanks.&lt;/p&gt;

&lt;p&gt;Yes, I intend this code to be contributed to Apache Avro. When I get some free cycles, I&apos;ll upload a patch with the &lt;/p&gt;
{io,file}
&lt;p&gt; packages renamed. But anyone else should feel free if they have time first.&lt;/p&gt;</comment>
                            <comment id="13210672" author="cutting" created="Fri, 17 Feb 2012 23:42:39 +0000"  >&lt;p&gt;Here&apos;s a first pass at renaming the packages.  Tests pass.  I&apos;ll take a closer look next week.&lt;/p&gt;</comment>
                            <comment id="13210813" author="cutting" created="Sat, 18 Feb 2012 05:21:25 +0000"  >&lt;p&gt;Garrett, this code looks great!  Thanks for contributing it.&lt;/p&gt;

&lt;p&gt;I renamed all of the packages to reside under org.apache.avro.mapred.  So that package now has subpackages named io, file, util and mapreduce.  That&apos;s consistent with other Avro modules, where classes are under org.apache.avro.&amp;lt;module&amp;gt;.&lt;/p&gt;

&lt;p&gt;The only exception is org.apache.hadoop.io.AvroSequenceFile.  This is in a Hadoop package so that it can access some package-private parts of SequenceFile.  This is fragile, as SequenceFile could change these non-public APIs.  We should probably file an issue with Hadoop to make these items protected so that SequenceFile can be subclassed in a supported way.&lt;/p&gt;

&lt;p&gt;I plan to improve the javadoc a bit (adding package.html files to new packages) and move versions for new dependencies from mapred/pom.xml into the parent pom.  Then I think this should be ready to commit.&lt;/p&gt;</comment>
                            <comment id="13212361" author="tomwhite" created="Tue, 21 Feb 2012 05:12:44 +0000"  >&lt;p&gt;&amp;gt; I renamed all of the packages to reside under org.apache.avro.mapred. So that package now has subpackages named io, file, util and mapreduce.&lt;/p&gt;

&lt;p&gt;Keeping the package org.apache.avro.mapreduce would be more consistent with Hadoop, which has the mapred/mapreduce distinction.&lt;/p&gt;</comment>
                            <comment id="13212819" author="cutting" created="Tue, 21 Feb 2012 19:21:29 +0000"  >&lt;p&gt;I see a few choices:&lt;/p&gt;

&lt;p&gt;1. org.apache.avro.&lt;/p&gt;
{mapred,mapreduce,io,file,util}.  This is what the code on github does.  This would make the avro-mapred module contain things outside the org.apache.avro.mapred package, and splits Avro&apos;s io, file and util packages across multiple modules.&lt;br/&gt;
&lt;br/&gt;
2. org.apache.avro.mapred.{mapreduce,io,file,util}.  This is what my patch does.  This is back-compatible and consistent with the module name, but places mapreduce under mapred, which is different than the Hadoop layout.&lt;br/&gt;
&lt;br/&gt;
3. org.apache.avro.hadoop.{mapred,mapreduce,io,file,util}
&lt;p&gt;.  We&apos;d rename the module to be avro-hadoop.  This would be incompatible but consistent with Hadoop.  For back-compatibility we might leave the mapred classes in their current package.&lt;/p&gt;

&lt;p&gt;4. org.apache.avro.&lt;/p&gt;
{mapred,mapreduce,mapred.io,mapred.file,mapred.util}
&lt;p&gt;.  This is back-compatible but includes a package that&apos;s not under the package of the module name.&lt;/p&gt;

&lt;p&gt;Tom, are you advocating for (4)?  I&apos;d be okay with that, I guess.&lt;/p&gt;

&lt;p&gt;I&apos;m also leaning towards moving AvroSequenceFile under org.apache.avro and adding just a shim base class into org.apache.hadoop.io that subclasses SequenceFile and makes public the bits we need.  That way if we get Hadoop to expose these bits the Avro API would not change.&lt;/p&gt;

</comment>
                            <comment id="13213012" author="scott_carey" created="Tue, 21 Feb 2012 22:12:51 +0000"  >&lt;p&gt;Re #1: its OK to have multiple packages in a single maven module, but not good to have a package split across modules as it causes problems for OSGi and in the future, Java 8 modules.&lt;/p&gt;

&lt;p&gt;Re #2: This is OK, but a little confusing. Also, if we ever wanted to break apart the mapred module in to two or three (e.g. avro-hadoop, avro-mapred, avro-mapreduce with the common stuff in avro-hadoop and the two APIs in the others) it will be less consistent.&lt;/p&gt;

&lt;p&gt;Re #3: This is fairly clean, but is incompatible.  &lt;/p&gt;

&lt;p&gt;Re #4: This is decent, but I would propose: org.apache.avro.&lt;/p&gt;
{hadoop,mapreduce,mapred,hadoop.io,hadoop.file,hadoop.util}
&lt;p&gt;.  Then the current module would have o.a.a.&lt;/p&gt;
{hadoop,mapreduce,mapred}
&lt;p&gt; and children packages.  A future split could divide on these cleanly.   One reason to split in the future is that some users may want hadoop stuff that is not related to mapreduce &amp;#8211; sequence files, avro data file access via FileSytem+Path, etc.  If we split the module, avoiding moving classes around is important.&lt;/p&gt;

&lt;p&gt;Is it possible to move AvroSequenceFile under o.a.a ?  All classes in that package need to be in the base avro maven module, and cannot depend on any hadoop APIs.&lt;/p&gt;</comment>
                            <comment id="13213018" author="scott_carey" created="Tue, 21 Feb 2012 22:18:44 +0000"  >&lt;p&gt;We also need to consider if we need to produce two otherwise identical modules in a build &amp;#8211; one 0.23.x + compatible and one for the 0.20 / 0.22 / 1.0 users.  My understanding is that one needs to compile against 0.23.x to work properly there.  Organizing the modules so that it is possible to produce an Avro release that supports multiple Hadoop variants would be useful.&lt;/p&gt;</comment>
                            <comment id="13213071" author="cutting" created="Tue, 21 Feb 2012 22:51:29 +0000"  >&lt;p&gt;&amp;gt; Is it possible to move AvroSequenceFile under o.a.a ?&lt;/p&gt;

&lt;p&gt;I discussed that above.  We could move it, but we&apos;d still need a shim in o.a.h.io, since the subclass accesses package-private bits.&lt;/p&gt;

&lt;p&gt;&amp;gt; if we need to produce two otherwise identical modules in a build &#8211; one 0.23.x + compatible and one for the 0.20 / 0.22 / 1.0 users&lt;/p&gt;

&lt;p&gt;The nested Context classes in mapreduce&apos;s Mapper and Reducer went from abstract classes to interfaces (&lt;a href=&quot;https://issues.apache.org/jira/browse/MAPREDUCE-954&quot; title=&quot;The new interface&amp;#39;s Context objects should be interfaces&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAPREDUCE-954&quot;&gt;&lt;del&gt;MAPREDUCE-954&lt;/del&gt;&lt;/a&gt;), requiring re-compilation of code that references these.  But the mapreduce support added here does not reference these.  So I think we&apos;re spared.&lt;/p&gt;</comment>
                            <comment id="13213141" author="tomwhite" created="Wed, 22 Feb 2012 00:19:57 +0000"  >&lt;p&gt;+1 to Scott&apos;s #4 variant.&lt;/p&gt;</comment>
                            <comment id="13213260" author="scott_carey" created="Wed, 22 Feb 2012 04:09:36 +0000"  >&lt;blockquote&gt;&lt;p&gt;I discussed that above. We could move it, but we&apos;d still need a shim in o.a.h.io, since the subclass accesses package-private bits.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let me clarify:  Is it possible for AvroSequenceFile to not reference anything in o.a.hadoop.** or o.a.a.&lt;/p&gt;
{mapreduce, hadoop, mapred}
&lt;p&gt;.** ? &lt;/p&gt;

&lt;p&gt;It has:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.mapred.AvroKey;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.mapred.AvroValue;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which would indicate to me that it must be in o.a.a.mapred.&lt;/p&gt;

&lt;p&gt;If it is in o.a.a it must not reference any classes that don&apos;t exist in the base avro module that encompases o.a.a (lang/java/avro)&lt;/p&gt;


&lt;p&gt;Ideally, anything in the .io, .util, and .file packages does not reference the .mapred or .mapreduce packages, so that this can be packaged as a standalone hadoop dependency down the road.  I have not looked at all those yet to see what the package dependencies are.&lt;/p&gt;</comment>
                            <comment id="13213866" author="cutting" created="Wed, 22 Feb 2012 19:09:30 +0000"  >&lt;p&gt;&amp;gt; Ideally, anything in the .io, .util, and .file packages does not reference the .mapred or .mapreduce packages [ ... ]&lt;/p&gt;

&lt;p&gt;Much in these packages references AvroKey and AvroValue and/or AvroJob.  These uses aren&apos;t mapreduce-specific and could be refactored away, e.g., by moving AvroKey and AvroValue from o.a.a.mapred to o.a.a.hadoop.io, but that would be incompatible.&lt;/p&gt;

&lt;p&gt;SortedKeyValueFile is the Avro equivalent of Hadoop&apos;s MapFile.  Arguably it should be moved into o.a.a.io.  It depends on AvroKeyValue, which might also be moved to the core.  AvroKeyValue is very similar in functionality to o.a.a.mapred.Pair.  Perhaps SortedKeyValueFile should be switched to use Pair and both moved to the core.&lt;/p&gt;

&lt;p&gt;I have implemented a SequenceFile shim and it works.  There&apos;s now just a tiny class that needs to be in o.a.h.io, a base class that exposes two package-private nested classes from within SequenceFile.&lt;/p&gt;

&lt;p&gt;I&apos;ve re-arranged the classes per Scott&apos;s #4 variant but can revert that.  We need to decide how much refactoring we want to do here.&lt;/p&gt;

&lt;p&gt;Finally, I note that io.SeekableHadoopInput replicates functionality that&apos;s already in mapred.FsInput, so we should replace the former with the latter in the new code.&lt;/p&gt;</comment>
                            <comment id="13250908" author="cutting" created="Tue, 10 Apr 2012 18:16:54 +0000"  >&lt;p&gt;I looked at this again today.&lt;/p&gt;

&lt;p&gt;AvroKeyValue is similar to Pair but is implemented quite differently.  Rather than itself having &apos;key&apos; and &apos;value&apos; fields it wraps a GenericData.Record that has those two fields.  This is exposed in its APIs.  Converting its uses to Pair would thus be a major undertaking.  Rather I think we might just tolerate these two similar classes in the project.&lt;/p&gt;

&lt;p&gt;I&apos;m also no longer convinced that it&apos;s worth trying to move SortedKeyValueFile into Avro&apos;s core.  The reader &amp;amp; writer constructors are Hadoop Path-based and changing this would require inventing a new abstract file interface, since the implementation manipulates the file names.&lt;/p&gt;

&lt;p&gt;So I just implemented the one other change contemplated in my previous comment (replacing SeekableHadoopInput with the existing FsInput).  Here&apos;s a new patch with that.&lt;/p&gt;

&lt;p&gt;Does anyone object to committing this?&lt;/p&gt;</comment>
                            <comment id="13252047" author="scott_carey" created="Wed, 11 Apr 2012 23:41:54 +0000"  >&lt;p&gt;No objections, but I have not had time for a deep review and won&apos;t for more than a week.  I don&apos;t think we need to hold this up for my full review, I can always create another ticket for later changes.&lt;/p&gt;</comment>
                            <comment id="13253652" author="cutting" created="Fri, 13 Apr 2012 19:03:45 +0000"  >&lt;p&gt;I committed this.  Thanks, Garrett!&lt;/p&gt;</comment>
                            <comment id="13253806" author="gwu" created="Fri, 13 Apr 2012 22:22:21 +0000"  >&lt;p&gt;Thank you, Doug, for doing the hard part &amp;#8211; integration!&lt;/p&gt;</comment>
                            <comment id="13258914" author="matthewcmead" created="Sat, 21 Apr 2012 18:48:32 +0000"  >&lt;p&gt;Quick question... it appears that this integration against mapreduce API only supports deflate compression &amp;#8211; is that right?&lt;/p&gt;

&lt;p&gt;Thanks for getting this in.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12543075">AVRO-1032</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12522145" name="AVRO-593-test.tgz" size="436" author="cutting" created="Tue, 10 Apr 2012 18:19:29 +0000"/>
                            <attachment id="12522143" name="AVRO-593.patch" size="262264" author="cutting" created="Tue, 10 Apr 2012 18:16:54 +0000"/>
                            <attachment id="12515632" name="AVRO-593.patch" size="268003" author="cutting" created="Wed, 22 Feb 2012 19:10:02 +0000"/>
                            <attachment id="12515048" name="AVRO-593.patch" size="264877" author="cutting" created="Fri, 17 Feb 2012 23:42:39 +0000"/>
                            <attachment id="12458837" name="AVRO-593.patch" size="31244" author="gwu" created="Thu, 4 Nov 2010 19:01:48 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 7 Jul 2010 22:11:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>71022</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 years, 40 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e19z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79969</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Add new mapreduce API bindings for hadoop.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-594] Change close() to stop() in the Server interface</title>
                <link>https://issues.apache.org/jira/browse/AVRO-594</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;When making a patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-544&quot; title=&quot;Allow the HttpServer to serve forever without a call to Thread.sleep()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-544&quot;&gt;&lt;del&gt;AVRO-544&lt;/del&gt;&lt;/a&gt;, this odd choice of naming turned up. It would be nice to have our interface consonant with Jetty&apos;s.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12468746">AVRO-594</key>
            <summary>Change close() to stop() in the Server interface</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="hammer">Jeff Hammerbacher</reporter>
                        <labels>
                    </labels>
                <created>Wed, 7 Jul 2010 18:41:18 +0000</created>
                <updated>Mon, 19 Jul 2010 22:03:31 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12888041" author="cutting" created="Tue, 13 Jul 2010 22:04:38 +0000"  >&lt;p&gt;Does it really make much of a difference?  This change would break compatibility.  Yes, close() is not quite as good a name as stop() for this, but is the name close() causing technical problems?&lt;/p&gt;</comment>
                            <comment id="12888101" author="hammer" created="Tue, 13 Jul 2010 23:24:24 +0000"  >&lt;p&gt;Doug: we&apos;re already breaking the API with &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-544&quot; title=&quot;Allow the HttpServer to serve forever without a call to Thread.sleep()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-544&quot;&gt;&lt;del&gt;AVRO-544&lt;/del&gt;&lt;/a&gt;, so I thought now might be a fortuitous time to get in another backwards-incompatible change. Given the pre-1.4.0 state of RPC support in Avro, it&apos;s unlikely that we&apos;re going to break production installations. I defer to your judgment on this matter, as I see the merits in your argument as well.&lt;/p&gt;</comment>
                            <comment id="12888487" author="cutting" created="Wed, 14 Jul 2010 19:03:54 +0000"  >&lt;p&gt;Jeff: Good point.  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-544&quot; title=&quot;Allow the HttpServer to serve forever without a call to Thread.sleep()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-544&quot;&gt;&lt;del&gt;AVRO-544&lt;/del&gt;&lt;/a&gt; will already require every user of the Server interface to now call start(), since ctors no longer conventionally start servers.  Given that, this further incompatibility is perhaps not so great a problem.  And start/stop will be much easier to explain long-term than start/close.&lt;/p&gt;</comment>
                            <comment id="12890060" author="cutting" created="Mon, 19 Jul 2010 22:03:31 +0000"  >&lt;p&gt;Many server implementations (SocketServer, DatagramServer and NettyServer) extend java.lang.Thread, which has a stop() method that&apos;s marked &apos;final&apos; so we cannot override it.  We could re-write these servers to not extend Thread, but that&apos;d be a fair bit of work.  Or we might instead use a name like &apos;shutdown&apos; if we really don&apos;t like &apos;close&apos;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12464749">AVRO-544</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 13 Jul 2010 22:04:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94898</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 27 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1a7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79970</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-595] Add Basic Trace Collection and Propagation</title>
                <link>https://issues.apache.org/jira/browse/AVRO-595</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description></description>
                <environment></environment>
        <key id="12469129">AVRO-595</key>
            <summary>Add Basic Trace Collection and Propagation</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21146&amp;avatarType=issuetype">Sub-task</type>
                            <parent id="12466926">AVRO-576</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="pwendell">Patrick Wendell</assignee>
                                    <reporter username="pwendell">Patrick Wendell</reporter>
                        <labels>
                    </labels>
                <created>Mon, 12 Jul 2010 22:48:51 +0000</created>
                <updated>Thu, 2 May 2013 02:29:29 +0000</updated>
                            <resolved>Fri, 13 Aug 2010 17:47:13 +0000</resolved>
                                                    <fixVersion>1.4.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12887584" author="pwendell" created="Mon, 12 Jul 2010 23:06:53 +0000"  >&lt;p&gt;Some initial design thoughts are listed here... interested in hearing feedback. The high level goal is to create a plugin that can be added to Avro clients which performs tracing. The design is largely based on Google&apos;s Dapper paper.&lt;/p&gt;

&lt;p&gt;1. What to trace&lt;br/&gt;
Similar to dapper, we will use spans as our tracing primitive. A span is an avro data record that includes:&lt;br/&gt;
long traceID (consistent across an entire RPC call tree)&lt;br/&gt;
long spanID (unique to each host in a call tree)&lt;br/&gt;
long parentSpanID&lt;br/&gt;
Map&amp;lt;Timestamp, eventEnum&amp;gt; events&lt;/p&gt;

&lt;p&gt;When the RPC plugin is called at critical points in the exchange, span event data will be filled in, keyed by timestamp. Trace and span id&apos;s are propagated as avro meta-data when one RPC triggers another (allowing us to back out a recursive call tree). &lt;/p&gt;

&lt;p&gt;2. Span storage and collection&lt;br/&gt;
The plugin will store span data locally in an avro data file. To expose this data, it will run an avro server which can be queried.&lt;/p&gt;

&lt;p&gt;To aggregate spans, every trace plugin will start a user-facing control applet. This applet will accept a list of hosts, which will each be probed for log data. That data will be collected from each span, aggregated, and summarized to the user.&lt;/p&gt;

&lt;p&gt;3. Turning on tracing&lt;br/&gt;
The plugin will include options that dictate the level of trace sampling (0 --&amp;gt; 1) and an upper bound on the amount of storage the tracing component can use. The sampling level will be used to decide whether to inject tracing meta-data into a new RPC (the root of a call tree).&lt;/p&gt;

&lt;p&gt;Alternatively, if an RPC request comes in which already has tracing turned on the plugin must always trace.&lt;/p&gt;</comment>
                            <comment id="12888067" author="cutting" created="Tue, 13 Jul 2010 22:41:15 +0000"  >&lt;p&gt;Sounds great!&lt;/p&gt;

&lt;p&gt;What&apos;s the plan for high-level access to traces?  Will there be a master server that queries all nodes in a cluster?  Will each node have indexes, to reduce the amount of data transmitted?  Or is this something that will be added later?&lt;/p&gt;</comment>
                            <comment id="12889274" author="pwendell" created="Fri, 16 Jul 2010 19:24:47 +0000"  >&lt;p&gt;Here is a patch with some initial design ideas for the tracing plugin. So far, I&apos;ve implemented/tested the propagation of trace data and defined base data types.&lt;/p&gt;

&lt;p&gt;The interface for querying is defined but unimplemented. Wouldn&apos;t mind feedback on that as well.&lt;/p&gt;</comment>
                            <comment id="12890033" author="cutting" created="Mon, 19 Jul 2010 21:07:50 +0000"  >&lt;p&gt;Looks like a good start.  Here are some comments.  I hope they&apos;re not to pedantic for this stage of the implementation.&lt;/p&gt;

&lt;p&gt;avroTrace.avdl&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;spurious //foo comment&lt;/li&gt;
	&lt;li&gt;why is the result of getSpanBlock a byte array rather than an array of spans?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;SpanStorage.java&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;i don&apos;t understand the need for the query handles, and they don&apos;t appear to be used for anything yet.&lt;/li&gt;
	&lt;li&gt;Why expose spans as ByteBuffers rather than as an iterator or a list or something?  Is this an optimization, so they can be efficiently re-serialized into RPCs?  I wonder if this is premature.&lt;/li&gt;
	&lt;li&gt;if getAllSpans() is just for testing, does it need to be public, or would package-private suffice?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;TracePlugin.java&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;creating a new encoder or decoder each time you read/write a long is heavyweight.  you could instead reuse a single encoder &amp;amp; decoder, switching the bytes they read or write.&lt;/li&gt;
	&lt;li&gt;payload size should be a long instead of an int&lt;/li&gt;
	&lt;li&gt;do we want to serve traces on a separate port, or simply on a different url?  this seems perhaps outside the scope of the plugin, which should just record the stats, and how they&apos;re published might be configured elsewhere?&lt;/li&gt;
	&lt;li&gt;how bad would a trace ID collision be?  RANDOM.nextLong() isn&apos;t ideal, but is fast and might be good enough if collisions aren&apos;t too terrible.  if collisions are to be avoided then it might use something like SecureRandom.nextBytes(new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;16&amp;#93;&lt;/span&gt;).&lt;/li&gt;
	&lt;li&gt;just catch IOException once, rather than around each of the metadata sets.  it should never happen anyway.&lt;/li&gt;
	&lt;li&gt;hostname should be computed once and stored in a field, not per event&lt;/li&gt;
	&lt;li&gt;why create 100-element event vectors?  shouldn&apos;t these grow as events are added?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12890424" author="pwendell" created="Tue, 20 Jul 2010 20:27:44 +0000"  >&lt;p&gt;&amp;gt;&amp;gt;  * why is the result of getSpanBlock a byte array rather than an array of spans?&lt;/p&gt;

&lt;p&gt;We discussed off-line - going to change this, but may change back if there are performance benefits.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;    * i don&apos;t understand the need for the query handles, and they don&apos;t appear to be used for anything yet.&lt;/p&gt;

&lt;p&gt;This is just a thought on how we might deal with queries that may persist over multiple calls. I&apos;ll settle this interface as we continue to work on this.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; * do we want to serve traces on a separate port, or simply on a different url? this seems perhaps outside the scope of the plugin, which should just record the stats, and how they&apos;re published might be configured elsewhere?&lt;/p&gt;

&lt;p&gt;I think our idea is to have some basic aggregation/viewing of stats included in the plugin, but also keep things extensible if people want to run their own analyses. &lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;  * how bad would a trace ID collision be? RANDOM.nextLong() isn&apos;t ideal, but is fast and might be good enough if collisions aren&apos;t too terrible. if collisions are to be avoided then it might use something like SecureRandom.nextBytes(new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;16&amp;#93;&lt;/span&gt;).&lt;/p&gt;

&lt;p&gt;Collisions won&apos;t break the app, but (sampling is only probabilistic, so we could just toss out traces where collisions happen) - however maybe will just do this anyways.&lt;/p&gt;</comment>
                            <comment id="12890911" author="philip" created="Wed, 21 Jul 2010 21:39:11 +0000"  >&lt;p&gt;I put up a review on reviewboard:&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/351/#review443&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#review443&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;Great start.  Comments below.&lt;/p&gt;


&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/InMemorySpanStorage.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1866&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1866&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   queryHandle seems unused here.  The query stuff still seems to be baking; I haven&apos;t seen if your tests depend on it, but it might make sense to stage it out of this commit and put it back in later when it&apos;s more strictly necessary.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/SpanStorage.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1864&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1864&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Drop @author&apos;s for Apache code&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/SpanStorage.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1865&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1865&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   It&apos;s weird that this returns bytes and not objects...&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/TracePlugin.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1851&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1851&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   mention how this might be disabled?&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/TracePlugin.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1852&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1852&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Could you initialize these guys in-line and mark them final as well?&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/TracePlugin.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1853&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1853&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   I&apos;m not a big fan of using Configuration here.  Even though AVRO has a dependency on Hadoop, it seems a bit abusive to use it where there&apos;s no Hadoop going on.&lt;/p&gt;

&lt;p&gt;   I recommend a POJO represingting TracePluginConfiguration which people can create and pass to this.&lt;/p&gt;

&lt;p&gt;   If you were using Hadoop configuration, you&apos;d want the keys to be better namespaced (i.e., avro.trace.foo instead of just foo), since people would want to use the same global configuration mechanism.  But my opinion is that the layer that&apos;s doing the work should use reasonably typed configuration, and if you want to layer something above it, that can be done above.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/TracePlugin.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1854&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1854&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   These are static, so you shouldn&apos;t need to instantiate them per instance.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/TracePlugin.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1855&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1855&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Why Math.abs()?  Is spanID a fixed(4) or a long?  It&apos;ll store more efficiently if it&apos;s a fixed(4), though it might be more of a pain to use.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/TracePlugin.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1856&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1856&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   What&apos;s the 100 doing here?&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/TracePlugin.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1857&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1857&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Cache this?&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/TracePlugin.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1858&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1858&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Extract &quot;createNewEmptySpan()&quot; into a method; you&apos;ve done the same thing twice.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/TracePlugin.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1859&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1859&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   You should document (perhaps in package.html, or in javadoc here) how this system uses the RPC metadata.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/TracePlugin.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1860&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1860&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Since these aren&apos;t supposed to happen, I tend to escalate them into RuntimeException instead of dropping them on the floor.  Just in case &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/TracePlugin.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1861&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1861&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   I&apos;m a little confused as to why you need both span and parent_span, but I might be missing something.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/TracePlugin.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1862&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1862&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Log about this; you&apos;d want to know that something is misbehaving.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/TracePlugin.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1863&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1863&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   You&apos;re using childSpan and this.childSpan inconsistency in a few places; may as well make it consistent.&lt;/p&gt;



&lt;p&gt;lang/java/src/test/java/org/apache/avro/ipc/trace/TestBasicTracing.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1868&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1868&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Looks like x, y, w here.&lt;/p&gt;



&lt;p&gt;lang/java/src/test/java/org/apache/avro/ipc/trace/TestBasicTracing.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1869&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1869&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   I wonder if this test would read easier if you used the specific API and generated some classes for it.  Not a big concern.&lt;/p&gt;



&lt;p&gt;share/schemas/org/apache/avro/ipc/trace/avroTrace.avdl&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1870&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1870&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Perhaps add a microseconds component to this as well?&lt;/p&gt;



&lt;p&gt;share/schemas/org/apache/avro/ipc/trace/avroTrace.avdl&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1847&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1847&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   It&apos;s a little weird that &quot;SpanEventType&quot; isn&apos;t really a type; it&apos;s the event itself.&lt;/p&gt;

&lt;p&gt;   Perhaps, rename SpanEventType as SpanEvent?&lt;/p&gt;



&lt;p&gt;share/schemas/org/apache/avro/ipc/trace/avroTrace.avdl&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1848&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1848&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Document each of these fields?&lt;/p&gt;



&lt;p&gt;share/schemas/org/apache/avro/ipc/trace/avroTrace.avdl&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1849&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1849&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   It might be useful to have both host and port.&lt;/p&gt;



&lt;p&gt;share/schemas/org/apache/avro/ipc/trace/avroTrace.avpr&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/351/#comment1850&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/#comment1850&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Is this generated?  Could this be generated by the build instead of checked in?&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Philip&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2010-07-21 13:02:51, Philip Zeyliger wrote:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; -----------------------------------------------------------&lt;br/&gt;
&amp;gt; This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&amp;gt; &lt;a href=&quot;http://review.hbase.org/r/351/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/351/&lt;/a&gt;&lt;br/&gt;
&amp;gt; -----------------------------------------------------------&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; (Updated 2010-07-21 13:02:51)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Show quoted text -&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12892602" author="pwendell" created="Tue, 27 Jul 2010 01:34:23 +0000"  >&lt;p&gt;Here is a patch update based on the preliminary feedback. I dropped the querying stuff since it&apos;s not yet used. This patch adds the logic behind aggregating partial spans (which will have been collected from several remote hosts) and creating traces (extracting RPC call trees from a set of spans).&lt;/p&gt;

&lt;p&gt;We talked off-line about redundancy in the data that is collected. We could get away with only recording a spanID and a parentSpanID for each span, then we can back-out each trace by following these data (we get to the root of a trace when we see a null parentSpanID). By adding a traceID unique to each call tree, it is easier to partition the work of collecting spans into traces as we can easily group spans by trace before we try back-out a tree (perhaps this is why Dapper paper describes this method). It also lowers the chance of ID collision since spanID and parentSpanID are specific to one traceID.&lt;/p&gt;
</comment>
                            <comment id="12893374" author="philip" created="Wed, 28 Jul 2010 21:26:00 +0000"  >&lt;p&gt;Another review via reviewboard:&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/390/#review521&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#review521&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;Good stuff, Patrick.  A few concerns about InMemorySpanStorage and a few other things in the review below.&lt;/p&gt;


&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/InMemorySpanStorage.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2088&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2088&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   nitpick: grammar is wonky here.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/InMemorySpanStorage.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2089&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2089&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Seems like you probably have concurrency issues here: a multi-threaded server shares one span storage, so, unless there&apos;s a synchronized somewhere above this, this doesn&apos;t work.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/InMemorySpanStorage.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2091&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2091&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   This is tricky to use on a running server because the spans are still in play.  You could make a copy, which is expensive, but since real clients would use files...&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/SpanAggregator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2102&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2102&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   I suspect that SpanEvent.values() is what you&apos;re looking for here, instead of enumerating all the enums.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/SpanAggregator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2109&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2109&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   You do these 5 lines twice; may as well make a helper function.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/SpanAggregator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2110&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2110&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   After reading this code a couple of times, I think it may be simpler if you follow more of a map-reduce pattern.&lt;/p&gt;

&lt;p&gt;   First group all the spans.  Then go through every grouping and see if it&apos;s complete.  Your code keeps checking to see if the grouping is complete as you go, which makes the logic a little harder to follow.&lt;/p&gt;

&lt;p&gt;   Just a suggestion; it works either way.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/SpanAggregator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2107&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2107&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Look into using EnumSet here.  It&apos;s probably more efficient than a linkedlist.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/SpanAggregator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2108&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2108&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   is this &apos;if&apos; ever false if you have a complete span between the two?&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/SpanAggregator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2111&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2111&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Since traces.get(traceID) is the next thing you do, you can probably iterate over the items in traces to begin with.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/Trace.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2112&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2112&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Do you actually need the empty constructor and the setter?  If you can avoid two ways of doing something, that&apos;s often better.  You might need it, of course.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/Trace.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2113&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2113&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   You might mention that the graphi is meant to be read with your head askew.  I found the encoding a bit hard to read.  Perhaps (w &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; (y (z)) (more of an S-expression-style tree) would be easier to read?  Your call.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/Trace.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2114&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2114&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Extract 1000000 to a constant.  (MICROS_PER_SECOND?)&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/Trace.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2115&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2115&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   I think our style guide typically recommends&lt;/p&gt;

&lt;p&gt;   if (...) &lt;/p&gt;
{
     ...
   } else {     ...   }

&lt;p&gt;   (i.e., put else on the same line as the two braces)&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/Trace.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2116&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2116&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   Naively, if you structure the getChildren() function nicely, you could get away without managing the root separately, since every subnode is it&apos;s own &quot;root&quot;.  Not sure if that&apos;s easy to do in this case without trying it.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/TracePlugin.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2117&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2117&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   I think you&apos;ve just re-implemented Arrays.equals(byte[] a, byte[] b).&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Philip&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12894832" author="philip" created="Tue, 3 Aug 2010 06:05:54 +0000"  >&lt;p&gt;Via reviewboard again:&lt;/p&gt;


&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/390/#review627&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#review627&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;Almost there.  I tried running the tests and ran into some issues:&lt;/p&gt;

&lt;p&gt;Testcase: testRecursingTrace took 0.006 sec&lt;br/&gt;
       Caused an ERROR&lt;br/&gt;
Connection refused&lt;br/&gt;
java.net.ConnectException: Connection refused&lt;/p&gt;


&lt;p&gt;Does &quot;ant test clean&quot; work for you?  I think it&apos;s trying to re-use a port that it hasn&apos;t closed.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/Util.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2366&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2366&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   If you can avoid this, I would avoid making this public.&lt;/p&gt;



&lt;p&gt;lang/java/src/java/org/apache/avro/ipc/trace/Util.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/390/#comment2365&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/390/#comment2365&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;   This doesn&apos;t feel public to me&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Philip&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12895442" author="pwendell" created="Wed, 4 Aug 2010 22:19:55 +0000"  >&lt;p&gt;We are changing the scope of this particular JIRA, subsequent JIRA&apos;s will reflect further legs of this project.&lt;/p&gt;</comment>
                            <comment id="12895443" author="pwendell" created="Wed, 4 Aug 2010 22:20:25 +0000"  >&lt;p&gt;typo!&lt;/p&gt;</comment>
                            <comment id="12895446" author="pwendell" created="Wed, 4 Aug 2010 22:23:33 +0000"  >&lt;p&gt;This patch sync&apos;s up with most recent version of trunk (some API changes in HTTPServer happened in-between). Also, it improves tear-down for unit tests.&lt;/p&gt;</comment>
                            <comment id="12895477" author="philip" created="Thu, 5 Aug 2010 00:08:48 +0000"  >&lt;p&gt;I just committed this.  Thanks, Patrick!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12470843">AVRO-606</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12449691" name="AVRO-595.patch.v1.txt" size="31726" author="pwendell" created="Fri, 16 Jul 2010 19:24:47 +0000"/>
                            <attachment id="12450546" name="AVRO-595.patch.v2.txt" size="80937" author="pwendell" created="Tue, 27 Jul 2010 01:34:23 +0000"/>
                            <attachment id="12451273" name="AVRO-595.patch.v3.txt" size="88580" author="pwendell" created="Wed, 4 Aug 2010 22:23:33 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 13 Jul 2010 22:41:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94899</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 25 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1af:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79971</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
