<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:15:44 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2011-6-15+AND+created+%3C%3D+2011-6-22+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="2" total="2"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-839] Implement builder pattern in generated record classes that sets default values when omitted</title>
                <link>https://issues.apache.org/jira/browse/AVRO-839</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;This is an idea for an improvement to the SpecificCompiler-generated record classes.  There are two main issues to address:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Default values specified in schemas are only used at read time, not when writing/serializing records.  For example, a NullPointerException is thrown when attempting to write a record that has an uninitialized array or string type.  I&apos;m sure this was done for good reasons, like giving users maximum control and preventing unnecessary garbage collection, but I think it&apos;s also somewhat confusing and unintuitive for new users (myself included).&lt;/li&gt;
	&lt;li&gt;Users have to create their own factory classes/methods for every record type, both to ensure that all non-primitive members are initialized and to facilitate the construction and initialization of record instances (i.e. constructing and setting values in a single statement).&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;These issues have been discussed previously here:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://search-hadoop.com/m/iDVTn1JVeSR1&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://search-hadoop.com/m/iDVTn1JVeSR1&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-726&quot; title=&quot;Make GenericDatumReader/GenericDatumWriter data member protected so that it can be used by the derived classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-726&quot;&gt;&lt;del&gt;AVRO-726&lt;/del&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-770&quot; title=&quot;Codegen enhancement per comments from Avro-726&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-770&quot;&gt;AVRO-770&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://search-hadoop.com/m/JuY1V16pwxh1&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://search-hadoop.com/m/JuY1V16pwxh1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;d like to propose a solution that is used by at least one other messaging framework.  For each generated record class there will be a public static inner class called Builder.  The Builder inner class has the same fields as the record class, as well as accessors and mutators for each of these fields.  Whenever a mutator method is called, the Builder sets a boolean flag indicating that the field has been set.  All mutators return a reference to &apos;this&apos;, so it&apos;s possible to chain a series of setter invocations, which makes it really easy to construct records in a single statement.  The Builder also has a build() method which constructs a record instance using the values that were set in the Builder.  When the build() method is invoked, if there are any fields that have not been set but have default values as defined in the schema, the Builder will set the values of these fields using their defaults.&lt;/p&gt;

&lt;p&gt;One nice thing about implementing the builder pattern in a static inner Builder class rather than in the record itself is that this enhancement will be completely backwards-compatible with existing code.  The record class itself would not change, and the public fields would still be there, so existing code would still work.  Users would have the option to use the Builder or continue constructing records manually.  Eventually the public fields could be phased out, and the record would be made immutable.  All changes would have to be done through the Builder.&lt;/p&gt;

&lt;p&gt;Here is an example of what this might look like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;// Person.newBuilder() returns a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Person.Builder instance
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// All Person.Builder setters &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&apos;&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;&apos;&lt;/span&gt; allowing us to chain set calls together &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; convenience
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Person.Builder.build() returns a Person instance after setting any uninitialized values that have defaults
&lt;/span&gt;Person me = Person.newBuilder().setName(&lt;span class=&quot;code-quote&quot;&gt;&quot;James&quot;&lt;/span&gt;).setCountry(&lt;span class=&quot;code-quote&quot;&gt;&quot;US&quot;&lt;/span&gt;).setState(&lt;span class=&quot;code-quote&quot;&gt;&quot;MA&quot;&lt;/span&gt;).build();

&lt;span class=&quot;code-comment&quot;&gt;// We still have direct access to Person&apos;s members, so the records are backwards-compatible
&lt;/span&gt;me.state = &lt;span class=&quot;code-quote&quot;&gt;&quot;CA&quot;&lt;/span&gt;;

&lt;span class=&quot;code-comment&quot;&gt;// Person has accessor methods now so that the &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; fields can be phased out later
&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(me.getState());

&lt;span class=&quot;code-comment&quot;&gt;// No NPE here because the array&amp;lt;Person&amp;gt; field that stores &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; person&apos;s friends has been automatically 
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// initialized by the Builder to a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.util.ArrayList&amp;lt;Person&amp;gt; due to a @java_class annotation in the IDL
&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(me.getFriends().size());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What do people think about this approach?  Any other ideas?&lt;/p&gt;</description>
                <environment></environment>
        <key id="12510523">AVRO-839</key>
            <summary>Implement builder pattern in generated record classes that sets default values when omitted</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jbaldassari">James Baldassari</assignee>
                                    <reporter username="jbaldassari">James Baldassari</reporter>
                        <labels>
                    </labels>
                <created>Thu, 16 Jun 2011 04:35:39 +0000</created>
                <updated>Tue, 24 Jan 2012 04:56:04 +0000</updated>
                            <resolved>Fri, 26 Aug 2011 20:56:51 +0000</resolved>
                                                    <fixVersion>1.6.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13050298" author="cutting" created="Thu, 16 Jun 2011 08:49:54 +0000"  >&lt;p&gt;+1 This sounds like great approach.&lt;/p&gt;

&lt;p&gt;We might deprecate the public fields to encourage folks to start using getters and setters instead?  We should probably leave the public no-arg constructor though for use when reading data.&lt;/p&gt;</comment>
                            <comment id="13050412" author="jbaldassari" created="Thu, 16 Jun 2011 13:35:01 +0000"  >&lt;p&gt;Thanks, Doug.  Agreed on deprecating the public fields and leaving the public no-arg constructor.  Hopefully I&apos;ll have time to work on a patch soon.&lt;/p&gt;</comment>
                            <comment id="13058779" author="cutting" created="Fri, 1 Jul 2011 20:37:08 +0000"  >&lt;p&gt;This is also related to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-784&quot; title=&quot;SpecificCompiler should generate accessors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-784&quot;&gt;&lt;del&gt;AVRO-784&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13059659" author="jbaldassari" created="Tue, 5 Jul 2011 02:13:23 +0000"  >&lt;p&gt;I finally had some time to work on this, and I have a patch ready now.  The functionality is basically as described in this issue.  There are a few implementation details to note:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Implemented both generic and specific Builders&lt;/li&gt;
	&lt;li&gt;Builders can also be initialized from other Builders or from record types.  For example:
	&lt;ul&gt;
		&lt;li&gt;Person.newBuilder(anotherPersonBuilder)&lt;/li&gt;
		&lt;li&gt;Person.newBuilder(anotherPerson)&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;In addition to the accessor method in the record type I also added a mutator method.  I&apos;m not sure if this is best; I just thought it was more flexible.  We could instead force all mutations to go through a Builder.  Thoughts?&lt;/li&gt;
	&lt;li&gt;I introduced a new set of reserved words for error types which includes all the standard reserved words in addition to &quot;message&quot; and &quot;cause&quot;.  The reason these two new words need to be reserved (for error types only) is that otherwise the generated accessor methods would conflict with those in java.lang.Throwable.&lt;/li&gt;
	&lt;li&gt;I found that determining the default Java value for a field is fairly expensive because it requires serializing the JSON field and then deserializing it (is there a better way to do this?).  For that reason I introduced a static cache of default values in RecordBuilderBase.  We only determine the default value once per schema and field, at which point it is added to the static cache.  After a default value has been added to the cache, whenever we need use it we first obtain a deep copy of it so that subsequent changes will not affect the values stored in the cache.&lt;/li&gt;
	&lt;li&gt;Even though the @java_class annotation is used in the IDL documentation, I couldn&apos;t find it anywhere in the Avro source.  Maybe that should be a future enhancement instead?&lt;/li&gt;
	&lt;li&gt;Updated all unit tests so that they no longer directly access record fields.  They now use the new accessor/mutator methods.  As a result, a lot of the changes in this patch are just updates to unit tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;While I was working on the Velocity templates I also made the following changes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Implemented changes requested in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-846&quot; title=&quot;Error record classes do not allow you to set the exception message or cause on construction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-846&quot;&gt;&lt;del&gt;AVRO-846&lt;/del&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Added constructor to generated Fixed instances that allows setting the byte[] in the constructor.  This change makes it easier to used Fixed values with the builder interface.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All existing unit tests pass, and I added unit tests to cover all new functionality.&lt;/p&gt;</comment>
                            <comment id="13059660" author="jbaldassari" created="Tue, 5 Jul 2011 02:14:24 +0000"  >&lt;p&gt;Here&apos;s the patch.  This applies cleanly to trunk as of r1142876.&lt;/p&gt;</comment>
                            <comment id="13059661" author="jbaldassari" created="Tue, 5 Jul 2011 02:16:12 +0000"  >&lt;p&gt;This patch includes changes requested in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-846&quot; title=&quot;Error record classes do not allow you to set the exception message or cause on construction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-846&quot;&gt;&lt;del&gt;AVRO-846&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13060072" author="cutting" created="Tue, 5 Jul 2011 18:48:33 +0000"  >&lt;p&gt;Looks great!&lt;/p&gt;

&lt;p&gt;The deepCopy() method would better be on GenericData than on Schema.  Schema doesn&apos;t have any logic specific to representations of the data, while GenericData is the base class for three representations (generic, specific, and reflect).&lt;/p&gt;

&lt;p&gt;I think there are a number of opportunities for optimization, but we can leave those for subsequent patches.  What&apos;s important at this point is that the APIs look good and that it doesn&apos;t slow existing APIs.  It doesn&apos;t much change existing APIs so I&apos;m not worried there.&lt;/p&gt;

&lt;p&gt;Do RecordBuilderBase#has(int), get(int) and set(int) need to be public?  Protected would be better, since these are unsafe methods, or at least a javadoc comment encouraging caution.  Also, on a related note, it might be simpler and faster to have the builder to store things in an IndexedRecord instance, rather than in an Object[].  Then the generated specific builder methods could just do something like &apos;instance.foo = value&apos;.  This might make it harder to reuse builders, though...&lt;/p&gt;</comment>
                            <comment id="13060268" author="jbaldassari" created="Wed, 6 Jul 2011 03:55:33 +0000"  >&lt;p&gt;Thanks for the comments, Doug.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The deepCopy() method would better be on GenericData than on Schema.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sure, makes sense.  I&apos;ll move it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think there are a number of opportunities for optimization, but we can leave those for subsequent patches.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agreed.  I did a quick performance test, and it looks like the builders are about an order of magnitude slower than manually creating a specific record instance.  I&apos;m not sure why, but I&apos;ll try profiling it.  Maybe someone who is more familiar with Avro internals can suggest some improvements.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do RecordBuilderBase#has(int), get(int) and set(int) need to be public?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Nope.  I only made them public because get(int) and put(int, Object) are public in IndexedRecord and SpecificRecordBase.  I&apos;ll change these to be protected in the builder interfaces/classes.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;it might be simpler and faster to have the builder to store things in an IndexedRecord instance, rather than in an Object[]. Then the generated specific builder methods could just do something like &apos;instance.foo = value&apos;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s an interesting idea.  I&apos;ll try it out and see if it improves anything.  However, the builders will still need to maintain that array of booleans for keeping track of which fields have been set (simply checking for null won&apos;t suffice because some types like unions can have null values).  One other idea I had was to replace the Object[] with a GenericData.Record so that less code would be duplicated and the equals() method would work correctly.&lt;/p&gt;</comment>
                            <comment id="13062829" author="jbaldassari" created="Sun, 10 Jul 2011 23:25:28 +0000"  >&lt;p&gt;I have a new version of the patch ready.  Here is a summary of the most significant changes from the first version:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;deepCopy() moved from Schema to GenericData&lt;/li&gt;
	&lt;li&gt;RecordBuilderBase#has(int),get(int),set(int) made protected&lt;/li&gt;
	&lt;li&gt;Added clear&lt;span class=&quot;error&quot;&gt;&amp;#91;Field&amp;#93;&lt;/span&gt;() methods, which set the value of a field to null and clear the boolean indicating that the field has been set&lt;/li&gt;
	&lt;li&gt;I wasn&apos;t satisfied with the performance of the Builder implementation, so I did quite a bit of profiling and addressed the major bottlenecks.  These were:
	&lt;ul&gt;
		&lt;li&gt;Schema.hashCode(), as noted in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-853&quot; title=&quot;Cache hash codes in Schema and Field&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-853&quot;&gt;&lt;del&gt;AVRO-853&lt;/del&gt;&lt;/a&gt;.  I removed this bottleneck by changing the type of the default value cache from a Map&amp;lt;Schema,Map&amp;lt;Field,Object&amp;gt;&amp;gt; to a Map&amp;lt;String,Map&amp;lt;Integer,Object&amp;gt;&amp;gt;, where the String is the Schema&apos;s full name and the Integer is the field&apos;s position.&lt;/li&gt;
		&lt;li&gt;Deep copying Utf8 instances was inefficient because it converted the Utf8 to a String and then back to a Utf8.  It turns out String.getBytes(Charset) is fairly expensive.  I fixed this issue by adding a copy constructor to Utf8 that copies the bytes field.  I also improved the performance of Utf8 slightly by initializing a Charset once as a static constant and using that throughout the class rather than the String &quot;UTF-8&quot;.&lt;/li&gt;
		&lt;li&gt;Generated SpecificBuilder classes no longer rely on reflection to create new record instances.  Instead, newRecord() is overridden in the generated Builder classes.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I wrote some performance tests in TestSpecificBuilder that can be run to compare the performance of the Builder, with and without default values, to manually creating record instances.  The Builder is about an order of magnitude slower than manually creating record instances, but I think it&apos;s acceptable.  For example, building 1 billion records manually took about 8ms on my system vs. 217ms using the Builder.  After profiling this version of the Builder I don&apos;t see many opportunities for further optimization.&lt;/p&gt;

&lt;p&gt;So I think the patch is in pretty good shape now, but let me know what you think.&lt;/p&gt;</comment>
                            <comment id="13062830" author="jbaldassari" created="Sun, 10 Jul 2011 23:26:07 +0000"  >&lt;p&gt;Version 2 of the &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-839&quot; title=&quot;Implement builder pattern in generated record classes that sets default values when omitted&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-839&quot;&gt;&lt;del&gt;AVRO-839&lt;/del&gt;&lt;/a&gt; patch.&lt;/p&gt;</comment>
                            <comment id="13063564" author="cutting" created="Mon, 11 Jul 2011 21:42:23 +0000"  >&lt;p&gt;Sorry I didn&apos;t notice this previously but I don&apos;t think RecordBuilder etc. should be in the top-level package.  These might be better in generic.  We probably really need another package named &apos;data&apos; or somesuch that contains the base classes and interfaces that generic, specific and reflect implement and extend.  We could add that package in this patch with these new classes, or put them in generic along with IndexedRecord, etc., but I&apos;d rather not clutter the top-level package if possible.&lt;/p&gt;

&lt;p&gt;Also, the generated getters and setters should directly set the field rather than calling &apos;get(0)&apos; or &apos;put(0, value)&apos;.  This will avoid the switch statement, speeding things.&lt;/p&gt;</comment>
                            <comment id="13082917" author="jbaldassari" created="Thu, 11 Aug 2011 04:58:14 +0000"  >&lt;p&gt;Sorry for the long delay in working on this.  I finally had a chance to get back to it this week, and I have another patch ready.  The main changes are:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Moved Builder-related interfaces and base classes out of top-level package into org.apache.avro.data&lt;/li&gt;
	&lt;li&gt;Getters/setters get/set fields directly rather than calling get()/put()&lt;/li&gt;
	&lt;li&gt;In an effort to improve overall builder performance for specific/generated records, I moved most of the generic code out of RecordBuilderBase and pushed it down into the generated Builder code.  I also did quite a bit of profiling in an effort to reduce the biggest bottlenecks.
	&lt;ul&gt;
		&lt;li&gt;There is now a lot more generated code, but it&apos;s faster.&lt;/li&gt;
		&lt;li&gt;Testing indicates that without using default values (i.e. all fields in the Builder are set), the Builder is about one order of magnitude slower than directly creating/initializing a record.  However, a Builder instance can be reused, and if this is done rather than creating a new Builder each time there is almost no performance penalty for using the Builder.&lt;/li&gt;
		&lt;li&gt;If the Builder has to resolve a default value from the schema, it&apos;s obviously going to be a little slower, but it&apos;s still only one order of magnitude slower than directly creating records.  In my testing the Builder was about 3-4 times slower when resolving default values, but I expect this will vary a lot depending on the schema.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So let me know what you think.  I&apos;m happy to make more adjustments if necessary.&lt;/p&gt;</comment>
                            <comment id="13082918" author="jbaldassari" created="Thu, 11 Aug 2011 04:58:49 +0000"  >&lt;p&gt;Here&apos;s the third iteration of the patch.&lt;/p&gt;</comment>
                            <comment id="13083404" author="cutting" created="Thu, 11 Aug 2011 19:15:36 +0000"  >&lt;p&gt;This is looking good.  A few comments:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why does SpecificExceptionBase include serialVersionUID?&lt;/li&gt;
	&lt;li&gt;The first line of new SpecificFixed constructor can just be &apos;this();&apos;, no?&lt;/li&gt;
	&lt;li&gt;GenericData#deepCopy() should probably not be static.  We might instead refactor GenericDatumReader&apos;s newRecord() and createFixed() to GenericData so they can be used by deepCopy().  Currently I believe deepCopy is broken for SpecificFixed.  It also adds a dependency by generic on specific, when otherwise specific currently layers on generic.&lt;/li&gt;
	&lt;li&gt;RecordBuilderBase#isValidValue&apos;s logic for checking for a NULL in a union is incorrect.  Schema#getTypes() returns List&amp;lt;Schema&amp;gt;, not List&amp;lt;Schema.Type&amp;gt;.  We should perhaps add a test of a union with null for this.  Also, I don&apos;t think this method needs to be static.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13088974" author="jbaldassari" created="Mon, 22 Aug 2011 20:08:50 +0000"  >&lt;p&gt;Sorry for the delay again.  I&apos;ll try to find time to work on this more regularly.  Thanks for the comments.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why does SpecificExceptionBase include serialVersionUID?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Probably just to get Eclipse to stop complaining.  SpecificExceptinoBase isA Throwable, which is serializable, so apparently the &quot;right thing&quot; to do is to declare the magic serialVersionUID field.  However, it&apos;s not strictly required, so I&apos;ll remove it if you&apos;d prefer.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The first line of new SpecificFixed constructor can just be &apos;this();&apos;, no?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes.  I&apos;ll change it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;GenericData#deepCopy() should probably not be static.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;OK, I didn&apos;t realize that GenericData was a singleton, so I&apos;ll make deepCopy() non-static and then invoke it via the singleton instance.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We might instead refactor GenericDatumReader&apos;s newRecord() and createFixed() to GenericData so they can be used by deepCopy(). Currently I believe deepCopy is broken for SpecificFixed. It also adds a dependency by generic on specific, when otherwise specific currently layers on generic.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Comparing GenericData#deepCopy() and GenericDatumReader#createFixed(), it looks to me like they&apos;re doing similar things for Fixed values.  Could you elaborate on why you think it&apos;s broken in GenericData#deepCopy()?  Even if it does work in deepCopy(), it would probably be a good idea to move createFixed() over to GenericData just to prevent code duplication.&lt;/p&gt;

&lt;p&gt;As for the new specific dependency in GenericData, I agree that it&apos;s not an ideal situation.  This dependency is coming from the code that handles deep copies of record instances.  This code could be changed to simply return new GenericData.Record(schema) for all records.  It just seemed to me that performing a deep copy on a specific record should return the same specific record type rather than a GenericData.Record.  What about adding a newInstance() method to IndexedRecord (or GenericContainer)?  That way generic records could return GenericData.Record instances, and specific records could return instances of the generated type.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;RecordBuilderBase#isValidValue&apos;s logic for checking for a NULL in a union is incorrect. Schema#getTypes() returns List&amp;lt;Schema&amp;gt;, not List&amp;lt;Schema.Type&amp;gt;. We should perhaps add a test of a union with null for this. Also, I don&apos;t think this method needs to be static.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good catch!  I think I&apos;ve fixed this problem, but I will add a unit test for this method as you suggested.&lt;/p&gt;</comment>
                            <comment id="13089672" author="cutting" created="Tue, 23 Aug 2011 19:14:53 +0000"  >&lt;p&gt;Re serialVersionUID: yes, please remove it.  Perhaps you can disable this &quot;feature&quot; in Eclipse?&lt;/p&gt;

&lt;p&gt;Re deepCopy(): We should move newRecord() and createFixed() from GenericDatumReader &amp;amp; SpecificDatumReader (which overrides them) to GenericData and SpecificData.  The GenericData#deepCopy() implementation can call these and will then work correctly for specific or generic without directly referencing specific.  Does that make sense?  We don&apos;t need to add a newInstance() method to IndexedRecord, but should instead use GenericData#newRecord().&lt;/p&gt;</comment>
                            <comment id="13089946" author="jbaldassari" created="Wed, 24 Aug 2011 02:10:59 +0000"  >&lt;p&gt;Makes sense, Doug.  I&apos;ve made the changes you suggested.  I also had to make the generic/specific builders similar to the GenericDatumReader/SpecificDatumReader in that the base class has a GenericData and the specific subclass passes a SpecificData to the super constructor.&lt;/p&gt;

&lt;p&gt;I created some new unit tests for RecordBuilderBase#isValidValue(Field, Object).  These can be found in org.apache.avro.data.RecordBuilderBaseTest in lang/java/avro.  The one that addresses your specific concern about unions is RecordBuilderBaseTest#testIsValidValueWithUnion().  In order to make it easier to unit test the isValidValue() method I left it static, but if you&apos;d prefer to make that method non-static I&apos;ll find another way to test it.&lt;/p&gt;

&lt;p&gt;I&apos;ll have a new patch ready shortly.  Oh, and I just noticed &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-784&quot; title=&quot;SpecificCompiler should generate accessors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-784&quot;&gt;&lt;del&gt;AVRO-784&lt;/del&gt;&lt;/a&gt; today.  I haven&apos;t had a chance to look at the patch yet, but is there any overlap in functionality between 784 and 839 with the bean-style accessors/mutators?  It sounded very similar from the description.  If it turns out to be basically the same, then I can just wait for that to be committed and then merge in the changes.&lt;/p&gt;</comment>
                            <comment id="13089949" author="jbaldassari" created="Wed, 24 Aug 2011 02:11:44 +0000"  >&lt;p&gt;Here&apos;s v4 of the patch.&lt;/p&gt;</comment>
                            <comment id="13090452" author="cutting" created="Wed, 24 Aug 2011 20:19:22 +0000"  >&lt;p&gt;This looks great.&lt;/p&gt;

&lt;p&gt;For some reason the changes to SpecificDatumReader didn&apos;t apply cleanly, but I was easily able to fix that up by hand.&lt;/p&gt;

&lt;p&gt;I also moved the SchemaConstructable interface from SpecificDatumReader to SpecificData.&lt;/p&gt;

&lt;p&gt;As for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-784&quot; title=&quot;SpecificCompiler should generate accessors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-784&quot;&gt;&lt;del&gt;AVRO-784&lt;/del&gt;&lt;/a&gt;, I think this patch mostly subsumes it.  There is one issue there that we perhaps ought to fix before we commit this, though.  We should mangle things if there&apos;s a field named &apos;class&apos; or &apos;schema&apos;, so that we don&apos;t conflict with the Class#getClass and GenericContainer#getSchema.&lt;/p&gt;

&lt;p&gt;Other than that, I think this is ready to commit.&lt;/p&gt;</comment>
                            <comment id="13090480" author="jbaldassari" created="Wed, 24 Aug 2011 20:59:00 +0000"  >&lt;p&gt;Great.  I&apos;ll get caught up on the &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-784&quot; title=&quot;SpecificCompiler should generate accessors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-784&quot;&gt;&lt;del&gt;AVRO-784&lt;/del&gt;&lt;/a&gt; discussion regarding the mangling of class and schema fields and submit an updated patch shortly.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure why the SpecificDatumReader stuff didn&apos;t apply cleanly.  Maybe my working copy isn&apos;t up to date.  I&apos;ll try to fix that as well.&lt;/p&gt;</comment>
                            <comment id="13090745" author="jbaldassari" created="Thu, 25 Aug 2011 03:40:52 +0000"  >&lt;p&gt;I&apos;ve made the following changes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Merged recent commits to trunk so that the patch will apply cleanly (my working copy was slightly out of date)&lt;/li&gt;
	&lt;li&gt;Moved SchemaConstructable from SpecificDatumReader to SpecificData&lt;/li&gt;
	&lt;li&gt;Mangle accessor and mutator method names for &apos;class&apos; and &apos;schema&apos; fields&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13090747" author="jbaldassari" created="Thu, 25 Aug 2011 03:41:44 +0000"  >&lt;p&gt;Here&apos;s v4 of the patch.&lt;/p&gt;</comment>
                            <comment id="13090755" author="jbaldassari" created="Thu, 25 Aug 2011 04:12:48 +0000"  >&lt;p&gt;Reading through the comments from &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-784&quot; title=&quot;SpecificCompiler should generate accessors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-784&quot;&gt;&lt;del&gt;AVRO-784&lt;/del&gt;&lt;/a&gt; in more detail I noticed this one:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also, if someone has a record with fields named &quot;foo&quot; and &quot;Foo&quot; then we&apos;d be in trouble.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That would be a problem with any approach that uses bean-style naming conventions to generate the accessor/mutator methods, and in fact it&apos;s a problem in this patch in its current form.  Should we address this now?  We could have SpecificCompiler detect these method name collisions and mangle them in some way.  For example, the accessor methods for the fields &quot;foo&quot; and &quot;Foo&quot; might be named &quot;getFoo$0()&quot; and &quot;getFoo$1()&quot; respectively.&lt;/p&gt;</comment>
                            <comment id="13091405" author="cutting" created="Thu, 25 Aug 2011 23:17:02 +0000"  >&lt;p&gt;&amp;gt; Should we address this now?&lt;/p&gt;

&lt;p&gt;If you like.  Or we could file it as a followup issue.&lt;/p&gt;

&lt;p&gt;I updated the patch to work after &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-877&quot; title=&quot;Support compiling multiple input schemas and protocols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-877&quot;&gt;&lt;del&gt;AVRO-877&lt;/del&gt;&lt;/a&gt;, which added some tests that check compiler output.  I&apos;ll commit this version tomorrow unless someone objects.&lt;/p&gt;

&lt;p&gt;One other minor improvement that I&apos;d like to see is the addition of a package.html file for org.apache.avro.data, to make the javadoc more easily understood.  Longer term we might migrate some interfaces from generic to that package.&lt;/p&gt;</comment>
                            <comment id="13091626" author="jbaldassari" created="Fri, 26 Aug 2011 06:40:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;If you like. Or we could file it as a followup issue.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I implemented this.  It wasn&apos;t too much work, and it&apos;s easier to just get it over with now than risk some potentially backwards-incompatible change after people start using the new builder stuff.  I used the strategy described in my earlier comment: &quot;foo&quot; -&amp;gt; &quot;getFoo$0()&quot;, &quot;Foo&quot; -&amp;gt; &quot;getFoo$1()&quot; where the &quot;0&quot; is always for the lowercase field name and the &quot;1&quot; is always for the uppercase field name.  It&apos;s easy to change this if you think a different naming scheme would be better.&lt;/p&gt;

&lt;p&gt;I merged your recent trunk commits, so this patch should apply cleanly to trunk.  After merging the updates from trunk I found that TestSpecificCompilerTool was failing because it was comparing the compiler output to a pre-builder generated class.  I fixed this problem by copying the generated class that includes the builder modifications to src/test/compiler/output/.&lt;/p&gt;

&lt;p&gt;One other change I made was a minor fix to the generated mutator methods in record.vm.  If the field happened to be named &quot;value&quot; the mutator would not work (because it was doing something like &quot;field = value&quot; instead of &quot;this.field = value&quot;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One other minor improvement that I&apos;d like to see is the addition of a package.html file for org.apache.avro.data&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Is this something you would like me to do?&lt;/p&gt;</comment>
                            <comment id="13091628" author="jbaldassari" created="Fri, 26 Aug 2011 06:41:53 +0000"  >&lt;p&gt;v5 of the patch attached.&lt;/p&gt;</comment>
                            <comment id="13092036" author="cutting" created="Fri, 26 Aug 2011 20:56:51 +0000"  >&lt;p&gt;&amp;gt; After merging the updates from trunk I found that TestSpecificCompilerTool was failing because it was comparing the compiler output to a pre-builder generated class.&lt;/p&gt;

&lt;p&gt;Yes, I mentioned that yesterday and fixed it in the patch I uploaded.&lt;/p&gt;

&lt;p&gt;I added a package.html and committed this.&lt;/p&gt;

&lt;p&gt;Thanks, James!  This is a great addition to Avro.&lt;/p&gt;</comment>
                            <comment id="13092370" author="jbaldassari" created="Sat, 27 Aug 2011 19:48:58 +0000"  >&lt;p&gt;Thanks for all your help, Doug.  BTW, you can also close out &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-846&quot; title=&quot;Error record classes do not allow you to set the exception message or cause on construction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-846&quot;&gt;&lt;del&gt;AVRO-846&lt;/del&gt;&lt;/a&gt; too as the desired functionality has been implemented in this patch.&lt;/p&gt;</comment>
                            <comment id="13183063" author="scott_carey" created="Tue, 10 Jan 2012 04:29:05 +0000"  >&lt;p&gt;This seems to have removed GenericDatumReader.newRecord().  &lt;br/&gt;
I noticed this ticket in Pig: &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2463&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-2463&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Was this intended?  The builder takes care of this feature, and also moves it out from the GenericDatumReader heirarchy which is useful to help limit what needs to be implemented to extend that.&lt;/p&gt;

&lt;p&gt;If this change is not intended, we may want to bring that back to avoid breaking users who upgrade to 1.6.x from 1.5.x.&lt;/p&gt;</comment>
                            <comment id="13183104" author="jbaldassari" created="Tue, 10 Jan 2012 06:04:34 +0000"  >&lt;p&gt;I believe the following methods were moved from GenericDatumReader to GenericData as part of Avro-839 to support the deepCopy() method (see comments from 11/Aug/11):&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;newRecord(Object, Schema)&lt;/li&gt;
	&lt;li&gt;createFixed(Object old, Schema schema)&lt;/li&gt;
	&lt;li&gt;createFixed(Object, byte[], Schema)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To fix this issue we could put those methods back into GenericDatumReader and simply have them call through to the GenericData instance inside GenericDatumReader.  What do you think?  If that sounds ok I&apos;ll work on a patch.&lt;/p&gt;</comment>
                            <comment id="13183556" author="scott_carey" created="Tue, 10 Jan 2012 20:52:26 +0000"  >&lt;p&gt;I&apos;m not convinced we need to do this.  But here is an idea: we could add the methods back as deprecated, with a default implementation and some javadoc so that other folks won&apos;t be confused by the change and code with or without an override on these will still work.  Then in 1.7.x we can drop it and there will be a better paper trail for others to follow on where the new non-deprecated versions are.&lt;/p&gt;

&lt;p&gt;This way, projects like Pig could potentially upgrade to 1.6.next and compile without change.&lt;/p&gt;

&lt;p&gt;Alternatively, we do a better job documenting how to upgrade code to use 1.6.x.  This means that code compiled against 1.5.x will fail with 1.6.x if it uses these methods or extends the class however.&lt;/p&gt;

&lt;p&gt;Any other opinions on what to do?  Is the documentation in this ticket enough?  Should we add these back in?  Any other ideas?&lt;/p&gt;</comment>
                            <comment id="13183595" author="cutting" created="Tue, 10 Jan 2012 21:35:00 +0000"  >&lt;p&gt;&amp;gt; we could add the methods back as deprecated, with a default implementation and some javadoc so that other folks won&apos;t be confused by the change and code with or without an override on these will still work. Then in 1.7.x we can drop it and there will be a better paper trail for others to follow on where the new non-deprecated versions are.&lt;/p&gt;

&lt;p&gt;+1  We should adopt this as a standard process for incompatible changes to public APIs.&lt;/p&gt;</comment>
                            <comment id="13186756" author="jbaldassari" created="Mon, 16 Jan 2012 07:50:16 +0000"  >&lt;p&gt;I created &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-993&quot; title=&quot;Add methods back to GenericDatumReader that were removed in AVRO-839&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-993&quot;&gt;&lt;del&gt;AVRO-993&lt;/del&gt;&lt;/a&gt; to track the changes necessary to fix &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2463&quot; title=&quot;AvroStorage doesn&amp;#39;t work with Avro 1.6.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2463&quot;&gt;PIG-2463&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12537842">PIG-2463</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12538481">AVRO-993</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12535908">AVRO-985</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12530117">AVRO-951</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12512363">AVRO-846</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12499047">AVRO-770</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12494773">AVRO-726</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12501894">AVRO-784</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12486018" name="AVRO-839-v2.patch" size="104830" author="jbaldassari" created="Sun, 10 Jul 2011 23:26:07 +0000"/>
                            <attachment id="12490075" name="AVRO-839-v3.patch" size="102723" author="jbaldassari" created="Thu, 11 Aug 2011 04:58:49 +0000"/>
                            <attachment id="12491587" name="AVRO-839-v4.patch" size="119628" author="jbaldassari" created="Thu, 25 Aug 2011 03:41:44 +0000"/>
                            <attachment id="12491432" name="AVRO-839-v4.patch" size="117991" author="jbaldassari" created="Wed, 24 Aug 2011 02:11:44 +0000"/>
                            <attachment id="12491748" name="AVRO-839-v5.patch" size="149767" author="jbaldassari" created="Fri, 26 Aug 2011 06:41:53 +0000"/>
                            <attachment id="12491707" name="AVRO-839.patch" size="144045" author="cutting" created="Thu, 25 Aug 2011 23:17:02 +0000"/>
                            <attachment id="12491543" name="AVRO-839.patch" size="131542" author="cutting" created="Wed, 24 Aug 2011 20:19:22 +0000"/>
                            <attachment id="12485191" name="AVRO-839.patch" size="93772" author="jbaldassari" created="Tue, 5 Jul 2011 02:14:24 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 16 Jun 2011 08:49:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>60563</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 2 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2s7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80213</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-840] C++ generate nullable types for optional fields int the schema </title>
                <link>https://issues.apache.org/jira/browse/AVRO-840</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;To represent optional fields, we use unions in our schema. See the example below.&lt;br/&gt;
{&lt;br/&gt;
   &quot;type&quot; : &quot;record&quot;,&lt;br/&gt;
   &quot;name&quot; : &quot;Contact&quot;,&lt;br/&gt;
   &quot;fields&quot; : [ &lt;br/&gt;
    &lt;/p&gt;
{&quot;name&quot; : &quot;FirstName&quot;,&quot;type&quot; : [&quot;string&quot; ]}
&lt;p&gt;,&lt;br/&gt;
    &lt;/p&gt;
{&quot;name&quot; : &quot;MiddleName&quot;,&quot;type&quot; : [null, &quot;string&quot; ]}
&lt;p&gt;,&lt;br/&gt;
    &lt;/p&gt;
{&quot;name&quot; : &quot;LastName&quot;,  &quot;type&quot; : [&quot;string&quot; ]}
&lt;p&gt;,&lt;br/&gt;
    &lt;/p&gt;
{&quot;name&quot; : &quot;PhoneNum&quot;,&quot;type&quot; : [null, &quot;string&quot; ]}
&lt;p&gt;,&lt;/p&gt;
    {&quot;name&quot; : &quot;Id&quot;,&quot;type&quot; : [null, &quot;long&quot; ]}
&lt;p&gt;   ] &lt;br/&gt;
}&lt;br/&gt;
In this schema PhoneNum, MiddleName and Id fields are declared as unions as they are optional fields.  For this schema, Avrogencpp generates Contact structure and 3 separate union structures for each of the optional fields in the schema.&lt;/p&gt;

&lt;p&gt;struct  Contact&lt;br/&gt;
{&lt;br/&gt;
    String FirstName;&lt;br/&gt;
    String LastName;&lt;br/&gt;
    Union_0 MiddleName;&lt;br/&gt;
    Union_1 PhoneNum;&lt;br/&gt;
    Union_3 Id;                        &lt;br/&gt;
}&lt;br/&gt;
Instead is it possible to create a new template based NullableType to represent optional fields. Basically if the schema has union with 2 fields and first field is null, it should generate Nullable type.&lt;/p&gt;

&lt;p&gt;For the above scheme, it should generate something like this.&lt;br/&gt;
struct  Contact&lt;br/&gt;
{&lt;br/&gt;
   String FirstName;&lt;br/&gt;
   String LastName;&lt;br/&gt;
   Nullable&amp;lt;string&amp;gt; MiddleName;&lt;br/&gt;
   Nullable&amp;lt;string&amp;gt; PhoneNum;&lt;br/&gt;
   Nullable&amp;lt; long &amp;gt; Id;                         &lt;br/&gt;
}&lt;br/&gt;
This will reduce the number of generated unions in generated code and improve the readability and usability of the code.&lt;/p&gt;

&lt;p&gt;Let me know if it&apos;s feasible to implement this.&lt;br/&gt;
Thanks,&lt;br/&gt;
Ramana&lt;/p&gt;</description>
                <environment></environment>
        <key id="12510599">AVRO-840</key>
            <summary>C++ generate nullable types for optional fields int the schema </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.svg">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thiru_mg">Thiruvalluvan M. G.</assignee>
                                    <reporter username="ramanasv">Ramana Suvarapu</reporter>
                        <labels>
                            <label>C++</label>
                    </labels>
                <created>Thu, 16 Jun 2011 17:41:51 +0000</created>
                <updated>Tue, 1 Nov 2011 18:36:11 +0000</updated>
                            <resolved>Wed, 12 Oct 2011 13:27:42 +0000</resolved>
                                                    <fixVersion>1.6.0</fixVersion>
                                    <component>c++</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13123001" author="thiru_mg" created="Fri, 7 Oct 2011 17:55:03 +0000"  >&lt;p&gt;The attached patch addresses the problem as follows:&lt;/p&gt;

&lt;p&gt;For union types, there is new &lt;tt&gt;bool is_null() const;&lt;/tt&gt; member function which can be used to query if the union is &lt;tt&gt;null&lt;/tt&gt;. This complements the existing &lt;tt&gt;set_null();&lt;/tt&gt; member function.&lt;/p&gt;

&lt;p&gt;The names of union types are generated to avoid conflicts with other types. They are not easy for the human programmer to remember or make sense of. To help the human programmer, if the union type is a member of a record, the type is aliased to the member variable using &lt;tt&gt;typedef&lt;/tt&gt;. That is, if there is a member variable &lt;tt&gt;rev&lt;/tt&gt; which of union type &lt;tt&gt;&lt;em&gt;xyz_Union&lt;/em&gt;&lt;em&gt;0&lt;/em&gt;_&lt;/tt&gt; then it is &lt;tt&gt;typedef&lt;/tt&gt; ed to &lt;tt&gt;rev_t&lt;/tt&gt;. The &lt;tt&gt;typedef&lt;/tt&gt; is local to the record type, which makes conflict with other types rare.&lt;/p&gt;

&lt;p&gt;However, if there is already another member with name &lt;tt&gt;rev_t&lt;/tt&gt;, the code will fail to compile. To help in such situations, avrogencpp takes a new command-line switch &lt;tt&gt;- U&lt;/tt&gt; or &lt;tt&gt;--no-union-typedef&lt;/tt&gt;, which if present disables the &lt;tt&gt;typedef&lt;/tt&gt; generation for unions within records.&lt;/p&gt;

&lt;p&gt;A better way to handle this conflict is to allow annotations in schema. But with the current schema parser, it is hard to include support for annotations. We&apos;ll add this when we improve the C++ schema parser.&lt;/p&gt;</comment>
                            <comment id="13124033" author="thiru_mg" created="Mon, 10 Oct 2011 12:21:23 +0000"  >&lt;p&gt;If there are no objections, I&apos;ll commit this tomorrow.&lt;/p&gt;</comment>
                            <comment id="13125841" author="thiru_mg" created="Wed, 12 Oct 2011 13:27:42 +0000"  >&lt;p&gt;Committed revision 1182355.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12498199" name="AVRO-840.patch" size="5440" author="thiru_mg" created="Fri, 7 Oct 2011 17:55:03 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 7 Oct 2011 17:55:03 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>50342</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 15 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2sf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80214</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
