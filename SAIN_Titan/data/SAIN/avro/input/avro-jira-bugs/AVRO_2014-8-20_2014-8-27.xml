<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:20:44 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2014-8-20+AND+created+%3C%3D+2014-8-27+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="6" total="6"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1567] Avro java tools tests fail with IBM JVM</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1567</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;When using IBM JVM, compared to Oracle JVM, 25 of the Avro Tools tests fail.&lt;/p&gt;

&lt;p&gt;This is due to Avro using Hadoop which uses class:&lt;br/&gt;
   org/apache/hadoop/security/UserGroupInformation.java&lt;br/&gt;
which makes use of:&lt;br/&gt;
   com.sun.security.auth.module.UnixLoginModule&lt;br/&gt;
which does not exist in IBM JVM.&lt;br/&gt;
Instead there is the class:&lt;br/&gt;
   com.ibm.security.auth.module.LinuxLoginModule&lt;br/&gt;
that can be used in UserGroupInformation.java if the JVM is IBM.&lt;/p&gt;

&lt;p&gt;With a IBM-JVM patched version of Hadoop that takes care of the kind of JVM, these 25 Avro Java Tools tests still fail because the pom.xml file of:&lt;br/&gt;
    lang/java/tools/&lt;br/&gt;
says unconditionnaly (starting line 146 in Avro 1.7.7) :&lt;br/&gt;
      &amp;lt;dependency&amp;gt;&lt;br/&gt;
      &amp;lt;groupId&amp;gt;org.apache.hadoop&amp;lt;/groupId&amp;gt;&lt;br/&gt;
      &amp;lt;artifactId&amp;gt;hadoop-core&amp;lt;/artifactId&amp;gt;&lt;/p&gt;

&lt;p&gt;Using:&lt;br/&gt;
  mvn -Phadoop2 -Dhadoop.version=2 test&lt;br/&gt;
is of no help.&lt;/p&gt;

&lt;p&gt;In fact, hadoop-core exists only for old Hadoop versions (here version 0.20.205.0 is used by Avro), and not for Hadoop 2.4.1 .&lt;/p&gt;

&lt;p&gt;Replacing hadoop-core by hadoop-client in lang/java/tools/pom.xml file does fix the issue, as a work-around.&lt;/p&gt;

&lt;p&gt;However, a more rigorous solution is required, like it is done in lang/java/mapred/pom.xm , where hadoop-core is associated with hadoop1 and hadoop-client is associated with hadoop2 .&lt;/p&gt;

&lt;p&gt;I&apos;m not an expert of Maven/pom.xml, and the pom.xml file of tools contains &amp;lt;exclusions&amp;gt; tags I have no idea. So, I&apos;m not sure I can provide a correct patch.&lt;/p&gt;

&lt;p&gt;I guess that a Maven/pom.xml expert should be able to fix this in some minutes, plus testing.&lt;/p&gt;</description>
                <environment>&lt;p&gt;RHEL 6.5 on x86_64&lt;br/&gt;
IBM JVM 7.1.1.1&lt;br/&gt;
HADOOP 2.4.1&lt;/p&gt;</environment>
        <key id="12735791">AVRO-1567</key>
            <summary>Avro java tools tests fail with IBM JVM</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.svg">Blocker</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="trex58">Tony Reix</reporter>
                        <labels>
                    </labels>
                <created>Thu, 21 Aug 2014 14:24:32 +0000</created>
                <updated>Tue, 4 Nov 2014 12:00:35 +0000</updated>
                                            <version>1.7.4</version>
                    <version>1.7.7</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                    <timeoriginalestimate seconds="3600">1h</timeoriginalestimate>
                            <timeestimate seconds="3600">1h</timeestimate>
                                        <comments>
                            <comment id="14105732" author="cutting" created="Thu, 21 Aug 2014 18:27:40 +0000"  >&lt;p&gt;Perhaps we should just abandon support for Hadoop 1.x in Avro 1.8?&lt;/p&gt;</comment>
                            <comment id="14106752" author="trex58" created="Fri, 22 Aug 2014 12:09:25 +0000"  >&lt;p&gt;For sure, that would make life simpler. Who can take a decision about this ?&lt;/p&gt;</comment>
                            <comment id="14107299" author="busbey" created="Fri, 22 Aug 2014 19:03:39 +0000"  >&lt;p&gt;There should be a mailing list discussion. Personally, I&apos;m -0. I think we can get the fixes needed for IBM JVM + Hadoop 2 without leaving Hadoop 1 behind. &lt;/p&gt;</comment>
                            <comment id="14110873" author="trex58" created="Tue, 26 Aug 2014 16:00:24 +0000"  >&lt;p&gt;There is another issue when using IBM JVM, preventing 3 remaining tests to pass.&lt;/p&gt;

&lt;p&gt;In some places, the pom.xml file ony handles hadoop version 1, like in lang/java/trevni/avro/pom.xml :&lt;br/&gt;
./lang/java/trevni/avro/pom.xml:      &amp;lt;groupId&amp;gt;org.apache.hadoop&amp;lt;/groupId&amp;gt;&lt;br/&gt;
./lang/java/trevni/avro/pom.xml:      &amp;lt;artifactId&amp;gt;hadoop-core&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
./lang/java/trevni/avro/pom.xml:      &amp;lt;version&amp;gt;${hadoop1.version}&amp;lt;/version&amp;gt;&lt;/p&gt;

&lt;p&gt;That means that using &quot;-Phadoop2 -Dhadoop.version=2&quot; with mvn when testing Java language does not imply to use Hadoop2 in all places.&lt;br/&gt;
So, in some places, though I want to compile/test with Hadoop2, it makes use of Hadoop1. Since Hadoop1 is not installed in my environment, Maven downloads it from the Web and put in my Maven .m2 repository some old version of Hadoop (version 0.20.205.0 for me, since this version appears in lang/java/pom.xml for version 1.7.4 of Avro : &amp;lt;hadoop1.version&amp;gt;0.20.205.0&amp;lt;/hadoop1.version&amp;gt;).&lt;br/&gt;
When using Oracle or OpenJDK JVMs, there is no issue, since they have &quot;com.sun....&quot; classes. But, when using IBM JVM, that creates an issue.&lt;/p&gt;

&lt;p&gt;So, it would be useful to use the IBM JVM in order to locate the remaining places (pom.xml files) where version 2 of Hadoop is not handled, implying download/use of old Hadoop code.&lt;/p&gt;

&lt;p&gt;I have a simple work-around for fixing this issue when using IBM JVM:&lt;br/&gt;
    &amp;lt;hadoop1.version&amp;gt;2.4.1&amp;lt;/hadoop1.version&amp;gt;    in lang/java/pom.xml .&lt;br/&gt;
However, it cannot be used as a patch ! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;So, it would be useful to fix the remaining places in Avro where version 2 of Hadoop is not handled.&lt;/p&gt;</comment>
                            <comment id="14112007" author="trex58" created="Wed, 27 Aug 2014 08:03:26 +0000"  >&lt;p&gt;1) Avro needs... Avro.&lt;/p&gt;

&lt;p&gt;After a complete clean (in my Avro directory and ni my Maven .m2 repository), I&apos;ve noticed that some Avro Java parts need some other Avro parts.&lt;br/&gt;
Example:&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Building Apache Avro Tools 1.7.4&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
   Downloading: &lt;a href=&quot;http://repo.maven.apache.org/maven2/org/apache/avro/trevni-avro/1.7.4/trevni-avro-1.7.4.jar&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://repo.maven.apache.org/maven2/org/apache/avro/trevni-avro/1.7.4/trevni-avro-1.7.4.jar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think that this may lead to issues in environments different than the &quot;classic&quot; one (non-IBM JVM + x86_64 machine).&lt;br/&gt;
Is it possible to have the needed parts of Avro being compiled before the parts of Avro that need them ?&lt;/p&gt;


&lt;p&gt;2) build.sh is hadoop1 by default.&lt;/p&gt;

&lt;p&gt;Since mvn commands dealing with lang/java do not contain any -P or -D option for specifying the Hadoop version, it is compiled for Hadoop 1 by default.&lt;br/&gt;
Compiling Avro with Hadoop 2 and by means of build.sh requires to modify this launcher.&lt;br/&gt;
For every task dealing with lang/java, I have added &quot;-Phadoop2 -Dhadoop.version=2 &quot; to the mvn command that appears in build.sh .&lt;br/&gt;
(Moreover, I&apos;ve added &quot;-fn&quot; when tests are run in order to have tests continuing after an error/failure is encountered)&lt;br/&gt;
It would be very useful to have some variable set at beginning of build.sh for using Hadoop2 by default.&lt;/p&gt;</comment>
                            <comment id="14112267" author="busbey" created="Wed, 27 Aug 2014 14:06:20 +0000"  >&lt;blockquote&gt;
&lt;p&gt;After a complete clean (in my Avro directory and ni my Maven .m2 repository), I&apos;ve noticed that some Avro Java parts need some other Avro parts.&lt;br/&gt;
Example:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Building Apache Avro Tools 1.7.4&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
Downloading: &lt;a href=&quot;http://repo.maven.apache.org/maven2/org/apache/avro/trevni-avro/1.7.4/trevni-avro-1.7.4.jar&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://repo.maven.apache.org/maven2/org/apache/avro/trevni-avro/1.7.4/trevni-avro-1.7.4.jar&lt;/a&gt;&lt;br/&gt;
I think that this may lead to issues in environments different than the &quot;classic&quot; one (non-IBM JVM + x86_64 machine).&lt;br/&gt;
Is it possible to have the needed parts of Avro being compiled before the parts of Avro that need them ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s a maven-ism when building just an individual module. which build target are you using?&lt;/p&gt;

&lt;p&gt;If you do &quot;mvn package&quot; at the top level, it should build each of the components and use them for the build.&lt;/p&gt;

&lt;p&gt;For example, this is the current trunk:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;busbey2-MBA:avro busbey$ rm -rf ~/.m2/repository/org/apache/avro/
busbey2-MBA:avro busbey$ git clean -xdf
busbey2-MBA:avro busbey$ cd lang/java/
busbey2-MBA:java busbey$ mvn package 2&amp;gt;&amp;amp;1 &amp;gt; ../../avro_build_log.log
Warning: Choice conflict in (...)* construct at line 1149, column 4.
         Expansion nested within construct and expansion following construct
         have common prefixes, one of which is: &quot;@&quot;
         Consider using a lookahead of 2 or more for nested expansion.
Warning: Choice conflict in (...)* construct at line 1294, column 3.
         Expansion nested within construct and expansion following construct
         have common prefixes, one of which is: &quot;@&quot;
         Consider using a lookahead of 2 or more for nested expansion.
busbey2-MBA:java busbey$ find ~/.m2/repository/org/apache/avro
find: /Users/busbey/.m2/repository/org/apache/avro: No such file or directory
busbey2-MBA:java busbey$ grep &quot;Downloading: http://repo.maven.apache.org/maven2/org/apache/avro&quot; ../../avro_build_log.log 
busbey2-MBA:java busbey$ grep &quot;Downloading: http://repository.apache.org/snapshots/org/apache/avro&quot; ../../avro_build_log.log 
busbey2-MBA:java busbey$ find tools/target/ -name *.jar
tools/target//avro-tools-1.7.8-SNAPSHOT-nodeps.jar
tools/target//avro-tools-1.7.8-SNAPSHOT.jar
tools/target//original-avro-tools-1.7.8-SNAPSHOT.jar
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you do &quot;mvn install&quot; at the top level, it will locally build each of the components needed and put them in your local repo.&lt;/p&gt;</comment>
                            <comment id="14112351" author="trex58" created="Wed, 27 Aug 2014 15:36:56 +0000"  >&lt;p&gt;Hummmm Since I&apos;m using top build.sh, I did not do mvn package.&lt;br/&gt;
Anyway, I&apos;ve tried, on my RHEL6.5/x86_64 machine, with IBM JVM .&lt;/p&gt;

&lt;p&gt;I&apos;m there:&lt;br/&gt;
avro-src-1.7.4/lang/java   (Avro 1.7.4 version that I got from Avro GitHub).&lt;/p&gt;

&lt;p&gt;I did:&lt;br/&gt;
rm -rf /root/.m2/repository/org/apache/avro&lt;br/&gt;
 mvn clean&lt;br/&gt;
find ~/.m2 -name &quot;avro*&quot;  ---&amp;gt; Nothing&lt;br/&gt;
mvn -Phadoop2 -Dhadoop.version=2 package -DskipTests&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Apache Avro Mapred API ............................ FAILURE [  3.990 s]&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile) on project avro-mapred: Compilation failure&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/reixt/AVRO/avro-src-1.7.4/lang/java/mapred/src/main/java/org/apache/avro/mapred/tether/TetheredProcess.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;157,21&amp;#93;&lt;/span&gt; error: method captureOutAndError in class TaskLog cannot be applied to given types;&lt;/p&gt;

&lt;p&gt;find ~/.m2 -name &quot;avro*&quot;&lt;br/&gt;
/root/.m2/repository/org/apache/avro&lt;br/&gt;
/root/.m2/repository/org/apache/avro/avro-toplevel&lt;br/&gt;
/root/.m2/repository/org/apache/avro/avro-toplevel/1.7.3/avro-toplevel-1.7.3.pom&lt;br/&gt;
...........&lt;/p&gt;

&lt;p&gt;So, it did download some Avro jar files from the Web.&lt;/p&gt;


&lt;p&gt;Doing the same (after mvn clean and rm -rf ~/.m2/....avro) with install instead of package:&lt;br/&gt;
   mvn -Phadoop2 -Dhadoop.version=2 install -DskipTests&lt;br/&gt;
I also got Avro 1.7.4 jars being downloaded in my .m2 repository :&lt;/p&gt;

&lt;p&gt;$ find ~/.m2 -name &quot;avro*&quot;&lt;br/&gt;
/root/.m2/repository/org/apache/avro&lt;br/&gt;
/root/.m2/repository/org/apache/avro/avro-compiler&lt;br/&gt;
/root/.m2/repository/org/apache/avro/avro-compiler/1.7.4/avro-compiler-1.7.4.pom&lt;br/&gt;
/root/.m2/repository/org/apache/avro/avro-compiler/1.7.4/avro-compiler-1.7.4.jar&lt;br/&gt;
....&lt;/p&gt;</comment>
                            <comment id="14196031" author="trex58" created="Tue, 4 Nov 2014 12:00:35 +0000"  >&lt;p&gt;What&apos;s new about this issue ?&lt;br/&gt;
I&apos;ve seen that some changes were made in 18.0-Snapshot.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 21 Aug 2014 18:27:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 11 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1z6on:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1568] Allow Java polymorphism in Avro for third-party code</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1568</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;A large number of Java designs interacting with databases with Hibernate/Couchbase (perhaps, even otherwise) have Java polymorphism of the form:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Base 
{
   &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; a = 5;
}

&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Derived &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Base
{
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; b = &lt;span class=&quot;code-quote&quot;&gt;&quot;Foo&quot;&lt;/span&gt;;
}

&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;PolymorphicDO
{
   Base b = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Derived();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Jackson handles this kind of field by using annotations such as:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = &quot;@class&#8221;)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If such a thing can be added to Avro, all those Java designs could become immediately usable with Avro. They would also become Hadoop compatible due to AvroSerde.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12735970">AVRO-1568</key>
            <summary>Allow Java polymorphism in Avro for third-party code</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="sachingoyal">Sachin Goyal</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Aug 2014 02:01:19 +0000</created>
                <updated>Sun, 30 Dec 2018 04:31:48 +0000</updated>
                                            <version>1.7.6</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="14106352" author="sachingoyal" created="Fri, 22 Aug 2014 02:03:38 +0000"  >&lt;p&gt;Doug Cutting&apos;s reply:&lt;/p&gt;

&lt;p&gt;One way to handle polymorphism in Avro is with unions.&lt;br/&gt;
For example, if you&apos;re using reflect, you can annotate your abstract base class with the set of concrete classes that implement it, e.g.:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;@Union(Concrete1.class, Concrete2.class)
&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;AbstractBase { ... }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then Avro reflect will use this union schema for all references to the AbstractBase type.&lt;/p&gt;</comment>
                            <comment id="14106366" author="sachingoyal" created="Fri, 22 Aug 2014 02:19:22 +0000"  >&lt;p&gt;This works great for code which is directly under the developer&apos;s control.&lt;br/&gt;
But for cases where there are third party libraries having such constructs, it becomes difficult to ask them to add such annotations in their code.&lt;/p&gt;

&lt;p&gt;Maybe an API can be added to ReflectData as #addUnionSchema (Class baseClass, Class derivedClasses[])&lt;br/&gt;
This will work the same as @Union but without the need to change third-party code.&lt;/p&gt;</comment>
                            <comment id="14106444" author="sachingoyal" created="Fri, 22 Aug 2014 04:30:08 +0000"  >&lt;p&gt;Also found two related issues at &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1569&quot; title=&quot;ReflectData.AllowNull fails with polymorphism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1569&quot;&gt;AVRO-1569&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1570&quot; title=&quot;ReflectData.AllowNull fails with polymorphism and @Union annotation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1570&quot;&gt;AVRO-1570&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14107552" author="cutting" created="Fri, 22 Aug 2014 21:40:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;Maybe an API can be added to ReflectData as #addUnionSchema (Class baseClass, Class derivedClasses[])&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d opt for something more general, like, #setSchema(Class,Schema).  We might then define a convenience method like #setUnionSchema(Class,Class...) in terms of that, but the underlying implementation would use a Map&amp;lt;Type,Schema&amp;gt;.&lt;/p&gt;</comment>
                            <comment id="14108291" author="sachingoyal" created="Sun, 24 Aug 2014 07:06:00 +0000"  >&lt;p&gt;Yes, that would be more generic.&lt;br/&gt;
We can also provide another flavor of the API as #setSchema (java.lang.reflect.Field, Schema)&lt;br/&gt;
This can come in handy when its known that only one particular field will hold polymorphic types and thus other Fields of same type need not pay the penalty of the bigger polymorphic schema.&lt;/p&gt;</comment>
                            <comment id="14347825" author="githubbot" created="Thu, 5 Mar 2015 00:19:31 +0000"  >&lt;p&gt;GitHub user sachingsachin opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/20&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1568&quot; title=&quot;Allow Java polymorphism in Avro for third-party code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1568&quot;&gt;AVRO-1568&lt;/a&gt;: Allow Java polymorphism in Avro for third-party code&lt;/p&gt;

&lt;p&gt;    The fix simply adds two APIs to ReflectData:&lt;br/&gt;
    1) setSchema (Class&amp;lt;?&amp;gt; clazz, Schema s);&lt;br/&gt;
    2) setSchema (Field field, Schema s);&lt;/p&gt;

&lt;p&gt;    With these two APIs, clients can create UNION schemas for any class/field and set them accordingly.&lt;br/&gt;
    With the UNION schema, avro can easily handle derived objects&apos; presence on base-class fields.&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/sachingsachin/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sachingsachin/avro&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1568&quot; title=&quot;Allow Java polymorphism in Avro for third-party code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1568&quot;&gt;AVRO-1568&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/20.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/20.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #20&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit bd63678fae95ec218b7f2b758c02c5c208c9fbbf&lt;br/&gt;
Author: Sachin Goyal &amp;lt;sgoyal@walmart.com&amp;gt;&lt;br/&gt;
Date:   2015-03-05T00:15:57Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1568&quot; title=&quot;Allow Java polymorphism in Avro for third-party code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1568&quot;&gt;AVRO-1568&lt;/a&gt;: Allow Java polymorphism in Avro for third-party code&lt;/p&gt;

&lt;p&gt;    The fix simply adds two APIs to ReflectData:&lt;br/&gt;
    1) setSchema (Class&amp;lt;?&amp;gt; clazz, Schema s);&lt;br/&gt;
    2) setSchema (Field field, Schema s);&lt;/p&gt;

&lt;p&gt;    With these two APIs, clients can create UNION schemas for any class/field and set them accordingly.&lt;br/&gt;
    With the UNION schema, avro can easily handle derived objects&apos; presence on base-class fields.&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="14395819" author="rdblue" created="Sat, 4 Apr 2015 17:13:53 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sachingoyal&quot; class=&quot;user-hover&quot; rel=&quot;sachingoyal&quot;&gt;Sachin Goyal&lt;/a&gt;, I&apos;ve been thinking about this issue lately and whether the use case would be covered by the logical types conversions. If it were, then you&apos;d be able to set both the conversion from a third-party object and specifically set its schema. What I like about that way to handle this is that it uses the public API of the third party object, which would be less likely to have problems as that code changes. Using reflection to save the fields of a third-party object violates that object&apos;s guarantees by going directly to its private data, but relying on its API has some compatibility guarantees. Of course, the drawback is that you are responsible for maintaining the conversion.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

&lt;p&gt;Also, I took a look at the PR and the main thing I see is that it has two &lt;tt&gt;setSchema&lt;/tt&gt; methods. Why not get the class from of the &lt;tt&gt;Field&lt;/tt&gt; and use that instead of tying serialization to both type and reference location?&lt;/p&gt;</comment>
                            <comment id="14496556" author="sachingoyal" created="Wed, 15 Apr 2015 17:26:00 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, can you provide an example for the below comment?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; If it were, then you&apos;d be able to set both the conversion from a third-party object and specifically set its schema. What I like about that way to handle this is that it uses the public API of the third party object, which would be less likely to have problems as that code changes. Using reflection to save the fields of a third-party object violates that object&apos;s guarantees by going directly to its private data, but relying on its API has some compatibility guarantees. Of course, the drawback is that you are responsible for maintaining the conversion.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why not get the class from of the Field and use that instead of tying serialization to both type and reference location?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Consider a superclass which has several derived classes. If one were to support all the possible subclasses of such a class in one&apos;s code (those subclasses which are serialized too), he would need to create a gigantic UNION schema for every such field.&lt;br/&gt;
Where as with the field-level setSchema() method, one can limit the schema to only those types which are known.&lt;/p&gt;

&lt;p&gt;This is especially useful when we are serializing a particular object and know exactly the type of a field. Makes the schema much less bulky.&lt;br/&gt;
We can think of field-level setSchema as a fine-tuned version of class-level setSchema.&lt;/p&gt;</comment>
                            <comment id="14496597" author="rdblue" created="Wed, 15 Apr 2015 17:56:37 +0000"  >&lt;p&gt;Here&apos;s an example: say you have a 3rd party geo library for shapes. A shape has some internal representation, but also an envelope (think bounding box) that is probably calculated and stored. So Shape looks like roughly like this API:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Shape:
  &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; Shape fromBytes(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bytes)
  &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] getShapeAsBytes()
  &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; getMinX()
  &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; getMinY()
  &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; getLength()
  &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; getWidth()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because you don&apos;t control the implementation for Shape or its subclasses, Polygon and Path, you don&apos;t know what you&apos;re going to get when you reflect their fields. I&apos;m arguing that it is much more reliable to serialize Shape using its public API. That way, you can use its compact representation accessed through &lt;tt&gt;getShapeAsBytes&lt;/tt&gt; and store information relevant for generic use, its bounding box. Those might be derived values in the implementations, plus the internal fields can change in ways that aren&apos;t compatible with Avro&apos;s schema evolution rules. Using the public API instead of reflection is, I think, a better choice.&lt;/p&gt;</comment>
                            <comment id="14500117" author="sachingoyal" created="Fri, 17 Apr 2015 16:17:35 +0000"  >&lt;p&gt;I agree with the above reasoning.&lt;br/&gt;
But I am not able to appreciate how we ensure these public APIs will be present in the third-party code.&lt;br/&gt;
Do we expect avro-serializiable classes to have these APIs?&lt;/p&gt;</comment>
                            <comment id="14500235" author="sachingoyal" created="Fri, 17 Apr 2015 17:28:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do we expect avro-serializiable classes to have these APIs?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I mean the fromBytes() and toBytes() APIs&lt;/p&gt;</comment>
                            <comment id="14500486" author="rdblue" created="Fri, 17 Apr 2015 19:27:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do we expect avro-serializiable classes to have these APIs?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes and no. I would expect the API to have enough information to be able to reconstruct the object, but I don&apos;t think it would necessarily have such a nice API to provide a serialized version of itself. I think the more common case would be like the following, where you have a factory method (or constructor) and accessors for the data:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; Point:
  &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; Point cartesianPoint(&lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; x, &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; y)
  &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; Point polarPoint(&lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; r, &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; theta)
  &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; getX()
  &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; getY()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we don&apos;t know anything about the internals of the concrete Point implementation, but can construct perfectly reasonable points.&lt;/p&gt;</comment>
                            <comment id="14504362" author="sachingoyal" created="Tue, 21 Apr 2015 05:26:49 +0000"  >&lt;p&gt;I am not sure how easy it is to construct the actual object by expecting object&apos;s field-getter APIs presence.&lt;br/&gt;
Also, how will the schema be constructed for such a case?&lt;/p&gt;

&lt;p&gt;May be you can help me understand with this example:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;ThirdPartyClass {
  Shape item;
}
&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Circle &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Shape { ... }
&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Triangle &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Shape { ... }
&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Rectangle &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Shape { ... }
&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Square &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Rectangle { ... }
&lt;span class=&quot;code-comment&quot;&gt;// Polygon, Pentagon, Tetrahedron, Sphere, Cylinder etc etc.&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
With a class-level API only, the schema of item will be a union of all: Circle, Triangle, Rectangle... Cylinder etc.&lt;br/&gt;
With a field-level API, I can make an optimization of storing Circles together by specifying &lt;b&gt;&quot;Shape item&quot;&lt;/b&gt; to be of type Circle only.&lt;br/&gt;
Same for other shapes.&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
I agree this is not useful if the application needs to handle all shapes.&lt;br/&gt;
But if the application is sure that for some cases, it will handle only a subset of shapes, then field-level API would result in much shorter schemas.&lt;br/&gt;
(And this is not an uncommon case in my opinion)&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
Field level API is also especially useful if the Shape class is subclassed by a really huge number of classes.&lt;/p&gt;</comment>
                            <comment id="14504363" author="sachingoyal" created="Tue, 21 Apr 2015 05:27:27 +0000"  >&lt;p&gt;I cannot edit my comments. How do I get access?&lt;/p&gt;</comment>
                            <comment id="15133227" author="githubbot" created="Thu, 4 Feb 2016 22:53:41 +0000"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/20&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/20&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12735980">AVRO-1569</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12735982">AVRO-1570</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 22 Aug 2014 21:40:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 50 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1z7r3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1569] ReflectData.AllowNull fails with polymorphism</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1569</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;UnresolvedUnionException is thrown if the following structure is serialized with ReflectData.AllowNull&lt;br/&gt;
(Plain ReflectData works fine)&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Base 
{
   &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; a = 5;
}

&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Derived &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Base
{
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; b = &lt;span class=&quot;code-quote&quot;&gt;&quot;Foo&quot;&lt;/span&gt;;
}

&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;PolymorphicDO
{
   Base obj = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Derived();
}

&lt;span class=&quot;code-comment&quot;&gt;// Serialization code:
&lt;/span&gt;ReflectData rdata = ReflectData.AllowNull.get();
Schema schema = rdata.getSchema(PolymorphicDO.class);
ReflectDatumWriter&amp;lt;T&amp;gt; datumWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ReflectDatumWriter (PolymorphicDO.class, rdata);
DataFileWriter&amp;lt;T&amp;gt; fileWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileWriter&amp;lt;T&amp;gt; (datumWriter);
fileWriter.create(schema, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ByteArrayOutputStream());
fileWriter.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; PolymorphicDO());

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12735980">AVRO-1569</key>
            <summary>ReflectData.AllowNull fails with polymorphism</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="sachingoyal">Sachin Goyal</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Aug 2014 04:25:10 +0000</created>
                <updated>Sun, 30 Dec 2018 04:17:15 +0000</updated>
                                            <version>1.7.6</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="14349629" author="githubbot" created="Thu, 5 Mar 2015 23:38:23 +0000"  >&lt;p&gt;GitHub user sachingsachin opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/22&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/22&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1569&quot; title=&quot;ReflectData.AllowNull fails with polymorphism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1569&quot;&gt;AVRO-1569&lt;/a&gt;: Check base-classes too while resolving unions&lt;/p&gt;



&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/sachingsachin/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sachingsachin/avro&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1569&quot; title=&quot;ReflectData.AllowNull fails with polymorphism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1569&quot;&gt;AVRO-1569&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/22.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/22.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #22&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit eacbb109ef73b670753d3b4adf6f43d29088c7fd&lt;br/&gt;
Author: Sachin Goyal &amp;lt;sgoyal@walmart.com&amp;gt;&lt;br/&gt;
Date:   2015-03-05T23:36:45Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1569&quot; title=&quot;ReflectData.AllowNull fails with polymorphism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1569&quot;&gt;AVRO-1569&lt;/a&gt;: Check base-classes too while resolving unions&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="14355137" author="rdblue" created="Tue, 10 Mar 2015 16:15:09 +0000"  >&lt;p&gt;It looks like this is probably caused by the added union in the schema. I&apos;m not clear on why your solution, to reflect the data from parents and check those is the right solution. When resolving the union, we just need to match the non-null case. Do you know what the two schemas are at that point and why the match isn&apos;t succeeding?&lt;/p&gt;

&lt;p&gt;This may be related to AllowNull problems that were fixed earlier but haven&apos;t been released yet. See &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1590&quot; title=&quot;[java] AllowNull causes unexpected resolution failure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1590&quot;&gt;&lt;del&gt;AVRO-1590&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14357320" author="sachingoyal" created="Wed, 11 Mar 2015 18:13:27 +0000"  >&lt;blockquote&gt;
&lt;p&gt;When resolving the union, we just need to match the non-null case.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Since a union is an unrestricted collection of other schemas, matching just the non-null schema may not be sufficient.&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This may be related to AllowNull problems that were fixed earlier but haven&apos;t been released yet. See &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1590&quot; title=&quot;[java] AllowNull causes unexpected resolution failure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1590&quot;&gt;&lt;del&gt;AVRO-1590&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I have this patch in my local since I am building from the trunk but still the above problem persists.&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;why the match isn&apos;t succeeding?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Problem is with the GenericData.resolveUnion() method which uses the following logic for records:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isRecord(datum))
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; getRecordSchema(datum).getFullName();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now the schema is of the type [&quot;null&quot;, &quot;Base&quot;] because during schema-generation, only the class information was available.&lt;br/&gt;
Hence no mentioned of Derived in the schema. Interestingly, ReflectData without AllowNull succeeds here because it does not have to do a resolveUnion() and it just writes out the Derived object as a BaseClass (which maybe acceptable for some cases). This fix makes sure that ReflectData.AllowNull is able to behave the same as ReflectData without AllowNull by serializing just the base-part of the Derived.&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1568&quot; title=&quot;Allow Java polymorphism in Avro for third-party code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1568&quot;&gt;AVRO-1568&lt;/a&gt; handles the serialization of Derived as a complete Derived object.&lt;/p&gt;</comment>
                            <comment id="14357323" author="rdblue" created="Wed, 11 Mar 2015 18:18:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1568&quot; title=&quot;Allow Java polymorphism in Avro for third-party code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1568&quot;&gt;AVRO-1568&lt;/a&gt; handles the serialization of Derived as a complete Derived object.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Great, fixing the storage seems like the right way to go here since the type doesn&apos;t match. With the storage fix, is there still a bug when resolving the union? It seems that there wouldn&apos;t be since the correct full name would be used for the record. I&apos;d much rather tackle this problem once that one is solved.&lt;/p&gt;</comment>
                            <comment id="14357565" author="sachingoyal" created="Wed, 11 Mar 2015 20:43:09 +0000"  >&lt;p&gt;I think we probably need both the fixes.&lt;/p&gt;

&lt;p&gt;The fix in this ticket is required when the user really does not care about serializing exact derived objects.&lt;br/&gt;
Maybe its third party code and user cannot put AvroIgnore on so many polymorphic objects in that code.&lt;br/&gt;
But the user just wants to serialize such objects without being bothered by the complexity of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1568&quot; title=&quot;Allow Java polymorphism in Avro for third-party code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1568&quot;&gt;AVRO-1568&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also the current fix will make it consistent with ReflectData without AllowNull.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1568&quot; title=&quot;Allow Java polymorphism in Avro for third-party code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1568&quot;&gt;AVRO-1568&lt;/a&gt; is for polymorphic objects whose exact serialization is really desired and the user is ready to write some extra code to make sure they do so.&lt;/p&gt;</comment>
                            <comment id="15133229" author="githubbot" created="Thu, 4 Feb 2016 22:53:41 +0000"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/22&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/22&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12735970">AVRO-1568</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12735982">AVRO-1570</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 5 Mar 2015 23:38:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 50 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1z7tb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1570] ReflectData.AllowNull fails with polymorphism and @Union annotation</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1570</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Nested union exception is thrown if the following structure is serialized with ReflectData.AllowNull&lt;br/&gt;
(Plain ReflectData works fine)&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;@Union({Derived.class})
&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Base 
{
   &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; a = 5;
}
&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Derived &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Base
{
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; b = &lt;span class=&quot;code-quote&quot;&gt;&quot;Foo&quot;&lt;/span&gt;;
}
&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;PolymorphicDO
{
   Base obj = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Derived();
}

&lt;span class=&quot;code-comment&quot;&gt;// Serialization code:
&lt;/span&gt;ReflectData rdata = ReflectData.AllowNull.get();
Schema schema = rdata.getSchema(PolymorphicDO.class);
ReflectDatumWriter&amp;lt;T&amp;gt; datumWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ReflectDatumWriter (PolymorphicDO.class, rdata);
DataFileWriter&amp;lt;T&amp;gt; fileWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileWriter&amp;lt;T&amp;gt; (datumWriter);
fileWriter.create(schema, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ByteArrayOutputStream());
fileWriter.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; PolymorphicDO());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12735982">AVRO-1570</key>
            <summary>ReflectData.AllowNull fails with polymorphism and @Union annotation</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="sachingoyal">Sachin Goyal</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Aug 2014 04:28:55 +0000</created>
                <updated>Sun, 30 Dec 2018 05:32:42 +0000</updated>
                                            <version>1.7.6</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                    <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12735980">AVRO-1569</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12735970">AVRO-1568</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 22 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1z7tr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1571] Support parameterized types in Avro</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1571</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The below code cannot be serialized by Avro.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Leaf &amp;lt;P, Q&amp;gt; {
  P p;
  Q q;
}

&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Root {
  Middle1 m1;
  Middle2 m2;
  Middle3&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; m3;
}

&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Middle1 {
  Leaf &amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;&amp;gt; foo;
}

&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Middle2 {
  Leaf &amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; foo;
}

&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Middle3 &amp;lt;P&amp;gt; {
  Leaf &amp;lt;P, P&amp;gt; foo;
}

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is because when generating the schema, only the current class is used to generate the schema.&lt;br/&gt;
The parent class&apos; context is missing in ReflectData#createSchema() functions where the actual type-information is actually present.&lt;/p&gt;

&lt;p&gt;Please see the attached test too for a simpler case.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12736264">AVRO-1571</key>
            <summary>Support parameterized types in Avro</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="sachingoyal">Sachin Goyal</reporter>
                        <labels>
                    </labels>
                <created>Sat, 23 Aug 2014 17:55:31 +0000</created>
                <updated>Sun, 30 Dec 2018 05:33:29 +0000</updated>
                                            <version>1.7.6</version>
                    <version>1.7.7</version>
                    <version>1.8.1</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="14108076" author="sachingoyal" created="Sat, 23 Aug 2014 18:08:26 +0000"  >&lt;p&gt;If we pass an obj of type &apos;ParentContext&apos; to ReflectData#createSchema() (and couple of their downstream functions), following schema can be generated.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-javascript&quot;&gt;{
  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;ParameterTypes&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;namespace&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.reflect&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;m1&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : {
      &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;Master1&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
        &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : {
          &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;Foo10b2274d0c76a664&quot;&lt;/span&gt;,
          &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;p&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;}, {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;q&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;} ]
        } } ] }
  }, {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;m2&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : {
      &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;Master2&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
        &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : {
          &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;Foo20f193d415184f4e&quot;&lt;/span&gt;,
          &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;p&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;}, {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;q&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;} ]
        } } ] }
  }, {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;m3&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : {
      &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;Master31830bfd9460d8d21&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
        &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : {
          &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;Foo14b15d58d3be921d&quot;&lt;/span&gt;,
          &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;p&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;}, {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;q&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;} ]
        } } ] }
  } ]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
Note that:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;The record Foo might need to have its name mangled as clazz.getSimpleName() + Hash64 (param-names)&lt;/li&gt;
	&lt;li&gt;When serializing the actual object, the same ParentConext would need to be passed along the write calls as well.
&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="14332440" author="rajiv.a1" created="Mon, 23 Feb 2015 00:12:08 +0000"  >&lt;p&gt;What do you mean by &apos;ParentContext&apos;? Is that the enclosing class? Can you please share the code you used to make it work?&lt;/p&gt;

&lt;p&gt;We are generating the schema on the fly based on the incoming class instance. It is failing because we have a parameterized class within the class.&lt;/p&gt;

&lt;p&gt;class Record  &amp;lt;T&amp;gt; {&lt;br/&gt;
    T value&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;org.apache.avro.AvroTypeException: Unknown type: T&lt;br/&gt;
	at org.apache.avro.specific.SpecificData.createSchema(SpecificData.java:255)&lt;br/&gt;
	at org.apache.avro.reflect.ReflectData.createSchema(ReflectData.java:514)&lt;br/&gt;
	at org.apache.avro.specific.SpecificData.getSchema(SpecificData.java:189)&lt;/p&gt;

&lt;p&gt;Doesn&apos;t look like there is a patch for this issue yet.&lt;/p&gt;</comment>
                            <comment id="14351149" author="sachingoyal" created="Fri, 6 Mar 2015 23:44:37 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rajiv.a1&quot; class=&quot;user-hover&quot; rel=&quot;rajiv.a1&quot;&gt;Rajiv S&lt;/a&gt;, I mean to introduce a new class called ParentContext which will store the parameters passed in from the parents and the grandparents.&lt;br/&gt;
It could contain a map of type-name to actual-class-type.&lt;/p&gt;</comment>
                            <comment id="15029915" author="dvdkruk" created="Fri, 27 Nov 2015 14:19:04 +0000"  >&lt;p&gt;Got the same problem as &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rajiv.a1&quot; class=&quot;user-hover&quot; rel=&quot;rajiv.a1&quot;&gt;Rajiv S&lt;/a&gt; but then with generating a protocol schema from a interface with parameterized types. For example generating a protocol schema from:&lt;/p&gt;

&lt;p&gt;public interface GenericType&amp;lt;T extends Number&amp;gt; {&lt;br/&gt;
        T m(T x);&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;Results in:&lt;/p&gt;

&lt;p&gt;org.apache.avro.AvroTypeException: Error getting schema for T: Unknown type: T&lt;br/&gt;
	at org.apache.avro.reflect.ReflectData.getSchema(ReflectData.java:682)&lt;br/&gt;
	at org.apache.avro.reflect.ReflectData.getMessage(ReflectData.java:640)&lt;br/&gt;
	at org.apache.avro.reflect.ReflectData.getProtocol(ReflectData.java:619)&lt;/p&gt;

&lt;p&gt;When will this be fixed and/or is their any workaround for this for now?&lt;/p&gt;</comment>
                            <comment id="15823511" author="sachingoyal" created="Mon, 16 Jan 2017 06:16:30 +0000"  >&lt;p&gt;Attached a simple test to help see this issue clearly.&lt;/p&gt;</comment>
                            <comment id="15934196" author="dromit" created="Tue, 21 Mar 2017 07:23:53 +0000"  >&lt;p&gt;This is a rather common scenario, I&apos;ve faced this problem in different situations and in multiple projects.&lt;/p&gt;

&lt;p&gt;Based on &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; it seems there is a way to fix the problem by defining the schema explicitly. Unfortunately, I use reflection to create the schemas for multiple classes on runtime, so that workaround is not an option. Do you know any other alternative?&lt;/p&gt;

&lt;p&gt;The most common scenario for me is wrapping a class such as HashMap but still keeping it generic on one or both types.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;Foo.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Foo&amp;lt;V&amp;gt; {
   &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; HashMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, V&amp;gt; data;
   &lt;span class=&quot;code-comment&quot;&gt;// ...
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is there any plan to fix this in the near future?&lt;/p&gt;

&lt;p&gt;Matt&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://stackoverflow.com/questions/28666618/can-apache-avro-framework-handle-parameterized-types-during-serialization&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://stackoverflow.com/questions/28666618/can-apache-avro-framework-handle-parameterized-types-during-serialization&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16664220" author="vamsi360" created="Thu, 25 Oct 2018 19:46:34 +0000"  >&lt;p&gt;Hi all,&lt;/p&gt;

&lt;p&gt;I have worked on this and have a working solution with patch available in other JIRA:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2248&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-2248&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please review it. I am willing to make changes and work towards mainlining this. Please help. Thanks&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12847573" name="ParameterizedTypesTest.java" size="1000" author="sachingoyal" created="Mon, 16 Jan 2017 06:15:48 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 23 Feb 2015 00:12:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            12 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1z9jb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1572] Avro-C misses EOF on 4K boundary</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1572</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;As noted in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1405&quot; title=&quot;Avro-c may not handle eof correctly if avro data file contains multiple sync markers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1405&quot;&gt;&lt;del&gt;AVRO-1405&lt;/del&gt;&lt;/a&gt;, Avro C is still missing EOF in the case that the sync section ends exactly on a 4096 byte boundary (4096 bytes is the buffer size used by the reader).&lt;/p&gt;

&lt;p&gt;I have fixed this bug (the suggested fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1364&quot; title=&quot;Avro-C reader ignores final block in file&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1364&quot;&gt;&lt;del&gt;AVRO-1364&lt;/del&gt;&lt;/a&gt; actually works fine). Also I added some more extensive testing.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12736614">AVRO-1572</key>
            <summary>Avro-C misses EOF on 4K boundary</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="martinkl">Martin Kleppmann</assignee>
                                    <reporter username="bw123">Ben Walsh</reporter>
                        <labels>
                    </labels>
                <created>Mon, 25 Aug 2014 20:06:05 +0000</created>
                <updated>Mon, 1 Feb 2016 14:55:53 +0000</updated>
                            <resolved>Wed, 30 Dec 2015 15:37:32 +0000</resolved>
                                                    <fixVersion>1.8.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="15058082" author="martinkl" created="Tue, 15 Dec 2015 13:59:16 +0000"  >&lt;p&gt;+1 I think this patch looks great. I will commit it soon if there are no objections.&lt;/p&gt;</comment>
                            <comment id="15072926" author="dcreager" created="Mon, 28 Dec 2015 17:17:09 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="15075111" author="jira-bot" created="Wed, 30 Dec 2015 15:32:03 +0000"  >&lt;p&gt;Commit 1722355 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=martinkl&quot; class=&quot;user-hover&quot; rel=&quot;martinkl&quot;&gt;Martin Kleppmann&lt;/a&gt; in branch &apos;avro/branches/branch-1.8&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1722355&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1722355&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1572&quot; title=&quot;Avro-C misses EOF on 4K boundary&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1572&quot;&gt;&lt;del&gt;AVRO-1572&lt;/del&gt;&lt;/a&gt;: C: Fix EOF handling on data files that are multiples of 4096 bytes. (Ben Walsh via martinkl)&lt;/p&gt;</comment>
                            <comment id="15075115" author="jira-bot" created="Wed, 30 Dec 2015 15:35:47 +0000"  >&lt;p&gt;Commit 1722359 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=martinkl&quot; class=&quot;user-hover&quot; rel=&quot;martinkl&quot;&gt;Martin Kleppmann&lt;/a&gt; in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1722359&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1722359&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1572&quot; title=&quot;Avro-C misses EOF on 4K boundary&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1572&quot;&gt;&lt;del&gt;AVRO-1572&lt;/del&gt;&lt;/a&gt;: C: Fix EOF handling on data files that are multiples of 4096 bytes. Contributed by Ben Walsh.&lt;/p&gt;</comment>
                            <comment id="15075116" author="martinkl" created="Wed, 30 Dec 2015 15:37:32 +0000"  >&lt;p&gt;I have committed this to branch-1.8 and trunk. Thanks for your contribution, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=bw123&quot; class=&quot;user-hover&quot; rel=&quot;bw123&quot;&gt;Ben Walsh&lt;/a&gt;!&lt;/p&gt;</comment>
                            <comment id="15075212" author="hudson" created="Wed, 30 Dec 2015 17:11:15 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #563 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/563/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/563/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1572&quot; title=&quot;Avro-C misses EOF on 4K boundary&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1572&quot;&gt;&lt;del&gt;AVRO-1572&lt;/del&gt;&lt;/a&gt;: C: Fix EOF handling on data files that are multiples of 4096 bytes. Contributed by Ben Walsh. (martinkl: rev 1722359)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;trunk/lang/c/src/datafile.c&lt;/li&gt;
	&lt;li&gt;trunk/lang/c/tests/CMakeLists.txt&lt;/li&gt;
	&lt;li&gt;trunk/lang/c/tests/test_avro_1572.c&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12664203" name="AVRO-1572.patch" size="6260" author="bw123" created="Mon, 25 Aug 2014 20:16:30 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 15 Dec 2015 13:59:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 3 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1zb67:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
