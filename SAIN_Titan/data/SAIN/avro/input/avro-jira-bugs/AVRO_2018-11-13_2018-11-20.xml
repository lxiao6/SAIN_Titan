<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:27:31 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2018-11-13+AND+created+%3C%3D+2018-11-20+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="5" total="5"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-2266] Avoid m2e plugin warning</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2266</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;When you build Java binding with maven you get&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[WARNING] The POM &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; org.eclipse.m2e:lifecycle-mapping:jar:1.0.0 is missing, no dependency information available

[WARNING] Failed to retrieve plugin descriptor &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; org.eclipse.m2e:lifecycle-mapping:1.0.0: Plugin org.eclipse.m2e:lifecycle-mapping:1.0.0 or one of its dependencies could not be resolved: Failure to find org.eclipse.m2e:lifecycle-mapping:jar:1.0.0 in https:&lt;span class=&quot;code-comment&quot;&gt;//repo.maven.apache.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Even though the warning is not harmful, one has to constantly remind oneself that it is indeed harmless. It will be nice if we can get rid of the warning.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13198677">AVRO-2266</key>
            <summary>Avoid m2e plugin warning</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thiru_mg">Thiruvalluvan M. G.</assignee>
                                    <reporter username="thiru_mg">Thiruvalluvan M. G.</reporter>
                        <labels>
                    </labels>
                <created>Thu, 15 Nov 2018 17:33:04 +0000</created>
                <updated>Sun, 18 Nov 2018 17:09:10 +0000</updated>
                            <resolved>Sun, 18 Nov 2018 17:09:10 +0000</resolved>
                                    <version>1.8.2</version>
                                    <fixVersion>1.9.0</fixVersion>
                    <fixVersion>1.8.3</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|s00ji8:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2267] Duplicate code RandomData.java and its dependency problem</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2267</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;There are two issues with &lt;tt&gt;RandomData&lt;/tt&gt; class:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;There are almost identical copies of the same code in two modules: &lt;tt&gt;avro&lt;/tt&gt; and &lt;tt&gt;avro-ipc&lt;/tt&gt;. We should use a single source file.&lt;/li&gt;
	&lt;li&gt;Both the copies belong to &lt;tt&gt;test&lt;/tt&gt;&#160;subfolders in their respective module. But &lt;tt&gt;avro-tools&lt;/tt&gt; module uses this class in &lt;tt&gt;main&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="13198687">AVRO-2267</key>
            <summary>Duplicate code RandomData.java and its dependency problem</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thiru_mg">Thiruvalluvan M. G.</assignee>
                                    <reporter username="thiru_mg">Thiruvalluvan M. G.</reporter>
                        <labels>
                    </labels>
                <created>Thu, 15 Nov 2018 18:02:25 +0000</created>
                <updated>Tue, 20 Nov 2018 09:28:02 +0000</updated>
                            <resolved>Tue, 20 Nov 2018 09:28:02 +0000</resolved>
                                                    <fixVersion>1.9.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="16692921" author="githubbot" created="Tue, 20 Nov 2018 09:27:36 +0000"  >&lt;p&gt;Fokko closed pull request #385: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2267&quot; title=&quot;Duplicate code RandomData.java and its dependency problem&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2267&quot;&gt;&lt;del&gt;AVRO-2267&lt;/del&gt;&lt;/a&gt; Removed copies of RandomData&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/385&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/385&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/pom.xml b/lang/java/avro/pom.xml&lt;br/&gt;
index c9104fba9..a684b1ccc 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/pom.xml&lt;br/&gt;
+++ b/lang/java/avro/pom.xml&lt;br/&gt;
@@ -106,8 +106,7 @@&lt;br/&gt;
                 &amp;lt;id&amp;gt;interop-generate-null-codec&amp;lt;/id&amp;gt;&lt;br/&gt;
                 &amp;lt;phase&amp;gt;generate-resources&amp;lt;/phase&amp;gt;&lt;br/&gt;
                 &amp;lt;configuration&amp;gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&amp;lt;mainClass&amp;gt;org.apache.avro.RandomData&amp;lt;/mainClass&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;classpathScope&amp;gt;test&amp;lt;/classpathScope&amp;gt;&lt;br/&gt;
+                  &amp;lt;mainClass&amp;gt;org.apache.avro.util.RandomData&amp;lt;/mainClass&amp;gt;&lt;br/&gt;
                   &amp;lt;arguments&amp;gt;&lt;br/&gt;
                     &amp;lt;argument&amp;gt;../../../share/test/schemas/interop.avsc&amp;lt;/argument&amp;gt;&lt;br/&gt;
                     &amp;lt;argument&amp;gt;../../../build/interop/data/java.avro&amp;lt;/argument&amp;gt;&lt;br/&gt;
@@ -121,8 +120,7 @@&lt;br/&gt;
                 &amp;lt;id&amp;gt;interop-generate-deflate-codec&amp;lt;/id&amp;gt;&lt;br/&gt;
                 &amp;lt;phase&amp;gt;generate-resources&amp;lt;/phase&amp;gt;&lt;br/&gt;
                 &amp;lt;configuration&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;mainClass&amp;gt;org.apache.avro.RandomData&amp;lt;/mainClass&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;classpathScope&amp;gt;test&amp;lt;/classpathScope&amp;gt;&lt;br/&gt;
+                  &amp;lt;mainClass&amp;gt;org.apache.avro.util.RandomData&amp;lt;/mainClass&amp;gt;&lt;br/&gt;
                   &amp;lt;arguments&amp;gt;&lt;br/&gt;
                     &amp;lt;argument&amp;gt;../../../share/test/schemas/interop.avsc&amp;lt;/argument&amp;gt;&lt;br/&gt;
                     &amp;lt;argument&amp;gt;../../../build/interop/data/java_deflate.avro&amp;lt;/argument&amp;gt;&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/RandomData.java b/lang/java/avro/src/main/java/org/apache/avro/util/RandomData.java&lt;br/&gt;
similarity index 72%&lt;br/&gt;
rename from lang/java/avro/src/test/java/org/apache/avro/RandomData.java&lt;br/&gt;
rename to lang/java/avro/src/main/java/org/apache/avro/util/RandomData.java&lt;br/&gt;
index 89a4321d6..b8c7c042d 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/avro/src/test/java/org/apache/avro/RandomData.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/util/RandomData.java&lt;br/&gt;
@@ -15,34 +15,51 @@&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;See the License for the specific language governing permissions and&lt;/li&gt;
	&lt;li&gt;limitations under the License.&lt;br/&gt;
  */&lt;br/&gt;
-package org.apache.avro;&lt;br/&gt;
+package org.apache.avro.util;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; import java.io.File;&lt;br/&gt;
 import java.nio.ByteBuffer;&lt;br/&gt;
-import java.util.*;&lt;br/&gt;
+import java.nio.charset.Charset;&lt;br/&gt;
+import java.util.HashMap;&lt;br/&gt;
+import java.util.Iterator;&lt;br/&gt;
+import java.util.List;&lt;br/&gt;
+import java.util.Map;&lt;br/&gt;
+import java.util.Random;&lt;/p&gt;

&lt;p&gt;+import org.apache.avro.Schema;&lt;br/&gt;
 import org.apache.avro.file.CodecFactory;&lt;br/&gt;
 import org.apache.avro.file.DataFileWriter;&lt;br/&gt;
 import org.apache.avro.generic.GenericArray;&lt;br/&gt;
 import org.apache.avro.generic.GenericData;&lt;br/&gt;
 import org.apache.avro.generic.GenericDatumWriter;&lt;br/&gt;
 import org.apache.avro.generic.GenericRecord;&lt;br/&gt;
-import org.apache.avro.util.Utf8;&lt;/p&gt;

&lt;p&gt; /** Generates schema data as Java objects with random values. */&lt;br/&gt;
 public class RandomData implements Iterable&amp;lt;Object&amp;gt; {&lt;br/&gt;
+  public static final String USE_DEFAULT = &quot;use-default&quot;;&lt;br/&gt;
+&lt;br/&gt;
   private final Schema root;&lt;br/&gt;
   private final long seed;&lt;br/&gt;
   private final int count;&lt;br/&gt;
+  private final boolean utf8ForString;&lt;/p&gt;

&lt;p&gt;   public RandomData(Schema schema, int count) &lt;/p&gt;
{
-    this(schema, count, System.currentTimeMillis());
+    this(schema, count, false);
   }

&lt;p&gt;   public RandomData(Schema schema, int count, long seed) &lt;/p&gt;
{
+    this(schema, count, seed, false);
+  }
&lt;p&gt;+&lt;br/&gt;
+  public RandomData(Schema schema, int count, boolean utf8ForString) &lt;/p&gt;
{
+    this(schema, count, System.currentTimeMillis(), utf8ForString);
+  }
&lt;p&gt;+&lt;br/&gt;
+  public RandomData(Schema schema, int count, long seed, boolean utf8ForString) &lt;/p&gt;
{
     this.root = schema;
     this.seed = seed;
     this.count = count;
+    this.utf8ForString = utf8ForString;
   }

&lt;p&gt;   public Iterator&amp;lt;Object&amp;gt; iterator() {&lt;br/&gt;
@@ -59,12 +76,16 @@ public Object next() {&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   @SuppressWarnings(value=&quot;unchecked&quot;)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private static Object generate(Schema schema, Random random, int d) {&lt;br/&gt;
+  private Object generate(Schema schema, Random random, int d) {&lt;br/&gt;
     switch (schema.getType()) {&lt;br/&gt;
     case RECORD:&lt;br/&gt;
       GenericRecord record = new GenericData.Record(schema);&lt;/li&gt;
	&lt;li&gt;for (Schema.Field field : schema.getFields())&lt;/li&gt;
	&lt;li&gt;record.put(field.name(), generate(field.schema(), random, d+1));&lt;br/&gt;
+      for (Schema.Field field : schema.getFields()) 
{
+        Object value = (field.getObjectProp(USE_DEFAULT) == null) ?
+                        generate(field.schema(), random, d+1) :
+                        GenericData.get().getDefaultValue(field);
+        record.put(field.name(), value);
+      }
&lt;p&gt;       return record;&lt;br/&gt;
     case ENUM:&lt;br/&gt;
       List&amp;lt;String&amp;gt; symbols = schema.getEnumSymbols();&lt;br/&gt;
@@ -72,6 +93,7 @@ private static Object generate(Schema schema, Random random, int d) {&lt;br/&gt;
         (schema, symbols.get(random.nextInt(symbols.size())));&lt;br/&gt;
     case ARRAY:&lt;br/&gt;
       int length = (random.nextInt(5)+2)-d;&lt;br/&gt;
+      @SuppressWarnings(&quot;rawtypes&quot;)&lt;br/&gt;
       GenericArray&amp;lt;Object&amp;gt; array =&lt;br/&gt;
         new GenericData.Array(length&amp;lt;=0?0:length, schema);&lt;br/&gt;
       for (int i = 0; i &amp;lt; length; i++)&lt;br/&gt;
@@ -81,7 +103,7 @@ private static Object generate(Schema schema, Random random, int d) {&lt;br/&gt;
       length = (random.nextInt(5)+2)-d;&lt;br/&gt;
       Map&amp;lt;Object,Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;(length &amp;lt;= 0 ? 0 : length);&lt;br/&gt;
       for (int i = 0; i &amp;lt; length; i++) &lt;/p&gt;
{
-        map.put(randomUtf8(random, 40),
+        map.put(randomString(random, 40),
                 generate(schema.getValueType(), random, d+1));
       }
&lt;p&gt;       return map;&lt;br/&gt;
@@ -92,7 +114,7 @@ private static Object generate(Schema schema, Random random, int d) {&lt;br/&gt;
       byte[] bytes = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;schema.getFixedSize()&amp;#93;&lt;/span&gt;;&lt;br/&gt;
       random.nextBytes(bytes);&lt;br/&gt;
       return new GenericData.Fixed(schema, bytes);&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;case STRING:  return randomUtf8(random, 40);&lt;br/&gt;
+    case STRING:  return randomString(random, 40);&lt;br/&gt;
     case BYTES:   return randomBytes(random, 40);&lt;br/&gt;
     case INT:     return random.nextInt();&lt;br/&gt;
     case LONG:    return random.nextLong();&lt;br/&gt;
@@ -104,12 +126,15 @@ private static Object generate(Schema schema, Random random, int d) {&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private static Utf8 randomUtf8(Random rand, int maxLength) {&lt;/li&gt;
	&lt;li&gt;Utf8 utf8 = new Utf8().setLength(rand.nextInt(maxLength));&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt; utf8.getLength(); i++) {&lt;/li&gt;
	&lt;li&gt;utf8.getBytes()&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; = (byte)(&apos;a&apos;+rand.nextInt(&apos;z&apos;-&apos;a&apos;));&lt;br/&gt;
+  private static final Charset UTF8 = Charset.forName(&quot;UTF-8&quot;);&lt;br/&gt;
+&lt;br/&gt;
+  private Object randomString(Random random, int maxLength) {&lt;br/&gt;
+    int length = random.nextInt(maxLength);&lt;br/&gt;
+    byte[] bytes = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;length&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+    for (int i = 0; i &amp;lt; length; i++) 
{
+      bytes[i] = (byte)(&apos;a&apos;+random.nextInt(&apos;z&apos;-&apos;a&apos;));
     }&lt;/li&gt;
	&lt;li&gt;return utf8;&lt;br/&gt;
+    return utf8ForString ? new Utf8(bytes) : new String(bytes, UTF8);&lt;br/&gt;
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   private static ByteBuffer randomBytes(Random rand, int maxLength) {&lt;br/&gt;
@@ -120,11 +145,11 @@ private static ByteBuffer randomBytes(Random rand, int maxLength) {&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   public static void main(String[] args) throws Exception {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if(args.length &amp;lt; 3 || args.length &amp;gt; 4) {&lt;br/&gt;
+    if (args.length &amp;lt; 3 || args.length &amp;gt; 4) 
{
       System.out.println(&quot;Usage: RandomData &amp;lt;schemafile&amp;gt; &amp;lt;outputfile&amp;gt; &amp;lt;count&amp;gt; [codec]&quot;);
       System.exit(-1);
     }&lt;/li&gt;
	&lt;li&gt;Schema sch = Schema.parse(new File(args&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;));&lt;br/&gt;
+    Schema sch = new Schema.Parser().parse(new File(args&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;));&lt;br/&gt;
     DataFileWriter&amp;lt;Object&amp;gt; writer =&lt;br/&gt;
       new DataFileWriter&amp;lt;&amp;gt;(new GenericDatumWriter&amp;lt;&amp;gt;());&lt;br/&gt;
     writer.setCodec(CodecFactory.fromString(args.length &amp;gt;= 4 ? args&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; : &quot;null&quot;));&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/GenerateBlockingData.java b/lang/java/avro/src/test/java/org/apache/avro/GenerateBlockingData.java&lt;br/&gt;
index d5440c2a4..5a9a57208 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/avro/src/test/java/org/apache/avro/GenerateBlockingData.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/GenerateBlockingData.java&lt;br/&gt;
@@ -26,6 +26,7 @@&lt;br/&gt;
 import org.apache.avro.io.DatumWriter;&lt;br/&gt;
 import org.apache.avro.io.Encoder;&lt;br/&gt;
 import org.apache.avro.io.EncoderFactory;&lt;br/&gt;
+import org.apache.avro.util.RandomData;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Generates file with objects of a specific schema(that doesn&apos;t contain nesting&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/TestDataFile.java b/lang/java/avro/src/test/java/org/apache/avro/TestDataFile.java&lt;br/&gt;
index 6e2398dff..d42548af8 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/avro/src/test/java/org/apache/avro/TestDataFile.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/TestDataFile.java&lt;br/&gt;
@@ -33,6 +33,7 @@&lt;br/&gt;
 import org.apache.avro.generic.GenericDatumReader;&lt;br/&gt;
 import org.apache.avro.generic.GenericDatumWriter;&lt;br/&gt;
 import org.apache.avro.io.DatumReader;&lt;br/&gt;
+import org.apache.avro.util.RandomData;&lt;br/&gt;
 import org.junit.Rule;&lt;br/&gt;
 import org.junit.Test;&lt;br/&gt;
 import org.junit.rules.TemporaryFolder;&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/TestDataFileConcat.java b/lang/java/avro/src/test/java/org/apache/avro/TestDataFileConcat.java&lt;br/&gt;
index dfb68fa36..4312fdffa 100644&lt;/li&gt;
			&lt;li&gt;a/lang/java/avro/src/test/java/org/apache/avro/TestDataFileConcat.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/TestDataFileConcat.java&lt;br/&gt;
@@ -29,6 +29,7 @@&lt;br/&gt;
 import org.apache.avro.file.DataFileWriter;&lt;br/&gt;
 import org.apache.avro.generic.GenericDatumReader;&lt;br/&gt;
 import org.apache.avro.generic.GenericDatumWriter;&lt;br/&gt;
+import org.apache.avro.util.RandomData;&lt;br/&gt;
 import org.junit.Rule;&lt;br/&gt;
 import org.junit.Test;&lt;br/&gt;
 import org.junit.rules.TemporaryFolder;&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/file/TestIOExceptionDuringWrite.java b/lang/java/avro/src/test/java/org/apache/avro/file/TestIOExceptionDuringWrite.java&lt;br/&gt;
index 97914c47e..35fdcdf37 100644&lt;/li&gt;
			&lt;li&gt;a/lang/java/avro/src/test/java/org/apache/avro/file/TestIOExceptionDuringWrite.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/file/TestIOExceptionDuringWrite.java&lt;br/&gt;
@@ -22,9 +22,9 @@&lt;br/&gt;
 import java.io.IOException;&lt;br/&gt;
 import java.io.OutputStream;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;-import org.apache.avro.RandomData;&lt;br/&gt;
 import org.apache.avro.Schema;&lt;br/&gt;
 import org.apache.avro.generic.GenericDatumWriter;&lt;br/&gt;
+import org.apache.avro.util.RandomData;&lt;br/&gt;
 import org.junit.Test;&lt;/p&gt;

&lt;p&gt; /*&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/io/TestBinaryDecoder.java b/lang/java/avro/src/test/java/org/apache/avro/io/TestBinaryDecoder.java&lt;br/&gt;
index 76f4df3dc..dd1c55a69 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/io/TestBinaryDecoder.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/io/TestBinaryDecoder.java&lt;br/&gt;
@@ -24,12 +24,12 @@&lt;br/&gt;
 import java.util.Collection;&lt;/p&gt;

&lt;p&gt; import org.apache.avro.AvroRuntimeException;&lt;br/&gt;
-import org.apache.avro.RandomData;&lt;br/&gt;
 import org.apache.avro.Schema;&lt;br/&gt;
 import org.apache.avro.generic.GenericDatumReader;&lt;br/&gt;
 import org.apache.avro.generic.GenericDatumWriter;&lt;br/&gt;
 import org.apache.avro.util.ByteBufferInputStream;&lt;br/&gt;
 import org.apache.avro.util.ByteBufferOutputStream;&lt;br/&gt;
+import org.apache.avro.util.RandomData;&lt;br/&gt;
 import org.apache.avro.util.Utf8;&lt;br/&gt;
 import org.junit.Assert;&lt;br/&gt;
 import org.junit.BeforeClass;&lt;br/&gt;
diff --git a/lang/java/ipc/src/test/java/org/apache/avro/RandomData.java b/lang/java/ipc/src/test/java/org/apache/avro/RandomData.java&lt;br/&gt;
deleted file mode 100644&lt;br/&gt;
index 1d9d4ce5e..000000000&lt;br/&gt;
&amp;#8212; a/lang/java/ipc/src/test/java/org/apache/avro/RandomData.java&lt;br/&gt;
+++ /dev/null&lt;br/&gt;
@@ -1,142 +0,0 @@&lt;br/&gt;
-/*&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;* Licensed to the Apache Software Foundation (ASF) under one&lt;/li&gt;
	&lt;li&gt;* or more contributor license agreements.  See the NOTICE file&lt;/li&gt;
	&lt;li&gt;* distributed with this work for additional information&lt;/li&gt;
	&lt;li&gt;* regarding copyright ownership.  The ASF licenses this file&lt;/li&gt;
	&lt;li&gt;* to you under the Apache License, Version 2.0 (the&lt;/li&gt;
	&lt;li&gt;* &quot;License&quot;); you may not use this file except in compliance&lt;/li&gt;
	&lt;li&gt;* with the License.  You may obtain a copy of the License at&lt;/li&gt;
	&lt;li&gt;*&lt;/li&gt;
	&lt;li&gt;*     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;*&lt;/li&gt;
	&lt;li&gt;* Unless required by applicable law or agreed to in writing, software&lt;/li&gt;
	&lt;li&gt;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;/li&gt;
	&lt;li&gt;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/li&gt;
	&lt;li&gt;* See the License for the specific language governing permissions and&lt;/li&gt;
	&lt;li&gt;* limitations under the License.&lt;/li&gt;
	&lt;li&gt;*/&lt;br/&gt;
-package org.apache.avro;&lt;br/&gt;
-&lt;br/&gt;
-import java.io.File;&lt;br/&gt;
-import java.nio.ByteBuffer;&lt;br/&gt;
-import java.util.HashMap;&lt;br/&gt;
-import java.util.Iterator;&lt;br/&gt;
-import java.util.List;&lt;br/&gt;
-import java.util.Map;&lt;br/&gt;
-import java.util.Random;&lt;br/&gt;
-&lt;br/&gt;
-import org.apache.avro.file.DataFileWriter;&lt;br/&gt;
-import org.apache.avro.generic.GenericArray;&lt;br/&gt;
-import org.apache.avro.generic.GenericData;&lt;br/&gt;
-import org.apache.avro.generic.GenericDatumWriter;&lt;br/&gt;
-import org.apache.avro.generic.GenericRecord;&lt;br/&gt;
-import org.apache.avro.util.Utf8;&lt;br/&gt;
-&lt;br/&gt;
-/** Generates schema data as Java objects with random values. */&lt;br/&gt;
-public class RandomData implements Iterable&amp;lt;Object&amp;gt; {&lt;/li&gt;
	&lt;li&gt;private final Schema root;&lt;/li&gt;
	&lt;li&gt;private final long seed;&lt;/li&gt;
	&lt;li&gt;private final int count;&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;public RandomData(Schema schema, int count) 
{
-    this(schema, count, System.currentTimeMillis());
-  }
&lt;p&gt;-&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;public RandomData(Schema schema, int count, long seed) 
{
-    this.root = schema;
-    this.seed = seed;
-    this.count = count;
-  }
&lt;p&gt;-&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;public Iterator&amp;lt;Object&amp;gt; iterator() {&lt;/li&gt;
	&lt;li&gt;return new Iterator&amp;lt;Object&amp;gt;() {&lt;/li&gt;
	&lt;li&gt;private int n;&lt;/li&gt;
	&lt;li&gt;private Random random = new Random(seed);&lt;/li&gt;
	&lt;li&gt;public boolean hasNext() 
{ return n &amp;lt; count; }&lt;br/&gt;
-      public Object next() {
-        n++;
-        return generate(root, random, 0);
-      }&lt;br/&gt;
-      public void remove() { throw new UnsupportedOperationException(); }&lt;br/&gt;
-    };&lt;br/&gt;
-  }&lt;br/&gt;
-&lt;br/&gt;
-  @SuppressWarnings(value=&quot;unchecked&quot;)&lt;br/&gt;
-  private static Object generate(Schema schema, Random random, int d) {&lt;br/&gt;
-    switch (schema.getType()) {&lt;br/&gt;
-    case RECORD:&lt;br/&gt;
-      GenericRecord record = new GenericData.Record(schema);&lt;br/&gt;
-      for (Schema.Field field : schema.getFields())&lt;br/&gt;
-        record.put(field.name(), generate(field.schema(), random, d+1));&lt;br/&gt;
-      return record;&lt;br/&gt;
-    case ENUM:&lt;br/&gt;
-      List&amp;lt;String&amp;gt; symbols = schema.getEnumSymbols();&lt;br/&gt;
-      return new GenericData.EnumSymbol&lt;br/&gt;
-        (schema, symbols.get(random.nextInt(symbols.size())));&lt;br/&gt;
-    case ARRAY:&lt;br/&gt;
-      int length = (random.nextInt(5)+2)-d;&lt;br/&gt;
-      GenericArray&amp;lt;Object&amp;gt; array =&lt;br/&gt;
-        new GenericData.Array(length&amp;lt;=0?0:length, schema);&lt;br/&gt;
-      for (int i = 0; i &amp;lt; length; i++)&lt;br/&gt;
-        array.add(generate(schema.getElementType(), random, d+1));&lt;br/&gt;
-      return array;&lt;br/&gt;
-    case MAP:&lt;br/&gt;
-      length = (random.nextInt(5)+2)-d;&lt;br/&gt;
-      Map&amp;lt;Object,Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;(length &amp;lt;= 0 ? 0 : length);&lt;br/&gt;
-      for (int i = 0; i &amp;lt; length; i++) {
-        map.put(randomUtf8(random, 40),
-                generate(schema.getValueType(), random, d+1));
-      }&lt;br/&gt;
-      return map;&lt;br/&gt;
-    case UNION:&lt;br/&gt;
-      List&amp;lt;Schema&amp;gt; types = schema.getTypes();&lt;br/&gt;
-      return generate(types.get(random.nextInt(types.size())), random, d);&lt;br/&gt;
-    case FIXED:&lt;br/&gt;
-      byte[] bytes = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;schema.getFixedSize()&amp;#93;&lt;/span&gt;;&lt;br/&gt;
-      random.nextBytes(bytes);&lt;br/&gt;
-      return new GenericData.Fixed(schema, bytes);&lt;br/&gt;
-    case STRING:  return randomUtf8(random, 40);&lt;br/&gt;
-    case BYTES:   return randomBytes(random, 40);&lt;br/&gt;
-    case INT:     return random.nextInt();&lt;br/&gt;
-    case LONG:    return random.nextLong();&lt;br/&gt;
-    case FLOAT:   return random.nextFloat();&lt;br/&gt;
-    case DOUBLE:  return random.nextDouble();&lt;br/&gt;
-    case BOOLEAN: return random.nextBoolean();&lt;br/&gt;
-    case NULL:    return null;&lt;br/&gt;
-    default: throw new RuntimeException(&quot;Unknown type: &quot;+schema);&lt;br/&gt;
-    }&lt;br/&gt;
-  }&lt;br/&gt;
-&lt;br/&gt;
-  private static Utf8 randomUtf8(Random rand, int maxLength) {&lt;br/&gt;
-    Utf8 utf8 = new Utf8().setLength(rand.nextInt(maxLength));&lt;br/&gt;
-    for (int i = 0; i &amp;lt; utf8.getLength(); i++) {
-      utf8.getBytes()[i] = (byte)(&apos;a&apos;+rand.nextInt(&apos;z&apos;-&apos;a&apos;));
-    }&lt;br/&gt;
-    return utf8;&lt;br/&gt;
-  }&lt;br/&gt;
-&lt;br/&gt;
-  private static ByteBuffer randomBytes(Random rand, int maxLength) {
-    ByteBuffer bytes = ByteBuffer.allocate(rand.nextInt(maxLength));
-    bytes.limit(bytes.capacity());
-    rand.nextBytes(bytes.array());
-    return bytes;
-  }&lt;br/&gt;
-&lt;br/&gt;
-  public static void main(String[] args) throws Exception {&lt;br/&gt;
-    if(args.length != 3) {
-      System.out.println(&quot;Usage: RandomData &amp;lt;schemafile&amp;gt; &amp;lt;outputfile&amp;gt; &amp;lt;count&amp;gt;&quot;);
-      System.exit(-1);
-    }&lt;br/&gt;
-    Schema sch = Schema.parse(new File(args&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;));&lt;br/&gt;
-    DataFileWriter&amp;lt;Object&amp;gt; writer =&lt;br/&gt;
-      new DataFileWriter&amp;lt;&amp;gt;(new GenericDatumWriter&amp;lt;&amp;gt;())&lt;br/&gt;
-      .create(sch, new File(args&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;));&lt;br/&gt;
-    try {&lt;br/&gt;
-      for (Object datum : new RandomData(sch, Integer.parseInt(args&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;))) {
-        writer.append(datum);
-      }&lt;br/&gt;
-    } finally {
-      writer.close();
-    }&lt;br/&gt;
-  }&lt;br/&gt;
-}&lt;br/&gt;
diff --git a/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java b/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java&lt;br/&gt;
index cc04e3331..525a8b1cd 100644&lt;br/&gt;
&amp;#8212; a/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java&lt;br/&gt;
+++ b/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java&lt;br/&gt;
@@ -44,6 +44,7 @@&lt;br/&gt;
 import org.apache.avro.io.DecoderFactory;&lt;br/&gt;
 import org.apache.avro.io.Encoder;&lt;br/&gt;
 import org.apache.avro.io.EncoderFactory;&lt;br/&gt;
+import org.apache.avro.util.RandomData;&lt;br/&gt;
 import org.apache.avro.util.Utf8;&lt;br/&gt;
 import org.junit.Rule;&lt;br/&gt;
 import org.junit.Test;&lt;br/&gt;
@@ -665,7 +666,7 @@ private static void check(File dst, String jsonSchema, boolean induce) throws Ex&lt;br/&gt;
     Schema schema = Schema.parse(jsonSchema);&lt;br/&gt;
     checkProp(schema);&lt;br/&gt;
     Object reuse = null;&lt;br/&gt;
-    for (Object datum : new RandomData(schema, COUNT)) {&lt;br/&gt;
+    for (Object datum : new RandomData(schema, COUNT, true)) {&lt;br/&gt;
 &lt;br/&gt;
       if (induce) {&lt;br/&gt;
         Schema induced = GenericData.get().induce(datum);&lt;br/&gt;
diff --git a/lang/java/tools/src/main/java/org/apache/avro/tool/CreateRandomFileTool.java b/lang/java/tools/src/main/java/org/apache/avro/tool/CreateRandomFileTool.java&lt;br/&gt;
index a42846d40..3ea2382d9 100644&lt;br/&gt;
&amp;#8212; a/lang/java/tools/src/main/java/org/apache/avro/tool/CreateRandomFileTool.java&lt;br/&gt;
+++ b/lang/java/tools/src/main/java/org/apache/avro/tool/CreateRandomFileTool.java&lt;br/&gt;
@@ -28,7 +28,7 @@&lt;br/&gt;
 import org.apache.avro.Schema;&lt;br/&gt;
 import org.apache.avro.file.DataFileWriter;&lt;br/&gt;
 import org.apache.avro.generic.GenericDatumWriter;&lt;br/&gt;
-import org.apache.trevni.avro.RandomData;&lt;br/&gt;
+import org.apache.avro.util.RandomData;&lt;br/&gt;
 &lt;br/&gt;
 /** Creates a file filled with randomly-generated instances of a schema. */&lt;br/&gt;
 public class CreateRandomFileTool implements Tool {&lt;br/&gt;
@@ -43,6 +43,7 @@ public String getShortDescription() {
     return &quot;Creates a file with randomly generated instances of a schema.&quot;;
   }&lt;br/&gt;
 &lt;br/&gt;
+  @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
   @Override&lt;br/&gt;
   public int run(InputStream stdin, PrintStream out, PrintStream err,&lt;br/&gt;
       List&amp;lt;String&amp;gt; args) throws Exception {&lt;br/&gt;
@@ -62,6 +63,11 @@ public int run(InputStream stdin, PrintStream out, PrintStream err,&lt;br/&gt;
         p.accepts(&quot;schema&quot;, &quot;Schema&quot;)&lt;br/&gt;
         .withOptionalArg()&lt;br/&gt;
         .ofType(String.class);&lt;br/&gt;
+    OptionSpec&amp;lt;Long&amp;gt; seedOpt =&lt;br/&gt;
+        p.accepts(&quot;seed&quot;, &quot;Seed for random&quot;)&lt;br/&gt;
+        .withOptionalArg()&lt;br/&gt;
+        .ofType(Long.class);&lt;br/&gt;
+&lt;br/&gt;
     OptionSet opts = p.parse(args.toArray(new String&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;));&lt;br/&gt;
     if (opts.nonOptionArguments().size() != 1) {&lt;br/&gt;
       err.println(&quot;Usage: outFile (filename or &apos;-&apos; for stdout)&quot;);&lt;br/&gt;
@@ -72,6 +78,7 @@ public int run(InputStream stdin, PrintStream out, PrintStream err,&lt;br/&gt;
 &lt;br/&gt;
     String schemastr = inschema.value(opts);&lt;br/&gt;
     String schemafile = file.value(opts);&lt;br/&gt;
+    Long seed = seedOpt.value(opts);&lt;br/&gt;
     if (schemastr == null &amp;amp;&amp;amp; schemafile == null) {&lt;br/&gt;
         err.println(&quot;Need input schema (-&lt;del&gt;schema-file) or (&lt;/del&gt;-schema)&quot;);&lt;br/&gt;
         p.printHelpOn(err);&lt;br/&gt;
@@ -90,10 +97,13 @@ public int run(InputStream stdin, PrintStream out, PrintStream err,&lt;br/&gt;
     if (countValue == null) {
       err.println(&quot;Need count (--count)&quot;);
       p.printHelpOn(err);
+      writer.close();
       return 1;
     }&lt;br/&gt;
 &lt;br/&gt;
-    for (Object datum : new RandomData(schema, countValue))&lt;br/&gt;
+    RandomData rd = seed == null ? new RandomData(schema, countValue) :&lt;br/&gt;
+      new RandomData(schema, countValue, seed);&lt;br/&gt;
+    for (Object datum : rd)&lt;br/&gt;
       writer.append(datum);&lt;br/&gt;
 &lt;br/&gt;
     writer.close();&lt;br/&gt;
diff --git a/lang/java/tools/src/main/java/org/apache/avro/tool/TrevniCreateRandomTool.java b/lang/java/tools/src/main/java/org/apache/avro/tool/TrevniCreateRandomTool.java&lt;br/&gt;
index 67245947a..03a474c18 100644&lt;br/&gt;
&amp;#8212; a/lang/java/tools/src/main/java/org/apache/avro/tool/TrevniCreateRandomTool.java&lt;br/&gt;
+++ b/lang/java/tools/src/main/java/org/apache/avro/tool/TrevniCreateRandomTool.java&lt;br/&gt;
@@ -23,9 +23,9 @@&lt;br/&gt;
 import java.util.List;&lt;br/&gt;
 &lt;br/&gt;
 import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.util.RandomData;&lt;br/&gt;
 import org.apache.trevni.ColumnFileMetaData;&lt;br/&gt;
 import org.apache.trevni.avro.AvroColumnWriter;&lt;br/&gt;
-import org.apache.trevni.avro.RandomData;&lt;br/&gt;
 &lt;br/&gt;
 /** Tool to create randomly populated Trevni file based on an Avro schema */&lt;br/&gt;
 public class TrevniCreateRandomTool implements Tool {&lt;br/&gt;
@@ -52,7 +52,7 @@ public int run(InputStream stdin, PrintStream out, PrintStream err,&lt;br/&gt;
     int count = Integer.parseInt(args.get(1));&lt;br/&gt;
     File outputFile = new File(args.get(2));&lt;br/&gt;
 &lt;br/&gt;
-    Schema schema = Schema.parse(schemaFile);&lt;br/&gt;
+    Schema schema = new Schema.Parser().parse(schemaFile);&lt;br/&gt;
 &lt;br/&gt;
     AvroColumnWriter&amp;lt;Object&amp;gt; writer =&lt;br/&gt;
       new AvroColumnWriter&amp;lt;&amp;gt;(schema, new ColumnFileMetaData());&lt;br/&gt;
diff --git a/lang/java/tools/src/test/java/org/apache/avro/tool/TestCreateRandomFileTool.java b/lang/java/tools/src/test/java/org/apache/avro/tool/TestCreateRandomFileTool.java&lt;br/&gt;
index 62d6e9af0..69855c657 100644&lt;br/&gt;
&amp;#8212; a/lang/java/tools/src/test/java/org/apache/avro/tool/TestCreateRandomFileTool.java&lt;br/&gt;
+++ b/lang/java/tools/src/test/java/org/apache/avro/tool/TestCreateRandomFileTool.java&lt;br/&gt;
@@ -30,7 +30,7 @@&lt;br/&gt;
 import org.apache.avro.file.DataFileReader;&lt;br/&gt;
 import org.apache.avro.file.DataFileStream;&lt;br/&gt;
 import org.apache.avro.generic.GenericDatumReader;&lt;br/&gt;
-import org.apache.trevni.avro.RandomData;&lt;br/&gt;
+import org.apache.avro.util.RandomData;&lt;br/&gt;
 import org.apache.trevni.TestUtil;&lt;br/&gt;
 &lt;br/&gt;
 import org.junit.After;&lt;br/&gt;
@@ -48,6 +48,8 @@&lt;br/&gt;
 &lt;br/&gt;
   private final Schema.Parser schemaParser = new Schema.Parser();&lt;br/&gt;
 &lt;br/&gt;
+  private static final long SEED = System.currentTimeMillis();&lt;br/&gt;
+&lt;br/&gt;
   private ByteArrayOutputStream out;&lt;br/&gt;
   private ByteArrayOutputStream err;&lt;br/&gt;
 &lt;br/&gt;
@@ -83,17 +85,18 @@ private void check(String... extraArgs) throws Exception {&lt;br/&gt;
     args.addAll(Arrays.asList(new String[] {
         OUT_FILE.toString(),
         &quot;--count&quot;, COUNT,
-        &quot;--schema-file&quot;, SCHEMA_FILE.toString()
+        &quot;--schema-file&quot;, SCHEMA_FILE.toString(),
+        &quot;--seed&quot;, Long.toString(SEED)
         }));&lt;br/&gt;
     args.addAll(Arrays.asList(extraArgs));&lt;br/&gt;
     run(args);&lt;br/&gt;
 &lt;br/&gt;
     DataFileReader&amp;lt;Object&amp;gt; reader =&lt;br/&gt;
-      new DataFileReader(OUT_FILE, new GenericDatumReader&amp;lt;&amp;gt;());&lt;br/&gt;
+      new DataFileReader&amp;lt;Object&amp;gt;(OUT_FILE, new GenericDatumReader&amp;lt;&amp;gt;());&lt;br/&gt;
 &lt;br/&gt;
     Iterator&amp;lt;Object&amp;gt; found = reader.iterator();&lt;br/&gt;
     for (Object expected :&lt;br/&gt;
-           new RandomData(schemaParser.parse(SCHEMA_FILE), Integer.parseInt(COUNT)))&lt;br/&gt;
+           new RandomData(schemaParser.parse(SCHEMA_FILE), Integer.parseInt(COUNT), SEED))&lt;br/&gt;
       assertEquals(expected, found.next());&lt;br/&gt;
 &lt;br/&gt;
     reader.close();&lt;br/&gt;
@@ -103,7 +106,8 @@ private void checkMissingCount(String... extraArgs) throws Exception {&lt;br/&gt;
     ArrayList&amp;lt;String&amp;gt; args = new ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;
     args.addAll(Arrays.asList(new String[] {
             OUT_FILE.toString(),
-            &quot;--schema-file&quot;, SCHEMA_FILE.toString()
+            &quot;--schema-file&quot;, SCHEMA_FILE.toString(),
+            &quot;--seed&quot;, Long.toString(SEED)
     }));&lt;br/&gt;
     args.addAll(Arrays.asList(extraArgs));&lt;br/&gt;
     run(args);&lt;br/&gt;
@@ -129,17 +133,18 @@ public void testMissingCountParameter() throws Exception {&lt;br/&gt;
   public void testStdOut() throws Exception {&lt;br/&gt;
     TestUtil.resetRandomSeed();&lt;br/&gt;
     run(Arrays.asList(new String[]&lt;br/&gt;
-            { &quot;-&quot;, &quot;--count&quot;, COUNT, &quot;--schema-file&quot;, SCHEMA_FILE.toString() }));&lt;br/&gt;
+            { &quot;-&quot;, &quot;--count&quot;, COUNT, &quot;--schema-file&quot;, SCHEMA_FILE.toString(),
+              &quot;--seed&quot;, Long.toString(SEED) }));&lt;br/&gt;
 &lt;br/&gt;
     byte[] file = out.toByteArray();&lt;br/&gt;
 &lt;br/&gt;
     DataFileStream&amp;lt;Object&amp;gt; reader =&lt;br/&gt;
-        new DataFileStream(new ByteArrayInputStream(file),&lt;br/&gt;
+        new DataFileStream&amp;lt;Object&amp;gt;(new ByteArrayInputStream(file),&lt;br/&gt;
                            new GenericDatumReader&amp;lt;&amp;gt;());&lt;br/&gt;
 &lt;br/&gt;
     Iterator&amp;lt;Object&amp;gt; found = reader.iterator();&lt;br/&gt;
     for (Object expected :&lt;br/&gt;
-           new RandomData(schemaParser.parse(SCHEMA_FILE), Integer.parseInt(COUNT)))&lt;br/&gt;
+           new RandomData(schemaParser.parse(SCHEMA_FILE), Integer.parseInt(COUNT), SEED))&lt;br/&gt;
       assertEquals(expected, found.next());&lt;br/&gt;
 &lt;br/&gt;
     reader.close();&lt;br/&gt;
diff --git a/lang/java/tools/src/test/java/org/apache/avro/tool/TestToTrevniTool.java b/lang/java/tools/src/test/java/org/apache/avro/tool/TestToTrevniTool.java&lt;br/&gt;
index 980885f12..7c222c4e3 100644&lt;br/&gt;
&amp;#8212; a/lang/java/tools/src/test/java/org/apache/avro/tool/TestToTrevniTool.java&lt;br/&gt;
+++ b/lang/java/tools/src/test/java/org/apache/avro/tool/TestToTrevniTool.java&lt;br/&gt;
@@ -26,13 +26,14 @@&lt;br/&gt;
 import org.apache.avro.Schema;&lt;br/&gt;
 import org.apache.avro.file.DataFileWriter;&lt;br/&gt;
 import org.apache.avro.generic.GenericDatumWriter;&lt;br/&gt;
+import org.apache.avro.util.RandomData;&lt;br/&gt;
 import org.apache.trevni.avro.AvroColumnReader;&lt;br/&gt;
-import org.apache.trevni.avro.RandomData;&lt;br/&gt;
-&lt;br/&gt;
 import org.junit.Test;&lt;br/&gt;
 import static org.junit.Assert.assertEquals;&lt;br/&gt;
 &lt;br/&gt;
 public class TestToTrevniTool {&lt;br/&gt;
+  private static final long SEED = System.currentTimeMillis();&lt;br/&gt;
+&lt;br/&gt;
   private static final int COUNT =&lt;br/&gt;
     Integer.parseInt(System.getProperty(&quot;test.count&quot;, &quot;200&quot;));&lt;br/&gt;
   private static final File DIR = new File(&quot;/tmp&quot;);&lt;br/&gt;
@@ -50,12 +51,12 @@ private String run(String... args) throws Exception {&lt;br/&gt;
 &lt;br/&gt;
   @Test&lt;br/&gt;
   public void test() throws Exception {&lt;br/&gt;
-    Schema schema = Schema.parse(SCHEMA_FILE);&lt;br/&gt;
+    Schema schema = new Schema.Parser().parse(SCHEMA_FILE);&lt;br/&gt;
 &lt;br/&gt;
     DataFileWriter&amp;lt;Object&amp;gt; writer =&lt;br/&gt;
       new DataFileWriter&amp;lt;&amp;gt;(new GenericDatumWriter&amp;lt;&amp;gt;());&lt;br/&gt;
     writer.create(schema, Util.createFromFS(AVRO_FILE.toString()));&lt;br/&gt;
-    for (Object datum : new RandomData(schema, COUNT))&lt;br/&gt;
+    for (Object datum : new RandomData(schema, COUNT, SEED))&lt;br/&gt;
       writer.append(datum);&lt;br/&gt;
     writer.close();&lt;br/&gt;
 &lt;br/&gt;
@@ -64,7 +65,7 @@ public void test() throws Exception {
     AvroColumnReader&amp;lt;Object&amp;gt; reader =
       new AvroColumnReader&amp;lt;&amp;gt;(new AvroColumnReader.Params(TREVNI_FILE));
     Iterator&amp;lt;Object&amp;gt; found = reader.iterator();
-    for (Object expected : new RandomData(schema, COUNT))
+    for (Object expected : new RandomData(schema, COUNT, SEED))
       assertEquals(expected, found.next());
     reader.close();
   }&lt;br/&gt;
diff --git a/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/RandomData.java b/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/RandomData.java&lt;br/&gt;
deleted file mode 100644&lt;br/&gt;
index 2426d89eb..000000000&lt;br/&gt;
&amp;#8212; a/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/RandomData.java&lt;br/&gt;
+++ /dev/null&lt;br/&gt;
@@ -1,128 +0,0 @@&lt;br/&gt;
-/*&lt;br/&gt;
- * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
- * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
- * distributed with this work for additional information&lt;br/&gt;
- * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
- * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
- * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
- * with the License.  You may obtain a copy of the License at&lt;br/&gt;
- *&lt;br/&gt;
- *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
- *&lt;br/&gt;
- * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
- * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
- * See the License for the specific language governing permissions and&lt;br/&gt;
- * limitations under the License.&lt;br/&gt;
- */&lt;br/&gt;
-package org.apache.trevni.avro;&lt;br/&gt;
-&lt;br/&gt;
-import java.io.File;&lt;br/&gt;
-import java.util.HashMap;&lt;br/&gt;
-import java.util.Iterator;&lt;br/&gt;
-import java.util.List;&lt;br/&gt;
-import java.util.Map;&lt;br/&gt;
-import java.util.Random;&lt;br/&gt;
-&lt;br/&gt;
-import org.apache.avro.Schema;&lt;br/&gt;
-import org.apache.avro.file.DataFileWriter;&lt;br/&gt;
-import org.apache.avro.generic.GenericArray;&lt;br/&gt;
-import org.apache.avro.generic.GenericData;&lt;br/&gt;
-import org.apache.avro.generic.GenericDatumWriter;&lt;br/&gt;
-import org.apache.avro.generic.GenericRecord;&lt;br/&gt;
-&lt;br/&gt;
-import org.apache.trevni.TestUtil;&lt;br/&gt;
-&lt;br/&gt;
-/** Generates schema data as Java objects with random values. */&lt;br/&gt;
-public class RandomData implements Iterable&amp;lt;Object&amp;gt; {&lt;br/&gt;
-  public static final String USE_DEFAULT = &quot;use-default&quot;;&lt;br/&gt;
-&lt;br/&gt;
-  private final Schema root;&lt;br/&gt;
-  private final int count;&lt;br/&gt;
-&lt;br/&gt;
-  public RandomData(Schema schema, int count) {
-    this.root = schema;
-    this.count = count;
-  }&lt;br/&gt;
-&lt;br/&gt;
-  public Iterator&amp;lt;Object&amp;gt; iterator() {&lt;br/&gt;
-    return new Iterator&amp;lt;Object&amp;gt;() {&lt;br/&gt;
-      private int n;&lt;br/&gt;
-      private Random random = TestUtil.createRandom();&lt;br/&gt;
-      public boolean hasNext() { return n &amp;lt; count; }&lt;/li&gt;
	&lt;li&gt;public Object next() 
{
-        n++;
-        return generate(root, random, 0);
-      }&lt;/li&gt;
	&lt;li&gt;public void remove() 
{ throw new UnsupportedOperationException(); }&lt;/li&gt;
	&lt;li&gt;};&lt;/li&gt;
	&lt;li&gt;}&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;@SuppressWarnings(value=&quot;unchecked&quot;)&lt;/li&gt;
	&lt;li&gt;private static Object generate(Schema schema, Random random, int d) {&lt;/li&gt;
	&lt;li&gt;switch (schema.getType()) {&lt;/li&gt;
	&lt;li&gt;case RECORD:&lt;/li&gt;
	&lt;li&gt;GenericRecord record = new GenericData.Record(schema);&lt;/li&gt;
	&lt;li&gt;for (Schema.Field field : schema.getFields()) 
{
-        Object value = (field.getObjectProp(USE_DEFAULT) == null)
-          ? generate(field.schema(), random, d+1)
-          : GenericData.get().getDefaultValue(field);
-        record.put(field.name(), value);
-      }&lt;/li&gt;
	&lt;li&gt;return record;&lt;/li&gt;
	&lt;li&gt;case ENUM:&lt;/li&gt;
	&lt;li&gt;List&amp;lt;String&amp;gt; symbols = schema.getEnumSymbols();&lt;/li&gt;
	&lt;li&gt;return new GenericData.EnumSymbol&lt;/li&gt;
	&lt;li&gt;(schema, symbols.get(random.nextInt(symbols.size())));&lt;/li&gt;
	&lt;li&gt;case ARRAY:&lt;/li&gt;
	&lt;li&gt;int length = (random.nextInt(5)+2)-d;&lt;/li&gt;
	&lt;li&gt;GenericArray&amp;lt;Object&amp;gt; array =&lt;/li&gt;
	&lt;li&gt;new GenericData.Array(length&amp;lt;=0?0:length, schema);&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt; length; i++)&lt;/li&gt;
	&lt;li&gt;array.add(generate(schema.getElementType(), random, d+1));&lt;/li&gt;
	&lt;li&gt;return array;&lt;/li&gt;
	&lt;li&gt;case MAP:&lt;/li&gt;
	&lt;li&gt;length = (random.nextInt(5)+2)-d;&lt;/li&gt;
	&lt;li&gt;Map&amp;lt;Object,Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;(length &amp;lt;= 0 ? 0 : length);&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt; length; i++) 
{
-        map.put(TestUtil.randomString(random),
-                generate(schema.getValueType(), random, d+1));
-      }&lt;/li&gt;
	&lt;li&gt;return map;&lt;/li&gt;
	&lt;li&gt;case UNION:&lt;/li&gt;
	&lt;li&gt;List&amp;lt;Schema&amp;gt; types = schema.getTypes();&lt;/li&gt;
	&lt;li&gt;return generate(types.get(random.nextInt(types.size())), random, d);&lt;/li&gt;
	&lt;li&gt;case FIXED:&lt;/li&gt;
	&lt;li&gt;byte[] bytes = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;schema.getFixedSize()&amp;#93;&lt;/span&gt;;&lt;/li&gt;
	&lt;li&gt;random.nextBytes(bytes);&lt;/li&gt;
	&lt;li&gt;return new GenericData.Fixed(schema, bytes);&lt;/li&gt;
	&lt;li&gt;case STRING:  return TestUtil.randomString(random);&lt;/li&gt;
	&lt;li&gt;case BYTES:   return TestUtil.randomBytes(random);&lt;/li&gt;
	&lt;li&gt;case INT:     return random.nextInt();&lt;/li&gt;
	&lt;li&gt;case LONG:    return random.nextLong();&lt;/li&gt;
	&lt;li&gt;case FLOAT:   return random.nextFloat();&lt;/li&gt;
	&lt;li&gt;case DOUBLE:  return random.nextDouble();&lt;/li&gt;
	&lt;li&gt;case BOOLEAN: return random.nextBoolean();&lt;/li&gt;
	&lt;li&gt;case NULL:    return null;&lt;/li&gt;
	&lt;li&gt;default: throw new RuntimeException(&quot;Unknown type: &quot;+schema);&lt;/li&gt;
	&lt;li&gt;}&lt;/li&gt;
	&lt;li&gt;}&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;public static void main(String[] args) throws Exception {&lt;/li&gt;
	&lt;li&gt;if(args.length != 3) 
{
-      System.out.println(&quot;Usage: RandomData &amp;lt;schemafile&amp;gt; &amp;lt;outputfile&amp;gt; &amp;lt;count&amp;gt;&quot;);
-      System.exit(-1);
-    }&lt;/li&gt;
	&lt;li&gt;Schema sch = Schema.parse(new File(args&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;));&lt;/li&gt;
	&lt;li&gt;DataFileWriter&amp;lt;Object&amp;gt; writer =&lt;/li&gt;
	&lt;li&gt;new DataFileWriter&amp;lt;&amp;gt;(new GenericDatumWriter&amp;lt;&amp;gt;())&lt;/li&gt;
	&lt;li&gt;.create(sch, new File(args&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;));&lt;/li&gt;
	&lt;li&gt;try {&lt;/li&gt;
	&lt;li&gt;for (Object datum : new RandomData(sch, Integer.parseInt(args&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;))) 
{
-        writer.append(datum);
-      }&lt;/li&gt;
	&lt;li&gt;} finally 
{
-      writer.close();
-    }&lt;/li&gt;
	&lt;li&gt;}&lt;br/&gt;
-}&lt;br/&gt;
diff --git a/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/TestShredder.java b/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/TestShredder.java&lt;br/&gt;
index 39d138e6f..62d58ac70 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/TestShredder.java&lt;br/&gt;
+++ b/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/TestShredder.java&lt;br/&gt;
@@ -24,13 +24,13 @@&lt;br/&gt;
 import org.apache.trevni.ValueType;&lt;br/&gt;
 import org.apache.trevni.ColumnMetaData;&lt;br/&gt;
 import org.apache.trevni.ColumnFileMetaData;&lt;br/&gt;
-&lt;br/&gt;
 import org.apache.avro.Schema;&lt;br/&gt;
-&lt;br/&gt;
+import org.apache.avro.util.RandomData;&lt;br/&gt;
 import org.junit.Test;&lt;br/&gt;
 import static org.junit.Assert.*;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; public class TestShredder {&lt;br/&gt;
+  private static final long SEED = System.currentTimeMillis();&lt;/p&gt;

&lt;p&gt;   private static final int COUNT = 100;&lt;br/&gt;
   private static final File FILE = new File(&quot;target&quot;, &quot;test.trv&quot;);&lt;br/&gt;
@@ -257,7 +257,7 @@ private void checkWrite(Schema schema) throws IOException {&lt;br/&gt;
     AvroColumnWriter&amp;lt;Object&amp;gt; writer =&lt;br/&gt;
       new AvroColumnWriter&amp;lt;&amp;gt;(schema, new ColumnFileMetaData());&lt;br/&gt;
     int count = 0;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;for (Object datum : new RandomData(schema, COUNT)) {&lt;br/&gt;
+    for (Object datum : new RandomData(schema, COUNT, SEED)) 
{
       //System.out.println(&quot;datum=&quot;+datum);
       writer.write(datum);
     }
&lt;p&gt;@@ -268,7 +268,7 @@ private void checkRead(Schema schema) throws IOException &lt;/p&gt;
{
     AvroColumnReader&amp;lt;Object&amp;gt; reader =
       new AvroColumnReader&amp;lt;&amp;gt;(new AvroColumnReader.Params(FILE)
                                    .setSchema(schema));
-    for (Object expected : new RandomData(schema, COUNT))
+    for (Object expected : new RandomData(schema, COUNT, SEED))
       assertEquals(expected, reader.next());
     reader.close();
   }&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16692922" author="jira-bot" created="Tue, 20 Nov 2018 09:27:41 +0000"  >&lt;p&gt;Commit eb06f71861025c9261b5ad7a09cab0c46f2ac311 in avro&apos;s branch refs/heads/master from Thiruvalluvan M G&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=eb06f71&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=eb06f71&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2267&quot; title=&quot;Duplicate code RandomData.java and its dependency problem&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2267&quot;&gt;&lt;del&gt;AVRO-2267&lt;/del&gt;&lt;/a&gt; Removed copies of RandomData (#385)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2267&quot; title=&quot;Duplicate code RandomData.java and its dependency problem&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2267&quot;&gt;&lt;del&gt;AVRO-2267&lt;/del&gt;&lt;/a&gt; Removed copies of RandomData&lt;/p&gt;</comment>
                            <comment id="16692923" author="jira-bot" created="Tue, 20 Nov 2018 09:27:42 +0000"  >&lt;p&gt;Commit eb06f71861025c9261b5ad7a09cab0c46f2ac311 in avro&apos;s branch refs/heads/master from Thiruvalluvan M G&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=eb06f71&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=eb06f71&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2267&quot; title=&quot;Duplicate code RandomData.java and its dependency problem&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2267&quot;&gt;&lt;del&gt;AVRO-2267&lt;/del&gt;&lt;/a&gt; Removed copies of RandomData (#385)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2267&quot; title=&quot;Duplicate code RandomData.java and its dependency problem&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2267&quot;&gt;&lt;del&gt;AVRO-2267&lt;/del&gt;&lt;/a&gt; Removed copies of RandomData&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 20 Nov 2018 09:27:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|s00jkg:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2268] Perf.java SpecificRecord input data not working</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2268</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;In &lt;tt&gt;FooBarSpecificRecordTest.genSingleRecord&lt;/tt&gt;, the &lt;tt&gt;nicknames&lt;/tt&gt; field is given an instance of what is returned by &lt;tt&gt;ArrayList.asList&lt;/tt&gt;, which does &lt;em&gt;not&lt;/em&gt; support the &lt;tt&gt;clear&lt;/tt&gt; method.  When reusing objects during a read, the &lt;tt&gt;clear&lt;/tt&gt; method is used to clear the contents of array-valued fields during reading, which causes an &lt;tt&gt;OperationNotSupported&lt;/tt&gt; exception.  So &lt;tt&gt;genSingleRecord&lt;/tt&gt; needs to change to set &lt;tt&gt;nicknames&lt;/tt&gt; to a type that implements &lt;tt&gt;clear&lt;/tt&gt;.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13198769">AVRO-2268</key>
            <summary>Perf.java SpecificRecord input data not working</summary>
                <type id="6" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/requirement.png">Test</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="raymie">Raymie Stata</assignee>
                                    <reporter username="raymie">Raymie Stata</reporter>
                        <labels>
                    </labels>
                <created>Thu, 15 Nov 2018 22:43:11 +0000</created>
                <updated>Sat, 17 Nov 2018 12:53:11 +0000</updated>
                            <resolved>Sat, 17 Nov 2018 12:53:11 +0000</resolved>
                                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="16689152" author="githubbot" created="Fri, 16 Nov 2018 08:20:08 +0000"  >&lt;p&gt;rstata opened a new pull request #382: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2268&quot; title=&quot;Perf.java SpecificRecord input data not working&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2268&quot;&gt;&lt;del&gt;AVRO-2268&lt;/del&gt;&lt;/a&gt; Fix FooBarSpecificRecord case&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/382&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/382&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Array fields for specific records should be given `List&amp;lt;&amp;gt;` implementations that support the `List.clear` operation.  The class returned by `Arrays.asList` does not support `clear`, so use an `ArrayList` instead.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16689155" author="raymie" created="Fri, 16 Nov 2018 08:22:06 +0000"  >&lt;p&gt;My patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt; assumes this fix is in place.&#160; I wanted to submit this patch separately because the issue is independent of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt; and the problem should be fixed whether or not &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt; is accepted.&lt;/p&gt;</comment>
                            <comment id="16689170" author="githubbot" created="Fri, 16 Nov 2018 08:50:21 +0000"  >&lt;p&gt;thiru-apache closed pull request #382: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2268&quot; title=&quot;Perf.java SpecificRecord input data not working&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2268&quot;&gt;&lt;del&gt;AVRO-2268&lt;/del&gt;&lt;/a&gt; Fix FooBarSpecificRecord case&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/382&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/382&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java b/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
index 8f525b4cd..860669468 100644&lt;br/&gt;
&amp;#8212; a/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
+++ b/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
@@ -1484,9 +1484,10 @@ protected FooBarSpecificRecord genSingleRecord(Random r) {&lt;br/&gt;
       }&lt;/p&gt;

&lt;p&gt;       try {&lt;br/&gt;
+        String[] nicknames = &lt;/p&gt;
{ randomString(r), randomString(r) }
&lt;p&gt;;&lt;br/&gt;
         return FooBarSpecificRecord.newBuilder().setId(r.nextInt())&lt;br/&gt;
             .setName(randomString(r))&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;.setNicknames(Arrays.asList(randomString(r), randomString(r)))&lt;br/&gt;
+            .setNicknames(new ArrayList&amp;lt;String&amp;gt;(Arrays.asList(nicknames)))&lt;br/&gt;
             .setTypeEnum(typeEnums&lt;span class=&quot;error&quot;&gt;&amp;#91;r.nextInt(typeEnums.length)&amp;#93;&lt;/span&gt;)&lt;br/&gt;
             .setRelatedids(relatedIds).build();&lt;br/&gt;
       } catch (Exception e) {&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16689171" author="jira-bot" created="Fri, 16 Nov 2018 08:50:25 +0000"  >&lt;p&gt;Commit 89f3503af2acc7a6ef52bde01d4961a7f49899a8 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=raymie&quot; class=&quot;user-hover&quot; rel=&quot;raymie&quot;&gt;Raymie Stata&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=89f3503&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=89f3503&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2268&quot; title=&quot;Perf.java SpecificRecord input data not working&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2268&quot;&gt;&lt;del&gt;AVRO-2268&lt;/del&gt;&lt;/a&gt; Support List.clear operation for FooBarSpecificRecord.nicknames field (#382)&lt;/p&gt;
</comment>
                            <comment id="16689204" author="githubbot" created="Fri, 16 Nov 2018 09:35:08 +0000"  >&lt;p&gt;rstata opened a new pull request #383: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2268&quot; title=&quot;Perf.java SpecificRecord input data not working&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2268&quot;&gt;&lt;del&gt;AVRO-2268&lt;/del&gt;&lt;/a&gt; A few changes to lower the runtime variance of Perf.java tests&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/383&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/383&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   The changes herein help reduce the number of &quot;high-variance&quot; tests (ie, test-cases that vary more than 5% from run to run) from almost 50% of the test cases to around 10%.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16689212" author="githubbot" created="Fri, 16 Nov 2018 09:43:52 +0000"  >&lt;p&gt;rstata commented on issue #383: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2268&quot; title=&quot;Perf.java SpecificRecord input data not working&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2268&quot;&gt;&lt;del&gt;AVRO-2268&lt;/del&gt;&lt;/a&gt; A few changes to lower the runtime variance of Perf.java tests&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/383#issuecomment-439338077&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/383#issuecomment-439338077&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   The commit log of this pull-request had a typo, causing it to go to the wrong JIRA.  Will close, fix, and open a new pull request.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16689213" author="githubbot" created="Fri, 16 Nov 2018 09:43:53 +0000"  >&lt;p&gt;rstata closed pull request #383: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2268&quot; title=&quot;Perf.java SpecificRecord input data not working&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2268&quot;&gt;&lt;del&gt;AVRO-2268&lt;/del&gt;&lt;/a&gt; A few changes to lower the runtime variance of Perf.java tests&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/383&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/383&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java b/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
index 860669468..9df56bb84 100644&lt;br/&gt;
&amp;#8212; a/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
+++ b/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
@@ -141,13 +141,14 @@ void add(List&amp;lt;TestDescriptor&amp;gt; typeList) {&lt;br/&gt;
   private static final int BYTES_PS_FIELD = 2;&lt;br/&gt;
   private static final int ENTRIES_PS_FIELD = 3;&lt;br/&gt;
   private static final int BYTES_PC_FIELD = 4;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private static final int MAX_FIELD = 4;&lt;br/&gt;
+  private static final int MIN_TIME_FIELD = 5;&lt;br/&gt;
+  private static final int MAX_FIELD_TAG = 5;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   private static void usage() {&lt;br/&gt;
     StringBuilder usage = new StringBuilder(&quot;Usage: Perf &lt;span class=&quot;error&quot;&gt;&amp;#91;-o &amp;lt;file&amp;gt;&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;-c &amp;lt;spec&amp;gt;&amp;#93;&lt;/span&gt; { -nowrite | -noread | &quot;);&lt;br/&gt;
     StringBuilder details = new StringBuilder();&lt;br/&gt;
     details.append(&quot; -o file   (send output to a file)\n&quot;);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;details.append(&quot; -c &lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;t&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;e&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;b&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;c&amp;#93;&lt;/span&gt; (format as no-header CSV; include Name, Time, Entries/sec, Bytes/sec, and/or bytes/Cycle; no spec=all fields)\n&quot;);&lt;br/&gt;
+    details.append(&quot; -c &lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;t&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;e&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;b&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;c&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;m&amp;#93;&lt;/span&gt; (format as no-header CSV; include Name, Time, Entries/sec, Bytes/sec, bytes/Cycle, and/or min time/op; no spec=all fields)\n&quot;);&lt;br/&gt;
     details.append(&quot; -nowrite   (do not execute write tests)\n&quot;);&lt;br/&gt;
     details.append(&quot; -noread   (do not execute write tests)\n&quot;);&lt;br/&gt;
     for (Map.Entry&amp;lt;String, List&amp;lt;TestDescriptor&amp;gt;&amp;gt; entry : BATCHES.entrySet()) {&lt;br/&gt;
@@ -179,6 +180,7 @@ public static void main(String[] args) throws Exception {&lt;br/&gt;
     String outputfilename = null;&lt;br/&gt;
     PrintStream out = System.out;&lt;br/&gt;
     boolean[] csvFormat = null;&lt;br/&gt;
+    String csvFormatString = null;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     for (int i = 0; i &amp;lt; args.length; i++) {&lt;br/&gt;
       String a = args&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;;&lt;br/&gt;
@@ -200,17 +202,20 @@ public static void main(String[] args) throws Exception &lt;/p&gt;
{
         continue;
       }
&lt;p&gt;       if (&quot;-c&quot;.equals(a)) {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if (i == args.length-1 || args&lt;span class=&quot;error&quot;&gt;&amp;#91;i+1&amp;#93;&lt;/span&gt;.startsWith(&quot;-&quot;))&lt;/li&gt;
	&lt;li&gt;csvFormat = new boolean[] 
{ true, true, true, true, true }
&lt;p&gt;;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;else {&lt;/li&gt;
	&lt;li&gt;csvFormat = new boolean&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt;;&lt;/li&gt;
	&lt;li&gt;for (char c : args&lt;span class=&quot;error&quot;&gt;&amp;#91;++i&amp;#93;&lt;/span&gt;.toCharArray())&lt;br/&gt;
+        if (i == args.length-1 || args&lt;span class=&quot;error&quot;&gt;&amp;#91;i+1&amp;#93;&lt;/span&gt;.startsWith(&quot;-&quot;)) 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+          csvFormatString = &amp;quot;ntebcm&amp;quot;; // For diagnostics+          csvFormat = new boolean[] { true, true, true, true, true, true };+        }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt; else {&lt;br/&gt;
+          csvFormatString = args&lt;span class=&quot;error&quot;&gt;&amp;#91;++i&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+          csvFormat = new boolean&lt;span class=&quot;error&quot;&gt;&amp;#91;MAX_FIELD_TAG+1&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+          for (char c : csvFormatString.toCharArray())&lt;br/&gt;
             switch (c) {&lt;br/&gt;
             case &apos;n&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;NAME_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             case &apos;t&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;TIME_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             case &apos;e&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;BYTES_PS_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             case &apos;b&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;ENTRIES_PS_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             case &apos;c&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;BYTES_PC_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
+            case &apos;m&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;MIN_TIME_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             default:&lt;br/&gt;
               usage();&lt;br/&gt;
               System.exit(1);&lt;br/&gt;
@@ -237,9 +242,12 @@ public static void main(String[] args) throws Exception {&lt;br/&gt;
       }&lt;br/&gt;
     }&lt;br/&gt;
     System.out.println(&quot;Executing tests: \n&quot; + tests +  &quot;\n readTests:&quot; +&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;readTests + &quot;\n writeTests:&quot; + writeTests + &quot;\n cycles=&quot; + CYCLES);&lt;br/&gt;
+        readTests + &quot;\n writeTests:&quot; + writeTests + &quot;\n cycles=&quot; + CYCLES +&lt;br/&gt;
+        &quot;\n count=&quot; + (COUNT / 1000) + &quot;K&quot;);&lt;br/&gt;
     if (out != System.out) System.out.println(&quot; Writing to: &quot; + outputfilename);&lt;/li&gt;
	&lt;li&gt;if (csvFormat != null) System.out.println(&quot; in CSV format.&quot;);&lt;br/&gt;
+    if (csvFormat != null) System.out.println(&quot; CSV format: &quot; + csvFormatString);&lt;br/&gt;
+&lt;br/&gt;
+    TestResult tr = new TestResult();&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     for (int k = 0; k &amp;lt; tests.size(); k++) {&lt;br/&gt;
       Test t = tests.get(k);&lt;br/&gt;
@@ -275,28 +283,41 @@ public static void main(String[] args) throws Exception &lt;/p&gt;
{
           t.writeTest();
         }
&lt;p&gt;       }&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;t.reset();&lt;br/&gt;
+&lt;br/&gt;
       // test&lt;/li&gt;
	&lt;li&gt;long s = 0;&lt;br/&gt;
       System.gc();&lt;/li&gt;
	&lt;li&gt;t.init();&lt;br/&gt;
       if (t.isReadTest() &amp;amp;&amp;amp; readTests) {&lt;br/&gt;
+        tr.reset();&lt;br/&gt;
         for (int i = 0; i &amp;lt; t.cycles; i++) 
{
-          s += t.readTest();
+          tr.update(t.readTest());
         }&lt;/li&gt;
	&lt;li&gt;printResult(out, csvFormat, s, t, t.name + &quot;Read&quot;);&lt;br/&gt;
+        printResult(out, csvFormat, tr, t, t.name + &quot;Read&quot;);&lt;br/&gt;
       }&lt;/li&gt;
	&lt;li&gt;s = 0;&lt;br/&gt;
       if (t.isWriteTest() &amp;amp;&amp;amp; writeTests) {&lt;br/&gt;
+        tr.reset();&lt;br/&gt;
         for (int i = 0; i &amp;lt; t.cycles; i++) 
{
-          s += t.writeTest();
+          tr.update(t.writeTest());
         }&lt;/li&gt;
	&lt;li&gt;printResult(out, csvFormat, s, t, t.name + &quot;Write&quot;);&lt;br/&gt;
+        printResult(out, csvFormat, tr, t, t.name + &quot;Write&quot;);&lt;br/&gt;
       }&lt;br/&gt;
       t.reset();&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  private static class TestResult {&lt;br/&gt;
+    public long totalTime;&lt;br/&gt;
+    public long minTime;&lt;br/&gt;
+    public void reset() &lt;/p&gt;
{
+      totalTime = 0L;
+      minTime = Long.MAX_VALUE;
+    }
&lt;p&gt;+    public long update(long t) &lt;/p&gt;
{
+      totalTime += t;
+      minTime = Math.min(t, minTime);
+      return t;
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
   private static final void printHeader() {&lt;br/&gt;
     String header = String.format(&lt;br/&gt;
         &quot;%60s     time    M entries/sec   M bytes/sec  bytes/cycle&quot;,&lt;br/&gt;
@@ -305,23 +326,25 @@ private static final void printHeader() {&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   private static final void printResult(PrintStream o, boolean[] csv,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;long s, Test t, String name)&lt;br/&gt;
+                                        TestResult tr, Test t, String name)&lt;br/&gt;
   {&lt;/li&gt;
	&lt;li&gt;s /= 1000;&lt;br/&gt;
+    long s = tr.totalTime / 1000;&lt;br/&gt;
     double entries = (t.cycles * (double) t.count);&lt;br/&gt;
     double bytes = t.cycles * (double) t.encodedSize;&lt;br/&gt;
     StringBuilder result = new StringBuilder();&lt;br/&gt;
     if (csv != null) {&lt;br/&gt;
       boolean commaneeded = false;&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt;= MAX_FIELD; i++) {&lt;br/&gt;
+      for (int i = 0; i &amp;lt;= MAX_FIELD_TAG; i++) 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+        if (! csv[i]) continue;         if (commaneeded) result.append(&amp;quot;,&amp;quot;);         else commaneeded = true;         switch (i) {
         case NAME_FIELD: result.append(name); break;
         case TIME_FIELD: result.append(String.format(&quot;%d&quot;, (s/1000))); break;
         case BYTES_PS_FIELD: result.append(String.format(&quot;%.3f&quot;, (entries / s))); break;
-        case ENTRIES_PS_FIELD: result.append(String.format(&quot;.3%f&quot;, (bytes / s))); break;
+        case ENTRIES_PS_FIELD: result.append(String.format(&quot;%.3f&quot;, (bytes / s))); break;
         case BYTES_PC_FIELD: result.append(String.format(&quot;%d&quot;, t.encodedSize)); break;
+        case MIN_TIME_FIELD: result.append(String.format(&quot;%d&quot;, tr.minTime)); break;
         }       }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;     } else {&lt;br/&gt;
@@ -400,16 +423,16 @@ public String toString() {&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     @Override&lt;br/&gt;
     public final long readTest() throws IOException &lt;/p&gt;
{
-      long t = System.nanoTime();
       Decoder d = getDecoder();
+      long t = System.nanoTime();
       readInternal(d);
       return (System.nanoTime() - t);
     }

&lt;p&gt;     @Override&lt;br/&gt;
     public final long writeTest() throws IOException {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;long t = System.nanoTime();&lt;br/&gt;
       Encoder e = getEncoder();&lt;br/&gt;
+      long t = System.nanoTime();&lt;br/&gt;
       writeInternal(e);&lt;br/&gt;
       e.flush();&lt;br/&gt;
       return (System.nanoTime() - t);&lt;br/&gt;
@@ -428,8 +451,8 @@ protected Decoder newDecoder() {&lt;br/&gt;
     }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     protected Encoder newEncoder(ByteArrayOutputStream out) throws IOException {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Encoder e = encoder_factory.binaryEncoder(out, null);&lt;br/&gt;
-//    Encoder e = encoder_factory.directBinaryEncoder(out, null);&lt;br/&gt;
+//    Encoder e = encoder_factory.binaryEncoder(out, null);&lt;br/&gt;
+      Encoder e = encoder_factory.directBinaryEncoder(out, null);&lt;br/&gt;
 //    Encoder e = encoder_factory.blockingBinaryEncoder(out, null);&lt;br/&gt;
 //    Encoder e = new LegacyBinaryEncoder(out);&lt;br/&gt;
       return e;&lt;br/&gt;
@@ -1419,18 +1442,13 @@ protected Decoder getDecoder() {&lt;br/&gt;
     protected final SpecificDatumReader&amp;lt;T&amp;gt; reader;&lt;br/&gt;
     protected final SpecificDatumWriter&amp;lt;T&amp;gt; writer;&lt;br/&gt;
     private Object[] sourceData;&lt;br/&gt;
+    private T reuse;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     protected SpecificTest(String name, String writerSchema) throws IOException &lt;/p&gt;
{
       super(name, writerSchema, 48);
       reader = newReader();
       writer = newWriter();
     }
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;protected SpecificDatumReader&amp;lt;T&amp;gt; getReader() 
{
-      return reader;
-    }&lt;/li&gt;
	&lt;li&gt;protected SpecificDatumWriter&amp;lt;T&amp;gt; getWriter() 
{
-      return writer;
-    }
&lt;p&gt;     protected SpecificDatumReader&amp;lt;T&amp;gt; newReader() &lt;/p&gt;
{
       return new SpecificDatumReader&amp;lt;&amp;gt;(schema);
     }
&lt;p&gt;@@ -1444,6 +1462,7 @@ void genSourceData() &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {       for (int i = 0; i &amp;lt; sourceData.length; i++) {
         sourceData[i] = genSingleRecord(r);
       }+      reuse = genSingleRecord(r);     }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     protected abstract T genSingleRecord(Random r);&lt;br/&gt;
@@ -1451,7 +1470,7 @@ void genSourceData() {&lt;br/&gt;
     @Override&lt;br/&gt;
     void readInternal(Decoder d) throws IOException {&lt;br/&gt;
       for (int i = 0; i &amp;lt; count; i++) &lt;/p&gt;
{
-        getReader().read(null, d);
+        reader.read(reuse, d);
       }
&lt;p&gt;     }&lt;br/&gt;
     @Override&lt;br/&gt;
@@ -1459,7 +1478,7 @@ void writeInternal(Encoder e) throws IOException {&lt;br/&gt;
       for (int i = 0; i &amp;lt; sourceData.length; i++) &lt;/p&gt;
{
         @SuppressWarnings(&quot;unchecked&quot;)
         T rec = (T) sourceData[i];
-        getWriter().write(rec, e);
+        writer.write(rec, e);
       }
&lt;p&gt;     }&lt;br/&gt;
     @Override&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16690534" author="thiru_mg" created="Sat, 17 Nov 2018 12:53:11 +0000"  >&lt;p&gt;Merged the PR. Thank you Raymie.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="13198807">AVRO-2269</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 16 Nov 2018 08:20:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|s00k2o:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2269] Improve usability of Perf.java</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2269</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The class &lt;tt&gt;org.apache.avro.ipc.io.Perf&lt;/tt&gt; is Avro&apos;s performance test suite.  This JIRA aims to make it easier to use.  Specifically:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Added a file &lt;tt&gt;performance-testing.html&lt;/tt&gt; with guidance on how to use the suite&lt;/li&gt;
	&lt;li&gt;Added script &lt;tt&gt;run-script.sh&lt;/tt&gt; that uses &lt;tt&gt;Perf&lt;/tt&gt; to run structured experiments.&lt;/li&gt;
	&lt;li&gt;Added tests for performance of resolution of unchanged unions and enumerations, which will be subject to future optimizations.&lt;/li&gt;
	&lt;li&gt;Tweaks to &lt;tt&gt;Perf&lt;/tt&gt; for better experimentation (e.g., support for minimum as well as average aggregation).&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="13198807">AVRO-2269</key>
            <summary>Improve usability of Perf.java</summary>
                <type id="6" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/requirement.png">Test</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="raymie">Raymie Stata</assignee>
                                    <reporter username="raymie">Raymie Stata</reporter>
                        <labels>
                    </labels>
                <created>Fri, 16 Nov 2018 02:22:44 +0000</created>
                <updated>Mon, 26 Nov 2018 18:27:45 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="16688925" author="zolyfarkas" created="Fri, 16 Nov 2018 02:36:03 +0000"  >&lt;p&gt;instead or re-inventing the wheel...Perf.java should be rewritten to use JMH (&lt;a href=&quot;https://java-performance.info/jmh/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://java-performance.info/jmh/&lt;/a&gt;) ..&lt;br/&gt;
see &lt;a href=&quot;https://github.com/zolyfarkas/benchmarks&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/zolyfarkas/benchmarks&lt;/a&gt; for an example example on how to use JMH&lt;br/&gt;
(there is also a benchmark for one of my experiments:&lt;br/&gt;
&lt;a href=&quot;https://github.com/zolyfarkas/benchmarks/blob/master/src/test/java/org/spf4j/avro/GenericRecordBenchmark.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/zolyfarkas/benchmarks/blob/master/src/test/java/org/spf4j/avro/GenericRecordBenchmark.java&lt;/a&gt;)&lt;br/&gt;
the example shows how you can run them with a profiler Java flight recorder, stack sampler, so that you can even have some data to look at and optimize...&lt;/p&gt;</comment>
                            <comment id="16689164" author="raymie" created="Fri, 16 Nov 2018 08:32:59 +0000"  >&lt;p&gt;I took a look at JMH.&#160; I think it&apos;d be great to convert `Perf.java` over to JMH.&#160; I didn&apos;t pursue it because I couldn&apos;t find good enough doc&apos;s on JMH to feel comfortable using it myself.&lt;/p&gt;

&lt;p&gt;The forthcoming patch I have for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt; make changes that are orthogonal to what JMH does.&#160; JMH does things like warm up the JIT and various caches, and so forth, and it runs tests a dynamic number of times in order to &quot;seek&quot; stable statistics on performance metrics.&#160; The current `Perf.main` does some of this already &#8211; I didn&apos;t touch any of that code &#8211; but JMH seems to do a much more professional job of it.&#160; Thus, again, it&apos;d be great to convert `Perf.java` to JMH.&lt;/p&gt;

&lt;p&gt;That said, while JMH might do a pretty good job of finding the &quot;true&quot; running time of a highly-variance piece of code, it doesn&apos;t turn a high-variance piece of code into a low-variance one.&#160; The forthcoming patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt; do the latter &#8211; try to reduce the inherent variance of the tests (for example, by reducing the allocations done for `FooBarSpecificRecord` tests).&#160; JMH together with this forthcoming patch would be a great combination.&lt;/p&gt;

&lt;p&gt;A just submitted a pull request for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2268&quot; title=&quot;Perf.java SpecificRecord input data not working&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2268&quot;&gt;&lt;del&gt;AVRO-2268&lt;/del&gt;&lt;/a&gt; containing a little bug fix that I want to depend upon, but which is pretty independent of the changes I have for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt;.&#160; If someone could pull &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2268&quot; title=&quot;Perf.java SpecificRecord input data not working&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2268&quot;&gt;&lt;del&gt;AVRO-2268&lt;/del&gt;&lt;/a&gt;, I&apos;d like to rebase onto that change before submitting the &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt; patch.&lt;/p&gt;</comment>
                            <comment id="16689215" author="githubbot" created="Fri, 16 Nov 2018 09:46:42 +0000"  >&lt;p&gt;rstata opened a new pull request #384: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt; A few changes to lower the runtime variance of Perf.java tests&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/384&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/384&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   The changes herein help reduce the number of &quot;high-variance&quot; tests (ie, test-cases that vary more than 5% from run to run) from almost 50% of the test cases to around 10%.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16689325" author="githubbot" created="Fri, 16 Nov 2018 12:01:07 +0000"  >&lt;p&gt;rstata commented on issue #384: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt; A few changes to lower the runtime variance of Perf.java tests&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/384#issuecomment-439372811&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/384#issuecomment-439372811&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I&apos;m closing this pull request for now while I look at some performance results more carefully.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16689326" author="githubbot" created="Fri, 16 Nov 2018 12:01:08 +0000"  >&lt;p&gt;rstata closed pull request #384: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt; A few changes to lower the runtime variance of Perf.java tests&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/384&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/384&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java b/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
index 860669468..9df56bb84 100644&lt;br/&gt;
&amp;#8212; a/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
+++ b/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
@@ -141,13 +141,14 @@ void add(List&amp;lt;TestDescriptor&amp;gt; typeList) {&lt;br/&gt;
   private static final int BYTES_PS_FIELD = 2;&lt;br/&gt;
   private static final int ENTRIES_PS_FIELD = 3;&lt;br/&gt;
   private static final int BYTES_PC_FIELD = 4;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private static final int MAX_FIELD = 4;&lt;br/&gt;
+  private static final int MIN_TIME_FIELD = 5;&lt;br/&gt;
+  private static final int MAX_FIELD_TAG = 5;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   private static void usage() {&lt;br/&gt;
     StringBuilder usage = new StringBuilder(&quot;Usage: Perf &lt;span class=&quot;error&quot;&gt;&amp;#91;-o &amp;lt;file&amp;gt;&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;-c &amp;lt;spec&amp;gt;&amp;#93;&lt;/span&gt; { -nowrite | -noread | &quot;);&lt;br/&gt;
     StringBuilder details = new StringBuilder();&lt;br/&gt;
     details.append(&quot; -o file   (send output to a file)\n&quot;);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;details.append(&quot; -c &lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;t&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;e&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;b&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;c&amp;#93;&lt;/span&gt; (format as no-header CSV; include Name, Time, Entries/sec, Bytes/sec, and/or bytes/Cycle; no spec=all fields)\n&quot;);&lt;br/&gt;
+    details.append(&quot; -c &lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;t&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;e&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;b&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;c&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;m&amp;#93;&lt;/span&gt; (format as no-header CSV; include Name, Time, Entries/sec, Bytes/sec, bytes/Cycle, and/or min time/op; no spec=all fields)\n&quot;);&lt;br/&gt;
     details.append(&quot; -nowrite   (do not execute write tests)\n&quot;);&lt;br/&gt;
     details.append(&quot; -noread   (do not execute write tests)\n&quot;);&lt;br/&gt;
     for (Map.Entry&amp;lt;String, List&amp;lt;TestDescriptor&amp;gt;&amp;gt; entry : BATCHES.entrySet()) {&lt;br/&gt;
@@ -179,6 +180,7 @@ public static void main(String[] args) throws Exception {&lt;br/&gt;
     String outputfilename = null;&lt;br/&gt;
     PrintStream out = System.out;&lt;br/&gt;
     boolean[] csvFormat = null;&lt;br/&gt;
+    String csvFormatString = null;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     for (int i = 0; i &amp;lt; args.length; i++) {&lt;br/&gt;
       String a = args&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;;&lt;br/&gt;
@@ -200,17 +202,20 @@ public static void main(String[] args) throws Exception &lt;/p&gt;
{
         continue;
       }
&lt;p&gt;       if (&quot;-c&quot;.equals(a)) {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if (i == args.length-1 || args&lt;span class=&quot;error&quot;&gt;&amp;#91;i+1&amp;#93;&lt;/span&gt;.startsWith(&quot;-&quot;))&lt;/li&gt;
	&lt;li&gt;csvFormat = new boolean[] 
{ true, true, true, true, true }
&lt;p&gt;;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;else {&lt;/li&gt;
	&lt;li&gt;csvFormat = new boolean&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt;;&lt;/li&gt;
	&lt;li&gt;for (char c : args&lt;span class=&quot;error&quot;&gt;&amp;#91;++i&amp;#93;&lt;/span&gt;.toCharArray())&lt;br/&gt;
+        if (i == args.length-1 || args&lt;span class=&quot;error&quot;&gt;&amp;#91;i+1&amp;#93;&lt;/span&gt;.startsWith(&quot;-&quot;)) 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+          csvFormatString = &amp;quot;ntebcm&amp;quot;; // For diagnostics+          csvFormat = new boolean[] { true, true, true, true, true, true };+        }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt; else {&lt;br/&gt;
+          csvFormatString = args&lt;span class=&quot;error&quot;&gt;&amp;#91;++i&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+          csvFormat = new boolean&lt;span class=&quot;error&quot;&gt;&amp;#91;MAX_FIELD_TAG+1&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+          for (char c : csvFormatString.toCharArray())&lt;br/&gt;
             switch (c) {&lt;br/&gt;
             case &apos;n&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;NAME_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             case &apos;t&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;TIME_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             case &apos;e&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;BYTES_PS_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             case &apos;b&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;ENTRIES_PS_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             case &apos;c&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;BYTES_PC_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
+            case &apos;m&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;MIN_TIME_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             default:&lt;br/&gt;
               usage();&lt;br/&gt;
               System.exit(1);&lt;br/&gt;
@@ -237,9 +242,12 @@ public static void main(String[] args) throws Exception {&lt;br/&gt;
       }&lt;br/&gt;
     }&lt;br/&gt;
     System.out.println(&quot;Executing tests: \n&quot; + tests +  &quot;\n readTests:&quot; +&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;readTests + &quot;\n writeTests:&quot; + writeTests + &quot;\n cycles=&quot; + CYCLES);&lt;br/&gt;
+        readTests + &quot;\n writeTests:&quot; + writeTests + &quot;\n cycles=&quot; + CYCLES +&lt;br/&gt;
+        &quot;\n count=&quot; + (COUNT / 1000) + &quot;K&quot;);&lt;br/&gt;
     if (out != System.out) System.out.println(&quot; Writing to: &quot; + outputfilename);&lt;/li&gt;
	&lt;li&gt;if (csvFormat != null) System.out.println(&quot; in CSV format.&quot;);&lt;br/&gt;
+    if (csvFormat != null) System.out.println(&quot; CSV format: &quot; + csvFormatString);&lt;br/&gt;
+&lt;br/&gt;
+    TestResult tr = new TestResult();&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     for (int k = 0; k &amp;lt; tests.size(); k++) {&lt;br/&gt;
       Test t = tests.get(k);&lt;br/&gt;
@@ -275,28 +283,41 @@ public static void main(String[] args) throws Exception &lt;/p&gt;
{
           t.writeTest();
         }
&lt;p&gt;       }&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;t.reset();&lt;br/&gt;
+&lt;br/&gt;
       // test&lt;/li&gt;
	&lt;li&gt;long s = 0;&lt;br/&gt;
       System.gc();&lt;/li&gt;
	&lt;li&gt;t.init();&lt;br/&gt;
       if (t.isReadTest() &amp;amp;&amp;amp; readTests) {&lt;br/&gt;
+        tr.reset();&lt;br/&gt;
         for (int i = 0; i &amp;lt; t.cycles; i++) 
{
-          s += t.readTest();
+          tr.update(t.readTest());
         }&lt;/li&gt;
	&lt;li&gt;printResult(out, csvFormat, s, t, t.name + &quot;Read&quot;);&lt;br/&gt;
+        printResult(out, csvFormat, tr, t, t.name + &quot;Read&quot;);&lt;br/&gt;
       }&lt;/li&gt;
	&lt;li&gt;s = 0;&lt;br/&gt;
       if (t.isWriteTest() &amp;amp;&amp;amp; writeTests) {&lt;br/&gt;
+        tr.reset();&lt;br/&gt;
         for (int i = 0; i &amp;lt; t.cycles; i++) 
{
-          s += t.writeTest();
+          tr.update(t.writeTest());
         }&lt;/li&gt;
	&lt;li&gt;printResult(out, csvFormat, s, t, t.name + &quot;Write&quot;);&lt;br/&gt;
+        printResult(out, csvFormat, tr, t, t.name + &quot;Write&quot;);&lt;br/&gt;
       }&lt;br/&gt;
       t.reset();&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  private static class TestResult {&lt;br/&gt;
+    public long totalTime;&lt;br/&gt;
+    public long minTime;&lt;br/&gt;
+    public void reset() &lt;/p&gt;
{
+      totalTime = 0L;
+      minTime = Long.MAX_VALUE;
+    }
&lt;p&gt;+    public long update(long t) &lt;/p&gt;
{
+      totalTime += t;
+      minTime = Math.min(t, minTime);
+      return t;
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
   private static final void printHeader() {&lt;br/&gt;
     String header = String.format(&lt;br/&gt;
         &quot;%60s     time    M entries/sec   M bytes/sec  bytes/cycle&quot;,&lt;br/&gt;
@@ -305,23 +326,25 @@ private static final void printHeader() {&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   private static final void printResult(PrintStream o, boolean[] csv,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;long s, Test t, String name)&lt;br/&gt;
+                                        TestResult tr, Test t, String name)&lt;br/&gt;
   {&lt;/li&gt;
	&lt;li&gt;s /= 1000;&lt;br/&gt;
+    long s = tr.totalTime / 1000;&lt;br/&gt;
     double entries = (t.cycles * (double) t.count);&lt;br/&gt;
     double bytes = t.cycles * (double) t.encodedSize;&lt;br/&gt;
     StringBuilder result = new StringBuilder();&lt;br/&gt;
     if (csv != null) {&lt;br/&gt;
       boolean commaneeded = false;&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt;= MAX_FIELD; i++) {&lt;br/&gt;
+      for (int i = 0; i &amp;lt;= MAX_FIELD_TAG; i++) 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+        if (! csv[i]) continue;         if (commaneeded) result.append(&amp;quot;,&amp;quot;);         else commaneeded = true;         switch (i) {
         case NAME_FIELD: result.append(name); break;
         case TIME_FIELD: result.append(String.format(&quot;%d&quot;, (s/1000))); break;
         case BYTES_PS_FIELD: result.append(String.format(&quot;%.3f&quot;, (entries / s))); break;
-        case ENTRIES_PS_FIELD: result.append(String.format(&quot;.3%f&quot;, (bytes / s))); break;
+        case ENTRIES_PS_FIELD: result.append(String.format(&quot;%.3f&quot;, (bytes / s))); break;
         case BYTES_PC_FIELD: result.append(String.format(&quot;%d&quot;, t.encodedSize)); break;
+        case MIN_TIME_FIELD: result.append(String.format(&quot;%d&quot;, tr.minTime)); break;
         }       }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;     } else {&lt;br/&gt;
@@ -400,16 +423,16 @@ public String toString() {&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     @Override&lt;br/&gt;
     public final long readTest() throws IOException &lt;/p&gt;
{
-      long t = System.nanoTime();
       Decoder d = getDecoder();
+      long t = System.nanoTime();
       readInternal(d);
       return (System.nanoTime() - t);
     }

&lt;p&gt;     @Override&lt;br/&gt;
     public final long writeTest() throws IOException {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;long t = System.nanoTime();&lt;br/&gt;
       Encoder e = getEncoder();&lt;br/&gt;
+      long t = System.nanoTime();&lt;br/&gt;
       writeInternal(e);&lt;br/&gt;
       e.flush();&lt;br/&gt;
       return (System.nanoTime() - t);&lt;br/&gt;
@@ -428,8 +451,8 @@ protected Decoder newDecoder() {&lt;br/&gt;
     }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     protected Encoder newEncoder(ByteArrayOutputStream out) throws IOException {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Encoder e = encoder_factory.binaryEncoder(out, null);&lt;br/&gt;
-//    Encoder e = encoder_factory.directBinaryEncoder(out, null);&lt;br/&gt;
+//    Encoder e = encoder_factory.binaryEncoder(out, null);&lt;br/&gt;
+      Encoder e = encoder_factory.directBinaryEncoder(out, null);&lt;br/&gt;
 //    Encoder e = encoder_factory.blockingBinaryEncoder(out, null);&lt;br/&gt;
 //    Encoder e = new LegacyBinaryEncoder(out);&lt;br/&gt;
       return e;&lt;br/&gt;
@@ -1419,18 +1442,13 @@ protected Decoder getDecoder() {&lt;br/&gt;
     protected final SpecificDatumReader&amp;lt;T&amp;gt; reader;&lt;br/&gt;
     protected final SpecificDatumWriter&amp;lt;T&amp;gt; writer;&lt;br/&gt;
     private Object[] sourceData;&lt;br/&gt;
+    private T reuse;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     protected SpecificTest(String name, String writerSchema) throws IOException &lt;/p&gt;
{
       super(name, writerSchema, 48);
       reader = newReader();
       writer = newWriter();
     }
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;protected SpecificDatumReader&amp;lt;T&amp;gt; getReader() 
{
-      return reader;
-    }&lt;/li&gt;
	&lt;li&gt;protected SpecificDatumWriter&amp;lt;T&amp;gt; getWriter() 
{
-      return writer;
-    }
&lt;p&gt;     protected SpecificDatumReader&amp;lt;T&amp;gt; newReader() &lt;/p&gt;
{
       return new SpecificDatumReader&amp;lt;&amp;gt;(schema);
     }
&lt;p&gt;@@ -1444,6 +1462,7 @@ void genSourceData() &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {       for (int i = 0; i &amp;lt; sourceData.length; i++) {
         sourceData[i] = genSingleRecord(r);
       }+      reuse = genSingleRecord(r);     }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     protected abstract T genSingleRecord(Random r);&lt;br/&gt;
@@ -1451,7 +1470,7 @@ void genSourceData() {&lt;br/&gt;
     @Override&lt;br/&gt;
     void readInternal(Decoder d) throws IOException {&lt;br/&gt;
       for (int i = 0; i &amp;lt; count; i++) &lt;/p&gt;
{
-        getReader().read(null, d);
+        reader.read(reuse, d);
       }
&lt;p&gt;     }&lt;br/&gt;
     @Override&lt;br/&gt;
@@ -1459,7 +1478,7 @@ void writeInternal(Encoder e) throws IOException {&lt;br/&gt;
       for (int i = 0; i &amp;lt; sourceData.length; i++) &lt;/p&gt;
{
         @SuppressWarnings(&quot;unchecked&quot;)
         T rec = (T) sourceData[i];
-        getWriter().write(rec, e);
+        writer.write(rec, e);
       }
&lt;p&gt;     }&lt;br/&gt;
     @Override&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16698096" author="raymie" created="Sun, 25 Nov 2018 07:54:59 +0000"  >&lt;p&gt;This work has changed direction.  The focus shifted away from variance and towards usability.  I&apos;ve updated the subject and description accordingly.&lt;/p&gt;</comment>
                            <comment id="16698103" author="githubbot" created="Sun, 25 Nov 2018 08:31:50 +0000"  >&lt;p&gt;rstata opened a new pull request #389: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt; Make Perf.java more usable&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/389&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/389&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   The class `org.apache.avro.ipc.io.Perf` is Avro&apos;s performance test suite. This JIRA aims to make it easier to use (see &lt;span class=&quot;error&quot;&gt;&amp;#91;JIRA ticket&amp;#93;&lt;/span&gt;(&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-2269&lt;/a&gt;) for more info).&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16699400" author="githubbot" created="Mon, 26 Nov 2018 18:27:39 +0000"  >&lt;p&gt;dkulp closed pull request #389: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt; Make Perf.java more usable&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/389&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/389&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/build.sh b/build.sh&lt;br/&gt;
index 0dc4788e0..10544df05 100755&lt;br/&gt;
&amp;#8212; a/build.sh&lt;br/&gt;
+++ b/build.sh&lt;br/&gt;
@@ -20,9 +20,10 @@ set -e                # exit on error&lt;br/&gt;
 cd `dirname &quot;$0&quot;`     # connect to root&lt;/p&gt;

&lt;p&gt; VERSION=`cat share/VERSION.txt`&lt;br/&gt;
+DOCKER_XTRA_ARGS=&quot;&quot;&lt;/p&gt;

&lt;p&gt; function usage {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;echo &quot;Usage: $0 
{test|dist|sign|clean|docker|rat|githooks|docker-test}
&lt;p&gt;&quot;&lt;br/&gt;
+  echo &quot;Usage: $0 &lt;/p&gt;
{test|dist|sign|clean|docker [--args \&quot;docker-args\&quot;]|rat|githooks|docker-test}
&lt;p&gt;&quot;&lt;br/&gt;
   exit 1&lt;br/&gt;
 }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@@ -33,8 +34,10 @@ fi&lt;/p&gt;

&lt;p&gt; set -x                # echo commands&lt;/p&gt;

&lt;p&gt;-for target in &quot;$@&quot;&lt;br/&gt;
+while (( &quot;$#&quot; ))&lt;br/&gt;
 do&lt;br/&gt;
+  target=&quot;$1&quot;&lt;br/&gt;
+  shift&lt;br/&gt;
   case &quot;$target&quot; in&lt;/p&gt;

&lt;p&gt;     test)&lt;br/&gt;
@@ -200,6 +203,10 @@ do&lt;br/&gt;
       ;;&lt;/p&gt;

&lt;p&gt;     docker)&lt;br/&gt;
+      if [[ $1 =~ ^--args ]]; then&lt;br/&gt;
+        DOCKER_XTRA_ARGS=$2&lt;br/&gt;
+        shift 2&lt;br/&gt;
+      fi&lt;br/&gt;
       docker build -t avro-build -f share/docker/Dockerfile .&lt;br/&gt;
       if [ &quot;$(uname -s)&quot; == &quot;Linux&quot; ]; then&lt;br/&gt;
         USER_NAME=${SUDO_USER:=$USER}&lt;br/&gt;
@@ -226,6 +233,7 @@ UserSpecificDocker&lt;br/&gt;
         -v ${HOME}/.m2:/home/${USER_NAME}/.m2 \&lt;br/&gt;
         -v ${HOME}/.gnupg:/home/${USER_NAME}/.gnupg \&lt;br/&gt;
         -u ${USER_NAME} \&lt;br/&gt;
+        ${DOCKER_XTRA_ARGS} \&lt;br/&gt;
         avro-build-${USER_NAME} bash&lt;br/&gt;
       ;;&lt;/p&gt;

&lt;p&gt;diff --git a/doc/src/content/htmldocs/performance-testing.html b/doc/src/content/htmldocs/performance-testing.html&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..fcab40dfe&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/doc/src/content/htmldocs/performance-testing.html&lt;br/&gt;
@@ -0,0 +1,173 @@&lt;br/&gt;
+&amp;lt;html&amp;gt;&lt;br/&gt;
+&amp;lt;!--&lt;br/&gt;
+   Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
+   contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
+   this work for additional information regarding copyright ownership.&lt;br/&gt;
+   The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
+   (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
+   the License.  You may obtain a copy of the License at&lt;br/&gt;
+       &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+   Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+   See the License for the specific language governing permissions and&lt;br/&gt;
+   limitations under the License.&lt;br/&gt;
+--&amp;gt;&lt;br/&gt;
+&amp;lt;head&amp;gt;&lt;br/&gt;
+&amp;lt;title&amp;gt;Testing performance improvements&amp;lt;/title&amp;gt;&lt;br/&gt;
+&amp;lt;/head&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;body&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+(Note: This document pertains only to the Java implementation Avro.)&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;h1&amp;gt;1.0 Introduction&amp;lt;/h1&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;Recent work on improving the performance of &quot;specific record&quot; (&amp;lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot;&amp;gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;&amp;lt;/a&amp;gt; and &amp;lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot;&amp;gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2247&quot; title=&quot;Improve Java reading performance with a new reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2247&quot;&gt;AVRO-2247&lt;/a&gt;&amp;lt;/a&amp;gt; has highlighted the need for a benchmark that can be used to test the validity of alleged performance &quot;improvements.&quot;&amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt; As a starting point, the Avro project has class called &amp;lt;code&amp;gt;Perf&amp;lt;/code&amp;gt; (in the test source of the &amp;lt;code&amp;gt;ipc&amp;lt;/code&amp;gt; subproject).  &amp;lt;code&amp;gt;Perf&amp;lt;/code&amp;gt; is a command-line tool contains close to 70 performance individual performance tests.  These tests include tests for reading and writing primitive values, arrays and maps, plus tests for reading and writing records through all of the APIs (generic, specific, reflect).&amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt; When using &amp;lt;code&amp;gt;Perf&amp;lt;/code&amp;gt; for some recent performance work, we encountered two problems.  First, because it depends on build artifacts from across the Avro project, it can be tricky to invoke.  Second, and more seriously, independent runs of the tests in &amp;lt;code&amp;gt;Perf&amp;lt;/code&amp;gt; can vary in performance by as much as 40%.  While typical variance is less than that, the variance is high enough that it makes it impossible to tell if a change in performance is simply this noise, or can be properly attributed to a proposed optimization. &amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt; This document addresses both problems, the usability problem in Section 2 and the variability issue in Section 3.  Regarding the variability issue, as you will see, we haven&apos;t really been able to manage it in a fundamental manner.  As &amp;lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269?focusedCommentId=16688925&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16688925&quot;&amp;gt;suggested by Zoltan Frakas&amp;lt;/a&amp;gt;, we should look into porting &amp;lt;code&amp;gt;Perf&amp;lt;/code&amp;gt; over to using the &amp;lt;a href=&quot;https://java-performance.info/jmh/&quot;&amp;gt;Java Microbenchmark Harness (JMH)&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;h1&amp;gt;2.0 Invoking &amp;lt;code&amp;gt;Perf&amp;lt;/code&amp;gt;&amp;lt;/h1&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;h2&amp;gt;2.1 Simple invocation&amp;lt;/h2&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;Here is the easiest way we found to directly invoke &amp;lt;code&amp;gt;Perf&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;As mentioned in the Introduction, &amp;lt;code&amp;gt;Perf&amp;lt;/code&amp;gt; is dependent upon build artifacts from some of the other Avro subprojects.  When you invoke &amp;lt;code&amp;gt;Perf&amp;lt;/code&amp;gt;, it should be invoked with your most recent build of those artifacts (assuming you&apos;re performance-testing your current work).  We have found that the easiest way to ensure the proper artifacts are used is to use Maven to invoke &amp;lt;code&amp;gt;Perf&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;The recipe for using Maven in this way is simple.  First, from the &amp;lt;code&amp;gt;lang/java&amp;lt;/code&amp;gt; directoy, you need to build &amp;lt;em&amp;gt;and install&amp;lt;/em&amp;gt; Avro:&amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mvn clean install&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;(You can add &amp;lt;code&amp;gt;-DskipTests&amp;lt;/code&amp;gt; to the above command line if you don&apos;t need to run test suite.)  When this is done, you need to change your working directory to the &amp;lt;code&amp;gt;lang/java/ipc&amp;lt;/code&amp;gt; directory.  From there, you can invoke &amp;lt;code&amp;gt;Perf&amp;lt;/code&amp;gt; with the following command line:&amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&lt;br/&gt;
+&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mvn exec:java -Dexec.classpathScope=test -Dexec.mainClass=org.apache.avro.io.Perf -Dexec.args=&quot;...&quot;&lt;br/&gt;
+&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;exec.args&amp;lt;/code&amp;gt; string contains the arguments you want to pass through to the &amp;lt;code&amp;gt;Perf.main&amp;lt;/code&amp;gt; function.&amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;To speed up your edit-compile-test loop, you can do a selective build of Avro in addition to skipping tests:&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mvn clean &amp;amp;&amp;amp; mvn -pl &quot;avro,compiler,maven-plugin,ipc&quot; install -DskipTests&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;h2&amp;gt;2.2 Using the run-perf.sh script&amp;lt;/h2&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;If you&apos;re using &amp;lt;code&amp;gt;Perf&amp;lt;/code&amp;gt;, chances are that you want to compare the performance of a proposed optimization against the performance of a baseline (that baseline most likely being the current master branch of Avro).  Generating this comparative data can be tedious if you&apos;re running &amp;lt;code&amp;gt;Perf&amp;lt;/code&amp;gt; by hand.  To relieve this tedium, you can use the &amp;lt;code&amp;gt;run-perf.sh&amp;lt;/code&amp;gt; script instead (found in the &amp;lt;code&amp;gt;share/test&amp;lt;/code&amp;gt; directory from the Avro top-level directory).&amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;To use this script, you put different implementations of Avro onto different branches of your Avro git repository.  One of these branches is designated the &quot;baseline&quot; branch and the others are the &quot;treatment&quot; branches.  The script will run the baseline and all the treatments, and will compare generate a CSV file containing a comparison of the treatments against the baseline.&amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;Running &amp;lt;code&amp;gt;run-perf.sh&amp;nbsp;--help&amp;lt;/code&amp;gt; will output a detailed manual-page for this script.  Appendix A of this document contains sample invocations of this test script for different use cases.&amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;NOTE: as mentioned in &amp;lt;code&amp;gt;run-perf.sh&amp;nbsp;--help&amp;lt;/code&amp;gt;, &amp;lt;b&amp;gt;this script is designed to be run from the &amp;lt;code&amp;gt;lang/java/ipc&amp;lt;/code&amp;gt; directory&amp;lt;/b&amp;gt;, which is the Maven project containing the &amp;lt;code&amp;gt;Perf&amp;lt;/code&amp;gt; program.&amp;lt;/p&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;h1&amp;gt;3.0 Managing variance&amp;lt;/h1&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+As mentioned in the introduction, we tried a number of different mechanisms to reduce variance, including:&lt;br/&gt;
+&amp;lt;ul&amp;gt;&lt;br/&gt;
+&amp;lt;li&amp;gt; Varying &amp;lt;code&amp;gt;org.apache.avro.io.perf.count&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;org.apache.io.perf.cycles&amp;lt;/code&amp;gt;, and &amp;lt;code&amp;gt;org.apache.avro.io.perf.use-direct&amp;lt;/code&amp;gt;, as well as the number of times we run &amp;lt;code&amp;gt;Perf.java&amp;lt;/code&amp;gt; within a single &quot;run&quot; of a test.&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt; &amp;lt;li&amp;gt; Taking the minimum times across runs, rather than the maximum times, using the second or third run as a baseline rather than the first, using statistical methods to eliminate outlying values.&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt; &amp;lt;li&amp;gt; Modified the code slightly, for example: starting the timer of a cycle after, rather than before, encoders or decoders are constructed; cacheing encoders and decoders; and reusing record objects during read tests rather than construct new ones for each record being read.&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt; &amp;lt;li&amp;gt; Using Docker&apos;s &amp;lt;code&amp;gt;--cpuset-cpus&amp;lt;/code&amp;gt; flag to force the tests onto a single core.&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt; &amp;lt;li&amp;gt; Using a dedicated EC2 instance (&amp;lt;code&amp;gt;c5d.2xlarge&amp;lt;/code&amp;gt;).&lt;br/&gt;
+&amp;lt;/ul&amp;gt;&lt;br/&gt;
+Of the above, the only change that made a significant difference was the last: in going from a laptop and desktop computer to a dedicated EC2 instances, we went from over 70 tests (out of 200) with a variance of 5% or more between runs to 35.  As mentioned in the introduction, we should switch to a framework like &amp;lt;a href=&quot;https://java-performance.info/jmh/&quot;&amp;gt;JMH&amp;lt;/a&amp;gt; to attack this problem more fundamentally.&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt; If you want to setup your own EC2 instance for testing, here&apos;s how we did it.  We launched a dedicated EC2 &amp;lt;code&amp;gt;c5d.2xlarge&amp;lt;/code&amp;gt; instance from the AWS console, using the &quot;Amazon Linux 64-bit HVM GP2&quot; AMI.  We logged into this instance and ran the following commands to install Docker and Git (we did all our Avro build and testing inside the Docker image):&lt;br/&gt;
+&amp;lt;pre&amp;gt;&lt;br/&gt;
+  sudo yum update&lt;br/&gt;
+  sudo yum install -y git-all&lt;br/&gt;
+  git config --global user.name &quot;Your Name&quot;&lt;br/&gt;
+  git config --global user.email email-address-used@github.com&lt;br/&gt;
+  git config --global core.editor emacs&lt;br/&gt;
+  sudo install -y docker&lt;br/&gt;
+  sudo usermod -aG docker ec2-user ## Need to log back in for this to take effect&lt;br/&gt;
+  sudo service docker start&lt;br/&gt;
+&amp;lt;/pre&amp;gt;&lt;br/&gt;
+At this point you can checkout Avro and launch your Docker container:&lt;br/&gt;
+&amp;lt;pre&amp;gt;&lt;br/&gt;
+  git clone &lt;a href=&quot;https://github.com/apache/avro.git&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro.git&lt;/a&gt;&lt;br/&gt;
+  cd avro&lt;br/&gt;
+  screen&lt;br/&gt;
+  ./build.sh docker -&lt;del&gt;args &quot;&lt;/del&gt;-cpuset-cpus 2,6&quot;&lt;br/&gt;
+&amp;lt;/pre&amp;gt;&lt;br/&gt;
+Note the use of &amp;lt;code&amp;gt;screen&amp;lt;/code&amp;gt; here: executions of &amp;lt;code&amp;gt;run-perf.sh&amp;lt;/code&amp;gt; can take a few hours, depending on the configuration.  By running it inside of &amp;lt;code&amp;gt;screen&amp;lt;/code&amp;gt;, you are protected from an SSH disconnection causing &amp;lt;code&amp;gt;run-perf.sh&amp;lt;/code&amp;gt; to prematurely terminate.&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;-&lt;del&gt;args&amp;lt;/code&amp;gt; flag in the last command deserves some explanation.  In general, the &amp;lt;code&amp;gt;&lt;/del&gt;&lt;del&gt;args&amp;lt;/code&amp;gt; allows you to pass additional arguments to the &amp;lt;code&amp;gt;docker&amp;nbsp;run&amp;lt;/code&amp;gt; command executed inside &amp;lt;code&amp;gt;build.sh&amp;lt;/code&amp;gt;.  In this case, the &amp;lt;code&amp;gt;&lt;/del&gt;-cpuset-cpus&amp;lt;/code&amp;gt; flag for &amp;lt;code&amp;gt;docker&amp;lt;/code&amp;gt; tells docker to schedule the contianer exclusively on the listed (virtual) CPUs.  We identified vCPUs 2 and 6 using the &amp;lt;code&amp;gt;lscpu&amp;lt;/code&amp;gt; Linux command:&lt;br/&gt;
+&amp;lt;pre&amp;gt;&lt;br/&gt;
+  &lt;span class=&quot;error&quot;&gt;&amp;#91;ec2-user@ip-0-0-0-0 avro&amp;#93;&lt;/span&gt;$ lscpu --extended&lt;br/&gt;
+  CPU NODE SOCKET CORE L1d:L1i:L2:L3 ONLINE&lt;br/&gt;
+  0   0    0      0    0:0:0:0       yes&lt;br/&gt;
+  1   0    0      1    1:1:1:0       yes&lt;br/&gt;
+  2   0    0      2    2:2:2:0       yes&lt;br/&gt;
+  3   0    0      3    3:3:3:0       yes&lt;br/&gt;
+  4   0    0      0    0:0:0:0       yes&lt;br/&gt;
+  5   0    0      1    1:1:1:0       yes&lt;br/&gt;
+  6   0    0      2    2:2:2:0       yes&lt;br/&gt;
+  7   0    0      3    3:3:3:0       yes&lt;br/&gt;
+&amp;lt;/pre&amp;gt;&lt;br/&gt;
+Notice that (v)CPUs 2 and 6 are both on core 2: it&apos;s sufficient to schedule the container on the same core, vs a single vCPU.  One final tip: to confirm that your container is running on the expected CPUs, run &amp;lt;code&amp;gt;top&amp;lt;/code&amp;gt; and then press the &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt; key &amp;#8211; this will show you the load on each individual CPU.&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;h1&amp;gt;Appendix A: Sample uses of run-perf.sh&amp;lt;/h1&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;A detailed explanation of &amp;lt;code&amp;gt;run-perf.sh&amp;lt;/code&amp;gt; is printed when you give it the &amp;lt;code&amp;gt;--help&amp;lt;/code&amp;gt; flag.  To help you more quickly understand how to use &amp;lt;code&amp;gt;run-perf.sh&amp;lt;/code&amp;gt; we present here a few examples of how we used it in our recent testing efforts.&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;  To summarize, you invoke it as follows:&lt;br/&gt;
+&amp;lt;pre&amp;gt;&lt;br/&gt;
+    ../../../share/test/run-perf.sh &lt;span class=&quot;error&quot;&gt;&amp;#91;--out-dir D&amp;#93;&lt;/span&gt; \&lt;br/&gt;
+       &lt;span class=&quot;error&quot;&gt;&amp;#91;--perf-args STRING&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;-Dkey=value&amp;#93;&lt;/span&gt;* &lt;span class=&quot;error&quot;&gt;&amp;#91;--&amp;#93;&lt;/span&gt; \&lt;br/&gt;
+       &lt;span class=&quot;error&quot;&gt;&amp;#91;-Dkey=value&amp;#93;&lt;/span&gt;* branch_baseline&lt;span class=&quot;error&quot;&gt;&amp;#91;:name_baseline_run&amp;#93;&lt;/span&gt; \&lt;br/&gt;
+       &lt;span class=&quot;error&quot;&gt;&amp;#91;-Dkey=value&amp;#93;&lt;/span&gt;* branch_1&lt;span class=&quot;error&quot;&gt;&amp;#91;:name_treatment_run_1&amp;#93;&lt;/span&gt; \&lt;br/&gt;
+       ... &amp;lt;br&amp;gt;&lt;br/&gt;
+       &lt;span class=&quot;error&quot;&gt;&amp;#91;-Dkey=value&amp;#93;&lt;/span&gt;* branch_n&lt;span class=&quot;error&quot;&gt;&amp;#91;:name_treatment_run_n&amp;#93;&lt;/span&gt; &amp;lt;br&amp;gt;&lt;br/&gt;
+&amp;lt;/pre&amp;gt;&lt;br/&gt;
+The path given here is relative to the &amp;lt;code&amp;gt;lang/java/ipc&amp;lt;/code&amp;gt; directory, which needs to be the current working directory when calling this script.  The script executes multiple &amp;lt;em&amp;gt;runs&amp;lt;/em&amp;gt; of testing.  The first run is called the &amp;lt;em&amp;gt;baseline run&amp;lt;/em&amp;gt;, the subsequent runs are the &amp;lt;em&amp;gt;treatment runs&amp;lt;/em&amp;gt;.  Each run consists of four identical executions of &amp;lt;code&amp;gt;Perf.java&amp;lt;/code&amp;gt;.  The running times for each &amp;lt;code&amp;gt;Perf.java&amp;lt;/code&amp;gt; test are averaged to obtain the final running time for the test.  For each treatment run, the final running times for each test are compared, as a percentage, to the running time for the test in the baseline run.  These percentages are output in the file &amp;lt;code&amp;gt;summary.csv&amp;lt;/code&amp;gt;.&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;The following invocation is what we used to measure the variance of &amp;lt;code&amp;gt;Perf.java&amp;lt;/code&amp;gt;:&lt;br/&gt;
+&amp;lt;pre&amp;gt;&lt;br/&gt;
+../../../share/test/run-perf.sh --out-dir ~/calibration \&lt;br/&gt;
+    -Dorg.apache.avro.specific.use_custom_coders=true \&lt;br/&gt;
+    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt;:baseline &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt;:run1 &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt;:run2 &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt;:run3&lt;br/&gt;
+&amp;lt;/pre&amp;gt;&lt;br/&gt;
+In this invocation, the baseline run and all three treatment runs come from the same Git branch: &amp;lt;code&amp;gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt;&amp;lt;/code&amp;gt;.  We need to give a name to each run: in this case runs have been named &quot;baseline&quot;-&lt;del&gt;the baseline run&lt;/del&gt;&lt;del&gt;and &quot;run1&quot;, &quot;run2&quot;, and &quot;run3&quot;&lt;/del&gt;-the treatment runs.  Note that the name of the Git branch to be used for a run must always be provided, but the name for the run itself (e.g., &quot;baseline&quot;) is optional.  If a name for the run is not provided, then the name of the Git branch will be used as the name of the run.  However, each run must have a unique name, so in this example we had to explicitly name the branches since all runs are on the same branch.&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;run-perf.sh&amp;lt;/code&amp;gt; uses Maven to invoke &amp;lt;code&amp;gt;Perf.java&amp;lt;/code&amp;gt;.  The &amp;lt;code&amp;gt;&lt;del&gt;D&amp;lt;/code&amp;gt; flag is used to pass system properties to Maven, which in turn will pass them through to &amp;lt;code&amp;gt;Perf.java&amp;lt;/code&amp;gt;.  In the example above, we use this flag to turn on the custom-coders feature recently checked into Avro.  Note that initial &amp;lt;code&amp;gt;-D&amp;lt;/code&amp;gt; flags will be passed to &amp;lt;em&amp;gt;all&amp;lt;/em&amp;gt; runs, while &amp;lt;code&amp;gt;-D&amp;lt;/code&amp;gt; switches that come just before the name of Git branch of a run apply to only that run.  In the case of the baseline run, which comes first, if you want to pass &amp;lt;code&amp;gt;-D&amp;lt;/code&amp;gt; flags to just that run, then use the &amp;lt;code&amp;gt;&lt;/del&gt;-&amp;lt;/code&amp;gt; flag to indicate that all global parameters for &amp;lt;code&amp;gt;run-perf.sh&amp;lt;/code&amp;gt; have been provided, followed by the &amp;lt;code&amp;gt;-D&amp;lt;/code&amp;gt; flags you want to pass to only the baseline run.&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;Finally, note that &amp;lt;code&amp;gt;run-perf.sh&amp;lt;/code&amp;gt; generates a lot of intermediate files as well as the final &amp;lt;code&amp;gt;summary.csv&amp;lt;/code&amp;gt; file.  Thus, it is recommended that the output of each execution of &amp;lt;code&amp;gt;run-pref.sh&amp;lt;/code&amp;gt; is sent to a dedicated directory, provided by the &amp;lt;code&amp;gt;--out-dir&amp;lt;/code&amp;gt; flag.  If that directory does not exist, it will be created.  (Observe that &amp;lt;code&amp;gt;run-perf.sh&amp;lt;/code&amp;gt; outputs a file called &amp;lt;code&amp;gt;command.txt&amp;lt;/code&amp;gt; containing the full command-line used to invoke it.  This can be helpful if you run a lot of experiments and forget the detailed setup of some of them along the way.)&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;The next invocation is what we used to ensure that the new &quot;custom coders&quot; optimization for specific records does indeed improve performance:&lt;br/&gt;
+&amp;lt;pre&amp;gt;&lt;br/&gt;
+../../../share/test/run-perf.sh --out-dir ~/retest-codegen \&lt;br/&gt;
+    --perf-args &quot;-Sf&quot; \&lt;br/&gt;
+    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt;:baseline \&lt;br/&gt;
+    -Dorg.apache.avro.specific.use_custom_coders=true &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt;:custom-coders&lt;br/&gt;
+&amp;lt;/pre&amp;gt;&lt;br/&gt;
+In this case, unlike the previous one, the &amp;lt;code&amp;gt;&lt;del&gt;D&amp;lt;/code&amp;gt; flag that turns on the use of custom coders is applied specifically to the treatment run, and not globally.  Also, since this flag only affects the Specific Record case, we use the &amp;lt;code&amp;gt;&lt;/del&gt;-perf-args&amp;lt;/code&amp;gt; flag to pass additional arguments to &amp;lt;code&amp;gt;Perf.java&amp;lt;/code&amp;gt;; in this case, the &amp;lt;code&amp;gt;-Sf&amp;lt;/code&amp;gt; flag tells &amp;lt;code&amp;gt;Perf.java&amp;lt;/code&amp;gt; to run just the specific-record related tests and not the entire test suite.&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;This last example shows how we checked the performance impact of two new feature-branches we&apos;ve been developing:&lt;br/&gt;
+&amp;lt;pre&amp;gt;&lt;br/&gt;
+../../../share/test/run-perf.sh --out-dir ~/new-branches \&lt;br/&gt;
+    -Dorg.apache.avro.specific.use_custom_coders=true \&lt;br/&gt;
+    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt;:baseline combined-opts full-refactor&lt;br/&gt;
+&amp;lt;/pre&amp;gt;&lt;br/&gt;
+In this case, once again, we turn on custom-coders for all runs.  In this case, again, the Git branch &amp;lt;code&amp;gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt;&amp;lt;/code&amp;gt; is used for our baseline run.  However, in this case, the treatment runs come from two other Git branches: &amp;lt;code&amp;gt;combined-opts&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;full-refactor&amp;lt;/code&amp;gt;.  We didn&apos;t provide run-names for these runs because the Git branch-name were fine to be used as run names (we explicitly named the first run &quot;baseline&quot; not because we had to, but because we like the convention of using that name).&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;p&amp;gt;Although we didn&apos;t state it before, in preparing for a run, &amp;lt;code&amp;gt;run-perf.sh&amp;lt;/code&amp;gt; will checkout the Git branch to be used for the run and use &amp;lt;code&amp;gt;mvn&amp;nbsp;install&amp;lt;/code&amp;gt; to build and install it.  It does this for each branch, so the invocation just given will checkout and build three different branches during its overall execution.  (As an optimization, if one run uses the same branch as the previous run, then the branch is &amp;lt;em&amp;gt;not&amp;lt;/em&amp;gt; checked-out or rebuilt between runs.)&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;/body&amp;gt;&lt;br/&gt;
+&amp;lt;/html&amp;gt;&lt;br/&gt;
diff --git a/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java b/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
index 860669468..df4be24f8 100644&lt;br/&gt;
&amp;#8212; a/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
+++ b/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;br/&gt;
@@ -102,6 +102,8 @@ void add(List&amp;lt;TestDescriptor&amp;gt; typeList) {&lt;br/&gt;
     new TestDescriptor(StringTest.class, &quot;-s&quot;).add(BASIC);&lt;br/&gt;
     new TestDescriptor(ArrayTest.class, &quot;-a&quot;).add(BASIC);&lt;br/&gt;
     new TestDescriptor(MapTest.class, &quot;-m&quot;).add(BASIC);&lt;br/&gt;
+    new TestDescriptor(ExtendedEnumResolveTest.class, &quot;-ee&quot;).add(BASIC);&lt;br/&gt;
+    new TestDescriptor(UnchangedUnionResolveTest.class, &quot;-uu&quot;).add(BASIC);&lt;br/&gt;
     BATCHES.put(&quot;-record&quot;, RECORD);&lt;br/&gt;
     new TestDescriptor(RecordTest.class, &quot;-R&quot;).add(RECORD);&lt;br/&gt;
     new TestDescriptor(ValidatingRecord.class, &quot;-Rv&quot;).add(RECORD);&lt;br/&gt;
@@ -141,13 +143,14 @@ void add(List&amp;lt;TestDescriptor&amp;gt; typeList) {&lt;br/&gt;
   private static final int BYTES_PS_FIELD = 2;&lt;br/&gt;
   private static final int ENTRIES_PS_FIELD = 3;&lt;br/&gt;
   private static final int BYTES_PC_FIELD = 4;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private static final int MAX_FIELD = 4;&lt;br/&gt;
+  private static final int MIN_TIME_FIELD = 5;&lt;br/&gt;
+  private static final int MAX_FIELD_TAG = 5;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   private static void usage() {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;StringBuilder usage = new StringBuilder(&quot;Usage: Perf &lt;span class=&quot;error&quot;&gt;&amp;#91;-o &amp;lt;file&amp;gt;&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;-c &amp;lt;spec&amp;gt;&amp;#93;&lt;/span&gt; { -nowrite | -noread | &quot;);&lt;br/&gt;
+    StringBuilder usage = new StringBuilder(&quot;Usage: Perf &lt;span class=&quot;error&quot;&gt;&amp;#91;-o &amp;lt;file&amp;gt;&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;-c &amp;lt;spec&amp;gt;&amp;#93;&lt;/span&gt; 
{ -nowrite | -noread }
&lt;p&gt;&quot;);&lt;br/&gt;
     StringBuilder details = new StringBuilder();&lt;br/&gt;
     details.append(&quot; -o file   (send output to a file)\n&quot;);&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;details.append(&quot; -c &lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;t&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;e&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;b&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;c&amp;#93;&lt;/span&gt; (format as no-header CSV; include Name, Time, Entries/sec, Bytes/sec, and/or bytes/Cycle; no spec=all fields)\n&quot;);&lt;br/&gt;
+    details.append(&quot; -c &lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;t&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;e&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;b&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;c&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;m&amp;#93;&lt;/span&gt; (format as no-header CSV; include Name, Time, Entries/sec, Bytes/sec, bytes/Cycle, and/or min time/op; no spec=all fields)\n&quot;);&lt;br/&gt;
     details.append(&quot; -nowrite   (do not execute write tests)\n&quot;);&lt;br/&gt;
     details.append(&quot; -noread   (do not execute write tests)\n&quot;);&lt;br/&gt;
     for (Map.Entry&amp;lt;String, List&amp;lt;TestDescriptor&amp;gt;&amp;gt; entry : BATCHES.entrySet()) {&lt;br/&gt;
@@ -179,6 +182,7 @@ public static void main(String[] args) throws Exception {&lt;br/&gt;
     String outputfilename = null;&lt;br/&gt;
     PrintStream out = System.out;&lt;br/&gt;
     boolean[] csvFormat = null;&lt;br/&gt;
+    String csvFormatString = null;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     for (int i = 0; i &amp;lt; args.length; i++) {&lt;br/&gt;
       String a = args&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;;&lt;br/&gt;
@@ -200,17 +204,20 @@ public static void main(String[] args) throws Exception &lt;/p&gt;
{
         continue;
       }
&lt;p&gt;       if (&quot;-c&quot;.equals(a)) {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if (i == args.length-1 || args&lt;span class=&quot;error&quot;&gt;&amp;#91;i+1&amp;#93;&lt;/span&gt;.startsWith(&quot;-&quot;))&lt;/li&gt;
	&lt;li&gt;csvFormat = new boolean[] 
{ true, true, true, true, true }
&lt;p&gt;;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;else {&lt;/li&gt;
	&lt;li&gt;csvFormat = new boolean&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt;;&lt;/li&gt;
	&lt;li&gt;for (char c : args&lt;span class=&quot;error&quot;&gt;&amp;#91;++i&amp;#93;&lt;/span&gt;.toCharArray())&lt;br/&gt;
+        if (i == args.length-1 || args&lt;span class=&quot;error&quot;&gt;&amp;#91;i+1&amp;#93;&lt;/span&gt;.startsWith(&quot;-&quot;)) 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+          csvFormatString = &amp;quot;ntebcm&amp;quot;; // For diagnostics+          csvFormat = new boolean[] { true, true, true, true, true, true };+        }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt; else {&lt;br/&gt;
+          csvFormatString = args&lt;span class=&quot;error&quot;&gt;&amp;#91;++i&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+          csvFormat = new boolean&lt;span class=&quot;error&quot;&gt;&amp;#91;MAX_FIELD_TAG+1&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+          for (char c : csvFormatString.toCharArray())&lt;br/&gt;
             switch (c) {&lt;br/&gt;
             case &apos;n&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;NAME_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             case &apos;t&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;TIME_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             case &apos;e&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;BYTES_PS_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             case &apos;b&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;ENTRIES_PS_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             case &apos;c&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;BYTES_PC_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
+            case &apos;m&apos;: csvFormat&lt;span class=&quot;error&quot;&gt;&amp;#91;MIN_TIME_FIELD&amp;#93;&lt;/span&gt; = true; break;&lt;br/&gt;
             default:&lt;br/&gt;
               usage();&lt;br/&gt;
               System.exit(1);&lt;br/&gt;
@@ -237,9 +244,12 @@ public static void main(String[] args) throws Exception {&lt;br/&gt;
       }&lt;br/&gt;
     }&lt;br/&gt;
     System.out.println(&quot;Executing tests: \n&quot; + tests +  &quot;\n readTests:&quot; +&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;readTests + &quot;\n writeTests:&quot; + writeTests + &quot;\n cycles=&quot; + CYCLES);&lt;br/&gt;
+        readTests + &quot;\n writeTests:&quot; + writeTests + &quot;\n cycles=&quot; + CYCLES +&lt;br/&gt;
+        &quot;\n count=&quot; + (COUNT / 1000) + &quot;K&quot;);&lt;br/&gt;
     if (out != System.out) System.out.println(&quot; Writing to: &quot; + outputfilename);&lt;/li&gt;
	&lt;li&gt;if (csvFormat != null) System.out.println(&quot; in CSV format.&quot;);&lt;br/&gt;
+    if (csvFormat != null) System.out.println(&quot; CSV format: &quot; + csvFormatString);&lt;br/&gt;
+&lt;br/&gt;
+    TestResult tr = new TestResult();&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     for (int k = 0; k &amp;lt; tests.size(); k++) {&lt;br/&gt;
       Test t = tests.get(k);&lt;br/&gt;
@@ -275,28 +285,41 @@ public static void main(String[] args) throws Exception &lt;/p&gt;
{
           t.writeTest();
         }
&lt;p&gt;       }&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;t.reset();&lt;br/&gt;
+&lt;br/&gt;
       // test&lt;/li&gt;
	&lt;li&gt;long s = 0;&lt;br/&gt;
       System.gc();&lt;/li&gt;
	&lt;li&gt;t.init();&lt;br/&gt;
       if (t.isReadTest() &amp;amp;&amp;amp; readTests) {&lt;br/&gt;
+        tr.reset();&lt;br/&gt;
         for (int i = 0; i &amp;lt; t.cycles; i++) 
{
-          s += t.readTest();
+          tr.update(t.readTest());
         }&lt;/li&gt;
	&lt;li&gt;printResult(out, csvFormat, s, t, t.name + &quot;Read&quot;);&lt;br/&gt;
+        printResult(out, csvFormat, tr, t, t.name + &quot;Read&quot;);&lt;br/&gt;
       }&lt;/li&gt;
	&lt;li&gt;s = 0;&lt;br/&gt;
       if (t.isWriteTest() &amp;amp;&amp;amp; writeTests) {&lt;br/&gt;
+        tr.reset();&lt;br/&gt;
         for (int i = 0; i &amp;lt; t.cycles; i++) 
{
-          s += t.writeTest();
+          tr.update(t.writeTest());
         }&lt;/li&gt;
	&lt;li&gt;printResult(out, csvFormat, s, t, t.name + &quot;Write&quot;);&lt;br/&gt;
+        printResult(out, csvFormat, tr, t, t.name + &quot;Write&quot;);&lt;br/&gt;
       }&lt;br/&gt;
       t.reset();&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  private static class TestResult {&lt;br/&gt;
+    public long totalTime;&lt;br/&gt;
+    public long minTime;&lt;br/&gt;
+    public void reset() &lt;/p&gt;
{
+      totalTime = 0L;
+      minTime = Long.MAX_VALUE;
+    }
&lt;p&gt;+    public long update(long t) &lt;/p&gt;
{
+      totalTime += t;
+      minTime = Math.min(t, minTime);
+      return t;
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
   private static final void printHeader() {&lt;br/&gt;
     String header = String.format(&lt;br/&gt;
         &quot;%60s     time    M entries/sec   M bytes/sec  bytes/cycle&quot;,&lt;br/&gt;
@@ -305,23 +328,25 @@ private static final void printHeader() {&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   private static final void printResult(PrintStream o, boolean[] csv,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;long s, Test t, String name)&lt;br/&gt;
+                                        TestResult tr, Test t, String name)&lt;br/&gt;
   {&lt;/li&gt;
	&lt;li&gt;s /= 1000;&lt;br/&gt;
+    long s = tr.totalTime / 1000;&lt;br/&gt;
     double entries = (t.cycles * (double) t.count);&lt;br/&gt;
     double bytes = t.cycles * (double) t.encodedSize;&lt;br/&gt;
     StringBuilder result = new StringBuilder();&lt;br/&gt;
     if (csv != null) {&lt;br/&gt;
       boolean commaneeded = false;&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt;= MAX_FIELD; i++) {&lt;br/&gt;
+      for (int i = 0; i &amp;lt;= MAX_FIELD_TAG; i++) 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+        if (! csv[i]) continue;         if (commaneeded) result.append(&amp;quot;,&amp;quot;);         else commaneeded = true;         switch (i) {
         case NAME_FIELD: result.append(name); break;
         case TIME_FIELD: result.append(String.format(&quot;%d&quot;, (s/1000))); break;
         case BYTES_PS_FIELD: result.append(String.format(&quot;%.3f&quot;, (entries / s))); break;
-        case ENTRIES_PS_FIELD: result.append(String.format(&quot;.3%f&quot;, (bytes / s))); break;
+        case ENTRIES_PS_FIELD: result.append(String.format(&quot;%.3f&quot;, (bytes / s))); break;
         case BYTES_PC_FIELD: result.append(String.format(&quot;%d&quot;, t.encodedSize)); break;
+        case MIN_TIME_FIELD: result.append(String.format(&quot;%d&quot;, tr.minTime)); break;
         }       }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;     } else {&lt;br/&gt;
@@ -388,6 +413,13 @@ public String toString() {&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;higher level constructs, just manual serialization.&lt;br/&gt;
    */&lt;br/&gt;
   private static abstract class BasicTest extends Test {&lt;br/&gt;
+    /** Switch to using a DirectBinaryEncoder rather than a BufferedBinaryEncoder&lt;br/&gt;
+     *  for writing tests.  DirectBinaryEncoders are noticably slower than Buffered&lt;br/&gt;
+     *  ones, but they can be more consistent in their performance, which can make&lt;br/&gt;
+     *  it easier to detect small performance improvements. */&lt;br/&gt;
+    public static boolean USE_DIRECT_ENCODER&lt;br/&gt;
+      = Boolean.parseBoolean(System.getProperty(&quot;org.apache.avro.io.perf.use-direct&quot;,&quot;false&quot;));&lt;br/&gt;
+&lt;br/&gt;
     protected final Schema schema;&lt;br/&gt;
     protected byte[] data;&lt;br/&gt;
     BasicTest(String name, String json) throws IOException {&lt;br/&gt;
@@ -400,16 +432,16 @@ public String toString() {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     @Override&lt;br/&gt;
     public final long readTest() throws IOException &lt;/p&gt;
{
-      long t = System.nanoTime();
       Decoder d = getDecoder();
+      long t = System.nanoTime();
       readInternal(d);
       return (System.nanoTime() - t);
     }

&lt;p&gt;     @Override&lt;br/&gt;
     public final long writeTest() throws IOException {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;long t = System.nanoTime();&lt;br/&gt;
       Encoder e = getEncoder();&lt;br/&gt;
+      long t = System.nanoTime();&lt;br/&gt;
       writeInternal(e);&lt;br/&gt;
       e.flush();&lt;br/&gt;
       return (System.nanoTime() - t);&lt;br/&gt;
@@ -428,8 +460,8 @@ protected Decoder newDecoder() {&lt;br/&gt;
     }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     protected Encoder newEncoder(ByteArrayOutputStream out) throws IOException {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Encoder e = encoder_factory.binaryEncoder(out, null);&lt;br/&gt;
-//    Encoder e = encoder_factory.directBinaryEncoder(out, null);&lt;br/&gt;
+      Encoder e = (USE_DIRECT_ENCODER ? encoder_factory.directBinaryEncoder(out, null)&lt;br/&gt;
+                                      : encoder_factory.binaryEncoder(out, null));&lt;br/&gt;
 //    Encoder e = encoder_factory.blockingBinaryEncoder(out, null);&lt;br/&gt;
 //    Encoder e = new LegacyBinaryEncoder(out);&lt;br/&gt;
       return e;&lt;br/&gt;
@@ -1419,18 +1451,13 @@ protected Decoder getDecoder() {&lt;br/&gt;
     protected final SpecificDatumReader&amp;lt;T&amp;gt; reader;&lt;br/&gt;
     protected final SpecificDatumWriter&amp;lt;T&amp;gt; writer;&lt;br/&gt;
     private Object[] sourceData;&lt;br/&gt;
+    private T reuse;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     protected SpecificTest(String name, String writerSchema) throws IOException &lt;/p&gt;
{
       super(name, writerSchema, 48);
       reader = newReader();
       writer = newWriter();
     }
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;protected SpecificDatumReader&amp;lt;T&amp;gt; getReader() 
{
-      return reader;
-    }&lt;/li&gt;
	&lt;li&gt;protected SpecificDatumWriter&amp;lt;T&amp;gt; getWriter() 
{
-      return writer;
-    }
&lt;p&gt;     protected SpecificDatumReader&amp;lt;T&amp;gt; newReader() &lt;/p&gt;
{
       return new SpecificDatumReader&amp;lt;&amp;gt;(schema);
     }
&lt;p&gt;@@ -1444,6 +1471,7 @@ void genSourceData() &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {       for (int i = 0; i &amp;lt; sourceData.length; i++) {
         sourceData[i] = genSingleRecord(r);
       }+      reuse = genSingleRecord(r);     }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     protected abstract T genSingleRecord(Random r);&lt;br/&gt;
@@ -1451,7 +1479,7 @@ void genSourceData() {&lt;br/&gt;
     @Override&lt;br/&gt;
     void readInternal(Decoder d) throws IOException {&lt;br/&gt;
       for (int i = 0; i &amp;lt; count; i++) &lt;/p&gt;
{
-        getReader().read(null, d);
+        reader.read(reuse, d);
       }
&lt;p&gt;     }&lt;br/&gt;
     @Override&lt;br/&gt;
@@ -1459,7 +1487,7 @@ void writeInternal(Encoder e) throws IOException {&lt;br/&gt;
       for (int i = 0; i &amp;lt; sourceData.length; i++) &lt;/p&gt;
{
         @SuppressWarnings(&quot;unchecked&quot;)
         T rec = (T) sourceData[i];
-        getWriter().write(rec, e);
+        writer.write(rec, e);
       }
&lt;p&gt;     }&lt;br/&gt;
     @Override&lt;br/&gt;
@@ -1815,4 +1843,95 @@ protected Rec1 createDatum(Random r) &lt;/p&gt;
{
       return new Rec1(r);
     }
&lt;p&gt;   }&lt;br/&gt;
+&lt;br/&gt;
+  static abstract class ResolvingTest extends BasicTest {&lt;br/&gt;
+    GenericRecord[] sourceData = null;&lt;br/&gt;
+    Schema writeSchema;&lt;br/&gt;
+&lt;br/&gt;
+    private static String mkSchema(String subschema) {&lt;br/&gt;
+      return (&quot;{ \&quot;type\&quot;: \&quot;record\&quot;, \&quot;name\&quot;: \&quot;R\&quot;, \&quot;fields\&quot;: [\n&quot;&lt;br/&gt;
+              + &quot;&lt;/p&gt;
{ \&quot;name\&quot;: \&quot;f\&quot;, \&quot;type\&quot;: &quot; + subschema + &quot;}
&lt;p&gt;\n&quot;&lt;br/&gt;
+              + &quot;] }&quot;);&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    public ResolvingTest(String name, String r, String w) throws IOException &lt;/p&gt;
{
+      super(name, mkSchema(r));
+      isWriteTest = false;
+      this.writeSchema = new Schema.Parser().parse(mkSchema(w));
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    protected Decoder getDecoder() throws IOException &lt;/p&gt;
{
+      return new ResolvingDecoder(writeSchema, schema, super.getDecoder());
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    void readInternal(Decoder d) throws IOException {&lt;br/&gt;
+      GenericDatumReader&amp;lt;Object&amp;gt; reader = new GenericDatumReader&amp;lt;&amp;gt;(schema);&lt;br/&gt;
+      for (int i = 0; i &amp;lt; count; i++) &lt;/p&gt;
{
+        reader.read(null, d);
+      }
&lt;p&gt;+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    void writeInternal(Encoder e) throws IOException {&lt;br/&gt;
+      GenericDatumWriter&amp;lt;Object&amp;gt; writer = new GenericDatumWriter&amp;lt;&amp;gt;(writeSchema);&lt;br/&gt;
+      for (int i = 0; i &amp;lt; sourceData.length; i++) &lt;/p&gt;
{
+        writer.write(sourceData[i], e);
+      }
&lt;p&gt;+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    void reset() &lt;/p&gt;
{
+      sourceData = null;
+      data = null;
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
+  static class ExtendedEnumResolveTest extends ResolvingTest {&lt;br/&gt;
+    private static final String ENUM_WRITER =&lt;br/&gt;
+      &quot;&lt;/p&gt;
{ \&quot;type\&quot;: \&quot;enum\&quot;, \&quot;name\&quot;:\&quot;E\&quot;, \&quot;symbols\&quot;: [\&quot;A\&quot;, \&quot;B\&quot;] }
&lt;p&gt;&quot;;&lt;br/&gt;
+    private static final String ENUM_READER =&lt;br/&gt;
+      &quot;&lt;/p&gt;
{ \&quot;type\&quot;: \&quot;enum\&quot;, \&quot;name\&quot;:\&quot;E\&quot;, \&quot;symbols\&quot;: [\&quot;A\&quot;,\&quot;B\&quot;,\&quot;C\&quot;,\&quot;D\&quot;,\&quot;E\&quot;] }
&lt;p&gt;&quot;;&lt;br/&gt;
+&lt;br/&gt;
+    public ExtendedEnumResolveTest() throws IOException &lt;/p&gt;
{
+      super(&quot;ExtendedEnum&quot;, ENUM_READER, ENUM_WRITER);
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    void genSourceData() {&lt;br/&gt;
+      Random r = newRandom();&lt;br/&gt;
+      Schema eSchema = writeSchema.getField(&quot;f&quot;).schema();&lt;br/&gt;
+      sourceData = new GenericRecord&lt;span class=&quot;error&quot;&gt;&amp;#91;count&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+      for (int i = 0; i &amp;lt; sourceData.length; i++) &lt;/p&gt;
{
+        GenericRecord rec = new GenericData.Record(writeSchema);
+        int tag = r.nextInt(2);
+        rec.put(&quot;f&quot;, GenericData.get().createEnum(eSchema.getEnumSymbols().get(tag), eSchema));
+        sourceData[i] = rec;
+      }
&lt;p&gt;+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  static class UnchangedUnionResolveTest extends ResolvingTest {&lt;br/&gt;
+    private static final String UNCHANGED_UNION =&lt;br/&gt;
+      &quot;[ \&quot;null\&quot;, \&quot;int\&quot; ]&quot;;&lt;br/&gt;
+&lt;br/&gt;
+    public UnchangedUnionResolveTest() throws IOException &lt;/p&gt;
{
+      super(&quot;UnchangedUnion&quot;, UNCHANGED_UNION, UNCHANGED_UNION);
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    void genSourceData() {&lt;br/&gt;
+      Random r = newRandom();&lt;br/&gt;
+      Schema uSchema = writeSchema.getField(&quot;f&quot;).schema();&lt;br/&gt;
+      sourceData = new GenericRecord&lt;span class=&quot;error&quot;&gt;&amp;#91;count&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+      for (int i = 0; i &amp;lt; sourceData.length; i++) &lt;/p&gt;
{
+        GenericRecord rec = new GenericData.Record(writeSchema);
+        int val = r.nextInt(1000000);
+        Integer v = (val &amp;lt; 750000 ? new Integer(val) : null);
+        rec.put(&quot;f&quot;, v);
+        sourceData[i] = rec;
+      }
&lt;p&gt;+    }&lt;br/&gt;
+  }&lt;br/&gt;
 }&lt;br/&gt;
diff --git a/share/test/run-perf.sh b/share/test/run-perf.sh&lt;br/&gt;
new file mode 100755&lt;br/&gt;
index 000000000..7aa8b0a1e&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/share/test/run-perf.sh&lt;br/&gt;
@@ -0,0 +1,389 @@&lt;br/&gt;
+#!/bin/bash&lt;br/&gt;
+&lt;br/&gt;
+# Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
+# contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
+# this work for additional information regarding copyright ownership.&lt;br/&gt;
+# The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
+# (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
+# the License.  You may obtain a copy of the License at&lt;br/&gt;
+#&lt;br/&gt;
+#     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+#&lt;br/&gt;
+# Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+# See the License for the specific language governing permissions and&lt;br/&gt;
+# limitations under the License.&lt;br/&gt;
+&lt;br/&gt;
+set -ex&lt;br/&gt;
+&lt;br/&gt;
+function usage &lt;/p&gt;
{
+  echo &quot;`basename $0` --help&quot;
+  echo &quot;`basename $0` [--min] [--out-dir D] [--iters N] [--skip-one]\\&quot;
+  echo &quot;    [--only-combine] [--perf-args STRING] [-Dkey=value]* \\&quot;
+  echo &quot;    [--] [-Dkey=value]* branch_1[:name_1] .. [-Dkey=value]* branch_n[:name_n]&quot;
+  echo
+  echo &quot;Run a set of trials Perf.java trials can compare results.&quot;
+  echo &quot;A &apos;trial&apos; is N runs of Perf.java against the code as it&quot;
+  echo &quot;exists on a branch in git.  By comparing Perf.java output&quot;
+  echo &quot;generated by different branches in git, we can understand&quot;
+  echo &quot;the relative performance of those branches.&quot;
+  echo
+  echo &quot;This script must be run in the lang/java/ipc directory of&quot;
+  echo &quot;the Avro source code, on a computer where Maven is installed&quot;
+  echo &quot;and the other build-prerequisites of Avro are in place.  This&quot;
+  echo &quot;script will do a &apos;mvn clean install&apos; of Avro from withing&quot;
+  echo &quot;the lang/java directory, before running tests.&quot;
+  echo
+  echo &quot;The way Perf.java works is that it times an &apos;inner loop&apos; that&quot;
+  echo &quot;reads or writes a large number of records (the exact number can&quot;
+  echo &quot;be controlled by a system property as described below).  This&quot;
+  echo &quot;inner loop is called a &apos;cycle.&apos;  Perf.java runs a medium number of&quot;
+  echo &quot;these cycles, and outputs either the average or the minimum&quot;
+  echo &quot;of their running times.  This script runs Perf.java a small number&quot;
+  echo &quot;of times (controllable by the --iters flag), and takes either the&quot;
+  echo &quot;average or minimum of those.  The result of all this is the results&quot;
+  echo &quot;of a single &apos;trial.&apos;&quot;
+  echo 
+  echo &quot;The basic model is that there is a &apos;baseline&apos; trial plus any&quot;
+  echo &quot;number of &apos;treatment&apos; trials.  The goal is to compare the&quot;
+  echo &quot;performance of each treatment against the baseline.  The main&quot;
+  echo &quot;output is written to the file &apos;summary.csv&apos;.  This file contains&quot;
+  echo &quot;one line per performance test run by Perf.java.  Each row contains&quot;
+  echo &quot;a &apos;results&apos; column for each trial, followed by a &apos;comparison&apos; column&quot;
+  echo &quot;for each treatment trial.  The results column contains the average&quot;
+  echo &quot;(or minimum) of the runtimes of all cycles over all iterations of&quot;
+  echo &quot;the trial.  The comparison columns contains the difference between&quot;
+  echo &quot;the performance of the treatment and the baseline, as a percent&quot;
+  echo &quot;of the baseline.  Specifically, it countains&quot;
+  echo &quot;  100*(treatment-baseline)/baseline, i.e., positive numbers mean&quot;
+  echo &quot;we&apos;ve seen a speedup.&quot;
+  echo
+  echo &quot;By default, the running times of cycles are averaged together.&quot;
+  echo &quot;The --min flag changes that to taking the minimum.&quot;
+  echo 
+  echo &quot;By default, output is written to the current working directory.&quot;
+  echo &quot;However, lots of intermediate files are generated, so it&apos;s recommended&quot;
+  echo &quot;that the --out-dir argument is used to redirect the output to&quot;
+  echo &quot;a different working directory.&quot;
+  echo 
+  echo &quot;By default, the number of iterations in a trial is 4, but this can&quot;
+  echo &quot;be changed with the --iters flag.&quot;
+  echo 
+  echo &quot;Perf.java takes a number of command-line arguments, and can be&quot;
+  echo &quot;influenced by system properties.  Command-line arguments can be&quot;
+  echo &quot;passed using the --perf-args flag.  When using this switch, pass&quot;
+  echo &quot;your Perf.java command-line arguments in a single string, even if&quot;
+  echo &quot;there are more than one of them.  You can set system properties&quot;
+  echo &quot; using -Dkey=value switch, just as you would with Maven. System&quot;
+  echo &quot;properties that come before the the &apos;--&apos; switch and the first&quot;
+  echo &quot;branch are passed to all trials. System properties that come after&quot;
+  echo &quot;the &apos;--&apos; switch and/or first branch are passed to the branch that&quot;
+  echo &quot;follows them.  Commonly used system properties include:&quot;
+  echo 
+  echo &quot;     org.apache.avro.io.perf.count -- the number of elements&quot;
+  echo &quot;generated for the inner-most loop of the performance test.  Defaults&quot;
+  echo &quot;to 250K.  Must be a multple of 4.&quot;
+  echo
+  echo &quot;     org.apache.avro.io.perf.cycles -- the number of times the inner-&quot;
+  echo &quot;most loop is called within an invocation of Perf.java.  Defaults&quot;
+  echo &quot; to 800.&quot;
+  echo 
+  echo &quot;     org.apache.avro.io.perf.use-direct -- use DirectBinaryEncoder instead&quot;
+  echo &quot;of BufferedBinaryEncoder for write tests.  It is slower, but performance-wise&quot;
+  echo &quot;it can be more consistent, which helps when trying to detect small performance&quot;
+  echo &quot;improvements.&quot;
+  echo
+  echo &quot;     org.apache.avro.specific.use_custom_coders -- flag that turns on&quot;
+  echo &quot; the use of the custom-coder optimization in the SpecificRecord tests.&quot;
+  echo &quot;Defaults to &apos;false;&apos; set to &apos;true&apos; to turn them on.&quot;
+  echo 
+  echo &quot;Trials, as indicated, are branches in git.  The branch_i arguments&quot;
+  echo &quot; indicate which what branches make up a trial.  The first of these&quot;
+  echo &quot;(branch_1) is considered the \&quot;baseline\&quot; trial: it&apos;s the trial&quot;
+  echo &quot;that all the others are compared against.  (However, if the --skip-one&quot;
+  echo &quot;is provided, the result from the first trial is ignored and the second&quot;
+  echo &quot;becomes the baseline.)&quot;
+  echo
+  echo &quot;Each trial has a name as well as a branch.  By default, the name of&quot;
+  echo &quot;the branch is the name of the trial, but an explicit name can be given&quot;
+  echo &quot;by suffixing the branch name with a trial name (e.g., &apos;foo:bar&apos; will&quot;
+  echo &quot;use the branch &apos;foo&apos; for a trial, but the trial will be named &apos;bar&apos;).&quot;
+  echo &quot;Trials must have unique names, so when multiple trials are run off the&quot;
+  echo &quot;same branch, explicit trial names must be used.&quot;
+  echo
+  echo &quot;In addition to writing &apos;summary.csv&apos;, this script outputs other files,&quot;
+  echo &quot;allowing you to analyze the granular results of a test run.  The file&quot;
+  echo &quot;results.csv contains a row per test in Perf.java.  Each column&quot;
+  echo &quot;contains the result of a single run of Perf.java.  If N is the&quot;
+  echo &quot;number of iterations in a trial, then the first N columns are the&quot;
+  echo &quot;results from the individual iterations of the first trial, the&quot;
+  echo &quot;next N are the results from the second trial, and so forth.  In&quot;
+  echo &quot;addition, for each branch B being tested, there are multiple&quot;
+  echo &quot;files &apos;B_i.csv&apos; for each iteration i in the trial.  These per-trial&quot;
+  echo &quot;files have two columns, the first being the name of the test, the&quot;
+  echo &quot;second being the result of that test.  Thus, &apos;result.csv&apos; is the&quot;
+  echo &quot;result of joining these per-trial files on the trial-name, and&quot;
+  echo &quot;summary.csv averages (or takes the minimum) of these per-trial&quot;
+  echo &quot;results, and adds the comparison column.&quot;
+  echo
+  echo &quot;If the --only-combine flag is given, then the script will assume&quot;
+  echo &quot;that the B_i files have been generated, and will simply join them&quot;
+  echo &quot;to compute results.csv and summary.csv.  This allows you to debug&quot;
+  echo &quot;the code that combines these files without having to wait around&quot;
+  echo &quot;for Perf.java to be run a bunch of times.&quot;
+}
&lt;p&gt;+&lt;br/&gt;
+if [[ &quot;$1&quot; == &quot;--help&quot; ]]; then&lt;br/&gt;
+  usage&lt;br/&gt;
+  exit 0&lt;br/&gt;
+fi&lt;br/&gt;
+&lt;br/&gt;
+if [[ ! `pwd` =~ java/ipc ]]; then&lt;br/&gt;
+  echo &quot;Must be run from lang/java/ipc&quot;&lt;br/&gt;
+  echo &quot;Type `basename $0` --help for help&quot;&lt;br/&gt;
+  exit 1&lt;br/&gt;
+fi&lt;br/&gt;
+&lt;br/&gt;
+TEST=&quot;-c nt&quot;&lt;br/&gt;
+EXTRA_CLI=&quot;&quot;&lt;br/&gt;
+OUT=&quot;.&quot;&lt;br/&gt;
+SKIP_ONE=&quot;false&quot;&lt;br/&gt;
+STATIC_SYSPROPS=()&lt;br/&gt;
+ITERS=4&lt;br/&gt;
+&lt;br/&gt;
+# DBG=echo&lt;br/&gt;
+&lt;br/&gt;
+function Perf_java {&lt;br/&gt;
+  local fname=$1&lt;br/&gt;
+  shift&lt;br/&gt;
+&lt;br/&gt;
+  if [[ &quot;$DBG&quot; != &quot;&quot; ]]; then&lt;br/&gt;
+    $DBG MAVEN_OPTS=-server mvn exec:java -Dexec.classpathScope=test \&lt;br/&gt;
+      -Dexec.mainClass=org.apache.avro.io.Perf ${STATIC_SYSPROPS&lt;span class=&quot;error&quot;&gt;&amp;#91;@&amp;#93;&lt;/span&gt;} \&lt;br/&gt;
+      -Dexec.args=&quot;${TEST} -o ${fname} ${EXTRA_CLI}&quot; \&lt;br/&gt;
+      $@&lt;br/&gt;
+  else&lt;br/&gt;
+    mvn exec:java -Dexec.classpathScope=test \&lt;br/&gt;
+      -Dexec.mainClass=org.apache.avro.io.Perf ${STATIC_SYSPROPS&lt;span class=&quot;error&quot;&gt;&amp;#91;@&amp;#93;&lt;/span&gt;} \&lt;br/&gt;
+      -Dexec.args=&quot;${TEST} -o ${fname} ${EXTRA_CLI}&quot; \&lt;br/&gt;
+      $@&lt;br/&gt;
+  fi&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+function run_trial {&lt;br/&gt;
+  local lastbranch=$1&lt;br/&gt;
+  local thisbranch=$2&lt;br/&gt;
+  local thistrialname=$3&lt;br/&gt;
+  shift 3&lt;br/&gt;
+&lt;br/&gt;
+  if [[ &quot;$thisbranch&quot; != &quot;$lastbranch&quot; ]]; then&lt;br/&gt;
+    $DBG git checkout $thisbranch&lt;br/&gt;
+    (cd ..; $DBG mvn clean &amp;amp;&amp;amp; $DBG mvn -pl &quot;avro,compiler,maven-plugin,ipc&quot; install -DskipTests)&lt;br/&gt;
+  fi&lt;br/&gt;
+  for i in $(seq 1 ${ITERS}); do Perf_java ${OUT}/${thistrialname}${i}.csv $@; done&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+function run_trials {&lt;br/&gt;
+  local -a allprops=( )&lt;br/&gt;
+&lt;br/&gt;
+  while (( &quot;$#&quot; )); do&lt;br/&gt;
+    case &quot;$1&quot; in&lt;br/&gt;
+      --)&lt;br/&gt;
+        break;&lt;br/&gt;
+        ;;&lt;br/&gt;
+      *)&lt;br/&gt;
+        allprops+=( $1 )&lt;br/&gt;
+        shift&lt;br/&gt;
+        ;;&lt;br/&gt;
+    esac&lt;br/&gt;
+  done&lt;br/&gt;
+&lt;br/&gt;
+  local -a thisprops=( )&lt;br/&gt;
+  local lastbranch=&quot;&quot;&lt;br/&gt;
+  local thisbranch&lt;br/&gt;
+  local thistrialname&lt;br/&gt;
+&lt;br/&gt;
+  while (( &quot;$#&quot; )); do&lt;br/&gt;
+    case &quot;$1&quot; in&lt;br/&gt;
+      --) # Ignore these&lt;br/&gt;
+        shift&lt;br/&gt;
+        ;;&lt;br/&gt;
+      -D*)&lt;br/&gt;
+        thisprops+=( $1 )&lt;br/&gt;
+        shift&lt;br/&gt;
+        ;;&lt;br/&gt;
+      *)&lt;br/&gt;
+        thisbranch=$1&lt;br/&gt;
+        thistrialname=$2&lt;br/&gt;
+        git rev-parse --verify $thisbranch&lt;br/&gt;
+        run_trial &quot;$lastbranch&quot; $thisbranch $thistrialname ${allprops&lt;span class=&quot;error&quot;&gt;&amp;#91;@&amp;#93;&lt;/span&gt;} ${thisprops&lt;span class=&quot;error&quot;&gt;&amp;#91;@&amp;#93;&lt;/span&gt;}&lt;br/&gt;
+        lastbranch=$thisbranch&lt;br/&gt;
+        thisprops=( )&lt;br/&gt;
+        shift 2&lt;br/&gt;
+        ;;&lt;br/&gt;
+    esac&lt;br/&gt;
+  done&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+function join_results {&lt;br/&gt;
+  pushd ${OUT}&lt;br/&gt;
+  local header=&quot;TestName&quot;&lt;br/&gt;
+  for b in $@; do&lt;br/&gt;
+    for i in $(seq 1 ${ITERS}); do&lt;br/&gt;
+      header=&quot;${header},${b}${i}&quot;&lt;br/&gt;
+    done&lt;br/&gt;
+  done&lt;br/&gt;
+#  echo $header &amp;gt; results.csv&lt;br/&gt;
+  if [[ &quot;$SKIP_ONE&quot; == &quot;true&quot; ]]; then shift; fi&lt;br/&gt;
+  cut -d , -f 1,2 ${1}1.csv | sort &amp;gt;&amp;gt; results.csv&lt;br/&gt;
+  if [[ 1 &amp;lt; &quot;${ITERS}&quot; ]]; then&lt;br/&gt;
+    for i in $(seq 2 ${ITERS}); do&lt;br/&gt;
+      cut -d , -f 1,2 ${1}$i.csv | sort | join -t , results.csv - &amp;gt; tmp.csv&lt;br/&gt;
+      mv tmp.csv results.csv&lt;br/&gt;
+    done&lt;br/&gt;
+  fi&lt;br/&gt;
+  shift&lt;br/&gt;
+  for b in $@; do&lt;br/&gt;
+    for i in $(seq 1 ${ITERS}); do&lt;br/&gt;
+      cut -d , -f 1,2 ${b}$i.csv | sort | join -t , results.csv - &amp;gt; tmp.csv&lt;br/&gt;
+      mv tmp.csv results.csv&lt;br/&gt;
+    done&lt;br/&gt;
+  done&lt;br/&gt;
+  popd&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+AVG=&apos;BEGIN &lt;/p&gt;
{ RS=&quot; &quot;; }
&lt;p&gt; &lt;/p&gt;
{ s += $1; n += 1; }
&lt;p&gt; END &lt;/p&gt;
{ printf &quot;%f&quot;, s/n; }
&lt;p&gt;&apos;&lt;br/&gt;
+MIN=&apos;BEGIN &lt;/p&gt;
{ RS=&quot; &quot;; m = 10000000000; }
&lt;p&gt; &lt;/p&gt;
{ if ($1 &amp;lt; m) m = $1; }
&lt;p&gt; END &lt;/p&gt;
{ printf &quot;%f&quot;, m; }
&lt;p&gt;&apos;&lt;br/&gt;
+PERCENT=&apos;&lt;/p&gt;
{ printf &quot;%f&quot;, 100*($1-$2)/$1; }
&lt;p&gt;&apos;&lt;br/&gt;
+&lt;br/&gt;
+function print_line {&lt;br/&gt;
+  local line=$1&lt;br/&gt;
+  shift&lt;br/&gt;
+  local awks&lt;br/&gt;
+  if [[ &quot;$TEST&quot; == &quot;-c nt&quot; ]]; then awks=&quot;$AVG&quot;; else awks=&quot;$MIN&quot;; fi&lt;br/&gt;
+&lt;br/&gt;
+  local -a results=( )&lt;br/&gt;
+  for t in ${trials&lt;span class=&quot;error&quot;&gt;&amp;#91;*&amp;#93;&lt;/span&gt;}; do&lt;br/&gt;
+    local result=&quot;&quot;&lt;br/&gt;
+    for i in $(seq 1 $ITERS); do&lt;br/&gt;
+      result=&quot;$result $1&quot;&lt;br/&gt;
+      shift&lt;br/&gt;
+    done&lt;br/&gt;
+    result=$(echo $result | awk &quot;$awks&quot;)&lt;br/&gt;
+    results+=( $result )&lt;br/&gt;
+    line=&quot;${line},${result}&quot;&lt;br/&gt;
+  done&lt;br/&gt;
+&lt;br/&gt;
+  local baseline=0&lt;br/&gt;
+  if [[ &quot;$SKIP_ONE&quot; == &quot;true&quot; ]]; then start=1; fi&lt;br/&gt;
+  for i in $(seq `expr ${baseline} + 1` `expr ${#trials&lt;span class=&quot;error&quot;&gt;&amp;#91;*&amp;#93;&lt;/span&gt;} - 1`); do&lt;br/&gt;
+    result=$(echo &quot;${results&lt;span class=&quot;error&quot;&gt;&amp;#91;$baseline&amp;#93;&lt;/span&gt;} ${results&lt;span class=&quot;error&quot;&gt;&amp;#91;$i&amp;#93;&lt;/span&gt;}&quot; | awk &quot;$PERCENT&quot;)&lt;br/&gt;
+    line=&quot;${line},${result}&quot;&lt;br/&gt;
+  done&lt;br/&gt;
+  echo &quot;$line&quot;&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+###&lt;br/&gt;
+### ACTUAL SCRIPT STARTS HERE&lt;br/&gt;
+###&lt;br/&gt;
+&lt;br/&gt;
+declare command=&quot;$0 $*&quot;&lt;br/&gt;
+declare onlycombine=&quot;false&quot;&lt;br/&gt;
+declare -a run_trials_args=( )&lt;br/&gt;
+declare -a trials=( )&lt;br/&gt;
+&lt;br/&gt;
+while (( &quot;$#&quot; )); do&lt;br/&gt;
+  case &quot;$1&quot; in&lt;br/&gt;
+    --help)&lt;br/&gt;
+      usage&lt;br/&gt;
+      exit&lt;br/&gt;
+      ;;&lt;br/&gt;
+    --min)&lt;br/&gt;
+      TEST=&quot;-c nm&quot;&lt;br/&gt;
+      shift&lt;br/&gt;
+      ;;&lt;br/&gt;
+    --out-dir)&lt;br/&gt;
+      if [[ $OUT != &quot;.&quot; ]]; then&lt;br/&gt;
+        echo &quot;Cannot use --out-dir twice.&quot;&lt;br/&gt;
+        echo &quot;Type `basename $0` --help for help&quot;&lt;br/&gt;
+        exit 1&lt;br/&gt;
+      fi&lt;br/&gt;
+      OUT=$2&lt;br/&gt;
+      mkdir -p $OUT&lt;br/&gt;
+      shift 2&lt;br/&gt;
+      ;;&lt;br/&gt;
+    --iters)&lt;br/&gt;
+      ITERS=$2&lt;br/&gt;
+      shift 2&lt;br/&gt;
+      ;;&lt;br/&gt;
+    --only-combine)&lt;br/&gt;
+      onlycombine=&quot;true&quot;&lt;br/&gt;
+      shift&lt;br/&gt;
+      ;;&lt;br/&gt;
+    --skip-one)&lt;br/&gt;
+      SKIP_ONE=&quot;true&quot;&lt;br/&gt;
+      shift&lt;br/&gt;
+      ;;&lt;br/&gt;
+    --perf-args)&lt;br/&gt;
+      EXTRA_CLI=$2&lt;br/&gt;
+      shift 2&lt;br/&gt;
+      ;;&lt;br/&gt;
+    -D*)&lt;br/&gt;
+      if [[ ! $1 =~ ^-D&lt;span class=&quot;error&quot;&gt;&amp;#91;^\ =&amp;#93;&lt;/span&gt;+= ]]; then&lt;br/&gt;
+        echo &quot;Bad system property: $1&quot;&lt;br/&gt;
+        echo &quot;Type `basename $0` --help for help&quot;&lt;br/&gt;
+        exit 1&lt;br/&gt;
+      fi&lt;br/&gt;
+      run_trials_args+=( $1 )&lt;br/&gt;
+      shift&lt;br/&gt;
+      ;;&lt;br/&gt;
+    --)&lt;br/&gt;
+      run_trials_args+=( $1 )&lt;br/&gt;
+      shift&lt;br/&gt;
+      ;;&lt;br/&gt;
+    --*)&lt;br/&gt;
+      echo &quot;Unknown switch: $1&quot;&lt;br/&gt;
+      echo &quot;Type `basename $0` --help for help&quot;&lt;br/&gt;
+      exit 1&lt;br/&gt;
+      ;;&lt;br/&gt;
+    *)&lt;br/&gt;
+      if [[ &quot;$1&quot; =~ ^(&lt;span class=&quot;error&quot;&gt;&amp;#91;^:&amp;#93;&lt;/span&gt;&lt;b&gt;)&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/b&gt;) ]]; then&lt;br/&gt;
+        thisbranch=${BASH_REMATCH&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;}&lt;br/&gt;
+        thistrialname=${BASH_REMATCH&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;}&lt;br/&gt;
+      else&lt;br/&gt;
+        thisbranch=$1&lt;br/&gt;
+        thistrialname=$1&lt;br/&gt;
+      fi&lt;br/&gt;
+      if [[ &quot;$thisbranch&quot; == &quot;&quot; || &quot;$thistrialname&quot; == &quot;&quot; ]]; then&lt;br/&gt;
+        echo &quot;Neither branch ($thisbranch) nor trial ($thistrialname) names may be empty&quot;&lt;br/&gt;
+        echo &quot;Type `basename $0` --help for help&quot;&lt;br/&gt;
+        exit 1&lt;br/&gt;
+      fi&lt;br/&gt;
+      if [[ &quot;${trials&lt;span class=&quot;error&quot;&gt;&amp;#91;@&amp;#93;&lt;/span&gt;}&quot; =~ $thistrialname ]]; then&lt;br/&gt;
+        echo &quot;Trial named &apos;$thistrialname&apos; is not unique&quot;&lt;br/&gt;
+        echo &quot;Type `basename $0` --help for help&quot;&lt;br/&gt;
+        exit 1&lt;br/&gt;
+      fi&lt;br/&gt;
+      trials+=( &quot;$thistrialname&quot; )&lt;br/&gt;
+      run_trials_args+=( &quot;--&quot; &quot;$thisbranch&quot; &quot;$thistrialname&quot; )&lt;br/&gt;
+      shift&lt;br/&gt;
+      ;;&lt;br/&gt;
+  esac&lt;br/&gt;
+done&lt;br/&gt;
+&lt;br/&gt;
+# Document how the outputs were generated&lt;br/&gt;
+echo &quot;$command&quot; &amp;gt; $OUT/command.txt&lt;br/&gt;
+&lt;br/&gt;
+if [[ ${onlycombine} == &quot;false&quot; ]]; then&lt;br/&gt;
+  run_trials ${run_trials_args&lt;span class=&quot;error&quot;&gt;&amp;#91;@&amp;#93;&lt;/span&gt;}&lt;br/&gt;
+fi&lt;br/&gt;
+&lt;br/&gt;
+join_results ${trials&lt;span class=&quot;error&quot;&gt;&amp;#91;@&amp;#93;&lt;/span&gt;}&lt;br/&gt;
+&lt;br/&gt;
+cat $OUT/results.csv | while read line; do&lt;br/&gt;
+  fields=( $(echo $line | tr &quot;,&quot; &quot; &quot;) )&lt;br/&gt;
+  print_line &quot;${fields&lt;span class=&quot;error&quot;&gt;&amp;#91;@&amp;#93;&lt;/span&gt;}&quot;&lt;br/&gt;
+done &amp;gt; $OUT/summary.csv&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16699401" author="jira-bot" created="Mon, 26 Nov 2018 18:27:43 +0000"  >&lt;p&gt;Commit fe58b5a5d434c60bf3971a5dce4079bde33363d7 in avro&apos;s branch refs/heads/master from rstata&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=fe58b5a&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=fe58b5a&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt; Make Perf.java more usable.&lt;/p&gt;</comment>
                            <comment id="16699402" author="jira-bot" created="Mon, 26 Nov 2018 18:27:45 +0000"  >&lt;p&gt;Commit 2950a10eb9bbaf4f6a52f4692f6a151e00997cd1 in avro&apos;s branch refs/heads/master from rstata&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=2950a10&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=2950a10&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2269&quot; title=&quot;Improve usability of Perf.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2269&quot;&gt;AVRO-2269&lt;/a&gt; More documentation for using Perf.java&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="13198769">AVRO-2268</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 16 Nov 2018 02:36:03 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|s00kaw:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2270] Can not set non-null type default value for auto generated Arvo schema with fields have null type</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2270</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description></description>
                <environment></environment>
        <key id="13198908">AVRO-2270</key>
            <summary>Can not set non-null type default value for auto generated Arvo schema with fields have null type</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.svg">Trivial</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="6">Invalid</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="qingwang0107">Qing Wang</reporter>
                        <labels>
                    </labels>
                <created>Fri, 16 Nov 2018 13:06:46 +0000</created>
                <updated>Fri, 16 Nov 2018 13:50:34 +0000</updated>
                            <resolved>Fri, 16 Nov 2018 13:50:22 +0000</resolved>
                                    <version>1.8.2</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|s00kxc:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
