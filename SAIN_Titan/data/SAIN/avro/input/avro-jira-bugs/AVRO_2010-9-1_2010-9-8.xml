<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:14:29 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2010-9-1+AND+created+%3C%3D+2010-9-8+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="11" total="11"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-647] Break avro.jar into avro.jar, avro-dev.jar and avro-hadoop.jar</title>
                <link>https://issues.apache.org/jira/browse/AVRO-647</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Our dependencies are starting to get a little complicated on the Java side.&lt;/p&gt;

&lt;p&gt;I propose we build two (possibly more) jars related to our major dependencies and functions.&lt;/p&gt;

&lt;p&gt;1. avro.jar  (or perhaps avro-core.jar)&lt;br/&gt;
This contains all of the core avro functionality for &lt;em&gt;using&lt;/em&gt; avro as a library.  This excludes the specific compiler, avro idl, and other build-time or development tools, as well as avro packages for third party integration such as hadoop.  This jar should then have a minimal set of dependencies (jackson, jetty, SLF4J ?).&lt;/p&gt;

&lt;p&gt;2. avro-dev.jar&lt;br/&gt;
This would contain compilers, idl, development tools, etc.  Most applications will not need this, but build systems and developers will.&lt;/p&gt;

&lt;p&gt;3. avro-hadoop.jar&lt;br/&gt;
This would contain the hadoop API and possibly pig/hive/whatever related to that.  This makes it easier for pig/hive/hadoop to consume avro-core without circular dependencies. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12472990">AVRO-647</key>
            <summary>Break avro.jar into avro.jar, avro-dev.jar and avro-hadoop.jar</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="scott_carey">Scott Carey</assignee>
                                    <reporter username="scott_carey">Scott Carey</reporter>
                        <labels>
                    </labels>
                <created>Wed, 1 Sep 2010 01:25:04 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:51 +0000</updated>
                            <resolved>Thu, 16 Dec 2010 00:40:39 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                            <comments>
                            <comment id="12904864" author="philip" created="Wed, 1 Sep 2010 01:35:31 +0000"  >&lt;p&gt;Definitely +1 to the idea.&lt;/p&gt;</comment>
                            <comment id="12904866" author="scott_carey" created="Wed, 1 Sep 2010 01:37:50 +0000"  >&lt;p&gt;Thoughts?&lt;/p&gt;

&lt;p&gt;I know how to do the above with Maven directly, but I&apos;m not as familiar with Ivy.  Would we need one ivy.xml files per jar/pom combination we want to build?  For some things this clearly breaks up by package:&lt;/p&gt;

&lt;p&gt;o.a.a.mapred&lt;br/&gt;
o.a.a.mapred.tether &lt;br/&gt;
o.a.a.pig&lt;br/&gt;
 &amp;gt;&amp;gt;&amp;gt; avro-hadoop.jar&lt;/p&gt;

&lt;p&gt;But some things such as the dev tools would be more difficult.  I&apos;m not sure we would choose to separate those from core.   We could instead specify the dev dependencies such as javacc as &apos;optional&apos; in the pom / &apos;transisive=false&apos; in ivy.&lt;/p&gt;

&lt;p&gt;Two things jump out as definitely important to separate:&lt;br/&gt;
1. Hadoop, etc.&lt;br/&gt;
2. A future maven plugin for idl/specific compilers.&lt;/p&gt;

&lt;p&gt;Before I add a pig dependency I&apos;d like to sort out our packaging and dependency strategy here.&lt;/p&gt;</comment>
                            <comment id="12904876" author="scott_carey" created="Wed, 1 Sep 2010 02:22:36 +0000"  >&lt;p&gt;So this is a rundown of what I know of the dependencies and what features use them:&lt;/p&gt;

&lt;p&gt;core requirements:&lt;br/&gt;
jackson &amp;#8211; JSON&lt;br/&gt;
SLF4J &amp;#8211; logging&lt;br/&gt;
jetty &amp;#8211; HTTP transport&lt;br/&gt;
netty &amp;#8211; Socket transport&lt;/p&gt;

&lt;p&gt;development:&lt;br/&gt;
javacc&lt;/p&gt;

&lt;p&gt;tools:&lt;br/&gt;
commons-httpclient&lt;br/&gt;
jopt-simple&lt;/p&gt;

&lt;p&gt;build/test only:&lt;br/&gt;
junit&lt;br/&gt;
maven&lt;br/&gt;
ant-eclipse&lt;br/&gt;
rat&lt;br/&gt;
checkstyle&lt;/p&gt;

&lt;p&gt;I&apos;m not sure &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; :&lt;br/&gt;
paranamer&lt;br/&gt;
velocity&lt;br/&gt;
commons-lang&lt;/p&gt;</comment>
                            <comment id="12905063" author="cutting" created="Wed, 1 Sep 2010 15:44:11 +0000"  >&lt;p&gt;A breakdown by use-case might be:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;avro-data (core &amp;amp; data files)&lt;/li&gt;
	&lt;li&gt;avro-rpc (includes netty, jetty) depends on avro-data&lt;/li&gt;
	&lt;li&gt;avro-mapred (mapreduce APIs) depends on avro-data&lt;/li&gt;
	&lt;li&gt;avro-mapred-tether (RPC-based mapred API) depends on avro-mapred &amp;amp; avro-rpc&lt;/li&gt;
	&lt;li&gt;avro-dev (specific &amp;amp; idl compiler, ant tasks) depends on avdo-data&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;About dependencies:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;paranamer is used by reflect, to get the names of method parameters.  Perhaps avro-reflect should be made a separate jar?&lt;/li&gt;
	&lt;li&gt;velocity is used by RPC stats charting stuff and by &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-648&quot; title=&quot;Use a template library for the SpecificCompiler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-648&quot;&gt;&lt;del&gt;AVRO-648&lt;/del&gt;&lt;/a&gt; (template-based specific compiler)&lt;/li&gt;
	&lt;li&gt;commons-lang is used by the IDL compiler for StringEscapeUtils&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If we separate jars, it might be good to split the build-time classpath in the same manner, by splitting the src tree.  The build order would then be: data, mapred, dev, rpc, mapred-tether, since rpc depends on dev to compile the handshake.  Note that this would split packages among trees, as specific has some data classes and some rpc classes.&lt;/p&gt;

&lt;p&gt;Finally, to be clear, is there a motive for this beyond better expressing dependencies?  Functionally sticking everything in a single jar with lots of optional dependencies works fine, but folks then have to guess which dependencies they actually need, and that&apos;s the primary problem this seeks to solve.  Is that right, or are there other problems too?&lt;/p&gt;</comment>
                            <comment id="12905085" author="philip" created="Wed, 1 Sep 2010 16:43:42 +0000"  >&lt;p&gt;I may be missing something: what&apos;s http-client used for in the tools category?&lt;/p&gt;</comment>
                            <comment id="12905124" author="scott_carey" created="Wed, 1 Sep 2010 18:13:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;Finally, to be clear, is there a motive for this beyond better expressing dependencies? Functionally sticking everything in a single jar with lots of optional dependencies works fine, but folks then have to guess which dependencies they actually need, and that&apos;s the primary problem this seeks to solve. Is that right, or are there other problems too?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That is the main case here.  Dependendies become more explicit.  Users should be able to consume the parts they need without too much accidental baggage.  Instead, we could simply document this all clearly so that users are armed with the information necessary to configure their builds to exclude transitive dependencies they don&apos;t use.&lt;/p&gt;

&lt;p&gt;However, Avro is by nature something that many things will depend on, and many of those things portions of Avro might itself depend on.  In particular, making it easy to avoid circular dependencies is a plus.  As we have seen (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-545&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-545&lt;/a&gt;) , even if it is possible to use ivy/maven features to prevent circular dependency, it makes users uneasy.&lt;/p&gt;

&lt;p&gt;The guidelines I use for my projects is two-fold:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If the cascaded set of dependencies is large and likely to conflict with other things, it should be easy to separate (for Avro, this is the hadoop dependency).&lt;/li&gt;
	&lt;li&gt;If the dependency is physically large (large jar file), consider making it easy to separate.&lt;/li&gt;
	&lt;li&gt;If the dependency is for a minor rarely used feature, be careful.  For example Jackson 1.0.1 being used by hadoop 0.20+ for dumping configuration files to JSON causes problems.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So for the case of Reflect, if paranamer doesn&apos;t have a lot of cascaded dependencies itself, nor is a large jar on its own, then including it in avro-data is not going to be a big deal.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If we separate jars, it might be good to split the build-time classpath in the same manner, by splitting the src tree. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We have three choices, I think:&lt;br/&gt;
1.  Leave the source tree as-is, and have the build use ant file excludes/includes to define what is packaged in each one.   Managing the excludes/includes will be troublesome and would be easier if the split was cleanly done by package.  Not much else would have to change &amp;#8211; the compile and test phases would stay the same.  There would also be the downside that tests would not implicitly test the packaging boundaries.&lt;br/&gt;
2.  Break it into different source trees and continue using ant/ivy.  This is more work and means we would be breaking up tests and compile phases too.&lt;br/&gt;
3.  Break it into different source trees and use maven.  Maven is a natural fit for this sort of thing and I&apos;m experienced with it, but it is not trivial and others here aren&apos;t as familiar with it.  To wire up IDL and the Specific compiler,  Maven plugins would be required.  Interop testing would probably still require ant. &lt;/p&gt;</comment>
                            <comment id="12905131" author="philip" created="Wed, 1 Sep 2010 18:22:13 +0000"  >&lt;p&gt;If you go the mvn route (the one thing I love about maven is that it reliably puts the sources of the jars we depend on in my Eclipse workspace), &lt;a href=&quot;http://github.com/phunt/avro-maven-plugin&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/phunt/avro-maven-plugin&lt;/a&gt; handles some of the specific stuff.&lt;/p&gt;</comment>
                            <comment id="12905134" author="scott_carey" created="Wed, 1 Sep 2010 18:30:00 +0000"  >&lt;p&gt;Yeah, I&apos;m actually using a custom avro-maven-plugin based on the earlier versions of that for my build (the early versions did not compile avsc, only avpr).  So that part should not be too hard.   It would be a very radical change from ant/ivy though and there are bound to be some tricky things in a big change like that. &lt;/p&gt;</comment>
                            <comment id="12905172" author="cutting" created="Wed, 1 Sep 2010 19:24:07 +0000"  >&lt;p&gt;&amp;gt; Instead, we could simply document this all clearly so that users are armed with the information necessary to configure their builds to exclude transitive dependencies they don&apos;t use.&lt;/p&gt;

&lt;p&gt;That might be a useful short-term strategy: make more dependencies optional and document which features require what dependencies.&lt;/p&gt;</comment>
                            <comment id="12912721" author="scott_carey" created="Mon, 20 Sep 2010 21:26:34 +0000"  >&lt;p&gt;Are there any strong feelings on the three choices above?  To some extent I favor just going all the way to a maven build.  That makes dependency management easy, but does add baggage otherwise and is a learning curve for some. &lt;/p&gt;

</comment>
                            <comment id="12912725" author="philip" created="Mon, 20 Sep 2010 21:40:54 +0000"  >&lt;p&gt;I would be +1 full-maven for Java.  Amongst the evils available, it&apos;s one of the least objectionable.  I&apos;m using it on another project now, and, well, I hate that I don&apos;t know what it&apos;s doing half the time, but it removes a considerable amount of the Ivy and Ant boilerplate.&lt;/p&gt;</comment>
                            <comment id="12912745" author="cutting" created="Mon, 20 Sep 2010 22:13:34 +0000"  >&lt;p&gt;I&apos;m +0 for a full-Maven Java build.  I&apos;d not oppose if someone else implements it, it&apos;s easy to maintain, supports what&apos;s required, etc.&lt;/p&gt;

&lt;p&gt;If I were to do it myself, I&apos;d probably use Ant, split the tree in four (core, idl+rpc, mapred, tools), have each import a shared build.xml file then have a top-level build.xml that calls the others.  I would be willing to do this over the coming month if no one else volunteers.&lt;/p&gt;

&lt;p&gt;But if someone else (Scott?, Philip?) volunteers to implement this using Maven, I&apos;d not get in their way.&lt;/p&gt;

&lt;p&gt;&amp;gt; To wire up IDL and the Specific compiler, Maven plugins would be required. Interop testing would probably still require ant.&lt;/p&gt;

&lt;p&gt;Can you please explain these more?&lt;/p&gt;</comment>
                            <comment id="12912771" author="scott_carey" created="Mon, 20 Sep 2010 23:15:39 +0000"  >&lt;p&gt;It sounds like there is at least consensus to split the source tree up.  This will make either Ant or Maven easier to deal with to get the job done.   So that rules out #1.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;gt; To wire up IDL and the Specific compiler, Maven plugins would be required. Interop testing would probably still require ant.&lt;/p&gt;

&lt;p&gt;Can you please explain these more?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;IDL and the Specific compiler depend on Avro core to run.  We have a multi-step build:  build classes that don&apos;t &lt;/p&gt;
{depends.on.generated} then generate some stuff, then build those classes.&lt;br/&gt;
&lt;br/&gt;
In maven, its not strictly required, but very difficult, to do something like the above without declaring the dependency and making it its own artifact.  Basically, the easy way is to split things up into core, rpc, idl, mapred, and tools and build them in the right order as separate components with explicit dependencies.&lt;br/&gt;
The easy way to do code generation is to make a maven plugin like &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-159&quot; title=&quot;maven-avro-plugin: Allow maven builds to use avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-159&quot;&gt;&lt;del&gt;AVRO-159&lt;/del&gt;&lt;/a&gt; and use it in the build.  Fortunately, that means that Maven plugins for Specific and IDL are part of our own build and thus natural for us to maintain.&lt;br/&gt;
&lt;br/&gt;
I have made a pom.xml that will build avro, but it excludes the {depends.on.generated}
&lt;p&gt; stuff and doesn&apos;t do any tests that require code generation or interop.&lt;/p&gt;

&lt;p&gt;I haven&apos;t looked at how to do interop testing yet, but it seems like something that is at a higher level than the Java build.  Maven doesn&apos;t naturally pull data from anywhere that is not within the project or a declared artifact.   That might end up being easier to wire up with the other language builds using ant or shell scripts.&lt;/p&gt;</comment>
                            <comment id="12912786" author="philip" created="Tue, 21 Sep 2010 00:13:02 +0000"  >&lt;p&gt;To be clear, I&apos;m too much of a maven incompetent to volunteer.  I would be happy to test it out after the fact, though.&lt;/p&gt;

&lt;p&gt;BTW, it would be totally acceptable and desirable for the maven plugins for avro code generation to be part of Avro&apos;s build.  Patrick, who wrote the plugin, would be happy to contribute it, if he hasn&apos;t already.  That solves a versioning problem for the plugin, too.&lt;/p&gt;</comment>
                            <comment id="12912794" author="scott_carey" created="Tue, 21 Sep 2010 01:00:47 +0000"  >&lt;p&gt;I think what is key here is whether the maintenance can be shared easily.  Only one person has to build this out (me for Maven, or likely Doug if Ant/Ivy).&lt;/p&gt;

&lt;p&gt;Both take significantly less effort or expertise to modify and tweak once its mostly set up.&lt;/p&gt;

&lt;p&gt;Even if we go with Maven,  Ant will be around to deal with things Maven doesn&apos;t do well.  They are complimentary tools.&lt;/p&gt;

&lt;p&gt;At this point I&apos;ve got Maven working as far as it will easily go without moving source trees around and splitting up the build.  That is a significantly larger time investment.  It doesn&apos;t look too difficult to keep going however.&lt;/p&gt;
</comment>
                            <comment id="12913116" author="scott_carey" created="Tue, 21 Sep 2010 17:52:12 +0000"  >&lt;p&gt;More experimentation on the Avro front has brought out some interesting quirks in our dependencies.&lt;/p&gt;


&lt;p&gt;1.  I&apos;m not sure it makes sense to separate IDL and Specific from Core.   It turns out that the only extra library required as a runtime dependency for those two is commons-lang, and the &lt;em&gt;one&lt;/em&gt; class and method used there we could simply copy into our code to avoid the dependency.   Javacc is a build time only dependency that should not show up in our POM at all.   Paranamer-ant is the same.  Both have Maven plugins.  The upcoming templating version of SpecificCompiler might change what we want to do though.&lt;/p&gt;

&lt;p&gt;2.  A LOT of our testing requires use of the Specific Compiler.  Most of the ipc package depends on output of the Specific Compiler to compile; Requestor/Responder are at the heart of that.  This would require that these be in a separate artifact.   The Maven artifacts would be &lt;/p&gt;

&lt;p&gt;avro-core (possibly with IDL)&lt;br/&gt;
avro-compile (optional, current version can be in core, template based one may require separation or shading)&lt;br/&gt;
avro-maven-plugin (Maven plugins for idl, specific compiler; depends on core and compile)&lt;br/&gt;
avro-ant  (the two classes for Ant tasks; depends on core, compile)&lt;br/&gt;
avro-ipc  (IPC  w/ netty/jetty; depends on core, compile, uses maven-plugin;  most testing is not possible until here!)&lt;br/&gt;
avro-mapred (including tether, or that separate?)&lt;br/&gt;
avro-tools&lt;/p&gt;


&lt;p&gt;That is a lot of stuff, but really only 4 libraries that others can depend on, two build tools, and one command-line tool. &lt;br/&gt;
The part that is a bit of a problem is that most of our testing of core can&apos;t happen in the core project because of its dependencies on specific compiler output. &lt;/p&gt;</comment>
                            <comment id="12913184" author="philip" created="Tue, 21 Sep 2010 19:06:30 +0000"  >&lt;p&gt;BTW, I don&apos;t know how easy it is to separate (I suspect not easy), but separating specific, generic, and reflect is meaningful.&lt;/p&gt;

&lt;p&gt;For testing, I think it&apos;s not harmful, in large part, for the test targets to depend on everything.&lt;/p&gt;</comment>
                            <comment id="12913198" author="scott_carey" created="Tue, 21 Sep 2010 19:29:40 +0000"  >&lt;p&gt;Do you mean separating out all three from the &apos;inner&apos; decoder/encoder/schema layer?  Or separating out those individually?&lt;/p&gt;

&lt;p&gt;Separating Specific from the rest was easy.  However, it turned out to only be a handful of classes without external dependencies, so there wasn&apos;t much of a point.&lt;/p&gt;

&lt;p&gt;There are also dependencies on the o.a.a.ipc package from all over the place due to having utility classes there that should be in .util instead.   I think what I might try to do first is some refactoring to clean up that sort of stuff.&lt;/p&gt;</comment>
                            <comment id="12913211" author="cutting" created="Tue, 21 Sep 2010 19:57:11 +0000"  >&lt;p&gt;&amp;gt; separating specific, generic, and reflect is meaningful.&lt;/p&gt;

&lt;p&gt;I agree they&apos;re logically separate, but I think we want to avoid slicing things into 20 logically distinct jars.&lt;/p&gt;

&lt;p&gt;&amp;gt; There are also dependencies on the o.a.a.ipc package from all over the place due to having utility classes there that should be in .util instead. [ ... ]&lt;/p&gt;

&lt;p&gt;Which classes are you thinking of?  I think we should resist the tendency to move things into util when we can&apos;t figure out where they belong.&lt;/p&gt;

&lt;p&gt;Generic, specific and reflect all depend on ipc for Requestor and Responder.  The complicated bit is that ipc depends on the specific compiler for Handshake&lt;/p&gt;
{Request,Response}
&lt;p&gt;.  So perhaps &lt;/p&gt;
{Generic,Specific,Reflect}
{Requestor,Responder}
&lt;p&gt; should all move to ipc to remove that circularity.  That would make the build easier.&lt;/p&gt;</comment>
                            <comment id="12913250" author="scott_carey" created="Tue, 21 Sep 2010 21:02:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;Which classes are you thinking of?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ByteBufferInputStream and ByteBufferOutputStream are used by BinaryDecoder and BinaryEncoder and we should consider moving them to util or io.&lt;br/&gt;
AvroRemoteException is referenced in many places as well.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Generic, specific and reflect all depend on ipc for Requestor and Responder. The complicated bit is that ipc depends on the specific compiler for Handshake&lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {Request,Response}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;. So perhaps &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {Generic,Specific,Reflect}&lt;/span&gt; &lt;/div&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {Requestor,Responder}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt; should all move to ipc to remove that circularity. That would make the build easier.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In order to make a &apos;core&apos; library I moved Requestor and Responder to avro-ipc.  It was the cleanest break that allowed the Generic/Specific/Reflect API to otherwise remain.&lt;/p&gt;

&lt;p&gt;Moving them all to ipc doesn&apos;t remove the circularity, you still can&apos;t build Requestor/Responder without first building SpecificCompiler and generating classes.   With Specific in &apos;core&apos; ant tasks / maven plugins for the SpecificCompiler can be built off of core, and then ipc can be built after generating the classes that Requestor/Responder need using the just-built ant/maven tool.&lt;/p&gt;

&lt;p&gt;Unless we figure out how to extract the dependency on generated code in Requestor/Responder (wrappers?), it looks like we have to build the SpecificCompiler before Requestor/Responder. &lt;/p&gt;</comment>
                            <comment id="12913276" author="cutting" created="Tue, 21 Sep 2010 21:54:54 +0000"  >&lt;p&gt;&amp;gt; ByteBufferInputStream and ByteBufferOutputStream are used by BinaryDecoder and BinaryEncoder and we should consider moving them to util or io.&lt;/p&gt;

&lt;p&gt;Those should perhaps move to the io package.&lt;/p&gt;

&lt;p&gt;&amp;gt; In order to make a &apos;core&apos; library I moved Requestor and Responder to avro-ipc.&lt;/p&gt;

&lt;p&gt;You moved these along with the various implementations of Requestor and Responder, so the jar splits don&apos;t correspond to java packages, right?  If we embrace that approach generally, then we wouldn&apos;t move any classes to different packages at this stage.  Rather the different trees and jars can overlap in the java packages they contain.  The only incompatibility we create at this point will be in packaging, not in any APIs.  It would be good to separate API changes from packaging changes.&lt;/p&gt;

&lt;p&gt;So we&apos;d then leave ByteBufferInputStream, ByteBufferOutputStream and AvroRemoteException in the ipc package, but include them in the core jar &amp;amp; tree.&lt;/p&gt;</comment>
                            <comment id="12913281" author="scott_carey" created="Tue, 21 Sep 2010 22:18:30 +0000"  >&lt;p&gt;Yes, the path I have gone down so far has split the classes in packages amongst the jars.  Moving Requestor means moving several things that go with it.  There is no way at this time to split by package in most places.&lt;/p&gt;

&lt;p&gt;Having it be easier in a few places would be nice however.  The list of &apos;svn cp&apos; s to run before applying the patch is getting very messy!  If there are a few places where an entire package can move save for one or two classes, it might be worthwhile to move them.    specific/reflect/generic are going to be split no matter what as far as I can tell &amp;#8211; and rightfully so at this time.&lt;/p&gt;</comment>
                            <comment id="12922163" author="cutting" created="Mon, 18 Oct 2010 17:43:19 +0000"  >&lt;p&gt;Scott, are you going to be able to complete this as a Maven conversion of the Java build, or should I tackle it with Ivy &amp;amp; Ant?&lt;/p&gt;</comment>
                            <comment id="12922215" author="scott_carey" created="Mon, 18 Oct 2010 18:55:55 +0000"  >&lt;p&gt;I&apos;ll have time in the first week of November to work on it and produce a patch to review.    &lt;/p&gt;

&lt;p&gt;About half the work is shared in both solutions:   Splitting up the projects into directories, moving classes around, keeping track of all the &apos;svn mv&apos; and &apos;svn add&apos; commands that will be required.   That, in combination with figuring out some of the more complicated testing bits, is what primarily stalled me.&lt;br/&gt;
However, I think I already got past the difficult most difficult parts related to Requestor/Responder, but I won&apos;t know for sure until I try and tie the rest of it together. &lt;/p&gt;
</comment>
                            <comment id="12922229" author="cutting" created="Mon, 18 Oct 2010 20:00:54 +0000"  >&lt;p&gt;Sounds great.  Thanks for the update!&lt;/p&gt;</comment>
                            <comment id="12928427" author="scott_carey" created="Thu, 4 Nov 2010 23:43:53 +0000"  >&lt;h3&gt;&lt;a name=&quot;Avromavenbuildpatchandjarsplitup.&quot;&gt;&lt;/a&gt;Avro maven build patch and jar split-up.&lt;/h3&gt;
&lt;p&gt;This is a mostly complete patch for splitting the Java portion of the avro project up into 6 sub-projects.&lt;br/&gt;
This requires a maven plugin, and so solves &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-159&quot; title=&quot;maven-avro-plugin: Allow maven builds to use avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-159&quot;&gt;&lt;del&gt;AVRO-159&lt;/del&gt;&lt;/a&gt; and part of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-572&quot; title=&quot;Create a Maven plugin goal and Ant task to generate an avpr file from a avdl file&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-572&quot;&gt;AVRO-572&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;The project structure is as follows:&lt;/p&gt;

&lt;div class=&apos;table-wrap&apos;&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; path from lang/java &lt;/th&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; artifactId &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; name &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; artifact type &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; notes &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; / &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; avro-parent &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Avro Parent &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; pom &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; parent, inherits from Apache master pom, sets common build properties and versions &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /avro/ &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; avro &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Apache Avro &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; jar &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; discussed as &quot;avro-core&quot; previously &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /compiler/ &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; avro-compiler &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Avro Compiler &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; jar &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Avro IDL compiler and Specific compiler, including ant tasks &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /maven-plugin/ &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; avro-maven-plugin &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Avro Maven Plugin &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; maven-plugin &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Maven mojos for avpr &amp;gt; java; avsc &amp;gt; java; avdl &amp;gt; java; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /ipc/ &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; avro-ipc &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Avro IPC &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; jar &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Avro IPC components, protocols, trancievers, etc &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /mapred/ &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; avro-mapred &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Avro Mapred API &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; jar &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; An org.apache.hadoop.mapred API using Avro serialization &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /tools/ &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; avro-tools &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Avro Tools &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; jar (with dependencies) &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; A single jar containing all of Avro and dependencies, with command line tools &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;


&lt;h4&gt;&lt;a name=&quot;Status&quot;&gt;&lt;/a&gt;Status&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;Compiles, all tests run other than some IPC ones I need help with.  Those don&apos;t work for me (and have not for 6+ months on my machine).&lt;/li&gt;
	&lt;li&gt;This is not integrated with the other language builds yet.  There is a little work left there to tie the master buld to this.&lt;/li&gt;
	&lt;li&gt;This does not yet delete the old directory structure, so side-by-side comparrison is possible.&lt;/li&gt;
	&lt;li&gt;There are other changes / enhancements to the build and test process that can leverage this.  I&apos;m trying to get a commit done with the basics soon, we can open other tickets up for cleanup and enhancements.  This is a big checkin with guaranteed merge issues.  If we can get most of it in, that will solve the merge difficulties.&lt;/li&gt;
	&lt;li&gt;I have not gotten the &apos;with dependencies&apos; part of avro-tools copmlete,  that should not block reviewers from having a look.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;&lt;a name=&quot;PatchingInstructions&quot;&gt;&lt;/a&gt;Patching Instructions&lt;/h3&gt;
&lt;p&gt;Example instructions.  Change to the lang/java directory, run the shell script, then the patch, then add the new items.  The patch and script is based off of lang/java.&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;$ cd lang/java
$ ./migrateAvro.sh
$ patch -p0 &amp;lt; ../../AVR0-647.patch
$ svn add pom.xml avro/pom.xml compiler/pom.xml maven-plugin/pom.xml ipc/pom.xml mapred/pom.xml tools/pom.xml
$ svn add maven-plugin/src/main/java/org/apache/avro/mojo/*
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;&lt;a name=&quot;BuildingInstructions%3Acommandline&quot;&gt;&lt;/a&gt;Building Instructions: command-line&lt;/h3&gt;

&lt;p&gt;To clean build all components without testing and install them in your local repository:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;$ mvn clean install -Dtest=false -DfailIfNoTests=false
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To compile only:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;$ mvn compile
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To run tests:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;$ mvn test
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To install to local repo, including running tests:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;$ mvn install
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Other useful mvn commands:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;$ mvn clean
$ mvn validate
$ mvn help:effective-pom
$ mvn site
$ mvn generate-resources
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To download all available javadoc and source of dependent projects into your local repo:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;$ mvn dependency:resolve -Dclassifier=javadoc
$ mvn dependency:resolve -Dclassifier=sources
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;&lt;a name=&quot;BuildingInstructions%3AEclipse&quot;&gt;&lt;/a&gt;Building Instructions: Eclipse&lt;/h3&gt;
&lt;p&gt;Use Eclipse 3.6 Helios: &lt;a href=&quot;http://www.eclipse.org/downloads/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.eclipse.org/downloads/&lt;/a&gt;&lt;br/&gt;
Use the m2Eclipse plugin, latest version.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Load the projects into the workspace using the &quot;Import ...&quot; dialog, and select &quot;Existing Maven Projects&quot;&lt;/li&gt;
	&lt;li&gt;Select the lang/java directory, and it should show all 7 projects including the parent.  Import all of these.&lt;/li&gt;
	&lt;li&gt;After the load and first build, it will not completely compile.  To fix it up to compile, select all of the projects and right-click.  Select &lt;b&gt;Maven &amp;gt; Update Project Configuration&lt;/b&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;&lt;a name=&quot;Moremaveninformation%3A&quot;&gt;&lt;/a&gt;More maven information:&lt;/h4&gt;

&lt;p&gt;These are a good start:&lt;br/&gt;
&lt;a href=&quot;http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://maven.apache.org/guides/introduction/introduction-to-the-pom.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/guides/introduction/introduction-to-the-pom.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For those new and experienced, &quot;Maven By Example&quot; is a very good intro &amp;#8211; especially chapters 3+&lt;br/&gt;
&lt;a href=&quot;http://www.sonatype.com/books/mvnex-book/reference/public-book.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.sonatype.com/books/mvnex-book/reference/public-book.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apache&apos;s maven policies, tips, etc:&lt;br/&gt;
&lt;a href=&quot;http://www.apache.org/dev/publishing-maven-artifacts.html#inherit-parent&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/dev/publishing-maven-artifacts.html#inherit-parent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plugins used include:&lt;br/&gt;
&lt;a href=&quot;http://mojo.codehaus.org/javacc-maven-plugin/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mojo.codehaus.org/javacc-maven-plugin/&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://maven.apache.org/plugins/maven-surefire-plugin/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/plugins/maven-surefire-plugin/&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://maven.apache.org/plugins/maven-checkstyle-plugin/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/plugins/maven-checkstyle-plugin/&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://paranamer.codehaus.org/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://paranamer.codehaus.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other useful plugins:&lt;br/&gt;
&lt;a href=&quot;http://mojo.codehaus.org/build-helper-maven-plugin/usage.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mojo.codehaus.org/build-helper-maven-plugin/usage.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://mojo.codehaus.org/cobertura-maven-plugin/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mojo.codehaus.org/cobertura-maven-plugin/&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://maven.apache.org/plugins/maven-shade-plugin/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/plugins/maven-shade-plugin/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;&lt;a name=&quot;Documentation&quot;&gt;&lt;/a&gt;Documentation&lt;/h4&gt;
&lt;p&gt;Much of this message is preliminary documentation.  Please comment on it as well. &lt;/p&gt;</comment>
                            <comment id="12928442" author="scott_carey" created="Fri, 5 Nov 2010 00:58:01 +0000"  >&lt;p&gt;more remaining bits:&lt;/p&gt;

&lt;p&gt;adding RAT to the build.&lt;br/&gt;
&lt;a href=&quot;http://incubator.apache.org/rat/apache-rat-plugin/index.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://incubator.apache.org/rat/apache-rat-plugin/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;fixing checkstyle&lt;br/&gt;
adding the apache license header to the pom files &amp;#8211; though the parent pom build process does seem to add that somehow.&lt;/p&gt;


&lt;p&gt;more notes:&lt;br/&gt;
I had to copy a couple common test classes, we might want a build-only artifact for test-tools and test-resources.&lt;/p&gt;</comment>
                            <comment id="12928723" author="scott_carey" created="Fri, 5 Nov 2010 18:17:07 +0000"  >&lt;p&gt;Another minor detail, naming:&lt;/p&gt;

&lt;p&gt;avro-ipc or avro-rpc ?   I really don&apos;t care.&lt;br/&gt;
avro-mapred &amp;#8211; we might end up with avro-mapreduce as well for the newer api, so I stuck with the package name of the hadoop api. &lt;/p&gt;</comment>
                            <comment id="12928818" author="cutting" created="Fri, 5 Nov 2010 21:05:36 +0000"  >&lt;p&gt;&amp;gt; avro-ipc or avro-rpc ?&lt;/p&gt;

&lt;p&gt;I don&apos;t care either.  I don&apos;t think it&apos;s worth renaming the Java package, yet RPC is the better-known term and what we tend to use in documentation.  It&apos;s unfortunate to have two terms for the same thing, but I don&apos;t see how we can easily rectify that now.&lt;/p&gt;

&lt;p&gt;avro-mapred - [ ...] I stuck with the package name of the hadoop api.&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;
</comment>
                            <comment id="12935596" author="cutting" created="Thu, 25 Nov 2010 00:43:32 +0000"  >&lt;p&gt;I finally had a chance to try this.  It worries me that a bunch of tests don&apos;t pass.  I&apos;ll try to have a look more at these after the weekend.  Once we get tests passing then we should perhaps just commit this and then work hard to clean up the remaining issues ASAP afterwards.  Scott, will you have time in the next few weeks to devote to this?  I can work on it, but I&apos;m a Maven newbie.&lt;/p&gt;</comment>
                            <comment id="12964961" author="cutting" created="Mon, 29 Nov 2010 21:58:14 +0000"  >&lt;p&gt;&amp;gt;  all tests run other than some IPC ones I need help with. Those don&apos;t work for me (and have not for 6+ months on my machine)&lt;/p&gt;

&lt;p&gt;I think we should get tests to pass for you before we commit this.  Which tests fail and how?  Is there a Jira issue for this?  What platform are you running on?  If the OS is the problem, an expedient short-term alternative might be to use a VM.  Tests pass for me on Ubuntu 10.10 without problems.&lt;/p&gt;</comment>
                            <comment id="12965000" author="scott_carey" created="Mon, 29 Nov 2010 23:21:23 +0000"  >&lt;p&gt;Re: Failing tests.&lt;/p&gt;

&lt;p&gt;Mac OSX SnowLeopard (latest OSX version).  &lt;/p&gt;

&lt;p&gt;I have test failures as described at : &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-668?focusedCommentId=12910239&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12910239&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-668?focusedCommentId=12910239&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12910239&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a JIRA for one of them from a while back but its not what is blocking me now:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-644&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-644&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can work on that in another JIRA but from what I recall, we&apos;ll probably have to cooperate via irc.  For the most part it boils down to ports and/or files not being there when the tests think they should be.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    [junit] Running org.apache.avro.TestProtocolGenericMeta
    [junit] Tests run: 6, Failures: 0, Errors: 5, Time elapsed: 0.018 sec
    [junit] Error: 
    [junit] 6057 [main] INFO org.apache.avro.ipc.SocketTransceiver - open to 0.0.0.0/0.0.0.0:61911
    [junit] 6058 [Connection to /10.0.0.231:61914] INFO org.apache.avro.ipc.SocketTransceiver - open to /10.0.0.231:61914
    [junit] 6061 [Connection to /10.0.0.231:61914] INFO org.apache.avro.TestProtocolGeneric - hello: bob
    [junit] 6062 [main] INFO org.apache.avro.ipc.SocketTransceiver - closing to 0.0.0.0/0.0.0.0:61911
    [junit] 
    [junit] TEST org.apache.avro.TestProtocolGenericMeta FAILED
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and more of a problem is that many tests related to ipc hang forever.&lt;br/&gt;
At this time, I have this running indefinitely:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    [junit] Running org.apache.avro.TestProtocolHttp
    [junit] 6062 [main] INFO org.apache.avro.ipc.SocketTransceiver - closing to 0.0.0.0/0.0.0.0:61911
    [junit] 6072 [main] INFO org.apache.avro.ipc.DatagramTransceiver - sent to /127.0.0.1:11543
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;in the stack trace:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&quot;main&quot; prio=5 tid=102800800 nid=0x100501000 runnable [1004ff000]
   java.lang.Thread.State: RUNNABLE
	at sun.nio.ch.DatagramChannelImpl.receive0(Native Method)
	at sun.nio.ch.DatagramChannelImpl.receiveIntoNativeBuffer(DatagramChannelImpl.java:202)
	at sun.nio.ch.DatagramChannelImpl.receive(DatagramChannelImpl.java:188)
	at sun.nio.ch.DatagramChannelImpl.receive(DatagramChannelImpl.java:132)
	- locked &amp;lt;10860b878&amp;gt; (a java.lang.Object)
	at org.apache.avro.ipc.DatagramTransceiver.readBuffers(DatagramTransceiver.java:56)
	- locked &amp;lt;10860b6c8&amp;gt; (a org.apache.avro.ipc.DatagramTransceiver)
	at org.apache.avro.ipc.Transceiver.transceive(Transceiver.java:39)
	- locked &amp;lt;10860b6c8&amp;gt; (a org.apache.avro.ipc.DatagramTransceiver)
	at org.apache.avro.ipc.Requestor.request(Requestor.java:123)
	- locked &amp;lt;10860f9b0&amp;gt; (a org.apache.avro.specific.SpecificRequestor)
	at org.apache.avro.specific.SpecificRequestor.invoke(SpecificRequestor.java:52)
	at $Proxy12.echo(Unknown Source)
	at org.apache.avro.TestProtocolSpecific.testEcho(TestProtocolSpecific.java:108)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;I can spin up a linux VM to test before committing.  It would definitely be good if we figured out what is going on however &amp;#8211; i&apos;m probably not the only Mac user with this problem.&lt;/p&gt;</comment>
                            <comment id="12969561" author="cutting" created="Wed, 8 Dec 2010 23:45:55 +0000"  >&lt;p&gt;Probably the IPC tests should be restructured.  The way they work is ugly and perhaps fragile.  The base test class has a static variables for the client and server.  Then there&apos;s an @Before test which creates and starts the appropriate kind of server and client if they&apos;re null, setting this static variable.  Then there&apos;s an @AfterClass method that closes the client and server.  The @Test methods are inherited by subclasses so that the same tests can be run with different clients and servers.  Perhaps this should be switched to use @RunWith(Parametrized.class)?&lt;/p&gt;</comment>
                            <comment id="12970261" author="cutting" created="Fri, 10 Dec 2010 18:46:05 +0000"  >&lt;p&gt;Scott, I&apos;d really like to get this committed in the next week so that we can get a release out before the end of the year.&lt;/p&gt;

&lt;p&gt;What can I do to help?  Do you want me to try to debug the tests that are failing after this is applied?&lt;/p&gt;</comment>
                            <comment id="12971045" author="scott_carey" created="Mon, 13 Dec 2010 21:37:20 +0000"  >&lt;p&gt;I have all tests passing now. &lt;/p&gt;

&lt;p&gt;The StatsPlugin needed to have Velocity configured to avoid auto-detection of the logging context, just like SpecificCompiler.  That fixes the TestStatsPluginAndServlet test.&lt;br/&gt;
The SpecificCompiler test was failing because javac did not get the classpath passed into it properly.  The surefire plugin uses a manifest jar to set the classpath, and javac does not like this (it does not work with absolute paths).  &lt;/p&gt;

&lt;p&gt;I&apos;ll upload a patch and shell script shortly with these changes.&lt;/p&gt;</comment>
                            <comment id="12971079" author="scott_carey" created="Mon, 13 Dec 2010 23:31:09 +0000"  >&lt;p&gt;Updated patch.   migrateAvro.sh is unchanged.   This should build, with all tests passing.   Checkstyle and RAT are not yet working.&lt;/p&gt;</comment>
                            <comment id="12971088" author="cutting" created="Mon, 13 Dec 2010 23:58:07 +0000"  >&lt;p&gt;Tests now pass for me.  Thanks, Scott!&lt;/p&gt;

&lt;p&gt;Checkstyle &amp;amp; RAT should certainly be added soon, but we could perhaps commit this now without those?&lt;/p&gt;</comment>
                            <comment id="12971142" author="scott_carey" created="Tue, 14 Dec 2010 03:26:09 +0000"  >&lt;p&gt;checkstyle just needed a minor tweak, that works now.  In the next patch that is bound to the maven &apos;validate&apos; phase.&lt;/p&gt;

&lt;p&gt;RAT already works, via &quot;mvn rat:check&quot;, because we inherit from the Apache master pom which sets that up for us.   We probably want to run that in the validate phase too once it is configured right &amp;#8211; it fails now due to several files that we should fix or ignore.&lt;/p&gt;

&lt;p&gt;After the migration, I validated that no java files were forgotten.  The next patch will include &apos;svn delete java/lang/src&apos; .   We can remove the ivy stuff and bits of the ant script we no longer want in another ticket.  This is also not wired up to the base project build.sh yet, but that should be an easy follow-on.&lt;/p&gt;

&lt;p&gt;Other follow-ons: &lt;br/&gt;
Document the build process in the wiki.&lt;br/&gt;
Ensure that javadoc/source jars are created in a release build.&lt;/p&gt;

&lt;p&gt;If this checks out and we have a +1 or two I&apos;ll commit it.&lt;/p&gt;</comment>
                            <comment id="12971146" author="scott_carey" created="Tue, 14 Dec 2010 03:45:40 +0000"  >&lt;p&gt;Same instructions as before.  Both the shell script and the patch need to run from the  lang/java directory.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;$ cd lang/java
$ ../../migrateAvro.sh
$ patch -p0 &amp;lt; ../../AVR0-647.patch
$ svn add pom.xml avro/pom.xml compiler/pom.xml maven-plugin/pom.xml ipc/pom.xml mapred/pom.xml tools/pom.xml
$ svn add maven-plugin/src/main/java/org/apache/avro/mojo/*
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To test it, just &apos;mvn install&apos;.  That should build, test, checkstyle, and install snapshot jars to your local maven repo.&lt;/p&gt;

&lt;p&gt;Maven 3.0.1  is recommended.  It should work with Maven 2.2.1 for now though.  &lt;/p&gt;</comment>
                            <comment id="12971147" author="scott_carey" created="Tue, 14 Dec 2010 03:46:28 +0000"  >&lt;p&gt;Patch available.&lt;/p&gt;</comment>
                            <comment id="12971307" author="cutting" created="Tue, 14 Dec 2010 16:46:16 +0000"  >&lt;p&gt;RAT is invoked by the top-level build target to check the entire source distribution, not just Java.  The excludes list is in share/rat-excludes.txt.  Dunno if Maven will easily support this mode of operation, but, if not, we might just move that portion of build.xml to a share/rat/build.xml or somesuch.&lt;/p&gt;</comment>
                            <comment id="12971394" author="cutting" created="Tue, 14 Dec 2010 20:09:40 +0000"  >&lt;p&gt;This works for me.  +1&lt;/p&gt;

&lt;p&gt;Today the suggested pre-commit invocation is &apos;ant clean test&apos;, which runs unit tests, javadoc, and checkstyle.  It seems like &apos;mvn clean install&apos; is close, but doesn&apos;t yet run javadoc and also has the side effect of installing the snapshot.&lt;/p&gt;</comment>
                            <comment id="12971403" author="scott_carey" created="Tue, 14 Dec 2010 20:44:48 +0000"  >&lt;p&gt;&apos;mvn clean verify&apos;  does everything &apos;install&apos; does other than push the snapshot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can tie the checkstyle stuff to the &apos;test&apos; phase if we want.  &lt;/p&gt;

&lt;p&gt;Adding javadoc and sources jar construction should be very easy --just add the plugins to the base pom.  I&apos;ll have a quick look at that, or we can just commit this and look at these changes in a follow-on ticket that is required for 1.5.  &lt;/p&gt;

&lt;p&gt;Thoughts?  If I don&apos;t hear from anyone, I&apos;ll commit this tonight and create another ticket for follow-on tasks.&lt;/p&gt;</comment>
                            <comment id="12971901" author="scott_carey" created="Thu, 16 Dec 2010 00:40:39 +0000"  >&lt;p&gt;Committed to trunk.&lt;/p&gt;</comment>
                            <comment id="12972221" author="cutting" created="Thu, 16 Dec 2010 21:45:44 +0000"  >&lt;p&gt;Scott, I&apos;ve re-formatted and edited the CHANGES.txt message as follows:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    AVRO-647. Java: Break avro.jar up into multiple parts: avro.jar,
    avro-compiler.jar, avro-ipc.jar, avro-mapred.jar, avro-tools.jar,
    and avro-maven-plugin.jar.
    
    Summary of artifacts: 
    * avro.jar
      Contains &lt;span class=&quot;code-quote&quot;&gt;&apos;core&apos;&lt;/span&gt; avro features:  schemas, data files,
      specific, &lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;, and reflect APIs.
      Dependencies: slf4j, Paranamer, Jackson.
    * avro-ipc.jar
      Contains Trancievers, Requestors, and Responders.
      Dependencies:  avro.jar, Jetty, Netty, and Velocity
    * avro-compiler.jar
      Contains SpecificCompiler, IDL compiler and Ant tasks.
      Dependencies: avro.jar, commmons-lang, and Velocity.
    * avro-maven-plugin.jar
      A Maven plugin &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Avro&apos;s compiler.
      Dependencies: avro-compiler.jar
    * avro-mapred.jar
      API &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Hadoop MapReduce with Avro data.
      Dependencies: avro-ipc.jar, hadoop-core, and jopt-simple.
    * avro-tools.jar
      Avro command-line tools.  Embeds Avro components and dependencies.

    (scottcarey)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Does this look reasonable to you?  If so, I&apos;ll commit it.&lt;/p&gt;</comment>
                            <comment id="12972304" author="scott_carey" created="Fri, 17 Dec 2010 00:14:02 +0000"  >&lt;p&gt;Looks good, more clear than mine.&lt;/p&gt;

&lt;p&gt;There is one error however.  It turns out that I forgot to make avro-tools.jar include all of its dependencies.  But, I think it makes sense to leave that alone and make another jar for this purpose, as discussed at &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-663&quot; title=&quot;avro-tools-1.4.0.jar doesn&amp;#39;t meet the maven2 layout standard, making it inaccessble to maven users&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-663&quot;&gt;&lt;del&gt;AVRO-663&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In that case, the documentation for avro-tools.jar should not contain &quot;Embeds Avro components and dependencies&quot; but should say &quot;Depends on all other Avro jars&quot;.&lt;/p&gt;</comment>
                            <comment id="12983015" author="scott_carey" created="Tue, 18 Jan 2011 05:12:05 +0000"  >&lt;p&gt;I made one more commit to this JIRA to remove some accidentally added eclipse .project files.  These are on svn:ignore yet were in svn.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12494081">HBASE-3394</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12464841">AVRO-545</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12493479">AVRO-714</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12438616">AVRO-159</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12466614">AVRO-572</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12466190" name="AVRO-647.patch" size="52537" author="scott_carey" created="Tue, 14 Dec 2010 03:45:40 +0000"/>
                            <attachment id="12466178" name="AVRO-647.patch" size="45999" author="scott_carey" created="Mon, 13 Dec 2010 23:31:09 +0000"/>
                            <attachment id="12458864" name="AVRO-647.patch" size="43783" author="scott_carey" created="Thu, 4 Nov 2010 23:43:53 +0000"/>
                            <attachment id="12466191" name="migrateAvro.sh" size="8550" author="scott_carey" created="Tue, 14 Dec 2010 03:45:40 +0000"/>
                            <attachment id="12458863" name="migrateAvro.sh" size="8524" author="scott_carey" created="Thu, 4 Nov 2010 23:43:53 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12438616">AVRO-159</subtask>
                            <subtask id="12464841">AVRO-545</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 1 Sep 2010 01:35:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4196</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 1 week, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1m7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80024</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-648] Use a template library for the SpecificCompiler</title>
                <link>https://issues.apache.org/jira/browse/AVRO-648</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;This JIRA proposes uses a templating library instead of string concatenation for the SpecificCompiler.&lt;/p&gt;

&lt;p&gt;We&apos;ve had conversations on the list about customizing the generated code (by adding getters and setters, adding utility classes for the arrays, adding String-friendly (as opposed to Utf8) accessors, etc.), but we&apos;ve been stymied by the fact that the specific compiler is hard-coded to use one template, and it&apos;s hard to experiment with.   Sam Pullara (at &lt;a href=&quot;http://github.com/spullara/avrocompiler&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/spullara/avrocompiler&lt;/a&gt;) has done pretty much this: he forked/subclassed a copy of SpecificCompiler that uses the Mustache language to generate code.  He&apos;s also gone ahead and done some of the customizations.&lt;/p&gt;

&lt;p&gt;In the patch I&apos;m about to post, I&apos;ve replicated the existing code generation using Velocity.  We already build Velocity for some of the IPC plugins, and it&apos;s an Apache project.  The existing tests pass, plus I&apos;ve added tests that check that the generated code is character-for-character the same, in a handful of cases.  This was actually quite painful, since I had to reproduce some questionable indentation and trailing whitespace &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.  That said, I&apos;m pleased with how easy it was to incorporate the templates.&lt;/p&gt;

&lt;p&gt;Eventually, I hope we support getters and setters, or perhaps support multiple versions of templates.  (If someone wants to generate, say, C++ code, the path is now a lot easier for that, as well.)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12473013">AVRO-648</key>
            <summary>Use a template library for the SpecificCompiler</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="philip">Philip Zeyliger</assignee>
                                    <reporter username="philip">Philip Zeyliger</reporter>
                        <labels>
                    </labels>
                <created>Wed, 1 Sep 2010 08:21:52 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:44 +0000</updated>
                            <resolved>Mon, 1 Nov 2010 18:25:46 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12904968" author="philip" created="Wed, 1 Sep 2010 08:23:24 +0000"  >&lt;p&gt;Here&apos;s a preliminary patch.  I&apos;d still like to diff the generated directory from the tests against a version without this patch, and I know that I haven&apos;t added license headers to the templates, and probably to the new tests.&lt;/p&gt;</comment>
                            <comment id="12905066" author="cutting" created="Wed, 1 Sep 2010 15:55:49 +0000"  >&lt;p&gt;Bravo!  This is a great contribution!&lt;/p&gt;

&lt;p&gt;A few comments:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;there are number of whitespace/formatting changes , making the patch harder to read, since one must scan each of them to see if anything&apos;s actually changed.&lt;/li&gt;
	&lt;li&gt;perhaps we could name the set of templates, e.g., org/apache/avro/specific/templates/{$name}/*.vm, and make the name a parameter of the compiler.  then the existing templates might be named &apos;classic&apos; or &apos;simple&apos; and we might then later add, e.g., &apos;bean&apos; templates that generate accessor methods?  Or do you intend that as a subsequent contribution?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12905076" author="philip" created="Wed, 1 Sep 2010 16:26:48 +0000"  >&lt;p&gt;I&apos;ll take a look at regenerating the patch with less whitespace later on.  As you can tell, I was working on it rather late, and excited that I got the tests to pass &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Pluggability for a template directory is the natural next patch.  (Eventually, we&apos;ll need templating or pluggability for filenames, too, since the deep nested directory hierarchies are a Java thing: I have in mind as a use case a &quot;doc&quot; generator a la javadoc, though maybe javadoc is good enough.)&lt;/p&gt;

&lt;p&gt;BTW, I&apos;ve now posted the patch at &lt;a href=&quot;https://review.cloudera.org/r/762/diff/#index_header&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://review.cloudera.org/r/762/diff/#index_header&lt;/a&gt; , if you want to see it side-by-side.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12919086" author="cutting" created="Thu, 7 Oct 2010 22:32:17 +0000"  >&lt;p&gt;Marking this for 1.5.0 so we don&apos;t forget about it.&lt;/p&gt;</comment>
                            <comment id="12925990" author="cutting" created="Thu, 28 Oct 2010 23:32:58 +0000"  >&lt;p&gt;Here&apos;s a new version of the patch that:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;removes whitespace-only changes&lt;/li&gt;
	&lt;li&gt;places templates in a java/classic directory, preparing for future variations of java and other langs&lt;/li&gt;
	&lt;li&gt;permits setting the template directory by a method or a system property&lt;/li&gt;
	&lt;li&gt;makes SpecificCompiler easily subclassible, to provide additional methods to templates&lt;/li&gt;
	&lt;li&gt;adds the apache license to template files&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12926835" author="scott_carey" created="Mon, 1 Nov 2010 05:30:15 +0000"  >&lt;p&gt;I&apos;d like to get this committed soon, since work on &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-647&quot; title=&quot;Break avro.jar into avro.jar, avro-dev.jar and avro-hadoop.jar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-647&quot;&gt;&lt;del&gt;AVRO-647&lt;/del&gt;&lt;/a&gt; is likely to conflict with this ticket more than most, and I have some time to work on that again.&lt;/p&gt;</comment>
                            <comment id="12926851" author="philip" created="Mon, 1 Nov 2010 06:39:43 +0000"  >&lt;p&gt;+1.  Sorry &apos;bout the slow review; crazy couple of days.&lt;/p&gt;</comment>
                            <comment id="12927075" author="cutting" created="Mon, 1 Nov 2010 18:25:46 +0000"  >&lt;p&gt;I just committed this.  Thanks, Philip!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12458289" name="AVRO-648.patch" size="41297" author="cutting" created="Thu, 28 Oct 2010 23:32:58 +0000"/>
                            <attachment id="12453582" name="AVRO-648.patch.txt" size="37976" author="philip" created="Wed, 1 Sep 2010 08:23:24 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 1 Sep 2010 15:55:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4195</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 13 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1mf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80025</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-649] Allow pluggable ThreadPools in Java HttpServer</title>
                <link>https://issues.apache.org/jira/browse/AVRO-649</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The easiest way to tune the threading implementation of an RPC server is to provide an alternate threadpool implementation.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12473067">AVRO-649</key>
            <summary>Allow pluggable ThreadPools in Java HttpServer</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="6">Invalid</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="stuhood">Stu Hood</reporter>
                        <labels>
                    </labels>
                <created>Wed, 1 Sep 2010 18:34:56 +0000</created>
                <updated>Wed, 8 Sep 2010 21:15:35 +0000</updated>
                            <resolved>Wed, 1 Sep 2010 20:53:51 +0000</resolved>
                                                    <fixVersion>1.4.1</fixVersion>
                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12905148" author="stuhood" created="Wed, 1 Sep 2010 18:37:52 +0000"  >&lt;p&gt;Adds constructors with parameters for pluggable ThreadPools.&lt;/p&gt;</comment>
                            <comment id="12905194" author="cutting" created="Wed, 1 Sep 2010 20:12:39 +0000"  >&lt;p&gt;I like that the public API for HttpServer is independent of the underlying Http server implementation: we could easily switch it to use Tomcat or Resin without breaking any users.  I&apos;m a little reluctant to lose that.&lt;/p&gt;</comment>
                            <comment id="12905198" author="philip" created="Wed, 1 Sep 2010 20:17:00 +0000"  >&lt;p&gt;Could we reverse the dependency, and say that HttpServer requires a servlet container, and folks can pass in whatever they want?  I&apos;ve been wanting to re-use the servlet container that AVRO uses for my own nefarious purposes (there&apos;s no reason to open up two ports if you&apos;ve already got one open).  We should still have methods that work out of the box, as well.&lt;/p&gt;</comment>
                            <comment id="12905214" author="cutting" created="Wed, 1 Sep 2010 20:48:38 +0000"  >&lt;p&gt;Philip: not sure what you have in mind.  Would you add a method like:&lt;/p&gt;

&lt;p&gt;public void addServlet(String path, Servlet servlet);&lt;/p&gt;

&lt;p&gt;or somesuch, so that folks could mount more servlets on this server?&lt;/p&gt;

&lt;p&gt;I&apos;d expected that folks who wanted to do complicated deployments would use ResponderServlet directly, and not Avro&apos;s HttpServer.&lt;/p&gt;</comment>
                            <comment id="12905219" author="stuhood" created="Wed, 1 Sep 2010 20:53:51 +0000"  >&lt;p&gt;As pointed out on &lt;a href=&quot;https://issues.apache.org/jira/browse/CASSANDRA-1440&quot; title=&quot;Improve auth story for Avro&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CASSANDRA-1440&quot;&gt;&lt;del&gt;CASSANDRA-1440&lt;/del&gt;&lt;/a&gt;, ipc.HttpServer is a very thin layer around Jetty: rather than making a change to Avro, we&apos;ll access Jetty directly.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12905221" author="philip" created="Wed, 1 Sep 2010 20:55:37 +0000"  >&lt;p&gt;Good point, I didn&apos;t realize that ResponderServlet is public and could be used directly.  That works, then.  (Are the paths used in HTTP requests specified?)&lt;/p&gt;</comment>
                            <comment id="12905237" author="cutting" created="Wed, 1 Sep 2010 21:41:56 +0000"  >&lt;p&gt;&amp;gt; Are the paths used in HTTP requests specified?&lt;/p&gt;

&lt;p&gt;A service is described with a URI.  If it&apos;s an HTTP service, then that path is used.  HttpServer runs a service at /.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12472769">CASSANDRA-1440</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12453605" name="0001-Allow-an-alternate-ThreadPool-to-be-passed-to-the-Je.patch" size="1728" author="stuhood" created="Wed, 1 Sep 2010 18:37:52 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 1 Sep 2010 20:12:39 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4158</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 21 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1mn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80026</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-650] failures under client concurrency</title>
                <link>https://issues.apache.org/jira/browse/AVRO-650</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I&apos;m having trouble getting any client concurrency out of cassandra&apos;s rpc server.  Running the attached `tester.py&apos; from more than one terminal window is enough to generate the exceptions seen in `exceptions.txt&apos;.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12473074">AVRO-650</key>
            <summary>failures under client concurrency</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.svg">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="urandom">Eric Evans</reporter>
                        <labels>
                    </labels>
                <created>Wed, 1 Sep 2010 20:05:52 +0000</created>
                <updated>Tue, 25 Jan 2011 01:15:50 +0000</updated>
                            <resolved>Fri, 3 Sep 2010 01:27:51 +0000</resolved>
                                                    <fixVersion>1.4.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12905274" author="cutting" created="Wed, 1 Sep 2010 22:30:07 +0000"  >&lt;p&gt;Does this work in 1.3?  Is this a regression, or has it always been broken?&lt;/p&gt;</comment>
                            <comment id="12905286" author="urandom" created="Wed, 1 Sep 2010 22:43:56 +0000"  >&lt;p&gt;It appears to be.  Reverting to when we used 1.3.3 works.&lt;/p&gt;</comment>
                            <comment id="12905583" author="urandom" created="Thu, 2 Sep 2010 16:49:22 +0000"  >&lt;p&gt;I apologize for being so terse, I submitted this issue yesterday during a sprint (a Cassandra sprint to work on the Avro RPC interface &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;); I didn&apos;t have much time, but I didn&apos;t want this to go unreported.&lt;/p&gt;

&lt;p&gt;I can confirm, in Cassandra this started for us at r987199 when we upgraded Avro to a snapshot based on r986959.  Prior to that we were using jars based on the 1.3.3 release, and this problem did not exist.&lt;/p&gt;</comment>
                            <comment id="12905627" author="cutting" created="Thu, 2 Sep 2010 18:26:52 +0000"  >&lt;p&gt;Thiru, do you have an idea what&apos;s going on here?  I suspect &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-557&quot; title=&quot;Speed up one-time data decoding&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-557&quot;&gt;&lt;del&gt;AVRO-557&lt;/del&gt;&lt;/a&gt;, which causes resolvers to be reused.  However I don&apos;t see why concurrent requests would trigger this, since the ThreadLocal ensures each resolver is only reused serially.&lt;/p&gt;</comment>
                            <comment id="12905629" author="cutting" created="Thu, 2 Sep 2010 18:27:52 +0000"  >&lt;p&gt;Making this a blocker, since it&apos;s a regression.&lt;/p&gt;</comment>
                            <comment id="12905684" author="scott_carey" created="Thu, 2 Sep 2010 21:45:56 +0000"  >&lt;p&gt;The first two stack traces indicate that the parser&apos;s position is corrupted, probably due to a race condition.  It pulled a null symbol off the stack in the second trace, and an invalid one in the first.&lt;/p&gt;

&lt;p&gt;The second two traces look like they could happen if the catch block at Responder.java:152 is hit before Responder.java:109 completes.   This would mean that handshake() threw an exception and I would suspect we would see a log warning about that associated with that.&lt;/p&gt;

&lt;p&gt;ResponderServlet.java has a single reference to one Responder that alll threads use.  This is probably the source of the problem.  Responder.respond() looks threadsafe, but handshake() does not.&lt;/p&gt;

&lt;p&gt;handshake uses a handshakeReader member variable, that I&apos;m pretty sure maps to the race condition in the Parser.&lt;/p&gt;


&lt;p&gt;That is my guess, I don&apos;t have things set up to be able to reproduce or validate this however.&lt;/p&gt;

&lt;p&gt;The simplest fix would be to change the Responder member variable in ResponderServlet to a ThreadLocal&amp;lt;Responder&amp;gt;, and make sure that the Servlet destroy() method clears the ThreadLocal.&lt;/p&gt;</comment>
                            <comment id="12905740" author="cutting" created="Fri, 3 Sep 2010 00:01:36 +0000"  >&lt;p&gt;Scott, thanks for the analysis!&lt;/p&gt;

&lt;p&gt;I&apos;d prefer to fix this by making DatumReader#read(T,Decoder) thread-safe, in part because a Responder is user-created and hence hard to construct without adding a factory API, but moreover I think it&apos;s a nicer API.  Clearly Encoder &amp;amp; Decoder have state, but a DatumReader &amp;amp; DatumWriter shouldn&apos;t once constructed and configured.&lt;/p&gt;

&lt;p&gt;Here&apos;s a patch that I think achieves this, by adding a ThreadLocal for the resolver.&lt;/p&gt;

&lt;p&gt;Eric, can you please try this?  Thanks!&lt;/p&gt;</comment>
                            <comment id="12905746" author="scott_carey" created="Fri, 3 Sep 2010 00:29:31 +0000"  >&lt;p&gt;Agreed, the simple fix isn&apos;t necessarily the best one.&lt;/p&gt;

&lt;p&gt;Making DatumReader and DatumWriter thread-safe after construction/configuration does make for a good API.&lt;/p&gt;

&lt;p&gt;A very quick scan of the patch looks good.  I&apos;ll have a deeper look tomorrow.&lt;/p&gt;</comment>
                            <comment id="12905760" author="brandon.williams" created="Fri, 3 Sep 2010 01:16:18 +0000"  >&lt;p&gt;This patch works for me under much more concurrency than Eric&apos;s tester.py (it&apos;s originally what discovered this, but Eric simplified the test for reproduction.)&lt;/p&gt;</comment>
                            <comment id="12905764" author="cutting" created="Fri, 3 Sep 2010 01:27:51 +0000"  >&lt;p&gt;I committed this and will roll a new 1.4.0 RC.&lt;/p&gt;</comment>
                            <comment id="12905939" author="urandom" created="Fri, 3 Sep 2010 15:35:54 +0000"  >&lt;p&gt;Thanks guys!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12496482">AVRO-743</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12453737" name="AVRO-650.patch" size="2351" author="cutting" created="Fri, 3 Sep 2010 00:01:36 +0000"/>
                            <attachment id="12453615" name="exceptions.txt" size="6339" author="urandom" created="Wed, 1 Sep 2010 20:06:12 +0000"/>
                            <attachment id="12453616" name="tester.py" size="639" author="urandom" created="Wed, 1 Sep 2010 20:06:34 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 1 Sep 2010 22:30:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94942</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 21 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1mv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80027</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>cassandra</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-651] Add SPNEGO support to Avro HTTP transport</title>
                <link>https://issues.apache.org/jira/browse/AVRO-651</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/SPNEGO&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;SPNEGO&lt;/a&gt; is the standard mechanism for Kerberos authentication over HTTP. &lt;/p&gt;

&lt;p&gt;Avro should give users the option of using an Avro HTTP client or server that is capable of authentication using SPNEGO/Kerberos. This will be useful for Hadoop which has chosen Kerberos as its standard authentication protocol, as well as people who need to use Kerberos authentication with Avro based services running in servlet containers like Tomcat.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://spnego.sourceforge.net/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;LGPL licensed SPNEGO library for Java&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://spnego.dev.java.net/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Glassfish Spnego project&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HTTPCLIENT-523&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;SPNEGO authentication scheme for HTTPClient&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12473100">AVRO-651</key>
            <summary>Add SPNEGO support to Avro HTTP transport</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="cwsteinbach">Carl Steinbach</reporter>
                        <labels>
                    </labels>
                <created>Thu, 2 Sep 2010 01:34:39 +0000</created>
                <updated>Thu, 2 Sep 2010 18:10:02 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12905618" author="cutting" created="Thu, 2 Sep 2010 18:10:02 +0000"  >&lt;p&gt;From the links you provide above, it seems is that this might be possible without new code in Avro if:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;one configures a Tomcat, Glassfish, or JBoss server to use SPNEGO with Avro&apos;s ResponderServlet; and&lt;/li&gt;
	&lt;li&gt;one configures one&apos;s JVM for SPNEGO, as described in:
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;&lt;a href=&quot;http://download-llnw.oracle.com/javase/6/docs/technotes/guides/security/jgss/lab/part6.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download-llnw.oracle.com/javase/6/docs/technotes/guides/security/jgss/lab/part6.html&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Does that sound right?  If so, then fixing this might mostly be documentation.&lt;/p&gt;

&lt;p&gt;We might provide an Apache HttpClient-based version HttpTransceiver, but I don&apos;t see that as required.  Is it?&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12472749">AVRO-641</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12334082">HTTPCLIENT-523</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 2 Sep 2010 18:10:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94943</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 21 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1n3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80028</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-652] Expose sync points in DataFileReader</title>
                <link>https://issues.apache.org/jira/browse/AVRO-652</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;DataFileReader.blockStart is hidden from the caller, but exposing it (as readonly) would allow callers to discover sync points in a file by watching it for changes.&lt;/p&gt;

&lt;p&gt;seek(long) only takes an exact block boundary, while sync(long) moves to the next block boundary. There does not appear to be a way to rediscover points that you can seek() to, which would be very useful for building or recovering an index for a file.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12473102">AVRO-652</key>
            <summary>Expose sync points in DataFileReader</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stuhood">Stu Hood</assignee>
                                    <reporter username="stuhood">Stu Hood</reporter>
                        <labels>
                    </labels>
                <created>Thu, 2 Sep 2010 03:19:59 +0000</created>
                <updated>Wed, 8 Sep 2010 21:08:17 +0000</updated>
                            <resolved>Thu, 2 Sep 2010 23:11:49 +0000</resolved>
                                                    <fixVersion>1.4.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12905417" author="stuhood" created="Thu, 2 Sep 2010 05:46:37 +0000"  >&lt;p&gt;Adds the &apos;DataFileReader.previousSync()&apos; method to return the last encountered synchronization point. Also adds a test which exposed a bug in seek(long).&lt;/p&gt;</comment>
                            <comment id="12905418" author="stuhood" created="Thu, 2 Sep 2010 05:47:11 +0000"  >&lt;p&gt;Upgrading to a bug, due to the seek(long) issue.&lt;/p&gt;</comment>
                            <comment id="12905729" author="cutting" created="Thu, 2 Sep 2010 23:11:49 +0000"  >&lt;p&gt;I just committed this.  Thanks, Stu!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12453655" name="0001-Add-previousSync-method-for-sync-point-discovery-and.patch" size="3250" author="stuhood" created="Thu, 2 Sep 2010 05:46:37 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 2 Sep 2010 23:11:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94944</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 21 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1nb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80029</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-653] lang/py/build.xml produces bad python release artifacts</title>
                <link>https://issues.apache.org/jira/browse/AVRO-653</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The python release artifact is supposed to have had some string substitution performed, this is not happening.  Patch to follow.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12473152">AVRO-653</key>
            <summary>lang/py/build.xml produces bad python release artifacts</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="urandom">Eric Evans</assignee>
                                    <reporter username="urandom">Eric Evans</reporter>
                        <labels>
                    </labels>
                <created>Thu, 2 Sep 2010 15:46:23 +0000</created>
                <updated>Wed, 8 Sep 2010 21:08:17 +0000</updated>
                            <resolved>Thu, 2 Sep 2010 23:03:57 +0000</resolved>
                                    <version>1.4.0</version>
                                    <fixVersion>1.4.0</fixVersion>
                                    <component>python</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12905555" author="urandom" created="Thu, 2 Sep 2010 15:47:43 +0000"  >&lt;p&gt;Trivial patch to generate a working python artifact.&lt;/p&gt;</comment>
                            <comment id="12905726" author="cutting" created="Thu, 2 Sep 2010 23:03:57 +0000"  >&lt;p&gt;I just committed this.  Thanks, Eric!&lt;/p&gt;</comment>
                            <comment id="12905727" author="philip" created="Thu, 2 Sep 2010 23:07:52 +0000"  >&lt;p&gt;+1.&lt;/p&gt;

&lt;p&gt;BTW, here&apos;s how I tested this:&lt;/p&gt;

&lt;p&gt;1) ant dist in lang/py&lt;br/&gt;
2) virtualenv foo&lt;br/&gt;
3) foo/bin/easy_install avro-1.5.0-SNAPSHOT.tar.gz&lt;br/&gt;
4) foo/bin/python ; import avro.ipc&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12453690" name="AVRO-653.patch" size="491" author="urandom" created="Thu, 2 Sep 2010 15:47:43 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 2 Sep 2010 23:03:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94945</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 21 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1nj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80030</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-654] Recursive #validate() for union&apos;ed schemas in Ruby cripples performance</title>
                <link>https://issues.apache.org/jira/browse/AVRO-654</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The ruby DatumWriter calls #validate() on each #write(). In the case of a schema with many nested unions (cf. Cassandra&apos;s*), this requires a recursive depth-first search to determine which branch to take. In ruby, these operations are very expensive &amp;#8211; enough to limit write speeds to 2k/sec on a machine of moderate size.&lt;/p&gt;

&lt;p&gt;For repeated writing of the same data structure, one idea would be to create a CompiledDatumWriter. This would walk through the validation and assemble an tree of the methods to apply to each schema element in turn:&lt;br/&gt;
  [ &lt;span class=&quot;error&quot;&gt;&amp;#91;:write_long &amp;#39;id&amp;#39;&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;:write_bytes, &amp;#39;name&amp;#39;&amp;#93;&lt;/span&gt;, [:write_record, &apos;address&apos;, &lt;span class=&quot;error&quot;&gt;&amp;#91;:write_long, &amp;#39;street&amp;#39;&amp;#93;&lt;/span&gt;] ] &lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/infochimps/cassandra/blob/beta1_plus_patches/interface/avro/cassandra.avpr&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/infochimps/cassandra/blob/beta1_plus_patches/interface/avro/cassandra.avpr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12473201">AVRO-654</key>
            <summary>Recursive #validate() for union&apos;ed schemas in Ruby cripples performance</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="mrflip">Philip (flip) Kromer</reporter>
                        <labels>
                    </labels>
                <created>Fri, 3 Sep 2010 02:24:55 +0000</created>
                <updated>Mon, 6 Dec 2010 18:48:51 +0000</updated>
                                            <version>1.3.3</version>
                                                    <component>ruby</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12905980" author="cutting" created="Fri, 3 Sep 2010 17:39:51 +0000"  >&lt;p&gt;Note that full, recursive validation is not required for union dispatch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://avro.apache.org/docs/1.3.3/spec.html#Unions&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/docs/1.3.3/spec.html#Unions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So a typical implementation of a union writer might look something like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;writeUnion(datum, union) {
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; index = -1;
  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; index ==-1 &amp;amp;&amp;amp; i &amp;lt; union.length; i++) {
    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; (union[i].type) {
    INT : 
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (datum is &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;) {
	index = i;
	&lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
      }
    INT : 
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (datum is &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) 
	index = i;
	&lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
      }
    ... other unnamed types ...
    RECORD:
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (datum is record) &amp;amp;&amp;amp; datum.name.equals(union[i].name) {
	index = i;
	&lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
     }
    ... other named types ...
  }
  writeInt(index);
  write(datum, union[index]);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12473272">AVRO-656</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12492112">AVRO-709</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 3 Sep 2010 17:39:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94946</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 21 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1nr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80031</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-655] C &amp; C++ &apos;dist&apos; target should not run tests</title>
                <link>https://issues.apache.org/jira/browse/AVRO-655</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The intended semantics of the &apos;dist&apos; target in build.sh is simply to create release artifacts, not to run tests.  The &apos;test&apos; target should run tests.  Both C and C++ currently run tests under the &apos;dist&apos; target.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12473264">AVRO-655</key>
            <summary>C &amp; C++ &apos;dist&apos; target should not run tests</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Fri, 3 Sep 2010 17:56:11 +0000</created>
                <updated>Thu, 14 Oct 2010 19:06:51 +0000</updated>
                            <resolved>Mon, 13 Sep 2010 19:00:01 +0000</resolved>
                                    <version>1.4.0</version>
                                    <fixVersion>1.4.1</fixVersion>
                                    <component>build</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12905989" author="cutting" created="Fri, 3 Sep 2010 17:57:38 +0000"  >&lt;p&gt;Here&apos;s a patch that fixes this.  The generated tarballs contain identical content, but the overall time to build an Avro distribution on my laptop drops from around 4 minutes to around 2 minutes.&lt;/p&gt;</comment>
                            <comment id="12906323" author="massie" created="Sun, 5 Sep 2010 06:28:40 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="12906567" author="sbanacho" created="Mon, 6 Sep 2010 19:18:47 +0000"  >&lt;p&gt;looks good to me&lt;/p&gt;</comment>
                            <comment id="12908929" author="cutting" created="Mon, 13 Sep 2010 19:00:01 +0000"  >&lt;p&gt;I just committed this.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12453794" name="AVRO-655.patch" size="804" author="cutting" created="Fri, 3 Sep 2010 17:57:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 5 Sep 2010 06:28:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94947</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 20 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1nz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80032</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-656] writing unions with multiple records, fixed or enums can choose wrong branch </title>
                <link>https://issues.apache.org/jira/browse/AVRO-656</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;According to the specification, a union may contain multiple instances of a named type, provided they have different names.  There are several bugs in the Java implementation of this when writing data:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;for record, only the short-name of the record is checked, so the branch for a record of the same name in a different namespace may be used by mistake&lt;/li&gt;
	&lt;li&gt;for enum and fixed, the name of the record is not checked, so the first enum or fixed in the union will always be assumed when writing.  in many cases this may cause the wrong data to be written, potentially corrupting output.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is not a regression.  This has never been implemented correctly by Java.  Python and Ruby never check names, but rather perform a full, recursive validation of content.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12473272">AVRO-656</key>
            <summary>writing unions with multiple records, fixed or enums can choose wrong branch </summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.svg">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Fri, 3 Sep 2010 18:49:11 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:48 +0000</updated>
                            <resolved>Thu, 24 Feb 2011 22:21:11 +0000</resolved>
                                    <version>1.4.0</version>
                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12906036" author="cutting" created="Fri, 3 Sep 2010 19:32:09 +0000"  >&lt;p&gt;Since this has never been implemented correctly, we might safely change the specification without introducing incompatibilities.  There are many unions in use that contain multiple records with different names, so we must retain at least that ability.  Unions with multiple fixed, or enum schemas will have behaved erratically in all implementations and are not likely used much.&lt;/p&gt;

&lt;p&gt;We might change the specification to only permit a single fixed or enum in a union.  This would permit Java to conform to the spec for fixed and enums without changing how these types are represented at runtime.  For Python, Ruby and PHP things are more difficult, since, e.g., string, bytes, enum and fixed can be represented with identical primitive types in these, making runtime type determination difficult without introducing more runtime datatypes.&lt;/p&gt;

&lt;p&gt;Alternately we might change the spec so that unions are only permitted to contain, e.g., a single numeric type (int, float, long or double), a single symbolic type (string, bytes, enum &amp;amp; fixed) a single sequence type (map or array), and a number of records, distinguished by name.  I think this would support most uses that exist today and permit fast writing in most languages.  For compatibility, we might accept schemas at read time that do not conform to this, but at write time generate errors, forcing applications to conform to the new schema requirements when they upgrade to a new version of Avro.&lt;/p&gt;

&lt;p&gt;Ruby, Python and PHP can currently write the wrong branch if two records have the same fields, but this probably occurs rarely.  Also, full recursive validation is expensive (N^2 for nested structures).  So Ruby, Python and PHP should fix their writing of unions to check only the name of records and not to recursively descend any types.  My second proposal above would make this much simpler.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;

</comment>
                            <comment id="12906040" author="cutting" created="Fri, 3 Sep 2010 19:42:39 +0000"  >&lt;p&gt;Here are unit tests for Java that currently fail, illustrating spec non-conformance.&lt;/p&gt;</comment>
                            <comment id="12906075" author="scott_carey" created="Fri, 3 Sep 2010 20:42:36 +0000"  >&lt;p&gt;OK, I&apos;m going to review all my in use schemas and see what the above options would break.&lt;/p&gt;

&lt;p&gt;First, there is the schema used to represent an arbitrary Pig field, which the second alternative would break:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    List&amp;lt;Schema&amp;gt; pigTypes = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Schema&amp;gt;();
    pigTypes.add(Schema.create(Type.NULL));
    pigTypes.add(Schema.create(Type.BOOLEAN));
    pigTypes.add(Schema.create(Type.INT));
    pigTypes.add(Schema.create(Type.LONG));
    pigTypes.add(Schema.create(Type.FLOAT));
    pigTypes.add(Schema.create(Type.DOUBLE));
    pigTypes.add(Schema.create(Type.STRING));
    pigTypes.add(Schema.create(Type.BYTES));
    pigTypes.add(Schema.createArray(GENERIC_TUPLE));
    pigTypes.add(GENERIC_TUPLE);  &lt;span class=&quot;code-comment&quot;&gt;// Tuple is a record containing a list of fields of type GENERIC_FIELD_UNION
&lt;/span&gt;    pigTypes.add(GENERIC_ELEMENT_MAP); &lt;span class=&quot;code-comment&quot;&gt;// Map is a map from &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; to GENERIC_FIELD_UNION
&lt;/span&gt;    GENERIC_FIELD_UNION = Schema.createUnion(pigTypes);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I had tried to create an enum with multiple fixed types and ran into issues long ago.  I thought I was doing something wrong, actually.&lt;br/&gt;
I have long since wrapped these in a record.  So I have avoided this bug due to that:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;[
{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;com.rr.avro.Fixed16&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;fixed&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;size&quot;&lt;/span&gt;:16},
{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;com.rr.avro.Fixed4&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;fixed&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;size&quot;&lt;/span&gt;:4},
{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;com.rr.avro.MyRecord&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;hostIp&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;Fixed4&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;Fixed16&quot;&lt;/span&gt;], &lt;span class=&quot;code-quote&quot;&gt;&quot;doc&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;should always be 4 bytes (IPv4) or 16 bytes (IPv6)&quot;&lt;/span&gt;},
   ... (more fields)
  }}
]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have some other unions like this that are important:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;Fixed16&amp;quot;, &amp;quot;string&amp;quot;, &amp;quot;null&amp;quot;&amp;#93;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;So in short, I think the first option makes sense from my use cases and the second one is very restrictive.  &lt;br/&gt;
It might make sense to simplify it and say that enum and/or fixed are not allowed in UNION at all &amp;#8211; they must be wrapped in a named record.  Limiting it to only one of each might be somewhat useful, but be more complicated.  &lt;/p&gt;

&lt;p&gt;Alternatively, making some or all of the unnamed types named might help too.&lt;/p&gt;

&lt;p&gt;Making only one symbolic type allowed in a union is restrictive, especially since I already have use cases for combining fixed, string, and bytes in a union. &lt;/p&gt;

&lt;p&gt;What about something like:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;BrowserTypeEnum&amp;quot;, &amp;quot;string&amp;quot;&amp;#93;&lt;/span&gt; as a union.  BrowserTypeEnum is a canonicalized set of known browsers.  If a user-agent string can&apos;t be bucketed into one of the known types, its full string is stored instead.  Sure, we could instead have a record with an enum and a nullable string in it instead, but now you have a case where it could be both types at once.  The purpose of the Union is to guarantee its only one of the branches.&lt;/p&gt;</comment>
                            <comment id="12906127" author="cutting" created="Fri, 3 Sep 2010 21:54:11 +0000"  >&lt;p&gt;Arguably we shouldn&apos;t worry so much.  If an implementation can&apos;t distinguish between string and bytes then it should not be expected to preserve that distinction.  All that&apos;s really required is that it write valid data.&lt;/p&gt;

&lt;p&gt;If we accept this, then we can go with my first proposal above: records are the only type that can occur multiply in a union.  Implementations will read data into the highest fidelity representation they can, but an implementation that represents floats as doubles will not be able to always write exactly the data it reads when processing a &lt;span class=&quot;error&quot;&gt;&amp;#91;float,double&amp;#93;&lt;/span&gt; union.  Similarly, an implementation that represents enum symbols with strings might sometimes write one in place of the other.&lt;/p&gt;

&lt;p&gt;Folks could be advised to order their unions to guard against this.  Higher-precision numeric types should usually occur before lower-precision types.  Enum and fixed should usually occur before string and bytes.&lt;/p&gt;

&lt;p&gt;For performance, it is reasonable to continue to prohibit multiple arrays and maps, since otherwise recursive validation would be required.  Similarly, we should update all implementations to use record names, rather than recursive validation.&lt;/p&gt;</comment>
                            <comment id="12906209" author="scott_carey" created="Sat, 4 Sep 2010 01:54:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;Arguably we shouldn&apos;t worry so much. If an implementation can&apos;t distinguish between string and bytes then it should not be expected to preserve that distinction.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That would be a major change in what the Union is and what you can do with it.&lt;/p&gt;

&lt;p&gt;For example, you might want a union of string and bytes, where the string is a hex representation of some data, and the bytes are raw data.  If the distinction can&apos;t be preserved, you can&apos;t use unions to store different representations of the same data.  What if one language does not differentiate between string and bytes, because its implicit assumption is that strings are just utf8 byte arrays.  Another language likely cannot differentiate those two, but assumes strings are LittleEndian encoded UTF16 byte arrays?   If avro can&apos;t guarantee that a user can find out what branch of the union a piece of data came from, and doesn&apos;t allow specifying what it should be when written, then I think we&apos;ve just blown away a lot of cross-language compatibility.  &lt;/p&gt;

&lt;p&gt;What if an implementation only has strings, and can&apos;t differentiate between strings and numerics without parsing the string?  I think it should be required to tag/flag the union field with what type it is and expose that to the user.  In fact, I think all implementations should be expected to expose what avro trype the branch of a union field is one way or another.  We can&apos;t really be &apos;magic&apos; here and expect to achieve cross language capabilities.&lt;/p&gt;


&lt;p&gt;A user needs to be able to ask the implementation:  &quot;what branch of the union is this union field&quot; and specify &quot;store this union field using branch X&quot; when there is ambiguity present in the language.  An implementation might not require that a user specify what type it is setting and default to the first matching type, but that should be up to the user.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Implementations will read data into the highest fidelity representation they can, but an implementation that represents floats as doubles will not be able to always write exactly the data it reads when processing a &lt;span class=&quot;error&quot;&gt;&amp;#91;float,double&amp;#93;&lt;/span&gt; union.   &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think if a user wants to write exactly what was read, it should be possible.&lt;br/&gt;
So a language that uses doubles internally for both float and double would need to tag the union field it reads with what type it was when it was read and make that available, so that a user could make an informed decision on whether to serialize as a float or double.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Folks could be advised to order their unions to guard against this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think doing too much implicitly here will lead to trouble, especially since the possible combinations of things various languages might do when present with ambiguity is large and may not be understood at the time a schema is defined.&lt;/p&gt;


&lt;p&gt;Back to the original problem, I&apos;m not sure I get it.   Records, Enums, and Fixed are named types.  If the type is named, why is it so hard to figure out what branch it belongs to?  If this means that an implementation can&apos;t use a string directly for an enum, but instead uses sentinel objects or a container with a value string and name string, Isn&apos;t that OK?   &lt;br/&gt;
If an implementation can&apos;t distinguish strings and bytes by type, shouldn&apos;t it track what branch it is some other way than the type?  &lt;br/&gt;
If an implementation can&apos;t distinguish between bytes and fixed (like Java), it can wrap the fixed in a container and keep the name somewhere.&lt;/p&gt;

&lt;p&gt;All implementations have at their disposal the ability to keep an additional internal value that tracks the union branch if it is ambiguous due to the language or otherwise.&lt;/p&gt;

&lt;p&gt;Am I missing something?&lt;/p&gt;</comment>
                            <comment id="12906867" author="cutting" created="Tue, 7 Sep 2010 16:30:01 +0000"  >&lt;p&gt;&amp;gt; That would be a major change in what the Union is and what you can do with it.&lt;/p&gt;

&lt;p&gt;The specification is primarily concerned with (a) schema &amp;amp; protocol syntax; (b) format of corresponding data.  So, as long as an implementation produces and consumes valid schemas and data, it&apos;s a conforming implementation.  A high-fidelity implementation can read and write data without alteration, but an implementation that cannot write data exactly as read might still be both useful and correctly implement the Avro specification.&lt;/p&gt;

&lt;p&gt;&amp;gt; If this means that an implementation can&apos;t use a string directly for an enum, but instead uses sentinel objects or a container with a value string and name string, Isn&apos;t that OK?&lt;/p&gt;

&lt;p&gt;Sure, that&apos;s okay.  But currently Ruby, PHP and Python don&apos;t distinguish bytes, enum and fixed at runtime.  This is fine except in the case of a union that contains these types.  In that case, an application may end up treating a value intended to be one type as a different type.  That may be a problem for some applications, and may not be for others.  Hopefully someone will fix these implementations, e.g., to wrap such union values.  But I don&apos;t think in the meantime we need to declare that these implementations are non-conforming or change the spec.  Rather we should document the limitation and file bugs to improve the implementations.&lt;/p&gt;

&lt;p&gt;A primary question of this issue is whether to continue to permit multiple enums and fixed in a union, distinguished by name.  No implementation takes advantage of this today, and it might make implementations simpler to drop this, permitting only a single enum and fixed per union.  So far, no one has presented a use case for this feature.&lt;/p&gt;

&lt;p&gt;I&apos;d also like to see Ruby, Python and PHP improve their union handling by avoiding recursive validation.  If they add a name to each record instance this is easy, and better implements the spirit of the specification.  Adding wrappers for enum, fixed and bytes would also be good, but is a bigger change.&lt;/p&gt;</comment>
                            <comment id="12906924" author="scott_carey" created="Tue, 7 Sep 2010 18:25:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;A high-fidelity implementation can read and write data without alteration, but an implementation that cannot write data exactly as read might still be both useful and correctly implement the Avro specification.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree, an implementation doesn&apos;t need to have that ability.  I am wary of restricting what is capable in unions to what is &apos;easy&apos; in languages with weaker type systems.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A primary question of this issue is whether to continue to permit multiple enums and fixed in a union, distinguished by name. No implementation takes advantage of this today, and it might make implementations simpler to drop this, permitting only a single enum and fixed per union. So far, no one has presented a use case for this feature.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;To be clear, would that break this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;[
{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;com.rr.avro.Fixed16&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;fixed&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;size&quot;&lt;/span&gt;:16},
{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;com.rr.avro.Fixed4&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;fixed&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;size&quot;&lt;/span&gt;:4},
{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;com.rr.avro.MyRecord&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;hostIp&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;Fixed4&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;Fixed16&quot;&lt;/span&gt;], &lt;span class=&quot;code-quote&quot;&gt;&quot;doc&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;should always be 4 bytes (IPv4) or 16 bytes (IPv6)&quot;&lt;/span&gt;},
   ... (more fields)
  }}
]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which I have in use in production right now.  I could switch to bytes and control the size restrictions client side however.  But schema migration might be a bit annoying in that case &amp;#8211; in particular would new code be able to read old data written with the above schema?&lt;/p&gt;

&lt;p&gt;I have a hard time thinking of a use case for multiple enums.  A union of two different enums is too much like a single, larger enum.&lt;br/&gt;
A union of multiple fixed has some uses, but can always be replaced with bytes.  The main motivation for the union of two fixed instead of bytes is that if there is a third member of the union, it saves space.  &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;null&amp;quot;, &amp;quot;Fixed4&amp;quot;, &amp;quot;Fixed16&amp;quot;&amp;#93;&lt;/span&gt; takes up 1 less byte than &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;null&amp;quot;, &amp;quot;bytes&amp;quot;&amp;#93;&lt;/span&gt; when not null.&lt;/p&gt;


&lt;p&gt;On a different note with Unions, doing some research and experimentation with Scala recently I fount it interesting that Avro Unions map almost 1:1 to Scala &apos;case classes&apos;.  It is a bit annoying to map Unions to Java polymorphically (perhaps with Avro-648), but would be simple in Scala.&lt;/p&gt;</comment>
                            <comment id="12906934" author="cutting" created="Tue, 7 Sep 2010 19:02:51 +0000"  >&lt;p&gt;I guess we could distinguish multiple fixed schemas in a union by their size, instead of by their name.  That&apos;s what the Ruby, Python and PHP implementations already do, more or less.&lt;/p&gt;

&lt;p&gt;&amp;gt; would new code be able to read old data written with the above schema?&lt;/p&gt;

&lt;p&gt;Yes, I think so.  I don&apos;t see why it would not.&lt;/p&gt;</comment>
                            <comment id="12914931" author="bruce_martin" created="Sun, 26 Sep 2010 07:04:59 +0000"  >&lt;p&gt;In java (Avro version 1.4) if you use anything other than the first ENUM in a UNION you can get an exception when writing to a file:&lt;/p&gt;


&lt;p&gt;java.lang.NullPointerException: null of SaleType of union in field f02 of fields&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumWriter.npe(GenericDatumWriter.java:90)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumWriter.write(GenericDatumWriter.java:85)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumWriter.write(GenericDatumWriter.java:56)&lt;br/&gt;
	at org.apache.avro.file.DataFileWriter.append(DataFileWriter.java:245)&lt;/p&gt;

&lt;p&gt;Caused by: java.lang.NullPointerException&lt;br/&gt;
	at org.apache.avro.Schema$EnumSchema.getEnumOrdinal(Schema.java:651)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumWriter.writeEnum(GenericDatumWriter.java:120)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumWriter.write(GenericDatumWriter.java:65)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumWriter.write(GenericDatumWriter.java:71)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumWriter.writeRecord(GenericDatumWriter.java:102)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumWriter.write(GenericDatumWriter.java:64)&lt;/p&gt;


&lt;p&gt;One other issue is you can use a the same ENUM value in multiple ENUM&apos;s  but the code can not decide&lt;br/&gt;
which version you are using in a UNION&lt;/p&gt;

&lt;p&gt;e.g. I have used RETURN in both SaleType and PoType then used SaleType and PoType in the same Enum ???&lt;/p&gt;

&lt;p&gt;  enum SaleType &lt;/p&gt;
{
      RETURN,
      OTHER,
      SALE
  }

&lt;p&gt;  enum PoType &lt;/p&gt;
{
    PURCHASE_ORDER,
    DIRECT_DELIVERY,
    RETURN,
    CONSIGNMENT
  }



&lt;p&gt;  record fields {&lt;br/&gt;
    union &lt;/p&gt;
{null, int, float, double, SaleType, PoType, letters, string}
&lt;p&gt; f02;&lt;/p&gt;</comment>
                            <comment id="12919084" author="cutting" created="Thu, 7 Oct 2010 22:30:46 +0000"  >&lt;p&gt;Marking this for 1.5.0 so we don&apos;t forget about it.&lt;/p&gt;</comment>
                            <comment id="12977546" author="cutting" created="Wed, 5 Jan 2011 00:09:07 +0000"  >&lt;p&gt;Here&apos;s a patch that implements the first option I proposed, way back when.  In particular:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the spec is altered so that only a single enum or fixed is permitted in a union.  (No implementation correctly supports multiple instances of these types in a union anyway.)&lt;/li&gt;
	&lt;li&gt;the java implementation and tests are updated to conform&lt;/li&gt;
	&lt;li&gt;java is also fixed so that
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;union dispatch among records correctly considers the namespace&lt;/li&gt;
		&lt;li&gt;type names rendered in JSON unions now include the namespace&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12977575" author="dcreager" created="Wed, 5 Jan 2011 01:24:33 +0000"  >&lt;p&gt;I only just stumbled on this issue just now.  I don&apos;t know much about the Java implementation &#8212; is the problem that there&apos;s no wrapper object for a union value?  In the C implementation, there is, and so you can tell at run-time which branch a particular value is without having to inspect the branch value at all.  I understand that would be a major change to the API if that&apos;s not how it is in the other language bindings.&lt;/p&gt;

&lt;p&gt;But....this patch would be a major backwards-incompatible change to the spec.  In our code, we we&apos;re using the &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;null&amp;quot;, &amp;quot;fixed4&amp;quot;, &amp;quot;fixed16&amp;quot;&amp;#93;&lt;/span&gt; case all the time to represent IPv4 or IPv6 addresses.  I wouldn&apos;t want to change that to &quot;bytes&quot;, because I want the schema to actively prevent other byte lengths.  I thought it was very elegant how union resolution handled this with no problems in the original spec.  Yes, I could wrap those fixed in records and have it render the same in the binary encoding, but we have code and files out there already with fixed directly in the unions.  We haven&apos;t been hit by the bug because we&apos;re only using the C implementation.&lt;/p&gt;</comment>
                            <comment id="12977852" author="cutting" created="Wed, 5 Jan 2011 17:08:13 +0000"  >&lt;p&gt;&amp;gt;  is the problem that there&apos;s no wrapper object for a union value?&lt;/p&gt;

&lt;p&gt;Yes.  Avro implementations in languages where runtime type information is available (Java, Python, Ruby, PHP, etc.) don&apos;t currently use a wrapper for union values.  This is convenient, since one can simply pass, e.g., either an int or a float, and the right thing will happen, but also can create some confusion when the language&apos;s types don&apos;t align well with Avro&apos;s.  For example, Python does not have a single-precision floating point type, just a double.  Generally this isn&apos;t a problem: if a schema declares a single-float, the double is truncated when it&apos;s written and expanded when it&apos;s read.  But if a union contains both single and double types, then Python will always write the type that&apos;s listed first in the union.  Such confusions aren&apos;t so great that anyone seems to agitating to add union wrappers to these implementations, since that would make unions considerably less convenient to use.  But if there are ways we can modify Avro to minimize such confusions, so much the better.&lt;/p&gt;</comment>
                            <comment id="12977859" author="cutting" created="Wed, 5 Jan 2011 17:24:39 +0000"  >&lt;p&gt;&amp;gt; this patch would be a major backwards-incompatible change to the spec. In our code, we we&apos;re using the &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;null&amp;quot;, &amp;quot;fixed4&amp;quot;, &amp;quot;fixed16&amp;quot;&amp;#93;&lt;/span&gt; case all the time to represent IPv4 or IPv6 addresses&lt;/p&gt;

&lt;p&gt;That would nix the patch, then, since we don&apos;t want to introduce such an incompatibility. If C does correctly implement unions as specified then I was mistaken to assert above that no language did.&lt;/p&gt;

&lt;p&gt;So instead perhaps I should fix Java to correctly implement unions as currently specified:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;fixing union dispatch among records to consider the namespace (easy, should be compatible, already in this patch)&lt;/li&gt;
	&lt;li&gt;adding a getSchema() method to GenericEnumSymbol and GenericFixed so that we can check the name (incompatible API change, adding a Schema method to the constructors for these)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Unless there are objections, I&apos;ll try this approach.&lt;/p&gt;</comment>
                            <comment id="12977860" author="philip" created="Wed, 5 Jan 2011 17:24:41 +0000"  >&lt;p&gt;For what it&apos;s worth, I&apos;ve always slightly agitated for wrappers.  I like dynamic typing as much as the next guy, but when type information is available, I want to be able to get at it unambiguously.  It&apos;s probably too late to change.  (Though part of the beauty of some of this stuff is that it&apos;s possible to have two different client implementations to try out.)&lt;/p&gt;</comment>
                            <comment id="12977885" author="cutting" created="Wed, 5 Jan 2011 18:04:45 +0000"  >&lt;p&gt;There aren&apos;t currently ambiguities between Avro&apos;s data model and Java&apos;s: we just have some bugs in the Java implementation of the spec that no one had noticed before.  In Python, Ruby, and PHP there are true ambiguities (string/bytes/enum symbol/fixed, float/double, record/map) that could be helped by adding wrappers.  One could either add a union wrapper, or create wrappers for some of these types, e.g., EnumSymbol, FixedValue, etc.&lt;/p&gt;</comment>
                            <comment id="12977937" author="dcreager" created="Wed, 5 Jan 2011 19:51:55 +0000"  >&lt;p&gt;You could make the union wrapper optional in the dynamic languages.  So when writing out a union schema value, if you get a union wrapper data instance, then great, that&apos;s used to choose the branch.  If not, it uses the previous rules, with the caveat that there might a run-time error if the schema is ambiguous.  For most people, who have unambiguous schemas, they don&apos;t need to jump through the extra hoops.  But if you do have an ambiguous schema, you have a way to resolve the ambiguity.&lt;/p&gt;

&lt;p&gt;That could work as an alternative solution on the Java side, too, if you want to avoid breaking API compatibility.&lt;/p&gt;</comment>
                            <comment id="12978144" author="scott_carey" created="Thu, 6 Jan 2011 05:28:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;But....this patch would be a major backwards-incompatible change to the spec. In our code, we we&apos;re using the &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;null&amp;quot;, &amp;quot;fixed4&amp;quot;, &amp;quot;fixed16&amp;quot;&amp;#93;&lt;/span&gt; case all the time to represent IPv4 or IPv6 addresses.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I have a lot of data written by Java in Avro Data Files with a similar Union of two fixed types for IPv4 / IPv6 handling.  I have not run into the bug (yet) because we haven&apos;t used the ipv6 branch yet in real data.&lt;/p&gt;

&lt;p&gt;If there was a change, new code would have to be able to read old data serialized with such unions and persisted with those schemas in Avro Data Files or I&apos;d be stuck.  I might try Doug&apos;s patch and see what happens when it reads my data files next week if it is still relevant.&lt;/p&gt;

&lt;p&gt;I feel that the best approach here is to have the dynamic languages be responsible in their own APIs for letting users decide how to deal with data types that the language doesn&apos;t support or that are ambiguous with other types.   Douglas Creager mentions a few possibilities.  We don&apos;t have to require that a Union use a wrapper, but we can use wrappers (or other techniques) optionally to disambiguate.&lt;/p&gt;

&lt;p&gt;There will always be a language that has a simpler typing system than Avro; its API will thus have some ambiguity and need mechanisms for users to disambiguate when writing to an Avro schema that is more rich than what is natural in that language.&lt;/p&gt;</comment>
                            <comment id="12978572" author="cutting" created="Thu, 6 Jan 2011 23:32:13 +0000"  >&lt;p&gt;Here&apos;s a patch intended to make Java correctly implement this aspect of the specification.  In particular, records, enums and fixed in unions should be resolved in unions on the basis of their full names, including namespace.&lt;/p&gt;

&lt;p&gt;I&apos;ve attempted to do this back-compatibly, so that Java applications which don&apos;t use the new GenericData.EnumSymbol and GenericDataFixed constructors, and whose unions only contain a single enum or fixed will not be affected.  The old constructors are deprecated.&lt;/p&gt;

&lt;p&gt;This fails two tests, one expected, one not.  The expected failure is the compiler fidelity, since the generated code is changed.  The unexpected failure is in TestSchema#testComplexUnions, where ResolvingDecoder throws an exception.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;org.apache.avro.AvroTypeException: Found {
  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;fixed&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;Bar2&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;size&quot;&lt;/span&gt; : 1
}, expecting {
  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;fixed&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;Bar&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;size&quot;&lt;/span&gt; : 1
}
	at org.apache.avro.io.ResolvingDecoder.doAction(ResolvingDecoder.java:225)
	at org.apache.avro.io.parsing.Parser.advance(Parser.java:88)
	at org.apache.avro.io.ValidatingDecoder.checkFixed(ValidatingDecoder.java:121)
	at org.apache.avro.io.ValidatingDecoder.readFixed(ValidatingDecoder.java:132)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader.readFixed(GenericDatumReader.java:234)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader.read(GenericDatumReader.java:126)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader.read(GenericDatumReader.java:125)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader.read(GenericDatumReader.java:112)
	at org.apache.avro.TestSchema.checkBinary(TestSchema.java:592)
	at org.apache.avro.TestSchema.check(TestSchema.java:556)
	at org.apache.avro.TestSchema.testComplexUnions(TestSchema.java:336)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thiru, do you have any idea what causes this?&lt;/p&gt;</comment>
                            <comment id="12995073" author="cutting" created="Wed, 16 Feb 2011 00:11:21 +0000"  >&lt;p&gt;Updated patch for changes to trunk.&lt;/p&gt;</comment>
                            <comment id="12995077" author="cutting" created="Wed, 16 Feb 2011 00:15:25 +0000"  >&lt;p&gt;Make patch root-relative.&lt;/p&gt;</comment>
                            <comment id="12995079" author="cutting" created="Wed, 16 Feb 2011 00:16:31 +0000"  >&lt;p&gt;It might be useful to get more eyes on this patch, even though it doesn&apos;t yet pass all tests.&lt;/p&gt;</comment>
                            <comment id="12995132" author="scott_carey" created="Wed, 16 Feb 2011 03:08:31 +0000"  >&lt;p&gt;I&apos;ve had a quick look at it, I&apos;ll have a deeper look later.&lt;/p&gt;

&lt;p&gt;This looks straight-forward and clean on the quick scan:  Records, Enums, and Fixed now all have schema members and check full names.&lt;/p&gt;

&lt;p&gt;Fixed and Enum allow for matching if one side does not have a schema, that might get a little tricky since it probably breaks transitivity of equals() and needs to synch with hashCode if we ever use the object in a Map.&lt;/p&gt;</comment>
                            <comment id="12995368" author="cutting" created="Wed, 16 Feb 2011 16:24:02 +0000"  >&lt;p&gt;Thanks for looking at this, Scott.&lt;/p&gt;

&lt;p&gt;&amp;gt; Fixed and Enum allow for matching if one side does not have a schema [ ... ]&lt;/p&gt;

&lt;p&gt;The intent there was to be back-compatible, to not require a schema be passed to the constructor, but perhaps that&apos;s not worth it.  &lt;/p&gt;</comment>
                            <comment id="12997115" author="scott_carey" created="Sun, 20 Feb 2011 09:13:51 +0000"  >&lt;p&gt;I solved the Unit test error. ResolvingGrammarGenerator.bestBranch() was only checking for records, it needs to check fixed and enum too:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;       &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; j = 0;
       &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Schema b : r.getTypes()) {
         &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (vt == b.getType())
-          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (vt == Schema.Type.RECORD) {
-            &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; vname = w.getName();
-            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (vname == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || vname.equals(b.getName()))
+          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (vt == Schema.Type.RECORD || vt == Schema.Type.ENUM || 
+              vt == Schema.Type.FIXED) {
+            &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; vname = w.getFullName();
+            &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; bname = b.getFullName();
+            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((vname != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; vname.equals(bname))
+                || vname == bname)
               &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; j;
           } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;
             &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; j;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;The intent there was to be back-compatible, to not require a schema be passed to the constructor, but perhaps that&apos;s not worth it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Perhaps we can allow null to equal null, and strings to match, but disallow null to match strings.&lt;br/&gt;
This will cause problems if people mix/match them, but will work with the old constructors if the user is consistent.   It would cause problems if mix/matched, and So maybe that is not worth it.&lt;/p&gt;</comment>
                            <comment id="12997496" author="cutting" created="Mon, 21 Feb 2011 17:59:40 +0000"  >&lt;p&gt;Thanks for fixing the error, Scott!&lt;/p&gt;

&lt;p&gt;This changes the specific compiler output, which causes TestTemplatedCompilerFidelity to fail.  In that case, I think the fix is to remove that test, since it&apos;s purpose was to get us through the transition to the templated compiler.  Now we should just maintain the templated compiler.&lt;/p&gt;

&lt;p&gt;Here&apos;s a new version of the patch that includes Scott&apos;s fix and removes TestTemplatedCompilerFidelity.&lt;/p&gt;

&lt;p&gt;Should I:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;commit this as-is, with back-compatible enum &amp;amp; fixed constructors; or&lt;/li&gt;
	&lt;li&gt;remove the back-compatibility, forcing folks to upgrade their enum &amp;amp; fixed constructor invocations&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Note that, for specific and reflect, the change is only for fixed constructors, since enums are handled automatically in those cases.&lt;/p&gt;</comment>
                            <comment id="12997580" author="scott_carey" created="Mon, 21 Feb 2011 21:41:23 +0000"  >&lt;p&gt;The patch needs a change.   &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The change I suggested above does not allow a null name to match a non-null name in ResolvingGrammarGenerator.   It needs to be consistent with all the other checks one way or another.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It was: if (vname == null || vname.equals(b.getName()))&lt;br/&gt;
which allows nulls to match non-nulls if equals() does, and now it is:&lt;/p&gt;

&lt;p&gt;if ((vname != null &amp;amp;&amp;amp; vname.equals(bname)) || vname == bname)&lt;br/&gt;
which only allows nulls to equal nulls.&lt;/p&gt;


&lt;p&gt;If we allow null names to match non-nulls for compatibility reasons in the short term, lets make it clear in the CHANGES.txt/javadoc that the old constructors are deprecated and it is recommended to avoid mix/matching the two.&lt;br/&gt;
Hashmaps may behave strangely if these are used as keys.&lt;/p&gt;</comment>
                            <comment id="12997592" author="cutting" created="Mon, 21 Feb 2011 22:28:24 +0000"  >&lt;p&gt;Maybe we should not permit nulls to match anything but nulls and remove the old constructors, forcing folks to upgrade.  Null names are currently used by RPC parameter list record schemas, so we can&apos;t remove them for records, but we I think we can remove them altogether for enum and fixed.&lt;/p&gt;</comment>
                            <comment id="12998599" author="cutting" created="Wed, 23 Feb 2011 23:09:59 +0000"  >&lt;p&gt;New version of patch that removes the old GenericData.Fixed and GenericData.EnumSymbol constructors.  Null names are only permitted for records and only match another null name, in order to support message parameter lists.&lt;/p&gt;

&lt;p&gt;Unless there are objections, I will commit this version soon.&lt;/p&gt;</comment>
                            <comment id="12999080" author="cutting" created="Thu, 24 Feb 2011 22:20:51 +0000"  >&lt;p&gt;I have committed this.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12442136">AVRO-248</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12473201">AVRO-654</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12471782" name="AVRO-656.patch" size="27080" author="cutting" created="Wed, 23 Feb 2011 23:09:59 +0000"/>
                            <attachment id="12471574" name="AVRO-656.patch" size="26411" author="cutting" created="Mon, 21 Feb 2011 17:59:40 +0000"/>
                            <attachment id="12471133" name="AVRO-656.patch" size="22959" author="cutting" created="Wed, 16 Feb 2011 00:15:25 +0000"/>
                            <attachment id="12471132" name="AVRO-656.patch" size="22359" author="cutting" created="Wed, 16 Feb 2011 00:11:21 +0000"/>
                            <attachment id="12467688" name="AVRO-656.patch" size="22305" author="cutting" created="Thu, 6 Jan 2011 23:32:13 +0000"/>
                            <attachment id="12467495" name="AVRO-656.patch" size="10187" author="cutting" created="Wed, 5 Jan 2011 00:09:07 +0000"/>
                            <attachment id="12453814" name="AVRO-656.patch" size="1803" author="cutting" created="Fri, 3 Sep 2010 19:42:39 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 3 Sep 2010 20:42:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4145</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 48 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1o7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80033</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-657] md5/sha1 files not being generated correctly</title>
                <link>https://issues.apache.org/jira/browse/AVRO-657</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The md5/sha1 files are not being generated correctly:&lt;/p&gt;

&lt;p&gt;cat avro-src-1.4.0.tar.gz.md5 &lt;br/&gt;
e614c3e5173293b35f4f25a6e15e131b  dist/avro-src-1.4.0.tar.gz&lt;/p&gt;

&lt;p&gt;notice the file path is prefixed with &quot;dist/&quot;. This causes a problem when downloading the md5/sha1 along with the archive itself, and then using the md5sum or sha1sum tools to verify:&lt;/p&gt;

&lt;p&gt;md5sum -c avro-src-1.4.0.tar.gz.md5 &lt;br/&gt;
md5sum: dist/avro-src-1.4.0.tar.gz: No such file or directory&lt;br/&gt;
dist/avro-src-1.4.0.tar.gz: FAILED open or read&lt;br/&gt;
md5sum: WARNING: 1 of 1 listed file could not be read&lt;/p&gt;

&lt;p&gt;(the md5 and tar.gz file exist in the same download directory)&lt;/p&gt;

&lt;p&gt;Note that the sums are correct, however the -c option does not work as intended given the path prefix.&lt;/p&gt;

</description>
                <environment></environment>
        <key id="12473422">AVRO-657</key>
            <summary>md5/sha1 files not being generated correctly</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="phunt">Patrick Hunt</reporter>
                        <labels>
                    </labels>
                <created>Tue, 7 Sep 2010 06:34:20 +0000</created>
                <updated>Thu, 14 Oct 2010 19:06:52 +0000</updated>
                            <resolved>Mon, 13 Sep 2010 19:04:52 +0000</resolved>
                                    <version>1.4.0</version>
                                    <fixVersion>1.4.1</fixVersion>
                                    <component>build</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12907417" author="cutting" created="Wed, 8 Sep 2010 20:35:42 +0000"  >&lt;p&gt;Here&apos;s a patch that fixes this.&lt;/p&gt;</comment>
                            <comment id="12908930" author="cutting" created="Mon, 13 Sep 2010 19:04:52 +0000"  >&lt;p&gt;I committed this.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12454155" name="AVRO-657.patch" size="3217" author="cutting" created="Wed, 8 Sep 2010 20:35:42 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 8 Sep 2010 20:35:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94948</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 20 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1of:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80034</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
