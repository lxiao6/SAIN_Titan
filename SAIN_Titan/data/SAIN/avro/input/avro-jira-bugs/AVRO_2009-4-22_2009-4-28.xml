<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:12:04 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2009-4-22+AND+created+%3C%3D+2009-4-28+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="8" total="8"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-17] remove single float type</title>
                <link>https://issues.apache.org/jira/browse/AVRO-17</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Python and Thrift do not support a 32-bit single float type, nor do many applications use this type, so, for better compatibility, we can remove it from Avro.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12423721">AVRO-17</key>
            <summary>remove single float type</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Fri, 24 Apr 2009 17:43:34 +0000</created>
                <updated>Tue, 14 Jul 2009 23:04:48 +0000</updated>
                            <resolved>Tue, 12 May 2009 17:19:45 +0000</resolved>
                                                                    <component>spec</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12702525" author="jkreps" created="Fri, 24 Apr 2009 20:18:30 +0000"  >&lt;p&gt;Python not having this type should not necessarily mean it gets removed from the serialization format. Python also does not have a 32-bit int.&lt;/p&gt;

&lt;p&gt;There are a lot of use cases for a more compact floating point type for serialization, even though it is uncommon for in-memory usage. Many scientific-type applications, as well as anything that involves scoring (say for search or recommendations on a website) have gobs of floating point numbers that may not be accurate beyond a few decimal places. It is awfully convenient to have a more compact storage format for these.&lt;/p&gt;</comment>
                            <comment id="12702541" author="cutting" created="Fri, 24 Apr 2009 20:45:07 +0000"  >&lt;p&gt;I don&apos;t have a strong feeling here.  It&apos;s in there now, and complicates Python and Thrift compatibility a bit, but probably not so badly that we cannot deal with the consequences if we think lots of folks will use this.&lt;/p&gt;

&lt;p&gt;Note that, if we remove it, applications might use &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-10&quot; title=&quot;add fixed-size type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-10&quot;&gt;&lt;del&gt;AVRO-10&lt;/del&gt;&lt;/a&gt;&apos;s fixed format to store such 4-byte quantities.&lt;/p&gt;

&lt;p&gt;For example, one could define something like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;value&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;fixed&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;size&quot;&lt;/span&gt;: 4}}]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could even back-compatibly add things like this to a standard schema library, automatically included in every schema, so that applications could refer to these again as just &quot;float&quot;, and runtimes could include optimized handling of such types.  Double, md5, datetime, etc. might all be implemented this way.&lt;/p&gt;

&lt;p&gt;Hmm.  If we intend to go this way, then perhaps removing it now isn&apos;t required, since we can back-compatibly re-define it with a standard library...&lt;/p&gt;</comment>
                            <comment id="12702546" author="cutting" created="Fri, 24 Apr 2009 20:50:14 +0000"  >&lt;p&gt;&amp;gt; perhaps removing it now isn&apos;t required, since we can back-compatibly re-define it with a standard library...&lt;/p&gt;

&lt;p&gt;I take that back.  For back-compatibily, we&apos;d want the standard library definitions to always be included in the schema stored in files and sent over the wire: a runtime should only have to know about the primitives and compound types.  So having &quot;float&quot; without a definition in a data file wouldn&apos;t let us later remove this as a primitve and replace it in runtimes by a standard library.&lt;/p&gt;</comment>
                            <comment id="12702557" author="cutting" created="Fri, 24 Apr 2009 21:17:26 +0000"  >&lt;p&gt;So my current feeling is that we should leave single-float as it is, included.  Implementing it through a standard library makes it a second class citizen, unless we mandate support for the standard library, which is equivalent to including it as a primitive.  In many environments where Avro will be used, single-float is a first-class citizen, and in those where it is not, it can be converted to and from a double reasonably.&lt;/p&gt;

&lt;p&gt;If no significant objections arise in the next few days, I will close this as &quot;won&apos;t fix&quot;.&lt;/p&gt;
</comment>
                            <comment id="12708511" author="alangates" created="Tue, 12 May 2009 17:10:55 +0000"  >&lt;p&gt;From the pig viewpoint, I vote for not removing float.  We asked for feedback from our users (see &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-788&quot; title=&quot;Proposal to remove float from Pig data types&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-788&quot;&gt;&lt;del&gt;PIG-788&lt;/del&gt;&lt;/a&gt;) and found that some are using float (as opposed to double).  Pig would very much like to use Avro for internal serialization, but if it does not support types our users are using this will become move difficult.&lt;/p&gt;</comment>
                            <comment id="12708518" author="cutting" created="Tue, 12 May 2009 17:19:45 +0000"  >&lt;p&gt;Since folks feel float is useful, let&apos;s keep it.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 24 Apr 2009 20:18:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94346</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 37 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxpr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79392</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-18] add enum type</title>
                <link>https://issues.apache.org/jira/browse/AVRO-18</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Avro schemas should support enum types.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12423732">AVRO-18</key>
            <summary>add enum type</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Fri, 24 Apr 2009 20:04:03 +0000</created>
                <updated>Tue, 14 Jul 2009 22:50:09 +0000</updated>
                            <resolved>Tue, 19 May 2009 23:37:19 +0000</resolved>
                                                    <fixVersion>1.0.0</fixVersion>
                                    <component>spec</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12702523" author="cutting" created="Fri, 24 Apr 2009 20:15:07 +0000"  >&lt;p&gt;Like records, enums should probably be named.  So an enum might look like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Foo&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;values&quot;&lt;/span&gt;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;c&quot;&lt;/span&gt;]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Do we need to permit folks to specify explicit integer values, e.g.:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Foo&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;values&quot;&lt;/span&gt;: [{&lt;span class=&quot;code-quote&quot;&gt;&quot;a&quot;&lt;/span&gt;,-1}, {&lt;span class=&quot;code-quote&quot;&gt;&quot;b&quot;&lt;/span&gt;, 0}, {&lt;span class=&quot;code-quote&quot;&gt;&quot;c&quot;&lt;/span&gt;, 1}]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Java&apos;s specific and reflect API&apos;s we can represent enums as Java enums.&lt;/p&gt;

&lt;p&gt;In Java&apos;s generic API we might represent enum values as interned strings by default.&lt;/p&gt;</comment>
                            <comment id="12702580" author="massie" created="Fri, 24 Apr 2009 22:19:15 +0000"  >&lt;p&gt;I&apos;d like to suggest that we use this enum with union in order support discriminant unions much like xdr.&lt;/p&gt;

&lt;p&gt;For example, in XDR, the syntax for a union is..&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; my_enum {
  FOO,
  BAR,
  BAZ
};

union my_union &lt;span class=&quot;code-keyword&quot;&gt;switch&lt;/span&gt; (my_enum id){
   &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; FOO:
      string foo&amp;lt;&amp;gt;;
   &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; BAR:
      &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; bar;
   &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; BAZ:
      &lt;span class=&quot;code-object&quot;&gt;short&lt;/span&gt; baz;
   &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;:
      void
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Those enums are important in order to know the type of object being (de)serialized in the union.  &lt;/p&gt;

&lt;p&gt;Looking at the &quot;interop.js&quot; file in the current Avro distro, I see the union field looks like&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;unionField&quot;&lt;/span&gt;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;&quot;&lt;/span&gt;, {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;array&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;items&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;bytes&quot;&lt;/span&gt;}],
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which as far as I can tell, means that the union field can be a boolean, double or array.  How can you discriminate one from the other without a discriminant?&lt;/p&gt;

&lt;p&gt;Maybe we  need something like the following...&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Foo&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;values&quot;&lt;/span&gt;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;c&quot;&lt;/span&gt;]}

{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;union&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;my_union&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;discriminant&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Foo&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;schemas&quot;&lt;/span&gt;: {
     &lt;span class=&quot;code-quote&quot;&gt;&quot;a&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;&quot;&lt;/span&gt;,
     &lt;span class=&quot;code-quote&quot;&gt;&quot;b&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;&quot;&lt;/span&gt;,
     &lt;span class=&quot;code-quote&quot;&gt;&quot;c&quot;&lt;/span&gt;: {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;array&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;items&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;bytes&quot;&lt;/span&gt;}
  }.
  &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;void&quot;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;... or something similar?&lt;/p&gt;





</comment>
                            <comment id="12702615" author="cutting" created="Fri, 24 Apr 2009 23:17:00 +0000"  >&lt;p&gt;&amp;gt; How can you discriminate one from the other without a discriminant?&lt;/p&gt;

&lt;p&gt;Java &amp;amp; Python have runtime typing that permits, so we can get away without a discriminant in those languages.  Serialized Avro data uses an integer to indicate which branch is taken.  C will have to somehow explicitly represent the discrimininant in its in-memory datastructures.  If you&apos;re generating C structs (a specific rather than a generic api) then you might generate an enum whose names are related to the types of the union, to make it readable.&lt;/p&gt;

&lt;p&gt;In short, I&apos;d hoped we could not require explicit discriminants in schemas, since they&apos;re not required in all languages.  Does that not seem reasonable?&lt;/p&gt;</comment>
                            <comment id="12703242" author="massie" created="Mon, 27 Apr 2009 17:57:50 +0000"  >&lt;p&gt;That seems reasonable.&lt;/p&gt;

&lt;p&gt;The current Avro spec still has an explicit discriminant: the zero-based position within the union.  &lt;/p&gt;

&lt;p&gt;The nice thing about using enums when defining unions is that you don&apos;t have to make sure that your union schema order is maintained as schemas evolve.  Not using enums means that a &lt;span class=&quot;error&quot;&gt;&amp;#91;foo,bar,baz&amp;#93;&lt;/span&gt; union != a &lt;span class=&quot;error&quot;&gt;&amp;#91;bar,baz,foo&amp;#93;&lt;/span&gt; union on the wire/disk.  That is different than the way most people understand unions.  Users just need to be made aware in the docs.&lt;/p&gt;

&lt;p&gt;I&apos;ll use the schema offset as the discriminant unless I hear otherwise.&lt;/p&gt;
</comment>
                            <comment id="12703298" author="cutting" created="Mon, 27 Apr 2009 19:02:08 +0000"  >&lt;p&gt;&amp;gt; Not using enums means that a &lt;span class=&quot;error&quot;&gt;&amp;#91;foo,bar,baz&amp;#93;&lt;/span&gt; union != a &lt;span class=&quot;error&quot;&gt;&amp;#91;bar,baz,foo&amp;#93;&lt;/span&gt; union on the wire/disk&lt;/p&gt;

&lt;p&gt;Right, they are are not serialized identically, but we&apos;ve defined read-time resolution so that they don&apos;t have to be.  If one writes with &lt;span class=&quot;error&quot;&gt;&amp;#91;foo,bar,baz&amp;#93;&lt;/span&gt; and someone else reads with &lt;span class=&quot;error&quot;&gt;&amp;#91;bar,baz,foo&amp;#93;&lt;/span&gt; then foo still matches foo when read.&lt;/p&gt;
</comment>
                            <comment id="12710002" author="cutting" created="Fri, 15 May 2009 22:33:02 +0000"  >&lt;p&gt;Here&apos;s a nearly complete version of this.  I still need to update the spec document and add more tests.  The implementation is simplified a bit, in that the schema does not permit explicit specification of ordinal values, like Java, just the set of symbols may be specified.&lt;/p&gt;</comment>
                            <comment id="12710508" author="cutting" created="Mon, 18 May 2009 21:54:31 +0000"  >&lt;p&gt;This contains a complete Java implementation of enums along with tests and updated documentation.&lt;/p&gt;

&lt;p&gt;Unfortunately it breaks python tests, which share schema files with Java tests.  Should I commit this as is?  Should I move the changes that break python to a separate issue?  Or, Sharad, would you like to add Python support to this patch?&lt;/p&gt;</comment>
                            <comment id="12710721" author="sharadag" created="Tue, 19 May 2009 12:46:58 +0000"  >&lt;p&gt;Patch with python support.&lt;/p&gt;</comment>
                            <comment id="12710723" author="sharadag" created="Tue, 19 May 2009 12:49:25 +0000"  >&lt;p&gt;minor comment on spec changes: No of complex types should read as five instead of four. It should include maps type as well. &lt;/p&gt;</comment>
                            <comment id="12710943" author="cutting" created="Tue, 19 May 2009 23:37:19 +0000"  >&lt;p&gt;Sharad, thanks for your rapid python implementation!&lt;/p&gt;

&lt;p&gt;&amp;gt; No of complex types should read as five instead of four. It should include maps type as well.&lt;/p&gt;

&lt;p&gt;Good catch.  I fixed that.&lt;/p&gt;

&lt;p&gt;I also added an interop test case and committed this.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12408480" name="AVRO-18-py.patch" size="57473" author="sharadag" created="Tue, 19 May 2009 12:46:58 +0000"/>
                            <attachment id="12408417" name="AVRO-18.patch" size="30096" author="cutting" created="Mon, 18 May 2009 21:54:31 +0000"/>
                            <attachment id="12408287" name="AVRO-18.patch" size="21003" author="cutting" created="Fri, 15 May 2009 22:33:02 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 24 Apr 2009 22:19:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94347</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 36 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxpz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79393</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-19] add file include support</title>
                <link>https://issues.apache.org/jira/browse/AVRO-19</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Schemas and protocols stored in files should support inclusion of other schema files.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12423737">AVRO-19</key>
            <summary>add file include support</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Fri, 24 Apr 2009 20:53:44 +0000</created>
                <updated>Tue, 14 Jul 2009 23:15:35 +0000</updated>
                            <resolved>Tue, 14 Jul 2009 23:07:57 +0000</resolved>
                                                    <fixVersion>1.0.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12702550" author="cutting" created="Fri, 24 Apr 2009 21:03:43 +0000"  >&lt;p&gt;It would be simplest to implement includes textually, via a preprocessor, like cpp or m4, since we want to include the transitive closure whenever we store schemas in files or send protocols over the wire.&lt;/p&gt;</comment>
                            <comment id="12731190" author="cutting" created="Tue, 14 Jul 2009 23:07:57 +0000"  >&lt;p&gt;m2 inclusion was implemented in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2&quot; title=&quot;optimize RPC handshake&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2&quot;&gt;&lt;del&gt;AVRO-2&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94348</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 28 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxq7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79394</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-20] add a library of standard schemas</title>
                <link>https://issues.apache.org/jira/browse/AVRO-20</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;We might pre-define some useful records in a reserved namespace (e.g. org.apache.avro.lib), like md5, datetime, etc.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12423738">AVRO-20</key>
            <summary>add a library of standard schemas</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Fri, 24 Apr 2009 21:04:35 +0000</created>
                <updated>Wed, 10 Mar 2010 19:15:56 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                    <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12458699">AVRO-456</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94349</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 40 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxqf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79395</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-21] namespace should be defaulted from containing definition</title>
                <link>https://issues.apache.org/jira/browse/AVRO-21</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Protocol and record definitions include a &quot;namespace&quot; specification.  Currently, when one is not specified, it defaults to null.  Rather, it should default to the namespace of the containing definition, if any.&lt;/p&gt;

&lt;p&gt;The specification document should probably also be updated to clarify that namespaces should use java package naming conventions, of a reversed domain name.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12423741">AVRO-21</key>
            <summary>namespace should be defaulted from containing definition</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Fri, 24 Apr 2009 21:10:59 +0000</created>
                <updated>Tue, 14 Jul 2009 22:50:09 +0000</updated>
                            <resolved>Wed, 13 May 2009 17:56:43 +0000</resolved>
                                                    <fixVersion>1.0.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12708686" author="cutting" created="Tue, 12 May 2009 23:33:10 +0000"  >&lt;p&gt;Here&apos;s a patch that fixes this.  It also tightens some class visibility.&lt;/p&gt;</comment>
                            <comment id="12709030" author="cutting" created="Wed, 13 May 2009 17:56:17 +0000"  >&lt;p&gt;There are still naming issues to fix (e.g., &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-30&quot; title=&quot;name lookup should consider namespace&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-30&quot;&gt;&lt;del&gt;AVRO-30&lt;/del&gt;&lt;/a&gt;) but I want to commit this now so &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-18&quot; title=&quot;add enum type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-18&quot;&gt;&lt;del&gt;AVRO-18&lt;/del&gt;&lt;/a&gt; can build on it.  I don&apos;t know whether it&apos;s still an issue for Python or (soon) C, but this can be addressed in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-30&quot; title=&quot;name lookup should consider namespace&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-30&quot;&gt;&lt;del&gt;AVRO-30&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12709031" author="cutting" created="Wed, 13 May 2009 17:56:43 +0000"  >&lt;p&gt;I just committed this.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12407939" name="AVRO-21.patch" size="9540" author="cutting" created="Tue, 12 May 2009 23:33:10 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94350</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 37 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxqn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79396</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-22] Kill anonymous records or fix GenericDatumReader</title>
                <link>https://issues.apache.org/jira/browse/AVRO-22</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Anonymous record names are a pain, can we get rid of them?&lt;/p&gt;

&lt;p&gt;If not, I think I noticed a bug in GenericDatumReader.resolveExpected:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;     if (branch.getType() == Type.RECORD) {
       String name = branch.getName();
       if (name == null || name.equals(actual.getName()))
         return branch;
     } else
       return branch;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This doesn&apos;t seem to require that &lt;em&gt;both&lt;/em&gt; are null to match: if the name of &lt;tt&gt;branch&lt;/tt&gt; is null and the name &lt;tt&gt;actual&lt;/tt&gt; is not, then we get a match, which I think is a bug.&lt;/p&gt;

&lt;p&gt;But again, let&apos;s just get rid of null names.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12423766">AVRO-22</key>
            <summary>Kill anonymous records or fix GenericDatumReader</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="raymie">Raymie Stata</reporter>
                        <labels>
                    </labels>
                <created>Sat, 25 Apr 2009 11:19:17 +0000</created>
                <updated>Tue, 14 Jul 2009 22:50:09 +0000</updated>
                            <resolved>Fri, 5 Jun 2009 18:59:36 +0000</resolved>
                                                    <fixVersion>1.0.0</fixVersion>
                                    <component>spec</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12703057" author="sharadag" created="Mon, 27 Apr 2009 10:37:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;But again, let&apos;s just get rid of null names.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1 I think it creates more pain than benefit.&lt;/p&gt;</comment>
                            <comment id="12703258" author="cutting" created="Mon, 27 Apr 2009 18:12:27 +0000"  >&lt;p&gt;&amp;gt; This doesn&apos;t seem to require that both are null to match: if the name of branch is null and the name actual is not, then we get a match, which I think is a bug.&lt;/p&gt;

&lt;p&gt;I did that intentionally, thinking that, if one doesn&apos;t specify a name in a record, one doesn&apos;t care to match names, and it should match anything.  But that&apos;s not intuitive to all!&lt;/p&gt;

&lt;p&gt;&amp;gt; Anonymous record names are a pain, can we get rid of them?&lt;/p&gt;

&lt;p&gt;We use unnamed records  internally to implement message parameters.  These are serialized and deserialized just like named records, so it&apos;s nice to be able to share that code.&lt;/p&gt;

&lt;p&gt;We might:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;ban unnamed user-schemas, but continue to use them to implement parameters; or&lt;/li&gt;
	&lt;li&gt;define an unnamed superclass of RecordSchema that&apos;s used for parameters.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The latter would probably be substantially more complicated than the former, and force us to expand the public interface, so my preference is for the former.  Other ideas?&lt;/p&gt;</comment>
                            <comment id="12703979" author="raymie" created="Wed, 29 Apr 2009 03:46:14 +0000"  >&lt;p&gt;I vote for (1) &amp;#8211; bad unnamed user-schemas, but continue to use them to implement parameters.&lt;/p&gt;</comment>
                            <comment id="12712272" author="cutting" created="Fri, 22 May 2009 21:31:49 +0000"  >&lt;p&gt;I just committed this.&lt;/p&gt;</comment>
                            <comment id="12712298" author="hong.tang" created="Fri, 22 May 2009 22:40:13 +0000"  >&lt;p&gt;Wait, anonymous records are currently the only way to implement versioned records. We cannot kill anonymous records before we fix &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-23&quot; title=&quot;Schema.toString() fails for a union of versioned records.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-23&quot;&gt;AVRO-23&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12712308" author="cutting" created="Fri, 22 May 2009 23:37:39 +0000"  >&lt;p&gt;&amp;gt; Wait, anonymous records are currently the only way to implement versioned records.&lt;/p&gt;

&lt;p&gt;Anonymous records can still be created programmatically.  One can convert a JSON record schema into an anonymous record with:&lt;/p&gt;

&lt;p&gt;  Schema.create(Schema.parse(jsonText).getFields())&lt;/p&gt;

&lt;p&gt;Then you can construct a union of these.  Does that suffice?&lt;/p&gt;

&lt;p&gt;Also, rather than re-opening this issue, shouldn&apos;t we pursue this in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-23&quot; title=&quot;Schema.toString() fails for a union of versioned records.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-23&quot;&gt;AVRO-23&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="12712320" author="hong.tang" created="Sat, 23 May 2009 00:17:39 +0000"  >&lt;p&gt;That may not be sufficient because I do need to save the union to persistent storage as a string, and later I would not be able to reconstruct the schema through parse(). The asymmetric behavior between toString() and parse() is not obvious for people to understand. Also, since programmers can still create null records, it seems that code dealing with null named records are still there.&lt;/p&gt;
</comment>
                            <comment id="12713207" author="cutting" created="Tue, 26 May 2009 19:40:27 +0000"  >&lt;p&gt;I&apos;m okay restoring anonymous records.  Raymie?  Sharad?&lt;/p&gt;</comment>
                            <comment id="12713414" author="raymie" created="Wed, 27 May 2009 04:55:56 +0000"  >&lt;p&gt;It&apos;s a pain to have to special-case code that handles record-names to always be checking for null (and also, as noted previously, the resolution rules are non-obvious).  What if the &quot;request&quot; schema of a Message always had the name &quot;args&quot;, and the &quot;response&quot; schema always had the name &quot;results&quot;.  Then we get rid of null names altogether.&lt;/p&gt;

&lt;p&gt;(BTW, Protocol.createMessage should probably throw IllegalArgumentException when passed arguments of the wrong type (e.g., a non-record schema for &quot;request&quot;).)&lt;/p&gt;</comment>
                            <comment id="12713611" author="cutting" created="Wed, 27 May 2009 15:48:46 +0000"  >&lt;p&gt;&amp;gt; What if the &quot;request&quot; schema of a Message always had the name &quot;args&quot;, and the &quot;response&quot; schema always had the name &quot;results&quot;.&lt;/p&gt;

&lt;p&gt;RPC parameters are not the problem that&apos;s affecting Hong.  He wishes to be able to construct a union containing different versions of a record with the same name (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-23&quot; title=&quot;Schema.toString() fails for a union of versioned records.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-23&quot;&gt;AVRO-23&lt;/a&gt;), but Avro will not parse a schema that contains multiple records of the same name.  As a work around, he&apos;s using anonymous records.&lt;/p&gt;

&lt;p&gt;An alternative might be to somehow permit multiple records of the same name.  For example, the scope of a re-definition might be limited to references within itself.  Another alternative might be to rename records, so that Foo becomes Foo1, Foo2, etc.  However such approaches should be considered in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-23&quot; title=&quot;Schema.toString() fails for a union of versioned records.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-23&quot;&gt;AVRO-23&lt;/a&gt;, not here.&lt;/p&gt;</comment>
                            <comment id="12713640" author="hong.tang" created="Wed, 27 May 2009 16:49:24 +0000"  >&lt;p&gt;I am fine with moving the discussion of supporting multiple records with the same name (renaming or not) to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-23&quot; title=&quot;Schema.toString() fails for a union of versioned records.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-23&quot;&gt;AVRO-23&lt;/a&gt;. In fact, I have been thinking that I could label anonymous record definitions with some random ids, essentially the same way how GCC generates symbols defined in anonymous namespaces. Maybe that could be how anonymous definitions are handled in Avro in general?&lt;/p&gt;

&lt;p&gt;The only lingering issue I have is wrt the changes Doug checked in, which breaks the symmetry between parse() and toString(). &lt;/p&gt;</comment>
                            <comment id="12713648" author="cutting" created="Wed, 27 May 2009 17:18:17 +0000"  >&lt;p&gt;&amp;gt; The only lingering issue I have is wrt the changes Doug checked in, which breaks the symmetry between parse() and toString(). &lt;/p&gt;

&lt;p&gt;To be clear, your concern is that one can programmatically create a schema whose toString() cannot be read?  Isn&apos;t this true regardless of anonymous records, since we don&apos;t check for name conflicts when we create a compound schema?  This seems like a separate issue from whether parse permits anonymous records.  I think we all agree it should not, and that&apos;s the change that was committed for this issue.  If we want to make it impossible to construct a schema that toString() cannot write and/or parse cannot read, we should perhaps address that in a separate issue.&lt;/p&gt;

&lt;p&gt;So can we re-close this issue?  To my thinking, this was a specification question: are anonymous records permissible in JSON schemas?  If the Java implementation&apos;s toString() generates unparseable strings, that&apos;s a bug in Java, not a specification issue.&lt;/p&gt;</comment>
                            <comment id="12716726" author="cutting" created="Fri, 5 Jun 2009 18:59:36 +0000"  >&lt;p&gt;Resolving.  Further discussion can be had in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-23&quot; title=&quot;Schema.toString() fails for a union of versioned records.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-23&quot;&gt;AVRO-23&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 27 Apr 2009 10:37:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94351</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 34 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxr3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79398</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-23] Schema.toString() fails for a union of versioned records.</title>
                <link>https://issues.apache.org/jira/browse/AVRO-23</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Schema.toString() fails to create a string representation for a union that contains versioned records.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12423830">AVRO-23</key>
            <summary>Schema.toString() fails for a union of versioned records.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="hong.tang">Hong Tang</reporter>
                        <labels>
                    </labels>
                <created>Mon, 27 Apr 2009 05:27:33 +0000</created>
                <updated>Tue, 28 Jul 2009 22:40:32 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12702993" author="hong.tang" created="Mon, 27 Apr 2009 05:29:16 +0000"  >&lt;p&gt;test case: &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testVersionedUnion() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    Schema s1 = Schema.create(&lt;span class=&quot;code-quote&quot;&gt;&quot;R&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
    Schema s2 = Schema.create(&lt;span class=&quot;code-quote&quot;&gt;&quot;R&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
    Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Schema&amp;gt; f1 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; LinkedHashMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Schema&amp;gt;();
    f1.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;a&quot;&lt;/span&gt;, Schema.create(Type.BOOLEAN));
    Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Schema&amp;gt; f2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; LinkedHashMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Schema&amp;gt;();
    f2.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;a&quot;&lt;/span&gt;, Schema.create(Type.INT));
    s1.setFields(f1);
    s2.setFields(f2);
    List&amp;lt;Schema&amp;gt; union = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Schema&amp;gt;();
    union.add(s1);
    union.add(s2);
    Schema s3 = Schema.create(union);
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; ss = s3.toString();
    assertTrue(ss.length() &amp;gt; 0);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Error received:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Can&apos;t redefine: R
org.apache.avro.SchemaParseException: Can&apos;t redefine: R
    at org.apache.avro.Schema$Names.put(Schema.java:439)
    at org.apache.avro.Schema$Names.put(Schema.java:1)
    at org.apache.avro.Schema$RecordSchema.toString(Schema.java:234)
    at org.apache.avro.Schema$UnionSchema.toString(Schema.java:333)
    at org.apache.avro.Schema.toString(Schema.java:167)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12713616" author="cutting" created="Wed, 27 May 2009 16:01:23 +0000"  >&lt;p&gt;One way to implement this, without altering Avro, would be to write a renaming schema copier, something like:&lt;/p&gt;

&lt;p&gt;  public Schema copy(Schema source, Map&amp;lt;String,String&amp;gt; renames);&lt;/p&gt;

&lt;p&gt;This would be pretty simple to write.  One could construct the renaming table by first walking the schema to find all of the names in it, with a method like:&lt;/p&gt;

&lt;p&gt;  public Map&amp;lt;String,Schema&amp;gt; getNames(Schema schema);&lt;/p&gt;

&lt;p&gt;This would also be simple to write.  Then, give a set of schemas, one can maintain a set of all names already seen, and as one adds the schemas to a union, rename any whose names have already been used.&lt;/p&gt;

&lt;p&gt;Another approach might be to define scoping rules, e.g., a re-definition might only be visible within itself.  This would be confusingly inconsistent, however, since in a protocol we&apos;d like sibling definitions to be visible to one another, but in this case we do not want sibling definitions to be visible to one another.  So I prefer the renaming approach.&lt;/p&gt;

&lt;p&gt;Note that with renaming, one could use a convention like suffixing names with _X, which one could then remove again later.  Or, once namespaces are correctly supported (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-30&quot; title=&quot;name lookup should consider namespace&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-30&quot;&gt;&lt;del&gt;AVRO-30&lt;/del&gt;&lt;/a&gt;), renaming could just change the package.&lt;/p&gt;</comment>
                            <comment id="12713642" author="hong.tang" created="Wed, 27 May 2009 17:00:27 +0000"  >&lt;p&gt;Another way to look at it is that the name defined in JSON schema is what a user sees, while the names stored in schema objects and maintained in internal dictionary are always renamed or, in compiler terms, mangled symbols. I personally like prefixing and/or length delimited schemes, which is easier to demangle.&lt;/p&gt;</comment>
                            <comment id="12731191" author="cutting" created="Tue, 14 Jul 2009 23:09:19 +0000"  >&lt;p&gt;Can I resolve this as &quot;won&apos;t fix&quot;?  I don&apos;t think we want to permit multiple records with the same name in a schema.&lt;/p&gt;</comment>
                            <comment id="12731196" author="hong.tang" created="Tue, 14 Jul 2009 23:17:53 +0000"  >&lt;p&gt;What if records of the same name creeps in due to inclusion and transitive closure calculation?&lt;/p&gt;</comment>
                            <comment id="12731202" author="cutting" created="Tue, 14 Jul 2009 23:28:08 +0000"  >&lt;p&gt;&amp;gt; What if records of the same name creeps in due to inclusion and transitive closure calculation?&lt;/p&gt;

&lt;p&gt;That would be an error.  Since toString() fails on such schemas, this is implemented correctly.  One cannot write data without at some point calling toString() on a schema, even if only to cache its MD5 hash.&lt;/p&gt;</comment>
                            <comment id="12735992" author="hong.tang" created="Tue, 28 Jul 2009 08:50:33 +0000"  >&lt;p&gt;@doug, I am concerned that the avro&apos;s capability of supporting versioned records is diminishing if we disallow schemas of the same name in a union. Here is my hypothetical usage case:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;I have multiple data sources, each may contain a particular version of the same record R. To be concrete, let&apos;s say I have two sources, S1 is a container of V1 of R, and S2 is a container of V2 of R.&lt;/li&gt;
	&lt;li&gt;I want to sort/merge the two containers by some key (outside R), which would lead to the interleaving of records from S1 and S2.&lt;/li&gt;
	&lt;li&gt;I could convert all records into a common schema, but the problem is that I do not know which version is supposed to be the &quot;best&quot; one.&lt;/li&gt;
	&lt;li&gt;Particularly, the program that does the merge may only care about the keys, and not the versions of records in the containers. What it could do is to create a new schema as union(R_v1, R_v2), and prefix the bytes coming from S1 with index 0, and bytes coming from S2 index 1.&lt;/li&gt;
	&lt;li&gt;The consumer of this merged container must provide a version of R (Vx), and performs normal conversion from either V1 to Vx, or V2 to Vx for each individual record.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Like you said earlier, a workaround is to rename the schemas to different names (and possibly rename back in step 5). But it seems messy. And what about records nested inside? Do we also need to rename those too? Or does/will avro support nested (static) scoping rules?&lt;/p&gt;</comment>
                            <comment id="12736308" author="cutting" created="Tue, 28 Jul 2009 21:26:08 +0000"  >&lt;p&gt;This is all an optimization to avoid deserializing while merging, right?  Can&apos;t we deserialize as fast as we can read off disk anyway?  We can simply read using the lastest version of the schema and re-write things.&lt;/p&gt;

&lt;p&gt;If you really believe you must have this optimization, then you could build it into your container.  Rather than using a union, keep an explicit array of schemas that you&apos;ve seen.&lt;/p&gt;</comment>
                            <comment id="12736342" author="hong.tang" created="Tue, 28 Jul 2009 22:40:32 +0000"  >&lt;blockquote&gt;&lt;p&gt;This is all an optimization to avoid deserializing while merging, right? Can&apos;t we deserialize as fast as we can read off disk anyway? We can simply read using the lastest version of the schema and re-write things.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No, in the usage case I described, this is more than optimization. The sources may come from different origins and there may not be a total ordering of the versions of R. I think one of the advantages of Avro over Protocol Buffer is that it does not require global coordination for schema evolution.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If you really believe you must have this optimization, then you could build it into your container. Rather than using a union, keep an explicit array of schemas that you&apos;ve seen.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, I could work around the issue. However, schema evolution and bi-directional compatibility should be something that is closer to the framework than to the application. The analogy to your suggestion is that C++ does not need to provide method overloading, users can simply work around this issue by renaming methods with parameter types like addii(int, int), and adddd(double, double). &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 27 May 2009 16:01:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94352</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 26 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxrb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79399</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-24] benchmark bulk data</title>
                <link>https://issues.apache.org/jira/browse/AVRO-24</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;It would be good to validate that the RPC wire format is capable of transmitting bulk data efficiently.  In particular, to be used for HDFS file access, it must be able to, when including file data in an RPC response, or writing file data in an RPC request:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;saturate a disk&apos;s throughput or a network interface; and&lt;/li&gt;
	&lt;li&gt;not consume much CPU.&lt;br/&gt;
In other words, Avro&apos;s RPC should not be a bottleneck in the transfer of file data from a remote disk to an application or vice versa, and moreover it should leave the vast majority of the CPU for the application.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12423930">AVRO-24</key>
            <summary>benchmark bulk data</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21148&amp;avatarType=issuetype">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Mon, 27 Apr 2009 20:02:26 +0000</created>
                <updated>Wed, 14 Oct 2009 18:53:04 +0000</updated>
                            <resolved>Wed, 30 Sep 2009 21:32:28 +0000</resolved>
                                                    <fixVersion>1.2.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="12724203" author="rangadi" created="Thu, 25 Jun 2009 19:12:07 +0000"  >
&lt;p&gt;Are bulk transfers already part of the spec? I am interested in learning more about if and how they differ from non-bulk RPCs. &lt;/p&gt;

&lt;p&gt;Sometime back I briefly looked at Avro RPC server and noticed that it already avoids an extra copy compared to Hadoop while replying.&lt;/p&gt;</comment>
                            <comment id="12724252" author="cutting" created="Thu, 25 Jun 2009 20:21:27 +0000"  >&lt;p&gt;&amp;gt; Are bulk transfers already part of the spec?&lt;/p&gt;

&lt;p&gt;The idea is that bulk transfers can be efficiently implemented by just using the &apos;bytes&apos; type in parameter, field and/or return values.  When a large value of type bytes is transmitted, it generates a separate frame at the transport layer.  Clients can then read and write such large values without copying.  On write, if one passes a large ByteBuffer as a parameter, field or return value, a reference is passed down and it is written directly to the socket.  Similarly, on read, the ByteBuffer that&apos;s read from the socket is directly returned to the client as the value of the field, parameter or method.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://people.apache.org/~cutting/avro/spec.html#Message+Framing&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~cutting/avro/spec.html#Message+Framing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is not yet perfect.  First, while Avro permits object reuse, its RPC framework does not.  So, if an RPC method returns a ByteBuffer, a new ByteBuffer will be allocated per call.  However we could easily add a pool here to address this.&lt;/p&gt;

&lt;p&gt;Second, sendfile is not yet supported.  This would require using an alternate representation for values of type bytes.  One might define something like:&lt;/p&gt;

&lt;p&gt;interface ByteChannelable {&lt;br/&gt;
  int write(WritableByteChannel c);&lt;br/&gt;
  int read(ReadableByteChannel c);&lt;br/&gt;
  byte[] bytes();&lt;br/&gt;
  void bytes(byte[]);&lt;br/&gt;
  ByteBuffer buffer();&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;Then one could implement a version of this that contains a FileChannel and a start and end position whose read and write methods would call transferFrom and transferTo.&lt;/p&gt;

&lt;p&gt;We could switch to such a representation by default, instead of using ByteBuffer (which unfortunately cannot be extended).  Note that any Requestor and Responder can easily be extended to use a different DatumReader, so we would not have to make this the default.&lt;/p&gt;

&lt;p&gt;But first, I thought we&apos;d benchmark things without these changes to get a baseline.&lt;/p&gt;</comment>
                            <comment id="12724369" author="rangadi" created="Fri, 26 Jun 2009 02:46:17 +0000"  >
&lt;p&gt;Thanks Doug. I agree benchmarking first would be the way to go. &lt;/p&gt;

&lt;p&gt;I would not be much concerned about minimizing the copies (at least initially)... cpu usuallly is not a bottleneck. When Datanode&apos;s CPU usage while serving data went down nearly 10 times between 0.16 and 0.18, hardly anyone noticed (same, when it doubled between 0.13 and 0.14).&lt;/p&gt;

&lt;p&gt;Some of the cases I am interested in with bulk transfers (not not be addressed here, benchmarks help in assessing tthese) :&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;How the streaming reads are handled. Depending on frame size, client-side might not need pipelining. Reading 64KB frames might be enough to mask 1ms latency between frames. Otherwise it might need pipelining of multiple frames.&lt;/li&gt;
	&lt;li&gt;Connection management : do multiple simultaneous transfers use different connections? Do normal RPCs also share it. Hadoop does not yet have a case with lot of bulk and non-bulk RPCs at the same time.&lt;/li&gt;
	&lt;li&gt;Server side : Datanode : Is the disk data fetched inside RPC handler? Since data is directly written to client socket, will a slow client hold the handler.
	&lt;ul&gt;
		&lt;li&gt;If one slower disk inhibits serving data from other disks. Larger number of handlers can mask this.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12724603" author="cutting" created="Fri, 26 Jun 2009 16:23:54 +0000"  >&lt;p&gt;&amp;gt; Reading 64KB frames might be enough to mask 1ms latency between frames. Otherwise it might need pipelining of multiple frames.&lt;/p&gt;

&lt;p&gt;I agree.  I hope 64k frames will mean we don&apos;t need to add an async RPC API.  Note however that the wire format should not change with async: we&apos;ll tag requests and responses with a call ID anyway so that we can multiplex over a single connection.&lt;/p&gt;

&lt;p&gt;&amp;gt; do multiple simultaneous transfers use different connections?&lt;/p&gt;

&lt;p&gt;The plan is to make Hadoop&apos;s Client and Server implement Avro&apos;s Transciever interface, so the transport will be the same as Hadoop&apos;s current RPC transport.  This caches a single connection per host, so simultaneous transfers from or to a host share a connection.  We&apos;ll see how this goes.&lt;/p&gt;

&lt;p&gt;&amp;gt; Server side : Datanode : Is the disk data fetched inside RPC handler?&lt;/p&gt;

&lt;p&gt;If we use transferTo, the disk would be accessed in the Server.Responder thread, otherwise it will be accessed in a Server.Handler thread (of which there are many).  So, if we implement transferTo, we&apos;d probably need to change Server to support more responder threads too, but, if we don&apos;t, I think the existing handler pool will work well.  When there are more active requests than spindles, the server will slow down, as expected.  A slow spindle will mostly only affect requests to that spindle, since data will be fully buffered before the connection is accessed.&lt;/p&gt;</comment>
                            <comment id="12761013" author="cutting" created="Wed, 30 Sep 2009 21:32:28 +0000"  >&lt;p&gt;I just committed a simple benchmark that uses the new HTTP transport.  This defines a protocol with two methods, one sends a ByteBuffer and one that receives a ByteBuffer.&lt;/p&gt;

&lt;p&gt;Running it on my laptop, making 100k requests each of 100 bytes, reports the following:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java  -Dtest.count=100000 -Dtest.size=100 org.apache.avro.TestBulkData
READ
seconds = 18
requests/second = 5367
MB = 9
MB/second = 0
WRITE
seconds = 15
requests/second = 6655
MB = 9
MB/second = 0
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Increasing the bytes-per-request to 100k slows the request rate:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java -Dtest.count=100000 -Dtest.size=100000 org.apache.avro.TestBulkData
READ
seconds = 40
requests/second = 2460
MB = 9536
MB/second = 234
WRITE
seconds = 61
requests/second = 1637
MB = 9536
MB/second = 156
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 25 Jun 2009 19:12:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94353</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 17 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxrj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79400</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
