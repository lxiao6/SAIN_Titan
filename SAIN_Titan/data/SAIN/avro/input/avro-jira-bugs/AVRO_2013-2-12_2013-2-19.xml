<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:18:19 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2013-2-12+AND+created+%3C%3D+2013-2-19+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="6" total="6"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1251] Adding the compression option to NettyTransceiver</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1251</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;This is a more focused JIRA related to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1121&quot; title=&quot;Ability to compress the data within binary RPC protocol&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1121&quot;&gt;AVRO-1121&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The goal of this JIRA is to:&lt;br/&gt;
1. Be able to set up a NettyServer that will accept compressed and uncompressed requests from clients.&lt;br/&gt;
2. Be able to set up NettyTranseiver that supports compression options.&lt;/p&gt;

&lt;p&gt;The initial design is to allow the compression to be an option at setup of the server or client and implement this compression with Netty&apos;s own ZLibEncoder and ZLibDecoder&lt;/p&gt;</description>
                <environment></environment>
        <key id="12631861">AVRO-1251</key>
            <summary>Adding the compression option to NettyTransceiver</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ted.m">Theodore michael Malaska</assignee>
                                    <reporter username="ted.m">Theodore michael Malaska</reporter>
                        <labels>
                    </labels>
                <created>Tue, 12 Feb 2013 01:53:56 +0000</created>
                <updated>Wed, 27 Feb 2013 00:53:58 +0000</updated>
                            <resolved>Thu, 14 Feb 2013 22:26:37 +0000</resolved>
                                    <version>1.7.3</version>
                                    <fixVersion>1.7.4</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13576321" author="hshreedharan" created="Tue, 12 Feb 2013 02:53:18 +0000"  >&lt;p&gt;Sounds great, Ted. &lt;/p&gt;</comment>
                            <comment id="13576676" author="ted.m" created="Tue, 12 Feb 2013 15:18:20 +0000"  >&lt;p&gt;Hey Hari,&lt;/p&gt;

&lt;p&gt;Just started getting the env ready to make this change and I found TestNettyServerWithSSL.&lt;/p&gt;

&lt;p&gt;This is very cool.  If compression can be added in without modifying NettyServer or NettyTranseiver, then all I need to do is add a test case.  Then forward that test case to users that would like to implement compression.  Like the Flume project.&lt;/p&gt;</comment>
                            <comment id="13576742" author="ted.m" created="Tue, 12 Feb 2013 16:27:38 +0000"  >&lt;p&gt;Because the original design was so good, I was able to solve this JIRA without making a single code change.&lt;/p&gt;

&lt;p&gt;In this patch I simply added a test case for client/server compressed communication. This test case will live right next to the existing SSL client/server test case.&lt;/p&gt;

</comment>
                            <comment id="13576743" author="ted.m" created="Tue, 12 Feb 2013 16:28:55 +0000"  >&lt;p&gt;Fixed the JIRA by creating a test case that shows that the requested functionality is doable with the current Avro implementation.&lt;/p&gt;</comment>
                            <comment id="13576760" author="ted.m" created="Tue, 12 Feb 2013 16:42:52 +0000"  >&lt;p&gt;Cleaned up, some Copy paste comments and imports.&lt;/p&gt;</comment>
                            <comment id="13576818" author="hshreedharan" created="Tue, 12 Feb 2013 17:45:06 +0000"  >&lt;p&gt;Nice! This can be leveraged in projects like Flume, and it is even better because there are no code changes! Excellent work, Ted!&lt;/p&gt;</comment>
                            <comment id="13577114" author="ted.m" created="Tue, 12 Feb 2013 22:28:54 +0000"  >&lt;p&gt;I forgot to add the License.  After I finish &lt;a href=&quot;https://issues.apache.org/jira/browse/FLUME-1915&quot; title=&quot;Enhance NettyAvroRpcClient and the use of NettyServer to optionally use compression&quot; class=&quot;issue-link&quot; data-issue-key=&quot;FLUME-1915&quot;&gt;&lt;del&gt;FLUME-1915&lt;/del&gt;&lt;/a&gt; I will add the license and resubmit.  &lt;/p&gt;</comment>
                            <comment id="13578369" author="ted.m" created="Thu, 14 Feb 2013 13:52:32 +0000"  >&lt;p&gt;Added Apache License &lt;/p&gt;</comment>
                            <comment id="13578677" author="cutting" created="Thu, 14 Feb 2013 21:05:37 +0000"  >&lt;p&gt;This looks like it mostly replicates logic in TestNettyServerWithSSL.  Perhaps instead it could subclass that, or both could subclass a common TestNettyServer class, each overriding a getChannelPipelineFactory method?&lt;/p&gt;</comment>
                            <comment id="13578681" author="ted.m" created="Thu, 14 Feb 2013 21:10:48 +0000"  >&lt;p&gt;Yes I can do that thanks Doug.&lt;/p&gt;</comment>
                            <comment id="13578734" author="ted.m" created="Thu, 14 Feb 2013 22:06:47 +0000"  >&lt;p&gt;Here I make two new functions in TestNettyServer:&lt;/p&gt;

&lt;p&gt;1. initializeTransceiver&lt;br/&gt;
2. initializeServer&lt;/p&gt;

&lt;p&gt;TestNettyServerWithCompression and TestNettyServerWithSSL need only to implement these two methods now.  So in the end we have removed a lot of cut a paste code.&lt;/p&gt;</comment>
                            <comment id="13578755" author="cutting" created="Thu, 14 Feb 2013 22:26:37 +0000"  >&lt;p&gt;I committed this.  Thanks, Ted!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12569342" name="AVRO-1251.1.patch" size="7180" author="ted.m" created="Thu, 14 Feb 2013 13:52:32 +0000"/>
                            <attachment id="12569400" name="AVRO-1251.2.patch" size="11481" author="ted.m" created="Thu, 14 Feb 2013 22:06:47 +0000"/>
                            <attachment id="12568999" name="AVRO-1251.patch" size="6409" author="ted.m" created="Tue, 12 Feb 2013 16:27:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 12 Feb 2013 02:53:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>312357</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 49 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1hwk7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>312703</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1252] enable compiler tool to generate String instead of Utf8</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1252</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Since &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-803&quot; title=&quot;Java generated Avro classes make using Avro painful and surprising&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-803&quot;&gt;&lt;del&gt;AVRO-803&lt;/del&gt;&lt;/a&gt; the schema-to-Java compiler has permitted one to have strings represented with java.lang.String instead of org.apache.avro.util.Utf8.  The Maven tasks that run the compiler permit one to specify this, but the command-line tool does not.  We should add that capability.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12632097">AVRO-1252</key>
            <summary>enable compiler tool to generate String instead of Utf8</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Tue, 12 Feb 2013 21:58:57 +0000</created>
                <updated>Wed, 27 Feb 2013 00:54:02 +0000</updated>
                            <resolved>Tue, 19 Feb 2013 23:22:48 +0000</resolved>
                                                    <fixVersion>1.7.4</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13577066" author="cutting" created="Tue, 12 Feb 2013 22:00:54 +0000"  >&lt;p&gt;Here&apos;s a patch that implements this.&lt;/p&gt;</comment>
                            <comment id="13577068" author="cutting" created="Tue, 12 Feb 2013 22:01:31 +0000"  >&lt;p&gt;I&apos;ll commit this soon unless there are objections.&lt;/p&gt;</comment>
                            <comment id="13578712" author="cutting" created="Thu, 14 Feb 2013 21:43:17 +0000"  >&lt;p&gt;I added a test and committed this.&lt;/p&gt;</comment>
                            <comment id="13578743" author="hudson" created="Thu, 14 Feb 2013 22:17:29 +0000"  >&lt;p&gt;Integrated in AvroJava #350 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/350/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/350/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1252&quot; title=&quot;enable compiler tool to generate String instead of Utf8&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1252&quot;&gt;&lt;del&gt;AVRO-1252&lt;/del&gt;&lt;/a&gt;. Java: Add a &apos;-string&apos; option to compiler command line. (Revision 1446349)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
cutting : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/tools/src/test/compiler/output-string&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/tools/src/test/compiler/output-string/avro&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/tools/src/test/compiler/output-string/avro/examples&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Position.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/tools/src/test/java/org/apache/avro/tool/TestSpecificCompilerTool.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13581892" author="hudson" created="Wed, 20 Feb 2013 02:38:39 +0000"  >&lt;p&gt;Integrated in AvroJava #354 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/354/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/354/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1252&quot; title=&quot;enable compiler tool to generate String instead of Utf8&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1252&quot;&gt;&lt;del&gt;AVRO-1252&lt;/del&gt;&lt;/a&gt;. Update rat-excludes for newly added generated files. (Revision 1447962)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
cutting : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/share/rat-excludes.txt&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12569069" name="AVRO-1252.txt" size="2661" author="cutting" created="Tue, 12 Feb 2013 22:00:54 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 14 Feb 2013 22:17:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>312593</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 48 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1hy0n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>312939</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1253] Added support for Trenvi BZip2 Compression</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1253</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Although BZip2 is Sloooow, it still has great value in archiving and getting the client the best numbers for Cost per TB.&lt;/p&gt;

&lt;p&gt;Here are the steps I&apos;m planning on doing:&lt;br/&gt;
1. Add a child class to Codec that will live in the org.apache.trevni package.  This new codec will support BZip2&lt;br/&gt;
2. Update Codec&apos;s get method to support BZip2&lt;br/&gt;
3. Add a dependencies to trevni core for apache common-compression&lt;br/&gt;
4. Add unit test to confirm compression and decompression is working as desired.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12632378">AVRO-1253</key>
            <summary>Added support for Trenvi BZip2 Compression</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ted.m">Theodore michael Malaska</assignee>
                                    <reporter username="ted.m">Theodore michael Malaska</reporter>
                        <labels>
                    </labels>
                <created>Thu, 14 Feb 2013 13:57:25 +0000</created>
                <updated>Wed, 27 Feb 2013 00:53:59 +0000</updated>
                            <resolved>Thu, 14 Feb 2013 20:48:10 +0000</resolved>
                                    <version>1.7.3</version>
                                    <fixVersion>1.7.4</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13578401" author="ted.m" created="Thu, 14 Feb 2013 14:36:58 +0000"  >&lt;p&gt;Let me know what you think.&lt;/p&gt;

&lt;p&gt;Simple add of BZip2&lt;/p&gt;</comment>
                            <comment id="13578660" author="cutting" created="Thu, 14 Feb 2013 20:48:10 +0000"  >&lt;p&gt;I committed this.  Thanks, Ted!&lt;/p&gt;</comment>
                            <comment id="13578742" author="hudson" created="Thu, 14 Feb 2013 22:17:29 +0000"  >&lt;p&gt;Integrated in AvroJava #350 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/350/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/350/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1253&quot; title=&quot;Added support for Trenvi BZip2 Compression&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1253&quot;&gt;&lt;del&gt;AVRO-1253&lt;/del&gt;&lt;/a&gt;. Java: Add support for bzip2 file compression to Trevni.  Contributed by Ted Malaska. (Revision 1446320)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
cutting : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/core/pom.xml&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/core/src/main/java/org/apache/trevni/BZip2Codec.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/core/src/main/java/org/apache/trevni/Codec.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/core/src/test/java/org/apache/trevni/TestBZip2Codec.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12569344" name="AVRO-1253.patch" size="7095" author="ted.m" created="Thu, 14 Feb 2013 14:36:58 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 14 Feb 2013 20:48:10 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>312874</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 49 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1hzrb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>313220</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>No incompatible changes</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1254] Trevni support for the mapreduce apis</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1254</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Right now there are a Input and Output Format for the Map/Reduce mapred api but not for the mapreduce api.&lt;/p&gt;

&lt;p&gt;I will add that support in a new package called org.apache.trevni.avro.mapreduce in the trevni-avro package&lt;/p&gt;

&lt;p&gt;I will also attempt to move mapred formats to a new org.apache.trevni.avro.mapred package&lt;/p&gt;</description>
                <environment></environment>
        <key id="12632390">AVRO-1254</key>
            <summary>Trevni support for the mapreduce apis</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ted.m">Theodore michael Malaska</assignee>
                                    <reporter username="ted.m">Theodore michael Malaska</reporter>
                        <labels>
                    </labels>
                <created>Thu, 14 Feb 2013 15:12:43 +0000</created>
                <updated>Wed, 27 Feb 2013 00:54:00 +0000</updated>
                            <resolved>Tue, 19 Feb 2013 17:15:37 +0000</resolved>
                                                    <fixVersion>1.7.4</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13578736" author="ted.m" created="Thu, 14 Feb 2013 22:12:24 +0000"  >&lt;p&gt;As I dig into the Avro code for inspiration for this change I&apos;m finding some weird things.&lt;/p&gt;

&lt;p&gt;1. AvroWrapper and AvroKey are like the same thing&lt;br/&gt;
2. The inputFormat for mapred is AvroInputFormat but the mapreduce inputFormat is AvroKeyInputFormat&lt;/p&gt;

&lt;p&gt;I&apos;m am not sure of the history here or if it should impact the trevni&apos;s inputFormat naming convention.&lt;/p&gt;</comment>
                            <comment id="13578796" author="cutting" created="Thu, 14 Feb 2013 23:10:26 +0000"  >&lt;p&gt;The history is simply that I originally wrote the Avro mapred API &amp;amp; Garret Wu subsequently contributed the new mapreduce APIs, and the two use different styles.&lt;/p&gt;

&lt;p&gt;AvroKey and AvroValue are marker subclasses of AvroWrapper.  An AvroWrapper can be a key or a value, but at runtime we sometimes need to tell the difference, so use different subclasses to mark this.  It&apos;s more-or-less equivalent to adding an &apos;isKey&apos; boolean field to AvroWrapper.&lt;/p&gt;

&lt;p&gt;I suspect what you meant is that mapreduce&apos;s AvroKeyValue is a lot like mapred&apos;s Pair.  I agree, but, when Garrett contributed his code I couldn&apos;t see a way to convert one to the other without a substantial rewrite of one of the APIs.&lt;/p&gt;

&lt;p&gt;You now have the privilege of choosing a style for a Trevni mapreduce API.  Ideally someone could take an existing job and change very little to convert it from reading or writing Avro to reading or writing Trevni.  With the Trevni mapred API, if you&apos;re already using the Avro mapred API then you should just need to call job#setInputFormat() and/or job#setOutputFormat() to switch to Trevni.&lt;/p&gt;
</comment>
                            <comment id="13580383" author="ted.m" created="Mon, 18 Feb 2013 03:24:40 +0000"  >&lt;p&gt;This patch includes the following:&lt;br/&gt;
1. Added trevni mapreduce KeyInputFormat&lt;br/&gt;
2. Added trevni mapreduce KeyOutputFormat&lt;br/&gt;
3. Added trevni mapreduce KeyValueInputFormat&lt;br/&gt;
4. Added trevni mapreduce KeyValueOutputFormat&lt;br/&gt;
5. Added Key in/out WordCount Test&lt;br/&gt;
6. Added KeyValue in/out WordCount Test&lt;/p&gt;
</comment>
                            <comment id="13580752" author="cutting" created="Mon, 18 Feb 2013 18:35:23 +0000"  >&lt;p&gt;This looks great to me.  I&apos;ll commit it soon unless there are objections.&lt;/p&gt;</comment>
                            <comment id="13581450" author="cutting" created="Tue, 19 Feb 2013 17:15:37 +0000"  >&lt;p&gt;I committed this.  Thanks, Ted!&lt;/p&gt;</comment>
                            <comment id="13581680" author="hudson" created="Tue, 19 Feb 2013 22:16:58 +0000"  >&lt;p&gt;Integrated in AvroJava #353 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/353/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/353/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1254&quot; title=&quot;Trevni support for the mapreduce apis&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1254&quot;&gt;&lt;del&gt;AVRO-1254&lt;/del&gt;&lt;/a&gt;. Java: Add support for new mapreduce APIs to Trevni.  Contributed by Ted Malaska. (Revision 1447823)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
cutting : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyInputFormat.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyOutputFormat.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyRecordReader.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyRecordWriter.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyValueInputFormat.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyValueOutputFormat.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyValueRecordReader.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyValueRecordWriter.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniRecordReaderBase.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniRecordWriterBase.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/TestWordCount.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/WordCountUtil.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/mapreduce&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/mapreduce/TestKeyValueWordCount.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/mapreduce/TestKeyWordCount.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13583826" author="hudson" created="Fri, 22 Feb 2013 02:21:58 +0000"  >&lt;p&gt;Integrated in AvroJava #355 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/355/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/355/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1254&quot; title=&quot;Trevni support for the mapreduce apis&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1254&quot;&gt;&lt;del&gt;AVRO-1254&lt;/del&gt;&lt;/a&gt;. Fix Trevni mapreduce tests to not depend on order, which is no longer guaranteed under Java 7.  Committed to the right place this time. (Revision 1448804)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
cutting : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/mapreduce/TestKeyValueWordCount.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/mapreduce/TestKeyWordCount.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12569751" name="AVRO-1254.patch" size="51767" author="ted.m" created="Mon, 18 Feb 2013 03:24:40 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 14 Feb 2013 23:10:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>312886</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 48 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1hztz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>313232</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1255] Python schema (message, protocol) to_json names argument should be optional</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1255</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The &lt;tt&gt;avro.protocol.Protocol&lt;/tt&gt;, &lt;tt&gt;avro.protocol.Message&lt;/tt&gt;, and various classes in &lt;tt&gt;avro.schema&lt;/tt&gt; all support a &lt;tt&gt;to_json&lt;/tt&gt; method which renders the data in Python generics (easily renderable to json).&lt;/p&gt;

&lt;p&gt;These methods all take a required &lt;tt&gt;names&lt;/tt&gt; argument (of type &lt;tt&gt;avro.schema.Names&lt;/tt&gt;) which stores state representing what types have already been rendered.&lt;/p&gt;

&lt;p&gt;For debugging &amp;#8211; and for other uses of the schema &amp;#8211; it is helpful if the &lt;tt&gt;names&lt;/tt&gt; argument is optional.  When it is not provided, each method should construct an empty &lt;tt&gt;schema.Names&lt;/tt&gt; object internally. &lt;tt&gt;to_json&lt;/tt&gt; thus can be invoked without argument to get the relevant rendering of the current schema in isolation.&lt;/p&gt;

&lt;p&gt;Patch to be attached.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12632449">AVRO-1255</key>
            <summary>Python schema (message, protocol) to_json names argument should be optional</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="trochee">Jeremy Kahn</assignee>
                                    <reporter username="trochee">Jeremy Kahn</reporter>
                        <labels>
                            <label>patch</label>
                    </labels>
                <created>Thu, 14 Feb 2013 19:43:46 +0000</created>
                <updated>Wed, 27 Feb 2013 00:54:00 +0000</updated>
                            <resolved>Thu, 14 Feb 2013 22:19:39 +0000</resolved>
                                    <version>1.7.3</version>
                                    <fixVersion>1.7.4</fixVersion>
                                    <component>python</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13578606" author="trochee" created="Thu, 14 Feb 2013 19:47:30 +0000"  >&lt;p&gt;&lt;tt&gt;cd lang/py &amp;amp;&amp;amp; ant build test&lt;/tt&gt; passes all the tests with this patch applied, AFAICT.&lt;/p&gt;</comment>
                            <comment id="13578653" author="cutting" created="Thu, 14 Feb 2013 20:40:42 +0000"  >&lt;p&gt;Looks reasonable to me.  We should also probably add some tests which don&apos;t pass a names parameter, no?&lt;/p&gt;</comment>
                            <comment id="13578702" author="trochee" created="Thu, 14 Feb 2013 21:28:51 +0000"  >&lt;p&gt;Will add in some tests to generate the generic schema without the names parameter (exercising this new function, and send a second patch unifying the changes.&lt;/p&gt;</comment>
                            <comment id="13578729" author="trochee" created="Thu, 14 Feb 2013 22:02:05 +0000"  >&lt;p&gt;new patch added. Rather than adding in new tests, I discovered that several stringification functions (used throughout the tests) could be simplified with this access. &lt;/p&gt;

&lt;p&gt;The new patch (1255-b) simplifies those stringification methods in just that way, so the new behavior is well-exercised by the tests.&lt;/p&gt;</comment>
                            <comment id="13578750" author="cutting" created="Thu, 14 Feb 2013 22:19:39 +0000"  >&lt;p&gt;I committed this.  Thanks, Jeremy!&lt;/p&gt;</comment>
                            <comment id="13578821" author="hudson" created="Thu, 14 Feb 2013 23:55:35 +0000"  >&lt;p&gt;Integrated in AvroJava #351 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/351/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/351/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1255&quot; title=&quot;Python schema (message, protocol) to_json names argument should be optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1255&quot;&gt;&lt;del&gt;AVRO-1255&lt;/del&gt;&lt;/a&gt;. Python: Make &apos;names&apos; parameter optional in to_json methods.  Contributed by Jeremy Kahn. (Revision 1446366)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
cutting : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/py/src/avro/protocol.py&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/py/src/avro/schema.py&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12569399" name="avro-1255-b.patch" size="4081" author="trochee" created="Thu, 14 Feb 2013 21:59:20 +0000"/>
                            <attachment id="12569373" name="avro-1255.patch" size="3704" author="trochee" created="Thu, 14 Feb 2013 19:46:05 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 14 Feb 2013 20:40:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>312945</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 49 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1i073:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>313291</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1256] C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1256</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;It appears that when my JSON is compiled into a valid schema object it is ignoring all types of &quot;documentation&quot; that I am trying to adorn with each field in my record. Reading through the Java issues it seems that this was a bug and fixed (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-601&quot; title=&quot;Enhance schema parser to allow arbitrary properties to be defined on a record field&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-601&quot;&gt;&lt;del&gt;AVRO-601&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-612&quot; title=&quot;Schema.toString() strips out field docs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-612&quot;&gt;&lt;del&gt;AVRO-612&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-779&quot; title=&quot;Add Test for retention of schema metadata in schema serialization&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-779&quot;&gt;&lt;del&gt;AVRO-779&lt;/del&gt;&lt;/a&gt;) but it seems the C++ implementation has yet to adopt this feature? This is my sample schema, I have attempted to insert both &quot;doc&quot; and &quot;mycustom&quot; in multiple places to see if it is supported at any level. Please excuse if there appears to be a syntax error in the JSON I hand tweaked some of this. The schema is valid and successfully parses.&lt;/p&gt;

&lt;p&gt;{&lt;br/&gt;
	&quot;type&quot;: &quot;record&quot;,&lt;br/&gt;
	&quot;name&quot;: &quot;myschema&quot;,&lt;br/&gt;
	&quot;doc&quot;: &quot;Doc Meta&quot;,&lt;br/&gt;
	&quot;mycustom&quot;: &quot;My Custom&quot;,&lt;br/&gt;
	&quot;fields&quot;: [&lt;br/&gt;
		&lt;/p&gt;
{ &quot;name&quot;:&quot;field_a&quot;,&quot;type&quot;:[&quot;string&quot;,&quot;null&quot;], &quot;doc&quot;:&quot;Doc Meta&quot;, &quot;mycustom&quot;:&quot;My Custom A&quot;}
&lt;p&gt;,&lt;br/&gt;
		&lt;/p&gt;
{ &quot;name&quot;:&quot;field_b&quot;,&quot;type&quot;:[&quot;string&quot;,&quot;null&quot;], &quot;doc&quot;:&quot;Doc Meta&quot;, &quot;mycustom&quot;:&quot;My Custom B&quot;}
&lt;p&gt;,&lt;/p&gt;
		{ &quot;name&quot;:&quot;field_c&quot;,&quot;type&quot;:[&quot;string&quot;,&quot;null&quot;], &quot;doc&quot;:&quot;Doc Meta&quot;, &quot;mycustom&quot;:&quot;My Custom C&quot;}

&lt;p&gt;   	]&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;I looked through the SchemaTests.cc code for 1.7.3 and there was not a test case for this there so i didn&apos;t think this was addressed in that version. I am running 1.7.2. When this schema is used to load with compileJsonSchema and then a file is serialized the file schema looks like this.&lt;/p&gt;

&lt;p&gt;{&lt;br/&gt;
	&quot;type&quot;:&quot;record&quot;,&lt;br/&gt;
	&quot;name&quot;:&quot;myschema&quot;,&lt;br/&gt;
	&quot;fields&quot;: [&lt;br/&gt;
		&lt;/p&gt;
{ &quot;name&quot;:&quot;field_a&quot;,&quot;type&quot;:[&quot;string&quot;,&quot;null&quot;]}
&lt;p&gt;,&lt;br/&gt;
		&lt;/p&gt;
{ &quot;name&quot;:&quot;field_b&quot;,&quot;type&quot;:[&quot;string&quot;,&quot;null&quot;]}
&lt;p&gt;,&lt;/p&gt;
		{ &quot;name&quot;:&quot;field_c&quot;,&quot;type&quot;:[&quot;string&quot;,&quot;null&quot;]}

&lt;p&gt;   	]&lt;br/&gt;
}&lt;/p&gt;

</description>
                <environment>&lt;p&gt;Running on all platforms (Windows, OSX, Linux)&lt;/p&gt;</environment>
        <key id="12632906">AVRO-1256</key>
            <summary>C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="aniket486">Aniket Mokashi</assignee>
                                    <reporter username="tmenninger">Tim Menninger</reporter>
                        <labels>
                    </labels>
                <created>Mon, 18 Feb 2013 22:07:34 +0000</created>
                <updated>Fri, 28 Dec 2018 16:22:29 +0000</updated>
                            <resolved>Mon, 12 Nov 2018 13:01:32 +0000</resolved>
                                    <version>1.7.2</version>
                                    <fixVersion>1.9.0</fixVersion>
                                    <component>c++</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="14552277" author="pidefrem" created="Wed, 20 May 2015 12:59:55 +0000"  >&lt;p&gt;Attached patch adds &quot;doc&quot; to Node.&lt;/p&gt;</comment>
                            <comment id="14608639" author="peter_liu" created="Tue, 30 Jun 2015 16:48:08 +0000"  >&lt;p&gt;thanks for the patch, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=pidefrem&quot; class=&quot;user-hover&quot; rel=&quot;pidefrem&quot;&gt;Pierre de Freminville&lt;/a&gt;. This is exactly what we are looking for. 2 requests here:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;could you please add unit tests in the patch file?&lt;/li&gt;
	&lt;li&gt;I tested your patch a little bit with the schema in the description, and it seems only record level doc is supported but doesn&apos;t work for field level doc. can you please take a look?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks,&lt;br/&gt;
-Peter&lt;/p&gt;</comment>
                            <comment id="16645387" author="githubbot" created="Wed, 10 Oct 2018 18:29:52 +0000"  >&lt;p&gt;aniket486 opened a new pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16645568" author="githubbot" created="Wed, 10 Oct 2018 21:27:58 +0000"  >&lt;p&gt;vimota commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r224248006&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r224248006&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/NodeImpl.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -125,54 +125,60 @@ NodeUnion::resolve(const Node &amp;amp;reader) const&lt;br/&gt;
     return match;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-SchemaResolution &lt;br/&gt;
+SchemaResolution&lt;br/&gt;
 NodeFixed::resolve(const Node &amp;amp;reader) const&lt;br/&gt;
 {&lt;br/&gt;
     if(reader.type() == AVRO_FIXED) &lt;/p&gt;
{
         return (
                 (reader.fixedSize() == fixedSize()) &amp;amp;&amp;amp;
-                (reader.name() == name()) 
-            ) ? 
+                (reader.name() == name())
+            ) ?
             RESOLVE_MATCH : RESOLVE_NO_MATCH;
     }
&lt;p&gt;     return furtherResolution(reader);&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-SchemaResolution &lt;br/&gt;
+SchemaResolution&lt;br/&gt;
 NodeSymbolic::resolve(const Node &amp;amp;reader) const&lt;/p&gt;
 {
     const NodePtr &amp;amp;node = leafAt(0);
     return node-&amp;gt;resolve(reader);
 }

&lt;p&gt;-// Wrap an indentation in a struct for ostream operator&amp;lt;&amp;lt; &lt;br/&gt;
-struct indent { &lt;br/&gt;
+// Wrap an indentation in a struct for ostream operator&amp;lt;&amp;lt;&lt;br/&gt;
+struct indent {&lt;br/&gt;
     indent(int depth) :&lt;br/&gt;
         d(depth)&lt;br/&gt;
     { }&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;int d;&lt;br/&gt;
+    int d;&lt;br/&gt;
 };&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; /// ostream operator for indent&lt;br/&gt;
 std::ostream&amp;amp; operator &amp;lt;&amp;lt;(std::ostream &amp;amp;os, indent x)&lt;br/&gt;
 {&lt;br/&gt;
     static const std::string spaces(&quot;    &quot;);&lt;br/&gt;
     while(x.d--) &lt;/p&gt;
{
-        os &amp;lt;&amp;lt; spaces; 
+        os &amp;lt;&amp;lt; spaces;
     }
&lt;p&gt;     return os;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-void &lt;br/&gt;
+void&lt;br/&gt;
 NodePrimitive::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
     os &amp;lt;&amp;lt; &apos;\&quot;&apos; &amp;lt;&amp;lt; type() &amp;lt;&amp;lt; &apos;\&quot;&apos;;&lt;br/&gt;
+    if (getDoc().size()) {&lt;br/&gt;
+        os &amp;lt;&amp;lt; &quot;,\n&quot; &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot; &amp;lt;&amp;lt; getDoc() &amp;lt;&amp;lt; &quot;\&quot;&quot;;&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Once we add escape() function in &lt;a href=&quot;https://github.com/apache/avro/pull/241/files&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/241/files&lt;/a&gt; we should wrap getDoc() in escape().&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16647275" author="githubbot" created="Fri, 12 Oct 2018 01:35:36 +0000"  >&lt;p&gt;aniket486 commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r224649978&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r224649978&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/NodeImpl.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -125,54 +125,60 @@ NodeUnion::resolve(const Node &amp;amp;reader) const&lt;br/&gt;
     return match;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-SchemaResolution &lt;br/&gt;
+SchemaResolution&lt;br/&gt;
 NodeFixed::resolve(const Node &amp;amp;reader) const&lt;br/&gt;
 {&lt;br/&gt;
     if(reader.type() == AVRO_FIXED) &lt;/p&gt;
{
         return (
                 (reader.fixedSize() == fixedSize()) &amp;amp;&amp;amp;
-                (reader.name() == name()) 
-            ) ? 
+                (reader.name() == name())
+            ) ?
             RESOLVE_MATCH : RESOLVE_NO_MATCH;
     }
&lt;p&gt;     return furtherResolution(reader);&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-SchemaResolution &lt;br/&gt;
+SchemaResolution&lt;br/&gt;
 NodeSymbolic::resolve(const Node &amp;amp;reader) const&lt;/p&gt;
 {
     const NodePtr &amp;amp;node = leafAt(0);
     return node-&amp;gt;resolve(reader);
 }

&lt;p&gt;-// Wrap an indentation in a struct for ostream operator&amp;lt;&amp;lt; &lt;br/&gt;
-struct indent { &lt;br/&gt;
+// Wrap an indentation in a struct for ostream operator&amp;lt;&amp;lt;&lt;br/&gt;
+struct indent {&lt;br/&gt;
     indent(int depth) :&lt;br/&gt;
         d(depth)&lt;br/&gt;
     { }&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;int d;&lt;br/&gt;
+    int d;&lt;br/&gt;
 };&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; /// ostream operator for indent&lt;br/&gt;
 std::ostream&amp;amp; operator &amp;lt;&amp;lt;(std::ostream &amp;amp;os, indent x)&lt;br/&gt;
 {&lt;br/&gt;
     static const std::string spaces(&quot;    &quot;);&lt;br/&gt;
     while(x.d--) &lt;/p&gt;
{
-        os &amp;lt;&amp;lt; spaces; 
+        os &amp;lt;&amp;lt; spaces;
     }
&lt;p&gt;     return os;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-void &lt;br/&gt;
+void&lt;br/&gt;
 NodePrimitive::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
     os &amp;lt;&amp;lt; &apos;\&quot;&apos; &amp;lt;&amp;lt; type() &amp;lt;&amp;lt; &apos;\&quot;&apos;;&lt;br/&gt;
+    if (getDoc().size()) {&lt;br/&gt;
+        os &amp;lt;&amp;lt; &quot;,\n&quot; &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot; &amp;lt;&amp;lt; getDoc() &amp;lt;&amp;lt; &quot;\&quot;&quot;;&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   ack&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16647277" author="githubbot" created="Fri, 12 Oct 2018 01:35:52 +0000"  >&lt;p&gt;aniket486 commented on issue #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#issuecomment-429174954&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#issuecomment-429174954&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @thiru-apache can you please help us review this?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16649392" author="githubbot" created="Sun, 14 Oct 2018 13:49:40 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r224992594&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r224992594&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/NodeImpl.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -183,12 +189,15 @@ static void printName(std::ostream&amp;amp; os, const Name&amp;amp; n, int depth)&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;name\&quot;: \&quot;&quot; &amp;lt;&amp;lt; n.simpleName() &amp;lt;&amp;lt; &quot;\&quot;,\n&quot;;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-void &lt;br/&gt;
+void&lt;br/&gt;
 NodeRecord::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
     os &amp;lt;&amp;lt; &quot;{\n&quot;;&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(++depth) &amp;lt;&amp;lt; &quot;\&quot;type\&quot;: \&quot;record\&quot;,\n&quot;;&lt;br/&gt;
     printName(os, nameAttribute_.get(), depth);&lt;br/&gt;
+    if (getDoc().size()) {&lt;br/&gt;
+        os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot; &amp;lt;&amp;lt; getDoc() &amp;lt;&amp;lt; &quot;\&quot;,\n&quot;;&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   We should escape `getDoc`?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16649391" author="githubbot" created="Sun, 14 Oct 2018 13:49:40 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r224992918&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r224992918&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/Compiler.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -144,6 +152,19 @@ const int64_t getLongField(const Entity&amp;amp; e, const Object&amp;amp; m,&lt;br/&gt;
     return it-&amp;gt;second.longValue();&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;+// Unescape double quotes (&quot;) for de-serialization.  This method complements the&lt;br/&gt;
+// method NodeImpl::escape() which is used for serialization.&lt;br/&gt;
+static void unescape(std::string&amp;amp; s) {&lt;br/&gt;
+  boost::replace_all(s, &quot;\\\&quot;&quot;, &quot;\&quot;&quot;);&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   We consistently use four spaces for indentation. This and the following function use two spaces.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16649393" author="githubbot" created="Sun, 14 Oct 2018 13:49:40 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r224993111&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r224993111&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/Compiler.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -314,16 +335,20 @@ static Field makeField(const Entity&amp;amp; e, SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
     Object::const_iterator it = findField(e, m, &quot;type&quot;);&lt;br/&gt;
     map&amp;lt;string, Entity&amp;gt;::const_iterator it2 = m.find(&quot;default&quot;);&lt;br/&gt;
     NodePtr node = makeNode(it-&amp;gt;second, st, ns);&lt;br/&gt;
+    if (containsField(m, &quot;doc&quot;)) &lt;/p&gt;
{
+        node-&amp;gt;setDoc(getDocField(e, m));
+    }
&lt;p&gt;     GenericDatum d = (it2 == m.end()) ? GenericDatum() :&lt;br/&gt;
         makeGenericDatum(node, it2-&amp;gt;second, st);&lt;br/&gt;
     return Field(n, node, d);&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-static NodePtr makeRecordNode(const Entity&amp;amp; e,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;const Name&amp;amp; name, const Object&amp;amp; m, SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
-{&lt;br/&gt;
+// Extended makeRecordNode (with doc).&lt;br/&gt;
+static NodePtr makeRecordNode(const Entity&amp;amp; e, const Name&amp;amp; name,&lt;br/&gt;
+                              const std::string* doc, const Object&amp;amp; m,&lt;br/&gt;
+                              SymbolTable&amp;amp; st, const std::string&amp;amp; ns) {&lt;br/&gt;
     const Array&amp;amp; v = getArrayField(e, m, &quot;fields&quot;);&lt;/li&gt;
	&lt;li&gt;concepts::MultiAttribute&amp;lt;string&amp;gt; fieldNames;&lt;br/&gt;
+    concepts::MultiAttribute&amp;lt;std::string&amp;gt; fieldNames;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   Inside `cc` files we try to avoid using `std::` prefix and instead use plain `string` etc along with `using` directive. We never use `using` in header file. We follow the advice &lt;a href=&quot;#include&quot;&gt;59. Don&#8217;t write namespace usings in a header file or before an #include&lt;/a&gt;(&lt;a href=&quot;https://www.safaribooksonline.com/library/view/c-coding-standards/0321113586/ch60.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://www.safaribooksonline.com/library/view/c-coding-standards/0321113586/ch60.html&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16649394" author="githubbot" created="Sun, 14 Oct 2018 13:49:40 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r224992625&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r224992625&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/NodeImpl.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -229,29 +241,35 @@ NodeEnum::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(--depth) &amp;lt;&amp;lt; &apos;}&apos;;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-void &lt;br/&gt;
+void&lt;br/&gt;
 NodeArray::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
     os &amp;lt;&amp;lt; &quot;{\n&quot;;&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(depth+1) &amp;lt;&amp;lt; &quot;\&quot;type\&quot;: \&quot;array\&quot;,\n&quot;;&lt;br/&gt;
+    if (getDoc().size()) {&lt;br/&gt;
+        os &amp;lt;&amp;lt; indent(depth+1) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot; &amp;lt;&amp;lt; getDoc() &amp;lt;&amp;lt; &quot;\&quot;,\n&quot;;&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Should escape getDoc()&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16649395" author="githubbot" created="Sun, 14 Oct 2018 13:49:40 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r224992823&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r224992823&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/ValidSchema.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -113,18 +113,83 @@ ValidSchema::setSchema(const Schema &amp;amp;schema)&lt;br/&gt;
     validate(root_);&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-void &lt;br/&gt;
+void&lt;br/&gt;
 ValidSchema::toJson(std::ostream &amp;amp;os) const&lt;br/&gt;
-{ &lt;br/&gt;
+&lt;/p&gt;
{
     root_-&amp;gt;printJson(os, 0);
     os &amp;lt;&amp;lt; &apos;\n&apos;;
 }

&lt;p&gt;-void &lt;br/&gt;
+std::string&lt;br/&gt;
+ValidSchema::toJson(bool prettyPrint) const&lt;br/&gt;
+{&lt;br/&gt;
+    ostringstream oss;&lt;br/&gt;
+    toJson(oss);&lt;br/&gt;
+    if (prettyPrint) &lt;/p&gt;
{
+        return oss.str();
+    }
&lt;p&gt;+&lt;br/&gt;
+    // Compact the formatted schema.&lt;br/&gt;
+    std::string schema = oss.str();&lt;br/&gt;
+    compactSchema(&amp;amp;schema);&lt;br/&gt;
+    return schema;&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+void&lt;br/&gt;
 ValidSchema::toFlatList(std::ostream &amp;amp;os) const&lt;br/&gt;
-{ &lt;br/&gt;
+&lt;/p&gt;
{
     root_-&amp;gt;printBasicInfo(os);
 }

&lt;p&gt;+/*&lt;br/&gt;
+ * compactSchema compacts a formatted string representation of a ValidSchema&lt;br/&gt;
+ * object by removing the whitespaces outside of the quoted field names and&lt;br/&gt;
+ * values. The schema string is modified in-place. It can handle the cases where&lt;br/&gt;
+ * the quoted value is in UTF-8 format. Note that this method is not responsible&lt;br/&gt;
+ * for validating the schema.&lt;br/&gt;
+ */&lt;br/&gt;
+void ValidSchema::compactSchema(std::string* schema) {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   The code assumes that `schema` is never `NULL`. So it is better to pass a reference instead of a pointer. This would prevent the caller from ever passing a `NULL`.&lt;br/&gt;
   Having said that, I don&apos;t think it will be huge performance problem if we just return a new string instead of compacting in-place. That way one does not have to justify the `const_cast` here.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16649396" author="githubbot" created="Sun, 14 Oct 2018 13:49:40 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r224992609&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r224992609&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/NodeImpl.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -208,11 +217,14 @@ NodeRecord::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(--depth) &amp;lt;&amp;lt; &apos;}&apos;;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-void &lt;br/&gt;
+void&lt;br/&gt;
 NodeEnum::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
     os &amp;lt;&amp;lt; &quot;{\n&quot;;&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(++depth) &amp;lt;&amp;lt; &quot;\&quot;type\&quot;: \&quot;enum\&quot;,\n&quot;;&lt;br/&gt;
+    if (getDoc().size()) {&lt;br/&gt;
+        os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot; &amp;lt;&amp;lt; getDoc() &amp;lt;&amp;lt; &quot;\&quot;,\n&quot;;&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Should escape `getDoc()`.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16649397" author="githubbot" created="Sun, 14 Oct 2018 13:49:40 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r224992635&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r224992635&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/NodeImpl.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -268,11 +286,14 @@ NodeUnion::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(--depth) &amp;lt;&amp;lt; &apos;]&apos;;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-void &lt;br/&gt;
+void&lt;br/&gt;
 NodeFixed::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
     os &amp;lt;&amp;lt; &quot;{\n&quot;;&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(++depth) &amp;lt;&amp;lt; &quot;\&quot;type\&quot;: \&quot;fixed\&quot;,\n&quot;;&lt;br/&gt;
+    if (getDoc().size()) {&lt;br/&gt;
+        os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot; &amp;lt;&amp;lt; getDoc() &amp;lt;&amp;lt; &quot;\&quot;,\n&quot;;&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Should escape getDoc()&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16649398" author="githubbot" created="Sun, 14 Oct 2018 13:49:40 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r224992631&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r224992631&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/NodeImpl.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -229,29 +241,35 @@ NodeEnum::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(--depth) &amp;lt;&amp;lt; &apos;}&apos;;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-void &lt;br/&gt;
+void&lt;br/&gt;
 NodeArray::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
     os &amp;lt;&amp;lt; &quot;{\n&quot;;&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(depth+1) &amp;lt;&amp;lt; &quot;\&quot;type\&quot;: \&quot;array\&quot;,\n&quot;;&lt;br/&gt;
+    if (getDoc().size()) &lt;/p&gt;
{
+        os &amp;lt;&amp;lt; indent(depth+1) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot; &amp;lt;&amp;lt; getDoc() &amp;lt;&amp;lt; &quot;\&quot;,\n&quot;;
+    }
&lt;p&gt;     os &amp;lt;&amp;lt; indent(depth+1) &amp;lt;&amp;lt;  &quot;\&quot;items\&quot;: &quot;;&lt;br/&gt;
     leafAttributes_.get()-&amp;gt;printJson(os, depth+1);&lt;br/&gt;
     os &amp;lt;&amp;lt; &apos;\n&apos;;&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &apos;}&apos;;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-void &lt;br/&gt;
+void&lt;br/&gt;
 NodeMap::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
     os &amp;lt;&amp;lt; &quot;{\n&quot;;&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(depth+1) &amp;lt;&amp;lt;&quot;\&quot;type\&quot;: \&quot;map\&quot;,\n&quot;;&lt;br/&gt;
+    if (getDoc().size()) {&lt;br/&gt;
+        os &amp;lt;&amp;lt; indent(depth+1) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot; &amp;lt;&amp;lt; getDoc() &amp;lt;&amp;lt; &quot;\&quot;,\n&quot;;&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Should escape getDoc()&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16649399" author="githubbot" created="Sun, 14 Oct 2018 13:49:40 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r224993329&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r224993329&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/Compiler.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -360,25 +396,37 @@ static NodePtr makeFixedNode(const Entity&amp;amp; e,&lt;br/&gt;
         throw Exception(boost::format(&quot;Size for fixed is not positive: &quot;) %&lt;br/&gt;
             e.toString());&lt;br/&gt;
     }&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return NodePtr(new NodeFixed(asSingleAttribute(name),&lt;/li&gt;
	&lt;li&gt;asSingleAttribute(v)));&lt;br/&gt;
+    NodePtr node =&lt;br/&gt;
+        NodePtr(new NodeFixed(asSingleAttribute(name), asSingleAttribute(v)));&lt;br/&gt;
+    if (containsField(m, &quot;doc&quot;)) 
{
+        node-&amp;gt;setDoc(getDocField(e, m));
+    }
&lt;p&gt;+    return node;&lt;br/&gt;
 }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; static NodePtr makeArrayNode(const Entity&amp;amp; e, const Object&amp;amp; m,&lt;br/&gt;
     SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
 {&lt;br/&gt;
     Object::const_iterator it = findField(e, m, &quot;items&quot;);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return NodePtr(new NodeArray(asSingleAttribute(&lt;/li&gt;
	&lt;li&gt;makeNode(it-&amp;gt;second, st, ns))));&lt;br/&gt;
+    NodePtr node = NodePtr(new NodeArray(&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   According to &lt;span class=&quot;error&quot;&gt;&amp;#91;Avro spec&amp;#93;&lt;/span&gt;(&lt;a href=&quot;https://avro.apache.org/docs/1.8.1/spec.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://avro.apache.org/docs/1.8.1/spec.html&lt;/a&gt;) only records, fields and enums can have `doc`. That looks arbitrary. But until that is changed, we should not accept `doc` in other places. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. Interestingly, the Java code accepts doc in these places, but also in `fixed`. Maybe we can just do what the Java implementation does.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16649710" author="githubbot" created="Mon, 15 Oct 2018 04:35:44 +0000"  >&lt;p&gt;thiru-apache commented on issue #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#issuecomment-429706043&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#issuecomment-429706043&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thank you @aniket486 for taking this up.&lt;/p&gt;

&lt;p&gt;   When you have time, please create yourself an account on &lt;tt&gt;issues.apache.org&lt;/tt&gt;, so that I can credit you for this patch. Thank you.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16651173" author="githubbot" created="Tue, 16 Oct 2018 06:04:17 +0000"  >&lt;p&gt;aniket486 commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r225407232&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r225407232&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/Compiler.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -360,25 +396,37 @@ static NodePtr makeFixedNode(const Entity&amp;amp; e,&lt;br/&gt;
         throw Exception(boost::format(&quot;Size for fixed is not positive: &quot;) %&lt;br/&gt;
             e.toString());&lt;br/&gt;
     }&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return NodePtr(new NodeFixed(asSingleAttribute(name),&lt;/li&gt;
	&lt;li&gt;asSingleAttribute(v)));&lt;br/&gt;
+    NodePtr node =&lt;br/&gt;
+        NodePtr(new NodeFixed(asSingleAttribute(name), asSingleAttribute(v)));&lt;br/&gt;
+    if (containsField(m, &quot;doc&quot;)) 
{
+        node-&amp;gt;setDoc(getDocField(e, m));
+    }
&lt;p&gt;+    return node;&lt;br/&gt;
 }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; static NodePtr makeArrayNode(const Entity&amp;amp; e, const Object&amp;amp; m,&lt;br/&gt;
     SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
 {&lt;br/&gt;
     Object::const_iterator it = findField(e, m, &quot;items&quot;);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return NodePtr(new NodeArray(asSingleAttribute(&lt;/li&gt;
	&lt;li&gt;makeNode(it-&amp;gt;second, st, ns))));&lt;br/&gt;
+    NodePtr node = NodePtr(new NodeArray(&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   This code does follow the Java implementation. Have I missed something?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16658418" author="githubbot" created="Sun, 21 Oct 2018 22:32:17 +0000"  >&lt;p&gt;aniket486 commented on issue #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#issuecomment-431710003&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#issuecomment-431710003&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thanks for the review,, @thiru-apache. My apache id is aniket486. Please add me as a contributor to the project.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16658419" author="githubbot" created="Sun, 21 Oct 2018 22:32:26 +0000"  >&lt;p&gt;aniket486 edited a comment on issue #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#issuecomment-431710003&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#issuecomment-431710003&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thanks for the review, @thiru-apache. My apache id is aniket486. Please add me as a contributor to the project.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16660596" author="githubbot" created="Tue, 23 Oct 2018 12:45:10 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r227371921&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r227371921&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/Compiler.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -360,25 +396,37 @@ static NodePtr makeFixedNode(const Entity&amp;amp; e,&lt;br/&gt;
         throw Exception(boost::format(&quot;Size for fixed is not positive: &quot;) %&lt;br/&gt;
             e.toString());&lt;br/&gt;
     }&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return NodePtr(new NodeFixed(asSingleAttribute(name),&lt;/li&gt;
	&lt;li&gt;asSingleAttribute(v)));&lt;br/&gt;
+    NodePtr node =&lt;br/&gt;
+        NodePtr(new NodeFixed(asSingleAttribute(name), asSingleAttribute(v)));&lt;br/&gt;
+    if (containsField(m, &quot;doc&quot;)) 
{
+        node-&amp;gt;setDoc(getDocField(e, m));
+    }
&lt;p&gt;+    return node;&lt;br/&gt;
 }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; static NodePtr makeArrayNode(const Entity&amp;amp; e, const Object&amp;amp; m,&lt;br/&gt;
     SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
 {&lt;br/&gt;
     Object::const_iterator it = findField(e, m, &quot;items&quot;);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return NodePtr(new NodeArray(asSingleAttribute(&lt;/li&gt;
	&lt;li&gt;makeNode(it-&amp;gt;second, st, ns))));&lt;br/&gt;
+    NodePtr node = NodePtr(new NodeArray(&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   The only difference between Java and C++ implementation is that Java does not recognize `doc` for arrays and maps while this patch does.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16663158" author="githubbot" created="Thu, 25 Oct 2018 03:40:22 +0000"  >&lt;p&gt;aniket486 commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r228026030&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r228026030&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/Compiler.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -360,25 +396,37 @@ static NodePtr makeFixedNode(const Entity&amp;amp; e,&lt;br/&gt;
         throw Exception(boost::format(&quot;Size for fixed is not positive: &quot;) %&lt;br/&gt;
             e.toString());&lt;br/&gt;
     }&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return NodePtr(new NodeFixed(asSingleAttribute(name),&lt;/li&gt;
	&lt;li&gt;asSingleAttribute(v)));&lt;br/&gt;
+    NodePtr node =&lt;br/&gt;
+        NodePtr(new NodeFixed(asSingleAttribute(name), asSingleAttribute(v)));&lt;br/&gt;
+    if (containsField(m, &quot;doc&quot;)) 
{
+        node-&amp;gt;setDoc(getDocField(e, m));
+    }
&lt;p&gt;+    return node;&lt;br/&gt;
 }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; static NodePtr makeArrayNode(const Entity&amp;amp; e, const Object&amp;amp; m,&lt;br/&gt;
     SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
 {&lt;br/&gt;
     Object::const_iterator it = findField(e, m, &quot;items&quot;);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return NodePtr(new NodeArray(asSingleAttribute(&lt;/li&gt;
	&lt;li&gt;makeNode(it-&amp;gt;second, st, ns))));&lt;br/&gt;
+    NodePtr node = NodePtr(new NodeArray(&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   I&apos;m happy to add support to Java in a follow up PR. Would it be fine to go ahead with this change?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16678350" author="githubbot" created="Wed, 7 Nov 2018 15:05:19 +0000"  >&lt;p&gt;Fokko commented on issue #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#issuecomment-436653689&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#issuecomment-436653689&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thanks @aniket486&lt;/p&gt;

&lt;p&gt;   I&apos;ve assigned you to the ticket: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1256&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;   Could you rebase your branch onto master?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16678586" author="githubbot" created="Wed, 7 Nov 2018 18:03:07 +0000"  >&lt;p&gt;aniket486 commented on issue #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#issuecomment-436719585&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#issuecomment-436719585&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thanks @Fokko - I have merged the master branch. PTAL.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16680778" author="githubbot" created="Fri, 9 Nov 2018 03:02:48 +0000"  >&lt;p&gt;aniket486 commented on issue #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#issuecomment-437234364&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#issuecomment-437234364&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @thiru-apache PTAL, thanks!&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16681319" author="githubbot" created="Fri, 9 Nov 2018 11:46:35 +0000"  >&lt;p&gt;Fokko commented on issue #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#issuecomment-437336593&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#issuecomment-437336593&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Asked @thiru-apache to check if he can fix the tests. The rebasing on master was required to trigger the CI. But the cpp tests aren&apos;t running at all: &lt;a href=&quot;https://github.com/apache/avro/blob/master/build.sh#L53-L70&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/blob/master/build.sh#L53-L70&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;   Do you see an opportunity to enable and fix the tests @aniket486 ?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16682869" author="githubbot" created="Sun, 11 Nov 2018 13:05:24 +0000"  >&lt;p&gt;thiru-apache commented on issue #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#issuecomment-437668666&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#issuecomment-437668666&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I have fixed the tests and sent a pull request: &lt;a href=&quot;https://github.com/apache/avro/pull/369&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/369&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16682968" author="githubbot" created="Sun, 11 Nov 2018 19:03:29 +0000"  >&lt;p&gt;Fokko commented on issue #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#issuecomment-437695583&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#issuecomment-437695583&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @aniket486 can you rebase one more time?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16683208" author="githubbot" created="Mon, 12 Nov 2018 04:41:37 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r232530702&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r232530702&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/test/SchemaTests.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -199,7 +199,32 @@ const char* roundTripSchemas[] = {&lt;br/&gt;
     &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;size\&quot;:1}
&lt;p&gt;&quot;&lt;br/&gt;
 };&lt;/p&gt;

&lt;p&gt;+const char* schemasToCompact[] = {&lt;br/&gt;
+    // Schema without any whitespace&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;record\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;fields\&quot;:[]}
&lt;p&gt;&quot;,&lt;br/&gt;
+&lt;br/&gt;
+    // Schema with whitespaces outside of field names/values only.&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:   \&quot;record\&quot;,\n   \n\&quot;name\&quot;:\&quot;Test\&quot;, \t\t\&quot;fields\&quot;:[]}
&lt;p&gt;\n \n&quot;,&lt;/p&gt;

&lt;p&gt;+    // Schema with whitespaces both inside and outside of field names/values.&lt;br/&gt;
+    &quot;{\&quot;type\&quot;:   \&quot;record\&quot;,  \&quot;name\&quot;:               \&quot;ComplexInteger\&quot;\n, &quot;&lt;br/&gt;
+    &quot;\&quot;doc\&quot;: \&quot;record_doc &#176;C \u00f8 \u001f &lt;br class=&quot;atl-forced-newline&quot; /&gt;n \n \t\&quot;, &quot;&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   My compiler on Mac does not like unicode escapes for single byte characters. Replacing `\u001f` with `\x1f` fixes it for me.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16683209" author="githubbot" created="Mon, 12 Nov 2018 04:41:37 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#discussion_r232532879&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#discussion_r232532879&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/Compiler.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -297,8 +322,15 @@ static NodePtr makeRecordNode(const Entity&amp;amp; e,&lt;br/&gt;
         fieldValues.add(f.schema);&lt;br/&gt;
         defaultValues.push_back(f.defaultValue);&lt;br/&gt;
     }&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return NodePtr(new NodeRecord(asSingleAttribute(name),&lt;/li&gt;
	&lt;li&gt;fieldValues, fieldNames, defaultValues));&lt;br/&gt;
+    NodeRecord* node;&lt;br/&gt;
+    if (doc == nullptr) {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   My compiler complains about `nullptr`. Replacing with `NULL` fixes it.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16683210" author="githubbot" created="Mon, 12 Nov 2018 04:43:06 +0000"  >&lt;p&gt;thiru-apache commented on issue #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#issuecomment-437753907&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#issuecomment-437753907&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @aniket486 Is it possible for you to update your PR with these changes? I&apos;ll merge it at once. Thank you for you patience.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16683220" author="githubbot" created="Mon, 12 Nov 2018 05:04:51 +0000"  >&lt;p&gt;aniket486 commented on issue #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345#issuecomment-437757579&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345#issuecomment-437757579&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Done. Thanks for the fixes, @thiru-apache. Please take another look.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16683764" author="githubbot" created="Mon, 12 Nov 2018 12:57:43 +0000"  >&lt;p&gt;thiru-apache closed pull request #345:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/345&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/345&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/c+&lt;ins&gt;/.gitignore b/lang/c&lt;/ins&gt;+/.gitignore&lt;br/&gt;
index 76f012595..4ac073b92 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/.gitignore&lt;br/&gt;
+++ b/lang/c++/.gitignore&lt;br/&gt;
@@ -3,3 +3,5 @@ build.mac/&lt;br/&gt;
 doc/&lt;br/&gt;
 test.avro&lt;br/&gt;
 test6.df&lt;br/&gt;
+test8.df&lt;br/&gt;
+test9.df&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/api/Node.hh b/lang/c&lt;/ins&gt;+/api/Node.hh&lt;br/&gt;
index ebba375be..4d54a5edf 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/api/Node.hh&lt;br/&gt;
+++ b/lang/c++/api/Node.hh&lt;br/&gt;
@@ -78,7 +78,7 @@ std::ostream&amp;amp; operator &amp;lt;&amp;lt; (std::ostream&amp;amp; os, const Name&amp;amp; n) &lt;/p&gt;
{
 /// objects.
 ///
 /// The Node object uses reference-counted pointers.  This is so that schemas
-/// may be reused in other other schemas, without needing to worry about memory
+/// may be reused in other schemas, without needing to worry about memory
 /// deallocation for nodes that are added to multiple schema parse trees.
 ///
 /// Node has minimal implementation, serving as an abstract base class for
@@ -117,6 +117,12 @@ class AVRO_DECL Node : private boost::noncopyable
     }
&lt;p&gt;     virtual const Name &amp;amp;name() const = 0;&lt;/p&gt;

&lt;p&gt;+    virtual const std::string &amp;amp;getDoc() const = 0;&lt;br/&gt;
+    void setDoc(const std::string &amp;amp;doc) &lt;/p&gt;
{
+        checkLock();
+        doSetDoc(doc);
+    }
&lt;p&gt;+&lt;br/&gt;
     void addLeaf(const NodePtr &amp;amp;newLeaf) &lt;/p&gt;
{
         checkLock();
         doAddLeaf(newLeaf);
@@ -170,6 +176,8 @@ class AVRO_DECL Node : private boost::noncopyable
     }

&lt;p&gt;     virtual void doSetName(const Name &amp;amp;name) = 0;&lt;br/&gt;
+    virtual void doSetDoc(const std::string &amp;amp;name) = 0;&lt;br/&gt;
+&lt;br/&gt;
     virtual void doAddLeaf(const NodePtr &amp;amp;newLeaf) = 0;&lt;br/&gt;
     virtual void doAddName(const std::string &amp;amp;name) = 0;&lt;br/&gt;
     virtual void doSetFixedSize(int size) = 0;&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/api/NodeImpl.hh b/lang/c&lt;/ins&gt;+/api/NodeImpl.hh&lt;br/&gt;
index 0f3202368..d4c7639f5 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/api/NodeImpl.hh&lt;br/&gt;
+++ b/lang/c++/api/NodeImpl.hh&lt;br/&gt;
@@ -35,7 +35,7 @@&lt;br/&gt;
 namespace avro {&lt;/p&gt;

&lt;p&gt; /// Implementation details for Node.  NodeImpl represents all the avro types,&lt;br/&gt;
-/// whose properties are enabled are disabled by selecting concept classes.&lt;br/&gt;
+/// whose properties are enabled and disabled by selecting concept classes.&lt;/p&gt;

&lt;p&gt; template&lt;br/&gt;
 &amp;lt;&lt;br/&gt;
@@ -52,6 +52,7 @@ class NodeImpl : public Node&lt;br/&gt;
     NodeImpl(Type type) :&lt;br/&gt;
         Node(type),&lt;br/&gt;
         nameAttribute_(),&lt;br/&gt;
+        docAttribute_(),&lt;br/&gt;
         leafAttributes_(),&lt;br/&gt;
         leafNameAttributes_(),&lt;br/&gt;
         sizeAttribute_()&lt;br/&gt;
@@ -64,13 +65,30 @@ class NodeImpl : public Node&lt;br/&gt;
              const SizeConcept &amp;amp;size) :&lt;br/&gt;
         Node(type),&lt;br/&gt;
         nameAttribute_(name),&lt;br/&gt;
+        docAttribute_(),&lt;br/&gt;
         leafAttributes_(leaves),&lt;br/&gt;
         leafNameAttributes_(leafNames),&lt;br/&gt;
         sizeAttribute_(size)&lt;br/&gt;
     { }&lt;/p&gt;

&lt;p&gt;+    // Ctor with &quot;doc&quot;&lt;br/&gt;
+    NodeImpl(Type type,&lt;br/&gt;
+             const NameConcept &amp;amp;name,&lt;br/&gt;
+             const concepts::SingleAttribute&amp;lt;std::string&amp;gt; &amp;amp;doc,&lt;br/&gt;
+             const LeavesConcept &amp;amp;leaves,&lt;br/&gt;
+             const LeafNamesConcept &amp;amp;leafNames,&lt;br/&gt;
+             const SizeConcept &amp;amp;size) :&lt;br/&gt;
+        Node(type),&lt;br/&gt;
+        nameAttribute_(name),&lt;br/&gt;
+        docAttribute_(doc),&lt;br/&gt;
+        leafAttributes_(leaves),&lt;br/&gt;
+        leafNameAttributes_(leafNames),&lt;br/&gt;
+        sizeAttribute_(size)&lt;br/&gt;
+    {}&lt;br/&gt;
+&lt;br/&gt;
     void swap(NodeImpl&amp;amp; impl) &lt;/p&gt;
{
         std::swap(nameAttribute_, impl.nameAttribute_);
+        std::swap(docAttribute_, impl.docAttribute_);
         std::swap(leafAttributes_, impl.leafAttributes_);
         std::swap(leafNameAttributes_, impl.leafNameAttributes_);
         std::swap(sizeAttribute_, impl.sizeAttribute_);
@@ -78,6 +96,7 @@ class NodeImpl : public Node
     }

&lt;p&gt;     bool hasName() const &lt;/p&gt;
{
+        // e.g.: true for single and multiattributes, false for noattributes.
         return NameConcept::hasAttribute;
     }

&lt;p&gt;@@ -89,6 +108,14 @@ class NodeImpl : public Node&lt;br/&gt;
         return nameAttribute_.get();&lt;br/&gt;
     }&lt;/p&gt;

&lt;p&gt;+    void doSetDoc(const std::string &amp;amp;doc) &lt;/p&gt;
{
+      docAttribute_.add(doc);
+    }
&lt;p&gt;+&lt;br/&gt;
+    const std::string &amp;amp;getDoc() const &lt;/p&gt;
{
+      return docAttribute_.get();
+    }
&lt;p&gt;+&lt;br/&gt;
     void doAddLeaf(const NodePtr &amp;amp;newLeaf) &lt;/p&gt;
{
         leafAttributes_.add(newLeaf);
     }
&lt;p&gt;@@ -172,6 +199,10 @@ class NodeImpl : public Node&lt;br/&gt;
     }&lt;/p&gt;

&lt;p&gt;     NameConcept nameAttribute_;&lt;br/&gt;
+&lt;br/&gt;
+    // Rem: NameConcept type is HasName (= SingleAttribute&amp;lt;Name&amp;gt;), we use std::string instead&lt;br/&gt;
+    concepts::SingleAttribute&amp;lt;std::string&amp;gt; docAttribute_; /** Doc used to compare schemas */&lt;br/&gt;
+&lt;br/&gt;
     LeavesConcept leafAttributes_;&lt;br/&gt;
     LeafNamesConcept leafNameAttributes_;&lt;br/&gt;
     SizeConcept sizeAttribute_;&lt;br/&gt;
@@ -181,6 +212,8 @@ class NodeImpl : public Node&lt;br/&gt;
 typedef concepts::NoAttribute&amp;lt;Name&amp;gt;     NoName;&lt;br/&gt;
 typedef concepts::SingleAttribute&amp;lt;Name&amp;gt; HasName;&lt;/p&gt;

&lt;p&gt;+typedef concepts::SingleAttribute&amp;lt;std::string&amp;gt; HasDoc;&lt;br/&gt;
+&lt;br/&gt;
 typedef concepts::NoAttribute&amp;lt;NodePtr&amp;gt;      NoLeaves;&lt;br/&gt;
 typedef concepts::SingleAttribute&amp;lt;NodePtr&amp;gt;  SingleLeaf;&lt;br/&gt;
 typedef concepts::MultiAttribute&amp;lt;NodePtr&amp;gt;   MultiLeaves;&lt;br/&gt;
@@ -287,6 +320,20 @@ public:&lt;br/&gt;
         }&lt;br/&gt;
     }&lt;/p&gt;

&lt;p&gt;+    NodeRecord(const HasName &amp;amp;name, const HasDoc &amp;amp;doc, const MultiLeaves &amp;amp;fields,&lt;br/&gt;
+        const LeafNames &amp;amp;fieldsNames,&lt;br/&gt;
+        const std::vector&amp;lt;GenericDatum&amp;gt; &amp;amp;dv) :&lt;br/&gt;
+        NodeImplRecord(AVRO_RECORD, name, doc, fields, fieldsNames, NoSize()),&lt;br/&gt;
+        defaultValues(dv) {&lt;br/&gt;
+        for (size_t i = 0; i &amp;lt; leafNameAttributes_.size(); ++i) {&lt;br/&gt;
+            if (!nameIndex_.add(leafNameAttributes_.get&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, i)) &lt;/p&gt;
{
+                throw Exception(boost::format(
+                    &quot;Cannot add duplicate name: %1%&quot;) %
+                    leafNameAttributes_.get(i));
+            }
&lt;p&gt;+        }&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
     void swap(NodeRecord&amp;amp; r) {&lt;br/&gt;
         NodeImplRecord::swap(r);&lt;br/&gt;
         defaultValues.swap(r.defaultValues);&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/api/Schema.hh b/lang/c&lt;/ins&gt;+/api/Schema.hh&lt;br/&gt;
index 8ce5f8df4..646b95e0d 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/api/Schema.hh&lt;br/&gt;
+++ b/lang/c++/api/Schema.hh&lt;br/&gt;
@@ -16,11 +16,12 @@&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;limitations under the License.&lt;br/&gt;
  */&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;-#ifndef avro_Schema_hh__ &lt;br/&gt;
-#define avro_Schema_hh__ &lt;br/&gt;
+#ifndef avro_Schema_hh__&lt;br/&gt;
+#define avro_Schema_hh__&lt;/p&gt;

&lt;p&gt; #include &quot;Config.hh&quot;&lt;br/&gt;
 #include &quot;NodeImpl.hh&quot;&lt;br/&gt;
+#include &amp;lt;string&amp;gt;&lt;/p&gt;

&lt;p&gt; /// \file&lt;br/&gt;
 ///&lt;br/&gt;
@@ -102,6 +103,9 @@ class AVRO_DECL RecordSchema : public Schema &lt;/p&gt;
{
 public:
     RecordSchema(const std::string &amp;amp;name);
     void addField(const std::string &amp;amp;name, const Schema &amp;amp;fieldSchema);
+
+    std::string getDoc() const;
+    void setDoc(const std::string &amp;amp;);
 }
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt; class AVRO_DECL EnumSchema : public Schema &lt;/p&gt;
{
diff --git a/lang/c++/api/ValidSchema.hh b/lang/c++/api/ValidSchema.hh
index 30eb33eb6..d0bbd4e3f 100644
--- a/lang/c++/api/ValidSchema.hh
+++ b/lang/c++/api/ValidSchema.hh
@@ -50,11 +50,15 @@ public:
     }

&lt;p&gt;     void toJson(std::ostream &amp;amp;os) const;&lt;br/&gt;
+    std::string toJson(bool prettyPrint = true) const;&lt;/p&gt;

&lt;p&gt;     void toFlatList(std::ostream &amp;amp;os) const;&lt;/p&gt;

&lt;p&gt;   protected:&lt;br/&gt;
     NodePtr root_;&lt;br/&gt;
+&lt;br/&gt;
+  private:&lt;br/&gt;
+    static std::string compactSchema(const std::string &amp;amp;schema);&lt;br/&gt;
 };&lt;/p&gt;

&lt;p&gt; } // namespace avro&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/impl/Compiler.cc b/lang/c&lt;/ins&gt;+/impl/Compiler.cc&lt;br/&gt;
index 725136d1f..bc0f3cdd5 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/impl/Compiler.cc&lt;br/&gt;
+++ b/lang/c++/impl/Compiler.cc&lt;br/&gt;
@@ -15,6 +15,7 @@&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;See the License for the specific language governing permissions and&lt;/li&gt;
	&lt;li&gt;limitations under the License.&lt;br/&gt;
  */&lt;br/&gt;
+#include &amp;lt;boost/algorithm/string/replace.hpp&amp;gt;&lt;br/&gt;
 #include &amp;lt;sstream&amp;gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; #include &quot;Compiler.hh&quot;&lt;br/&gt;
@@ -42,7 +43,7 @@ typedef map&amp;lt;Name, NodePtr&amp;gt; SymbolTable;&lt;/p&gt;

&lt;p&gt; // #define DEBUG_VERBOSE&lt;/p&gt;

&lt;p&gt;-static NodePtr makePrimitive(const std::string&amp;amp; t)&lt;br/&gt;
+static NodePtr makePrimitive(const string&amp;amp; t)&lt;br/&gt;
 {&lt;br/&gt;
     if (t == &quot;null&quot;) &lt;/p&gt;
{
         return NodePtr(new NodePrimitive(AVRO_NULL));
@@ -65,7 +66,7 @@ static NodePtr makePrimitive(const std::string&amp;amp; t)
     }
&lt;p&gt; }&lt;/p&gt;

&lt;p&gt;-static NodePtr makeNode(const json::Entity&amp;amp; e, SymbolTable&amp;amp; st, const string&amp;amp; ns);&lt;br/&gt;
+static NodePtr makeNode(const json::Entity&amp;amp; e, SymbolTable&amp;amp; st, const string &amp;amp;ns);&lt;/p&gt;

&lt;p&gt; template &amp;lt;typename T&amp;gt;&lt;br/&gt;
 concepts::SingleAttribute&amp;lt;T&amp;gt; asSingleAttribute(const T&amp;amp; t)&lt;br/&gt;
@@ -75,17 +76,17 @@ concepts::SingleAttribute&amp;lt;T&amp;gt; asSingleAttribute(const T&amp;amp; t)&lt;br/&gt;
     return n;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-static bool isFullName(const string&amp;amp; s)&lt;br/&gt;
+static bool isFullName(const string &amp;amp;s)&lt;/p&gt;
 {
     return s.find(&apos;.&apos;) != string::npos;
 }

&lt;p&gt;-static Name getName(const string&amp;amp; name, const string&amp;amp; ns)&lt;br/&gt;
+static Name getName(const string &amp;amp;name, const string &amp;amp;ns)&lt;/p&gt;
 {
     return (isFullName(name)) ? Name(name) : Name(name, ns);
 }

&lt;p&gt;-static NodePtr makeNode(const std::string&amp;amp; t, SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
+static NodePtr makeNode(const string &amp;amp;t, SymbolTable &amp;amp;st, const string &amp;amp;ns)&lt;br/&gt;
 {&lt;br/&gt;
     NodePtr result = makePrimitive(t);&lt;br/&gt;
     if (result) &lt;/p&gt;
{
@@ -100,8 +101,15 @@ static NodePtr makeNode(const std::string&amp;amp; t, SymbolTable&amp;amp; st, const string&amp;amp; ns)
     throw Exception(boost::format(&quot;Unknown type: %1%&quot;) % n.fullname());
 }

&lt;p&gt;-const json::Object::const_iterator findField(const Entity&amp;amp; e,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;const Object&amp;amp; m, const string&amp;amp; fieldName)&lt;br/&gt;
+/** Returns &quot;true&quot; if the field is in the container */&lt;br/&gt;
+// e.g.: can be false for non-mandatory fields&lt;br/&gt;
+bool containsField(const Object &amp;amp;m, const string &amp;amp;fieldName) 
{
+    Object::const_iterator it = m.find(fieldName);
+    return it != m.end();
+}
&lt;p&gt;+&lt;br/&gt;
+const json::Object::const_iterator findField(const Entity &amp;amp;e,&lt;br/&gt;
+    const Object &amp;amp;m, const string &amp;amp;fieldName)&lt;/p&gt;
 &lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {     Object}&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;-template &amp;lt;typename T&amp;gt; void ensureType(const Entity&amp;amp; e, const string&amp;amp; name)&lt;br/&gt;
+template &amp;lt;typename T&amp;gt; void ensureType(const Entity &amp;amp;e, const string &amp;amp;name)&lt;br/&gt;
 {&lt;br/&gt;
     if (e.type() != json::type_traits&amp;lt;T&amp;gt;::type()) &lt;/p&gt;
{
         throw Exception(boost::format(&quot;Json field \&quot;%1%\&quot; is not a %2%: %3%&quot;) %
@@ -120,8 +128,8 @@ template &amp;lt;typename T&amp;gt; void ensureType(const Entity&amp;amp; e, const string&amp;amp; name)
     }
&lt;p&gt; }&lt;/p&gt;

&lt;p&gt;-const string&amp;amp; getStringField(const Entity&amp;amp; e, const Object&amp;amp; m,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;const string&amp;amp; fieldName)&lt;br/&gt;
+const string&amp;amp; getStringField(const Entity &amp;amp;e, const Object &amp;amp;m,&lt;br/&gt;
+                             const string &amp;amp;fieldName)
 {
     Object::const_iterator it = findField(e, m, fieldName);
     ensureType&amp;lt;string&amp;gt;(it-&amp;gt;second, fieldName);
@@ -144,6 +152,19 @@ const int64_t getLongField(const Entity&amp;amp; e, const Object&amp;amp; m,
     return it-&amp;gt;second.longValue();
 }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+// Unescape double quotes (&quot;) for de-serialization.  This method complements the&lt;br/&gt;
+// method NodeImpl::escape() which is used for serialization.&lt;br/&gt;
+static void unescape(string&amp;amp; s) &lt;/p&gt;
{
+    boost::replace_all(s, &quot;\\\&quot;&quot;, &quot;\&quot;&quot;);
+}
&lt;p&gt;+&lt;br/&gt;
+const string getDocField(const Entity&amp;amp; e, const Object&amp;amp; m)&lt;br/&gt;
+&lt;/p&gt;
{
+    string doc = getStringField(e, m, &quot;doc&quot;);
+    unescape(doc);
+    return doc;
+}
&lt;p&gt;+&lt;br/&gt;
 struct Field &lt;/p&gt;
{
     const string&amp;amp; name;
     const NodePtr schema;
@@ -162,7 +183,7 @@ static void assertType(const Entity&amp;amp; e, EntityType et)
     }
&lt;p&gt; }&lt;/p&gt;

&lt;p&gt;-static vector&amp;lt;uint8_t&amp;gt; toBin(const std::string&amp;amp; s)&lt;br/&gt;
+static vector&amp;lt;uint8_t&amp;gt; toBin(const string&amp;amp; s)&lt;br/&gt;
 {&lt;br/&gt;
     vector&amp;lt;uint8_t&amp;gt; result(s.size());&lt;br/&gt;
     if (s.size() &amp;gt; 0) {&lt;br/&gt;
@@ -278,14 +299,18 @@ static Field makeField(const Entity&amp;amp; e, SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
     Object::const_iterator it = findField(e, m, &quot;type&quot;);&lt;br/&gt;
     map&amp;lt;string, Entity&amp;gt;::const_iterator it2 = m.find(&quot;default&quot;);&lt;br/&gt;
     NodePtr node = makeNode(it-&amp;gt;second, st, ns);&lt;br/&gt;
+    if (containsField(m, &quot;doc&quot;)) &lt;/p&gt;
{
+        node-&amp;gt;setDoc(getDocField(e, m));
+    }&lt;br/&gt;
     GenericDatum d = (it2 == m.end()) ? GenericDatum() :&lt;br/&gt;
         makeGenericDatum(node, it2-&amp;gt;second, st);&lt;br/&gt;
     return Field(n, node, d);&lt;br/&gt;
 }&lt;br/&gt;
 &lt;br/&gt;
-static NodePtr makeRecordNode(const Entity&amp;amp; e,&lt;br/&gt;
-    const Name&amp;amp; name, const Object&amp;amp; m, SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
-{&lt;br/&gt;
+// Extended makeRecordNode (with doc).&lt;br/&gt;
+static NodePtr makeRecordNode(const Entity&amp;amp; e, const Name&amp;amp; name,&lt;br/&gt;
+                              const string* doc, const Object&amp;amp; m,&lt;br/&gt;
+                              SymbolTable&amp;amp; st, const string&amp;amp; ns) {
     const Array&amp;amp; v = getArrayField(e, m, &quot;fields&quot;);
     concepts::MultiAttribute&amp;lt;string&amp;gt; fieldNames;
     concepts::MultiAttribute&amp;lt;NodePtr&amp;gt; fieldValues;
@@ -297,8 +322,15 @@ static NodePtr makeRecordNode(const Entity&amp;amp; e,
         fieldValues.add(f.schema);
         defaultValues.push_back(f.defaultValue);
     }&lt;br/&gt;
-    return NodePtr(new NodeRecord(asSingleAttribute(name),&lt;br/&gt;
-        fieldValues, fieldNames, defaultValues));&lt;br/&gt;
+    NodeRecord* node;&lt;br/&gt;
+    if (doc == NULL) {
+        node = new NodeRecord(asSingleAttribute(name), fieldValues, fieldNames,
+                              defaultValues);
+    } else {
+        node = new NodeRecord(asSingleAttribute(name), asSingleAttribute(*doc),
+                              fieldValues, fieldNames, defaultValues);
+    }&lt;br/&gt;
+    return NodePtr(node);&lt;br/&gt;
 }&lt;br/&gt;
 &lt;br/&gt;
 static NodePtr makeEnumNode(const Entity&amp;amp; e,&lt;br/&gt;
@@ -313,7 +345,11 @@ static NodePtr makeEnumNode(const Entity&amp;amp; e,&lt;br/&gt;
         }&lt;br/&gt;
         symbols.add(it-&amp;gt;stringValue());&lt;br/&gt;
     }&lt;br/&gt;
-    return NodePtr(new NodeEnum(asSingleAttribute(name), symbols));&lt;br/&gt;
+    NodePtr node = NodePtr(new NodeEnum(asSingleAttribute(name), symbols));&lt;br/&gt;
+    if (containsField(m, &quot;doc&quot;)) {+        node-&amp;gt;setDoc(getDocField(e, m));+    }
&lt;p&gt;+    return node;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt; static NodePtr makeFixedNode(const Entity&amp;amp; e,&lt;br/&gt;
@@ -324,16 +360,24 @@ static NodePtr makeFixedNode(const Entity&amp;amp; e,&lt;br/&gt;
         throw Exception(boost::format(&quot;Size for fixed is not positive: %1%&quot;) %&lt;br/&gt;
             e.toString());&lt;br/&gt;
     }&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return NodePtr(new NodeFixed(asSingleAttribute(name),&lt;/li&gt;
	&lt;li&gt;asSingleAttribute(v)));&lt;br/&gt;
+    NodePtr node =&lt;br/&gt;
+        NodePtr(new NodeFixed(asSingleAttribute(name), asSingleAttribute(v)));&lt;br/&gt;
+    if (containsField(m, &quot;doc&quot;)) 
{
+        node-&amp;gt;setDoc(getDocField(e, m));
+    }&lt;br/&gt;
+    return node;&lt;br/&gt;
 }&lt;br/&gt;
 &lt;br/&gt;
 static NodePtr makeArrayNode(const Entity&amp;amp; e, const Object&amp;amp; m,&lt;br/&gt;
     SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
 {&lt;br/&gt;
     Object::const_iterator it = findField(e, m, &quot;items&quot;);&lt;br/&gt;
-    return NodePtr(new NodeArray(asSingleAttribute(&lt;br/&gt;
-        makeNode(it-&amp;gt;second, st, ns))));&lt;br/&gt;
+    NodePtr node = NodePtr(new NodeArray(&lt;br/&gt;
+        asSingleAttribute(makeNode(it-&amp;gt;second, st, ns))));&lt;br/&gt;
+    if (containsField(m, &quot;doc&quot;)) {+        node-&amp;gt;setDoc(getDocField(e, m));+    }
&lt;p&gt;+    return node;&lt;br/&gt;
 }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; static NodePtr makeMapNode(const Entity&amp;amp; e, const Object&amp;amp; m,&lt;br/&gt;
@@ -341,8 +385,12 @@ static NodePtr makeMapNode(const Entity&amp;amp; e, const Object&amp;amp; m,&lt;br/&gt;
 {&lt;br/&gt;
     Object::const_iterator it = findField(e, m, &quot;values&quot;);&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return NodePtr(new NodeMap(asSingleAttribute(&lt;/li&gt;
	&lt;li&gt;makeNode(it-&amp;gt;second, st, ns))));&lt;br/&gt;
+    NodePtr node = NodePtr(new NodeMap(&lt;br/&gt;
+        asSingleAttribute(makeNode(it-&amp;gt;second, st, ns))));&lt;br/&gt;
+    if (containsField(m, &quot;doc&quot;)) 
{
+        node-&amp;gt;setDoc(getDocField(e, m));
+    }
&lt;p&gt;+    return node;&lt;br/&gt;
 }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; static Name getName(const Entity&amp;amp; e, const Object&amp;amp; m, const string&amp;amp; ns)&lt;br/&gt;
@@ -380,9 +428,19 @@ static NodePtr makeNode(const Entity&amp;amp; e, const Object&amp;amp; m,&lt;br/&gt;
         if (type == &quot;record&quot; || type == &quot;error&quot;) {&lt;br/&gt;
             result = NodePtr(new NodeRecord());&lt;br/&gt;
             st&lt;span class=&quot;error&quot;&gt;&amp;#91;nm&amp;#93;&lt;/span&gt; = result;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;NodePtr r = makeRecordNode(e, nm, m, st, nm.ns());&lt;/li&gt;
	&lt;li&gt;(boost::dynamic_pointer_cast&amp;lt;NodeRecord&amp;gt;(r))-&amp;gt;swap(&lt;/li&gt;
	&lt;li&gt;*boost::dynamic_pointer_cast&amp;lt;NodeRecord&amp;gt;(result));&lt;br/&gt;
+            // Get field doc&lt;br/&gt;
+            if (containsField(m, &quot;doc&quot;)) 
{
+                string doc = getDocField(e, m);
+
+                NodePtr r = makeRecordNode(e, nm, &amp;amp;doc, m, st, nm.ns());
+                (boost::dynamic_pointer_cast&amp;lt;NodeRecord&amp;gt;(r))-&amp;gt;swap(
+                    *boost::dynamic_pointer_cast&amp;lt;NodeRecord&amp;gt;(result));
+            }
&lt;p&gt; else &lt;/p&gt;
{  // No doc
+                NodePtr r =
+                    makeRecordNode(e, nm, NULL, m, st, nm.ns());
+                (boost::dynamic_pointer_cast&amp;lt;NodeRecord&amp;gt;(r))
+                    -&amp;gt;swap(*boost::dynamic_pointer_cast&amp;lt;NodeRecord&amp;gt;(result));
+            }
&lt;p&gt;         } else &lt;/p&gt;
{
             result = (type == &quot;enum&quot;) ? makeEnumNode(e, nm, m) :
                 makeFixedNode(e, nm, m);
@@ -447,7 +505,7 @@ AVRO_DECL ValidSchema compileJsonSchemaFromString(const char* input)
         ::strlen(input));
 }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;-AVRO_DECL ValidSchema compileJsonSchemaFromString(const std::string&amp;amp; input)&lt;br/&gt;
+AVRO_DECL ValidSchema compileJsonSchemaFromString(const string&amp;amp; input)&lt;/p&gt;
 {
     return compileJsonSchemaFromMemory(
         reinterpret_cast&amp;lt;const uint8_t*&amp;gt;(&amp;amp;input[0]), input.size());
@@ -468,7 +526,7 @@ AVRO_DECL void compileJsonSchema(std::istream &amp;amp;is, ValidSchema &amp;amp;schema)
     schema = compile(is);
 }

&lt;p&gt;-AVRO_DECL bool compileJsonSchema(std::istream &amp;amp;is, ValidSchema &amp;amp;schema, std::string &amp;amp;error)&lt;br/&gt;
+AVRO_DECL bool compileJsonSchema(std::istream &amp;amp;is, ValidSchema &amp;amp;schema, string &amp;amp;error)&lt;br/&gt;
 {&lt;br/&gt;
     try &lt;/p&gt;
{
         compileJsonSchema(is, schema);
diff --git a/lang/c++/impl/DataFile.cc b/lang/c++/impl/DataFile.cc
index a71860d1f..1777d532e 100644
--- a/lang/c++/impl/DataFile.cc
+++ b/lang/c++/impl/DataFile.cc
@@ -121,7 +121,7 @@ void DataFileWriterBase::init(const ValidSchema &amp;amp;schema, size_t syncInterval, co
     }
&lt;p&gt; else &lt;/p&gt;
{
       throw Exception(boost::format(&quot;Unknown codec: %1%&quot;) % codec);
     }
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;setMetadata(AVRO_SCHEMA_KEY, toString(schema));&lt;br/&gt;
+    setMetadata(AVRO_SCHEMA_KEY, schema.toJson(false));&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     writeHeader();&lt;br/&gt;
     encoderPtr_-&amp;gt;init(*buffer_);&lt;br/&gt;
@@ -296,7 +296,7 @@ void DataFileReaderBase::init()&lt;br/&gt;
 void DataFileReaderBase::init(const ValidSchema&amp;amp; readerSchema)&lt;br/&gt;
 {&lt;br/&gt;
     readerSchema_ = readerSchema;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;dataDecoder_  = (toString(readerSchema_) != toString(dataSchema_)) ?&lt;br/&gt;
+    dataDecoder_  = (readerSchema_.toJson(true) != dataSchema_.toJson(true)) ?&lt;br/&gt;
         resolvingDecoder(dataSchema_, readerSchema_, binaryDecoder()) :&lt;br/&gt;
         binaryDecoder();&lt;br/&gt;
     readDataBlock();&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/impl/NodeImpl.cc b/lang/c&lt;/ins&gt;+/impl/NodeImpl.cc&lt;br/&gt;
index 50b7fbaa8..bdb05a0b5 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/c++/impl/NodeImpl.cc&lt;br/&gt;
+++ b/lang/c++/impl/NodeImpl.cc&lt;br/&gt;
@@ -17,6 +17,8 @@&lt;br/&gt;
  */&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;+#include &amp;lt;sstream&amp;gt;&lt;br/&gt;
+#include &amp;lt;iomanip&amp;gt;&lt;br/&gt;
 #include &amp;lt;boost/algorithm/string/replace.hpp&amp;gt;&lt;br/&gt;
 #include &quot;NodeImpl.hh&quot;&lt;/p&gt;

&lt;p&gt;@@ -25,6 +27,7 @@ using std::string;&lt;br/&gt;
 namespace avro {&lt;/p&gt;

&lt;p&gt; namespace {&lt;br/&gt;
+&lt;br/&gt;
 // Escape string for serialization.&lt;br/&gt;
 string escape(const string &amp;amp;unescaped) {&lt;br/&gt;
   string s;&lt;br/&gt;
@@ -219,12 +222,20 @@ void&lt;br/&gt;
 NodePrimitive::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
     os &amp;lt;&amp;lt; &apos;\&quot;&apos; &amp;lt;&amp;lt; type() &amp;lt;&amp;lt; &apos;\&quot;&apos;;&lt;br/&gt;
+    if (getDoc().size()) &lt;/p&gt;
{
+        os &amp;lt;&amp;lt; &quot;,\n&quot; &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot;
+           &amp;lt;&amp;lt; escape(getDoc()) &amp;lt;&amp;lt; &quot;\&quot;&quot;;
+    }
&lt;p&gt; }&lt;/p&gt;

&lt;p&gt; void&lt;br/&gt;
 NodeSymbolic::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
     os &amp;lt;&amp;lt; &apos;\&quot;&apos; &amp;lt;&amp;lt; nameAttribute_.get() &amp;lt;&amp;lt; &apos;\&quot;&apos;;&lt;br/&gt;
+    if (getDoc().size()) &lt;/p&gt;
{
+        os &amp;lt;&amp;lt; &quot;,\n&quot; &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot;
+           &amp;lt;&amp;lt; escape(getDoc()) &amp;lt;&amp;lt; &quot;\&quot;&quot;;
+    }
&lt;p&gt; }&lt;/p&gt;

&lt;p&gt; static void printName(std::ostream&amp;amp; os, const Name&amp;amp; n, int depth)&lt;br/&gt;
@@ -241,6 +252,10 @@ NodeRecord::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
     os &amp;lt;&amp;lt; &quot;{\n&quot;;&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(++depth) &amp;lt;&amp;lt; &quot;\&quot;type\&quot;: \&quot;record\&quot;,\n&quot;;&lt;br/&gt;
     printName(os, nameAttribute_.get(), depth);&lt;br/&gt;
+    if (getDoc().size()) &lt;/p&gt;
{
+        os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot;
+           &amp;lt;&amp;lt; escape(getDoc()) &amp;lt;&amp;lt; &quot;\&quot;,\n&quot;;
+    }
&lt;p&gt;     os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;fields\&quot;: [&quot;;&lt;/p&gt;

&lt;p&gt;     size_t fields = leafAttributes_.size();&lt;br/&gt;
@@ -430,6 +445,10 @@ NodeEnum::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
     os &amp;lt;&amp;lt; &quot;{\n&quot;;&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(++depth) &amp;lt;&amp;lt; &quot;\&quot;type\&quot;: \&quot;enum\&quot;,\n&quot;;&lt;br/&gt;
+    if (getDoc().size()) &lt;/p&gt;
{
+        os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot;
+           &amp;lt;&amp;lt; escape(getDoc()) &amp;lt;&amp;lt; &quot;\&quot;,\n&quot;;
+    }
&lt;p&gt;     printName(os, nameAttribute_.get(), depth);&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;symbols\&quot;: [\n&quot;;&lt;/p&gt;

&lt;p&gt;@@ -451,6 +470,10 @@ NodeArray::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
     os &amp;lt;&amp;lt; &quot;{\n&quot;;&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(depth+1) &amp;lt;&amp;lt; &quot;\&quot;type\&quot;: \&quot;array\&quot;,\n&quot;;&lt;br/&gt;
+    if (getDoc().size()) &lt;/p&gt;
{
+        os &amp;lt;&amp;lt; indent(depth+1) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot;
+           &amp;lt;&amp;lt; escape(getDoc()) &amp;lt;&amp;lt; &quot;\&quot;,\n&quot;;
+    }
&lt;p&gt;     os &amp;lt;&amp;lt; indent(depth+1) &amp;lt;&amp;lt;  &quot;\&quot;items\&quot;: &quot;;&lt;br/&gt;
     leafAttributes_.get()-&amp;gt;printJson(os, depth+1);&lt;br/&gt;
     os &amp;lt;&amp;lt; &apos;\n&apos;;&lt;br/&gt;
@@ -462,6 +485,10 @@ NodeMap::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
     os &amp;lt;&amp;lt; &quot;{\n&quot;;&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(depth+1) &amp;lt;&amp;lt;&quot;\&quot;type\&quot;: \&quot;map\&quot;,\n&quot;;&lt;br/&gt;
+    if (getDoc().size()) &lt;/p&gt;
{
+        os &amp;lt;&amp;lt; indent(depth+1) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot;
+           &amp;lt;&amp;lt; escape(getDoc()) &amp;lt;&amp;lt; &quot;\&quot;,\n&quot;;
+    }
&lt;p&gt;     os &amp;lt;&amp;lt; indent(depth+1) &amp;lt;&amp;lt; &quot;\&quot;values\&quot;: &quot;;&lt;br/&gt;
     leafAttributes_.get(1)-&amp;gt;printJson(os, depth+1);&lt;br/&gt;
     os &amp;lt;&amp;lt; &apos;\n&apos;;&lt;br/&gt;
@@ -490,6 +517,10 @@ NodeFixed::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
     os &amp;lt;&amp;lt; &quot;{\n&quot;;&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(++depth) &amp;lt;&amp;lt; &quot;\&quot;type\&quot;: \&quot;fixed\&quot;,\n&quot;;&lt;br/&gt;
+    if (getDoc().size()) &lt;/p&gt;
{
+        os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot;
+           &amp;lt;&amp;lt; escape(getDoc()) &amp;lt;&amp;lt; &quot;\&quot;,\n&quot;;
+    }
&lt;p&gt;     printName(os, nameAttribute_.get(), depth);&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;size\&quot;: &quot; &amp;lt;&amp;lt; sizeAttribute_.get() &amp;lt;&amp;lt; &quot;\n&quot;;&lt;br/&gt;
     os &amp;lt;&amp;lt; indent(--depth) &amp;lt;&amp;lt; &apos;}&apos;;&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/impl/Schema.cc b/lang/c&lt;/ins&gt;+/impl/Schema.cc&lt;br/&gt;
index b5457aeec..6676574fa 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/impl/Schema.cc&lt;br/&gt;
+++ b/lang/c++/impl/Schema.cc&lt;br/&gt;
@@ -51,6 +51,15 @@ RecordSchema::addField(const std::string &amp;amp;name, const Schema &amp;amp;fieldSchema)&lt;br/&gt;
     node_-&amp;gt;addLeaf(fieldSchema.root());&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;+std::string RecordSchema::getDoc() const&lt;br/&gt;
+&lt;/p&gt;
{
+    return node_-&amp;gt;getDoc();
+}
&lt;p&gt;+void RecordSchema::setDoc(const std::string&amp;amp; doc)&lt;br/&gt;
+&lt;/p&gt;
{
+    node_-&amp;gt;setDoc(doc);
+}
&lt;p&gt;+&lt;br/&gt;
 EnumSchema::EnumSchema(const std::string &amp;amp;name) :&lt;br/&gt;
     Schema(new NodeEnum)&lt;br/&gt;
 {&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/impl/ValidSchema.cc b/lang/c&lt;/ins&gt;+/impl/ValidSchema.cc&lt;br/&gt;
index bd28079bc..17ab9949e 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/impl/ValidSchema.cc&lt;br/&gt;
+++ b/lang/c++/impl/ValidSchema.cc&lt;br/&gt;
@@ -24,16 +24,16 @@&lt;br/&gt;
 #include &quot;Node.hh&quot;&lt;/p&gt;

&lt;p&gt; using std::string;&lt;br/&gt;
+using std::ostringstream;&lt;br/&gt;
 using std::make_pair;&lt;br/&gt;
 using boost::format;&lt;br/&gt;
 using boost::shared_ptr;&lt;br/&gt;
 using boost::static_pointer_cast;&lt;/p&gt;

&lt;p&gt; namespace avro {&lt;br/&gt;
-&lt;br/&gt;
 typedef std::map&amp;lt;Name, NodePtr&amp;gt; SymbolMap;&lt;/p&gt;

&lt;p&gt;-static bool validate(const NodePtr &amp;amp;node, SymbolMap &amp;amp;symbolMap) &lt;br/&gt;
+static bool validate(const NodePtr &amp;amp;node, SymbolMap &amp;amp;symbolMap)&lt;br/&gt;
 {&lt;br/&gt;
     if (! node-&amp;gt;isValid()) &lt;/p&gt;
{
         throw Exception(format(&quot;Schema is invalid, due to bad node of type %1%&quot;)
@@ -77,7 +77,7 @@ static bool validate(const NodePtr &amp;amp;node, SymbolMap &amp;amp;symbolMap)
             // map (which could potentially create circular shared pointer
             // links that could not be easily freed), replace this node with a
             // symbolic link to the original one.
-            
+
             node-&amp;gt;setLeafToSymbolic(i, symbolMap.find(leaf-&amp;gt;name())-&amp;gt;second);
         }
&lt;p&gt;     }&lt;br/&gt;
@@ -101,7 +101,7 @@ ValidSchema::ValidSchema(const Schema &amp;amp;schema) : root_(schema.root())&lt;br/&gt;
     validate(root_);&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-ValidSchema::ValidSchema() : root_(NullSchema().root()) &lt;br/&gt;
+ValidSchema::ValidSchema() : root_(NullSchema().root())&lt;/p&gt;
 {
     validate(root_);
 }
&lt;p&gt;@@ -113,18 +113,80 @@ ValidSchema::setSchema(const Schema &amp;amp;schema)&lt;br/&gt;
     validate(root_);&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;-void &lt;br/&gt;
+void&lt;br/&gt;
 ValidSchema::toJson(std::ostream &amp;amp;os) const&lt;br/&gt;
-{ &lt;br/&gt;
+&lt;/p&gt;
{
     root_-&amp;gt;printJson(os, 0);
     os &amp;lt;&amp;lt; &apos;\n&apos;;
 }

&lt;p&gt;-void &lt;br/&gt;
+string&lt;br/&gt;
+ValidSchema::toJson(bool prettyPrint) const&lt;br/&gt;
+{&lt;br/&gt;
+    ostringstream oss;&lt;br/&gt;
+    toJson(oss);&lt;br/&gt;
+    if (!prettyPrint) &lt;/p&gt;
{
+        return compactSchema(oss.str());
+    }
&lt;p&gt;+    return oss.str();&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+void&lt;br/&gt;
 ValidSchema::toFlatList(std::ostream &amp;amp;os) const&lt;br/&gt;
-{ &lt;br/&gt;
+&lt;/p&gt;
{
     root_-&amp;gt;printBasicInfo(os);
 }

&lt;p&gt;+/*&lt;br/&gt;
+ * compactSchema compacts and returns a formatted string representation&lt;br/&gt;
+ * of a ValidSchema object by removing the whitespaces outside of the quoted&lt;br/&gt;
+ * field names and values. It can handle the cases where the quoted value is&lt;br/&gt;
+ * in UTF-8 format. Note that this method is not responsible for validating&lt;br/&gt;
+ * the schema.&lt;br/&gt;
+ */&lt;br/&gt;
+string ValidSchema::compactSchema(const string&amp;amp; schema) {&lt;br/&gt;
+    bool insideQuote = false;&lt;br/&gt;
+    size_t newPos = 0;&lt;br/&gt;
+    string data(schema.data());&lt;br/&gt;
+&lt;br/&gt;
+    for (size_t currentPos = 0; currentPos &amp;lt; schema.size(); currentPos++) {&lt;br/&gt;
+        if (!insideQuote &amp;amp;&amp;amp; std::isspace(data&lt;span class=&quot;error&quot;&gt;&amp;#91;currentPos&amp;#93;&lt;/span&gt;)) &lt;/p&gt;
{
+            // Skip the white spaces outside quotes.
+            continue;
+        }
&lt;p&gt;+&lt;br/&gt;
+        if (data&lt;span class=&quot;error&quot;&gt;&amp;#91;currentPos&amp;#93;&lt;/span&gt; == &apos;\&quot;&apos;) {&lt;br/&gt;
+            // It is valid for a quote to be part of the value for some fields,&lt;br/&gt;
+            // e.g., the &quot;doc&quot; field.  In that case, the quote is expected to be&lt;br/&gt;
+            // escaped inside the schema.  Since the escape character &apos;&lt;br class=&quot;atl-forced-newline&quot; /&gt;&apos; could&lt;br/&gt;
+            // be escaped itself, we need to check whether there are an even&lt;br/&gt;
+            // number of consecutive slashes prior to the quote.&lt;br/&gt;
+            int leadingSlashes = 0;&lt;br/&gt;
+            for (int i = newPos - 1; i &amp;gt;= 0; i--) {&lt;br/&gt;
+                if (data&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; == &apos;&lt;br class=&quot;atl-forced-newline&quot; /&gt;&apos;) &lt;/p&gt;
{
+                    leadingSlashes++;
+                }
&lt;p&gt; else &lt;/p&gt;
{
+                    break;
+                }
&lt;p&gt;+            }&lt;br/&gt;
+            if (leadingSlashes % 2 == 0) &lt;/p&gt;
{
+                // Found a real quote which identifies either the start or the
+                // end of a field name or value.
+                insideQuote = !insideQuote;
+            }
&lt;p&gt;+        }&lt;br/&gt;
+        data&lt;span class=&quot;error&quot;&gt;&amp;#91;newPos++&amp;#93;&lt;/span&gt; = data&lt;span class=&quot;error&quot;&gt;&amp;#91;currentPos&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    if (insideQuote) &lt;/p&gt;
{
+        throw Exception(&quot;Schema is not well formed with mismatched quotes&quot;);
+    }
&lt;p&gt;+&lt;br/&gt;
+    if (newPos &amp;lt; schema.size()) &lt;/p&gt;
{
+        data.resize(newPos);
+    }
&lt;p&gt;+    return data;&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
 } // namespace avro&lt;/p&gt;

&lt;p&gt;diff --git a/lang/c+&lt;ins&gt;/jsonschemas/bigrecord b/lang/c&lt;/ins&gt;+/jsonschemas/bigrecord&lt;br/&gt;
index ba430a035..af8a5ad39 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/jsonschemas/bigrecord&lt;br/&gt;
+++ b/lang/c++/jsonschemas/bigrecord&lt;br/&gt;
@@ -1,9 +1,11 @@&lt;br/&gt;
 {&lt;br/&gt;
     &quot;type&quot;: &quot;record&quot;,&lt;br/&gt;
+    &quot;doc&quot;: &quot;Top level Doc.&quot;,&lt;br/&gt;
     &quot;name&quot;: &quot;RootRecord&quot;,&lt;br/&gt;
     &quot;fields&quot;: [&lt;br/&gt;
         &lt;/p&gt;
{
             &quot;name&quot;: &quot;mylong&quot;,
+            &quot;doc&quot;: &quot;mylong field doc.&quot;,
             &quot;type&quot;: &quot;long&quot;
         }
&lt;p&gt;,&lt;br/&gt;
         {&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/test/DataFileTests.cc b/lang/c&lt;/ins&gt;+/test/DataFileTests.cc&lt;br/&gt;
index 8d8c7b08e..bb2efc601 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/test/DataFileTests.cc&lt;br/&gt;
+++ b/lang/c++/test/DataFileTests.cc&lt;br/&gt;
@@ -45,6 +45,7 @@ using boost::unit_test::test_suite;&lt;br/&gt;
 using avro::ValidSchema;&lt;br/&gt;
 using avro::GenericDatum;&lt;br/&gt;
 using avro::GenericRecord;&lt;br/&gt;
+using avro::NodePtr;&lt;/p&gt;

&lt;p&gt; const int count = 1000;&lt;/p&gt;

&lt;p&gt;@@ -133,13 +134,29 @@ static const char dsch[] = &quot;{\&quot;type\&quot;: \&quot;record\&quot;,&quot;&lt;br/&gt;
         &quot;&lt;/p&gt;
{\&quot;name\&quot;:\&quot;re\&quot;, \&quot;type\&quot;:\&quot;double\&quot;}
&lt;p&gt;,&quot;&lt;br/&gt;
         &quot;&lt;/p&gt;
{\&quot;name\&quot;:\&quot;im\&quot;, \&quot;type\&quot;:\&quot;double\&quot;}
&lt;p&gt;&quot;&lt;br/&gt;
     &quot;]}&quot;;&lt;br/&gt;
-static const char dblsch[] = &quot;{\&quot;type\&quot;: \&quot;record\&quot;,&quot;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;\&quot;name\&quot;:\&quot;ComplexDouble\&quot;, \&quot;fields\&quot;: [&quot;&lt;br/&gt;
+static const char dblsch[] =&lt;br/&gt;
+    &quot;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {&amp;quot;type&amp;quot;}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;&quot;;&lt;br/&gt;
 static const char fsch[] = &quot;&lt;/p&gt;
{\&quot;type\&quot;: \&quot;fixed\&quot;,&quot;
     &quot;\&quot;name\&quot;:\&quot;Fixed_32\&quot;, \&quot;size\&quot;:4}
&lt;p&gt;&quot;;&lt;br/&gt;
-&lt;br/&gt;
+static const char ischWithDoc[] =&lt;br/&gt;
+    &quot;&lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {&amp;quot;type&amp;quot;}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;&quot;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; string toString(const ValidSchema&amp;amp; s)&lt;br/&gt;
 {&lt;br/&gt;
@@ -561,18 +578,42 @@ class DataFileTest {&lt;br/&gt;
 #endif&lt;/p&gt;

&lt;p&gt;     void testSchemaReadWrite() {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;uint32_t a=42;&lt;/li&gt;
	&lt;li&gt;{&lt;br/&gt;
+        uint32_t a=42;&lt;br/&gt;
+        
{
             avro::DataFileWriter&amp;lt;uint32_t&amp;gt; df(filename, writerSchema);
-        df.write(a);
+            df.write(a);
         }&lt;/li&gt;
&lt;/ul&gt;


         {
-        avro::DataFileReader&amp;lt;uint32_t&amp;gt; df(filename);
-        uint32_t b;
+            avro::DataFileReader&amp;lt;uint32_t&amp;gt; df(filename);
+            uint32_t b;
             df.read(b);
             BOOST_CHECK_EQUAL(b, a);
+        }
&lt;p&gt;     }&lt;br/&gt;
+&lt;br/&gt;
+    void testSchemaReadWriteWithDoc() {&lt;br/&gt;
+        uint32_t a=42;&lt;br/&gt;
+        &lt;/p&gt;
{
+          avro::DataFileWriter&amp;lt;uint32_t&amp;gt; df(filename, writerSchema);
+          df.write(a);
+        }
&lt;p&gt;+&lt;br/&gt;
+        &lt;/p&gt;
{
+          avro::DataFileReader&amp;lt;uint32_t&amp;gt; df(filename);
+          uint32_t b;
+          df.read(b);
+          BOOST_CHECK_EQUAL(b, a);
+
+          const NodePtr&amp;amp; root = df.readerSchema().root();
+          BOOST_CHECK_EQUAL(root-&amp;gt;getDoc(), &quot;record_doc&quot;);
+          BOOST_CHECK_EQUAL(root-&amp;gt;leafAt(0)-&amp;gt;getDoc(), &quot;field_doc&quot;);
+          BOOST_CHECK_EQUAL(root-&amp;gt;leafAt(1)-&amp;gt;getDoc(), &quot;&quot;);
+          BOOST_CHECK_EQUAL(root-&amp;gt;leafAt(2)-&amp;gt;getDoc(), &quot;&quot;);
+          BOOST_CHECK_EQUAL(root-&amp;gt;leafAt(3)-&amp;gt;getDoc(), &quot;A_\&quot;quoted_doc\&quot;&quot;);
+          BOOST_CHECK_EQUAL(root-&amp;gt;leafAt(4)-&amp;gt;getDoc(), &quot;doc with\nspaces&quot;);
+          BOOST_CHECK_EQUAL(root-&amp;gt;leafAt(5)-&amp;gt;getDoc(), &quot;extra slashes\\\\&quot;);
+        }
&lt;p&gt;     }&lt;br/&gt;
 };&lt;/p&gt;

&lt;p&gt;@@ -677,6 +718,14 @@ init_unit_test_suite(int argc, char *argv[])&lt;br/&gt;
         ts-&amp;gt;add(BOOST_CLASS_TEST_CASE(&amp;amp;DataFileTest::testCleanup, t));&lt;br/&gt;
         boost::unit_test::framework::master_test_suite().add(ts);&lt;br/&gt;
     }&lt;br/&gt;
+    &lt;/p&gt;
{
+        test_suite *ts = BOOST_TEST_SUITE(&quot;DataFile tests: test12.df&quot;);
+        shared_ptr&amp;lt;DataFileTest&amp;gt; t(new DataFileTest(&quot;test12.df&quot;, ischWithDoc, ischWithDoc));
+        ts-&amp;gt;add(BOOST_CLASS_TEST_CASE(&amp;amp;DataFileTest::testWrite, t));
+        ts-&amp;gt;add(BOOST_CLASS_TEST_CASE(&amp;amp;DataFileTest::testSchemaReadWriteWithDoc, t));
+        ts-&amp;gt;add(BOOST_CLASS_TEST_CASE(&amp;amp;DataFileTest::testCleanup, t));
+        boost::unit_test::framework::master_test_suite().add(ts);
+    }

&lt;p&gt;     return 0;&lt;br/&gt;
 }&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/test/SchemaTests.cc b/lang/c&lt;/ins&gt;+/test/SchemaTests.cc&lt;br/&gt;
index 026c4d0b7..f6d6195da 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/test/SchemaTests.cc&lt;br/&gt;
+++ b/lang/c++/test/SchemaTests.cc&lt;br/&gt;
@@ -47,42 +47,42 @@ const char* basicSchemas[] = {&lt;br/&gt;
     &quot;&lt;/p&gt;
{ \&quot;type\&quot;: \&quot;string\&quot; }
&lt;p&gt;&quot;,&lt;/p&gt;

&lt;p&gt;     // Record&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;
{\&quot;type\&quot;: \&quot;record\&quot;,\&quot;name\&quot;: \&quot;Test\&quot;,\&quot;fields\&quot;: []}
&lt;p&gt;&quot;,&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&quot;{\&quot;type\&quot;: \&quot;record\&quot;,\&quot;name\&quot;: \&quot;Test\&quot;,\&quot;fields\&quot;: &quot;&lt;/li&gt;
	&lt;li&gt;&quot;[
{\&quot;name\&quot;: \&quot;f\&quot;,\&quot;type\&quot;: \&quot;long\&quot;}
&lt;p&gt;]}&quot;,&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&quot;{\&quot;type\&quot;: \&quot;record\&quot;,\&quot;name\&quot;: \&quot;Test\&quot;,\&quot;fields\&quot;: &quot;&lt;/li&gt;
	&lt;li&gt;&quot;[
{\&quot;name\&quot;: \&quot;f1\&quot;,\&quot;type\&quot;: \&quot;long\&quot;}
&lt;p&gt;,&quot;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&quot;
{\&quot;name\&quot;: \&quot;f2\&quot;, \&quot;type\&quot;: \&quot;int\&quot;}
&lt;p&gt;]}&quot;,&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&quot;{\&quot;type\&quot;: \&quot;error\&quot;,\&quot;name\&quot;: \&quot;Test\&quot;,\&quot;fields\&quot;: &quot;&lt;/li&gt;
	&lt;li&gt;&quot;[
{\&quot;name\&quot;: \&quot;f1\&quot;,\&quot;type\&quot;: \&quot;long\&quot;}
&lt;p&gt;,&quot;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&quot;
{\&quot;name\&quot;: \&quot;f2\&quot;, \&quot;type\&quot;: \&quot;int\&quot;}
&lt;p&gt;]}&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;record\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;doc\&quot;:\&quot;Doc_string\&quot;,\&quot;fields\&quot;:[]}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {&amp;quot;type&amp;quot;}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {&amp;quot;type&amp;quot;}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {&amp;quot;type&amp;quot;}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;&quot;,&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     // Recursive.&lt;br/&gt;
     &quot;{\&quot;type\&quot;:\&quot;record\&quot;,\&quot;name\&quot;:\&quot;LongList\&quot;,&quot;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;\&quot;fields\&quot;:[
{\&quot;name\&quot;:\&quot;value\&quot;,\&quot;type\&quot;:\&quot;long\&quot;}
&lt;p&gt;,&quot;&lt;br/&gt;
+        &quot;\&quot;fields\&quot;:[&lt;/p&gt;
{\&quot;name\&quot;:\&quot;value\&quot;,\&quot;type\&quot;:\&quot;long\&quot;,\&quot;doc\&quot;:\&quot;recursive_doc\&quot;}
&lt;p&gt;,&quot;&lt;br/&gt;
         &quot;&lt;/p&gt;
{\&quot;name\&quot;:\&quot;next\&quot;,\&quot;type\&quot;:[\&quot;LongList\&quot;,\&quot;null\&quot;]}
&lt;p&gt;]}&quot;,&lt;br/&gt;
     // Enum&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&quot;
{\&quot;type\&quot;: \&quot;enum\&quot;, \&quot;name\&quot;: \&quot;Test\&quot;, \&quot;symbols\&quot;: [\&quot;A\&quot;, \&quot;B\&quot;]}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;enum\&quot;,\&quot;doc\&quot;:\&quot;enum_doc\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;symbols\&quot;:[\&quot;A\&quot;,\&quot;B\&quot;]}
&lt;p&gt;&quot;,&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     // Array&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;
{\&quot;type\&quot;: \&quot;array\&quot;, \&quot;items\&quot;: \&quot;long\&quot;}
&lt;p&gt;&quot;,&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&quot;{\&quot;type\&quot;: \&quot;array\&quot;,\&quot;items\&quot;: {\&quot;type\&quot;: \&quot;enum\&quot;, &quot;&lt;/li&gt;
	&lt;li&gt;&quot;\&quot;name\&quot;: \&quot;Test\&quot;, \&quot;symbols\&quot;: &lt;span class=&quot;error&quot;&gt;&amp;#91;\&amp;quot;A\&amp;quot;, \&amp;quot;B\&amp;quot;&amp;#93;&lt;/span&gt;}}&quot;,&lt;br/&gt;
+    &quot;
{\&quot;type\&quot;:\&quot;array\&quot;,\&quot;doc\&quot;:\&quot;array_doc\&quot;,\&quot;items\&quot;:\&quot;long\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;{\&quot;type\&quot;:\&quot;array\&quot;,\&quot;items\&quot;:{\&quot;type\&quot;:\&quot;enum\&quot;,&quot;&lt;br/&gt;
+        &quot;\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;symbols\&quot;:&lt;span class=&quot;error&quot;&gt;&amp;#91;\&amp;quot;A\&amp;quot;,\&amp;quot;B\&amp;quot;&amp;#93;&lt;/span&gt;}}&quot;,&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     // Map&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;
{\&quot;type\&quot;: \&quot;map\&quot;, \&quot;values\&quot;: \&quot;long\&quot;}
&lt;p&gt;&quot;,&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&quot;{\&quot;type\&quot;: \&quot;map\&quot;,\&quot;values\&quot;: {\&quot;type\&quot;: \&quot;enum\&quot;, &quot;&lt;/li&gt;
	&lt;li&gt;&quot;\&quot;name\&quot;: \&quot;Test\&quot;, \&quot;symbols\&quot;: &lt;span class=&quot;error&quot;&gt;&amp;#91;\&amp;quot;A\&amp;quot;, \&amp;quot;B\&amp;quot;&amp;#93;&lt;/span&gt;}}&quot;,&lt;br/&gt;
+    &quot;
{\&quot;type\&quot;:\&quot;map\&quot;,\&quot;doc\&quot;:\&quot;map_doc\&quot;,\&quot;values\&quot;:\&quot;long\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;{\&quot;type\&quot;:\&quot;map\&quot;,\&quot;values\&quot;:{\&quot;type\&quot;:\&quot;enum\&quot;, &quot;&lt;br/&gt;
+        &quot;\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;symbols\&quot;:&lt;span class=&quot;error&quot;&gt;&amp;#91;\&amp;quot;A\&amp;quot;,\&amp;quot;B\&amp;quot;&amp;#93;&lt;/span&gt;}}&quot;,&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     // Union&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;\&amp;quot;string\&amp;quot;, \&amp;quot;null\&amp;quot;, \&amp;quot;long\&amp;quot;&amp;#93;&lt;/span&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;\&amp;quot;string\&amp;quot;,\&amp;quot;null\&amp;quot;,\&amp;quot;long\&amp;quot;&amp;#93;&lt;/span&gt;&quot;,&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     // Fixed&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;
{ \&quot;type\&quot;: \&quot;fixed\&quot;, \&quot;name\&quot;: \&quot;Test\&quot;, \&quot;size\&quot;: 1}
&lt;p&gt;&quot;,&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&quot;
{\&quot;type\&quot;: \&quot;fixed\&quot;, \&quot;name\&quot;: \&quot;MyFixed\&quot;, &quot;
-        &quot;\&quot;namespace\&quot;: \&quot;org.apache.hadoop.avro\&quot;, \&quot;size\&quot;: 1}
&lt;p&gt;&quot;,&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&quot;
{ \&quot;type\&quot;: \&quot;fixed\&quot;, \&quot;name\&quot;: \&quot;Test\&quot;, \&quot;size\&quot;: 1}
&lt;p&gt;&quot;,&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&quot;
{ \&quot;type\&quot;: \&quot;fixed\&quot;, \&quot;name\&quot;: \&quot;Test\&quot;, \&quot;size\&quot;: 1}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;doc\&quot;:\&quot;fixed_doc\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;size\&quot;:1}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;name\&quot;:\&quot;MyFixed\&quot;,&quot;
+        &quot;\&quot;namespace\&quot;:\&quot;org.apache.hadoop.avro\&quot;,\&quot;size\&quot;:1}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;size\&quot;:1}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;size\&quot;:1}
&lt;p&gt;&quot;,&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     // Extra attributes (should be ignored)&lt;br/&gt;
     &quot;&lt;/p&gt;
{\&quot;type\&quot;: \&quot;null\&quot;, \&quot;extra attribute\&quot;: \&quot;should be ignored\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
@@ -135,7 +135,7 @@ const char* basicSchemaErrors[] = {&lt;br/&gt;
     // Duplicate type&lt;br/&gt;
     &quot;[&lt;/p&gt;
{\&quot;type\&quot;: \&quot;array\&quot;, \&quot;items\&quot;: \&quot;long\&quot;}
&lt;p&gt;, &quot;&lt;br/&gt;
         &quot;&lt;/p&gt;
{\&quot;type\&quot;: \&quot;array\&quot;, \&quot;items\&quot;: \&quot;string\&quot;}
&lt;p&gt;]&quot;,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;p&gt;+&lt;br/&gt;
     // Fixed&lt;br/&gt;
     // No size&lt;br/&gt;
     &quot;&lt;/p&gt;
{\&quot;type\&quot;: \&quot;fixed\&quot;, \&quot;name\&quot;: \&quot;Missing size\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
@@ -166,7 +166,7 @@ const char* roundTripSchemas[] = {&lt;br/&gt;
     &quot;&lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {&amp;quot;type&amp;quot;}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;&quot;,&lt;br/&gt;
-/* Avro-C++ cannot do a round-trip on error schemas. &lt;br/&gt;
&lt;ins&gt;/* Avro-C&lt;/ins&gt;+ cannot do a round-trip on error schemas.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;&quot;{\&quot;type\&quot;:\&quot;error\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;fields\&quot;:&quot;&lt;/li&gt;
	&lt;li&gt;&quot;[
{\&quot;name\&quot;:\&quot;f1\&quot;,\&quot;type\&quot;:\&quot;long\&quot;}
&lt;p&gt;,&quot;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&quot;
{\&quot;name\&quot;:\&quot;f2\&quot;,\&quot;type\&quot;:\&quot;int\&quot;}
&lt;p&gt;]}&quot;&lt;br/&gt;
@@ -199,7 +199,32 @@ const char* roundTripSchemas[] = &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {     &amp;quot;{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;size\&quot;:1}&amp;quot; }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+const char* schemasToCompact[] = {&lt;br/&gt;
+    // Schema without any whitespace&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;record\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;fields\&quot;:[]}
&lt;p&gt;&quot;,&lt;br/&gt;
+&lt;br/&gt;
+    // Schema with whitespaces outside of field names/values only.&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:   \&quot;record\&quot;,\n   \n\&quot;name\&quot;:\&quot;Test\&quot;, \t\t\&quot;fields\&quot;:[]}
&lt;p&gt;\n \n&quot;,&lt;/p&gt;

&lt;p&gt;+    // Schema with whitespaces both inside and outside of field names/values.&lt;br/&gt;
+    &quot;{\&quot;type\&quot;:   \&quot;record\&quot;,  \&quot;name\&quot;:               \&quot;ComplexInteger\&quot;\n, &quot;&lt;br/&gt;
+    &quot;\&quot;doc\&quot;: \&quot;record_doc &#176;C \u00f8 \x1f &lt;br class=&quot;atl-forced-newline&quot; /&gt;n \n \t\&quot;, &quot;&lt;br/&gt;
+    &quot;\&quot;fields\&quot;: [&quot;&lt;br/&gt;
+        &quot;&lt;/p&gt;
{\&quot;name\&quot;:   \&quot;re1\&quot;, \&quot;type\&quot;:               \&quot;long\&quot;, &quot;
+        &quot;\&quot;doc\&quot;:   \&quot;A \\\&quot;quoted doc\\\&quot;\&quot;      }
&lt;p&gt;,                 &quot;&lt;br/&gt;
+        &quot;&lt;/p&gt;
{\&quot;name\&quot;:  \&quot;re2\&quot;, \&quot;type\&quot;:   \&quot;long\&quot;, \n\t&quot;
+        &quot;\&quot;doc\&quot;: \&quot;extra slashes\\\\\\\\\&quot;}
&lt;p&gt;&quot;&lt;br/&gt;
+    &quot;]}&quot;};&lt;br/&gt;
+&lt;br/&gt;
+const char* compactSchemas[] = {&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;record\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;fields\&quot;:[]}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;record\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;fields\&quot;:[]}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;{\&quot;type\&quot;:\&quot;record\&quot;,\&quot;name\&quot;:\&quot;ComplexInteger\&quot;,&quot;&lt;br/&gt;
+    &quot;\&quot;doc\&quot;:\&quot;record_doc &#176;C \u00f8 &lt;br class=&quot;atl-forced-newline&quot; /&gt;u001f &lt;br class=&quot;atl-forced-newline&quot; /&gt;n &lt;br class=&quot;atl-forced-newline&quot; /&gt;n \\t\&quot;,&quot;&lt;br/&gt;
+    &quot;\&quot;fields\&quot;:[&quot;&lt;br/&gt;
+        &quot;&lt;/p&gt;
{\&quot;name\&quot;:\&quot;re1\&quot;,\&quot;type\&quot;:\&quot;long\&quot;,\&quot;doc\&quot;:\&quot;A \\\&quot;quoted doc\\\&quot;\&quot;}
&lt;p&gt;,&quot;&lt;br/&gt;
+        &quot;&lt;/p&gt;
{\&quot;name\&quot;:\&quot;re2\&quot;,\&quot;type\&quot;:\&quot;long\&quot;,\&quot;doc\&quot;:\&quot;extra slashes\\\\\\\\\&quot;}
&lt;p&gt;&quot;&lt;br/&gt;
+    &quot;]}&quot;};&lt;/p&gt;

&lt;p&gt; static void testBasic(const char* schema)&lt;/p&gt;
 {
@@ -219,17 +244,36 @@ static void testCompile(const char* schema)
     compileJsonSchemaFromString(std::string(schema));
 }

&lt;p&gt;-// Test that the JSON output from a valid schema matches the JSON that was &lt;br/&gt;
+// Test that the JSON output from a valid schema matches the JSON that was&lt;br/&gt;
 // used to construct it, apart from whitespace changes.&lt;br/&gt;
 static void testRoundTrip(const char* schema)&lt;/p&gt;
 {
     BOOST_TEST_CHECKPOINT(schema);
-    avro::ValidSchema compiledSchema = compileJsonSchemaFromString(std::string(schema));
+    avro::ValidSchema compiledSchema =
+        compileJsonSchemaFromString(std::string(schema));
     std::ostringstream os;
     compiledSchema.toJson(os);
     std::string result = os.str();
     result.erase(std::remove_if(result.begin(), result.end(), ::isspace), result.end()); // Remove whitespace
     BOOST_CHECK(result == std::string(schema));
+    // Verify that the compact schema from toJson has the same content as the
+    // schema.
+    std::string result2 = compiledSchema.toJson(false);
+    BOOST_CHECK(result2 == std::string(schema));
+}
&lt;p&gt;+&lt;br/&gt;
+static void testCompactSchemas()&lt;br/&gt;
+{&lt;br/&gt;
+  for (size_t i = 0; i &amp;lt; sizeof(schemasToCompact)/ sizeof(schemasToCompact&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;); i++)&lt;br/&gt;
+  &lt;/p&gt;
{
+    const char* schema = schemasToCompact[i];
+    BOOST_TEST_CHECKPOINT(schema);
+    avro::ValidSchema compiledSchema =
+        compileJsonSchemaFromString(std::string(schema));
+
+    std::string result = compiledSchema.toJson(false);
+    BOOST_CHECK_EQUAL(result, compactSchemas[i]);
+  }
&lt;p&gt; }&lt;/p&gt;

&lt;p&gt; }&lt;br/&gt;
@@ -239,10 +283,10 @@ static void testRoundTrip(const char* schema)&lt;/p&gt;

&lt;p&gt; #define ADD_PARAM_TEST(ts, func, data) \&lt;br/&gt;
     ts-&amp;gt;add(BOOST_PARAM_TEST_CASE(&amp;amp;func, data, ENDOF(data)))&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;p&gt;+&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; boost::unit_test::test_suite*&lt;br/&gt;
-init_unit_test_suite(int argc, char* argv[]) &lt;br/&gt;
+init_unit_test_suite(int argc, char* argv[])&lt;/p&gt;
 {
     using namespace boost::unit_test;
 
@@ -252,5 +296,6 @@ init_unit_test_suite(int argc, char* argv[])
         avro::schema::basicSchemaErrors);
     ADD_PARAM_TEST(ts, avro::schema::testCompile, avro::schema::basicSchemas);
     ADD_PARAM_TEST(ts, avro::schema::testRoundTrip, avro::schema::roundTripSchemas);
+    ts-&amp;gt;add(BOOST_TEST_CASE(&amp;amp;avro::schema::testCompactSchemas));
     return ts;
 }




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16683765" author="jira-bot" created="Mon, 12 Nov 2018 12:57:46 +0000"  >&lt;p&gt;Commit 4a8e814327be1f18b203784778f8b17d7f9da8b0 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=aniket486&quot; class=&quot;user-hover&quot; rel=&quot;aniket486&quot;&gt;Aniket Mokashi&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=4a8e814&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=4a8e814&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record (#345)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;. C++ API compileJsonSchema ignores doc and custom attributes on a field/record&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;minor code fixes&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;minor code fixes&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;more std::string fixes&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Add escape_json function to print doc string&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;solve merge conflict&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;compactSchema changes&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;minor refactor&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fix tests&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;fix formatting&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;fix formatting&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fix nullptr and tests&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16683767" author="jira-bot" created="Mon, 12 Nov 2018 12:57:48 +0000"  >&lt;p&gt;Commit 4a8e814327be1f18b203784778f8b17d7f9da8b0 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=aniket486&quot; class=&quot;user-hover&quot; rel=&quot;aniket486&quot;&gt;Aniket Mokashi&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=4a8e814&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=4a8e814&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;: C++ API compileJsonSchema ignores &quot;doc&quot; and custom attributes on a field/record (#345)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1256&quot; title=&quot;C++ API compileJsonSchema ignores &amp;quot;doc&amp;quot; and custom attributes on a field/record&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1256&quot;&gt;&lt;del&gt;AVRO-1256&lt;/del&gt;&lt;/a&gt;. C++ API compileJsonSchema ignores doc and custom attributes on a field/record&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;minor code fixes&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;minor code fixes&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;more std::string fixes&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Add escape_json function to print doc string&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;solve merge conflict&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;compactSchema changes&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;minor refactor&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fix tests&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;fix formatting&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;fix formatting&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fix nullptr and tests&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16683774" author="thiru_mg" created="Mon, 12 Nov 2018 13:01:32 +0000"  >&lt;p&gt;Merged the pull request. Thanks a lot &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=aniket486&quot; class=&quot;user-hover&quot; rel=&quot;aniket486&quot;&gt;Aniket Mokashi&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12734121" name="AVRO-1256.patch" size="12112" author="pidefrem" created="Wed, 20 May 2015 12:59:55 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 20 May 2015 12:59:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>313402</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            10 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1i30f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>313747</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
