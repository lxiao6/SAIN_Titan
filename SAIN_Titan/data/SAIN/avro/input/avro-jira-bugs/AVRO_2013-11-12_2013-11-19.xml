<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:19:28 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2013-11-12+AND+created+%3C%3D+2013-11-19+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="4" total="4"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1400] Introduce annotation to specify default values</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1400</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;It would be nice if there was an annotation in org.apache.avro.reflect to specify default values for schemata derived reflectively, allowing for proper schema evolution.&lt;/p&gt;

&lt;p&gt;I suggest the following:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;@AvroDefault(1)
&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; someNum;

@Nullable
@AvroDefault(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;)
AnotherRecord myRec;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12678756">AVRO-1400</key>
            <summary>Introduce annotation to specify default values</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="striderapache">dennis lucero</reporter>
                        <labels>
                            <label>annotation</label>
                            <label>features</label>
                            <label>reflection</label>
                            <label>schema</label>
                    </labels>
                <created>Tue, 12 Nov 2013 09:54:22 +0000</created>
                <updated>Thu, 23 Jan 2014 21:58:54 +0000</updated>
                            <resolved>Wed, 11 Dec 2013 21:17:33 +0000</resolved>
                                    <version>1.7.5</version>
                                    <fixVersion>1.7.6</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13820007" author="striderapache" created="Tue, 12 Nov 2013 11:00:29 +0000"  >&lt;p&gt;I tried the workaround &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;@AvroMeta(key=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt;, value=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;but this is actually forbidden:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;org.apache.avro.AvroRuntimeException: Can&apos;t set reserved property: &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;
	at org.apache.avro.JsonProperties.addProp(JsonProperties.java:81)
	at org.apache.avro.JsonProperties.addProp(JsonProperties.java:67)
	at org.apache.avro.reflect.ReflectData.createSchema(ReflectData.java:484)
	at org.apache.avro.reflect.ReflectData.getAnnotatedUnion(ReflectData.java:527)
	at org.apache.avro.reflect.ReflectData.createSchema(ReflectData.java:440)
	at org.apache.avro.reflect.ReflectData.createSchema(ReflectData.java:377)
	at org.apache.avro.reflect.ReflectData.createFieldSchema(ReflectData.java:577)
	at org.apache.avro.reflect.ReflectData.createSchema(ReflectData.java:467)
	at org.apache.avro.reflect.ReflectData.createSchema(ReflectData.java:377)
	at org.apache.avro.reflect.ReflectData.createFieldSchema(ReflectData.java:577)
	at org.apache.avro.reflect.ReflectData.createSchema(ReflectData.java:467)
	at org.apache.avro.specific.SpecificData.getSchema(SpecificData.java:188)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13831307" author="striderapache" created="Mon, 25 Nov 2013 09:17:49 +0000"  >&lt;p&gt;An alternative fix instead of the suggested annotation would be to allow &quot;default&quot; for @AvroMeta with a change in org.apache.avro.Schema:344.&lt;/p&gt;</comment>
                            <comment id="13832101" author="cutting" created="Tue, 26 Nov 2013 00:07:11 +0000"  >&lt;p&gt;Here&apos;s a patch that implements an AvroDefault annotation.  Note that default values must be specified as a json string, since Java does not permit arbitrary types to be specified as annotation values.&lt;/p&gt;

&lt;p&gt;If this looks suitable &amp;amp; no one objects then I will commit this.&lt;/p&gt;</comment>
                            <comment id="13837799" author="striderapache" created="Tue, 3 Dec 2013 15:33:44 +0000"  >&lt;p&gt;Your patch lacks the definition for the AvroDefault annotation. Using my own definition noted below, the code seems legit for me.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.avro.reflect;

&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.ElementType;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.Retention;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.RetentionPolicy;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.Target;

/**
 * Sets the given &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; value as JSON &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the annotated field.
 */
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; @&lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; AvroDefault {
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; value();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13845728" author="jira-bot" created="Wed, 11 Dec 2013 21:16:40 +0000"  >&lt;p&gt;Commit 1550260 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1550260&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1550260&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1400&quot; title=&quot;Introduce annotation to specify default values&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1400&quot;&gt;&lt;del&gt;AVRO-1400&lt;/del&gt;&lt;/a&gt;. Java: Add AvroDefault reflect annotation to specify default values.&lt;/p&gt;</comment>
                            <comment id="13845730" author="cutting" created="Wed, 11 Dec 2013 21:17:33 +0000"  >&lt;p&gt;Thanks for the review.  I committed this.&lt;/p&gt;</comment>
                            <comment id="13847238" author="hudson" created="Fri, 13 Dec 2013 07:56:41 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #406 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/406/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/406/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1400&quot; title=&quot;Introduce annotation to specify default values&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1400&quot;&gt;&lt;del&gt;AVRO-1400&lt;/del&gt;&lt;/a&gt;. Java: Add AvroDefault reflect annotation to specify default values. (cutting: rev 1550260)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/reflect/AvroDefault.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflect.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12615735" name="AVRO-1400.patch" size="2942" author="cutting" created="Tue, 26 Nov 2013 00:07:11 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 26 Nov 2013 00:07:11 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>358123</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 6 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1pqi7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>358413</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1401] @Nullable does not work with byte[]</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1401</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;@Nullable does not seem to be compatible with byte[] (Avro type bytes)&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
{
    Schema schema = ReflectData.get().getSchema(MyRecord.class);
    DatumWriter&amp;lt;?&amp;gt; protocol = ReflectData.get().createDatumWriter(schema);
    DataFileWriter&amp;lt;MyRecord&amp;gt; writer = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileWriter(protocol).create(schema, &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out);
    writer.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MyRecord());
    writer.close();
}

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;MyRecord {
    @Nullable
    &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;.getBytes();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;org.apache.avro.UnresolvedUnionException: Not in union [&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;,{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;bytes&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;java-class&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;[B&quot;&lt;/span&gt;}]: [B@6d3f1f92
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericData.resolveUnion(GenericData.java:600)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.resolveUnion(GenericDatumWriter.java:151)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.write(GenericDatumWriter.java:71)
	at org.apache.avro.reflect.ReflectDatumWriter.write(ReflectDatumWriter.java:143)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.writeField(GenericDatumWriter.java:114)
	at org.apache.avro.reflect.ReflectDatumWriter.writeField(ReflectDatumWriter.java:175)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.writeRecord(GenericDatumWriter.java:104)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.write(GenericDatumWriter.java:66)
	at org.apache.avro.reflect.ReflectDatumWriter.write(ReflectDatumWriter.java:143)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.write(GenericDatumWriter.java:58)
	at org.apache.avro.file.DataFileWriter.append(DataFileWriter.java:257)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12678794">AVRO-1401</key>
            <summary>@Nullable does not work with byte[]</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="nkollar">Nandor Kollar</assignee>
                                    <reporter username="striderapache">dennis lucero</reporter>
                        <labels>
                            <label>java</label>
                            <label>reflection</label>
                            <label>union</label>
                    </labels>
                <created>Tue, 12 Nov 2013 12:57:38 +0000</created>
                <updated>Wed, 14 Jun 2017 11:26:56 +0000</updated>
                            <resolved>Wed, 14 Jun 2017 11:26:56 +0000</resolved>
                                    <version>1.7.5</version>
                                    <fixVersion>1.9.0</fixVersion>
                    <fixVersion>1.8.3</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>12</watches>
                                                                <comments>
                            <comment id="15361891" author="rchzzjcn" created="Tue, 5 Jul 2016 01:52:22 +0000"  >&lt;p&gt;I can&apos;t see any update for this issue. Is there any plan to fix it?&lt;/p&gt;</comment>
                            <comment id="15362472" author="busbey" created="Tue, 5 Jul 2016 13:18:55 +0000"  >&lt;p&gt;I haven&apos;t see anyone take action on it yet. Are you interested in making a fix, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rchzzjcn&quot; class=&quot;user-hover&quot; rel=&quot;rchzzjcn&quot;&gt;Cheng&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="16043561" author="githubbot" created="Thu, 8 Jun 2017 22:45:42 +0000"  >&lt;p&gt;GitHub user nandorKollar opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/229&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/229&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1401&quot; title=&quot;@Nullable does not work with byte[]&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1401&quot;&gt;&lt;del&gt;AVRO-1401&lt;/del&gt;&lt;/a&gt;: @Nullable does not work with byte[]&lt;/p&gt;



&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/nandorKollar/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/nandorKollar/avro&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1401&quot; title=&quot;@Nullable does not work with byte[]&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1401&quot;&gt;&lt;del&gt;AVRO-1401&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/229.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/229.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #229&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit 7f438cd8f7e7cae79de79e171b6bae50cd46cf96&lt;br/&gt;
Author: Nandor Kollar &amp;lt;nkollar@cloudera.com&amp;gt;&lt;br/&gt;
Date:   2017-06-08T22:44:37Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1401&quot; title=&quot;@Nullable does not work with byte[]&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1401&quot;&gt;&lt;del&gt;AVRO-1401&lt;/del&gt;&lt;/a&gt;: @Nullable does not work with byte[]&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="16043568" author="nkollar" created="Thu, 8 Jun 2017 22:48:26 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gszadovszky&quot; class=&quot;user-hover&quot; rel=&quot;gszadovszky&quot;&gt;Gabor Szadovszky&lt;/a&gt; could you please review my pull request?&lt;/p&gt;</comment>
                            <comment id="16047857" author="gszadovszky" created="Tue, 13 Jun 2017 13:05:09 +0000"  >&lt;p&gt;+1&lt;br/&gt;
Wait another day and will commit if there are no more comments.&lt;/p&gt;</comment>
                            <comment id="16048950" author="jira-bot" created="Wed, 14 Jun 2017 09:42:23 +0000"  >&lt;p&gt;Commit c04a17c86078431d0ae33a3045520e3ec9d9787d in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkollar&quot; class=&quot;user-hover&quot; rel=&quot;nkollar&quot;&gt;Nandor Kollar&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=c04a17c&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=c04a17c&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1401&quot; title=&quot;@Nullable does not work with byte[]&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1401&quot;&gt;&lt;del&gt;AVRO-1401&lt;/del&gt;&lt;/a&gt;: @Nullable does not work with byte[]&lt;/p&gt;

&lt;p&gt;This closes #229&lt;/p&gt;</comment>
                            <comment id="16048952" author="githubbot" created="Wed, 14 Jun 2017 09:42:43 +0000"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/229&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/229&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16049058" author="jira-bot" created="Wed, 14 Jun 2017 11:10:57 +0000"  >&lt;p&gt;Commit fb821095aea715a339ad9b1b7738718927b236d2 in avro&apos;s branch refs/heads/branch-1.8 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkollar&quot; class=&quot;user-hover&quot; rel=&quot;nkollar&quot;&gt;Nandor Kollar&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=fb82109&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=fb82109&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1401&quot; title=&quot;@Nullable does not work with byte[]&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1401&quot;&gt;&lt;del&gt;AVRO-1401&lt;/del&gt;&lt;/a&gt;: @Nullable does not work with byte[]&lt;/p&gt;

&lt;p&gt;This closes #229&lt;/p&gt;

&lt;p&gt;(cherry picked from commit c04a17c86078431d0ae33a3045520e3ec9d9787d)&lt;/p&gt;</comment>
                            <comment id="16049069" author="gszadovszky" created="Wed, 14 Jun 2017 11:26:56 +0000"  >&lt;p&gt;Was unable to backport to 1.7 as the fix depends on the improvement &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-680&quot; title=&quot;Allow for non-string keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-680&quot;&gt;&lt;del&gt;AVRO-680&lt;/del&gt;&lt;/a&gt; added to 1.8.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 5 Jul 2016 01:52:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>358161</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 31 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1pqqn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>358451</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1402] Support for DECIMAL type</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1402</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Currently, Avro does not seem to support a DECIMAL type or equivalent.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://avro.apache.org/docs/1.7.5/spec.html#schema_primitive&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/docs/1.7.5/spec.html#schema_primitive&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding DECIMAL support would be particularly interesting when converting types from Avro to Hive, since DECIMAL is already a supported data type in Hive (0.11.0).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12679032">AVRO-1402</key>
            <summary>Support for DECIMAL type</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rdblue">Ryan Blue</assignee>
                                    <reporter username="mdominguez@cloudera.com">Mariano Dominguez</reporter>
                        <labels>
                            <label>Hive</label>
                    </labels>
                <created>Wed, 13 Nov 2013 15:00:42 +0000</created>
                <updated>Mon, 22 Aug 2016 18:01:33 +0000</updated>
                            <resolved>Fri, 18 Apr 2014 15:47:48 +0000</resolved>
                                                    <fixVersion>1.7.7</fixVersion>
                                        <due></due>
                            <votes>6</votes>
                                    <watches>18</watches>
                                                                <comments>
                            <comment id="13941825" author="tomwhite" created="Thu, 20 Mar 2014 15:17:35 +0000"  >&lt;p&gt;Following Doug&apos;s &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-739?focusedCommentId=13933465&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13933465&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;subType suggestion&lt;/a&gt; on &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-739&quot; title=&quot;Add Date/Time data types&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-739&quot;&gt;&lt;del&gt;AVRO-739&lt;/del&gt;&lt;/a&gt; I wrote a patch to support a decimal type.&lt;/p&gt;

&lt;p&gt;The schema declaration looks like this: &lt;/p&gt;
{&quot;type&quot;:&quot;bytes&quot;, &quot;subType&quot;:&quot;decimal&quot;}

&lt;p&gt;The encoding is an int to represent the scale followed by a byte array containing the unscaled integer, in the (language-neutral) format described here: &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/math/BigInteger.html#toByteArray%28%29&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/6/docs/api/java/math/BigInteger.html#toByteArray%28%29&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One thing to notice is that in this patch the type does not define the precision and scale as a part of the type. This means that there is no restriction in Avro on the decimal that may be written. Instead, the burden of limiting the precision and scale falls on the application. Hive, for example, already has logic for ensuring that the precision and scale of a decimal value are consistent with the precision and scale values set as a part of the type definition for that decimal column. (There is more discussion on this point on &lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-3976&quot; title=&quot;Support specifying scale and precision with Hive decimal type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HIVE-3976&quot;&gt;&lt;del&gt;HIVE-3976&lt;/del&gt;&lt;/a&gt;, and in particular in the &lt;a href=&quot;https://cwiki.apache.org/confluence/download/attachments/27362075/Hive_Decimal_Precision_Scale_Support.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;functional spec&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;It would be good if we could get some agreement on i) whether this is a good approach for adding new (optional) types to Avro and ii) what the binary encoding should look like. Thoughts?&lt;/p&gt;

&lt;p&gt;In this initial patch I added the decimal subtype to GenericDatumWriter/Reader. I did this since Hive uses generic, but there is a potential compatibility issue where code using a GenericDatumReader receives a BigDecimal instead of a ByteBuffer when reading a new schema with a decimal subtype. Any thoughts on how to tackle this would be gratefully received too.&lt;/p&gt;</comment>
                            <comment id="13942095" author="cutting" created="Thu, 20 Mar 2014 18:26:33 +0000"  >&lt;p&gt;For greatest interoperability we might use strings instead of bytes, with scientific notation.  This would be bigger and slower to parse but would also greatly simplify implementation and usability.  For example, so far as I can tell, Python&apos;s decimal facility does not support a binary constructor, so we&apos;d need to (carefully) implement our own there.  C# has a binary constructor, but it&apos;s an array of ints, not bytes.  And so on.&lt;/p&gt;

&lt;p&gt;Also:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericData#isString() or isBytes() should handle subtypes too, so unions will work;&lt;/li&gt;
	&lt;li&gt;GenericData#induce() should infer decimal subtypes;&lt;/li&gt;
	&lt;li&gt;ReflectData#createSchema should infer decimal subtypes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With regards to the incompatiblity, I don&apos;t see how this breaks an application that&apos;s currently works.  Another part of the application would need to be updated to generate data in the new format, so the Hive part would need to be updated to handle that change, not because of Avro changes alone.  The Avro feature would permit an incompatible change, but wouldn&apos;t create it.  Or am I missing something?&lt;/p&gt;</comment>
                            <comment id="13942398" author="jarcec" created="Thu, 20 Mar 2014 22:12:57 +0000"  >&lt;p&gt;Thank you guys for working on this one! I&apos;m following this JIRA as I would love to see ability to represent decimals in Avro in a way that would work across all the processing engines in Hadoop. I&apos;ve made two small observations that I would like to share. &lt;/p&gt;

&lt;p&gt;1) It seems that the proposal is to serialize the scale with every record (row). I would like to mention that from database perspective the type of a column is always with scale and precision. E.g. the type that Hive or other SQL engines on top Hadoop will store in the file will always be &quot;decimal(5,2)&quot; and never just a &quot;decimal&quot;. Databases do not allows different rows for the same column to have different scale or precision. Hence encoding the scale with every record will contain a lot of redundant information for this use case. I fully understand that Avro being a generic format might want to enable it, but I wanted to point it out explicitly.&lt;/p&gt;

&lt;p&gt;2) I can see that we are serializing only scale and not precision to the disk. I do understand that from storage perspective, this is fully sufficient, however I do see a possible problems with follow up processing. I believe that in order to execute the math in the same way in all the processing engines one need to know the precision as well.  This do not seem to be a problem for projects that do have separate service keeping the metadata (such as Hive and it&apos;s Hive metastore), but I assume that it can become an issue for projects that don&apos;t have that ability (such as Pig). Hence I&apos;m wondering if it would make sense to store the precision in the Avro metadata as well?&lt;/p&gt;</comment>
                            <comment id="13942426" author="busbey" created="Thu, 20 Mar 2014 22:29:48 +0000"  >&lt;p&gt;re: #1, what are the use cases we enable by setting precision and scale on a per-record basis rather than setting it in the schema?&lt;/p&gt;</comment>
                            <comment id="13943156" author="tomwhite" created="Fri, 21 Mar 2014 15:28:49 +0000"  >&lt;p&gt;&amp;gt; (Doug) For greatest interoperability we might use strings instead of bytes, with scientific notation.&lt;/p&gt;

&lt;p&gt;Hive would probably prefer a binary representation for performance, but perhaps others can comment on that.&lt;/p&gt;

&lt;p&gt;Thanks for the pointers on supporting subtypes more fully - I can create another patch for those. Regarding the incompatibility, I was thinking of an application that processes Avro files that it didn&apos;t generate - if it upgraded to the new version of Avro and read a file with a decimal subtype it would receive a BigDecimal when it was only expecting a ByteBuffer.&lt;/p&gt;

&lt;p&gt;&amp;gt; (Jarcec) Databases do not allows different rows for the same column to have different scale or precision.&lt;/p&gt;

&lt;p&gt;The scale and precision specified in the column definition are maximums. My understanding is that decimals with smaller scale and precision may be stored in such columns. For example in Hive  if I have a DECIMAL(5,3) column then 12.4 is stored as &lt;span class=&quot;error&quot;&gt;&amp;#91;124, 1&amp;#93;&lt;/span&gt; as the unscaled int-scale pair (so precision 3, scale 1), and not as &lt;span class=&quot;error&quot;&gt;&amp;#91;12400, 3&amp;#93;&lt;/span&gt; So in effect there are per-record precision and scale values, unless I&apos;m missing something.&lt;/p&gt;

&lt;p&gt;&amp;gt; (Jarcec) I&apos;m wondering if it would make sense to store the precision in the Avro metadata as well?&lt;/p&gt;

&lt;p&gt;Applications could set scale and precision attributes as metadata to describe the (maximum) scale and precision of the decimals written to that field.&lt;/p&gt;

&lt;p&gt;Would that be sufficient? I&apos;m not sure if we want to define and implement a policy for how to handle decimals that don&apos;t fit a max precision/scale in Avro.&lt;/p&gt;</comment>
                            <comment id="13943244" author="cutting" created="Fri, 21 Mar 2014 17:03:11 +0000"  >&lt;p&gt;&amp;gt; Hive would probably prefer a binary representation for performance [ ... ]&lt;/p&gt;

&lt;p&gt;It might be useful to quantify the performance difference, perhaps benchmarking the writing and reading a snappy-compressed file that contains a decimal field represented as either bytes or as a string.&lt;/p&gt;

&lt;p&gt;A faster alternative to a subtype might be to use a record, e.g.:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.Decimal&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;scale&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;},
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;value&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;bytes&quot;&lt;/span&gt;}
]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we still changed GenericData to implement this directly then there would be no overhead and implementation would be easier &amp;amp; faster, since it wouldn&apos;t need a temporary buffer.  It wouldn&apos;t be very useful to implementations that don&apos;t yet know about it, but neither would the binary subtype.  We could add this type to the specification as something that implementations might optimize, just like a subtype.  So this might be something to benchmark too.&lt;/p&gt;

&lt;p&gt;&amp;gt;  if it upgraded to the new version of Avro and read a file with a decimal subtype it would receive a BigDecimal when it was only expecting a ByteBuffer.&lt;/p&gt;

&lt;p&gt;Today if an application using specific or reflect uses BigDecimal then it will be read as BigDecimal, since that&apos;s currently encoded using the schema &lt;/p&gt;
{&quot;type&quot;:&quot;string&quot;, &quot;java-class&quot;:&quot;java.math.BigDecimal&quot;}
&lt;p&gt;.  So the schema would change when they upgrade, but the object would not.  That seems compatible to me.  You?&lt;/p&gt;

&lt;p&gt;If the application is using Generic to write, then BigDecimal will currently fail.&lt;/p&gt;

&lt;p&gt;I assume that existing applications are not currently using &quot;subType&quot;:&quot;decimal&quot;, no application should start receiving BigDecimal that wasn&apos;t before.  If the write path is upgraded before the read path then the application will start seeing bytes where before it saw either BigDecimal or nothing.  This is a potential compatibility problem, but not the one you seem to describe.&lt;/p&gt;</comment>
                            <comment id="13943463" author="rdblue" created="Fri, 21 Mar 2014 19:47:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;i) whether this is a good approach for adding new (optional) types to Avro&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 for the sub-types. I think that&apos;s a good way to provide backward-compat. My only reservation is that calling it a &quot;subType&quot; makes me think there is an &quot;is a&quot; relationship. What about calling it a &quot;logicalType&quot;?&lt;/p&gt;

&lt;p&gt;For existing applications, isn&apos;t compatibility covered by the read schema? If an application isn&apos;t setting the read schema and a file is written with a changed schema, then there isn&apos;t a strong compatibility guarantee. But setting a read schema that doesn&apos;t include the subtype annotation should guarantee compatibility.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What are the use cases we enable by setting precision and scale on a per-record basis rather than setting it in the schema?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The one I came up with is storing decimals with the right number of significant figures. The example on &lt;a href=&quot;https://en.wikipedia.org/wiki/Significance_arithmetic&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;wikipedia&lt;/a&gt; for multiplication is 8.02 * 8.02 = 64.3 (p=3, s=1). BigDecimal will carry out the easiest multiplication and produce 64.3204 (p=6, s=4) and the fixed-scale representation will produce 62.32 (p=4, s=2) with one extra, non-significant figure. But I&apos;m not sure that this is actually something people would (or do) use.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;smaller scale and precision may be stored in such columns&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If it is the case that smaller scales can be stored, then I think we are forced into storing the scale as data.&lt;/p&gt;</comment>
                            <comment id="13943505" author="rdblue" created="Fri, 21 Mar 2014 20:29:17 +0000"  >&lt;p&gt;From looking around at other database docs, it looks like most use a fixed scale (or don&apos;t specify) and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms187746.aspx&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;SQL server&lt;/a&gt; even states that different scales are considered different types. But in &lt;a href=&quot;http://www.postgresql.org/docs/9.1/static/datatype-numeric.html#DATATYPE-NUMERIC-DECIMAL&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;postgres&lt;/a&gt;, the scale is the maximum scale for all values in the column, which may make a case for per-value scales. I think there is enough precedent behind fixing the scale for a column that it&apos;s reasonable to have a type that fixes the scale like this:&lt;/p&gt;
   {&quot;type&quot;:&quot;bytes&quot;, &quot;logicalType&quot;: &quot;decimal&quot;, &quot;scale&quot;: 2}

&lt;p&gt;Then we could include in the specification how to determine the scale from data if it is missing.&lt;/p&gt;</comment>
                            <comment id="13943615" author="cutting" created="Fri, 21 Mar 2014 21:54:46 +0000"  >&lt;p&gt;&amp;gt; If an application isn&apos;t setting the read schema and a file is written with a changed schema, then there isn&apos;t a strong compatibility guarantee. &lt;/p&gt;

&lt;p&gt;In this case, for Java applications that use BigDecimal, upgrading Avro alone will change the schema.  So the writing application&apos;s schema may change without any other change to the application.  That alone may be a compatibility problem.&lt;/p&gt;

&lt;p&gt;BTW, we may also need to remove much of the stringable handling for BigDecimal in SpecificData.  We don&apos;t want both isString() and isBytes() to be true for the same object.  However we do still need to be able to read instances of the old &quot;java-class&quot; schema for BigDecimal, and perhaps even continue to write these.  Ugh.&lt;/p&gt;

&lt;p&gt;I wonder if we instead should use something like serializers, e.g.,:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; TypeMapping&amp;lt;T&amp;gt; {
  &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; isInstance(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; o);
  Schema getSchema();
  void write(T instance, Schema schema, Encoder encoder) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
  T read(Schema schema, Decoder decoder) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
}
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;DecimalMapping &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; TypeMapping&amp;lt;BigDecimal&amp;gt; {
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; scale;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; DecimalMapping(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; scale) { &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.scale = scale; }
  ...
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To opt into using this, you&apos;d do something like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;GenericData data = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData();
data.addTypeMapping(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DecimalMapping(10));
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An application would need to update both its write and read side to start using this.  That way each time we add a feature like this we won&apos;t need to make an incompatible release.&lt;/p&gt;</comment>
                            <comment id="13945416" author="tomwhite" created="Mon, 24 Mar 2014 17:52:01 +0000"  >&lt;p&gt;&amp;gt; I wonder if we instead should use something like serializers&lt;/p&gt;

&lt;p&gt;How about using the existing CustomEncoding class?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;GenericData data = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData();
data.addCustomEncoding(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DecimalEncoding(5, 3));
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13945486" author="cutting" created="Mon, 24 Mar 2014 18:30:08 +0000"  >&lt;p&gt;CustomEncoding is close.  It&apos;s does not have an isInstance() method, since it&apos;s attached to a class via the @AvroEncode annotation.  Mapping from class to encoding is more efficient than via an isInstance() predicate, so we might instead have a getInstanceClass() method.  (This wouldn&apos;t let us use the same mechanism for a different generated record implementation, but that&apos;s probably okay.)  GenericData could have a Map&amp;lt;Class,TypeMapping&amp;gt;.  CustomEncoding might implement TypeMapping and be implemented in terms of the facility added to GenericData?&lt;/p&gt;

&lt;p&gt;Have you considered using a lexicographic-friendly format?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zanopha.com/docs/elen.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.zanopha.com/docs/elen.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That could help if these are ever, e.g., used as MapReduce keys.  Perhaps not a priority.&lt;/p&gt;</comment>
                            <comment id="13946878" author="tomwhite" created="Tue, 25 Mar 2014 18:14:22 +0000"  >&lt;p&gt;Here&apos;s a patch that does roughly what you suggest. I used a name rather than a class, so that the reader can use the schema to see if a custom encoding is needed.&lt;/p&gt;

&lt;p&gt;BTW I think &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1469&quot; title=&quot;Support interchangeable object models&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1469&quot;&gt;AVRO-1469&lt;/a&gt; is related. Would the approach here satisfy the requirements of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1469&quot; title=&quot;Support interchangeable object models&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1469&quot;&gt;AVRO-1469&lt;/a&gt;? &lt;/p&gt;

&lt;p&gt;&amp;gt; Have you considered using a lexicographic-friendly format?&lt;/p&gt;

&lt;p&gt;I had a look, but I don&apos;t think that&apos;s a requirement for Hive for example.&lt;/p&gt;</comment>
                            <comment id="13946973" author="xuefuz" created="Tue, 25 Mar 2014 18:57:41 +0000"  >&lt;p&gt;Looking the patch, the schema and data encoding look good to me. One minor thought for consideration though, is that (precision, scale), when mentioned at the schema level, implies &quot;max&quot;. Thus, the property names could be just &quot;precision&quot; and &quot;scale&quot;. Very insignificant though.&lt;/p&gt;</comment>
                            <comment id="13948407" author="cutting" created="Wed, 26 Mar 2014 20:26:58 +0000"  >&lt;p&gt;Tom, this is looking good.  A few issues:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Changing the CustomEncoding API makes this incompatible.  Also, reflect is perhaps not the appropriate package for this.  So, even though the API is almost identical to CustomEncoding, it might be preferable to add a new one, like RecordMapping.&lt;/li&gt;
	&lt;li&gt;It won&apos;t work to put these in unions without somehow modifying GenericData#getSchemaName.  We should probably extend isRecord() to call some isRecordMapped(Object) predicate.&lt;/li&gt;
	&lt;li&gt;Do we need a &quot;CustomEncoding&quot; schema attribute?  We need an isRecordMapped(Schema) predicate, but we might just key off of Schema#getFullName().  In the specification we can add a list of records that implementations might specially handle, like org.apache.avro.Decimal.  Adding an attribute seems redundant.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13954893" author="tomwhite" created="Mon, 31 Mar 2014 01:26:13 +0000"  >&lt;p&gt;Thanks for the feedback Doug. I&#8217;ve addressed these issues in the latest patch.&lt;/p&gt;

&lt;p&gt;Thanks for taking a look Xuefu. I wanted to be explicit about the fact precision and scale on the schema are maximum values, not the actual (fixed) values, since there has been some confusion on this (during the discussion here). I can change it though if there&apos;s consensus that the &#8220;maximum&#8221; qualifier is redundant.&lt;/p&gt;</comment>
                            <comment id="13955862" author="xuefuz" created="Mon, 31 Mar 2014 23:20:26 +0000"  >&lt;blockquote&gt;
&lt;p&gt;The scale and precision specified in the column definition are maximums. My understanding is that decimals with smaller scale and precision may be stored in such columns. For example in Hive if I have a DECIMAL(5,3) column then 12.4 is stored as &lt;span class=&quot;error&quot;&gt;&amp;#91;124, 1&amp;#93;&lt;/span&gt; as the unscaled int-scale pair (so precision 3, scale 1), and not as &lt;span class=&quot;error&quot;&gt;&amp;#91;12400, 3&amp;#93;&lt;/span&gt; So in effect there are per-record precision and scale values, unless I&apos;m missing something.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry for being late on this. While it&apos;s possible that a column of type decimal might have different scales from row to row, I&apos;m not sure if there is any use case for that. At least, majority of use cases is that all rows will have the same scale. So for majority of use cases, storage efficiency will suffer a little for storing scale on per row basis. Most of time, same application (such as Hive AvroSerde) will be used to write/read the data, so the way data is stored can be controlled. Of course, storing scale per row is more generic. If that&apos;s case, the need for maxPrecision/maxScale at schema is less meaningful, as consumer of the decimal data will need and be able to figure out the precision/scale on a per-row basis.&lt;/p&gt;

&lt;p&gt;If we do choose to storing scale per row, I&apos;m wondering if byte instead of int can be used as the type, saving some storage scale.&lt;/p&gt;
</comment>
                            <comment id="13956555" author="busbey" created="Tue, 1 Apr 2014 14:31:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;If we do choose to storing scale per row, I&apos;m wondering if byte instead of int can be used as the type, saving some storage scale.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Presuming we store the scale with &lt;a href=&quot;http://avro.apache.org/docs/current/spec.html#binary_encode_primitive&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;standard Avro primitives&lt;/a&gt;, there is no byte type. And if the values are normally in the range of byte, then we&apos;ll save on some space with the normal variable length zig-zag encoding.&lt;/p&gt;</comment>
                            <comment id="13956582" author="tomwhite" created="Tue, 1 Apr 2014 14:50:32 +0000"  >&lt;blockquote&gt;&lt;p&gt;Most of time, same application (such as Hive AvroSerde) will be used to write/read the data, so the way data is stored can be controlled.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree, but as far as I can tell Hive and MySQL do store per-row scale values. E.g. &lt;a href=&quot;https://github.com/apache/hive/blob/trunk/serde/src/java/org/apache/hadoop/hive/serde2/io/HiveDecimalWritable.java#L113&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/hive/blob/trunk/serde/src/java/org/apache/hadoop/hive/serde2/io/HiveDecimalWritable.java#L113&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another argument for storing the scale in the data is that if you have scale as an Avro schema property, then you change the values of the data by providing a different read schema since the schema property is ignored during Avro schema resolution (&lt;a href=&quot;http://avro.apache.org/docs/1.7.6/spec.html#Schema+Resolution&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/docs/1.7.6/spec.html#Schema+Resolution&lt;/a&gt;). Compare this to Avro fixed where you can&apos;t change the size field in a read schema.&lt;/p&gt;</comment>
                            <comment id="13956601" author="cutting" created="Tue, 1 Apr 2014 15:03:27 +0000"  >&lt;p&gt;Tom, this is looking great.  A few questions/concerns:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;a few new public or protected methods need javadoc&lt;/li&gt;
	&lt;li&gt;should we add a constant or method that returns the decimal schema?&lt;/li&gt;
	&lt;li&gt;should we add this schema to the specification document?&lt;/li&gt;
	&lt;li&gt;as a test of this new abstraction, will it be easy to fix &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-739&quot; title=&quot;Add Date/Time data types&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-739&quot;&gt;&lt;del&gt;AVRO-739&lt;/del&gt;&lt;/a&gt; using it?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13956717" author="xuefuz" created="Tue, 1 Apr 2014 16:24:39 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I can tell Hive and MySQL do store per-row scale values. E.g. &lt;a href=&quot;https://github.com/apache/hive/blob/trunk/serde/src/java/org/apache/hadoop/hive/serde2/io/HiveDecimalWritable.java#L113&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/hive/blob/trunk/serde/src/java/org/apache/hadoop/hive/serde2/io/HiveDecimalWritable.java#L113&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is true. This class is used as default LazySerde in Hive. However, other Serde is free to choose its implementation.&lt;/p&gt;

&lt;p&gt;I&apos;m on board with storing scale per row. My only concern is that Hive ParquetSerde is choosing not to store scale per row. Of course, this belongs to a different discussion.&lt;/p&gt;</comment>
                            <comment id="13957671" author="tomwhite" created="Wed, 2 Apr 2014 14:05:48 +0000"  >&lt;p&gt;Here&apos;s a new patch with javadoc and a section in the spec about record mappings.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;should we add a constant or method that returns the decimal schema?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You can get the decimal schema with &lt;tt&gt;new DecimalRecordMapping().getSchema()&lt;/tt&gt;, or &lt;tt&gt;new DecimalRecordMapping(5, 3).getSchema()&lt;/tt&gt; - is that sufficient?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;as a test of this new abstraction, will it be easy to fix &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-739&quot; title=&quot;Add Date/Time data types&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-739&quot;&gt;&lt;del&gt;AVRO-739&lt;/del&gt;&lt;/a&gt; using it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, it should be. I&apos;ll try it out and report back.&lt;/p&gt;</comment>
                            <comment id="13958515" author="cutting" created="Thu, 3 Apr 2014 04:56:51 +0000"  >&lt;p&gt;+1.  This looks great to me!  Thanks!&lt;/p&gt;</comment>
                            <comment id="13959852" author="tomwhite" created="Fri, 4 Apr 2014 10:30:38 +0000"  >&lt;p&gt;Here&apos;s a patch (not for commit) of what a Unix Epoch mapping might look like as discussed in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-739&quot; title=&quot;Add Date/Time data types&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-739&quot;&gt;&lt;del&gt;AVRO-739&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13959853" author="jira-bot" created="Fri, 4 Apr 2014 10:33:03 +0000"  >&lt;p&gt;Commit 1584605 from tomwhite@apache.org in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1584605&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1584605&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1402&quot; title=&quot;Support for DECIMAL type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1402&quot;&gt;&lt;del&gt;AVRO-1402&lt;/del&gt;&lt;/a&gt;. Support for DECIMAL type (as a record mapping).&lt;/p&gt;</comment>
                            <comment id="13959855" author="tomwhite" created="Fri, 4 Apr 2014 10:36:20 +0000"  >&lt;p&gt;I just committed this. Thanks for all the feedback and reviews.&lt;/p&gt;</comment>
                            <comment id="13959889" author="hudson" created="Fri, 4 Apr 2014 11:44:48 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #448 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/448/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/448/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1402&quot; title=&quot;Support for DECIMAL type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1402&quot;&gt;&lt;del&gt;AVRO-1402&lt;/del&gt;&lt;/a&gt;. Support for DECIMAL type (as a record mapping). (tomwhite: rev 1584605)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/doc/src/content/xdocs/spec.xml&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/DecimalRecordMapping.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/RecordMapping.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13962954" author="tomwhite" created="Tue, 8 Apr 2014 13:27:15 +0000"  >&lt;p&gt;There has been some further (offline) discussion about whether it would be possible to store the scale in the Avro schema, and not in the data for efficiency reasons. Something like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{
  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&quot;record&#8221;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&#8221;org.apache.avro.FixedDecimal&#8221;,
  &quot;fields&#8221;: [{
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&quot;value&#8221;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&#8221;bytes&quot;
  }],
  &lt;span class=&quot;code-quote&quot;&gt;&quot;scale&quot;&lt;/span&gt;:&quot;2&#8221;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;precision&quot;&lt;/span&gt;:&#8221;4&quot;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the implementation committed here the name does not uniquely determine the RecordMapping so a FixedDecimal(4, 2) has a different RecordMapping to a FixedDecimal(3, 0). GenericData has a map of name to RecordMappings, so org.apache.avro.FixedDecimal would map to either FixedDecimalRecordMapping(4, 2) or FixedDecimalRecordMapping(3, 0), but not both.&lt;/p&gt;

&lt;p&gt;We could solve this problem by having a stateless FixedDecimalRecordMapping and having the read and write methods pass through the record schema to get the scale. However, consider the case where there are multiple decimals (with different scales) in a single schema. Since you can&#8217;t redefine a type multiple times (&lt;a href=&quot;http://avro.apache.org/docs/1.7.6/spec.html#Names&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/docs/1.7.6/spec.html#Names&lt;/a&gt;), the first one serves as the definition, and later ones are just references:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;rec&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;dec1&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.FixedDecimal&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;value&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;bytes&quot;&lt;/span&gt;}],&lt;span class=&quot;code-quote&quot;&gt;&quot;scale&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;2&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;precision&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;4&quot;&lt;/span&gt;}},
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;dec2&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.FixedDecimal&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;precision&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;3&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;scale&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;0&quot;&lt;/span&gt;}
]} 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When GenericDatumReader/Writer is processing dec2, the value of scale seen is 2, not 0, since the read/write method sees the record schema, not the field-level schema. I can&#8217;t see a simple way around this.&lt;/p&gt;

&lt;p&gt;Note that in the Decimal schema committed in this JIRA we allow maxPrecision and maxScale values to be specified as JSON properties that are not interpreted by Avro. E.g.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;rec&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;dec1&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&#8221;org.apache.avro.Decimal&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;fields&lt;span class=&quot;code-quote&quot;&gt;&quot;:[{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;scale&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;},{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;value&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;bytes&lt;span class=&quot;code-quote&quot;&gt;&quot;}],&quot;&lt;/span&gt;maxPrecision&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;4&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;maxScale&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;2&quot;}},
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;dec2&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.Decimal&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;maxPrecision&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;3&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;maxScale&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;0&quot;&lt;/span&gt;}
]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As it stands an application using this extra metadata would have to be careful to read the JSON properties either from the field (if they are present there) or the org.apache.avro.Decimal record type. This might be something we improve - e.g. by only having the metadata as a field-level properties, not as a part of the record definition. That would work for Hive.&lt;/p&gt;</comment>
                            <comment id="13963029" author="tomwhite" created="Tue, 8 Apr 2014 14:26:43 +0000"  >&lt;p&gt;There have been objections to the approach implemented here on the basis that there&#8217;s no a clear use case for storing decimals with different scales in the same field. So here&#8217;s another idea. Rather than adding new types into GenericData, provide helper code to make it easy for applications to use decimals with some agreed upon schemas. To avoid the problems with unique names we could go back to the logical type approach:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;bytes&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;logicalType&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;decimal&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;scale&quot;&lt;/span&gt;:&quot;2&#8221;} 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We&#8217;d then have code like&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;// write
&lt;/span&gt;Schema schema = DecimalHelper.schema(2);
BigDecimal decimal = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BigDecimal(&lt;span class=&quot;code-quote&quot;&gt;&quot;12.45&quot;&lt;/span&gt;);
GenericDatumWriter&amp;lt;ByteBuffer&amp;gt; writer = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt;
    GenericDatumWriter&amp;lt;ByteBuffer&amp;gt;(schema, GenericData.get());
writer.write(DecimalHelper.toByteBuffer(decimal), encoder);

&lt;span class=&quot;code-comment&quot;&gt;// read
&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; scale = DecimalHelper.getScale(schema);
GenericDatumReader&amp;lt;ByteBuffer&amp;gt; reader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt;
  GenericDatumReader&amp;lt;ByteBuffer&amp;gt;(schema, schema, GenericData.get());
ByteBuffer buffer = reader.read(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, decoder);
BigDecimal readDecimal = DecimalHelper.fromByteBuffer(buffer, scale);  
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we did this we would revert the patch in this JIRA, since there&#8217;s no benefit in having both approaches. Date/time could be implemented in the same way.&lt;/p&gt;

&lt;p&gt;Also, the work on interchangeable memory-models (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1469&quot; title=&quot;Support interchangeable object models&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1469&quot;&gt;AVRO-1469&lt;/a&gt;) might provide a more flexible approach for supporting more in-memory types (like BigDecimal) in the future.&lt;/p&gt;</comment>
                            <comment id="13963146" author="rdblue" created="Tue, 8 Apr 2014 16:32:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;There have been objections to the approach implemented here on the basis that there&#8217;s no a clear use case for storing decimals with different scales in the same field.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think there is a use case that avro needs to care about: `BigDecimal` is used to avoid floating point error, but not just for money where scale is almost always 2. If I&apos;m storing precise measurements, I could end up with different incoming scales from different equipment used to take the measurement. This works just fine up until the `BigDecimal` is stored in avro, at which point avro would throw an exception and force the caller to mutate the data, if avro forces data points to have the same scale.&lt;/p&gt;

&lt;p&gt;There are real-world cases where this happens. GPS data comes to mind, where newer receivers have better location resolution and it&apos;s important to keep the most precise measurement taken.&lt;/p&gt;</comment>
                            <comment id="13963180" author="nongli" created="Tue, 8 Apr 2014 17:06:50 +0000"  >&lt;p&gt;Ryan, your example seems like a schema evolution use case. Each file would have a fixed scale and we&apos;d resolve the different schemas. Is that that compelling to have the different receivers write to the same file?&lt;/p&gt;</comment>
                            <comment id="13963200" author="rdblue" created="Tue, 8 Apr 2014 17:28:26 +0000"  >&lt;p&gt;I don&apos;t think evolution would cover the use case because the file format would then require separate files for measurements where the only difference is the resolution of the measurement. That wouldn&apos;t work for cases where these are coming in from multiple devices simultaneously, that won&apos;t be upgraded at the same time. I agree we should support the case where all of the scales are the same, but I don&apos;t think it&apos;s correct for avro to force that to be the case.&lt;/p&gt;</comment>
                            <comment id="13963209" author="nongli" created="Tue, 8 Apr 2014 17:39:41 +0000"  >&lt;p&gt;I see your use case as the same as going from int -&amp;gt; long or float -&amp;gt; double. Can you help me understand why it&apos;s different? &lt;/p&gt;</comment>
                            <comment id="13963257" author="rdblue" created="Tue, 8 Apr 2014 18:12:52 +0000"  >&lt;p&gt;No problem. Going from int to long or float to double is increasing the precision, which is fine. But changing the scale is actually changing the data.&lt;/p&gt;

&lt;p&gt;Say I have measurements coming in, and over time I&apos;m updating the platform to get measurements with higher resolution. Using BigDecimal is the right choice because I want to be able to calculate the margin of error, so I need to know how many figures are significant. If we fix the scale at the resolution of the initial measurements, then the higher-resolution measurements are lost because I have to discard digits to get to the same scale (12.008 becomes 12.01). But if I start with a higher resolution, scale to 4 digits, then I have to store a separate value that says how many of those are significant (12.0080 is really 12.008). In other words: for measurements, scale matters. That&apos;s why I&apos;m not using floating point because I don&apos;t want an approximation that is close, but not quite accurate:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&amp;gt;&amp;gt; BigDecimal.&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt;(12.100).to_s
=&amp;gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;12.0999999999999996447286321199499070644378662109375&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we were to evolve the schema from scale=2 to scale=4, how do I know which values were accurate to 2 decimals and which were accurate to 4? If all BigDecimal values produced by the new schema had the read-time scale but were stored with different scales, then the file format would be changing data. BigDecimal(12.01) != BigDecimal(12.0100). For evolution with different scales, the maximum scale can increase, but we still have to return the scale the data was written with. For fixed-scale schemas, I don&apos;t think we should allow the scale to evolve because programs should expect objects with the fixed scale.&lt;/p&gt;</comment>
                            <comment id="13963738" author="skye" created="Wed, 9 Apr 2014 02:59:47 +0000"  >&lt;p&gt;I strongly prefer the logical type approach, rather than a record mapping, due to the problem with multiple record mapping types in the same schema. Even if we stick with storing the scale in the data and not the schema, I don&apos;t think we should go down the record mapping path at all since it precludes any parameterized types, i.e. types that include schema metadata. We may want to introduce other types in the future that store extra metadata (e.g. a time with a timezone), and it seems unacceptable to not be able to include multiple instances of the same type with different metadata in the schema.&lt;/p&gt;

&lt;p&gt;I&apos;ve written a micro-benchmark to get an idea of the performance of storing scale in the data vs. only in the schema. I see pretty big differences in performance depending on whether I compile with gcc or clang, so I don&apos;t want to give definitive numbers yet, but I&apos;m seeing perf hits of between 5-30% depending on how many different scales are stored in the data (compared to storing a single scale in the schema). If we feel nailing down this performance difference is important, I can dig deeper and try to determine what the most &quot;representative&quot; case is.&lt;/p&gt;

&lt;p&gt;Talking offline with Ryan and others, we concluded that while it&apos;s possible to imagine scenarios where per-value scales are useful, it&apos;s not likely to be a concern in the large majority of cases (Ryan, please let me know if I&apos;m mischaracterizing what you said). Given that we can&apos;t think of a very compelling use case for storing scales in the data, I think we should store the scales in the schema, using the logical type schema Tom suggested above. There&apos;s a definite performance impact, and keeping the current implementation adds complexity for applications that do not take advantage of the flexibility. I also think there&apos;s the possibility of confusing users who may decide to write multiple-scale values to the same file, only to learn later they can&apos;t easily be accessed as such.&lt;/p&gt;

&lt;p&gt;tl;dr: I like this one:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;{&quot;type&quot;:&quot;bytes&quot;, &quot;logicalType&quot;:&quot;decimal&quot;, &quot;scale&quot;:&quot;2&#8221;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13964337" author="tomwhite" created="Wed, 9 Apr 2014 16:23:49 +0000"  >&lt;p&gt;I think the unique name limitation is a problem. At this point I think we should revert this patch, establish some shared logical type definitions (for decimal, date/time) that Hive can start using, then once they have become established look at how to support them better through the Avro API as a part of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1469&quot; title=&quot;Support interchangeable object models&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1469&quot;&gt;AVRO-1469&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We could also add them to the Avro spec, and also describe (and enforce in the implementation) the schema resolution rules. Something like, both the reader&#8217;s and writer&#8217;s schema&apos;s logicalTypes must match. Then for each logical type have further rules, e.g. scale and precision must match for decimal.&lt;/p&gt;</comment>
                            <comment id="13964588" author="cutting" created="Wed, 9 Apr 2014 19:37:43 +0000"  >&lt;p&gt;&amp;gt; At this point I think we should revert this patch ...&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13964840" author="jarcec" created="Thu, 10 Apr 2014 00:12:22 +0000"  >&lt;p&gt;I really like the idea of the logical types as that concept can be easily reused for some other new types (such as timestamp, ...).&lt;/p&gt;</comment>
                            <comment id="13965206" author="jira-bot" created="Thu, 10 Apr 2014 10:35:05 +0000"  >&lt;p&gt;Commit 1586265 from tomwhite@apache.org in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1586265&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1586265&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Revert r1584605. &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1402&quot; title=&quot;Support for DECIMAL type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1402&quot;&gt;&lt;del&gt;AVRO-1402&lt;/del&gt;&lt;/a&gt;. Support for DECIMAL type (as a record mapping).&lt;/p&gt;</comment>
                            <comment id="13965259" author="tomwhite" created="Thu, 10 Apr 2014 11:51:13 +0000"  >&lt;p&gt;Here&apos;s what the spec for logical types might look like.&lt;/p&gt;</comment>
                            <comment id="13965808" author="skye" created="Thu, 10 Apr 2014 20:36:00 +0000"  >&lt;p&gt;This looks great Tom! If I understand correctly, this also allows for a single logical type to have multiple possible encodings; for example, we could someday add an alternate decimal encoding that is backed by &quot;fixed&quot; rather than &quot;bytes&quot;. One question: what do you mean by &quot;Language implementations may choose to represent logical types with an appropriate native type, although this is not required&quot;? Is this referring to logical types not explicitly defined in the spec?&lt;/p&gt;</comment>
                            <comment id="13965862" author="rdblue" created="Thu, 10 Apr 2014 21:17:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;&quot;Language implementations may choose to represent logical types with an appropriate native type, although this is not required&quot;? Is this referring to logical types not explicitly defined in the spec?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this defines backward-compatibility. It is fine if an implementation returns the underlying type (e.g. bytes) rather than translating to an object representation (e.g., BigDecimal). That way, this doesn&apos;t require implementation changes right away and we can determine the best way to transition to returning logical type objects.&lt;/p&gt;

&lt;p&gt;For types not defined in this spec, I think the library should support reading types by returning the underlying type&apos;s object representation. But to avoid incompatibilities, writers should reject any logical type annotations that are not defined in the spec.&lt;/p&gt;</comment>
                            <comment id="13965887" author="skye" created="Thu, 10 Apr 2014 21:41:15 +0000"  >&lt;p&gt;Ah, makes sense. Thanks for the clarification.&lt;/p&gt;

&lt;p&gt;I think we should allow writing unspecified logical types, so that new logical types can be implemented in the application when the spec is updated without upgrading the library.&lt;/p&gt;</comment>
                            <comment id="13966052" author="rdblue" created="Fri, 11 Apr 2014 00:15:05 +0000"  >&lt;blockquote&gt;&lt;p&gt;A logical type is always encoded in exactly the same way as the equivalent Avro type.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Could we reword this to &quot;A logical type is always serialized using its underlying Avro type.&quot; I&apos;d like to avoid confusion because some logical types (like decimal) specify the &quot;encoding&quot; that determines how to convert between the object representation and the underlying Avro type.&lt;/p&gt;

&lt;p&gt;Last, I think that we should add that fixed may also be annotated with a decimal logical type, but I don&apos;t want to hold up this issue if people disagree &amp;#8211; in that case we should discuss adding it in a separate issue/commit.&lt;/p&gt;</comment>
                            <comment id="13966159" author="hudson" created="Fri, 11 Apr 2014 02:54:09 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #450 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/450/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/450/&lt;/a&gt;)&lt;br/&gt;
Revert r1584605. &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1402&quot; title=&quot;Support for DECIMAL type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1402&quot;&gt;&lt;del&gt;AVRO-1402&lt;/del&gt;&lt;/a&gt;. Support for DECIMAL type (as a record mapping). (tomwhite: rev 1586265)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/doc/src/content/xdocs/spec.xml&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/DecimalRecordMapping.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/RecordMapping.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13966795" author="cutting" created="Fri, 11 Apr 2014 17:06:49 +0000"  >&lt;p&gt;&amp;gt; fixed may also be annotated with a decimal logical type&lt;/p&gt;

&lt;p&gt;Seems like a good idea.  Let&apos;s add it to the spec if we implement it in this patch, otherwise in a separate issue.&lt;/p&gt;</comment>
                            <comment id="13967214" author="xuefuz" created="Fri, 11 Apr 2014 22:59:09 +0000"  >&lt;blockquote&gt;
&lt;p&gt;precision, a JSON integer representing the (maximum) precision of decimals stored in this type (optional)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Looking at the spec, I&apos;m wondering what&apos;s the precision if it&apos;s not specified in the type definition. Shouldn&apos;t we have a default value like scale?&lt;/p&gt;

&lt;p&gt;When we define a column of decimal type w/o giving precision/scale In a DB such as MySQL, &quot;decimal&quot; is the same as &quot;decimal(10)&quot; and &quot;decimal(10,0)&quot;.&lt;/p&gt;

&lt;p&gt;While precision isn&apos;t required to reconstruct the data, it&apos;s important for metadata operations. For instance, what&apos;s the type of &quot;d1+d2&quot; where d1 and d2 are two decimal columns? Without knowing precision and scale of both d1 and d2, we will not be able to determine the result metadata for this calculation.&lt;/p&gt;

&lt;p&gt;Thus, I suggest we either have a default value (such as 10) as we do for scale, or make precision a required attribute. The former seems more reasonable.&lt;/p&gt;</comment>
                            <comment id="13968540" author="rdblue" created="Mon, 14 Apr 2014 17:16:54 +0000"  >&lt;p&gt;This patch updates the last patch from Tom. It adds:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;A minor clarification to the logical type encoding&lt;/li&gt;
	&lt;li&gt;That readers should ignore unknown logical types and use the underlying avro type&lt;/li&gt;
	&lt;li&gt;Fixed may be annotated with decimal, but this limits the maximum precision&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13968559" author="rdblue" created="Mon, 14 Apr 2014 17:38:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we should allow writing unspecified logical types, so that new logical types can be implemented in the application when the spec is updated without upgrading the library.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For now, I&apos;ve just updated the spec for how readers should behave, not writers. This will probably depend on the level of support we end up building into avro vs. on top of the format. Right now with no implementation support, there is little need to update the library just to get a new version of the spec with a type. But in the future, we may have consistency checks on logical types (like the parquet implementation is adding) so we can revisit this at that point.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I suggest we either have a default value (such as 10) as we do for scale, or make precision a required attribute&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the most reasonable implementation for a default precision is either 9 (fits in 4 bytes) or 18 (fits in 8 bytes), or the maximum number of digits that can be stored in a fixed array. (I think MySQL&apos;s default is 10 because it is based on a different encoding.) Because the maximum precision varies with the length of the fixed array, but that length can&apos;t be evolved, I think that this should be required rather than defaulted. That way, users must specify the expected maximum precision and we can validate that their expectation is correct, before writing data.&lt;/p&gt;</comment>
                            <comment id="13968563" author="rdblue" created="Mon, 14 Apr 2014 17:41:37 +0000"  >&lt;p&gt;Updated decimal spec:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Change precision to required&lt;/li&gt;
	&lt;li&gt;Fix maximum precision calculation (account for sign bit)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13968668" author="rdblue" created="Mon, 14 Apr 2014 18:51:40 +0000"  >&lt;p&gt;I accidentally uploaded a bad patch, this one has the most recent changes that were missing from #3.&lt;/p&gt;</comment>
                            <comment id="13968708" author="xuefuz" created="Mon, 14 Apr 2014 19:23:26 +0000"  >&lt;p&gt;bq, Because the maximum precision varies with the length of the fixed array, but that length can&apos;t be evolved, I think that this should be required rather than defaulted.&lt;/p&gt;

&lt;p&gt;This seemingly suggests that for Avro decimal, the metadata has to match exactly the data, which isn&apos;t  what Hive assumes. It&apos;s perfectly fine for Hive to read data column from a file specified with schema decimal(5, 2) into a table column specified with a schema decimal(4,1). In another word, data conversion is possible when data and metadata don&apos;t match. Since Avro data and metadata are separate, mismatch is possible regardless.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure if Avro wants to enforce this, but I&apos;d just like to point this out.&lt;/p&gt;</comment>
                            <comment id="13968798" author="rdblue" created="Mon, 14 Apr 2014 20:26:22 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=xuefuz&quot; class=&quot;user-hover&quot; rel=&quot;xuefuz&quot;&gt;Xuefu Zhang&lt;/a&gt;, what I&apos;m trying to say is that it&apos;s an error if the underlying type cannot fit the precision the user expects. And because that underlying type can&apos;t be changed, we should avoid mistakes by making the precision required so we can check as soon as possible and before data is written.&lt;/p&gt;

&lt;p&gt;To your point about changing the value to fit the storage, that may be fine for Hive but I think a data storage format shouldn&apos;t change the data. Storing a decimal(5,2) in a decimal(4,1) discards data and requires a rounding policy, so it should be treated as an error if Avro is handling the encoding. If Hive is encoding the decimal, then the decision is left up to Hive.&lt;/p&gt;</comment>
                            <comment id="13968962" author="xuefuz" created="Mon, 14 Apr 2014 22:53:59 +0000"  >&lt;p&gt;Thanks for the clarification, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;. That makes sense.&lt;/p&gt;

&lt;p&gt;Speaking of enforcement, I am curious about how much Avro is able to validate against the spec. For instance, the latest spec requires bigendian for encoding, but decimal data given to Avro to store by the application is in terms of bytes, and I assume that Avro isn&apos;t able to find out the endianness. Other area of rules, such as scale should be less than or equal to precision, or scale should be positive, isn&apos;t present in the spec. I guess the bigger question is whether or what validation will be enforced by Avro.Or it&apos;s completely up to the application, and the spec is more of a guideline.&lt;/p&gt;</comment>
                            <comment id="13968981" author="rdblue" created="Mon, 14 Apr 2014 23:10:51 +0000"  >&lt;p&gt;The rules that can be enforced, like consistent metadata (scale &amp;lt;= precision) should be checked at write time eventually, but the fallback is to ignore the logical type annotation because it is always okay to return the underlying avro type (I&apos;ll add this to the spec). For the decimal encoding, we can&apos;t check that the bytes were encoded as big-endian, but I&apos;m less concerned here because this isn&apos;t a user error, it would be a programming error.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Other area of rules, such as scale should be less than or equal to precision, or scale should be positive, isn&apos;t present in the spec&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You&apos;re right. I&apos;ll add these rules.&lt;/p&gt;</comment>
                            <comment id="13968999" author="rdblue" created="Mon, 14 Apr 2014 23:23:35 +0000"  >&lt;p&gt;Updates:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Added that invalid logical types should be ignored.&lt;/li&gt;
	&lt;li&gt;Added that precision must be &amp;gt; 0&lt;/li&gt;
	&lt;li&gt;Added 0 &amp;lt;= scale &amp;lt;= precision&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13969022" author="xuefuz" created="Mon, 14 Apr 2014 23:53:35 +0000"  >&lt;p&gt;Since the logical type approach proposed here isn&apos;t really providing a native type for decimal in Avro, it seems a little stretching when trying to accommodate decimal concepts. I understand the intention of providing interoperability between applications for decimal data, but from the point of view at storage layer, it shouldn&apos;t care. All it needs to provide the capability of annotating the binary type to the application so that the application can annotate whatever it needs, such as decimal/precision for decimal, timezone for datatime, etc. It&apos;s up to the application to do any validation. This certainly leaves interoperability to applications, but it relieves Avro from enforcing whatever it cannot guarantee anyway.&lt;/p&gt;

&lt;p&gt;Thus, I&apos;d think that there are two possible approaches, one at each end:&lt;br/&gt;
1. provide native type decimal in Avro, which can provide interoperability.&lt;br/&gt;
2. provide just annotation capability for binary type, and leaves everything else to the application.&lt;/p&gt;

&lt;p&gt;The proposal here seems sit in the middle of the two, which makes me think twice when deciding if it&apos;s the best.&lt;/p&gt;</comment>
                            <comment id="13969061" author="rdblue" created="Tue, 15 Apr 2014 00:27:22 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=xuefuz&quot; class=&quot;user-hover&quot; rel=&quot;xuefuz&quot;&gt;Xuefu Zhang&lt;/a&gt;, you&apos;re right that this is between those two approaches. By working on the specification now, we&apos;re tackling the important part for interoperability, and leaving the details of Avro&apos;s implementation until later. This allows us to build decimal support in parallel, because we can all agree on how the encoding works and shouldn&apos;t be blocked on the Avro implementation details.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;... relieves Avro from enforcing whatever it cannot guarantee anyway.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What do you mean? It&apos;s normal for a spec to require something that it can&apos;t guarantee. If you decide not to put an IP address in network-byte-order, for example, nothing &quot;enforces&quot; the rule &amp;#8211; but your packets go somewhere other than the intended address. Decimal is similar: everyone will interpret the bytes as big-endian two&apos;s complement. I think Avro (and similarly, parquet) is the right place for this spec because it is where the data resides. Otherwise, Pig could ignore Hive&apos;s implementation and build a competing encoding scheme. Putting this in Avro means there is only one correct way to share decimal numbers in Avro.&lt;/p&gt;</comment>
                            <comment id="13969109" author="xuefuz" created="Tue, 15 Apr 2014 01:14:23 +0000"  >&lt;p&gt;Fair enough. I just liked to put all the options on the table, and the proposal sounds like a reasonable compromise. Let&apos;s proceed then.&lt;/p&gt;

&lt;p&gt;A minor question: do we put upper bounds for the precision/scale?&lt;/p&gt;</comment>
                            <comment id="13969637" author="rdblue" created="Tue, 15 Apr 2014 15:47:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;D&amp;#93;&lt;/span&gt;o we put upper bounds for the precision/scale?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The scale is bounded by the precision, which is bounded by the storage array&apos;s length. If the underlying type is bytes then there is no length, but the precision is required so there must be a self-imposed upper bound. We could mandate something like 38 (16 bytes), but I don&apos;t think this is really necessary.&lt;/p&gt;</comment>
                            <comment id="13970093" author="cutting" created="Tue, 15 Apr 2014 21:45:08 +0000"  >&lt;p&gt;The changes to the spec look fine, but I&apos;d prefer we have an implementation too before we commit.  In general I prefer we implement new features in at least one language before we add them to the specification, as often unforeseen issues arise during implementation that can impact the specification.&lt;/p&gt;</comment>
                            <comment id="13970299" author="rdblue" created="Wed, 16 Apr 2014 01:12:29 +0000"  >&lt;p&gt;Here is a patch with a basic implementation of the logical type enforcement in the Schema. It isn&apos;t quite done, but it is working and I wanted to get something out for feedback as soon as possible. Please let me know if this doesn&apos;t look right!&lt;/p&gt;

&lt;p&gt;Changes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Add a LogicalType class, with &quot;decimal&quot; and &quot;fromJsonNode&quot; static factory methods&lt;/li&gt;
	&lt;li&gt;Add setLogicalType and getLogicalType to Schema. The setter calls &quot;validate&quot; and only sets a logical type if it is valid for the schema.&lt;/li&gt;
	&lt;li&gt;Update the parsing code to check for &quot;logicalType&quot; and use &quot;fromJsonNode&quot; to deserialize. Falls back to property representation if invalid.&lt;/li&gt;
	&lt;li&gt;Add private method &quot;writeLogicalType&quot; to Schema and call when properties are written to ensure logical types are in written Schemas.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Still to do:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Update equals and hashCode&lt;/li&gt;
	&lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13970302" author="rdblue" created="Wed, 16 Apr 2014 01:14:16 +0000"  >&lt;p&gt;I&apos;ve pushed a branch to github, which may be more readable: &lt;a href=&quot;https://github.com/rdblue/avro/compare/apache:trunk...logical-types&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/rdblue/avro/compare/apache:trunk...logical-types&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13970408" author="cutting" created="Wed, 16 Apr 2014 04:23:30 +0000"  >&lt;p&gt;Does this need to be in Schema.java? That class is already way too big. Might it instead be in LogicalType.java, with a subclass DecimalType?&lt;/p&gt;

&lt;p&gt;Also, the implementation needs to read and write Decimal instances, right?&lt;/p&gt;</comment>
                            <comment id="13971615" author="jarcec" created="Wed, 16 Apr 2014 16:27:52 +0000"  >&lt;p&gt;Even though that code changes are supporting the logical types introduced here, they seem quite independent on each other. Hence I&apos;m wondering if it would make sense to use this JIRA for committing the spec changes and do the implementation in follow up JIRA?&lt;/p&gt;</comment>
                            <comment id="13971638" author="rdblue" created="Wed, 16 Apr 2014 16:51:19 +0000"  >&lt;p&gt;I don&apos;t think we need to work with decimal objects yet, that part is optional. But I would like to get the specification updated so that is finished and other projects can work in parallel. I also think it is a good idea to add the LogicalType class to Schema so that that spec is correctly enforced for decimal metadata.&lt;/p&gt;

&lt;p&gt;I&apos;ll move LogicalType to its own file, add equals/hash implementations, and test. Am I missing anything that needs to be done for this to be supported in the Schema?&lt;/p&gt;</comment>
                            <comment id="13971844" author="rdblue" created="Wed, 16 Apr 2014 19:35:21 +0000"  >&lt;p&gt;Latest patch with working logical types on Schema.&lt;/p&gt;</comment>
                            <comment id="13972981" author="cutting" created="Thu, 17 Apr 2014 14:27:09 +0000"  >&lt;p&gt;Ryanb: I&apos;d prefer that Decimal is not a nested subclass of LogicalType. That way the pattern is that new logical types can be added by user code, without creating a new Avro release.  Also, Schema.java needs not be altered.  A LogicalType can be a factory for and tools that manipulate Schema instances.  The existing schema property mechanism can be used to implement these.  If another implementation adds a logical type that Java has not yet implemented then no exceptions need be caught, since logical types are an optional layer atop schemas.&lt;/p&gt;

&lt;p&gt;Jarek, you seem to feel that other projects (e.g., Hive or Impala) will better be able to make progress once a logical type specification is committed.  If that&apos;s the case then perhaps we should commit just the specification change now and let implementations and uses proceed in parallel.&lt;/p&gt;</comment>
                            <comment id="13973158" author="jarcec" created="Thu, 17 Apr 2014 17:25:33 +0000"  >&lt;p&gt;Yes &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, I do feel that it would be better to commit the spec here to unblock other projects and then follow up with the coding part on separate JIRA.&lt;/p&gt;</comment>
                            <comment id="13973173" author="rdblue" created="Thu, 17 Apr 2014 17:39:16 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, thanks for taking a look. I&apos;ll update the patch to address those problems. Should I also open a separate issue to track the LogicalType addition, so that we can get the spec updated for this one?&lt;/p&gt;</comment>
                            <comment id="13973233" author="cutting" created="Thu, 17 Apr 2014 18:19:30 +0000"  >&lt;p&gt;Yes, it sounds like a separate issue for implementation would be best.&lt;/p&gt;</comment>
                            <comment id="13973367" author="rdblue" created="Thu, 17 Apr 2014 20:37:38 +0000"  >&lt;p&gt;Created &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1497&quot; title=&quot;Add LogicalType support to Java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1497&quot;&gt;&lt;del&gt;AVRO-1497&lt;/del&gt;&lt;/a&gt; to track the logical type support in schemas (Java).&lt;/p&gt;

&lt;p&gt;For just the spec addition, &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12640171/AVRO-1402-logical-type-spec-5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;AVRO-1402-logical-type-spec-5.patch&lt;/a&gt; is up-to-date. The only changes since have been adding implementation code.&lt;/p&gt;</comment>
                            <comment id="13974060" author="cutting" created="Fri, 18 Apr 2014 13:31:32 +0000"  >&lt;p&gt;Forrest failed with the spec change because it didn&apos;t like a &apos;sup&apos; tag nested wtihin a &apos;code&apos; tag.  I changed the outer tag to &apos;em&apos; in this case and now it compiles.&lt;/p&gt;

&lt;p&gt;Here&apos;s the modified patch.&lt;/p&gt;</comment>
                            <comment id="13974068" author="cutting" created="Fri, 18 Apr 2014 13:34:13 +0000"  >&lt;p&gt;I&apos;ll commit this soon unless there are objections.&lt;/p&gt;</comment>
                            <comment id="13974077" author="cutting" created="Fri, 18 Apr 2014 13:37:03 +0000"  >&lt;p&gt;Trim code changes from patch.  Patch is spec only.&lt;/p&gt;</comment>
                            <comment id="13974174" author="jira-bot" created="Fri, 18 Apr 2014 15:45:52 +0000"  >&lt;p&gt;Commit 1588497 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1588497&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1588497&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1402&quot; title=&quot;Support for DECIMAL type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1402&quot;&gt;&lt;del&gt;AVRO-1402&lt;/del&gt;&lt;/a&gt;. Add optional subtypes to specification.  Contributed by tomwhite &amp;amp; Ryan Blue.&lt;/p&gt;</comment>
                            <comment id="13974176" author="cutting" created="Fri, 18 Apr 2014 15:47:48 +0000"  >&lt;p&gt;I committed this.  Thanks, Ryan!&lt;/p&gt;</comment>
                            <comment id="13974241" author="hudson" created="Fri, 18 Apr 2014 16:46:16 +0000"  >&lt;p&gt;FAILURE: Integrated in AvroJava #451 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/451/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/451/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1402&quot; title=&quot;Support for DECIMAL type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1402&quot;&gt;&lt;del&gt;AVRO-1402&lt;/del&gt;&lt;/a&gt;. Add optional subtypes to specification.  Contributed by tomwhite &amp;amp; Ryan Blue. (cutting: rev 1588497)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/doc/src/content/xdocs/spec.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                                                <inwardlinks description="is required by">
                                        <issuelink>
            <issuekey id="12712630">AVRO-1503</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12679279">HIVE-5823</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12709140">AVRO-1497</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12998967">NIFI-2624</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12640100" name="AVRO-1402-logical-type-spec-2.patch" size="3397" author="rdblue" created="Mon, 14 Apr 2014 17:16:54 +0000"/>
                            <attachment id="12640105" name="AVRO-1402-logical-type-spec-3.patch" size="3397" author="rdblue" created="Mon, 14 Apr 2014 17:41:37 +0000"/>
                            <attachment id="12640117" name="AVRO-1402-logical-type-spec-4.patch" size="3401" author="rdblue" created="Mon, 14 Apr 2014 18:51:40 +0000"/>
                            <attachment id="12640171" name="AVRO-1402-logical-type-spec-5.patch" size="3779" author="rdblue" created="Mon, 14 Apr 2014 23:23:35 +0000"/>
                            <attachment id="12640375" name="AVRO-1402-logical-type-spec-6.patch" size="14839" author="rdblue" created="Wed, 16 Apr 2014 01:12:29 +0000"/>
                            <attachment id="12640527" name="AVRO-1402-logical-type-spec-7.patch" size="29741" author="rdblue" created="Wed, 16 Apr 2014 19:35:21 +0000"/>
                            <attachment id="12639561" name="AVRO-1402-logical-type-spec.patch" size="2528" author="tomwhite" created="Thu, 10 Apr 2014 11:51:13 +0000"/>
                            <attachment id="12640817" name="AVRO-1402.patch" size="3441" author="cutting" created="Fri, 18 Apr 2014 13:37:03 +0000"/>
                            <attachment id="12640815" name="AVRO-1402.patch" size="13815" author="cutting" created="Fri, 18 Apr 2014 13:31:32 +0000"/>
                            <attachment id="12638258" name="AVRO-1402.patch" size="14033" author="tomwhite" created="Wed, 2 Apr 2014 14:05:48 +0000"/>
                            <attachment id="12637755" name="AVRO-1402.patch" size="11556" author="tomwhite" created="Mon, 31 Mar 2014 01:26:13 +0000"/>
                            <attachment id="12636743" name="AVRO-1402.patch" size="13339" author="tomwhite" created="Tue, 25 Mar 2014 18:14:22 +0000"/>
                            <attachment id="12635796" name="AVRO-1402.patch" size="7089" author="tomwhite" created="Thu, 20 Mar 2014 15:17:35 +0000"/>
                            <attachment id="12638664" name="UnixEpochRecordMapping.patch" size="3253" author="tomwhite" created="Fri, 4 Apr 2014 10:30:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 20 Mar 2014 15:17:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>358397</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 40 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ps73:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>358687</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1403] Different arrays should be considered as different types in enums</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1403</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;When you try to create an union comprising say an array of ints and an array of strings, you get a &quot;&quot;Duplicate in union: array&quot;.&lt;br/&gt;
I appreciate that this is in the spec, but the spec is wrong since an array of ints and an array of strings have different types.&lt;br/&gt;
Two ways to fix this:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;provide support for named arrays&lt;/li&gt;
	&lt;li&gt;dig into array element type&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment>&lt;p&gt;all&lt;/p&gt;</environment>
        <key id="12679176">AVRO-1403</key>
            <summary>Different arrays should be considered as different types in enums</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="orsonwelles">Eric Vergnaud</reporter>
                        <labels>
                    </labels>
                <created>Thu, 14 Nov 2013 08:19:46 +0000</created>
                <updated>Thu, 14 Nov 2013 08:19:46 +0000</updated>
                                            <version>1.7.5</version>
                                                    <component>spec</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>358541</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 10 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1pt33:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>358831</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>
