<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:22:05 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2015-7-8+AND+created+%3C%3D+2015-7-15+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="7" total="7"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1697] Add support for the Snappy codec to the Ruby library</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1697</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I&apos;ve got a PR that implements this: &lt;a href=&quot;https://github.com/apache/avro/pull/27&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/27&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12843457">AVRO-1697</key>
            <summary>Add support for the Snappy codec to the Ruby library</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dasch">Daniel Schierbeck</assignee>
                                    <reporter username="dasch">Daniel Schierbeck</reporter>
                        <labels>
                    </labels>
                <created>Wed, 8 Jul 2015 08:58:03 +0000</created>
                <updated>Mon, 1 Feb 2016 14:55:50 +0000</updated>
                            <resolved>Fri, 10 Jul 2015 15:21:34 +0000</resolved>
                                                    <fixVersion>1.8.0</fixVersion>
                                    <component>ruby</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="14621054" author="busbey" created="Thu, 9 Jul 2015 18:46:03 +0000"  >&lt;p&gt;attaching current patch from github pr #27, with correction for commit message.&lt;/p&gt;

&lt;p&gt;+1 lgtm. change is backwards compatible, so could go to 1.7 and 1.8.&lt;/p&gt;</comment>
                            <comment id="14622451" author="jira-bot" created="Fri, 10 Jul 2015 15:20:44 +0000"  >&lt;p&gt;Commit 1690276 from tomwhite@apache.org in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1690276&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1690276&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1697&quot; title=&quot;Add support for the Snappy codec to the Ruby library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1697&quot;&gt;&lt;del&gt;AVRO-1697&lt;/del&gt;&lt;/a&gt;. Ruby: Add support for the Snappy codec to the Ruby library. Contributed by Daniel Schierbeck.&lt;/p&gt;</comment>
                            <comment id="14622453" author="tomwhite" created="Fri, 10 Jul 2015 15:21:35 +0000"  >&lt;p&gt;I committed this. Thanks Daniel and Sean!&lt;/p&gt;</comment>
                            <comment id="14622471" author="hudson" created="Fri, 10 Jul 2015 15:36:16 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #530 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/530/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/530/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1697&quot; title=&quot;Add support for the Snappy codec to the Ruby library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1697&quot;&gt;&lt;del&gt;AVRO-1697&lt;/del&gt;&lt;/a&gt;. Ruby: Add support for the Snappy codec to the Ruby library. Contributed by Daniel Schierbeck. (tomwhite: rev 1690276)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/ruby/Gemfile&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/ruby/lib/avro/data_file.rb&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/ruby/test/test_datafile.rb&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14624358" author="githubbot" created="Mon, 13 Jul 2015 08:28:34 +0000"  >&lt;p&gt;Github user dasch closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/27&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/27&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14624359" author="dasch" created="Mon, 13 Jul 2015 08:28:43 +0000"  >&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="14628089" author="tomwhite" created="Wed, 15 Jul 2015 14:01:22 +0000"  >&lt;p&gt;Sorry, I had to revert this as it stopped the build from working. When running from the Docker container (&lt;tt&gt;./build.sh docker&lt;/tt&gt;), I get the following (after adding &lt;tt&gt;snappy&lt;/tt&gt; to the &lt;tt&gt;RUN gem install&lt;/tt&gt; line in the Dockerfile):&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ERROR:  Error installing snappy:
	ERROR: Failed to build gem native extension.

    /usr/bin/ruby2.1 extconf.rb
checking for main() in -lsnappy... no
./autogen.sh: 3: ./autogen.sh: aclocal: not found
./autogen.sh: 3: ./autogen.sh: aclocal: not found
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.

Provided configuration options:
	--with-opt-dir
	--without-opt-dir
	--with-opt-include
	--without-opt-include=${opt-dir}/include
	--with-opt-lib
	--without-opt-lib=${opt-dir}/lib
	--with-make-prog
	--without-make-prog
	--srcdir=.
	--curdir
	--ruby=/usr/bin/ruby2.1
	--with-snappylib
	--without-snappylib
extconf.rb:17:in `block in &amp;lt;main&amp;gt;&apos;: `autogen.sh` failed (RuntimeError)
	from extconf.rb:14:in `chdir&apos;
	from extconf.rb:14:in `&amp;lt;main&amp;gt;&apos;

extconf failed, exit code 1

Gem files will remain installed in /var/lib/gems/2.1.0/gems/snappy-0.0.12 for inspection.
Results logged to /var/lib/gems/2.1.0/extensions/x86_64-linux/2.1.0/snappy-0.0.12/gem_make.out
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So I think this needs more work to get building correctly.&lt;/p&gt;</comment>
                            <comment id="14628494" author="dschierbeck@zendesk.com" created="Wed, 15 Jul 2015 18:19:40 +0000"  >&lt;p&gt;The snappy gem requires the libsnappy1 and libsnappy-dev apt packages on Ubuntu. You&apos;ll need to install those with apt-get before installing the gem. &lt;/p&gt;

&lt;p&gt;Daniel Schierbeck&lt;/p&gt;
</comment>
                            <comment id="14628524" author="busbey" created="Wed, 15 Jul 2015 18:41:19 +0000"  >&lt;p&gt;Is there a jira for the changes to the docker file for running with the &quot;snappy in use&quot; code path? or should changes just be an amendment here?&lt;/p&gt;</comment>
                            <comment id="14628575" author="rdblue" created="Wed, 15 Jul 2015 19:22:17 +0000"  >&lt;p&gt;I&apos;d say let&apos;s just add the amendment here. This should fix docker when it is merged, right?&lt;/p&gt;</comment>
                            <comment id="14629395" author="dasch" created="Thu, 16 Jul 2015 08:00:07 +0000"  >&lt;p&gt;Added a PR: &lt;a href=&quot;https://github.com/apache/avro/pull/42&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/42&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14629421" author="jira-bot" created="Thu, 16 Jul 2015 08:24:46 +0000"  >&lt;p&gt;Commit 1691330 from tomwhite@apache.org in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1691330&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1691330&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1697&quot; title=&quot;Add support for the Snappy codec to the Ruby library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1697&quot;&gt;&lt;del&gt;AVRO-1697&lt;/del&gt;&lt;/a&gt;. Ruby: Add support for the Snappy codec to the Ruby library. Contributed by Daniel Schierbeck.&lt;/p&gt;</comment>
                            <comment id="14629422" author="tomwhite" created="Thu, 16 Jul 2015 08:25:57 +0000"  >&lt;p&gt;I tested the build with the Docker changes and it worked, so I&apos;ve committed this. Thanks again Daniel!&lt;/p&gt;</comment>
                            <comment id="14629424" author="dasch" created="Thu, 16 Jul 2015 08:26:53 +0000"  >&lt;p&gt;No problem, thanks for merging &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14629430" author="hudson" created="Thu, 16 Jul 2015 08:36:45 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #537 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/537/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/537/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1697&quot; title=&quot;Add support for the Snappy codec to the Ruby library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1697&quot;&gt;&lt;del&gt;AVRO-1697&lt;/del&gt;&lt;/a&gt;. Ruby: Add support for the Snappy codec to the Ruby library. Contributed by Daniel Schierbeck. (tomwhite: rev 1691330)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/ruby/Gemfile&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/ruby/lib/avro/data_file.rb&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/ruby/test/test_datafile.rb&lt;/li&gt;
	&lt;li&gt;/avro/trunk/share/docker/Dockerfile&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12744534" name="AVRO-1697.2.patch" size="2405" author="busbey" created="Thu, 9 Jul 2015 18:46:03 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 9 Jul 2015 18:46:03 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 27 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2gzfb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1698] cant serialize json with characters &gt;127 when compiling with signed char</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1698</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;iscntrl assumes 0-255 but signed char gets expanded to bad things&lt;/p&gt;

&lt;p&gt;pullreq #38  on github solves the issue.&lt;/p&gt;

&lt;p&gt;change line 196 lang/c++/impl/json/JsonIO.hh&lt;br/&gt;
from &lt;br/&gt;
  if (! iscntrl(*p)) {&lt;br/&gt;
to&lt;br/&gt;
 if (! iscntrl((uint8_t) *p)) {&lt;/p&gt;</description>
                <environment>&lt;p&gt;windows, linux w signed char&lt;/p&gt;</environment>
        <key id="12843881">AVRO-1698</key>
            <summary>cant serialize json with characters &gt;127 when compiling with signed char</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="svante.karlsson">svante karlsson</reporter>
                        <labels>
                    </labels>
                <created>Thu, 9 Jul 2015 15:12:39 +0000</created>
                <updated>Sat, 29 Dec 2018 18:36:04 +0000</updated>
                            <resolved>Sat, 29 Dec 2018 18:36:04 +0000</resolved>
                                    <version>1.7.7</version>
                                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="14621036" author="busbey" created="Thu, 9 Jul 2015 18:35:21 +0000"  >&lt;p&gt;attaching patch from &lt;a href=&quot;https://github.com/apache/avro/pull/38&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;github pr #38&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14621038" author="busbey" created="Thu, 9 Jul 2015 18:35:37 +0000"  >&lt;p&gt;could you add a test that shows the problem?&lt;/p&gt;</comment>
                            <comment id="14621342" author="svante.karlsson" created="Thu, 9 Jul 2015 21:47:26 +0000"  >&lt;p&gt;Don&apos;t think I&apos;ll have time for writing testcases for this  - but take a look here...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://apr.apache.org/docs/apr/2.0/group__apr__ctype.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://apr.apache.org/docs/apr/2.0/group__apr__ctype.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you really need the cast.&lt;/p&gt;</comment>
                            <comment id="16730784" author="thiru_mg" created="Sat, 29 Dec 2018 18:34:47 +0000"  >&lt;p&gt;Fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1190&quot; title=&quot;C++ json parser fails to decode multibyte unicode code points&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1190&quot;&gt;&lt;del&gt;AVRO-1190&lt;/del&gt;&lt;/a&gt; will automatically take care of this and hence will resolve this as a duplicate of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1190&quot; title=&quot;C++ json parser fails to decode multibyte unicode code points&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1190&quot;&gt;&lt;del&gt;AVRO-1190&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="16730785" author="thiru_mg" created="Sat, 29 Dec 2018 18:36:04 +0000"  >&lt;p&gt;Fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1190&quot; title=&quot;C++ json parser fails to decode multibyte unicode code points&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1190&quot;&gt;&lt;del&gt;AVRO-1190&lt;/del&gt;&lt;/a&gt; will automatically take care of this issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="12614831">AVRO-1190</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12744533" name="AVRO-1698.1.patch" size="812" author="busbey" created="Thu, 9 Jul 2015 18:35:21 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 9 Jul 2015 18:35:21 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2h1zz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1699] AutoMap field values between Avro objects with different schemas</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1699</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;There are a few use cases for this:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Various Avro input data to one common output&lt;/b&gt;&lt;br/&gt;
You want to pickup Avro files in different schemas and normalize into one. You might wish to transform to the superset of the input schemas.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Aggregating Raw Data&lt;/b&gt;&lt;br/&gt;
You want to rewrite data grouped by some fields and aggregated.  The output Avro in this case would be a subset of the input Avro, where at least the group by fields are in both input and output schemas.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Alternate Views&lt;/b&gt;&lt;br/&gt;
You have Avro data that you want to trim different ways to create subsets that would be useful for views in Hive or exports for SQL tables.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Schema Migration&lt;/b&gt;&lt;br/&gt;
You&apos;ve added fields to a schema and you are storing data in both the old and new schemas.  You have Avro in an old schema and you can&apos;t process it with Avro in the new schema (using pig or java map-reduce).  AutoMapping would up-convert your old data by setting null for the new fields added, and all data are in the new schema.  This was &lt;a href=&quot;http://stackoverflow.com/questions/27131942/is-it-possible-to-retrieve-schema-from-avro-data-and-use-them-in-mapreduce&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;asked&lt;/a&gt; about on StackOverflow.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Considerations:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Loop over the source schema fields available to automap over and return any that were unable to be mapped.&lt;/li&gt;
	&lt;li&gt;Allow mappings between compatible types. For example going from integers to longs, floats to strings, etc.&lt;/li&gt;
	&lt;li&gt;Field names match case-sensitive.&lt;/li&gt;
	&lt;li&gt;Make use of aliases in the schema when considering fields to automap.&lt;/li&gt;
	&lt;li&gt;Deep copy nested structures like arrays and maps&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12844231">AVRO-1699</key>
            <summary>AutoMap field values between Avro objects with different schemas</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="10002" iconUrl="https://issues.apache.org/jira/images/icons/statuses/document.png" description="A patch for this issue has been uploaded to JIRA by a contributor.">Patch Available</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="pmazak">Paul Mazak</reporter>
                        <labels>
                    </labels>
                <created>Fri, 10 Jul 2015 17:32:24 +0000</created>
                <updated>Wed, 7 Oct 2015 19:48:51 +0000</updated>
                                            <version>1.7.6</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="14622629" author="pmazak" created="Fri, 10 Jul 2015 17:33:44 +0000"  >&lt;p&gt;I&apos;ll attach an example of how we&apos;ve been doing this in production.&lt;/p&gt;</comment>
                            <comment id="14625021" author="pmazak" created="Mon, 13 Jul 2015 17:47:16 +0000"  >&lt;p&gt;Attaching the AutoMap utility we wrote and have been using.&lt;/p&gt;</comment>
                            <comment id="14625032" author="pmazak" created="Mon, 13 Jul 2015 17:52:26 +0000"  >&lt;p&gt;Didn&apos;t intend to label this a patch.&lt;/p&gt;</comment>
                            <comment id="14947466" author="rdblue" created="Wed, 7 Oct 2015 19:48:51 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=pmazak&quot; class=&quot;user-hover&quot; rel=&quot;pmazak&quot;&gt;Paul Mazak&lt;/a&gt;, thanks for taking the time to post this feature. It&apos;s an interesting take on the problem.&lt;/p&gt;

&lt;p&gt;Avro already has support for some of what AutoMapper is doing by using read schemas. When you read encoded data, you always need the schema that it was written with to decode the fields (which is why schemas are embedded in file headers). Readers also let you to request a schema (the &quot;read schema&quot;) that is the schema that the objects handed to you will have. That schema needs to follow the &lt;a href=&quot;https://avro.apache.org/docs/1.7.7/spec.html#Schema+Resolution&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;well-defined rules&lt;/a&gt; in order to be valid, but you can add columns, remove columns, resolve column aliases, and widen types (int to long but not float to int). There are also validations that verify a schema can read data written with another schema.&lt;/p&gt;

&lt;p&gt;There are two limitations to the current approach:&lt;br/&gt;
1. Resolution or translation is done when reading from encoded data. That works great if you control the reader and can set the read schema, but it gets a little annoying when you forget to pass a writer&apos;s schema all the way back to the reader... which is actually a problem I ran into recently.&lt;br/&gt;
2. Schema resolution on read gives you a view of the original data and isn&apos;t intended to help with data transformations that you might need in business logic, like parsing numbers from strings, updating structures, or converting units.&lt;/p&gt;

&lt;p&gt;Right now, I think the AutoMapper in this patch is mixing those two use cases. I&apos;d really like to see the ability to identify when an object passed to a writer has a different schema and translate. I think it is also interesting to discuss a library for generic transformations. But I don&apos;t think those two should be done in one class because too much is going on without the caller&apos;s knowledge, especially when schema resolution is well-defined in the Avro spec.&lt;/p&gt;

&lt;p&gt;What do you think about working on those separately? I&apos;m betting that the in-memory resolution would be a really useful feature for you that would handle most of your use cases.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12745084" name="AVRO-1699.patch" size="12405" author="pmazak" created="Mon, 13 Jul 2015 18:06:19 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 7 Oct 2015 19:48:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 15 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2h43r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1700] avro_BufferStreambuf_hh__ header guard warning </title>
                <link>https://issues.apache.org/jira/browse/AVRO-1700</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;saw below warning while compiling with g++ 4.2.1 on mac os 10.10.3&lt;/p&gt;

&lt;blockquote&gt;

&lt;p&gt;/Users/liuyanbo/git/avro/lang/c++/api/buffer/BufferStreambuf.hh:19:9: warning: &apos;avro_BufferStreambuf_hh__&apos; is used as a header guard here, followed by #define&lt;br/&gt;
      of a different macro -Wheader-guard&lt;br/&gt;
#ifndef avro_BufferStreambuf_hh__&lt;br/&gt;
        ^~~~~~~~~~~~~~~~~~~~~~~~~&lt;br/&gt;
/Users/liuyanbo/git/avro/lang/c++/api/buffer/BufferStreambuf.hh:20:9: note: &apos;avro_BufferStreambuf_HH__&apos; is defined here; did you mean&lt;br/&gt;
      &apos;avro_BufferStreambuf_hh__&apos;?&lt;br/&gt;
#define avro_BufferStreambuf_HH__&lt;br/&gt;
        ^~~~~~~~~~~~~~~~~~~~~~~~~&lt;br/&gt;
        avro_BufferStreambuf_hh__&lt;br/&gt;
1 warning generated&lt;/p&gt;
&lt;/blockquote&gt;</description>
                <environment></environment>
        <key id="12844392">AVRO-1700</key>
            <summary>avro_BufferStreambuf_hh__ header guard warning </summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="peter_liu">peter liu</assignee>
                                    <reporter username="peter_liu">peter liu</reporter>
                        <labels>
                    </labels>
                <created>Sat, 11 Jul 2015 19:59:48 +0000</created>
                <updated>Wed, 26 Aug 2015 22:38:32 +0000</updated>
                            <resolved>Wed, 26 Aug 2015 21:42:09 +0000</resolved>
                                    <version>1.7.7</version>
                                    <fixVersion>1.8.1</fixVersion>
                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="14623563" author="githubbot" created="Sat, 11 Jul 2015 20:28:40 +0000"  >&lt;p&gt;GitHub user zhutoulala opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/41&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/41&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1700&quot; title=&quot;avro_BufferStreambuf_hh__ header guard warning &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1700&quot;&gt;&lt;del&gt;AVRO-1700&lt;/del&gt;&lt;/a&gt; avro_BufferStreambuf_hh__ header guard warning&lt;/p&gt;



&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/zhutoulala/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/zhutoulala/avro&lt;/a&gt; trunk&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/41.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/41.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #41&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit c069f7997f17c4316f0593a49d8f7bc10d3d6d61&lt;br/&gt;
Author: LiuYanbo &amp;lt;liuyanbo@liuyanbos-macbook.local&amp;gt;&lt;br/&gt;
Date:   2015-07-11T20:25:38Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1700&quot; title=&quot;avro_BufferStreambuf_hh__ header guard warning &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1700&quot;&gt;&lt;del&gt;AVRO-1700&lt;/del&gt;&lt;/a&gt; avro_BufferStreambuf_hh__ header guard warning&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="14645430" author="githubbot" created="Wed, 29 Jul 2015 04:18:48 +0000"  >&lt;p&gt;Github user zhutoulala closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/41&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/41&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14712485" author="peter_liu" created="Wed, 26 Aug 2015 04:26:51 +0000"  >&lt;p&gt;this is just one line change to fix a typo, can we please submit it? &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14715572" author="jira-bot" created="Wed, 26 Aug 2015 21:40:43 +0000"  >&lt;p&gt;Commit 1698010 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=blue%40cloudera.com&quot; class=&quot;user-hover&quot; rel=&quot;blue@cloudera.com&quot;&gt;Ryan Blue&lt;/a&gt; in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1698010&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1698010&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1700&quot; title=&quot;avro_BufferStreambuf_hh__ header guard warning &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1700&quot;&gt;&lt;del&gt;AVRO-1700&lt;/del&gt;&lt;/a&gt;. Fix avro_BufferStreambuf_hh__ header guard. Contributed by Liu Yanbo.&lt;/p&gt;</comment>
                            <comment id="14715575" author="rdblue" created="Wed, 26 Aug 2015 21:41:54 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=peter_liu&quot; class=&quot;user-hover&quot; rel=&quot;peter_liu&quot;&gt;peter liu&lt;/a&gt;, for attributing the contribution, is this your github account? &lt;a href=&quot;https://github.com/zhutoulala&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/zhutoulala&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14715583" author="peter_liu" created="Wed, 26 Aug 2015 21:53:20 +0000"  >&lt;p&gt;thanks, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;. yes it is one of my github accounts&lt;/p&gt;</comment>
                            <comment id="14715651" author="hudson" created="Wed, 26 Aug 2015 22:38:32 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #544 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/544/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/544/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1700&quot; title=&quot;avro_BufferStreambuf_hh__ header guard warning &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1700&quot;&gt;&lt;del&gt;AVRO-1700&lt;/del&gt;&lt;/a&gt;. Fix avro_BufferStreambuf_hh__ header guard. Contributed by Liu Yanbo. (blue: rev 1698010)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/api/buffer/BufferStreambuf.hh&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10020">
                    <name>Cloners</name>
                                                                <inwardlinks description="is cloned by">
                                        <issuelink>
            <issuekey id="12844394">AVRO-1701</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12747710" name="AVRO-1700.1.patch" size="702" author="peter_liu" created="Wed, 29 Jul 2015 04:20:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 11 Jul 2015 20:28:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 21 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2h533:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1701] warning: comparison between &apos;const enum testgen_r::ExampleEnum&apos; and &apos;const enum testgen::ExampleEnum&apos;</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1701</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;saw below warning while compiling with g++ 4.2 and g++ 4.8 on mac os and linux&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[ 85%] Building CXX object CMakeFiles/AvrogencppTests.dir/test/AvrogencppTests.cc.o&lt;br/&gt;
In file included from /Users/liuyanbo/Downloads/boost_1_56_0/boost/test/impl/framework.ipp:29:0,&lt;br/&gt;
                 from /Users/liuyanbo/Downloads/boost_1_56_0/boost/test/included/unit_test.hpp:20,&lt;br/&gt;
                 from /Users/liuyanbo/Downloads/boost_1_56_0/boost/test/included/unit_test_framework.hpp:2,&lt;br/&gt;
                 from /Users/liuyanbo/git/avro/lang/c++/test/AvrogencppTests.cc:33:&lt;br/&gt;
/Users/liuyanbo/Downloads/boost_1_56_0/boost/test/test_tools.hpp: In instantiation of &apos;boost::test_tools::predicate_result boost::test_tools::tt_detail::equal_impl(const Left&amp;amp;, const Right&amp;amp;) &lt;span class=&quot;error&quot;&gt;&amp;#91;with Left = testgen_r::ExampleEnum; Right = testgen::ExampleEnum&amp;#93;&lt;/span&gt;&apos;:&lt;br/&gt;
/Users/liuyanbo/Downloads/boost_1_56_0/boost/test/test_tools.hpp:560:40:   required from &apos;boost::test_tools::predicate_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&amp;amp;, const Right&amp;amp;, mpl_::false_) const &lt;span class=&quot;error&quot;&gt;&amp;#91;with Left = testgen_r::ExampleEnum; Right = testgen::ExampleEnum; mpl_::false_ = mpl_::bool_&amp;lt;false&amp;gt;&amp;#93;&lt;/span&gt;&apos;&lt;br/&gt;
/Users/liuyanbo/Downloads/boost_1_56_0/boost/test/test_tools.hpp:575:56:   required from &apos;boost::test_tools::predicate_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&amp;amp;, const Right&amp;amp;) const &lt;span class=&quot;error&quot;&gt;&amp;#91;with Left = testgen_r::ExampleEnum; Right = testgen::ExampleEnum&amp;#93;&lt;/span&gt;&apos;&lt;br/&gt;
/Users/liuyanbo/Downloads/boost_1_56_0/boost/test/test_tools.hpp:523:1:   required from &apos;bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&amp;amp;, boost::test_tools::const_string, std::size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&amp;amp;, const char*, const Arg1&amp;amp;, const char*) &lt;span class=&quot;error&quot;&gt;&amp;#91;with Pred = boost::test_tools::tt_detail::equal_impl_frwd; Arg0 = testgen_r::ExampleEnum; Arg1 = testgen::ExampleEnum; boost::test_tools::const_string = boost::unit_test::basic_cstring&amp;lt;const char&amp;gt;; std::size_t = long unsigned int&amp;#93;&lt;/span&gt;&apos;&lt;br/&gt;
/Users/liuyanbo/git/avro/lang/c++/test/AvrogencppTests.cc:124:5:   required from &apos;void checkRecord(const T1&amp;amp;, const T2&amp;amp;) &lt;span class=&quot;error&quot;&gt;&amp;#91;with T1 = testgen_r::RootRecord; T2 = testgen::RootRecord&amp;#93;&lt;/span&gt;&apos;&lt;br/&gt;
/Users/liuyanbo/git/avro/lang/c++/test/AvrogencppTests.cc:180:23:   required from here&lt;br/&gt;
/Users/liuyanbo/Downloads/boost_1_56_0/boost/test/test_tools.hpp:536:17: warning: comparison between &apos;const enum testgen_r::ExampleEnum&apos; and &apos;const enum testgen::ExampleEnum&apos; &lt;span class=&quot;error&quot;&gt;&amp;#91;-Wenum-compare&amp;#93;&lt;/span&gt;&lt;br/&gt;
     return left == right;&lt;br/&gt;
                 ^&lt;/p&gt;
&lt;/blockquote&gt;</description>
                <environment></environment>
        <key id="12844394">AVRO-1701</key>
            <summary>warning: comparison between &apos;const enum testgen_r::ExampleEnum&apos; and &apos;const enum testgen::ExampleEnum&apos;</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="peter_liu">peter liu</assignee>
                                    <reporter username="peter_liu">peter liu</reporter>
                        <labels>
                    </labels>
                <created>Sat, 11 Jul 2015 21:00:25 +0000</created>
                <updated>Fri, 28 Dec 2018 16:25:30 +0000</updated>
                            <resolved>Wed, 13 Apr 2016 08:29:15 +0000</resolved>
                                    <version>1.7.7</version>
                                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="14712488" author="peter_liu" created="Wed, 26 Aug 2015 04:31:46 +0000"  >&lt;p&gt;this is also a simple change to fix the warnings which is caused by comparing different enums. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=blue%40cloudera.com&quot; class=&quot;user-hover&quot; rel=&quot;blue@cloudera.com&quot;&gt;Ryan Blue&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14715581" author="rdblue" created="Wed, 26 Aug 2015 21:51:05 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=peter_liu&quot; class=&quot;user-hover&quot; rel=&quot;peter_liu&quot;&gt;peter liu&lt;/a&gt; can you give me a little more background on what is happening here? It looks like this is testing reading into generated classes, which is why the records are prefixed with &quot;testgen::&quot; is that correct? In that case, we&apos;ve generated a write class and a read class and need to validate that the data is the same. That mostly works, except that the enums should be compared by value.&lt;/p&gt;</comment>
                            <comment id="14715603" author="peter_liu" created="Wed, 26 Aug 2015 22:03:20 +0000"  >&lt;p&gt;sure, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;.   c++ compiler isn&apos;t happy about comparing 2 different enums, even we know they should be the same. the fix basically converts the enum to integer before comparison. &lt;/p&gt;

&lt;p&gt;here is the description about this warning from &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html:&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html:&lt;/a&gt;&lt;br/&gt;
-Wenum-compare&lt;br/&gt;
Warn about a comparison between values of different enumerated types. In C++ enumeral mismatches in conditional expressions are also diagnosed and the warning is enabled by default. In C this warning is enabled by -Wall. &lt;/p&gt;</comment>
                            <comment id="14715607" author="rdblue" created="Wed, 26 Aug 2015 22:06:35 +0000"  >&lt;p&gt;I understand why the compiler is warning, I just want to make sure I understand why we&apos;re comparing two different enum classes. They appear to be concrete classes for the same schema. If so, is there no compare function to compare Avro objects by schema?&lt;/p&gt;</comment>
                            <comment id="14716025" author="peter_liu" created="Thu, 27 Aug 2015 03:45:21 +0000"  >&lt;p&gt;I think the schemas are different, one is the writer schema bigrecord, the other is the reader schema bigrecord_r&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-none&quot;&gt;LiuYanbos-MacBook:avro liuyanbo$ diff lang/c++/jsonschemas/bigrecord lang/c++/jsonschemas/bigrecord_r
9a10,16
&amp;gt;             &quot;name&quot;: &quot;mymap&quot;,
&amp;gt;             &quot;type&quot;: {
&amp;gt;                 &quot;type&quot;: &quot;map&quot;,
&amp;gt;                 &quot;values&quot;: &quot;int&quot;
&amp;gt;             }
&amp;gt;         },
&amp;gt;         {
16,19d22
&amp;lt;                         &quot;name&quot;: &quot;inval1&quot;,
&amp;lt;                         &quot;type&quot;: &quot;double&quot;
&amp;lt;                     },
&amp;lt;                     {
23a27,30
&amp;gt;                         &quot;name&quot;: &quot;inval1&quot;,
&amp;gt;                         &quot;type&quot;: &quot;double&quot;
&amp;gt;                     },
&amp;gt;                     {
31c38
&amp;lt;             &quot;name&quot;: &quot;mymap&quot;,
---
&amp;gt;             &quot;name&quot;: &quot;recordmap&quot;,
34c41
&amp;lt;                 &quot;values&quot;: &quot;int&quot;
---
&amp;gt;                 &quot;values&quot;: &quot;Nested&quot;
38c45
&amp;lt;             &quot;name&quot;: &quot;recordmap&quot;,
---
&amp;gt;             &quot;name&quot;: &quot;withDefaultValue&quot;,
40,41c47,74
&amp;lt;                 &quot;type&quot;: &quot;map&quot;,
&amp;lt;                 &quot;values&quot;: &quot;Nested&quot;
---
&amp;gt;                 &quot;type&quot;: &quot;record&quot;,
&amp;gt;                 &quot;name&quot;: &quot;WithDefaultValue&quot;,
&amp;gt;                 &quot;fields&quot;: [
&amp;gt;                     {
&amp;gt;                         &quot;name&quot;: &quot;s1&quot;,
&amp;gt;                         &quot;type&quot;: &quot;string&quot;
&amp;gt;                     },
&amp;gt;                     {
&amp;gt;                         &quot;name&quot;: &quot;d1&quot;,
&amp;gt;                         &quot;type&quot;: &quot;double&quot;
&amp;gt;                     },
&amp;gt;                     {
&amp;gt;                         &quot;name&quot;: &quot;i1&quot;,
&amp;gt;                         &quot;type&quot;: &quot;int&quot;
&amp;gt;                     }
&amp;gt;                 ]
&amp;gt;             },
&amp;gt;             &quot;default&quot;: {
&amp;gt;                 &quot;s1&quot;: &quot;sval&quot;,
&amp;gt;                 &quot;d1&quot;: 5.67,
&amp;gt;                 &quot;i1&quot;: 99
&amp;gt;             }
&amp;gt;         },
&amp;gt;         {
&amp;gt;             &quot;name&quot;: &quot;union1WithDefaultValue&quot;,
&amp;gt;             &quot;type&quot;: [ &quot;string&quot;, &quot;int&quot; ],
&amp;gt;             &quot;default&quot;: {
&amp;gt;                 &quot;string&quot;: &quot;sval&quot;
44a78,82
&amp;gt;             &quot;name&quot;: &quot;union2WithDefaultValue&quot;,
&amp;gt;             &quot;type&quot;: [ &quot;string&quot;, &quot;null&quot; ],
&amp;gt;             &quot;default&quot;: null
&amp;gt;         },
&amp;gt;         {
73c111,112
&amp;lt;             ]
---
&amp;gt;             ],
&amp;gt;             &quot;default&quot;: null
90a130,149
&amp;gt;             &quot;name&quot;: &quot;rwd&quot;,
&amp;gt;             &quot;type&quot;: {
&amp;gt;                 &quot;type&quot;: &quot;record&quot;,
&amp;gt;                 &quot;name&quot;: &quot;RecordWithDefault&quot;,
&amp;gt;                 &quot;fields&quot;: [
&amp;gt;                     {
&amp;gt;                         &quot;name&quot;: &quot;rwd_f1&quot;,
&amp;gt;                         &quot;type&quot;: &quot;Nested&quot;
&amp;gt;                     }
&amp;gt;                 ]
&amp;gt;             },
&amp;gt;             &quot;default&quot;: {
&amp;gt;                 &quot;rwd_f1&quot;: {
&amp;gt;                     &quot;inval2&quot;: &quot;hello&quot;,
&amp;gt;                     &quot;inval1&quot;: 4.23,
&amp;gt;                     &quot;inval3&quot;: 100
&amp;gt;                 }
&amp;gt;             }
&amp;gt;         },
&amp;gt;         {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="15236651" author="thiru_mg" created="Tue, 12 Apr 2016 06:00:01 +0000"  >&lt;p&gt;Normally, there is no need to compare two different schemas. Here we are testing schema evolution where the writer and reader schemas are compatible in Avro sense, but are different in C++ viewpoint. The code is the test code which wants to ensure that the enum value read corresponds to to enum value written.&lt;/p&gt;

&lt;p&gt;But instead of making implicit conversion from enum to &lt;tt&gt;int&lt;/tt&gt; and compare, it is preferable to make explicit comparison. I&apos;ve attached a modified patch.&lt;/p&gt;</comment>
                            <comment id="15236657" author="thiru_mg" created="Tue, 12 Apr 2016 06:02:39 +0000"  >&lt;p&gt;If there are no objections, I&apos;ll commit the changes within a day.&lt;/p&gt;</comment>
                            <comment id="15237545" author="peter_liu" created="Tue, 12 Apr 2016 17:04:37 +0000"  >&lt;p&gt;looks good to me&lt;/p&gt;</comment>
                            <comment id="15238662" author="jira-bot" created="Wed, 13 Apr 2016 06:03:06 +0000"  >&lt;p&gt;Commit 683bc7135b6a69a8d524393f91ada8310a8f9f88 in avro&apos;s branch refs/heads/master from Thiruvalluvan M. G&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=683bc71&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=683bc71&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1701&quot; title=&quot;warning: comparison between &amp;#39;const enum testgen_r::ExampleEnum&amp;#39; and &amp;#39;const enum testgen::ExampleEnum&amp;#39;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1701&quot;&gt;&lt;del&gt;AVRO-1701&lt;/del&gt;&lt;/a&gt;: Fix for &quot;warning: comparison between &apos;const enum testgen_r::ExampleEnum&apos; and &apos;const enum testgen::ExampleEnum&quot;&lt;/p&gt;</comment>
                            <comment id="16730356" author="thiru_mg" created="Fri, 28 Dec 2018 16:25:30 +0000"  >&lt;p&gt;Closing issues that got resolved in earlier releases.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10020">
                    <name>Cloners</name>
                                            <outwardlinks description="is a clone of">
                                        <issuelink>
            <issuekey id="12844392">AVRO-1700</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12798193" name="AVRO-1701-A.patch" size="987" author="thiru_mg" created="Tue, 12 Apr 2016 06:00:31 +0000"/>
                            <attachment id="12747711" name="AVRO-1701.1.patch" size="1420" author="peter_liu" created="Wed, 29 Jul 2015 04:21:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 26 Aug 2015 21:51:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2h53j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1702] Add LogicalType support to c++ library</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1702</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I&apos;d like to port the logicaltype support to c++ library&lt;/p&gt;</description>
                <environment></environment>
        <key id="12844407">AVRO-1702</key>
            <summary>Add LogicalType support to c++ library</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="aniket486">Aniket Mokashi</assignee>
                                    <reporter username="peter_liu">peter liu</reporter>
                        <labels>
                    </labels>
                <created>Sun, 12 Jul 2015 02:16:34 +0000</created>
                <updated>Fri, 7 Dec 2018 17:42:32 +0000</updated>
                            <resolved>Wed, 14 Nov 2018 14:30:09 +0000</resolved>
                                                    <fixVersion>1.9.0</fixVersion>
                                    <component>c++</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="14624031" author="rdblue" created="Sun, 12 Jul 2015 21:58:04 +0000"  >&lt;p&gt;Sounds great, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=peter_liu&quot; class=&quot;user-hover&quot; rel=&quot;peter_liu&quot;&gt;peter liu&lt;/a&gt;! Let me know where I can help. I did the implementation on the Java side.&lt;/p&gt;</comment>
                            <comment id="14624117" author="peter_liu" created="Mon, 13 Jul 2015 01:59:32 +0000"  >&lt;p&gt;thanks, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=blue%40cloudera.com&quot; class=&quot;user-hover&quot; rel=&quot;blue@cloudera.com&quot;&gt;Ryan Blue&lt;/a&gt;. can you please add me to the contributor list so i can assign this jira to myself?&lt;/p&gt;</comment>
                            <comment id="14624875" author="rdblue" created="Mon, 13 Jul 2015 16:18:49 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=peter_liu&quot; class=&quot;user-hover&quot; rel=&quot;peter_liu&quot;&gt;peter liu&lt;/a&gt;, I&apos;ve added you and assigned it. Thanks for taking this on!&lt;/p&gt;</comment>
                            <comment id="14645440" author="githubbot" created="Wed, 29 Jul 2015 04:37:56 +0000"  >&lt;p&gt;GitHub user zhutoulala opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/46&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/46&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt; Add LogicalType support to c++ library&lt;/p&gt;

&lt;p&gt;    this change will add the logicalType support in the schema, what is next:&lt;br/&gt;
    1. convert the real data type to logical type data&lt;br/&gt;
    2. add more predefined logical types&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/zhutoulala/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/zhutoulala/avro&lt;/a&gt; trunk&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/46.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/46.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #46&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit c069f7997f17c4316f0593a49d8f7bc10d3d6d61&lt;br/&gt;
Author: LiuYanbo &amp;lt;liuyanbo@liuyanbos-macbook.local&amp;gt;&lt;br/&gt;
Date:   2015-07-11T20:25:38Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1700&quot; title=&quot;avro_BufferStreambuf_hh__ header guard warning &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1700&quot;&gt;&lt;del&gt;AVRO-1700&lt;/del&gt;&lt;/a&gt; avro_BufferStreambuf_hh__ header guard warning&lt;/p&gt;

&lt;p&gt;commit 86875dae45d3db3a2f3f53a0d1ae62d0001caa37&lt;br/&gt;
Author: LiuYanbo &amp;lt;liuyanbo@liuyanbos-macbook.local&amp;gt;&lt;br/&gt;
Date:   2015-07-11T21:02:58Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1701&quot; title=&quot;warning: comparison between &amp;#39;const enum testgen_r::ExampleEnum&amp;#39; and &amp;#39;const enum testgen::ExampleEnum&amp;#39;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1701&quot;&gt;&lt;del&gt;AVRO-1701&lt;/del&gt;&lt;/a&gt; warning: comparison between &apos;const enum testgen_r::ExampleEnum&apos; and &apos;const enum testgen::ExampleEnum&apos;&lt;/p&gt;

&lt;p&gt;commit a079e92c27c4939d981781f7e6868b2eee0f83dd&lt;br/&gt;
Author: LiuYanbo &amp;lt;liuyanbo@liuyanbos-macbook.local&amp;gt;&lt;br/&gt;
Date:   2015-07-29T04:32:47Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt; Add LogicalType support to c++ library&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="14645442" author="peter_liu" created="Wed, 29 Jul 2015 04:45:21 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt; could you please kindly review?&lt;/p&gt;</comment>
                            <comment id="14646407" author="rdblue" created="Wed, 29 Jul 2015 16:57:23 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=peter_liu&quot; class=&quot;user-hover&quot; rel=&quot;peter_liu&quot;&gt;peter liu&lt;/a&gt;, thanks for pinging me. I&apos;ll have a look.&lt;/p&gt;</comment>
                            <comment id="14699714" author="rdblue" created="Mon, 17 Aug 2015 15:47:43 +0000"  >&lt;p&gt;Sorry, Peter. I&apos;ve been a little behind on this lately.&lt;/p&gt;

&lt;p&gt;You&apos;re right that we&apos;re falling behind on the C++ reviews. If you&apos;d like to take a look at some of them that would be really helpful. Especially to prioritize which ones should be fixed.&lt;/p&gt;</comment>
                            <comment id="14699752" author="peter_liu" created="Mon, 17 Aug 2015 16:10:33 +0000"  >&lt;p&gt;Sure, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;. I will review some of high priority c++bugs. I will ping you when I am done. Thanks.&lt;/p&gt;</comment>
                            <comment id="15133242" author="githubbot" created="Thu, 4 Feb 2016 22:53:45 +0000"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/46&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/46&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15749193" author="pietromenna" created="Wed, 14 Dec 2016 19:17:00 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=peter_liu&quot; class=&quot;user-hover&quot; rel=&quot;peter_liu&quot;&gt;peter liu&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;Is there anything I can do to help with this issue? Can I re-send the PR in your behalf?&lt;/p&gt;</comment>
                            <comment id="16411765" author="aprgoog" created="Fri, 23 Mar 2018 17:37:37 +0000"  >&lt;p&gt;I created a pull request&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apache/avro/pull/302&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;to address this issue. Please take a look.&lt;/p&gt;</comment>
                            <comment id="16411767" author="pietromenna" created="Fri, 23 Mar 2018 17:39:00 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;image: Earn.com&amp;#93;&lt;/span&gt; &amp;lt;&lt;a href=&quot;https://earn.com/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://earn.com/&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;image: Pietro&amp;#93;&lt;/span&gt; Pietro bounced your email&lt;/p&gt;

&lt;p&gt;Pay to resend&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://earn.com/pietromennaruizdiaz/?bounce_signup_code=2778ad5d-4c1d-46e0-b085-0d9e23964f7e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://earn.com/pietromennaruizdiaz/?bounce_signup_code=2778ad5d-4c1d-46e0-b085-0d9e23964f7e&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;Hi there, I&apos;m using Earn.com to automatically bounce emails from outside my&lt;br/&gt;
network. It helps me prioritize my inbox and save time! If you&apos;re a friend&lt;br/&gt;
of mine, click below to request a spot on my whitelist. Your emails will&lt;br/&gt;
get through as normal. If I don&apos;t know you, go ahead and send me a paid&lt;br/&gt;
message. You&apos;ll only pay if you get a response. Thanks, Pietro Menna Ruiz&lt;br/&gt;
Diaz&lt;br/&gt;
How to reach Pietro:&lt;/p&gt;

&lt;p&gt;Send a paid message&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://earn.com/pietromennaruizdiaz/?bounce_signup_code=2778ad5d-4c1d-46e0-b085-0d9e23964f7e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://earn.com/pietromennaruizdiaz/?bounce_signup_code=2778ad5d-4c1d-46e0-b085-0d9e23964f7e&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;Request to join free whitelist&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://earn.com/pietromennaruizdiaz/request/?id=0ab56e21-a1b2-4600-a585-9b1550591516&amp;amp;bounce_signup_code=2778ad5d-4c1d-46e0-b085-0d9e23964f7e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://earn.com/pietromennaruizdiaz/request/?id=0ab56e21-a1b2-4600-a585-9b1550591516&amp;amp;bounce_signup_code=2778ad5d-4c1d-46e0-b085-0d9e23964f7e&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;This email was sent automatically by Earn.com &amp;lt;&lt;a href=&quot;https://earn.com/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://earn.com/&lt;/a&gt;&amp;gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;image: medium&amp;#93;&lt;/span&gt; &amp;lt;&lt;a href=&quot;https://medium.com/@earndotcom&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://medium.com/@earndotcom&lt;/a&gt;&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;image: facebook&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://www.facebook.com/earndotcom&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://www.facebook.com/earndotcom&lt;/a&gt;&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;image: twitter&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://twitter.com/earndotcom&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://twitter.com/earndotcom&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;-------------------------------------------------&lt;/p&gt;

&lt;p&gt;&lt;b&gt;This message was generated in reply to the following message:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;[&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=16411765#comment-16411765&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1702?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=16411765#comment-16411765&lt;/a&gt;&lt;br/&gt;
] Alex commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: ---------------------------- I created a&lt;br/&gt;
pull request &lt;a href=&quot;https://github.com/apache/avro/pull/302&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302&lt;/a&gt; to address this&lt;br/&gt;
issue. Please take a look. &amp;gt; Add LogicalType support to c++ library &amp;gt;&lt;br/&gt;
-------------------------------------- &amp;gt; &amp;gt; Key: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt; &amp;gt; URL:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1702&lt;/a&gt; &amp;gt; Project: Avro &amp;gt; Issue&lt;br/&gt;
Type: New Feature &amp;gt; Components: c++ &amp;gt; Reporter: peter liu &amp;gt; Assignee: peter&lt;br/&gt;
liu &amp;gt; Priority: Major &amp;gt; &amp;gt; I&apos;d like to port the logicaltype support to c++&lt;br/&gt;
library &amp;#8211; This message was sent by Atlassian JIRA (v7.6.3#76005)&lt;/p&gt;</comment>
                            <comment id="16421702" author="githubbot" created="Sun, 1 Apr 2018 16:05:15 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#discussion_r178461969&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#discussion_r178461969&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/Compiler.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -100,6 +100,17 @@ static NodePtr makeNode(const std::string&amp;amp; t, SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
     throw Exception(boost::format(&quot;Unknown type: %1%&quot;) % n.fullname());&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;+/** Returns &quot;true&quot; if the field is in the container */&lt;br/&gt;
+// e.g.: can be false for non-mandatory fields&lt;br/&gt;
+bool containsField(const Entity&amp;amp; e, const Object&amp;amp; m, const string&amp;amp; fieldName) {&lt;br/&gt;
+    Object::const_iterator it = m.find(fieldName);&lt;br/&gt;
+    if (it == m.end()) {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   A much simpler expression could be `return (it != m.end())`&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16421703" author="githubbot" created="Sun, 1 Apr 2018 16:05:15 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#discussion_r178462083&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#discussion_r178462083&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/Compiler.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -327,6 +338,50 @@ static NodePtr makeRecordNode(const Entity&amp;amp; e,&lt;br/&gt;
         fieldValues, fieldNames, defaultValues));&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;+static LogicalType makeLogicalType(const Entity&amp;amp; e, const Object&amp;amp; m) {&lt;br/&gt;
+    if (!containsField(e, m, &quot;logicalType&quot;)) &lt;/p&gt;
{
+        return LogicalType(LogicalType::NONE);
+    }
&lt;p&gt;+&lt;br/&gt;
+    const std::string&amp;amp; typeField = getStringField(e, m, &quot;logicalType&quot;);&lt;br/&gt;
+&lt;br/&gt;
+    if (typeField == &quot;decimal&quot;) {&lt;br/&gt;
+        LogicalType decimalType(LogicalType::DECIMAL);&lt;br/&gt;
+        try {&lt;br/&gt;
+            decimalType.setPrecision(getLongField(e, m, &quot;precision&quot;));&lt;br/&gt;
+            if (containsField(e, m, &quot;scale&quot;)) &lt;/p&gt;
{
+                decimalType.setScale(getLongField(e, m, &quot;scale&quot;));
+            }
&lt;p&gt;+        } catch (Exception&amp;amp; ex) &lt;/p&gt;
{
+            // If any part of the logical type is malformed, per the standard we
+            // must ignore the whole attribute.
+            return LogicalType(LogicalType::NONE);
+        }
&lt;p&gt;+        return decimalType;&lt;br/&gt;
+    }&lt;br/&gt;
+    if (typeField == &quot;date&quot;) {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   I think this will save some code and become more readable if we do something like:&lt;/p&gt;

&lt;p&gt;       LogicalType::Type t = LogicalType::NONE;&lt;br/&gt;
       if (typeField == &quot;date&quot;) {&lt;br/&gt;
           t = LogicalType::DATE;&lt;br/&gt;
       else if (typeField == &quot;time-millis&quot;) {&lt;br/&gt;
           t = LogicalType::TIME_MILLIS;&lt;br/&gt;
      else if ... {&lt;br/&gt;
      }&lt;br/&gt;
      return LogicalType(t);&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16421704" author="githubbot" created="Sun, 1 Apr 2018 16:05:15 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#discussion_r178461909&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#discussion_r178461909&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/api/GenericDatum.hh&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -54,12 +55,15 @@ namespace avro {&lt;br/&gt;
  */&lt;br/&gt;
 class AVRO_DECL GenericDatum {&lt;br/&gt;
     Type type_;&lt;br/&gt;
+    LogicalType logicalType_;&lt;br/&gt;
     boost::any value_;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(Type t) : type_(t) { }&lt;br/&gt;
+    GenericDatum(Type t, LogicalType logicalType)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   In order to avoid backward incompatibility, it will be better to continue to have the old constructor, (in addition to the new constructor):&lt;/p&gt;

&lt;p&gt;       GenericDatum(Type t) : type_(t, logicalType(LogicalType::NONE)) { }&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16421705" author="githubbot" created="Sun, 1 Apr 2018 16:05:15 +0000"  >&lt;p&gt;thiru-apache commented on a change in pull request #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#discussion_r178462148&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#discussion_r178462148&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/LogicalType.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -0,0 +1,89 @@&lt;br/&gt;
+/**&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+#include &quot;Exception.hh&quot;&lt;br/&gt;
+#include &quot;LogicalType.hh&quot;&lt;br/&gt;
+&lt;br/&gt;
+namespace avro {&lt;br/&gt;
+&lt;br/&gt;
+LogicalType::LogicalType(Type type)&lt;br/&gt;
+    : type_(type), precision_(0), scale_(0) {}&lt;br/&gt;
+&lt;br/&gt;
+LogicalType::Type LogicalType::type() const &lt;/p&gt;
{
+    return type_;
+}
&lt;p&gt;+&lt;br/&gt;
+void LogicalType::setPrecision(int precision) {&lt;br/&gt;
+    if (type_ != DECIMAL) &lt;/p&gt;
{
+        throw Exception(&quot;Only logical type DECIMAL can have precision&quot;);
+    }
&lt;p&gt;+    if (precision &amp;lt;= 0) &lt;/p&gt;
{
+        throw Exception(boost::format(&quot;Precision cannot be: %1%&quot;) % precision);
+    }
&lt;p&gt;+    precision_ = precision;&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+int LogicalType::precision() const {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   As a convention in Avro C++, we inline these kind of functions. That is the body of the function is specified along with the declaration in `.hpp` file.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16421708" author="pietromenna" created="Sun, 1 Apr 2018 16:07:00 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;image: Earn.com&amp;#93;&lt;/span&gt; &amp;lt;&lt;a href=&quot;https://earn.com/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://earn.com/&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;image: Pietro&amp;#93;&lt;/span&gt; Pietro bounced your email&lt;/p&gt;

&lt;p&gt;Pay to resend&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://earn.com/pietromennaruizdiaz/?bounce_signup_code=7c77cabf-6052-433a-8b3d-203fe1fce66e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://earn.com/pietromennaruizdiaz/?bounce_signup_code=7c77cabf-6052-433a-8b3d-203fe1fce66e&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;Hi there, I&apos;m using Earn.com to automatically bounce emails from outside my&lt;br/&gt;
network. It helps me prioritize my inbox and save time! If you&apos;re a friend&lt;br/&gt;
of mine, click below to request a spot on my whitelist. Your emails will&lt;br/&gt;
get through as normal. If I don&apos;t know you, go ahead and send me a paid&lt;br/&gt;
message. You&apos;ll only pay if you get a response. Thanks, Pietro Menna Ruiz&lt;br/&gt;
Diaz&lt;br/&gt;
How to reach Pietro:&lt;/p&gt;

&lt;p&gt;Send a paid message&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://earn.com/pietromennaruizdiaz/?bounce_signup_code=7c77cabf-6052-433a-8b3d-203fe1fce66e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://earn.com/pietromennaruizdiaz/?bounce_signup_code=7c77cabf-6052-433a-8b3d-203fe1fce66e&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;Request to join free whitelist&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://earn.com/pietromennaruizdiaz/request/?id=5d723e18-0a33-4ec3-9187-b83c3997d52d&amp;amp;bounce_signup_code=7c77cabf-6052-433a-8b3d-203fe1fce66e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://earn.com/pietromennaruizdiaz/request/?id=5d723e18-0a33-4ec3-9187-b83c3997d52d&amp;amp;bounce_signup_code=7c77cabf-6052-433a-8b3d-203fe1fce66e&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;This email was sent automatically by Earn.com &amp;lt;&lt;a href=&quot;https://earn.com/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://earn.com/&lt;/a&gt;&amp;gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;image: medium&amp;#93;&lt;/span&gt; &amp;lt;&lt;a href=&quot;https://medium.com/@earndotcom&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://medium.com/@earndotcom&lt;/a&gt;&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;image: facebook&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://www.facebook.com/earndotcom&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://www.facebook.com/earndotcom&lt;/a&gt;&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;image: twitter&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://twitter.com/earndotcom&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://twitter.com/earndotcom&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;-------------------------------------------------&lt;/p&gt;

&lt;p&gt;&lt;b&gt;This message was generated in reply to the following message:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;[&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=16421705#comment-16421705&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1702?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=16421705#comment-16421705&lt;/a&gt;&lt;br/&gt;
] ASF GitHub Bot commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
-------------------------------------- thiru-apache commented on a change&lt;br/&gt;
in pull request #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++&lt;br/&gt;
client. URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#discussion_r178462148&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#discussion_r178462148&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;
	&lt;ol&gt;
		&lt;li&gt;
		&lt;ol&gt;
			&lt;li&gt;
			&lt;ol&gt;
				&lt;li&gt;
				&lt;ol&gt;
					&lt;li&gt;
					&lt;ol&gt;
						&lt;li&gt;
						&lt;ol&gt;
							&lt;li&gt;
							&lt;ol&gt;
								&lt;li&gt;
								&lt;ol&gt;
									&lt;li&gt;
									&lt;ol&gt;
										&lt;li&gt;File path: lang/c++/impl/LogicalType.cc ########## @@ -0,0 +1,89&lt;br/&gt;
@@ +/** + * Licensed to the Apache Software Foundation (ASF) under one + *&lt;br/&gt;
or more contributor license agreements. See the NOTICE file + * distributed&lt;br/&gt;
with this work for additional information + * regarding copyright&lt;br/&gt;
ownership. The ASF licenses this file + * to you under the Apache License,&lt;br/&gt;
Version 2.0 (the + * &quot;License&quot;); you may not use this file except in&lt;br/&gt;
compliance + * with the License. You may obtain a copy of the License at +&lt;/li&gt;
									&lt;/ol&gt;
									&lt;/li&gt;
								&lt;/ol&gt;
								&lt;/li&gt;
							&lt;/ol&gt;
							&lt;/li&gt;
						&lt;/ol&gt;
						&lt;/li&gt;
					&lt;/ol&gt;
					&lt;/li&gt;
				&lt;/ol&gt;
				&lt;/li&gt;
			&lt;/ol&gt;
			&lt;/li&gt;
		&lt;/ol&gt;
		&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
	&lt;li&gt;+ * &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt; + * + * Unless required by&lt;br/&gt;
applicable law or agreed to in writing, software + * distributed under the&lt;br/&gt;
License is distributed on an &quot;AS IS&quot; BASIS, + * WITHOUT WARRANTIES OR&lt;br/&gt;
CONDITIONS OF ANY KIND, either express or implied. + * See the License for&lt;br/&gt;
the specific language governing permissions and + * limitations under the&lt;br/&gt;
License. + */ + +#include &quot;Exception.hh&quot; +#include &quot;LogicalType.hh&quot; +&lt;br/&gt;
+namespace avro { + +LogicalType::LogicalType(Type type) + : type_(type),&lt;br/&gt;
precision_(0), scale_(0) {} + +LogicalType::Type LogicalType::type() const
{ + return type_; +}
&lt;p&gt; + +void LogicalType::setPrecision(int precision) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: { +if (type_ != DECIMAL) { + throw Exception(&quot;Only logical type DECIMAL can
have precision&quot;); + } + if (precision &amp;lt;= 0) { + throw
Exception(boost::format(&quot;Precision cannot be: %1%&quot;) % precision); + } +precision_ = precision; +}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt; + +int LogicalType::precision() const { Review&lt;br/&gt;
comment: As a convention in Avro C++, we inline these kind of functions.&lt;br/&gt;
That is the body of the function is specified along with the declaration in&lt;br/&gt;
`.hpp` file.&lt;/p&gt;
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;
			&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
				&lt;li&gt;
				&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
					&lt;li&gt;
					&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
						&lt;li&gt;
						&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
							&lt;li&gt;
							&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
								&lt;li&gt;
								&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
									&lt;li&gt;
									&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
										&lt;li&gt;
										&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
											&lt;li&gt;
											&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
												&lt;li&gt;
												&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
													&lt;li&gt;
													&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
														&lt;li&gt;
														&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
															&lt;li&gt;
															&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																&lt;li&gt;
																&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																	&lt;li&gt;
																	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																		&lt;li&gt;
																		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																			&lt;li&gt;
																			&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																				&lt;li&gt;
																				&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																					&lt;li&gt;
																					&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																						&lt;li&gt;
																						&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																							&lt;li&gt;
																							&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																								&lt;li&gt;
																								&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																									&lt;li&gt;
																									&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																										&lt;li&gt;
																										&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																											&lt;li&gt;
																											&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																												&lt;li&gt;
																												&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																													&lt;li&gt;
																													&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																														&lt;li&gt;
																														&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																															&lt;li&gt;
																															&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																&lt;li&gt;
																																&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																	&lt;li&gt;
																																	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																		&lt;li&gt;
																																		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																			&lt;li&gt;
																																			&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																				&lt;li&gt;
																																				&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																					&lt;li&gt;
																																					&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																						&lt;li&gt;
																																						&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																							&lt;li&gt;
																																							&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																								&lt;li&gt;
																																								&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																									&lt;li&gt;
																																									&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																										&lt;li&gt;
																																										&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																											&lt;li&gt;
																																											&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																												&lt;li&gt;
																																												&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																													&lt;li&gt;
																																													&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																														&lt;li&gt;
																																														&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																															&lt;li&gt;
																																															&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																&lt;li&gt;
																																																&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																	&lt;li&gt;
																																																	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																		&lt;li&gt;
																																																		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																			&lt;li&gt;
																																																			&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																				&lt;li&gt;
																																																				&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																					&lt;li&gt;
																																																					&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																						&lt;li&gt;
																																																						&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																							&lt;li&gt;
																																																							&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																								&lt;li&gt;
																																																								&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																									&lt;li&gt;
																																																									&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																										&lt;li&gt;
																																																										&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																											&lt;li&gt;
																																																											&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																												&lt;li&gt;
																																																												&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																													&lt;li&gt;
																																																													&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																														&lt;li&gt;
																																																														&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																															&lt;li&gt;
																																																															&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
																																																																&lt;li&gt;This is an&lt;br/&gt;
automated message from the Apache Git Service. To respond to the message,&lt;br/&gt;
please log on GitHub and use the URL above to go to the specific comment.&lt;br/&gt;
For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org &amp;gt; Add LogicalType support to c++ library &amp;gt;&lt;/li&gt;
																																																															&lt;/ul&gt;
																																																															&lt;/li&gt;
																																																														&lt;/ul&gt;
																																																														&lt;/li&gt;
																																																													&lt;/ul&gt;
																																																													&lt;/li&gt;
																																																												&lt;/ul&gt;
																																																												&lt;/li&gt;
																																																											&lt;/ul&gt;
																																																											&lt;/li&gt;
																																																										&lt;/ul&gt;
																																																										&lt;/li&gt;
																																																									&lt;/ul&gt;
																																																									&lt;/li&gt;
																																																								&lt;/ul&gt;
																																																								&lt;/li&gt;
																																																							&lt;/ul&gt;
																																																							&lt;/li&gt;
																																																						&lt;/ul&gt;
																																																						&lt;/li&gt;
																																																					&lt;/ul&gt;
																																																					&lt;/li&gt;
																																																				&lt;/ul&gt;
																																																				&lt;/li&gt;
																																																			&lt;/ul&gt;
																																																			&lt;/li&gt;
																																																		&lt;/ul&gt;
																																																		&lt;/li&gt;
																																																	&lt;/ul&gt;
																																																	&lt;/li&gt;
																																																&lt;/ul&gt;
																																																&lt;/li&gt;
																																															&lt;/ul&gt;
																																															&lt;/li&gt;
																																														&lt;/ul&gt;
																																														&lt;/li&gt;
																																													&lt;/ul&gt;
																																													&lt;/li&gt;
																																												&lt;/ul&gt;
																																												&lt;/li&gt;
																																											&lt;/ul&gt;
																																											&lt;/li&gt;
																																										&lt;/ul&gt;
																																										&lt;/li&gt;
																																									&lt;/ul&gt;
																																									&lt;/li&gt;
																																								&lt;/ul&gt;
																																								&lt;/li&gt;
																																							&lt;/ul&gt;
																																							&lt;/li&gt;
																																						&lt;/ul&gt;
																																						&lt;/li&gt;
																																						&lt;li&gt;&amp;gt; &amp;gt; Key: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt; &amp;gt; URL:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1702&lt;/a&gt; &amp;gt; Project: Avro &amp;gt; Issue&lt;br/&gt;
Type: New Feature &amp;gt; Components: c++ &amp;gt; Reporter: peter liu &amp;gt; Assignee: peter&lt;br/&gt;
liu &amp;gt; Priority: Major &amp;gt; &amp;gt; I&apos;d like to port the logicaltype support to c++&lt;br/&gt;
library &amp;#8211; This message was sent by Atlassian JIRA (v7.6.3#76005)&lt;/li&gt;
																																					&lt;/ul&gt;
																																					&lt;/li&gt;
																																				&lt;/ul&gt;
																																				&lt;/li&gt;
																																			&lt;/ul&gt;
																																			&lt;/li&gt;
																																		&lt;/ul&gt;
																																		&lt;/li&gt;
																																	&lt;/ul&gt;
																																	&lt;/li&gt;
																																&lt;/ul&gt;
																																&lt;/li&gt;
																															&lt;/ul&gt;
																															&lt;/li&gt;
																														&lt;/ul&gt;
																														&lt;/li&gt;
																													&lt;/ul&gt;
																													&lt;/li&gt;
																												&lt;/ul&gt;
																												&lt;/li&gt;
																											&lt;/ul&gt;
																											&lt;/li&gt;
																										&lt;/ul&gt;
																										&lt;/li&gt;
																									&lt;/ul&gt;
																									&lt;/li&gt;
																								&lt;/ul&gt;
																								&lt;/li&gt;
																							&lt;/ul&gt;
																							&lt;/li&gt;
																						&lt;/ul&gt;
																						&lt;/li&gt;
																					&lt;/ul&gt;
																					&lt;/li&gt;
																				&lt;/ul&gt;
																				&lt;/li&gt;
																			&lt;/ul&gt;
																			&lt;/li&gt;
																		&lt;/ul&gt;
																		&lt;/li&gt;
																	&lt;/ul&gt;
																	&lt;/li&gt;
																&lt;/ul&gt;
																&lt;/li&gt;
															&lt;/ul&gt;
															&lt;/li&gt;
														&lt;/ul&gt;
														&lt;/li&gt;
													&lt;/ul&gt;
													&lt;/li&gt;
												&lt;/ul&gt;
												&lt;/li&gt;
											&lt;/ul&gt;
											&lt;/li&gt;
										&lt;/ul&gt;
										&lt;/li&gt;
									&lt;/ul&gt;
									&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16421764" author="thiru_mg" created="Sun, 1 Apr 2018 18:14:36 +0000"  >&lt;p&gt;There is a pull request for this.&lt;/p&gt;</comment>
                            <comment id="16431023" author="githubbot" created="Mon, 9 Apr 2018 18:23:50 +0000"  >&lt;p&gt;aprgoog commented on a change in pull request #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#discussion_r180186396&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#discussion_r180186396&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/api/GenericDatum.hh&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -54,12 +55,15 @@ namespace avro {&lt;br/&gt;
  */&lt;br/&gt;
 class AVRO_DECL GenericDatum {&lt;br/&gt;
     Type type_;&lt;br/&gt;
+    LogicalType logicalType_;&lt;br/&gt;
     boost::any value_;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(Type t) : type_(t) { }&lt;br/&gt;
+    GenericDatum(Type t, LogicalType logicalType)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   I added the old constructor back. Note however that this is a private constructor, so the effect should be limited to the code that is part of the class.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16431024" author="githubbot" created="Mon, 9 Apr 2018 18:23:52 +0000"  >&lt;p&gt;aprgoog commented on a change in pull request #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#discussion_r180186416&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#discussion_r180186416&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/Compiler.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -100,6 +100,17 @@ static NodePtr makeNode(const std::string&amp;amp; t, SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
     throw Exception(boost::format(&quot;Unknown type: %1%&quot;) % n.fullname());&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;+/** Returns &quot;true&quot; if the field is in the container */&lt;br/&gt;
+// e.g.: can be false for non-mandatory fields&lt;br/&gt;
+bool containsField(const Entity&amp;amp; e, const Object&amp;amp; m, const string&amp;amp; fieldName) {&lt;br/&gt;
+    Object::const_iterator it = m.find(fieldName);&lt;br/&gt;
+    if (it == m.end()) {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Yep, done.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16431025" author="githubbot" created="Mon, 9 Apr 2018 18:23:55 +0000"  >&lt;p&gt;aprgoog commented on a change in pull request #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#discussion_r180186426&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#discussion_r180186426&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/Compiler.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -327,6 +338,50 @@ static NodePtr makeRecordNode(const Entity&amp;amp; e,&lt;br/&gt;
         fieldValues, fieldNames, defaultValues));&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;+static LogicalType makeLogicalType(const Entity&amp;amp; e, const Object&amp;amp; m) {&lt;br/&gt;
+    if (!containsField(e, m, &quot;logicalType&quot;)) &lt;/p&gt;
{
+        return LogicalType(LogicalType::NONE);
+    }
&lt;p&gt;+&lt;br/&gt;
+    const std::string&amp;amp; typeField = getStringField(e, m, &quot;logicalType&quot;);&lt;br/&gt;
+&lt;br/&gt;
+    if (typeField == &quot;decimal&quot;) {&lt;br/&gt;
+        LogicalType decimalType(LogicalType::DECIMAL);&lt;br/&gt;
+        try {&lt;br/&gt;
+            decimalType.setPrecision(getLongField(e, m, &quot;precision&quot;));&lt;br/&gt;
+            if (containsField(e, m, &quot;scale&quot;)) &lt;/p&gt;
{
+                decimalType.setScale(getLongField(e, m, &quot;scale&quot;));
+            }
&lt;p&gt;+        } catch (Exception&amp;amp; ex) &lt;/p&gt;
{
+            // If any part of the logical type is malformed, per the standard we
+            // must ignore the whole attribute.
+            return LogicalType(LogicalType::NONE);
+        }
&lt;p&gt;+        return decimalType;&lt;br/&gt;
+    }&lt;br/&gt;
+    if (typeField == &quot;date&quot;) {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Done.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16431026" author="githubbot" created="Mon, 9 Apr 2018 18:23:57 +0000"  >&lt;p&gt;aprgoog commented on a change in pull request #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#discussion_r180186435&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#discussion_r180186435&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/c++/impl/LogicalType.cc&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -0,0 +1,89 @@&lt;br/&gt;
+/**&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+#include &quot;Exception.hh&quot;&lt;br/&gt;
+#include &quot;LogicalType.hh&quot;&lt;br/&gt;
+&lt;br/&gt;
+namespace avro {&lt;br/&gt;
+&lt;br/&gt;
+LogicalType::LogicalType(Type type)&lt;br/&gt;
+    : type_(type), precision_(0), scale_(0) {}&lt;br/&gt;
+&lt;br/&gt;
+LogicalType::Type LogicalType::type() const &lt;/p&gt;
{
+    return type_;
+}
&lt;p&gt;+&lt;br/&gt;
+void LogicalType::setPrecision(int precision) {&lt;br/&gt;
+    if (type_ != DECIMAL) &lt;/p&gt;
{
+        throw Exception(&quot;Only logical type DECIMAL can have precision&quot;);
+    }
&lt;p&gt;+    if (precision &amp;lt;= 0) &lt;/p&gt;
{
+        throw Exception(boost::format(&quot;Precision cannot be: %1%&quot;) % precision);
+    }
&lt;p&gt;+    precision_ = precision;&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+int LogicalType::precision() const {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Done.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16508960" author="githubbot" created="Mon, 11 Jun 2018 23:40:04 +0000"  >&lt;p&gt;aprgoog commented on issue #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#issuecomment-396420018&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#issuecomment-396420018&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Can we get some resolution on this?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16520583" author="githubbot" created="Fri, 22 Jun 2018 16:48:18 +0000"  >&lt;p&gt;aprgoog commented on issue #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#issuecomment-399507942&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#issuecomment-399507942&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @thiru-apache ping&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16526637" author="githubbot" created="Thu, 28 Jun 2018 18:18:21 +0000"  >&lt;p&gt;vimota commented on issue #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#issuecomment-401126895&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#issuecomment-401126895&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   This would be great to have, can we get it merged in? Thanks!&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16526789" author="githubbot" created="Thu, 28 Jun 2018 21:19:26 +0000"  >&lt;p&gt;aprgoog commented on issue #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#issuecomment-401176733&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#issuecomment-401176733&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @tomwhite Tom, can you help expedite reviewing and merging of this PR? It&apos;s been lingering in this limbo state for quite sometime now. Thanks.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16642091" author="githubbot" created="Mon, 8 Oct 2018 16:22:34 +0000"  >&lt;p&gt;aniket486 commented on issue #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#issuecomment-427896434&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#issuecomment-427896434&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @thiru-apache gentle ping. @rdblue can you help us with this review?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16684128" author="githubbot" created="Mon, 12 Nov 2018 17:22:16 +0000"  >&lt;p&gt;thiru-apache commented on issue #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#issuecomment-437962435&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#issuecomment-437962435&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @aniket486 Is it possible for you to rebase this to the current master. Let us have it pulled. Thank you.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16684324" author="githubbot" created="Mon, 12 Nov 2018 20:14:01 +0000"  >&lt;p&gt;aniket486 opened a new pull request #379: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/379&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/379&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16684325" author="githubbot" created="Mon, 12 Nov 2018 20:14:51 +0000"  >&lt;p&gt;aniket486 commented on issue #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#issuecomment-438013948&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#issuecomment-438013948&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I&apos;m not sure if there is a way to update this PR after I rebase. So, I have created #379 for this.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16684889" author="githubbot" created="Tue, 13 Nov 2018 08:42:49 +0000"  >&lt;p&gt;thiru-apache commented on issue #379: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/379#issuecomment-438182732&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/379#issuecomment-438182732&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Looks good. We do not yet require C++11 as a requirement. Hence raw literals are not supported. Here is the patch that fixes the problem: &lt;a href=&quot;https://github.com/thiru-apache/avro/commit/978ccb8b1fde877d0f807bdf1ec102434cc78fd4&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/thiru-apache/avro/commit/978ccb8b1fde877d0f807bdf1ec102434cc78fd4&lt;/a&gt;. Please apply that change. Thank you.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16685581" author="githubbot" created="Tue, 13 Nov 2018 18:31:43 +0000"  >&lt;p&gt;aniket486 commented on issue #379: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/379#issuecomment-438385034&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/379#issuecomment-438385034&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thanks @thiru-apache. PTAL.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16685756" author="githubbot" created="Tue, 13 Nov 2018 21:34:55 +0000"  >&lt;p&gt;zhutoulala commented on issue #379: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/379#issuecomment-438446178&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/379#issuecomment-438446178&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   really nice to see this 3+ year JIRA to be completed, great work @aniket486 @aprgoog &lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16686580" author="githubbot" created="Wed, 14 Nov 2018 14:29:20 +0000"  >&lt;p&gt;thiru-apache closed pull request #379: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/379&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/379&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/c+&lt;ins&gt;/CMakeLists.txt b/lang/c&lt;/ins&gt;+/CMakeLists.txt&lt;br/&gt;
index 4b9676426..1c440571f 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/CMakeLists.txt&lt;br/&gt;
+++ b/lang/c++/CMakeLists.txt&lt;br/&gt;
@@ -80,7 +80,7 @@ add_definitions (${Boost_LIB_DIAGNOSTIC_DEFINITIONS})&lt;br/&gt;
 include_directories (api ${CMAKE_CURRENT_BINARY_DIR} ${Boost_INCLUDE_DIRS})&lt;/p&gt;

&lt;p&gt; set (AVRO_SOURCE_FILES&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;impl/Compiler.cc impl/Node.cc&lt;br/&gt;
+        impl/Compiler.cc impl/Node.cc impl/LogicalType.cc&lt;br/&gt;
         impl/NodeImpl.cc impl/ResolverSchema.cc impl/Schema.cc&lt;br/&gt;
         impl/Types.cc impl/ValidSchema.cc impl/Zigzag.cc&lt;br/&gt;
         impl/BinaryEncoder.cc impl/BinaryDecoder.cc&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/api/GenericDatum.hh b/lang/c&lt;/ins&gt;+/api/GenericDatum.hh&lt;br/&gt;
index edc4fbc43..0273443da 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/c++/api/GenericDatum.hh&lt;br/&gt;
+++ b/lang/c++/api/GenericDatum.hh&lt;br/&gt;
@@ -26,6 +26,7 @@&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; #include &amp;lt;boost/any.hpp&amp;gt;&lt;/p&gt;

&lt;p&gt;+#include &quot;LogicalType.hh&quot;&lt;br/&gt;
 #include &quot;Node.hh&quot;&lt;br/&gt;
 #include &quot;ValidSchema.hh&quot;&lt;/p&gt;

&lt;p&gt;@@ -54,12 +55,18 @@ namespace avro {&lt;br/&gt;
  */&lt;br/&gt;
 class AVRO_DECL GenericDatum {&lt;br/&gt;
     Type type_;&lt;br/&gt;
+    LogicalType logicalType_;&lt;br/&gt;
     boost::any value_;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(Type t) : type_(t) { }&lt;br/&gt;
+    GenericDatum(Type t)&lt;br/&gt;
+        : type_(t), logicalType_(LogicalType::NONE) { }&lt;br/&gt;
+&lt;br/&gt;
+    GenericDatum(Type t, LogicalType logicalType)&lt;br/&gt;
+        : type_(t), logicalType_(logicalType) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     template &amp;lt;typename T&amp;gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(Type t, const T&amp;amp; v) : type_(t), value_(v) { }&lt;br/&gt;
+    GenericDatum(Type t, LogicalType logicalType, const T&amp;amp; v)&lt;br/&gt;
+        : type_(t), logicalType_(logicalType), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     void init(const NodePtr&amp;amp; schema);&lt;br/&gt;
 public:&lt;br/&gt;
@@ -68,6 +75,11 @@ public:&lt;br/&gt;
      */&lt;br/&gt;
     Type type() const;&lt;/p&gt;

&lt;p&gt;+    /**&lt;br/&gt;
+     * The avro logical type that augments the main data type this datum holds.&lt;br/&gt;
+     */&lt;br/&gt;
+    LogicalType logicalType() const;&lt;br/&gt;
+&lt;br/&gt;
     /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Returns the value held by this datum.&lt;/li&gt;
	&lt;li&gt;T The type for the value. This must correspond to the&lt;br/&gt;
@@ -104,30 +116,36 @@ public:&lt;br/&gt;
     void selectBranch(size_t branch);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_NULL datum.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum() : type_(AVRO_NULL) { }&lt;br/&gt;
+    GenericDatum() : type_(AVRO_NULL), logicalType_(LogicalType::NONE) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_BOOL datum whose value is of type bool.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(bool v) : type_(AVRO_BOOL), value_(v) { }&lt;br/&gt;
+    GenericDatum(bool v)&lt;br/&gt;
+        : type_(AVRO_BOOL), logicalType_(LogicalType::NONE), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_INT datum whose value is of type int32_t.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(int32_t v) : type_(AVRO_INT), value_(v) { }&lt;br/&gt;
+    GenericDatum(int32_t v)&lt;br/&gt;
+        : type_(AVRO_INT), logicalType_(LogicalType::NONE), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_LONG datum whose value is of type int64_t.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(int64_t v) : type_(AVRO_LONG), value_(v) { }&lt;br/&gt;
+    GenericDatum(int64_t v)&lt;br/&gt;
+        : type_(AVRO_LONG), logicalType_(LogicalType::NONE), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_FLOAT datum whose value is of type float.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(float v) : type_(AVRO_FLOAT), value_(v) { }&lt;br/&gt;
+    GenericDatum(float v)&lt;br/&gt;
+        : type_(AVRO_FLOAT), logicalType_(LogicalType::NONE), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_DOUBLE datum whose value is of type double.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(double v) : type_(AVRO_DOUBLE), value_(v) { }&lt;br/&gt;
+    GenericDatum(double v)&lt;br/&gt;
+        : type_(AVRO_DOUBLE), logicalType_(LogicalType::NONE), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_STRING datum whose value is of type std::string.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(const std::string&amp;amp; v) : type_(AVRO_STRING), value_(v) { }&lt;br/&gt;
+    GenericDatum(const std::string&amp;amp; v)&lt;br/&gt;
+        : type_(AVRO_STRING), logicalType_(LogicalType::NONE), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_BYTES datum whose value is of type&lt;br/&gt;
     /// std::vector&amp;lt;uint8_t&amp;gt;.&lt;br/&gt;
     GenericDatum(const std::vector&amp;lt;uint8_t&amp;gt;&amp;amp; v) :&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;type_(AVRO_BYTES), value_(v) { }&lt;br/&gt;
+        type_(AVRO_BYTES), logicalType_(LogicalType::NONE), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructs a datum corresponding to the given avro type.&lt;br/&gt;
@@ -145,7 +163,7 @@ public:&lt;br/&gt;
      */&lt;br/&gt;
     template&amp;lt;typename T&amp;gt;&lt;br/&gt;
     GenericDatum(const NodePtr&amp;amp; schema, const T&amp;amp; v) :&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;type_(schema-&amp;gt;type()) {&lt;br/&gt;
+        type_(schema-&amp;gt;type()), logicalType_(schema-&amp;gt;logicalType()) 
{
         init(schema);
         *boost::any_cast&amp;lt;T&amp;gt;(&amp;amp;value_) = v;
     }
&lt;p&gt;@@ -494,6 +512,10 @@ inline Type GenericDatum::type() const &lt;/p&gt;
{
         type_;
 }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+inline LogicalType GenericDatum::logicalType() const &lt;/p&gt;
{
+    return logicalType_;
+}
&lt;p&gt;+&lt;br/&gt;
 template&amp;lt;typename T&amp;gt; T&amp;amp; GenericDatum::value() {&lt;br/&gt;
     return (type_ == AVRO_UNION) ?&lt;br/&gt;
         boost::any_cast&amp;lt;GenericUnion&amp;gt;(&amp;amp;value_)-&amp;gt;datum().value&amp;lt;T&amp;gt;() :&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/api/LogicalType.hh b/lang/c&lt;/ins&gt;+/api/LogicalType.hh&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..46c0e7645&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/c++/api/LogicalType.hh&lt;br/&gt;
@@ -0,0 +1,64 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+#ifndef avro_LogicalType_hh__&lt;br/&gt;
+#define avro_LogicalType_hh__&lt;br/&gt;
+&lt;br/&gt;
+#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+#include &quot;Config.hh&quot;&lt;br/&gt;
+&lt;br/&gt;
+namespace avro {&lt;br/&gt;
+&lt;br/&gt;
+class AVRO_DECL LogicalType {&lt;br/&gt;
+  public:&lt;br/&gt;
+    enum Type &lt;/p&gt;
{
+        NONE,
+        DECIMAL,
+        DATE,
+        TIME_MILLIS,
+        TIME_MICROS,
+        TIMESTAMP_MILLIS,
+        TIMESTAMP_MICROS,
+        DURATION
+    }
&lt;p&gt;;&lt;br/&gt;
+&lt;br/&gt;
+    explicit LogicalType(Type type);&lt;br/&gt;
+&lt;br/&gt;
+    Type type() const;&lt;br/&gt;
+&lt;br/&gt;
+    // Precision and scale can only be set for the DECIMAL logical type.&lt;br/&gt;
+    // Precision must be positive and scale must be either positive or zero. The&lt;br/&gt;
+    // setters will throw an exception if they are called on any type other&lt;br/&gt;
+    // than DECIMAL.&lt;br/&gt;
+    void setPrecision(int precision);&lt;br/&gt;
+    int precision() const &lt;/p&gt;
{ return precision_; }
&lt;p&gt;+    void setScale(int scale);&lt;br/&gt;
+    int scale() const &lt;/p&gt;
{ return scale_; }
&lt;p&gt;+&lt;br/&gt;
+    void printJson(std::ostream&amp;amp; os) const;&lt;br/&gt;
+&lt;br/&gt;
+  private:&lt;br/&gt;
+    Type type_;&lt;br/&gt;
+    int precision_;&lt;br/&gt;
+    int scale_;&lt;br/&gt;
+};&lt;br/&gt;
+&lt;br/&gt;
+}  // namespace avro&lt;br/&gt;
+&lt;br/&gt;
+#endif&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/api/Node.hh b/lang/c&lt;/ins&gt;+/api/Node.hh&lt;br/&gt;
index 4d54a5edf..4087709d8 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/api/Node.hh&lt;br/&gt;
+++ b/lang/c++/api/Node.hh&lt;br/&gt;
@@ -26,6 +26,7 @@&lt;br/&gt;
 #include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;/p&gt;

&lt;p&gt; #include &quot;Exception.hh&quot;&lt;br/&gt;
+#include &quot;LogicalType.hh&quot;&lt;br/&gt;
 #include &quot;Types.hh&quot;&lt;br/&gt;
 #include &quot;SchemaResolution.hh&quot;&lt;/p&gt;

&lt;p&gt;@@ -91,6 +92,7 @@ class AVRO_DECL Node : private boost::noncopyable&lt;/p&gt;

&lt;p&gt;     Node(Type type) :&lt;br/&gt;
         type_(type),&lt;br/&gt;
+        logicalType_(LogicalType::NONE),&lt;br/&gt;
         locked_(false)&lt;br/&gt;
     {}&lt;/p&gt;

&lt;p&gt;@@ -100,6 +102,12 @@ class AVRO_DECL Node : private boost::noncopyable&lt;br/&gt;
         return type_;&lt;br/&gt;
     }&lt;/p&gt;

&lt;p&gt;+    LogicalType logicalType() const &lt;/p&gt;
{
+        return logicalType_;
+    }
&lt;p&gt;+&lt;br/&gt;
+    void setLogicalType(LogicalType logicalType);&lt;br/&gt;
+&lt;br/&gt;
     void lock() &lt;/p&gt;
{
         locked_ = true;
     }
&lt;p&gt;@@ -185,6 +193,7 @@ class AVRO_DECL Node : private boost::noncopyable&lt;br/&gt;
   private:&lt;/p&gt;

&lt;p&gt;     const Type type_;&lt;br/&gt;
+    LogicalType logicalType_;&lt;br/&gt;
     bool locked_;&lt;br/&gt;
 };&lt;/p&gt;

&lt;p&gt;diff --git a/lang/c+&lt;ins&gt;/impl/Compiler.cc b/lang/c&lt;/ins&gt;+/impl/Compiler.cc&lt;br/&gt;
index bc0f3cdd5..02a6a4326 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/impl/Compiler.cc&lt;br/&gt;
+++ b/lang/c++/impl/Compiler.cc&lt;br/&gt;
@@ -103,13 +103,13 @@ static NodePtr makeNode(const string &amp;amp;t, SymbolTable &amp;amp;st, const string &amp;amp;ns)&lt;/p&gt;

&lt;p&gt; /** Returns &quot;true&quot; if the field is in the container */&lt;br/&gt;
 // e.g.: can be false for non-mandatory fields&lt;br/&gt;
-bool containsField(const Object &amp;amp;m, const string &amp;amp;fieldName) {&lt;br/&gt;
+bool containsField(const Object&amp;amp; m, const string&amp;amp; fieldName) &lt;/p&gt;
{
     Object::const_iterator it = m.find(fieldName);
-    return it != m.end();
+    return (it != m.end());
 }

&lt;p&gt;-const json::Object::const_iterator findField(const Entity &amp;amp;e,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;const Object &amp;amp;m, const string &amp;amp;fieldName)&lt;br/&gt;
+const json::Object::const_iterator findField(const Entity&amp;amp; e,&lt;br/&gt;
+    const Object&amp;amp; m, const string&amp;amp; fieldName)&lt;br/&gt;
 {&lt;br/&gt;
     Object::const_iterator it = m.find(fieldName);&lt;br/&gt;
     if (it == m.end()) 
{
@@ -333,6 +333,44 @@ static NodePtr makeRecordNode(const Entity&amp;amp; e, const Name&amp;amp; name,
     return NodePtr(node);
 }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+static LogicalType makeLogicalType(const Entity&amp;amp; e, const Object&amp;amp; m) {&lt;br/&gt;
+    if (!containsField(m, &quot;logicalType&quot;)) &lt;/p&gt;
{
+        return LogicalType(LogicalType::NONE);
+    }
&lt;p&gt;+&lt;br/&gt;
+    const std::string&amp;amp; typeField = getStringField(e, m, &quot;logicalType&quot;);&lt;br/&gt;
+&lt;br/&gt;
+    if (typeField == &quot;decimal&quot;) {&lt;br/&gt;
+        LogicalType decimalType(LogicalType::DECIMAL);&lt;br/&gt;
+        try {&lt;br/&gt;
+            decimalType.setPrecision(getLongField(e, m, &quot;precision&quot;));&lt;br/&gt;
+            if (containsField(m, &quot;scale&quot;)) &lt;/p&gt;
{
+                decimalType.setScale(getLongField(e, m, &quot;scale&quot;));
+            }
&lt;p&gt;+        } catch (Exception&amp;amp; ex) &lt;/p&gt;
{
+            // If any part of the logical type is malformed, per the standard we
+            // must ignore the whole attribute.
+            return LogicalType(LogicalType::NONE);
+        }
&lt;p&gt;+        return decimalType;&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    LogicalType::Type t = LogicalType::NONE;&lt;br/&gt;
+    if (typeField == &quot;date&quot;)&lt;br/&gt;
+        t = LogicalType::DATE;&lt;br/&gt;
+    else if (typeField == &quot;time-millis&quot;)&lt;br/&gt;
+        t = LogicalType::TIME_MILLIS;&lt;br/&gt;
+    else if (typeField == &quot;time-micros&quot;)&lt;br/&gt;
+        t = LogicalType::TIME_MICROS;&lt;br/&gt;
+    else if (typeField == &quot;timestamp-millis&quot;)&lt;br/&gt;
+        t = LogicalType::TIMESTAMP_MILLIS;&lt;br/&gt;
+    else if (typeField == &quot;timestamp-micros&quot;)&lt;br/&gt;
+        t = LogicalType::TIMESTAMP_MICROS;&lt;br/&gt;
+    else if (typeField == &quot;duration&quot;)&lt;br/&gt;
+        t = LogicalType::DURATION;&lt;br/&gt;
+    return LogicalType(t);&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
 static NodePtr makeEnumNode(const Entity&amp;amp; e,&lt;br/&gt;
     const Name&amp;amp; name, const Object&amp;amp; m)&lt;br/&gt;
 {&lt;br/&gt;
@@ -419,12 +457,10 @@ static NodePtr makeNode(const Entity&amp;amp; e, const Object&amp;amp; m,&lt;br/&gt;
     SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
 {&lt;br/&gt;
     const string&amp;amp; type = getStringField(e, m, &quot;type&quot;);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if (NodePtr result = makePrimitive(type)) 
{
-        return result;
-    }
&lt;p&gt; else if (type == &quot;record&quot; || type == &quot;error&quot; ||&lt;br/&gt;
+    NodePtr result;&lt;br/&gt;
+    if (type == &quot;record&quot; || type == &quot;error&quot; ||&lt;br/&gt;
         type == &quot;enum&quot; || type == &quot;fixed&quot;) {&lt;br/&gt;
         Name nm = getName(e, m, ns);&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;NodePtr result;&lt;br/&gt;
         if (type == &quot;record&quot; || type == &quot;error&quot;) 
{
             result = NodePtr(new NodeRecord());
             st[nm] = result;
@@ -446,12 +482,24 @@ static NodePtr makeNode(const Entity&amp;amp; e, const Object&amp;amp; m,
                 makeFixedNode(e, nm, m);
             st[nm] = result;
         }&lt;/li&gt;
	&lt;li&gt;return result;&lt;br/&gt;
     } else if (type == &quot;array&quot;) 
{
-        return makeArrayNode(e, m, st, ns);
+        result = makeArrayNode(e, m, st, ns);
     }
&lt;p&gt; else if (type == &quot;map&quot;) &lt;/p&gt;
{
-        return makeMapNode(e, m, st, ns);
+        result = makeMapNode(e, m, st, ns);
+    }
&lt;p&gt; else &lt;/p&gt;
{
+        result = makePrimitive(type);
     }
&lt;p&gt;+&lt;br/&gt;
+    if (result) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+        try {
+            result-&amp;gt;setLogicalType(makeLogicalType(e, m));
+        } catch (Exception&amp;amp; ex) {
+            // Per the standard we must ignore the logical type attribute if it
+            // is malformed.
+        }+        return result;+    }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
     throw Exception(boost::format(&quot;Unknown type definition: %1%&quot;)&lt;br/&gt;
         % e.toString());&lt;br/&gt;
 }&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/impl/GenericDatum.cc b/lang/c&lt;/ins&gt;+/impl/GenericDatum.cc&lt;br/&gt;
index b5998a84a..4dc50477d 100644&lt;/p&gt;
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/c++/impl/GenericDatum.cc&lt;br/&gt;
+++ b/lang/c++/impl/GenericDatum.cc&lt;br/&gt;
@@ -25,12 +25,15 @@ using std::vector;&lt;br/&gt;
 namespace avro {&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; GenericDatum::GenericDatum(const ValidSchema&amp;amp; schema) :&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;type_(schema.root()-&amp;gt;type())&lt;br/&gt;
+    type_(schema.root()-&amp;gt;type()),&lt;br/&gt;
+    logicalType_(schema.root()-&amp;gt;logicalType())
 {
     init(schema.root());
 }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;del&gt;GenericDatum::GenericDatum(const NodePtr&amp;amp; schema) : type_(schema&lt;/del&gt;&amp;gt;type())&lt;br/&gt;
+GenericDatum::GenericDatum(const NodePtr&amp;amp; schema) :&lt;br/&gt;
+    type_(schema-&amp;gt;type()),&lt;br/&gt;
+    logicalType_(schema-&amp;gt;logicalType())&lt;/p&gt;
 {
     init(schema);
 }
&lt;p&gt;@@ -41,6 +44,7 @@ void GenericDatum::init(const NodePtr&amp;amp; schema)&lt;br/&gt;
     if (type_ == AVRO_SYMBOLIC) &lt;/p&gt;
{
         sc = resolveSymbol(schema);
         type_ = sc-&amp;gt;type();
+        logicalType_ = sc-&amp;gt;logicalType();
     }
&lt;p&gt;     switch (type_) {&lt;br/&gt;
     case AVRO_NULL:&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/impl/LogicalType.cc b/lang/c&lt;/ins&gt;+/impl/LogicalType.cc&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..1e84dd200&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/c++/impl/LogicalType.cc&lt;br/&gt;
@@ -0,0 +1,81 @@&lt;br/&gt;
+/**&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+#include &quot;Exception.hh&quot;&lt;br/&gt;
+#include &quot;LogicalType.hh&quot;&lt;br/&gt;
+&lt;br/&gt;
+namespace avro {&lt;br/&gt;
+&lt;br/&gt;
+LogicalType::LogicalType(Type type)&lt;br/&gt;
+    : type_(type), precision_(0), scale_(0) {}&lt;br/&gt;
+&lt;br/&gt;
+LogicalType::Type LogicalType::type() const &lt;/p&gt;
{
+    return type_;
+}
&lt;p&gt;+&lt;br/&gt;
+void LogicalType::setPrecision(int precision) {&lt;br/&gt;
+    if (type_ != DECIMAL) &lt;/p&gt;
{
+        throw Exception(&quot;Only logical type DECIMAL can have precision&quot;);
+    }
&lt;p&gt;+    if (precision &amp;lt;= 0) &lt;/p&gt;
{
+        throw Exception(boost::format(&quot;Precision cannot be: %1%&quot;) % precision);
+    }
&lt;p&gt;+    precision_ = precision;&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+void LogicalType::setScale(int scale) {&lt;br/&gt;
+    if (type_ != DECIMAL) &lt;/p&gt;
{
+        throw Exception(&quot;Only logical type DECIMAL can have scale&quot;);
+    }
&lt;p&gt;+    if (scale &amp;lt; 0) &lt;/p&gt;
{
+        throw Exception(boost::format(&quot;Scale cannot be: %1%&quot;) % scale);
+    }
&lt;p&gt;+    scale_ = scale;&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+void LogicalType::printJson(std::ostream&amp;amp; os) const {&lt;br/&gt;
+    switch (type_) &lt;/p&gt;
{
+    case LogicalType::NONE:
+        break;
+    case LogicalType::DECIMAL:
+        os &amp;lt;&amp;lt; &quot;\&quot;logicalType\&quot;: \&quot;decimal\&quot;&quot;;
+        os &amp;lt;&amp;lt; &quot;, \&quot;precision\&quot;: &quot; &amp;lt;&amp;lt; precision_;
+        os &amp;lt;&amp;lt; &quot;, \&quot;scale\&quot;: &quot; &amp;lt;&amp;lt; scale_;
+        break;
+    case DATE:
+        os &amp;lt;&amp;lt; &quot;\&quot;logicalType\&quot;: \&quot;date\&quot;&quot;;
+        break;
+    case TIME_MILLIS:
+        os &amp;lt;&amp;lt; &quot;\&quot;logicalType\&quot;: \&quot;time-millis\&quot;&quot;;
+        break;
+    case TIME_MICROS:
+        os &amp;lt;&amp;lt; &quot;\&quot;logicalType\&quot;: \&quot;time-micros\&quot;&quot;;
+        break;
+    case TIMESTAMP_MILLIS:
+        os &amp;lt;&amp;lt; &quot;\&quot;logicalType\&quot;: \&quot;timestamp-millis\&quot;&quot;;
+        break;
+    case TIMESTAMP_MICROS:
+        os &amp;lt;&amp;lt; &quot;\&quot;logicalType\&quot;: \&quot;timestamp-micros\&quot;&quot;;
+        break;
+    case DURATION:
+        os &amp;lt;&amp;lt; &quot;\&quot;logicalType\&quot;: \&quot;duration\&quot;&quot;;
+        break;
+    }
&lt;p&gt;+}&lt;br/&gt;
+&lt;br/&gt;
+}  // namespace avro&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/impl/Node.cc b/lang/c&lt;/ins&gt;+/impl/Node.cc&lt;br/&gt;
index 5fa965f69..1beb1df0b 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/impl/Node.cc&lt;br/&gt;
+++ b/lang/c++/impl/Node.cc&lt;br/&gt;
@@ -16,6 +16,8 @@&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;limitations under the License.&lt;br/&gt;
  */&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+#include &amp;lt;cmath&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
 #include &quot;Node.hh&quot;&lt;/p&gt;

&lt;p&gt; namespace avro &lt;/p&gt;
{
@@ -80,4 +82,75 @@ bool Name::operator == (const Name&amp;amp; n) const
     return ns_ == n.ns_ &amp;amp;&amp;amp; simpleName_ == n.simpleName_;
 }

&lt;p&gt;+void Node::setLogicalType(LogicalType logicalType) {&lt;br/&gt;
+    checkLock();&lt;br/&gt;
+&lt;br/&gt;
+    // Check that the logical type is applicable to the node type.&lt;br/&gt;
+    switch (logicalType.type()) {&lt;br/&gt;
+    case LogicalType::NONE:&lt;br/&gt;
+        break;&lt;br/&gt;
+    case LogicalType::DECIMAL: {&lt;br/&gt;
+        if (type_ != AVRO_BYTES &amp;amp;&amp;amp; type_ != AVRO_FIXED) &lt;/p&gt;
{
+            throw Exception(&quot;DECIMAL logical type can annotate &quot;
+                            &quot;only BYTES or FIXED type&quot;);
+        }
&lt;p&gt;+        if (type_ == AVRO_FIXED) {&lt;br/&gt;
+            // Max precision that can be supported by the current size of&lt;br/&gt;
+            // the FIXED type.&lt;br/&gt;
+            long maxPrecision =&lt;br/&gt;
+                floor(log10(pow(2.0, 8.0 * fixedSize() - 1) - 1));&lt;br/&gt;
+            if (logicalType.precision() &amp;gt; maxPrecision) &lt;/p&gt;
{
+                throw Exception(
+                    boost::format(
+                        &quot;DECIMAL precision %1% is too large for the &quot;
+                        &quot;FIXED type of size %2%, precision cannot be &quot;
+                        &quot;larget than %3%&quot;) % logicalType.precision() %
+                        fixedSize() % maxPrecision);
+            }
&lt;p&gt;+        }&lt;br/&gt;
+        if (logicalType.scale() &amp;gt; logicalType.precision()) &lt;/p&gt;
{
+            throw Exception(&quot;DECIMAL scale cannot exceed precision&quot;);
+        }
&lt;p&gt;+        break;&lt;br/&gt;
+    }&lt;br/&gt;
+    case LogicalType::DATE:&lt;br/&gt;
+        if (type_ != AVRO_INT) &lt;/p&gt;
{
+            throw Exception(&quot;DATE logical type can only annotate INT type&quot;);
+        }
&lt;p&gt;+        break;&lt;br/&gt;
+    case LogicalType::TIME_MILLIS:&lt;br/&gt;
+        if (type_ != AVRO_INT) &lt;/p&gt;
{
+            throw Exception(&quot;TIME-MILLIS logical type can only annotate &quot;
+                            &quot;INT type&quot;);
+        }
&lt;p&gt;+        break;&lt;br/&gt;
+    case LogicalType::TIME_MICROS:&lt;br/&gt;
+        if (type_ != AVRO_LONG) &lt;/p&gt;
{
+            throw Exception(&quot;TIME-MICROS logical type can only annotate &quot;
+                            &quot;LONG type&quot;);
+        }
&lt;p&gt;+        break;&lt;br/&gt;
+    case LogicalType::TIMESTAMP_MILLIS:&lt;br/&gt;
+        if (type_ != AVRO_LONG) &lt;/p&gt;
{
+            throw Exception(&quot;TIMESTAMP-MILLIS logical type can only annotate &quot;
+                            &quot;LONG type&quot;);
+        }
&lt;p&gt;+        break;&lt;br/&gt;
+    case LogicalType::TIMESTAMP_MICROS:&lt;br/&gt;
+        if (type_ != AVRO_LONG) &lt;/p&gt;
{
+            throw Exception(&quot;TIMESTAMP-MICROS logical type can only annotate &quot;
+                            &quot;LONG type&quot;);
+        }
&lt;p&gt;+        break;&lt;br/&gt;
+    case LogicalType::DURATION:&lt;br/&gt;
+        if (type_ != AVRO_FIXED || fixedSize() != 12) &lt;/p&gt;
{
+            throw Exception(&quot;DURATION logical type can only annotate &quot;
+                            &quot;FIXED type of size 12&quot;);
+        }
&lt;p&gt;+        break;&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    logicalType_ = logicalType;&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
 } // namespace avro&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/impl/NodeImpl.cc b/lang/c&lt;/ins&gt;+/impl/NodeImpl.cc&lt;br/&gt;
index bdb05a0b5..6ba595f8a 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/impl/NodeImpl.cc&lt;br/&gt;
+++ b/lang/c++/impl/NodeImpl.cc&lt;br/&gt;
@@ -221,7 +221,19 @@ NodeSymbolic::resolve(const Node &amp;amp;reader) const&lt;br/&gt;
 void&lt;br/&gt;
 NodePrimitive::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
+    bool hasLogicalType = logicalType().type() != LogicalType::NONE;&lt;br/&gt;
+&lt;br/&gt;
+    if (hasLogicalType) {&lt;br/&gt;
+        os &amp;lt;&amp;lt; &quot;&lt;/p&gt;
{\n&quot; &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;type\&quot;: &quot;;
+    }
&lt;p&gt;+&lt;br/&gt;
     os &amp;lt;&amp;lt; &apos;\&quot;&apos; &amp;lt;&amp;lt; type() &amp;lt;&amp;lt; &apos;\&quot;&apos;;&lt;br/&gt;
+&lt;br/&gt;
+    if (hasLogicalType) &lt;/p&gt;
{
+        os &amp;lt;&amp;lt; &quot;,\n&quot; &amp;lt;&amp;lt; indent(depth);
+        logicalType().printJson(os);
+        os &amp;lt;&amp;lt; &quot;\n}
&lt;p&gt;&quot;;&lt;br/&gt;
+    }&lt;br/&gt;
     if (getDoc().size()) &lt;/p&gt;
{
         os &amp;lt;&amp;lt; &quot;,\n&quot; &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;doc\&quot;: \&quot;&quot;
            &amp;lt;&amp;lt; escape(getDoc()) &amp;lt;&amp;lt; &quot;\&quot;&quot;;
@@ -522,8 +534,14 @@ NodeFixed::printJson(std::ostream &amp;amp;os, int depth) const
            &amp;lt;&amp;lt; escape(getDoc()) &amp;lt;&amp;lt; &quot;\&quot;,\n&quot;;
     }
&lt;p&gt;     printName(os, nameAttribute_.get(), depth);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;size\&quot;: &quot; &amp;lt;&amp;lt; sizeAttribute_.get() &amp;lt;&amp;lt; &quot;\n&quot;;&lt;/li&gt;
	&lt;li&gt;os &amp;lt;&amp;lt; indent(--depth) &amp;lt;&amp;lt; &apos;}&apos;;&lt;br/&gt;
+    os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;size\&quot;: &quot; &amp;lt;&amp;lt; sizeAttribute_.get();&lt;br/&gt;
+&lt;br/&gt;
+    if (logicalType().type() != LogicalType::NONE) 
{
+      os &amp;lt;&amp;lt; &quot;,\n&quot; &amp;lt;&amp;lt; indent(depth);
+      logicalType().printJson(os);
+    }
&lt;p&gt;+&lt;br/&gt;
+    os &amp;lt;&amp;lt; &quot;\n&quot; &amp;lt;&amp;lt; indent(--depth) &amp;lt;&amp;lt; &apos;}&apos;;&lt;br/&gt;
 }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; } // namespace avro&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/test/SchemaTests.cc b/lang/c&lt;/ins&gt;+/test/SchemaTests.cc&lt;br/&gt;
index f6d6195da..3f885eb9b 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/test/SchemaTests.cc&lt;br/&gt;
+++ b/lang/c++/test/SchemaTests.cc&lt;br/&gt;
@@ -17,6 +17,7 @@&lt;br/&gt;
  */&lt;/p&gt;

&lt;p&gt; #include &quot;Compiler.hh&quot;&lt;br/&gt;
+#include &quot;GenericDatum.hh&quot;&lt;br/&gt;
 #include &quot;ValidSchema.hh&quot;&lt;/p&gt;

&lt;p&gt; #include &amp;lt;boost/test/included/unit_test_framework.hpp&amp;gt;&lt;br/&gt;
@@ -196,9 +197,35 @@ const char* roundTripSchemas[] = {&lt;br/&gt;
     &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;namespace\&quot;:\&quot;org.apache.hadoop.avro\&quot;,&quot;
           &quot;\&quot;name\&quot;:\&quot;MyFixed\&quot;,\&quot;size\&quot;:1}
&lt;p&gt;&quot;,&lt;br/&gt;
     &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;size\&quot;:1}
&lt;p&gt;&quot;,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;size\&quot;:1}
&lt;p&gt;&quot;&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;size\&quot;:1}
&lt;p&gt;&quot;,&lt;br/&gt;
+&lt;br/&gt;
+    // Logical types&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;bytes\&quot;,\&quot;logicalType\&quot;:\&quot;decimal\&quot;,\&quot;precision\&quot;:12,\&quot;scale\&quot;:6}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;name\&quot;:\&quot;test\&quot;,\&quot;size\&quot;:16,\&quot;logicalType\&quot;:\&quot;decimal\&quot;,\&quot;precision\&quot;:38,\&quot;scale\&quot;:9}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;logicalType\&quot;:\&quot;date\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;logicalType\&quot;:\&quot;time-millis\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;long\&quot;,\&quot;logicalType\&quot;:\&quot;time-micros\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;long\&quot;,\&quot;logicalType\&quot;:\&quot;timestamp-millis\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;long\&quot;,\&quot;logicalType\&quot;:\&quot;timestamp-micros\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;name\&quot;:\&quot;test\&quot;,\&quot;size\&quot;:12,\&quot;logicalType\&quot;:\&quot;duration\&quot;}
&lt;p&gt;&quot;&lt;br/&gt;
 };&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+const char* malformedLogicalTypes[] = {&lt;br/&gt;
+    // Wrong base type.&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;long\&quot;,\&quot;logicalType\&quot;: \&quot;decimal\&quot;,\&quot;precision\&quot;: 10}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;string\&quot;,\&quot;logicalType\&quot;:\&quot;date\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;string\&quot;,\&quot;logicalType\&quot;:\&quot;time-millis\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;string\&quot;,\&quot;logicalType\&quot;:\&quot;time-micros\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;string\&quot;,\&quot;logicalType\&quot;:\&quot;timestamp-millis\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;string\&quot;,\&quot;logicalType\&quot;:\&quot;timestamp-micros\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;string\&quot;,\&quot;logicalType\&quot;:\&quot;duration\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
+    // Missing the required field &apos;precision&apos;.&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;bytes\&quot;,\&quot;logicalType\&quot;:\&quot;decimal\&quot;}
&lt;p&gt;&quot;,&lt;br/&gt;
+    // The claimed precision is not supported by the size of the fixed type.&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;size\&quot;:4,\&quot;name\&quot;:\&quot;a\&quot;,\&quot;precision\&quot;:20}
&lt;p&gt;&quot;,&lt;br/&gt;
+    // Scale is larger than precision.&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;bytes\&quot;,\&quot;logicalType\&quot;:\&quot;decimal\&quot;,\&quot;precision\&quot;:5,\&quot;scale\&quot;:10}
&lt;p&gt;&quot;&lt;br/&gt;
+};&lt;br/&gt;
 const char* schemasToCompact[] = {&lt;br/&gt;
     // Schema without any whitespace&lt;br/&gt;
     &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;record\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;fields\&quot;:[]}
&lt;p&gt;&quot;,&lt;br/&gt;
@@ -276,6 +303,133 @@ static void testCompactSchemas()&lt;br/&gt;
   }&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;+static void testLogicalTypes()&lt;br/&gt;
+{&lt;br/&gt;
+    const char* bytesDecimalType = &quot;&lt;/p&gt;
{\n\
+        \&quot;type\&quot;: \&quot;bytes\&quot;,\n\
+        \&quot;logicalType\&quot;: \&quot;decimal\&quot;,\n\
+        \&quot;precision\&quot;: 10,\n\
+        \&quot;scale\&quot;: 2\n\
+    }
&lt;p&gt;&quot;;&lt;br/&gt;
+    const char* fixedDecimalType = &quot;&lt;/p&gt;
{\n\
+        \&quot;type\&quot;: \&quot;fixed\&quot;,\n\
+        \&quot;size\&quot;: 16,\n\
+        \&quot;name\&quot;: \&quot;fixedDecimalType\&quot;,\n\
+        \&quot;logicalType\&quot;: \&quot;decimal\&quot;,\n\
+        \&quot;precision\&quot;: 12,\n\
+        \&quot;scale\&quot;: 6\n\
+    }
&lt;p&gt;&quot;;&lt;br/&gt;
+    const char* dateType = &quot;&lt;/p&gt;
{\n\
+        \&quot;type\&quot;: \&quot;int\&quot;, \&quot;logicalType\&quot;: \&quot;date\&quot;\n\
+    }
&lt;p&gt;&quot;;&lt;br/&gt;
+    const char* timeMillisType = &quot;&lt;/p&gt;
{\n\
+        \&quot;type\&quot;: \&quot;int\&quot;, \&quot;logicalType\&quot;: \&quot;time-millis\&quot;\n\
+    }
&lt;p&gt;&quot;;&lt;br/&gt;
+    const char* timeMicrosType = &quot;&lt;/p&gt;
{\n\
+        \&quot;type\&quot;: \&quot;long\&quot;, \&quot;logicalType\&quot;: \&quot;time-micros\&quot;\n\
+    }
&lt;p&gt;&quot;;&lt;br/&gt;
+    const char* timestampMillisType = &quot;&lt;/p&gt;
{\n\
+        \&quot;type\&quot;: \&quot;long\&quot;, \&quot;logicalType\&quot;: \&quot;timestamp-millis\&quot;\n\
+    }
&lt;p&gt;&quot;;&lt;br/&gt;
+    const char* timestampMicrosType = &quot;&lt;/p&gt;
{\n\
+        \&quot;type\&quot;: \&quot;long\&quot;, \&quot;logicalType\&quot;: \&quot;timestamp-micros\&quot;\n\
+    }
&lt;p&gt;&quot;;&lt;br/&gt;
+    const char* durationType = &quot;&lt;/p&gt;
{\n\
+        \&quot;type\&quot;: \&quot;fixed\&quot;,\n\
+        \&quot;size\&quot;: 12,\n\
+        \&quot;name\&quot;: \&quot;durationType\&quot;,\n\
+        \&quot;logicalType\&quot;: \&quot;duration\&quot;\n\
+    }
&lt;p&gt;&quot;;&lt;br/&gt;
+    &lt;/p&gt;
{
+        BOOST_TEST_CHECKPOINT(bytesDecimalType);
+        ValidSchema schema1 = compileJsonSchemaFromString(bytesDecimalType);
+        BOOST_CHECK(schema1.root()-&amp;gt;type() == AVRO_BYTES);
+        LogicalType logicalType = schema1.root()-&amp;gt;logicalType();
+        BOOST_CHECK(logicalType.type() == LogicalType::DECIMAL);
+        BOOST_CHECK(logicalType.precision() == 10);
+        BOOST_CHECK(logicalType.scale() == 2);
+
+        BOOST_TEST_CHECKPOINT(fixedDecimalType);
+        ValidSchema schema2 = compileJsonSchemaFromString(fixedDecimalType);
+        BOOST_CHECK(schema2.root()-&amp;gt;type() == AVRO_FIXED);
+        logicalType = schema2.root()-&amp;gt;logicalType();
+        BOOST_CHECK(logicalType.type() == LogicalType::DECIMAL);
+        BOOST_CHECK(logicalType.precision() == 12);
+        BOOST_CHECK(logicalType.scale() == 6);
+
+        GenericDatum bytesDatum(schema1);
+        BOOST_CHECK(bytesDatum.logicalType().type() == LogicalType::DECIMAL);
+        GenericDatum fixedDatum(schema2);
+        BOOST_CHECK(fixedDatum.logicalType().type() == LogicalType::DECIMAL);
+    }
&lt;p&gt;+    &lt;/p&gt;
{
+        BOOST_TEST_CHECKPOINT(dateType);
+        ValidSchema schema = compileJsonSchemaFromString(dateType);
+        BOOST_CHECK(schema.root()-&amp;gt;type() == AVRO_INT);
+        BOOST_CHECK(schema.root()-&amp;gt;logicalType().type() == LogicalType::DATE);
+        GenericDatum datum(schema);
+        BOOST_CHECK(datum.logicalType().type() == LogicalType::DATE);
+    }
&lt;p&gt;+    &lt;/p&gt;
{
+        BOOST_TEST_CHECKPOINT(timeMillisType);
+        ValidSchema schema = compileJsonSchemaFromString(timeMillisType);
+        BOOST_CHECK(schema.root()-&amp;gt;type() == AVRO_INT);
+        LogicalType logicalType = schema.root()-&amp;gt;logicalType();
+        BOOST_CHECK(logicalType.type() == LogicalType::TIME_MILLIS);
+        GenericDatum datum(schema);
+        BOOST_CHECK(datum.logicalType().type() == LogicalType::TIME_MILLIS);
+    }
&lt;p&gt;+    &lt;/p&gt;
{
+        BOOST_TEST_CHECKPOINT(timeMicrosType);
+        ValidSchema schema = compileJsonSchemaFromString(timeMicrosType);
+        BOOST_CHECK(schema.root()-&amp;gt;type() == AVRO_LONG);
+        LogicalType logicalType = schema.root()-&amp;gt;logicalType();
+        BOOST_CHECK(logicalType.type() == LogicalType::TIME_MICROS);
+        GenericDatum datum(schema);
+        BOOST_CHECK(datum.logicalType().type() == LogicalType::TIME_MICROS);
+    }
&lt;p&gt;+    &lt;/p&gt;
{
+        BOOST_TEST_CHECKPOINT(timestampMillisType);
+        ValidSchema schema = compileJsonSchemaFromString(timestampMillisType);
+        BOOST_CHECK(schema.root()-&amp;gt;type() == AVRO_LONG);
+        LogicalType logicalType = schema.root()-&amp;gt;logicalType();
+        BOOST_CHECK(logicalType.type() == LogicalType::TIMESTAMP_MILLIS);
+        GenericDatum datum(schema);
+        BOOST_CHECK(datum.logicalType().type() ==
+                    LogicalType::TIMESTAMP_MILLIS);
+    }
&lt;p&gt;+    &lt;/p&gt;
{
+        BOOST_TEST_CHECKPOINT(timestampMicrosType);
+        ValidSchema schema = compileJsonSchemaFromString(timestampMicrosType);
+        BOOST_CHECK(schema.root()-&amp;gt;type() == AVRO_LONG);
+        LogicalType logicalType = schema.root()-&amp;gt;logicalType();
+        BOOST_CHECK(logicalType.type() == LogicalType::TIMESTAMP_MICROS);
+        GenericDatum datum(schema);
+        BOOST_CHECK(datum.logicalType().type() ==
+                    LogicalType::TIMESTAMP_MICROS);
+    }
&lt;p&gt;+    &lt;/p&gt;
{
+        BOOST_TEST_CHECKPOINT(durationType);
+        ValidSchema schema = compileJsonSchemaFromString(durationType);
+        BOOST_CHECK(schema.root()-&amp;gt;type() == AVRO_FIXED);
+        BOOST_CHECK(schema.root()-&amp;gt;fixedSize() == 12);
+        LogicalType logicalType = schema.root()-&amp;gt;logicalType();
+        BOOST_CHECK(logicalType.type() == LogicalType::DURATION);
+        GenericDatum datum(schema);
+        BOOST_CHECK(datum.logicalType().type() == LogicalType::DURATION);
+    }
&lt;p&gt;+}&lt;br/&gt;
+&lt;br/&gt;
+static void testMalformedLogicalTypes(const char* schema)&lt;br/&gt;
+&lt;/p&gt;
{
+    BOOST_TEST_CHECKPOINT(schema);
+    ValidSchema parsedSchema = compileJsonSchemaFromString(schema);
+    LogicalType logicalType = parsedSchema.root()-&amp;gt;logicalType();
+    BOOST_CHECK(logicalType.type() == LogicalType::NONE);
+    GenericDatum datum(parsedSchema);
+    BOOST_CHECK(datum.logicalType().type() == LogicalType::NONE);
+}
&lt;p&gt;+&lt;br/&gt;
 }&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;@@ -296,6 +450,9 @@ init_unit_test_suite(int argc, char* argv[])&lt;br/&gt;
         avro::schema::basicSchemaErrors);&lt;br/&gt;
     ADD_PARAM_TEST(ts, avro::schema::testCompile, avro::schema::basicSchemas);&lt;br/&gt;
     ADD_PARAM_TEST(ts, avro::schema::testRoundTrip, avro::schema::roundTripSchemas);&lt;br/&gt;
+    ts-&amp;gt;add(BOOST_TEST_CASE(&amp;amp;avro::schema::testLogicalTypes));&lt;br/&gt;
+    ADD_PARAM_TEST(ts, avro::schema::testMalformedLogicalTypes,&lt;br/&gt;
+                   avro::schema::malformedLogicalTypes);&lt;br/&gt;
     ts-&amp;gt;add(BOOST_TEST_CASE(&amp;amp;avro::schema::testCompactSchemas));&lt;br/&gt;
     return ts;&lt;br/&gt;
 }&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16686581" author="jira-bot" created="Wed, 14 Nov 2018 14:29:24 +0000"  >&lt;p&gt;Commit 113ea7f4397fd9a24746d1ab7c8124d3c3bf6bac in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=aniket486&quot; class=&quot;user-hover&quot; rel=&quot;aniket486&quot;&gt;Aniket Mokashi&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=113ea7f&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=113ea7f&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client. (#379)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Added support for logical types in the C++ client.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Addressed thiru&apos;s comments.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;fix tests&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;fix tests&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;fix string formatting&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;fix string formatting&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;fix string formatting&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16686582" author="thiru_mg" created="Wed, 14 Nov 2018 14:30:09 +0000"  >&lt;p&gt;PR merged. Thanks a ton &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=aniket486&quot; class=&quot;user-hover&quot; rel=&quot;aniket486&quot;&gt;Aniket Mokashi&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16713124" author="githubbot" created="Fri, 7 Dec 2018 17:42:13 +0000"  >&lt;p&gt;dkulp commented on issue #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302#issuecomment-445309218&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302#issuecomment-445309218&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   This was merged as part of #379&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16713125" author="githubbot" created="Fri, 7 Dec 2018 17:42:14 +0000"  >&lt;p&gt;dkulp closed pull request #302: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1702&quot; title=&quot;Add LogicalType support to c++ library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1702&quot;&gt;&lt;del&gt;AVRO-1702&lt;/del&gt;&lt;/a&gt;: Added support for logical types in the C++ client.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/302&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/302&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/c+&lt;ins&gt;/CMakeLists.txt b/lang/c&lt;/ins&gt;+/CMakeLists.txt&lt;br/&gt;
index be3921521..d0b4c98f2 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/CMakeLists.txt&lt;br/&gt;
+++ b/lang/c++/CMakeLists.txt&lt;br/&gt;
@@ -78,7 +78,7 @@ add_definitions (${Boost_LIB_DIAGNOSTIC_DEFINITIONS})&lt;br/&gt;
 include_directories (api ${CMAKE_CURRENT_BINARY_DIR} ${Boost_INCLUDE_DIRS})&lt;/p&gt;

&lt;p&gt; set (AVRO_SOURCE_FILES&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;impl/Compiler.cc impl/Node.cc&lt;br/&gt;
+        impl/Compiler.cc impl/Node.cc impl/LogicalType.cc&lt;br/&gt;
         impl/NodeImpl.cc impl/ResolverSchema.cc impl/Schema.cc&lt;br/&gt;
         impl/Types.cc impl/ValidSchema.cc impl/Zigzag.cc&lt;br/&gt;
         impl/BinaryEncoder.cc impl/BinaryDecoder.cc&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/api/GenericDatum.hh b/lang/c&lt;/ins&gt;+/api/GenericDatum.hh&lt;br/&gt;
index edc4fbc43..0273443da 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/c++/api/GenericDatum.hh&lt;br/&gt;
+++ b/lang/c++/api/GenericDatum.hh&lt;br/&gt;
@@ -26,6 +26,7 @@&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; #include &amp;lt;boost/any.hpp&amp;gt;&lt;/p&gt;

&lt;p&gt;+#include &quot;LogicalType.hh&quot;&lt;br/&gt;
 #include &quot;Node.hh&quot;&lt;br/&gt;
 #include &quot;ValidSchema.hh&quot;&lt;/p&gt;

&lt;p&gt;@@ -54,12 +55,18 @@ namespace avro {&lt;br/&gt;
  */&lt;br/&gt;
 class AVRO_DECL GenericDatum {&lt;br/&gt;
     Type type_;&lt;br/&gt;
+    LogicalType logicalType_;&lt;br/&gt;
     boost::any value_;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(Type t) : type_(t) { }&lt;br/&gt;
+    GenericDatum(Type t)&lt;br/&gt;
+        : type_(t), logicalType_(LogicalType::NONE) { }&lt;br/&gt;
+&lt;br/&gt;
+    GenericDatum(Type t, LogicalType logicalType)&lt;br/&gt;
+        : type_(t), logicalType_(logicalType) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     template &amp;lt;typename T&amp;gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(Type t, const T&amp;amp; v) : type_(t), value_(v) { }&lt;br/&gt;
+    GenericDatum(Type t, LogicalType logicalType, const T&amp;amp; v)&lt;br/&gt;
+        : type_(t), logicalType_(logicalType), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     void init(const NodePtr&amp;amp; schema);&lt;br/&gt;
 public:&lt;br/&gt;
@@ -68,6 +75,11 @@ public:&lt;br/&gt;
      */&lt;br/&gt;
     Type type() const;&lt;/p&gt;

&lt;p&gt;+    /**&lt;br/&gt;
+     * The avro logical type that augments the main data type this datum holds.&lt;br/&gt;
+     */&lt;br/&gt;
+    LogicalType logicalType() const;&lt;br/&gt;
+&lt;br/&gt;
     /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Returns the value held by this datum.&lt;/li&gt;
	&lt;li&gt;T The type for the value. This must correspond to the&lt;br/&gt;
@@ -104,30 +116,36 @@ public:&lt;br/&gt;
     void selectBranch(size_t branch);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_NULL datum.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum() : type_(AVRO_NULL) { }&lt;br/&gt;
+    GenericDatum() : type_(AVRO_NULL), logicalType_(LogicalType::NONE) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_BOOL datum whose value is of type bool.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(bool v) : type_(AVRO_BOOL), value_(v) { }&lt;br/&gt;
+    GenericDatum(bool v)&lt;br/&gt;
+        : type_(AVRO_BOOL), logicalType_(LogicalType::NONE), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_INT datum whose value is of type int32_t.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(int32_t v) : type_(AVRO_INT), value_(v) { }&lt;br/&gt;
+    GenericDatum(int32_t v)&lt;br/&gt;
+        : type_(AVRO_INT), logicalType_(LogicalType::NONE), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_LONG datum whose value is of type int64_t.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(int64_t v) : type_(AVRO_LONG), value_(v) { }&lt;br/&gt;
+    GenericDatum(int64_t v)&lt;br/&gt;
+        : type_(AVRO_LONG), logicalType_(LogicalType::NONE), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_FLOAT datum whose value is of type float.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(float v) : type_(AVRO_FLOAT), value_(v) { }&lt;br/&gt;
+    GenericDatum(float v)&lt;br/&gt;
+        : type_(AVRO_FLOAT), logicalType_(LogicalType::NONE), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_DOUBLE datum whose value is of type double.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(double v) : type_(AVRO_DOUBLE), value_(v) { }&lt;br/&gt;
+    GenericDatum(double v)&lt;br/&gt;
+        : type_(AVRO_DOUBLE), logicalType_(LogicalType::NONE), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_STRING datum whose value is of type std::string.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenericDatum(const std::string&amp;amp; v) : type_(AVRO_STRING), value_(v) { }&lt;br/&gt;
+    GenericDatum(const std::string&amp;amp; v)&lt;br/&gt;
+        : type_(AVRO_STRING), logicalType_(LogicalType::NONE), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /// Makes a new AVRO_BYTES datum whose value is of type&lt;br/&gt;
     /// std::vector&amp;lt;uint8_t&amp;gt;.&lt;br/&gt;
     GenericDatum(const std::vector&amp;lt;uint8_t&amp;gt;&amp;amp; v) :&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;type_(AVRO_BYTES), value_(v) { }&lt;br/&gt;
+        type_(AVRO_BYTES), logicalType_(LogicalType::NONE), value_(v) { }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructs a datum corresponding to the given avro type.&lt;br/&gt;
@@ -145,7 +163,7 @@ public:&lt;br/&gt;
      */&lt;br/&gt;
     template&amp;lt;typename T&amp;gt;&lt;br/&gt;
     GenericDatum(const NodePtr&amp;amp; schema, const T&amp;amp; v) :&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;type_(schema-&amp;gt;type()) {&lt;br/&gt;
+        type_(schema-&amp;gt;type()), logicalType_(schema-&amp;gt;logicalType()) 
{
         init(schema);
         *boost::any_cast&amp;lt;T&amp;gt;(&amp;amp;value_) = v;
     }
&lt;p&gt;@@ -494,6 +512,10 @@ inline Type GenericDatum::type() const &lt;/p&gt;
{
         type_;
 }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+inline LogicalType GenericDatum::logicalType() const &lt;/p&gt;
{
+    return logicalType_;
+}
&lt;p&gt;+&lt;br/&gt;
 template&amp;lt;typename T&amp;gt; T&amp;amp; GenericDatum::value() {&lt;br/&gt;
     return (type_ == AVRO_UNION) ?&lt;br/&gt;
         boost::any_cast&amp;lt;GenericUnion&amp;gt;(&amp;amp;value_)-&amp;gt;datum().value&amp;lt;T&amp;gt;() :&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/api/LogicalType.hh b/lang/c&lt;/ins&gt;+/api/LogicalType.hh&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..46c0e7645&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/c++/api/LogicalType.hh&lt;br/&gt;
@@ -0,0 +1,64 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+#ifndef avro_LogicalType_hh__&lt;br/&gt;
+#define avro_LogicalType_hh__&lt;br/&gt;
+&lt;br/&gt;
+#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+#include &quot;Config.hh&quot;&lt;br/&gt;
+&lt;br/&gt;
+namespace avro {&lt;br/&gt;
+&lt;br/&gt;
+class AVRO_DECL LogicalType {&lt;br/&gt;
+  public:&lt;br/&gt;
+    enum Type &lt;/p&gt;
{
+        NONE,
+        DECIMAL,
+        DATE,
+        TIME_MILLIS,
+        TIME_MICROS,
+        TIMESTAMP_MILLIS,
+        TIMESTAMP_MICROS,
+        DURATION
+    }
&lt;p&gt;;&lt;br/&gt;
+&lt;br/&gt;
+    explicit LogicalType(Type type);&lt;br/&gt;
+&lt;br/&gt;
+    Type type() const;&lt;br/&gt;
+&lt;br/&gt;
+    // Precision and scale can only be set for the DECIMAL logical type.&lt;br/&gt;
+    // Precision must be positive and scale must be either positive or zero. The&lt;br/&gt;
+    // setters will throw an exception if they are called on any type other&lt;br/&gt;
+    // than DECIMAL.&lt;br/&gt;
+    void setPrecision(int precision);&lt;br/&gt;
+    int precision() const &lt;/p&gt;
{ return precision_; }
&lt;p&gt;+    void setScale(int scale);&lt;br/&gt;
+    int scale() const &lt;/p&gt;
{ return scale_; }
&lt;p&gt;+&lt;br/&gt;
+    void printJson(std::ostream&amp;amp; os) const;&lt;br/&gt;
+&lt;br/&gt;
+  private:&lt;br/&gt;
+    Type type_;&lt;br/&gt;
+    int precision_;&lt;br/&gt;
+    int scale_;&lt;br/&gt;
+};&lt;br/&gt;
+&lt;br/&gt;
+}  // namespace avro&lt;br/&gt;
+&lt;br/&gt;
+#endif&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/api/Node.hh b/lang/c&lt;/ins&gt;+/api/Node.hh&lt;br/&gt;
index ff227b9e4..fe42a26b5 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/api/Node.hh&lt;br/&gt;
+++ b/lang/c++/api/Node.hh&lt;br/&gt;
@@ -26,6 +26,7 @@&lt;br/&gt;
 #include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;/p&gt;

&lt;p&gt; #include &quot;Exception.hh&quot;&lt;br/&gt;
+#include &quot;LogicalType.hh&quot;&lt;br/&gt;
 #include &quot;Types.hh&quot;&lt;br/&gt;
 #include &quot;SchemaResolution.hh&quot;&lt;/p&gt;

&lt;p&gt;@@ -91,6 +92,7 @@ class AVRO_DECL Node : private boost::noncopyable&lt;/p&gt;

&lt;p&gt;     Node(Type type) :&lt;br/&gt;
         type_(type),&lt;br/&gt;
+        logicalType_(LogicalType::NONE),&lt;br/&gt;
         locked_(false)&lt;br/&gt;
     {}&lt;/p&gt;

&lt;p&gt;@@ -100,6 +102,12 @@ class AVRO_DECL Node : private boost::noncopyable&lt;br/&gt;
         return type_;&lt;br/&gt;
     }&lt;/p&gt;

&lt;p&gt;+    LogicalType logicalType() const &lt;/p&gt;
{
+        return logicalType_;
+    }
&lt;p&gt;+&lt;br/&gt;
+    void setLogicalType(LogicalType logicalType);&lt;br/&gt;
+&lt;br/&gt;
     void lock() &lt;/p&gt;
{
         locked_ = true;
     }
&lt;p&gt;@@ -172,6 +180,7 @@ class AVRO_DECL Node : private boost::noncopyable&lt;br/&gt;
   private:&lt;/p&gt;

&lt;p&gt;     const Type type_;&lt;br/&gt;
+    LogicalType logicalType_;&lt;br/&gt;
     bool locked_;&lt;br/&gt;
 };&lt;/p&gt;

&lt;p&gt;diff --git a/lang/c+&lt;ins&gt;/impl/Compiler.cc b/lang/c&lt;/ins&gt;+/impl/Compiler.cc&lt;br/&gt;
index be5fe3f86..ae17dc0cd 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/impl/Compiler.cc&lt;br/&gt;
+++ b/lang/c++/impl/Compiler.cc&lt;br/&gt;
@@ -100,6 +100,13 @@ static NodePtr makeNode(const std::string&amp;amp; t, SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
     throw Exception(boost::format(&quot;Unknown type: %1%&quot;) % n.fullname());&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;+/** Returns &quot;true&quot; if the field is in the container */&lt;br/&gt;
+// e.g.: can be false for non-mandatory fields&lt;br/&gt;
+bool containsField(const Entity&amp;amp; e, const Object&amp;amp; m, const string&amp;amp; fieldName) &lt;/p&gt;
{
+    Object::const_iterator it = m.find(fieldName);
+    return (it != m.end());
+}
&lt;p&gt;+&lt;br/&gt;
 const json::Object::const_iterator findField(const Entity&amp;amp; e,&lt;br/&gt;
     const Object&amp;amp; m, const string&amp;amp; fieldName)&lt;/p&gt;
 {
@@ -327,6 +334,44 @@ static NodePtr makeRecordNode(const Entity&amp;amp; e,
         fieldValues, fieldNames, defaultValues));
 }

&lt;p&gt;+static LogicalType makeLogicalType(const Entity&amp;amp; e, const Object&amp;amp; m) {&lt;br/&gt;
+    if (!containsField(e, m, &quot;logicalType&quot;)) &lt;/p&gt;
{
+        return LogicalType(LogicalType::NONE);
+    }
&lt;p&gt;+&lt;br/&gt;
+    const std::string&amp;amp; typeField = getStringField(e, m, &quot;logicalType&quot;);&lt;br/&gt;
+&lt;br/&gt;
+    if (typeField == &quot;decimal&quot;) {&lt;br/&gt;
+        LogicalType decimalType(LogicalType::DECIMAL);&lt;br/&gt;
+        try {&lt;br/&gt;
+            decimalType.setPrecision(getLongField(e, m, &quot;precision&quot;));&lt;br/&gt;
+            if (containsField(e, m, &quot;scale&quot;)) &lt;/p&gt;
{
+                decimalType.setScale(getLongField(e, m, &quot;scale&quot;));
+            }
&lt;p&gt;+        } catch (Exception&amp;amp; ex) &lt;/p&gt;
{
+            // If any part of the logical type is malformed, per the standard we
+            // must ignore the whole attribute.
+            return LogicalType(LogicalType::NONE);
+        }
&lt;p&gt;+        return decimalType;&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    LogicalType::Type t = LogicalType::NONE;&lt;br/&gt;
+    if (typeField == &quot;date&quot;)&lt;br/&gt;
+        t = LogicalType::DATE;&lt;br/&gt;
+    else if (typeField == &quot;time-millis&quot;)&lt;br/&gt;
+        t = LogicalType::TIME_MILLIS;&lt;br/&gt;
+    else if (typeField == &quot;time-micros&quot;)&lt;br/&gt;
+        t = LogicalType::TIME_MICROS;&lt;br/&gt;
+    else if (typeField == &quot;timestamp-millis&quot;)&lt;br/&gt;
+        t = LogicalType::TIMESTAMP_MILLIS;&lt;br/&gt;
+    else if (typeField == &quot;timestamp-micros&quot;)&lt;br/&gt;
+        t = LogicalType::TIMESTAMP_MICROS;&lt;br/&gt;
+    else if (typeField == &quot;duration&quot;)&lt;br/&gt;
+        t = LogicalType::DURATION;&lt;br/&gt;
+    return LogicalType(t);&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
 static NodePtr makeEnumNode(const Entity&amp;amp; e,&lt;br/&gt;
     const Name&amp;amp; name, const Object&amp;amp; m)&lt;br/&gt;
 {&lt;br/&gt;
@@ -397,12 +442,10 @@ static NodePtr makeNode(const Entity&amp;amp; e, const Object&amp;amp; m,&lt;br/&gt;
     SymbolTable&amp;amp; st, const string&amp;amp; ns)&lt;br/&gt;
 {&lt;br/&gt;
     const string&amp;amp; type = getStringField(e, m, &quot;type&quot;);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if (NodePtr result = makePrimitive(type)) 
{
-        return result;
-    }
&lt;p&gt; else if (type == &quot;record&quot; || type == &quot;error&quot; ||&lt;br/&gt;
+    NodePtr result;&lt;br/&gt;
+    if (type == &quot;record&quot; || type == &quot;error&quot; ||&lt;br/&gt;
         type == &quot;enum&quot; || type == &quot;fixed&quot;) {&lt;br/&gt;
         Name nm = getName(e, m, ns);&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;NodePtr result;&lt;br/&gt;
         if (type == &quot;record&quot; || type == &quot;error&quot;) 
{
             result = NodePtr(new NodeRecord());
             st[nm] = result;
@@ -414,12 +457,24 @@ static NodePtr makeNode(const Entity&amp;amp; e, const Object&amp;amp; m,
                 makeFixedNode(e, nm, m);
             st[nm] = result;
         }&lt;/li&gt;
	&lt;li&gt;return result;&lt;br/&gt;
     } else if (type == &quot;array&quot;) 
{
-        return makeArrayNode(e, m, st, ns);
+        result = makeArrayNode(e, m, st, ns);
     }
&lt;p&gt; else if (type == &quot;map&quot;) &lt;/p&gt;
{
-        return makeMapNode(e, m, st, ns);
+        result = makeMapNode(e, m, st, ns);
+    }
&lt;p&gt; else &lt;/p&gt;
{
+        result = makePrimitive(type);
+    }
&lt;p&gt;+&lt;br/&gt;
+    if (result) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+        try {
+            result-&amp;gt;setLogicalType(makeLogicalType(e, m));
+        } catch (Exception&amp;amp; ex) {
+            // Per the standard we must ignore the logical type attribute if it
+            // is malformed.
+        }+        return result;     }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
     throw Exception(boost::format(&quot;Unknown type definition: %1%&quot;)&lt;br/&gt;
         % e.toString());&lt;br/&gt;
 }&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/impl/GenericDatum.cc b/lang/c&lt;/ins&gt;+/impl/GenericDatum.cc&lt;br/&gt;
index b5998a84a..4dc50477d 100644&lt;/p&gt;
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/c++/impl/GenericDatum.cc&lt;br/&gt;
+++ b/lang/c++/impl/GenericDatum.cc&lt;br/&gt;
@@ -25,12 +25,15 @@ using std::vector;&lt;br/&gt;
 namespace avro {&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; GenericDatum::GenericDatum(const ValidSchema&amp;amp; schema) :&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;type_(schema.root()-&amp;gt;type())&lt;br/&gt;
+    type_(schema.root()-&amp;gt;type()),&lt;br/&gt;
+    logicalType_(schema.root()-&amp;gt;logicalType())
 {
     init(schema.root());
 }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;del&gt;GenericDatum::GenericDatum(const NodePtr&amp;amp; schema) : type_(schema&lt;/del&gt;&amp;gt;type())&lt;br/&gt;
+GenericDatum::GenericDatum(const NodePtr&amp;amp; schema) :&lt;br/&gt;
+    type_(schema-&amp;gt;type()),&lt;br/&gt;
+    logicalType_(schema-&amp;gt;logicalType())&lt;/p&gt;
 {
     init(schema);
 }
&lt;p&gt;@@ -41,6 +44,7 @@ void GenericDatum::init(const NodePtr&amp;amp; schema)&lt;br/&gt;
     if (type_ == AVRO_SYMBOLIC) &lt;/p&gt;
{
         sc = resolveSymbol(schema);
         type_ = sc-&amp;gt;type();
+        logicalType_ = sc-&amp;gt;logicalType();
     }
&lt;p&gt;     switch (type_) {&lt;br/&gt;
     case AVRO_NULL:&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/impl/LogicalType.cc b/lang/c&lt;/ins&gt;+/impl/LogicalType.cc&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..1e84dd200&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/c++/impl/LogicalType.cc&lt;br/&gt;
@@ -0,0 +1,81 @@&lt;br/&gt;
+/**&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+#include &quot;Exception.hh&quot;&lt;br/&gt;
+#include &quot;LogicalType.hh&quot;&lt;br/&gt;
+&lt;br/&gt;
+namespace avro {&lt;br/&gt;
+&lt;br/&gt;
+LogicalType::LogicalType(Type type)&lt;br/&gt;
+    : type_(type), precision_(0), scale_(0) {}&lt;br/&gt;
+&lt;br/&gt;
+LogicalType::Type LogicalType::type() const &lt;/p&gt;
{
+    return type_;
+}
&lt;p&gt;+&lt;br/&gt;
+void LogicalType::setPrecision(int precision) {&lt;br/&gt;
+    if (type_ != DECIMAL) &lt;/p&gt;
{
+        throw Exception(&quot;Only logical type DECIMAL can have precision&quot;);
+    }
&lt;p&gt;+    if (precision &amp;lt;= 0) &lt;/p&gt;
{
+        throw Exception(boost::format(&quot;Precision cannot be: %1%&quot;) % precision);
+    }
&lt;p&gt;+    precision_ = precision;&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+void LogicalType::setScale(int scale) {&lt;br/&gt;
+    if (type_ != DECIMAL) &lt;/p&gt;
{
+        throw Exception(&quot;Only logical type DECIMAL can have scale&quot;);
+    }
&lt;p&gt;+    if (scale &amp;lt; 0) &lt;/p&gt;
{
+        throw Exception(boost::format(&quot;Scale cannot be: %1%&quot;) % scale);
+    }
&lt;p&gt;+    scale_ = scale;&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+void LogicalType::printJson(std::ostream&amp;amp; os) const {&lt;br/&gt;
+    switch (type_) &lt;/p&gt;
{
+    case LogicalType::NONE:
+        break;
+    case LogicalType::DECIMAL:
+        os &amp;lt;&amp;lt; &quot;\&quot;logicalType\&quot;: \&quot;decimal\&quot;&quot;;
+        os &amp;lt;&amp;lt; &quot;, \&quot;precision\&quot;: &quot; &amp;lt;&amp;lt; precision_;
+        os &amp;lt;&amp;lt; &quot;, \&quot;scale\&quot;: &quot; &amp;lt;&amp;lt; scale_;
+        break;
+    case DATE:
+        os &amp;lt;&amp;lt; &quot;\&quot;logicalType\&quot;: \&quot;date\&quot;&quot;;
+        break;
+    case TIME_MILLIS:
+        os &amp;lt;&amp;lt; &quot;\&quot;logicalType\&quot;: \&quot;time-millis\&quot;&quot;;
+        break;
+    case TIME_MICROS:
+        os &amp;lt;&amp;lt; &quot;\&quot;logicalType\&quot;: \&quot;time-micros\&quot;&quot;;
+        break;
+    case TIMESTAMP_MILLIS:
+        os &amp;lt;&amp;lt; &quot;\&quot;logicalType\&quot;: \&quot;timestamp-millis\&quot;&quot;;
+        break;
+    case TIMESTAMP_MICROS:
+        os &amp;lt;&amp;lt; &quot;\&quot;logicalType\&quot;: \&quot;timestamp-micros\&quot;&quot;;
+        break;
+    case DURATION:
+        os &amp;lt;&amp;lt; &quot;\&quot;logicalType\&quot;: \&quot;duration\&quot;&quot;;
+        break;
+    }
&lt;p&gt;+}&lt;br/&gt;
+&lt;br/&gt;
+}  // namespace avro&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/impl/Node.cc b/lang/c&lt;/ins&gt;+/impl/Node.cc&lt;br/&gt;
index 5fa965f69..1beb1df0b 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/impl/Node.cc&lt;br/&gt;
+++ b/lang/c++/impl/Node.cc&lt;br/&gt;
@@ -16,6 +16,8 @@&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;limitations under the License.&lt;br/&gt;
  */&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+#include &amp;lt;cmath&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
 #include &quot;Node.hh&quot;&lt;/p&gt;

&lt;p&gt; namespace avro &lt;/p&gt;
{
@@ -80,4 +82,75 @@ bool Name::operator == (const Name&amp;amp; n) const
     return ns_ == n.ns_ &amp;amp;&amp;amp; simpleName_ == n.simpleName_;
 }

&lt;p&gt;+void Node::setLogicalType(LogicalType logicalType) {&lt;br/&gt;
+    checkLock();&lt;br/&gt;
+&lt;br/&gt;
+    // Check that the logical type is applicable to the node type.&lt;br/&gt;
+    switch (logicalType.type()) {&lt;br/&gt;
+    case LogicalType::NONE:&lt;br/&gt;
+        break;&lt;br/&gt;
+    case LogicalType::DECIMAL: {&lt;br/&gt;
+        if (type_ != AVRO_BYTES &amp;amp;&amp;amp; type_ != AVRO_FIXED) &lt;/p&gt;
{
+            throw Exception(&quot;DECIMAL logical type can annotate &quot;
+                            &quot;only BYTES or FIXED type&quot;);
+        }
&lt;p&gt;+        if (type_ == AVRO_FIXED) {&lt;br/&gt;
+            // Max precision that can be supported by the current size of&lt;br/&gt;
+            // the FIXED type.&lt;br/&gt;
+            long maxPrecision =&lt;br/&gt;
+                floor(log10(pow(2.0, 8.0 * fixedSize() - 1) - 1));&lt;br/&gt;
+            if (logicalType.precision() &amp;gt; maxPrecision) &lt;/p&gt;
{
+                throw Exception(
+                    boost::format(
+                        &quot;DECIMAL precision %1% is too large for the &quot;
+                        &quot;FIXED type of size %2%, precision cannot be &quot;
+                        &quot;larget than %3%&quot;) % logicalType.precision() %
+                        fixedSize() % maxPrecision);
+            }
&lt;p&gt;+        }&lt;br/&gt;
+        if (logicalType.scale() &amp;gt; logicalType.precision()) &lt;/p&gt;
{
+            throw Exception(&quot;DECIMAL scale cannot exceed precision&quot;);
+        }
&lt;p&gt;+        break;&lt;br/&gt;
+    }&lt;br/&gt;
+    case LogicalType::DATE:&lt;br/&gt;
+        if (type_ != AVRO_INT) &lt;/p&gt;
{
+            throw Exception(&quot;DATE logical type can only annotate INT type&quot;);
+        }
&lt;p&gt;+        break;&lt;br/&gt;
+    case LogicalType::TIME_MILLIS:&lt;br/&gt;
+        if (type_ != AVRO_INT) &lt;/p&gt;
{
+            throw Exception(&quot;TIME-MILLIS logical type can only annotate &quot;
+                            &quot;INT type&quot;);
+        }
&lt;p&gt;+        break;&lt;br/&gt;
+    case LogicalType::TIME_MICROS:&lt;br/&gt;
+        if (type_ != AVRO_LONG) &lt;/p&gt;
{
+            throw Exception(&quot;TIME-MICROS logical type can only annotate &quot;
+                            &quot;LONG type&quot;);
+        }
&lt;p&gt;+        break;&lt;br/&gt;
+    case LogicalType::TIMESTAMP_MILLIS:&lt;br/&gt;
+        if (type_ != AVRO_LONG) &lt;/p&gt;
{
+            throw Exception(&quot;TIMESTAMP-MILLIS logical type can only annotate &quot;
+                            &quot;LONG type&quot;);
+        }
&lt;p&gt;+        break;&lt;br/&gt;
+    case LogicalType::TIMESTAMP_MICROS:&lt;br/&gt;
+        if (type_ != AVRO_LONG) &lt;/p&gt;
{
+            throw Exception(&quot;TIMESTAMP-MICROS logical type can only annotate &quot;
+                            &quot;LONG type&quot;);
+        }
&lt;p&gt;+        break;&lt;br/&gt;
+    case LogicalType::DURATION:&lt;br/&gt;
+        if (type_ != AVRO_FIXED || fixedSize() != 12) &lt;/p&gt;
{
+            throw Exception(&quot;DURATION logical type can only annotate &quot;
+                            &quot;FIXED type of size 12&quot;);
+        }
&lt;p&gt;+        break;&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    logicalType_ = logicalType;&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
 } // namespace avro&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/impl/NodeImpl.cc b/lang/c&lt;/ins&gt;+/impl/NodeImpl.cc&lt;br/&gt;
index 606cd2093..da1949d77 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/impl/NodeImpl.cc&lt;br/&gt;
+++ b/lang/c++/impl/NodeImpl.cc&lt;br/&gt;
@@ -166,7 +166,19 @@ std::ostream&amp;amp; operator &amp;lt;&amp;lt;(std::ostream &amp;amp;os, indent x)&lt;br/&gt;
 void &lt;br/&gt;
 NodePrimitive::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
 {&lt;br/&gt;
+    bool hasLogicalType = logicalType().type() != LogicalType::NONE;&lt;br/&gt;
+&lt;br/&gt;
+    if (hasLogicalType) {&lt;br/&gt;
+        os &amp;lt;&amp;lt; &quot;&lt;/p&gt;
{\n&quot; &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;type\&quot;: &quot;;
+    }
&lt;p&gt;+&lt;br/&gt;
     os &amp;lt;&amp;lt; &apos;\&quot;&apos; &amp;lt;&amp;lt; type() &amp;lt;&amp;lt; &apos;\&quot;&apos;;&lt;br/&gt;
+&lt;br/&gt;
+    if (hasLogicalType) &lt;/p&gt;
{
+        os &amp;lt;&amp;lt; &quot;,\n&quot; &amp;lt;&amp;lt; indent(depth);
+        logicalType().printJson(os);
+        os &amp;lt;&amp;lt; &quot;\n}
&lt;p&gt;&quot;;&lt;br/&gt;
+    }&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt; void &lt;br/&gt;
@@ -274,8 +286,14 @@ NodeFixed::printJson(std::ostream &amp;amp;os, int depth) const&lt;br/&gt;
     os &amp;lt;&amp;lt; &quot;&lt;/p&gt;
{\n&quot;;
     os &amp;lt;&amp;lt; indent(++depth) &amp;lt;&amp;lt; &quot;\&quot;type\&quot;: \&quot;fixed\&quot;,\n&quot;;
     printName(os, nameAttribute_.get(), depth);
-    os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;size\&quot;: &quot; &amp;lt;&amp;lt; sizeAttribute_.get() &amp;lt;&amp;lt; &quot;\n&quot;;
-    os &amp;lt;&amp;lt; indent(--depth) &amp;lt;&amp;lt; &apos;}
&lt;p&gt;&apos;;&lt;br/&gt;
+    os &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;\&quot;size\&quot;: &quot; &amp;lt;&amp;lt; sizeAttribute_.get();&lt;br/&gt;
+&lt;br/&gt;
+    if (logicalType().type() != LogicalType::NONE) &lt;/p&gt;
{
+      os &amp;lt;&amp;lt; &quot;,\n&quot; &amp;lt;&amp;lt; indent(depth);
+      logicalType().printJson(os);
+    }
&lt;p&gt;+&lt;br/&gt;
+    os &amp;lt;&amp;lt; &quot;\n&quot; &amp;lt;&amp;lt; indent(--depth) &amp;lt;&amp;lt; &apos;}&apos;;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt; } // namespace avro&lt;br/&gt;
diff --git a/lang/c+&lt;ins&gt;/test/SchemaTests.cc b/lang/c&lt;/ins&gt;+/test/SchemaTests.cc&lt;br/&gt;
index 8ecde7a6e..b840e0c1f 100644&lt;br/&gt;
&amp;#8212; a/lang/c++/test/SchemaTests.cc&lt;br/&gt;
+++ b/lang/c++/test/SchemaTests.cc&lt;br/&gt;
@@ -17,6 +17,7 @@&lt;br/&gt;
  */&lt;/p&gt;

&lt;p&gt; #include &quot;Compiler.hh&quot;&lt;br/&gt;
+#include &quot;GenericDatum.hh&quot;&lt;br/&gt;
 #include &quot;ValidSchema.hh&quot;&lt;/p&gt;

&lt;p&gt; #include &amp;lt;boost/test/included/unit_test_framework.hpp&amp;gt;&lt;br/&gt;
@@ -182,9 +183,39 @@ const char* roundTripSchemas[] = {&lt;br/&gt;
     &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;namespace\&quot;:\&quot;org.apache.hadoop.avro\&quot;,&quot;
           &quot;\&quot;name\&quot;:\&quot;MyFixed\&quot;,\&quot;size\&quot;:1}
&lt;p&gt;&quot;,&lt;br/&gt;
     &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;size\&quot;:1}
&lt;p&gt;&quot;,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;size\&quot;:1}
&lt;p&gt;&quot;&lt;br/&gt;
+    &quot;&lt;/p&gt;
{\&quot;type\&quot;:\&quot;fixed\&quot;,\&quot;name\&quot;:\&quot;Test\&quot;,\&quot;size\&quot;:1}
&lt;p&gt;&quot;,&lt;br/&gt;
+&lt;br/&gt;
+    // Logical types&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;bytes&quot;, &quot;logicalType&quot;: &quot;decimal&quot;,
+        &quot;precision&quot;: 12, &quot;scale&quot;: 6}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;fixed&quot;, &quot;name&quot;: &quot;test&quot;, &quot;size&quot;: 16,
+        &quot;logicalType&quot;: &quot;decimal&quot;, &quot;precision&quot;: 38, &quot;scale&quot;: 9}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;int&quot;, &quot;logicalType&quot;: &quot;date&quot;}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;int&quot;, &quot;logicalType&quot;: &quot;time-millis&quot;}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;long&quot;, &quot;logicalType&quot;: &quot;time-micros&quot;}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;long&quot;, &quot;logicalType&quot;: &quot;timestamp-millis&quot;}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;long&quot;, &quot;logicalType&quot;: &quot;timestamp-micros&quot;}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;fixed&quot;, &quot;name&quot;: &quot;test&quot;, &quot;size&quot;: 12,
+        &quot;logicalType&quot;: &quot;duration&quot;}
&lt;p&gt;)&quot;&lt;br/&gt;
 };&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+const char* malformedLogicalTypes[] = {&lt;br/&gt;
+    // Wrong base type.&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;long&quot;, &quot;logicalType&quot;: &quot;decimal&quot;, &quot;precision&quot;: 10}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;string&quot;, &quot;logicalType&quot;: &quot;date&quot;}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;string&quot;, &quot;logicalType&quot;: &quot;time-millis&quot;}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;string&quot;, &quot;logicalType&quot;: &quot;time-micros&quot;}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;string&quot;, &quot;logicalType&quot;: &quot;timestamp-millis&quot;}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;string&quot;, &quot;logicalType&quot;: &quot;timestamp-micros&quot;}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;string&quot;, &quot;logicalType&quot;: &quot;duration&quot;}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    // Missing the required field &apos;precision&apos;.&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;bytes&quot;, &quot;logicalType&quot;: &quot;decimal&quot;}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    // The claimed precision is not supported by the size of the fixed type.&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;fixed&quot;, &quot;size&quot;: 4, &quot;name&quot;: &quot;a&quot;, &quot;precision&quot;: 20}
&lt;p&gt;)&quot;,&lt;br/&gt;
+    // Scale is larger than precision.&lt;br/&gt;
+    R&quot;(&lt;/p&gt;
{&quot;type&quot;: &quot;bytes&quot;, &quot;logicalType&quot;: &quot;decimal&quot;,
+        &quot;precision&quot;: 5, &quot;scale&quot;: 10}
&lt;p&gt;)&quot;&lt;br/&gt;
+};&lt;/p&gt;


&lt;p&gt; static void testBasic(const char* schema)&lt;br/&gt;
@@ -214,8 +245,152 @@ static void testRoundTrip(const char* schema)&lt;br/&gt;
     std::ostringstream os;&lt;br/&gt;
     compiledSchema.toJson(os);&lt;br/&gt;
     std::string result = os.str();&lt;br/&gt;
+&lt;br/&gt;
+    std::string cleanedSchema(schema);&lt;br/&gt;
+    // Remove whitespace for comparison.&lt;br/&gt;
+    cleanedSchema.erase(std::remove_if(cleanedSchema.begin(),&lt;br/&gt;
+                                       cleanedSchema.end(),&lt;br/&gt;
+                                       ::isspace),&lt;br/&gt;
+                        cleanedSchema.end());&lt;br/&gt;
+&lt;br/&gt;
     result.erase(std::remove_if(result.begin(), result.end(), ::isspace), result.end()); // Remove whitespace&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;BOOST_CHECK(result == std::string(schema));&lt;br/&gt;
+    BOOST_CHECK(result == cleanedSchema);&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
+static void testLogicalTypes()&lt;br/&gt;
+
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    const char* bytesDecimalType = R&amp;quot;(+    {
+        &quot;type&quot;: &quot;bytes&quot;,
+        &quot;logicalType&quot;: &quot;decimal&quot;,
+        &quot;precision&quot;: 10,
+        &quot;scale&quot;: 2
+    })&amp;quot;;+    const char* fixedDecimalType = R&amp;quot;(+    {
+        &quot;type&quot;: &quot;fixed&quot;,
+        &quot;size&quot;: 16,
+        &quot;name&quot;: &quot;fixedDecimalType&quot;,
+        &quot;logicalType&quot;: &quot;decimal&quot;,
+        &quot;precision&quot;: 12,
+        &quot;scale&quot;: 6
+    })&amp;quot;;+    const char* dateType = R&amp;quot;(+    {
+        &quot;type&quot;: &quot;int&quot;, &quot;logicalType&quot;: &quot;date&quot;
+    })&amp;quot;;+    const char* timeMillisType = R&amp;quot;(+    {
+        &quot;type&quot;: &quot;int&quot;, &quot;logicalType&quot;: &quot;time-millis&quot;
+    })&amp;quot;;+    const char* timeMicrosType = R&amp;quot;(+    {
+        &quot;type&quot;: &quot;long&quot;, &quot;logicalType&quot;: &quot;time-micros&quot;
+    })&amp;quot;;+    const char* timestampMillisType = R&amp;quot;(+    {
+        &quot;type&quot;: &quot;long&quot;, &quot;logicalType&quot;: &quot;timestamp-millis&quot;
+    })&amp;quot;;+    const char* timestampMicrosType = R&amp;quot;(+    {
+        &quot;type&quot;: &quot;long&quot;, &quot;logicalType&quot;: &quot;timestamp-micros&quot;
+    })&amp;quot;;+    const char* durationType = R&amp;quot;(+    {
+        &quot;type&quot;: &quot;fixed&quot;,
+        &quot;size&quot;: 12,
+        &quot;name&quot;: &quot;durationType&quot;,
+        &quot;logicalType&quot;: &quot;duration&quot;
+    })&amp;quot;;++    {
+        BOOST_TEST_CHECKPOINT(bytesDecimalType);
+        ValidSchema schema1 = compileJsonSchemaFromString(bytesDecimalType);
+        BOOST_CHECK(schema1.root()-&amp;gt;type() == AVRO_BYTES);
+        LogicalType logicalType = schema1.root()-&amp;gt;logicalType();
+        BOOST_CHECK(logicalType.type() == LogicalType::DECIMAL);
+        BOOST_CHECK(logicalType.precision() == 10);
+        BOOST_CHECK(logicalType.scale() == 2);
+
+        BOOST_TEST_CHECKPOINT(fixedDecimalType);
+        ValidSchema schema2 = compileJsonSchemaFromString(fixedDecimalType);
+        BOOST_CHECK(schema2.root()-&amp;gt;type() == AVRO_FIXED);
+        logicalType = schema2.root()-&amp;gt;logicalType();
+        BOOST_CHECK(logicalType.type() == LogicalType::DECIMAL);
+        BOOST_CHECK(logicalType.precision() == 12);
+        BOOST_CHECK(logicalType.scale() == 6);
+
+        GenericDatum bytesDatum(schema1);
+        BOOST_CHECK(bytesDatum.logicalType().type() == LogicalType::DECIMAL);
+        GenericDatum fixedDatum(schema2);
+        BOOST_CHECK(fixedDatum.logicalType().type() == LogicalType::DECIMAL);
+    }+    {
+        BOOST_TEST_CHECKPOINT(dateType);
+        ValidSchema schema = compileJsonSchemaFromString(dateType);
+        BOOST_CHECK(schema.root()-&amp;gt;type() == AVRO_INT);
+        BOOST_CHECK(schema.root()-&amp;gt;logicalType().type() == LogicalType::DATE);
+        GenericDatum datum(schema);
+        BOOST_CHECK(datum.logicalType().type() == LogicalType::DATE);
+    }+    {
+        BOOST_TEST_CHECKPOINT(timeMillisType);
+        ValidSchema schema = compileJsonSchemaFromString(timeMillisType);
+        BOOST_CHECK(schema.root()-&amp;gt;type() == AVRO_INT);
+        LogicalType logicalType = schema.root()-&amp;gt;logicalType();
+        BOOST_CHECK(logicalType.type() == LogicalType::TIME_MILLIS);
+        GenericDatum datum(schema);
+        BOOST_CHECK(datum.logicalType().type() == LogicalType::TIME_MILLIS);
+    }+    {
+        BOOST_TEST_CHECKPOINT(timeMicrosType);
+        ValidSchema schema = compileJsonSchemaFromString(timeMicrosType);
+        BOOST_CHECK(schema.root()-&amp;gt;type() == AVRO_LONG);
+        LogicalType logicalType = schema.root()-&amp;gt;logicalType();
+        BOOST_CHECK(logicalType.type() == LogicalType::TIME_MICROS);
+        GenericDatum datum(schema);
+        BOOST_CHECK(datum.logicalType().type() == LogicalType::TIME_MICROS);
+    }+    {
+        BOOST_TEST_CHECKPOINT(timestampMillisType);
+        ValidSchema schema = compileJsonSchemaFromString(timestampMillisType);
+        BOOST_CHECK(schema.root()-&amp;gt;type() == AVRO_LONG);
+        LogicalType logicalType = schema.root()-&amp;gt;logicalType();
+        BOOST_CHECK(logicalType.type() == LogicalType::TIMESTAMP_MILLIS);
+        GenericDatum datum(schema);
+        BOOST_CHECK(datum.logicalType().type() ==
+                    LogicalType::TIMESTAMP_MILLIS);
+    }+    {
+        BOOST_TEST_CHECKPOINT(timestampMicrosType);
+        ValidSchema schema = compileJsonSchemaFromString(timestampMicrosType);
+        BOOST_CHECK(schema.root()-&amp;gt;type() == AVRO_LONG);
+        LogicalType logicalType = schema.root()-&amp;gt;logicalType();
+        BOOST_CHECK(logicalType.type() == LogicalType::TIMESTAMP_MICROS);
+        GenericDatum datum(schema);
+        BOOST_CHECK(datum.logicalType().type() ==
+                    LogicalType::TIMESTAMP_MICROS);
+    }+    {
+        BOOST_TEST_CHECKPOINT(durationType);
+        ValidSchema schema = compileJsonSchemaFromString(durationType);
+        BOOST_CHECK(schema.root()-&amp;gt;type() == AVRO_FIXED);
+        BOOST_CHECK(schema.root()-&amp;gt;fixedSize() == 12);
+        LogicalType logicalType = schema.root()-&amp;gt;logicalType();
+        BOOST_CHECK(logicalType.type() == LogicalType::DURATION);
+        GenericDatum datum(schema);
+        BOOST_CHECK(datum.logicalType().type() == LogicalType::DURATION);
+    }+}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
+static void testMalformedLogicalTypes(const char* schema)&lt;br/&gt;
+&lt;/p&gt;
{
+    BOOST_TEST_CHECKPOINT(schema);
+    ValidSchema parsedSchema = compileJsonSchemaFromString(schema);
+    LogicalType logicalType = parsedSchema.root()-&amp;gt;logicalType();
+    BOOST_CHECK(logicalType.type() == LogicalType::NONE);
+    GenericDatum datum(parsedSchema);
+    BOOST_CHECK(datum.logicalType().type() == LogicalType::NONE);
 }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; }&lt;br/&gt;
@@ -238,5 +413,8 @@ init_unit_test_suite(int argc, char* argv[])&lt;br/&gt;
         avro::schema::basicSchemaErrors);&lt;br/&gt;
     ADD_PARAM_TEST(ts, avro::schema::testCompile, avro::schema::basicSchemas);&lt;br/&gt;
     ADD_PARAM_TEST(ts, avro::schema::testRoundTrip, avro::schema::roundTripSchemas);&lt;br/&gt;
+    ts-&amp;gt;add(BOOST_TEST_CASE(&amp;amp;avro::schema::testLogicalTypes));&lt;br/&gt;
+    ADD_PARAM_TEST(ts, avro::schema::testMalformedLogicalTypes,&lt;br/&gt;
+                   avro::schema::malformedLogicalTypes);&lt;br/&gt;
     return ts;&lt;br/&gt;
 }&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10020">
                    <name>Cloners</name>
                                            <outwardlinks description="is a clone of">
                                        <issuelink>
            <issuekey id="12709140">AVRO-1497</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12858422">AVRO-1721</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 12 Jul 2015 21:58:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2h56f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1703] Specific record should not only be determined by presence of SCHEMA$ field</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1703</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I want to use Avro from Scala, i.e. generate case classes from an Avro schema. So far this is working fine except for one thing - fields in Scala classes are always private. This doesn&apos;t work with Avro SpecificRecords (at least when inferring the schema from the class) and results in the following exception:&lt;/p&gt;

&lt;p&gt;org.apache.avro.AvroRuntimeException: java.lang.IllegalAccessException: Class org.apache.avro.specific.SpecificData can not access a member of class &amp;lt;my.Class&amp;gt; with modifiers &quot;private&quot;&lt;/p&gt;

&lt;p&gt;The exception is thrown from the following line in org.apache.avro.specific.SpecificData:&lt;/p&gt;

&lt;p&gt;schema = (Schema)(c.getDeclaredField(&quot;SCHEMA$&quot;).get(null));&lt;/p&gt;

&lt;p&gt;My suggestion would be to additionally check for a method called `getSchema` and read the schema from that method.&lt;/p&gt;

</description>
                <environment></environment>
        <key id="12844670">AVRO-1703</key>
            <summary>Specific record should not only be determined by presence of SCHEMA$ field</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="msoutier">Marius Soutier</reporter>
                        <labels>
                            <label>starter</label>
                    </labels>
                <created>Mon, 13 Jul 2015 15:19:07 +0000</created>
                <updated>Sun, 30 Dec 2018 04:17:17 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="15287288" author="defg" created="Tue, 17 May 2016 18:56:07 +0000"  >&lt;p&gt;I have a patch for this that I use &lt;a href=&quot;https://github.com/defg/avro/commit/cfd900b464e18696d2afa1d3d7794ddbef37e738&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/defg/avro/commit/cfd900b464e18696d2afa1d3d7794ddbef37e738&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;m happy to finish the work on this for contributing if there is interest and someone can point me to what else needs to be done.&lt;/p&gt;</comment>
                            <comment id="15287402" author="rdblue" created="Tue, 17 May 2016 19:47:09 +0000"  >&lt;p&gt;Thanks, Trent. I haven&apos;t been following this one. What is the problem with how the specific records work? I&apos;m not sure that specific is the right place to inject scala code because there are already interfaces that could be used. I&apos;ve implemented object models for jython and jruby before and didn&apos;t use specific at all. I used the IndexedRecord interface instead, which seems to fit nicely with the idea of using Scala case classes.&lt;/p&gt;</comment>
                            <comment id="15287597" author="defg" created="Tue, 17 May 2016 21:22:37 +0000"  >&lt;p&gt;Sure, let me give you some more detail.&lt;/p&gt;

&lt;p&gt;I&apos;ve been using &lt;a href=&quot;https://github.com/julianpeeters/avrohugger&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/julianpeeters/avrohugger&lt;/a&gt; for SpecificRecord generation of Scala case classes from avro schemas. These generated case classes extend SpecificRecordBase, so normally things work great. However, the times when a schema must be inferred from the class through reflection tend to break b/c of the error mentioned in the issue. This happens for things that call the avro-mapred from Scala e.g. spark-avro.&lt;/p&gt;

&lt;p&gt;The reason being Scala doesn&apos;t support a way to define a public static field on a class. Scala only provides a straightforward way to have a field on a singleton instance of that class. Since avro uses getDeclaredField() to find the SCHEMA$ attribute on the SpecificRecord, this make scala interop difficult. getDeclaredField() doesn&apos;t grab inherited fields, so I can&apos;t just define a java class with the SCHEMA$ and extend it from my Scala case class. This is what led to the patch of just looking for a SCHEMA$ method  before looking for a SCHEMA$ field to allow Scala interop. The other solution would be to make the avro reflection look at parent classes for the SCHEMA$ field instead of just called getDeclaredField().&lt;/p&gt;

&lt;p&gt;If you can point me to a way to use IndexedRecord that works, I&apos;m happy to try that. I would much prefer to patch avrohugger&apos;s code generation than to patch avro directly.&lt;/p&gt;

&lt;p&gt;This same lack of static field issue has caused problems with Java interop previously in things like Android. Note &lt;a href=&quot;https://gist.github.com/lrytz/80f3141de8240f9629da&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gist.github.com/lrytz/80f3141de8240f9629da&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15288048" author="julianpeeters" created="Wed, 18 May 2016 01:30:18 +0000"  >&lt;p&gt;You can guess that this is an issue for me too, thanks for the attention.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;I used the IndexedRecord interface instead, which seems to fit nicely with the idea of using Scala case classes&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If one doesn&apos;t mind an extra runtime dependency, &lt;a href=&quot;https://github.com/sksamuel/avro4s&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sksamuel/avro4s&lt;/a&gt; uses an approach like this, using a type class to convert the case class instance to a GenericRecord when Java interop is needed. This usually works great, and is much cleaner than working with regular GenericRecords. But there a few issues with this:&lt;/p&gt;

&lt;p&gt;    1) Sometimes a pre-existing project has chosen to use a framework&apos;s Specific API&lt;br/&gt;
    2) Sometimes a framework &lt;b&gt;only&lt;/b&gt; offers a Specific API (e.g. Scalding, AFAIK)&lt;/p&gt;

&lt;p&gt;Although I haven&apos;t looked into it, there &lt;b&gt;may&lt;/b&gt; be a way to use a similar type class strategy with &lt;a href=&quot;https://github.com/oedura/scavro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/oedura/scavro&lt;/a&gt; (whose Scala classes can also generated by avrohugger). This, if even possible, would carry over Scavro&apos;s benefits of being able to use immutable fields, but again at the cost of an extra runtime dependency.&lt;/p&gt;

&lt;p&gt;Would certainly prefer a fix &quot;at the source&quot;.&lt;/p&gt;

&lt;p&gt;Full disclosure: I&apos;d just like to use Scala with the Specific API, even if it obsoletes avrohugger.&lt;/p&gt;


</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 17 May 2016 18:56:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 35 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2h6nr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>
