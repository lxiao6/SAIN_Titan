<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:25:39 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2017-10-4+AND+created+%3C%3D+2017-10-11+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="10" total="10"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-2086] Can&apos;t create specific record with a single Decimal field with default value</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2086</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Given a simple record schema with a single byte field annotated with Decimal logical type and has default value set:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{
   &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;TestRecordWithDecimalFieldWithDefault&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;namespace&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.specific&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[
      {
         &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;f1&quot;&lt;/span&gt;,
         &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:{
            &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;bytes&quot;&lt;/span&gt;,
            &lt;span class=&quot;code-quote&quot;&gt;&quot;logicalType&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;decimal&quot;&lt;/span&gt;,
            &lt;span class=&quot;code-quote&quot;&gt;&quot;precision&quot;&lt;/span&gt;:9,
            &lt;span class=&quot;code-quote&quot;&gt;&quot;scale&quot;&lt;/span&gt;:2
         },
         &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;0.00&quot;&lt;/span&gt;
      }
   ]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;compiled with&lt;br/&gt;
&lt;tt&gt;avro-tools compile -bigDecimal schema TestRecordWithDecimalFieldWithDefault.avsc .&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;The following test case (which should use the decimal&apos;s default value):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  @Test
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testRecordWithDecimalLogicalTypeWithDefault() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    SpecificData.get().addLogicalTypeConversion(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Conversions.DecimalConversion());
    TestRecordWithDecimalFieldWithDefault record = TestRecordWithDecimalFieldWithDefault.newBuilder().build();
    File data = write(TestRecordWithDecimalFieldWithDefault.getClassSchema(), record);
    List&amp;lt;TestRecordWithDecimalFieldWithDefault&amp;gt; actual = read(
      TestRecordWithDecimalFieldWithDefault.getClassSchema(), data);

    assertEquals(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BigDecimal(0.00).setScale(2), actual.get(0).getF1());
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;fails with&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;org.apache.avro.AvroRuntimeException: org.apache.avro.AvroRuntimeException: Cannot convert 8083333.60:BigDecimal: expected &lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt; type

	at org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault$Builder.build(TestRecordWithDecimalFieldWithDefault.java:239)
	at org.apache.avro.specific.TestSpecificLogicalTypes.testRecordWithDecimalLogicalTypeWithDefault(TestSpecificLogicalTypes.java:123)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:119)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
Caused by: org.apache.avro.AvroRuntimeException: Cannot convert 8083333.60:BigDecimal: expected &lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt; type
	at org.apache.avro.Conversions.convertToLogicalType(Conversions.java:172)
	at org.apache.avro.data.RecordBuilderBase.defaultValue(RecordBuilderBase.java:159)
	at org.apache.avro.specific.TestRecordWithDecimalFieldWithDefault$Builder.build(TestRecordWithDecimalFieldWithDefault.java:236)
	... 30 more
Caused by: java.lang.ClassCastException: java.math.BigDecimal cannot be &lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt; to java.nio.ByteBuffer
	at org.apache.avro.Conversions.convertToLogicalType(Conversions.java:162)
	... 32 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="13107165">AVRO-2086</key>
            <summary>Can&apos;t create specific record with a single Decimal field with default value</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="10002" iconUrl="https://issues.apache.org/jira/images/icons/statuses/document.png" description="A patch for this issue has been uploaded to JIRA by a contributor.">Patch Available</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="nkollar">Nandor Kollar</assignee>
                                    <reporter username="nkollar">Nandor Kollar</reporter>
                        <labels>
                    </labels>
                <created>Thu, 5 Oct 2017 08:31:12 +0000</created>
                <updated>Thu, 5 Oct 2017 13:06:59 +0000</updated>
                                            <version>1.8.2</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="16192840" author="githubbot" created="Thu, 5 Oct 2017 13:03:51 +0000"  >&lt;p&gt;GitHub user nandorKollar opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/255&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/255&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2086&quot; title=&quot;Can&amp;#39;t create specific record with a single Decimal field with default value&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2086&quot;&gt;AVRO-2086&lt;/a&gt;: Can&apos;t create specific record with a single Decimal field w&#8230;&lt;/p&gt;

&lt;p&gt;    &#8230;ith default value&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/nandorKollar/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/nandorKollar/avro&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2086&quot; title=&quot;Can&amp;#39;t create specific record with a single Decimal field with default value&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2086&quot;&gt;AVRO-2086&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/255.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/255.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #255&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit 70144dd136374520da0686f2a02dc3c7bae650fe&lt;br/&gt;
Author: Nandor Kollar &amp;lt;nkollar@cloudera.com&amp;gt;&lt;br/&gt;
Date:   2017-10-05T13:01:34Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2086&quot; title=&quot;Can&amp;#39;t create specific record with a single Decimal field with default value&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2086&quot;&gt;AVRO-2086&lt;/a&gt;: Can&apos;t create specific record with a single Decimal field with default value&lt;/p&gt;

&lt;hr /&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 5 Oct 2017 13:03:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 15 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3kwlb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2087] Allow specifying default values for logical types in human-readable form</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2087</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Currently default values for logical types have to be specified as the binary representation of the backing primary type.&lt;/p&gt;

&lt;p&gt;For example, if one wanted to specify 0.00 as the default value for a decimal field, &quot;\u0000&quot; has to be specified as the default value. If the user tries to specify &quot;0.00&quot;, like in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2086&quot; title=&quot;Can&amp;#39;t create specific record with a single Decimal field with default value&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2086&quot;&gt;AVRO-2086&lt;/a&gt;, it is silently accepted but results in unexpected behaviour. This value is not parsed and interpreted as a decimal number but is taken to be the byte representation, i.e. the corresponding hexadecimal ASCII byte sequence 30 2E 30 30 = 808333360 with a precision of 2 results in a default decimal value of 8083333.60.&lt;/p&gt;

&lt;p&gt;To set the default value to an arbitrary non-zero value, e.g., 31.80, one has to multiply it by 10^2=100 for a precision of 2, resulting in 3180, which is 0x0C6C when converted to hex. This means that &quot;\u000C\u006C&quot; has to be specified as the default value. Having to do these calculations by hand is not too user (programmer) friendly.&lt;/p&gt;

&lt;p&gt;For a date or timestamp type, the default value has to be specified as a number and not as a string, so an unexpected default value can not be set accidentally in this case. However, one can&apos;t use a human-readable representation in this case either, the number of days or seconds (respectively) elapsed since the epoch must be specified, e.g., 1507216329 for the current timestamp.&lt;/p&gt;

&lt;p&gt;The first step towards solving this problem will be coming up with a suggested solution. Once we have that, the JIRA description should be extended with details.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13107261">AVRO-2087</key>
            <summary>Allow specifying default values for logical types in human-readable form</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="zi">Zoltan Ivanfi</reporter>
                        <labels>
                    </labels>
                <created>Thu, 5 Oct 2017 15:20:33 +0000</created>
                <updated>Sun, 30 Dec 2018 05:42:13 +0000</updated>
                                                                            <component>spec</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                    <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="13109906">AVRO-2097</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 15 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3kx6f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2088] Decimal logicalType values serialized in hexidecimal vs decimal</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2088</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;We use this schema for AVRO file:&lt;/p&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;col1&quot;&lt;/span&gt;,
&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:[&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;,
	{
		&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;bytes&quot;&lt;/span&gt;,
		&lt;span class=&quot;code-quote&quot;&gt;&quot;logicalType&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;decimal&quot;&lt;/span&gt;,
		&lt;span class=&quot;code-quote&quot;&gt;&quot;precision&quot;&lt;/span&gt;:19,
		&lt;span class=&quot;code-quote&quot;&gt;&quot;scale&quot;&lt;/span&gt;:2
	}
	]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if we save data in avro using sqoop or hive (external table), the values are saved in hexadecimal format (ex. for 3.12 value is: &lt;font color=&quot;#d04437&quot;&gt;&lt;b&gt;{&quot;col1&quot;:{&quot;bytes&quot;:&quot;\u00018&quot;}}&lt;/b&gt;&lt;/font&gt;&lt;/li&gt;
	&lt;li&gt;if we save the data in that avro file using datastage , the values are saved in decimal format (ex. for 3.12 the saved value is: &lt;font color=&quot;#d04437&quot;&gt;&lt;b&gt;{&quot;col1&quot;:{&quot;bytes&quot;:&quot;3.12&quot;}}&lt;/b&gt;&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The questions are:&lt;br/&gt;
1). why there is this differences, in one case the data is serialised using hexidecimal and the other case using decimal? &lt;br/&gt;
2). are these differences caused by Avro serialization encoding used (for one case is used binary encoding, for the other case is used json encoding)?&lt;br/&gt;
3). how can we control how the values are serialized (ex. we want to have them as &quot;3.12&quot; instead of &quot;\u00018&quot;)&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Liviu&lt;/p&gt;</description>
                <environment></environment>
        <key id="13107490">AVRO-2088</key>
            <summary>Decimal logicalType values serialized in hexidecimal vs decimal</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21148&amp;avatarType=issuetype">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="10004">Not A Bug</resolution>
                                        <assignee username="zi">Zoltan Ivanfi</assignee>
                                    <reporter username="eliviu">liviu</reporter>
                        <labels>
                    </labels>
                <created>Fri, 6 Oct 2017 12:08:53 +0000</created>
                <updated>Thu, 12 Oct 2017 09:45:34 +0000</updated>
                            <resolved>Thu, 12 Oct 2017 09:45:34 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="16194526" author="zi" created="Fri, 6 Oct 2017 12:21:43 +0000"  >&lt;p&gt;This seems to be a bug in datastage. According to the &lt;a href=&quot;https://avro.apache.org/docs/1.8.1/spec.html#Decimal&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;specification&lt;/a&gt;, a decimal &quot;must contain the two&apos;s-complement representation of the unscaled integer value in big-endian byte order&quot;, so storing 3.12 as &quot;3.12&quot; is not compliant and will be interpreted as 8586652.66 when read back by a compliant reader.&lt;/p&gt;</comment>
                            <comment id="16194550" author="eliviu" created="Fri, 6 Oct 2017 12:56:46 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zi&quot; class=&quot;user-hover&quot; rel=&quot;zi&quot;&gt;Zoltan Ivanfi&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;But when I read the avro files through Hive (using hive external table), in both cases the corresponding datatype in Hive is &quot;decimal&quot; and data displayed correctly in Hive &lt;br/&gt;
So, with same avro schema, Hive is able to deserialize both values (&quot;\u00018&quot; and &quot;3.12&quot;)  to &quot;3.12&quot;&lt;br/&gt;
If this a datastage bug, then also hive serve is not compliant?&lt;/p&gt;

&lt;p&gt;I mention that the value from AVRO file is checked using avro-tools tojson command&lt;/p&gt;</comment>
                            <comment id="16194560" author="zi" created="Fri, 6 Oct 2017 13:10:25 +0000"  >&lt;p&gt;In that case there must be some additional difference in those Avro files apart from the values itself, since otherwise Hive would display 8586652.66. Could you please attach sample Avro files of both kinds?&lt;/p&gt;</comment>
                            <comment id="16201661" author="eliviu" created="Thu, 12 Oct 2017 08:57:57 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zi&quot; class=&quot;user-hover&quot; rel=&quot;zi&quot;&gt;Zoltan Ivanfi&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;Sorry for this late answer; you were right, this is a DS bug/lack of functionality.. even if you pass to DS a avsc with DECIMAL logical datatype the DS will export the fields as BYTES but in schema is putting decimal logical type instead of bytes , so the resulting avro file is wrong (not matching with the source one)&lt;/p&gt;

&lt;p&gt;I repeted the test, and the source value &quot;3.12&quot; value was exported by DS as &quot;3.12&quot; and interpreted by Hive as  8586652.66&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Liviu&lt;/p&gt;</comment>
                            <comment id="16201717" author="zi" created="Thu, 12 Oct 2017 09:45:34 +0000"  >&lt;p&gt;Thanks Liviu, closing the bug according to your latest comment.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 6 Oct 2017 12:21:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 14 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3kykn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2089] Avro deserialization error - ArrayIndexOutOfBoundsException for union types with avrocpp</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2089</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/46614343/avro-deserialization-error-arrayindexoutofboundsexception&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://stackoverflow.com/questions/46614343/avro-deserialization-error-arrayindexoutofboundsexception&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interestingly enough, if I define the type of the nested schema in-line, it works perfectly ! &lt;/p&gt;</description>
                <environment>&lt;p&gt;Ubuntu 16.10�&lt;/p&gt;</environment>
        <key id="13107648">AVRO-2089</key>
            <summary>Avro deserialization error - ArrayIndexOutOfBoundsException for union types with avrocpp</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="5">Cannot Reproduce</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="karthikus">Karthik</reporter>
                        <labels>
                    </labels>
                <created>Fri, 6 Oct 2017 22:27:57 +0000</created>
                <updated>Mon, 9 Oct 2017 21:22:32 +0000</updated>
                            <resolved>Mon, 9 Oct 2017 21:22:32 +0000</resolved>
                                    <version>1.7.7</version>
                                                    <component>c++</component>
                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 15 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3kzjr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2090] Improve encode/decode time for SpecificRecord using code generation</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2090</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;New implementation for generation of code for SpecificRecord that improves decoding by over 10% and encoding over 30% (more improvements are on the way).  This feature is behind a feature flag (&lt;tt&gt;org.apache.avro.specific.use_custom_coders&lt;/tt&gt;) and (for now) turned off by default.  See &lt;a href=&quot;https://avro.apache.org/docs/current/gettingstartedjava.html#Beta+feature:+Generating+faster+code&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Getting Started (Java)&lt;/a&gt; for instructions.&lt;/p&gt;

&lt;p&gt;(A bit more info: Compared to GenericRecords, SpecificRecords offer type-safety plus the performance of traditional getters/setters/instance variables.  But these are only beneficial to Java code accessing those records.  SpecificRecords inherit serialization and deserialization code from GenericRecords, which is dynamic and thus slow (in fact, benchmarks show that serialization and deserialization is &lt;em&gt;slower&lt;/em&gt; for SpecificRecord than for GenericRecord).  This patch extends record.vm to generate custom, higher-performance encoder and decoder functions for SpecificRecords.)&lt;/p&gt;</description>
                <environment></environment>
        <key id="13107742">AVRO-2090</key>
            <summary>Improve encode/decode time for SpecificRecord using code generation</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="raymie">Raymie Stata</assignee>
                                    <reporter username="raymie">Raymie Stata</reporter>
                        <labels>
                    </labels>
                <created>Sat, 7 Oct 2017 23:52:05 +0000</created>
                <updated>Wed, 24 Oct 2018 06:35:06 +0000</updated>
                            <resolved>Tue, 23 Oct 2018 18:01:54 +0000</resolved>
                                                    <fixVersion>1.9.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="16195951" author="raymie" created="Sun, 8 Oct 2017 00:12:49 +0000"  >&lt;p&gt;Attaching a design document for (forthcoming) patch.&lt;/p&gt;</comment>
                            <comment id="16195955" author="githubbot" created="Sun, 8 Oct 2017 00:19:58 +0000"  >&lt;p&gt;GitHub user rstata opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/256&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;/p&gt;

&lt;p&gt;    Initial patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/rstata-projects/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/rstata-projects/avro&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/256.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #256&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit d2127c7a4051bf7efa56cb0d7e8d9de6ead31c16&lt;br/&gt;
Author: rstata &amp;lt;rstata@yahoo.com&amp;gt;&lt;br/&gt;
Date:   2017-07-13T08:36:39Z&lt;/p&gt;

&lt;p&gt;    Saving initial work, still have more to do.&lt;/p&gt;

&lt;p&gt;commit 474cc97315ecfeb5bc79dc366424c342d57d83e2&lt;br/&gt;
Author: rstata &amp;lt;rstata@yahoo.com&amp;gt;&lt;br/&gt;
Date:   2017-07-14T04:22:46Z&lt;/p&gt;

&lt;p&gt;    Finished initial implementation (not tested).&lt;/p&gt;

&lt;p&gt;commit 456d667c58df1493190b99bea40b24408e969679&lt;br/&gt;
Author: rstata &amp;lt;rstata@yahoo.com&amp;gt;&lt;br/&gt;
Date:   2017-07-14T05:51:24Z&lt;/p&gt;

&lt;p&gt;    Poorly done feature flag, and formatting improvements (incl proper indentation).&lt;/p&gt;

&lt;p&gt;commit b1caba57a90a7fe9a7779c137137315d1d6a99ec&lt;br/&gt;
Author: rstata &amp;lt;rstata@yahoo.com&amp;gt;&lt;br/&gt;
Date:   2017-07-16T08:40:03Z&lt;/p&gt;

&lt;p&gt;    Added Reader/Decoder code&lt;/p&gt;

&lt;p&gt;commit 9f8c853f6f43c9ce07eb9ad10da0d6acf9263c5e&lt;br/&gt;
Author: rstata &amp;lt;rstata@yahoo.com&amp;gt;&lt;br/&gt;
Date:   2017-09-16T01:33:16Z&lt;/p&gt;

&lt;p&gt;    Updated output files to reflect new specific-compiler strategy.&lt;/p&gt;

&lt;p&gt;commit 83698d9e3ea04e00cd7da87373409b74f77d708a&lt;br/&gt;
Author: rstata &amp;lt;rstata@yahoo.com&amp;gt;&lt;br/&gt;
Date:   2017-10-03T21:44:05Z&lt;/p&gt;

&lt;p&gt;    Reverting changes to SpecificFixed&lt;/p&gt;

&lt;p&gt;commit 84e4cbb1ada1ceb97dcec0364a231055cd25142a&lt;br/&gt;
Author: rstata &amp;lt;rstata@yahoo.com&amp;gt;&lt;br/&gt;
Date:   2017-10-04T01:54:24Z&lt;/p&gt;

&lt;p&gt;    Change name of feature from Encodable to CustomCoders&lt;/p&gt;

&lt;p&gt;commit e57289bae26683ba4ea3ed30f863be5a79983bc0&lt;br/&gt;
Author: rstata &amp;lt;rstata@yahoo.com&amp;gt;&lt;br/&gt;
Date:   2017-10-04T04:49:15Z&lt;/p&gt;

&lt;p&gt;    Fixed bugs in codegen template&lt;/p&gt;

&lt;p&gt;commit f8fae7bc307fae7d51afab7a99025b4213937d40&lt;br/&gt;
Author: rstata &amp;lt;rstata@yahoo.com&amp;gt;&lt;br/&gt;
Date:   2017-10-04T05:32:20Z&lt;/p&gt;

&lt;p&gt;    Added feature flag for custom coders&lt;/p&gt;

&lt;p&gt;commit d5b45607ace5fbaf9ee526df2fa285a047365548&lt;br/&gt;
Author: rstata &amp;lt;rstata@yahoo.com&amp;gt;&lt;br/&gt;
Date:   2017-10-08T00:18:34Z&lt;/p&gt;

&lt;p&gt;    Remove stale TODO comment&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="16200271" author="howellbridger" created="Wed, 11 Oct 2017 13:28:36 +0000"  >&lt;p&gt;This looks like a really good idea. If I have some free time, I&apos;ll try to help with code review.&lt;/p&gt;</comment>
                            <comment id="16200287" author="thiru_mg" created="Wed, 11 Oct 2017 13:44:20 +0000"  >&lt;p&gt;+1 for the patch.&lt;/p&gt;</comment>
                            <comment id="16418582" author="githubbot" created="Thu, 29 Mar 2018 08:09:21 +0000"  >&lt;p&gt;scottcarey commented on issue #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#issuecomment-377157550&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#issuecomment-377157550&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   This is a good idea.  What is the performance improvement?  Did you run any benchmarks?&lt;/p&gt;

&lt;p&gt;   I had imagined generating bytecode using ASM, but generating it in the generated class would work too.  &lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16419595" author="githubbot" created="Thu, 29 Mar 2018 19:04:32 +0000"  >&lt;p&gt;cutting commented on a change in pull request #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#discussion_r178149568&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#discussion_r178149568&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificRecordBase.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -90,4 +92,19 @@ public void readExternal(ObjectInput in)&lt;br/&gt;
     new SpecificDatumReader(getSchema())&lt;br/&gt;
       .read(this, SpecificData.getDecoder(in));&lt;br/&gt;
   }&lt;br/&gt;
+&lt;br/&gt;
+  /** Returns true iff an instance supports the &lt;/p&gt;
{@link #encode} and&lt;br/&gt;
+    * {@link #decode} operations.  Should only be used by&lt;br/&gt;
+    * &amp;lt;code&amp;gt;SpecificDatumReader/Writer&amp;lt;/code&amp;gt; to selectively use&lt;br/&gt;
+    * {@link #encode}
&lt;p&gt; and &lt;/p&gt;
{@link #decode}
&lt;p&gt; to optimize the (de)serialization of&lt;br/&gt;
+    * values. */&lt;br/&gt;
+  public boolean hasCustomCoders() &lt;/p&gt;
{ return false; }
&lt;p&gt;+&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Do these need to be public, or is protected enough?  Also, they need some javadoc.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16419596" author="githubbot" created="Thu, 29 Mar 2018 19:04:32 +0000"  >&lt;p&gt;cutting commented on a change in pull request #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#discussion_r178148789&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#discussion_r178148789&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -101,6 +101,23 @@ private Class getPropAsClass(Schema schema, String prop) {&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+  @Override&lt;br/&gt;
+  protected Object readRecord(Object old, Schema expected, ResolvingDecoder in)&lt;br/&gt;
+    throws IOException {&lt;br/&gt;
+    SpecificData data = getSpecificData();&lt;br/&gt;
+    Object r = data.newRecord(old, expected);&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   &apos;r&apos; should only be created when custom coders are used, no?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16419597" author="githubbot" created="Thu, 29 Mar 2018 19:04:32 +0000"  >&lt;p&gt;cutting commented on a change in pull request #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#discussion_r178152178&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#discussion_r178152178&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -473,4 +475,282 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
     READER$.read(this, SpecificData.getDecoder(in));&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+#if ($this.isCustomCodable($schema))&lt;br/&gt;
+  @Override public boolean hasCustomCoders() &lt;/p&gt;
{ return true; }
&lt;p&gt;+&lt;br/&gt;
+  @Override public void encode(org.apache.avro.io.Encoder out)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+#set ($nv = 0)## Counter to ensure unique var-names&lt;br/&gt;
+#set ($maxnv = 0)## Holds high-water mark during recursion&lt;br/&gt;
+#foreach ($field in $schema.getFields())&lt;br/&gt;
+#set ($n = $this.mangle($field.name(), $schema.isError()))&lt;br/&gt;
+#set ($s = $field.schema())&lt;br/&gt;
+#encodeVar(0 &quot;this.${n}&quot; $s)&lt;br/&gt;
+&lt;br/&gt;
+#set ($nv = $maxnv)&lt;br/&gt;
+#end&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override public void decode(org.apache.avro.io.Decoder in)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+#set ($nv = 0)## Counter to ensure unique var-names&lt;br/&gt;
+#set ($maxnv = 0)## Holds high-water mark during recursion&lt;br/&gt;
+#foreach ($field in $schema.getFields())&lt;br/&gt;
+#set ($n = $this.mangle($field.name(), $schema.isError()))&lt;br/&gt;
+#set ($s = $field.schema())&lt;br/&gt;
+#set ($rs = &quot;SCHEMA$.getField(&quot;&quot;${n}&quot;&quot;).schema()&quot;)&lt;br/&gt;
+#decodeVar(0 &quot;this.${n}&quot; $s $rs)&lt;br/&gt;
+&lt;br/&gt;
+#set ($nv = $maxnv)&lt;br/&gt;
+#end&lt;br/&gt;
+  }&lt;br/&gt;
+#end&lt;br/&gt;
 }&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeVar $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+##### Compound types (array, map, and union) require calls&lt;br/&gt;
+##### that will recurse back into this encodeVar macro:&lt;br/&gt;
+#if ($s.Type.Name.equals(&quot;array&quot;))&lt;br/&gt;
+#encodeArray($indent $var $s)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;map&quot;))&lt;br/&gt;
+#encodeMap($indent $var $s)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;union&quot;))&lt;br/&gt;
+#encodeUnion($indent $var $s)&lt;br/&gt;
+##### Use the generated &quot;encode&quot; method as fast way to write&lt;br/&gt;
+##### (specific) record types:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;record&quot;))&lt;br/&gt;
+$I    ${var}.encode(out);&lt;br/&gt;
+##### For rest of cases, generate calls out.writeXYZ:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;null&quot;))&lt;br/&gt;
+$I    out.writeNull();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;boolean&quot;))&lt;br/&gt;
+$I    out.writeBoolean(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;int&quot;))&lt;br/&gt;
+$I    out.writeInt(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;long&quot;))&lt;br/&gt;
+$I    out.writeLong(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;float&quot;))&lt;br/&gt;
+$I    out.writeFloat(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;double&quot;))&lt;br/&gt;
+$I    out.writeDouble(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;string&quot;))&lt;br/&gt;
+#if ($this.isStringable($s))&lt;br/&gt;
+$I    out.writeString(${var}.toString());&lt;br/&gt;
+#else&lt;br/&gt;
+$I    out.writeString(${var});&lt;br/&gt;
+#end&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;bytes&quot;))&lt;br/&gt;
+$I    out.writeBytes(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;fixed&quot;))&lt;br/&gt;
+$I    out.writeFixed(${var}.bytes(), 0, ${s.FixedSize});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;enum&quot;))&lt;br/&gt;
+$I    out.writeEnum(${var}.ordinal());&lt;br/&gt;
+#else&lt;br/&gt;
+## TODO &amp;#8211; singal a code-gen-time error&lt;br/&gt;
+#end&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeArray $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($et = $this.javaType($s.ElementType))&lt;br/&gt;
+$I    long size${nv} = ${var}.size();&lt;br/&gt;
+$I    out.writeArrayStart();&lt;br/&gt;
+$I    out.setItemCount(size${nv});&lt;br/&gt;
+$I    long actualSize${nv} = 0;&lt;br/&gt;
+$I    for ($et e${nv}: ${var}) {&lt;br/&gt;
&lt;ins&gt;$I      actualSize${nv}&lt;/ins&gt;+;&lt;br/&gt;
+$I      out.startItem();&lt;br/&gt;
+#set ($var = &quot;e${nv}&quot;)&lt;br/&gt;
+#set ($nv = $nv + 1)&lt;br/&gt;
+#set ($maxnv = $nv)&lt;br/&gt;
+#set ($indent = $indent + 2)&lt;br/&gt;
+#encodeVar($indent $var $s.ElementType)&lt;br/&gt;
+#set ($nv = $nv - 1)&lt;br/&gt;
+#set ($indent = $indent - 2)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    out.writeArrayEnd();&lt;br/&gt;
+$I    if (actualSize${nv} != size${nv})&lt;br/&gt;
+$I      throw new java.util.ConcurrentModificationException(&quot;Array-size written was &quot; + size${nv} + &quot;, but element count was &quot; + actualSize${nv} + &quot;.&quot;);&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeMap $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($kt = $this.getStringType($s))&lt;br/&gt;
+#set ($vt = $this.javaType($s.ValueType))&lt;br/&gt;
+$I    long size${nv} = ${var}.size();&lt;br/&gt;
+$I    out.writeMapStart();&lt;br/&gt;
+$I    out.setItemCount(size${nv});&lt;br/&gt;
+$I    long actualSize${nv} = 0;&lt;br/&gt;
+$I    for (java.util.Map.Entry&amp;lt;$kt, $vt&amp;gt; e${nv}: ${var}.entrySet()) {&lt;br/&gt;
&lt;ins&gt;$I      actualSize${nv}&lt;/ins&gt;+;&lt;br/&gt;
+$I      out.startItem();&lt;br/&gt;
+#if ($this.isStringable($s))&lt;br/&gt;
+$I      out.writeString(e${nv}.getKey().toString());&lt;br/&gt;
+#else&lt;br/&gt;
+$I      out.writeString(e${nv}.getKey());&lt;br/&gt;
+#end&lt;br/&gt;
+$I      $vt v${nv} = e${nv}.getValue();&lt;br/&gt;
+#set ($var = &quot;v${nv}&quot;)&lt;br/&gt;
+#set ($nv = $nv + 1)&lt;br/&gt;
+#set ($maxnv = $nv)&lt;br/&gt;
+#set ($indent = $indent + 2)&lt;br/&gt;
+#encodeVar($indent $var $s.ValueType)&lt;br/&gt;
+#set ($nv = $nv - 1)&lt;br/&gt;
+#set ($indent = $indent - 2)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    out.writeMapEnd();&lt;br/&gt;
+$I    if (actualSize${nv} != size${nv})&lt;br/&gt;
+      throw new java.util.ConcurrentModificationException(&quot;Map-size written was &quot; + size${nv} + &quot;, but element count was &quot; + actualSize${nv} + &quot;.&quot;);&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeUnion $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($et = $this.javaType($s.Types.get($this.getNonNullIndex($s))))&lt;br/&gt;
+$I    if (${var} == null) {&lt;br/&gt;
+$I      out.writeIndex(#if($this.getNonNullIndex($s)==0)1#&lt;/p&gt;
{else}
&lt;p&gt;0#end);&lt;br/&gt;
+$I      out.writeNull();&lt;br/&gt;
+$I    } else {&lt;br/&gt;
+$I      out.writeIndex(${this.getNonNullIndex($s)});&lt;br/&gt;
+#set ($indent = $indent + 2)&lt;br/&gt;
+#encodeVar($indent $var $s.Types.get($this.getNonNullIndex($s)))&lt;br/&gt;
+#set ($indent = $indent - 2)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I    }&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeVar $indent $var $s $rs )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+##### Compound types (array, map, and union) require calls&lt;br/&gt;
+##### that will recurse back into this decodeVar macro:&lt;br/&gt;
+#if ($s.Type.Name.equals(&quot;array&quot;))&lt;br/&gt;
+#decodeArray($indent $var $s $rs)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;map&quot;))&lt;br/&gt;
+#decodeMap($indent $var $s $rs)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;union&quot;))&lt;br/&gt;
+#decodeUnion($indent $var $s $rs)&lt;br/&gt;
+##### Use the generated &quot;decode&quot; method as fast way to write&lt;br/&gt;
+##### (specific) record types:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;record&quot;))&lt;br/&gt;
+$I    if (${var} == null) {&lt;br/&gt;
+$I      ${var} = new ${this.javaType($s)}();&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    ${var}.decode(in);&lt;br/&gt;
+##### For rest of cases, generate calls in.readXYZ:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;null&quot;))&lt;br/&gt;
+$I    in.readNull();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;boolean&quot;))&lt;br/&gt;
+$I    $var = in.readBoolean();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;int&quot;))&lt;br/&gt;
+$I    $var = in.readInt();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;long&quot;))&lt;br/&gt;
+$I    $var = in.readLong();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;float&quot;))&lt;br/&gt;
+$I    $var = in.readFloat();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;double&quot;))&lt;br/&gt;
+$I    $var = in.readDouble();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;string&quot;))&lt;br/&gt;
+#decodeString( &quot;$I&quot; $var $s )&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;bytes&quot;))&lt;br/&gt;
+$I    $var = in.readBytes(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;fixed&quot;))&lt;br/&gt;
+$I    if (${var} == null) {&lt;br/&gt;
+$I      ${var} = new ${this.javaType($s)}();&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    in.readFixed(${var}.bytes(), 0, ${s.FixedSize});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;enum&quot;))&lt;br/&gt;
+$I    $var = ${this.javaType($s)}.values()&lt;span class=&quot;error&quot;&gt;&amp;#91;in.readEnum()&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+#else&lt;br/&gt;
+## TODO &amp;#8211; singal a code-gen-time error&lt;br/&gt;
+#end&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeString $II $var $s )&lt;br/&gt;
+#set ($st = ${this.getStringType($s)})&lt;br/&gt;
+#if ($this.isStringable($s))&lt;br/&gt;
+$II    ${var} = new ${st}(in.readString());&lt;br/&gt;
+#elseif ($st.equals(&quot;java.lang.String&quot;))&lt;br/&gt;
+$II    $var = in.readString();&lt;br/&gt;
+#elseif ($st.equals(&quot;org.apache.avro.util.Utf8&quot;))&lt;br/&gt;
+$II    $var = in.readString(${var});&lt;br/&gt;
+#else&lt;br/&gt;
+$II    $var = in.readString(${var} instanceof Utf8 ? (Utf8)${var} : null);&lt;br/&gt;
+#end&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeArray $indent $var $s $rs )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($t = $this.javaType($s))&lt;br/&gt;
+#set ($et = $this.javaType($s.ElementType))&lt;br/&gt;
+#set ($gat = &quot;SpecificData.Array&amp;lt;${et}&amp;gt;&quot;)&lt;br/&gt;
+$I    long size${nv} = in.readArrayStart();&lt;br/&gt;
+$I    $t a${nv} = ${var}; // Need fresh name due to limitation of macro system&lt;br/&gt;
+$I    if (a${nv} == null) {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   but we probably don&apos;t need this comment in every generated file&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16419837" author="githubbot" created="Thu, 29 Mar 2018 21:55:31 +0000"  >&lt;p&gt;cutting commented on a change in pull request #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#discussion_r178190902&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#discussion_r178190902&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -122,6 +122,10 @@ public DatumWriter createDatumWriter(Schema schema) {&lt;br/&gt;
   /** Return the singleton instance. */&lt;br/&gt;
   public static SpecificData get() &lt;/p&gt;
{ return INSTANCE; }

&lt;p&gt;+  private static final boolean USE_CUSTOM_CODERS&lt;br/&gt;
+    = Boolean.parseBoolean(System.getProperty(&quot;org.apache.avro.specific.use_custom_coders&quot;,&quot;false&quot;));&lt;br/&gt;
+  public boolean useCustomCoders() &lt;/p&gt;
{ return USE_CUSTOM_CODERS; }

&lt;p&gt; Review comment:&lt;br/&gt;
   useCustomCoders should probably be a settable member variable on each SpecificData instance, so folks can more easily switch it on and off without restarting the JVM.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16419838" author="githubbot" created="Thu, 29 Mar 2018 21:55:31 +0000"  >&lt;p&gt;cutting commented on a change in pull request #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#discussion_r178191398&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#discussion_r178191398&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumWriter.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -71,6 +71,21 @@ protected void writeString(Schema schema, Object datum, Encoder out)&lt;br/&gt;
     writeString(datum, out);&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+  @Override&lt;br/&gt;
+  protected void writeRecord(Schema schema, Object datum, Encoder out)&lt;br/&gt;
+    throws IOException {&lt;br/&gt;
+    if (SpecificData.get().useCustomCoders()&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   should use this.getSpecificData() instead of the static instance&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16419839" author="githubbot" created="Thu, 29 Mar 2018 21:55:31 +0000"  >&lt;p&gt;cutting commented on a change in pull request #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#discussion_r178191480&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#discussion_r178191480&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -101,6 +101,23 @@ private Class getPropAsClass(Schema schema, String prop) {&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+  @Override&lt;br/&gt;
+  protected Object readRecord(Object old, Schema expected, ResolvingDecoder in)&lt;br/&gt;
+    throws IOException {&lt;br/&gt;
+    SpecificData data = getSpecificData();&lt;br/&gt;
+    Object r = data.newRecord(old, expected);&lt;br/&gt;
+    if (SpecificData.get().useCustomCoders()&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   should use this.getSpecificData() instead of using the static instance&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16429195" author="githubbot" created="Sat, 7 Apr 2018 01:40:31 +0000"  >&lt;p&gt;rstata commented on issue #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#issuecomment-379423354&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#issuecomment-379423354&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   This work has gotten a bit old in my head.  I can dust it off and address the issues raised in this ticket, but want to make sure there is genuine interest before making the effort.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16429197" author="githubbot" created="Sat, 7 Apr 2018 01:47:12 +0000"  >&lt;p&gt;rstata commented on issue #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#issuecomment-379423675&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#issuecomment-379423675&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   BTW, I believe that Thiru presented a bit of this work at Strata last Fall:&lt;/p&gt;

&lt;p&gt;   &lt;a href=&quot;https://conferences.oreilly.com/strata/strata-ny-2017/public/schedule/detail/60729&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://conferences.oreilly.com/strata/strata-ny-2017/public/schedule/detail/60729&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16436077" author="githubbot" created="Thu, 12 Apr 2018 18:11:39 +0000"  >&lt;p&gt;cutting commented on issue #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#issuecomment-380896347&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#issuecomment-380896347&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   If it demonstrates a big performance improvement under Perf.java then I think it would be a good change to have &amp;amp; am willing to help get it committed.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16465138" author="zolyfarkas" created="Sun, 6 May 2018 13:56:05 +0000"  >&lt;p&gt;This can improve parsing performance even for GenericRecords... I created a GenericRecordBuilder that will generate/load &quot;Generic-SpecificRecords&quot; on the fly:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zolyfarkas/spf4j/blob/master/spf4j-avro/src/main/java/org/spf4j/avro/GenericRecordBuilder.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/zolyfarkas/spf4j/blob/master/spf4j-avro/src/main/java/org/spf4j/avro/GenericRecordBuilder.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;The generated GenericRecords can be significantly more memory efficient as well (primitives)...&lt;/p&gt;

&lt;p&gt;but I was musing about eventually eliminating the Generic/Specific implementation divide?&#160;would be interested in what others think...&#160;&lt;/p&gt;</comment>
                            <comment id="16559292" author="githubbot" created="Fri, 27 Jul 2018 05:45:02 +0000"  >&lt;p&gt;juwex commented on issue #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#issuecomment-408317797&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#issuecomment-408317797&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I&apos;m very excited about the performance improvements with this feature and would like to see this in a usable state sooner rather than later. If I can assist getting this branch into a mergeable state, I&apos;d love to do so (with @rstata &apos;s consent)&lt;/p&gt;

&lt;p&gt;   There&apos;s a rather big issue with schema evolution currently, however. The generated reader relies on the field order within the `ResolvingDecoder` to stay the same. Hence, data written with a schema that only differs in regards to the order of fields will result in an error or (even worse) invalid data. If required, I can provide a code sample.&lt;/p&gt;


&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16633194" author="githubbot" created="Sun, 30 Sep 2018 02:49:48 +0000"  >&lt;p&gt;rstata commented on a change in pull request #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#discussion_r221445787&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#discussion_r221445787&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -101,6 +101,23 @@ private Class getPropAsClass(Schema schema, String prop) {&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+  @Override&lt;br/&gt;
+  protected Object readRecord(Object old, Schema expected, ResolvingDecoder in)&lt;br/&gt;
+    throws IOException {&lt;br/&gt;
+    SpecificData data = getSpecificData();&lt;br/&gt;
+    Object r = data.newRecord(old, expected);&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   yep&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16633195" author="githubbot" created="Sun, 30 Sep 2018 02:50:05 +0000"  >&lt;p&gt;rstata commented on a change in pull request #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#discussion_r221445798&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#discussion_r221445798&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificRecordBase.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -90,4 +92,19 @@ public void readExternal(ObjectInput in)&lt;br/&gt;
     new SpecificDatumReader(getSchema())&lt;br/&gt;
       .read(this, SpecificData.getDecoder(in));&lt;br/&gt;
   }&lt;br/&gt;
+&lt;br/&gt;
+  /** Returns true iff an instance supports the &lt;/p&gt;
{@link #encode} and&lt;br/&gt;
+    * {@link #decode} operations.  Should only be used by&lt;br/&gt;
+    * &amp;lt;code&amp;gt;SpecificDatumReader/Writer&amp;lt;/code&amp;gt; to selectively use&lt;br/&gt;
+    * {@link #encode}
&lt;p&gt; and &lt;/p&gt;
{@link #decode}
&lt;p&gt; to optimize the (de)serialization of&lt;br/&gt;
+    * values. */&lt;br/&gt;
+  public boolean hasCustomCoders() &lt;/p&gt;
{ return false; }
&lt;p&gt;+&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   protected is enough&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16633196" author="githubbot" created="Sun, 30 Sep 2018 02:50:20 +0000"  >&lt;p&gt;rstata commented on a change in pull request #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#discussion_r221445803&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#discussion_r221445803&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -473,4 +475,282 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
     READER$.read(this, SpecificData.getDecoder(in));&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+#if ($this.isCustomCodable($schema))&lt;br/&gt;
+  @Override public boolean hasCustomCoders() &lt;/p&gt;
{ return true; }
&lt;p&gt;+&lt;br/&gt;
+  @Override public void encode(org.apache.avro.io.Encoder out)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+#set ($nv = 0)## Counter to ensure unique var-names&lt;br/&gt;
+#set ($maxnv = 0)## Holds high-water mark during recursion&lt;br/&gt;
+#foreach ($field in $schema.getFields())&lt;br/&gt;
+#set ($n = $this.mangle($field.name(), $schema.isError()))&lt;br/&gt;
+#set ($s = $field.schema())&lt;br/&gt;
+#encodeVar(0 &quot;this.${n}&quot; $s)&lt;br/&gt;
+&lt;br/&gt;
+#set ($nv = $maxnv)&lt;br/&gt;
+#end&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override public void decode(org.apache.avro.io.Decoder in)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+#set ($nv = 0)## Counter to ensure unique var-names&lt;br/&gt;
+#set ($maxnv = 0)## Holds high-water mark during recursion&lt;br/&gt;
+#foreach ($field in $schema.getFields())&lt;br/&gt;
+#set ($n = $this.mangle($field.name(), $schema.isError()))&lt;br/&gt;
+#set ($s = $field.schema())&lt;br/&gt;
+#set ($rs = &quot;SCHEMA$.getField(&quot;&quot;${n}&quot;&quot;).schema()&quot;)&lt;br/&gt;
+#decodeVar(0 &quot;this.${n}&quot; $s $rs)&lt;br/&gt;
+&lt;br/&gt;
+#set ($nv = $maxnv)&lt;br/&gt;
+#end&lt;br/&gt;
+  }&lt;br/&gt;
+#end&lt;br/&gt;
 }&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeVar $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+##### Compound types (array, map, and union) require calls&lt;br/&gt;
+##### that will recurse back into this encodeVar macro:&lt;br/&gt;
+#if ($s.Type.Name.equals(&quot;array&quot;))&lt;br/&gt;
+#encodeArray($indent $var $s)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;map&quot;))&lt;br/&gt;
+#encodeMap($indent $var $s)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;union&quot;))&lt;br/&gt;
+#encodeUnion($indent $var $s)&lt;br/&gt;
+##### Use the generated &quot;encode&quot; method as fast way to write&lt;br/&gt;
+##### (specific) record types:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;record&quot;))&lt;br/&gt;
+$I    ${var}.encode(out);&lt;br/&gt;
+##### For rest of cases, generate calls out.writeXYZ:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;null&quot;))&lt;br/&gt;
+$I    out.writeNull();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;boolean&quot;))&lt;br/&gt;
+$I    out.writeBoolean(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;int&quot;))&lt;br/&gt;
+$I    out.writeInt(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;long&quot;))&lt;br/&gt;
+$I    out.writeLong(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;float&quot;))&lt;br/&gt;
+$I    out.writeFloat(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;double&quot;))&lt;br/&gt;
+$I    out.writeDouble(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;string&quot;))&lt;br/&gt;
+#if ($this.isStringable($s))&lt;br/&gt;
+$I    out.writeString(${var}.toString());&lt;br/&gt;
+#else&lt;br/&gt;
+$I    out.writeString(${var});&lt;br/&gt;
+#end&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;bytes&quot;))&lt;br/&gt;
+$I    out.writeBytes(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;fixed&quot;))&lt;br/&gt;
+$I    out.writeFixed(${var}.bytes(), 0, ${s.FixedSize});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;enum&quot;))&lt;br/&gt;
+$I    out.writeEnum(${var}.ordinal());&lt;br/&gt;
+#else&lt;br/&gt;
+## TODO &amp;#8211; singal a code-gen-time error&lt;br/&gt;
+#end&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeArray $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($et = $this.javaType($s.ElementType))&lt;br/&gt;
+$I    long size${nv} = ${var}.size();&lt;br/&gt;
+$I    out.writeArrayStart();&lt;br/&gt;
+$I    out.setItemCount(size${nv});&lt;br/&gt;
+$I    long actualSize${nv} = 0;&lt;br/&gt;
+$I    for ($et e${nv}: ${var}) {&lt;br/&gt;
&lt;ins&gt;$I      actualSize${nv}&lt;/ins&gt;+;&lt;br/&gt;
+$I      out.startItem();&lt;br/&gt;
+#set ($var = &quot;e${nv}&quot;)&lt;br/&gt;
+#set ($nv = $nv + 1)&lt;br/&gt;
+#set ($maxnv = $nv)&lt;br/&gt;
+#set ($indent = $indent + 2)&lt;br/&gt;
+#encodeVar($indent $var $s.ElementType)&lt;br/&gt;
+#set ($nv = $nv - 1)&lt;br/&gt;
+#set ($indent = $indent - 2)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    out.writeArrayEnd();&lt;br/&gt;
+$I    if (actualSize${nv} != size${nv})&lt;br/&gt;
+$I      throw new java.util.ConcurrentModificationException(&quot;Array-size written was &quot; + size${nv} + &quot;, but element count was &quot; + actualSize${nv} + &quot;.&quot;);&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeMap $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($kt = $this.getStringType($s))&lt;br/&gt;
+#set ($vt = $this.javaType($s.ValueType))&lt;br/&gt;
+$I    long size${nv} = ${var}.size();&lt;br/&gt;
+$I    out.writeMapStart();&lt;br/&gt;
+$I    out.setItemCount(size${nv});&lt;br/&gt;
+$I    long actualSize${nv} = 0;&lt;br/&gt;
+$I    for (java.util.Map.Entry&amp;lt;$kt, $vt&amp;gt; e${nv}: ${var}.entrySet()) {&lt;br/&gt;
&lt;ins&gt;$I      actualSize${nv}&lt;/ins&gt;+;&lt;br/&gt;
+$I      out.startItem();&lt;br/&gt;
+#if ($this.isStringable($s))&lt;br/&gt;
+$I      out.writeString(e${nv}.getKey().toString());&lt;br/&gt;
+#else&lt;br/&gt;
+$I      out.writeString(e${nv}.getKey());&lt;br/&gt;
+#end&lt;br/&gt;
+$I      $vt v${nv} = e${nv}.getValue();&lt;br/&gt;
+#set ($var = &quot;v${nv}&quot;)&lt;br/&gt;
+#set ($nv = $nv + 1)&lt;br/&gt;
+#set ($maxnv = $nv)&lt;br/&gt;
+#set ($indent = $indent + 2)&lt;br/&gt;
+#encodeVar($indent $var $s.ValueType)&lt;br/&gt;
+#set ($nv = $nv - 1)&lt;br/&gt;
+#set ($indent = $indent - 2)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    out.writeMapEnd();&lt;br/&gt;
+$I    if (actualSize${nv} != size${nv})&lt;br/&gt;
+      throw new java.util.ConcurrentModificationException(&quot;Map-size written was &quot; + size${nv} + &quot;, but element count was &quot; + actualSize${nv} + &quot;.&quot;);&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeUnion $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($et = $this.javaType($s.Types.get($this.getNonNullIndex($s))))&lt;br/&gt;
+$I    if (${var} == null) {&lt;br/&gt;
+$I      out.writeIndex(#if($this.getNonNullIndex($s)==0)1#&lt;/p&gt;
{else}
&lt;p&gt;0#end);&lt;br/&gt;
+$I      out.writeNull();&lt;br/&gt;
+$I    } else {&lt;br/&gt;
+$I      out.writeIndex(${this.getNonNullIndex($s)});&lt;br/&gt;
+#set ($indent = $indent + 2)&lt;br/&gt;
+#encodeVar($indent $var $s.Types.get($this.getNonNullIndex($s)))&lt;br/&gt;
+#set ($indent = $indent - 2)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I    }&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeVar $indent $var $s $rs )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+##### Compound types (array, map, and union) require calls&lt;br/&gt;
+##### that will recurse back into this decodeVar macro:&lt;br/&gt;
+#if ($s.Type.Name.equals(&quot;array&quot;))&lt;br/&gt;
+#decodeArray($indent $var $s $rs)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;map&quot;))&lt;br/&gt;
+#decodeMap($indent $var $s $rs)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;union&quot;))&lt;br/&gt;
+#decodeUnion($indent $var $s $rs)&lt;br/&gt;
+##### Use the generated &quot;decode&quot; method as fast way to write&lt;br/&gt;
+##### (specific) record types:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;record&quot;))&lt;br/&gt;
+$I    if (${var} == null) {&lt;br/&gt;
+$I      ${var} = new ${this.javaType($s)}();&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    ${var}.decode(in);&lt;br/&gt;
+##### For rest of cases, generate calls in.readXYZ:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;null&quot;))&lt;br/&gt;
+$I    in.readNull();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;boolean&quot;))&lt;br/&gt;
+$I    $var = in.readBoolean();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;int&quot;))&lt;br/&gt;
+$I    $var = in.readInt();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;long&quot;))&lt;br/&gt;
+$I    $var = in.readLong();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;float&quot;))&lt;br/&gt;
+$I    $var = in.readFloat();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;double&quot;))&lt;br/&gt;
+$I    $var = in.readDouble();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;string&quot;))&lt;br/&gt;
+#decodeString( &quot;$I&quot; $var $s )&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;bytes&quot;))&lt;br/&gt;
+$I    $var = in.readBytes(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;fixed&quot;))&lt;br/&gt;
+$I    if (${var} == null) {&lt;br/&gt;
+$I      ${var} = new ${this.javaType($s)}();&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    in.readFixed(${var}.bytes(), 0, ${s.FixedSize});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;enum&quot;))&lt;br/&gt;
+$I    $var = ${this.javaType($s)}.values()&lt;span class=&quot;error&quot;&gt;&amp;#91;in.readEnum()&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+#else&lt;br/&gt;
+## TODO &amp;#8211; singal a code-gen-time error&lt;br/&gt;
+#end&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeString $II $var $s )&lt;br/&gt;
+#set ($st = ${this.getStringType($s)})&lt;br/&gt;
+#if ($this.isStringable($s))&lt;br/&gt;
+$II    ${var} = new ${st}(in.readString());&lt;br/&gt;
+#elseif ($st.equals(&quot;java.lang.String&quot;))&lt;br/&gt;
+$II    $var = in.readString();&lt;br/&gt;
+#elseif ($st.equals(&quot;org.apache.avro.util.Utf8&quot;))&lt;br/&gt;
+$II    $var = in.readString(${var});&lt;br/&gt;
+#else&lt;br/&gt;
+$II    $var = in.readString(${var} instanceof Utf8 ? (Utf8)${var} : null);&lt;br/&gt;
+#end&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeArray $indent $var $s $rs )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($t = $this.javaType($s))&lt;br/&gt;
+#set ($et = $this.javaType($s.ElementType))&lt;br/&gt;
+#set ($gat = &quot;SpecificData.Array&amp;lt;${et}&amp;gt;&quot;)&lt;br/&gt;
+$I    long size${nv} = in.readArrayStart();&lt;br/&gt;
+$I    $t a${nv} = ${var}; // Need fresh name due to limitation of macro system&lt;br/&gt;
+$I    if (a${nv} == null) {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   changed to a velocity comment&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16633197" author="githubbot" created="Sun, 30 Sep 2018 02:50:44 +0000"  >&lt;p&gt;rstata commented on a change in pull request #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#discussion_r221445811&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#discussion_r221445811&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumWriter.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -71,6 +71,21 @@ protected void writeString(Schema schema, Object datum, Encoder out)&lt;br/&gt;
     writeString(datum, out);&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+  @Override&lt;br/&gt;
+  protected void writeRecord(Schema schema, Object datum, Encoder out)&lt;br/&gt;
+    throws IOException {&lt;br/&gt;
+    if (SpecificData.get().useCustomCoders()&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   ok&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16633198" author="githubbot" created="Sun, 30 Sep 2018 02:50:56 +0000"  >&lt;p&gt;rstata commented on a change in pull request #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#discussion_r221445814&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#discussion_r221445814&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -101,6 +101,23 @@ private Class getPropAsClass(Schema schema, String prop) {&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+  @Override&lt;br/&gt;
+  protected Object readRecord(Object old, Schema expected, ResolvingDecoder in)&lt;br/&gt;
+    throws IOException {&lt;br/&gt;
+    SpecificData data = getSpecificData();&lt;br/&gt;
+    Object r = data.newRecord(old, expected);&lt;br/&gt;
+    if (SpecificData.get().useCustomCoders()&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   ok&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16633206" author="githubbot" created="Sun, 30 Sep 2018 03:17:15 +0000"  >&lt;p&gt;rstata commented on issue #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#issuecomment-425690934&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#issuecomment-425690934&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I will update this patch.  The old changes were easily rebased onto Avro&apos;s current master.  You can see that result here:&lt;/p&gt;

&lt;p&gt;   &lt;a href=&quot;https://github.com/rstata-projects/avro/tree/specific-new-rebased&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/rstata-projects/avro/tree/specific-new-rebased&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;   I then started addressing the comments above.  I just closed a few of the change requests from above &amp;#8211; you can find the resulting changes here:&lt;/p&gt;

&lt;p&gt;   &lt;a href=&quot;https://github.com/rstata-projects/avro/tree/AVRO-2090-again&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/rstata-projects/avro/tree/AVRO-2090-again&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;   I&apos;ll keep working on this over the next few days.  In the meantime, if folks have applications that use SpecificRecord, it&apos;d be great if you could enable this feature and run it through your test cases.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16633209" author="githubbot" created="Sun, 30 Sep 2018 03:33:24 +0000"  >&lt;p&gt;rstata commented on issue #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#issuecomment-425691627&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#issuecomment-425691627&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @juwex, would love your help if you&apos;re still interested.  Good catch on the field-order problem.  It&apos;d be great if you could develop a test case that demonstrates the bug you&apos;ve found &amp;#8211; it&apos;d be a fantastic regression test.  Regarding a fix for this problem, we should check to see if the Decoder provided is an instance of ResolvingDecoder, and if it is code should use readFieldOrder to read fields in the correct order.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16633570" author="githubbot" created="Mon, 1 Oct 2018 02:15:42 +0000"  >&lt;p&gt;rstata commented on a change in pull request #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#discussion_r221484459&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#discussion_r221484459&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -122,6 +122,10 @@ public DatumWriter createDatumWriter(Schema schema) {&lt;br/&gt;
   /** Return the singleton instance. */&lt;br/&gt;
   public static SpecificData get() &lt;/p&gt;
{ return INSTANCE; }

&lt;p&gt;+  private static final boolean USE_CUSTOM_CODERS&lt;br/&gt;
+    = Boolean.parseBoolean(System.getProperty(&quot;org.apache.avro.specific.use_custom_coders&quot;,&quot;false&quot;));&lt;br/&gt;
+  public boolean useCustomCoders() &lt;/p&gt;
{ return USE_CUSTOM_CODERS; }

&lt;p&gt; Review comment:&lt;br/&gt;
   In &lt;a href=&quot;https://github.com/rstata-projects/avro/commit/e81a5880be69aef5bffdcf38f7ae3491957a6a68&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/rstata-projects/avro/commit/e81a5880be69aef5bffdcf38f7ae3491957a6a68&lt;/a&gt;, I changed this flag to be dynamically changable.&lt;/p&gt;

&lt;p&gt;   For the record, here&apos;s the roll-out plan I imagined for this feature (See &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2091&quot; title=&quot;Eliminate org.apache.avro.specific.use_custom_coder feature flag&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2091&quot;&gt;AVRO-2091&lt;/a&gt;(&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2091&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-2091&lt;/a&gt;)).  The initial release of this feature sets the `use_custom_coders` flag to `false` by default, to allow for some road testing.  The  release after that would set this flag to `true` by default, to allow for some more serious road testing.  The next release of Avro after that would then eliminate this flag altogether, under the assumption that the feature has been sufficiently tested and there&apos;s no longer a use for the old way of doing things.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16653002" author="githubbot" created="Wed, 17 Oct 2018 06:05:43 +0000"  >&lt;p&gt;rstata opened a new pull request #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I&apos;m resubmitting my patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;.  I have made most the changes suggested by @dcutting.&lt;/p&gt;

&lt;p&gt;   I created a test case for the schema-migration case.  As predicted by @juwex, the old code failed in this case.  I updated the generated code so it now works in this case.&lt;/p&gt;

&lt;p&gt;   Finally, I modified the top-level pom.xml so that it runs tests twice, once with the old code enabled and once with the new code enabled.  It&apos;s a good thing I did this, because it uncovered some backward-compat problems with ReflectData and friends, which subclass SepcificData and friends and were breaking when use_custom_coders was enabled.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16653004" author="githubbot" created="Wed, 17 Oct 2018 06:08:04 +0000"  >&lt;p&gt;rstata commented on issue #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256#issuecomment-430501383&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256#issuecomment-430501383&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I&apos;ve opened a new pull request (#350) to replace this one.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16653005" author="githubbot" created="Wed, 17 Oct 2018 06:08:04 +0000"  >&lt;p&gt;rstata closed pull request #256: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;: Improve encode/decode time for SpecificRecord using code generation&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/256&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/256&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
index be6bde8d2..bb918e41d 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
@@ -122,6 +122,10 @@ public DatumWriter createDatumWriter(Schema schema) {&lt;br/&gt;
   /** Return the singleton instance. */&lt;br/&gt;
   public static SpecificData get() &lt;/p&gt;
{ return INSTANCE; }

&lt;p&gt;+  private static final boolean USE_CUSTOM_CODERS&lt;br/&gt;
+    = Boolean.parseBoolean(System.getProperty(&quot;org.apache.avro.specific.use_custom_coders&quot;,&quot;false&quot;));&lt;br/&gt;
+  public boolean useCustomCoders() &lt;/p&gt;
{ return USE_CUSTOM_CODERS; }
&lt;p&gt;+&lt;br/&gt;
   @Override&lt;br/&gt;
   protected boolean isEnum(Object datum) {&lt;br/&gt;
     return datum instanceof Enum || super.isEnum(datum);&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java&lt;br/&gt;
index 774ca0944..0a9c97014 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java&lt;br/&gt;
@@ -101,6 +101,23 @@ private Class getPropAsClass(Schema schema, String prop) {&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+  @Override&lt;br/&gt;
+  protected Object readRecord(Object old, Schema expected, ResolvingDecoder in)&lt;br/&gt;
+    throws IOException {&lt;br/&gt;
+    SpecificData data = getSpecificData();&lt;br/&gt;
+    Object r = data.newRecord(old, expected);&lt;br/&gt;
+    if (SpecificData.get().useCustomCoders()&lt;br/&gt;
+        &amp;amp;&amp;amp; r instanceof SpecificRecordBase) // TODO: Is this needed?&lt;br/&gt;
+    {&lt;br/&gt;
+      SpecificRecordBase d = (SpecificRecordBase) r;&lt;br/&gt;
+      if (d.hasCustomCoders()) &lt;/p&gt;
{
+        d.decode(in);
+        return d;
+      }
&lt;p&gt;+    }&lt;br/&gt;
+    return super.readRecord(old, expected, in);&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
   @Override&lt;br/&gt;
   protected void readField(Object r, Schema.Field f, Object oldDatum,&lt;br/&gt;
                            ResolvingDecoder in, Object state)&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumWriter.java b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumWriter.java&lt;br/&gt;
index 7bee02a65..ee1d850a7 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumWriter.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumWriter.java&lt;br/&gt;
@@ -71,6 +71,21 @@ protected void writeString(Schema schema, Object datum, Encoder out)&lt;br/&gt;
     writeString(datum, out);&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+  @Override&lt;br/&gt;
+  protected void writeRecord(Schema schema, Object datum, Encoder out)&lt;br/&gt;
+    throws IOException {&lt;br/&gt;
+    if (SpecificData.get().useCustomCoders()&lt;br/&gt;
+        &amp;amp;&amp;amp; datum instanceof SpecificRecordBase) // TODO: Is this needed?&lt;br/&gt;
+    {&lt;br/&gt;
+      SpecificRecordBase d = (SpecificRecordBase) datum;&lt;br/&gt;
+      if (d.hasCustomCoders()) &lt;/p&gt;
{
+        d.encode(out);
+        return;
+      }
&lt;p&gt;+    }&lt;br/&gt;
+    super.writeRecord(schema, datum, out);&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
   @Override&lt;br/&gt;
   protected void writeField(Object datum, Schema.Field f, Encoder out,&lt;br/&gt;
                             Object state) throws IOException &lt;/p&gt;
{
diff --git a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificRecordBase.java b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificRecordBase.java
index 20d3dc331..2c26d0282 100644
--- a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificRecordBase.java
+++ b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificRecordBase.java
@@ -25,6 +25,8 @@
 import org.apache.avro.Conversion;
 import org.apache.avro.Schema;
 import org.apache.avro.generic.GenericRecord;
+import org.apache.avro.io.Decoder;
+import org.apache.avro.io.Encoder;
 
 /** Base class for generated record classes. */
 public abstract class SpecificRecordBase
@@ -90,4 +92,19 @@ public void readExternal(ObjectInput in)
     new SpecificDatumReader(getSchema())
       .read(this, SpecificData.getDecoder(in));
   }
&lt;p&gt;+&lt;br/&gt;
+  /** Returns true iff an instance supports the &lt;/p&gt;
{@link #encode} and&lt;br/&gt;
+    * {@link #decode} operations.  Should only be used by&lt;br/&gt;
+    * &amp;lt;code&amp;gt;SpecificDatumReader/Writer&amp;lt;/code&amp;gt; to selectively use&lt;br/&gt;
+    * {@link #encode}
&lt;p&gt; and &lt;/p&gt;
{@link #decode}
&lt;p&gt; to optimize the (de)serialization of&lt;br/&gt;
+    * values. */&lt;br/&gt;
+  public boolean hasCustomCoders() &lt;/p&gt;
{ return false; }
&lt;p&gt;+&lt;br/&gt;
+  public void encode(Encoder out) throws IOException &lt;/p&gt;
{
+    throw new UnsupportedOperationException();
+  }&lt;br/&gt;
+&lt;br/&gt;
+  public void decode(Decoder in) throws IOException {+    throw new UnsupportedOperationException();+  }
&lt;p&gt; }&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
index 7a6f5f1cc..8d8106538 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
+++ b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
@@ -572,9 +572,24 @@ private Schema addStringType(Schema s, Map&amp;lt;Schema,Schema&amp;gt; seen) &lt;/p&gt;
{
     return result;
   }

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private String getStringType(JsonNode overrideClassProperty) {&lt;/li&gt;
	&lt;li&gt;if (overrideClassProperty != null)&lt;/li&gt;
	&lt;li&gt;return overrideClassProperty.getTextValue();&lt;br/&gt;
+  /** Utility for template use (and also internal use).  Returns&lt;br/&gt;
+    * a string giving the FQN of the Java type to be used for a string&lt;br/&gt;
+    * schema or for the key of a map schema.  (It&apos;s an error to call&lt;br/&gt;
+    * this on a schema other than a string or map.) */&lt;br/&gt;
+  public String getStringType(Schema s) {&lt;br/&gt;
+    String prop;&lt;br/&gt;
+    switch (s.getType()) 
{
+    case MAP:
+      prop = SpecificData.KEY_CLASS_PROP;
+      break;
+    case STRING:
+      prop = SpecificData.CLASS_PROP;
+      break;
+    default:
+      throw new IllegalArgumentException(&quot;Can&apos;t check string-type of non-string/map type: &quot; + s);
+    }
&lt;p&gt;+    JsonNode override = s.getJsonProp(prop);&lt;br/&gt;
+    if (override != null) return override.getTextValue();&lt;br/&gt;
     switch (stringType) {&lt;br/&gt;
     case String:        return &quot;java.lang.String&quot;;&lt;br/&gt;
     case Utf8:          return &quot;org.apache.avro.util.Utf8&quot;;&lt;br/&gt;
@@ -583,6 +598,17 @@ private String getStringType(JsonNode overrideClassProperty) {&lt;br/&gt;
    }&lt;br/&gt;
   }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  /** Utility for template use.  Returns true iff a STRING-schema or&lt;br/&gt;
+    * the key of a MAP-schema is what SpecificData defines as&lt;br/&gt;
+    * &quot;stringable&quot; (which means we need to call toString on it before&lt;br/&gt;
+    * before writing it). */&lt;br/&gt;
+  public boolean isStringable(Schema schema) &lt;/p&gt;
{
+    String t = getStringType(schema);
+    return ! (t.equals(&quot;java.lang.String&quot;)
+              || t.equals(&quot;java.lang.CharSequence&quot;)
+              || t.equals(&quot;org.apache.avro.util.Utf8&quot;));
+  }
&lt;p&gt;+&lt;br/&gt;
   private static final Schema NULL_SCHEMA = Schema.create(Schema.Type.NULL);&lt;/p&gt;

&lt;p&gt;   /** Utility for template use.  Returns the java type for a Schema. */&lt;br/&gt;
@@ -607,15 +633,14 @@ private String javaType(Schema schema, boolean checkConvertedLogicalType) {&lt;br/&gt;
       return &quot;java.util.List&amp;lt;&quot; + javaType(schema.getElementType()) + &quot;&amp;gt;&quot;;&lt;br/&gt;
     case MAP:&lt;br/&gt;
       return &quot;java.util.Map&amp;lt;&quot;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;+ getStringType(schema.getJsonProp(SpecificData.KEY_CLASS_PROP))+&quot;,&quot;&lt;/li&gt;
	&lt;li&gt;+ javaType(schema.getValueType()) + &quot;&amp;gt;&quot;;&lt;br/&gt;
+        + getStringType(schema)+ &quot;,&quot; + javaType(schema.getValueType()) + &quot;&amp;gt;&quot;;&lt;br/&gt;
     case UNION:&lt;br/&gt;
       List&amp;lt;Schema&amp;gt; types = schema.getTypes(); // elide unions with null&lt;br/&gt;
       if ((types.size() == 2) &amp;amp;&amp;amp; types.contains(NULL_SCHEMA))&lt;br/&gt;
         return javaType(types.get(types.get(0).equals(NULL_SCHEMA) ? 1 : 0));&lt;br/&gt;
       return &quot;java.lang.Object&quot;;&lt;br/&gt;
     case STRING:&lt;/li&gt;
	&lt;li&gt;return getStringType(schema.getJsonProp(SpecificData.CLASS_PROP));&lt;br/&gt;
+      return getStringType(schema);&lt;br/&gt;
     case BYTES:   return &quot;java.nio.ByteBuffer&quot;;&lt;br/&gt;
     case INT:     return &quot;java.lang.Integer&quot;;&lt;br/&gt;
     case LONG:    return &quot;java.lang.Long&quot;;&lt;br/&gt;
@@ -656,6 +681,58 @@ public String javaUnbox(Schema schema) {&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+&lt;br/&gt;
+  /** Utility for template use.  Return a string with a given number&lt;br/&gt;
+    * of spaces to be used for indentation purposes. */&lt;br/&gt;
+  public String indent(int n) &lt;/p&gt;
{
+    return new String(new char[n]).replace(&apos;\0&apos;, &apos; &apos;);
+  }
&lt;p&gt;+&lt;br/&gt;
+  /** Utility for template use.  For a two-branch union type with&lt;br/&gt;
+    * one null branch, returns the index of the null branch.  It&apos;s an&lt;br/&gt;
+    * error to use on anything other than a two-branch union with on&lt;br/&gt;
+    * null branch. */&lt;br/&gt;
+  public int getNonNullIndex(Schema s) &lt;/p&gt;
{
+    if (s.getType() != Schema.Type.UNION
+        || s.getTypes().size() != 2
+        || ! s.getTypes().contains(NULL_SCHEMA))
+      throw new IllegalArgumentException(&quot;Can only be used on 2-branch union with a null branch: &quot; + s);
+    return (s.getTypes().get(0).equals(NULL_SCHEMA) ? 1 : 0);
+  }
&lt;p&gt;+&lt;br/&gt;
+  /** Utility for template use.  Returns true if the encode/decode&lt;br/&gt;
+    * logic in record.vm can handle the schema being presented. */&lt;br/&gt;
+  public boolean isCustomCodable(Schema schema) &lt;/p&gt;
{
+    if (schema.isError()) return false;
+    return isCustomCodable(schema, new HashSet&amp;lt;Schema&amp;gt;());
+  }
&lt;p&gt;+&lt;br/&gt;
+  private boolean isCustomCodable(Schema schema, Set&amp;lt;Schema&amp;gt; seen) {&lt;br/&gt;
+    if (! seen.add(schema)) return true;&lt;br/&gt;
+    if (schema.getLogicalType() != null) return false;&lt;br/&gt;
+    boolean result = true;&lt;br/&gt;
+    switch (schema.getType()) &lt;/p&gt;
{
+    case RECORD:
+      for (Schema.Field f : schema.getFields())
+        result &amp;amp;= isCustomCodable(f.schema(), seen);
+      break;
+    case MAP:
+      result = isCustomCodable(schema.getValueType(), seen);
+      break;
+    case ARRAY:
+      result = isCustomCodable(schema.getElementType(), seen);
+      break;
+    case UNION:
+      List&amp;lt;Schema&amp;gt; types = schema.getTypes();
+      // Only know how to handle &quot;nulling&quot; unions for now
+      if (types.size() != 2 || ! types.contains(NULL_SCHEMA)) return false;
+      for (Schema s : types) result &amp;amp;= isCustomCodable(s, seen);
+      break;
+    default:
+    }
&lt;p&gt;+    return result;&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
   public boolean hasLogicalTypeField(Schema schema) {&lt;br/&gt;
     for (Schema.Field field : schema.getFields()) {&lt;br/&gt;
       if (field.schema().getLogicalType() != null) {&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
index ccec4b60c..61259591f 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
+++ b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
@@ -19,7 +19,9 @@&lt;br/&gt;
 package $schema.getNamespace();&lt;br/&gt;
 #end&lt;/p&gt;

&lt;p&gt;+import org.apache.avro.generic.GenericArray;&lt;br/&gt;
 import org.apache.avro.specific.SpecificData;&lt;br/&gt;
+import org.apache.avro.util.Utf8;&lt;br/&gt;
 #if (!$schema.isError())&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageEncoder;&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageDecoder;&lt;br/&gt;
@@ -473,4 +475,282 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
     READER$.read(this, SpecificData.getDecoder(in));&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+#if ($this.isCustomCodable($schema))&lt;br/&gt;
+  @Override public boolean hasCustomCoders() &lt;/p&gt;
{ return true; }&lt;br/&gt;
+&lt;br/&gt;
+  @Override public void encode(org.apache.avro.io.Encoder out)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+#set ($nv = 0)## Counter to ensure unique var-names&lt;br/&gt;
+#set ($maxnv = 0)## Holds high-water mark during recursion&lt;br/&gt;
+#foreach ($field in $schema.getFields())&lt;br/&gt;
+#set ($n = $this.mangle($field.name(), $schema.isError()))&lt;br/&gt;
+#set ($s = $field.schema())&lt;br/&gt;
+#encodeVar(0 &quot;this.${n}&quot; $s)&lt;br/&gt;
+&lt;br/&gt;
+#set ($nv = $maxnv)&lt;br/&gt;
+#end&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override public void decode(org.apache.avro.io.Decoder in)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+#set ($nv = 0)## Counter to ensure unique var-names&lt;br/&gt;
+#set ($maxnv = 0)## Holds high-water mark during recursion&lt;br/&gt;
+#foreach ($field in $schema.getFields())&lt;br/&gt;
+#set ($n = $this.mangle($field.name(), $schema.isError()))&lt;br/&gt;
+#set ($s = $field.schema())&lt;br/&gt;
+#set ($rs = &quot;SCHEMA$.getField(&quot;&quot;${n}&quot;&quot;).schema()&quot;)&lt;br/&gt;
+#decodeVar(0 &quot;this.${n}&quot; $s $rs)&lt;br/&gt;
+&lt;br/&gt;
+#set ($nv = $maxnv)&lt;br/&gt;
+#end&lt;br/&gt;
+  }&lt;br/&gt;
+#end&lt;br/&gt;
 }&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeVar $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+##### Compound types (array, map, and union) require calls&lt;br/&gt;
+##### that will recurse back into this encodeVar macro:&lt;br/&gt;
+#if ($s.Type.Name.equals(&quot;array&quot;))&lt;br/&gt;
+#encodeArray($indent $var $s)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;map&quot;))&lt;br/&gt;
+#encodeMap($indent $var $s)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;union&quot;))&lt;br/&gt;
+#encodeUnion($indent $var $s)&lt;br/&gt;
+##### Use the generated &quot;encode&quot; method as fast way to write&lt;br/&gt;
+##### (specific) record types:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;record&quot;))&lt;br/&gt;
+$I    ${var}.encode(out);&lt;br/&gt;
+##### For rest of cases, generate calls out.writeXYZ:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;null&quot;))&lt;br/&gt;
+$I    out.writeNull();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;boolean&quot;))&lt;br/&gt;
+$I    out.writeBoolean(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;int&quot;))&lt;br/&gt;
+$I    out.writeInt(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;long&quot;))&lt;br/&gt;
+$I    out.writeLong(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;float&quot;))&lt;br/&gt;
+$I    out.writeFloat(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;double&quot;))&lt;br/&gt;
+$I    out.writeDouble(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;string&quot;))&lt;br/&gt;
+#if ($this.isStringable($s))&lt;br/&gt;
+$I    out.writeString(${var}.toString());&lt;br/&gt;
+#else&lt;br/&gt;
+$I    out.writeString(${var});&lt;br/&gt;
+#end&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;bytes&quot;))&lt;br/&gt;
+$I    out.writeBytes(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;fixed&quot;))&lt;br/&gt;
+$I    out.writeFixed(${var}.bytes(), 0, ${s.FixedSize});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;enum&quot;))&lt;br/&gt;
+$I    out.writeEnum(${var}.ordinal());&lt;br/&gt;
+#else&lt;br/&gt;
+## TODO &amp;#8211; singal a code-gen-time error&lt;br/&gt;
+#end&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeArray $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($et = $this.javaType($s.ElementType))&lt;br/&gt;
+$I    long size${nv} = ${var}.size();&lt;br/&gt;
+$I    out.writeArrayStart();&lt;br/&gt;
+$I    out.setItemCount(size${nv});&lt;br/&gt;
+$I    long actualSize${nv} = 0;&lt;br/&gt;
+$I    for ($et e${nv}: ${var}) {&lt;br/&gt;
&lt;ins&gt;$I      actualSize${nv}&lt;/ins&gt;+;&lt;br/&gt;
+$I      out.startItem();&lt;br/&gt;
+#set ($var = &quot;e${nv}&quot;)&lt;br/&gt;
+#set ($nv = $nv + 1)&lt;br/&gt;
+#set ($maxnv = $nv)&lt;br/&gt;
+#set ($indent = $indent + 2)&lt;br/&gt;
+#encodeVar($indent $var $s.ElementType)&lt;br/&gt;
+#set ($nv = $nv - 1)&lt;br/&gt;
+#set ($indent = $indent - 2)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    out.writeArrayEnd();&lt;br/&gt;
+$I    if (actualSize${nv} != size${nv})&lt;br/&gt;
+$I      throw new java.util.ConcurrentModificationException(&quot;Array-size written was &quot; + size${nv} + &quot;, but element count was &quot; + actualSize${nv} + &quot;.&quot;);&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeMap $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($kt = $this.getStringType($s))&lt;br/&gt;
+#set ($vt = $this.javaType($s.ValueType))&lt;br/&gt;
+$I    long size${nv} = ${var}.size();&lt;br/&gt;
+$I    out.writeMapStart();&lt;br/&gt;
+$I    out.setItemCount(size${nv});&lt;br/&gt;
+$I    long actualSize${nv} = 0;&lt;br/&gt;
+$I    for (java.util.Map.Entry&amp;lt;$kt, $vt&amp;gt; e${nv}: ${var}.entrySet()) {&lt;br/&gt;
&lt;ins&gt;$I      actualSize${nv}&lt;/ins&gt;+;&lt;br/&gt;
+$I      out.startItem();&lt;br/&gt;
+#if ($this.isStringable($s))&lt;br/&gt;
+$I      out.writeString(e${nv}.getKey().toString());&lt;br/&gt;
+#else&lt;br/&gt;
+$I      out.writeString(e${nv}.getKey());&lt;br/&gt;
+#end&lt;br/&gt;
+$I      $vt v${nv} = e${nv}.getValue();&lt;br/&gt;
+#set ($var = &quot;v${nv}&quot;)&lt;br/&gt;
+#set ($nv = $nv + 1)&lt;br/&gt;
+#set ($maxnv = $nv)&lt;br/&gt;
+#set ($indent = $indent + 2)&lt;br/&gt;
+#encodeVar($indent $var $s.ValueType)&lt;br/&gt;
+#set ($nv = $nv - 1)&lt;br/&gt;
+#set ($indent = $indent - 2)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    out.writeMapEnd();&lt;br/&gt;
+$I    if (actualSize${nv} != size${nv})&lt;br/&gt;
+      throw new java.util.ConcurrentModificationException(&quot;Map-size written was &quot; + size${nv} + &quot;, but element count was &quot; + actualSize${nv} + &quot;.&quot;);&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeUnion $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($et = $this.javaType($s.Types.get($this.getNonNullIndex($s))))&lt;br/&gt;
+$I    if (${var} == null) {&lt;br/&gt;
+$I      out.writeIndex(#if($this.getNonNullIndex($s)==0)1#{else}0#end);&lt;br/&gt;
+$I      out.writeNull();&lt;br/&gt;
+$I    } else {&lt;br/&gt;
+$I      out.writeIndex(${this.getNonNullIndex($s)});&lt;br/&gt;
+#set ($indent = $indent + 2)&lt;br/&gt;
+#encodeVar($indent $var $s.Types.get($this.getNonNullIndex($s)))&lt;br/&gt;
+#set ($indent = $indent - 2)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I    }&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeVar $indent $var $s $rs )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+##### Compound types (array, map, and union) require calls&lt;br/&gt;
+##### that will recurse back into this decodeVar macro:&lt;br/&gt;
+#if ($s.Type.Name.equals(&quot;array&quot;))&lt;br/&gt;
+#decodeArray($indent $var $s $rs)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;map&quot;))&lt;br/&gt;
+#decodeMap($indent $var $s $rs)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;union&quot;))&lt;br/&gt;
+#decodeUnion($indent $var $s $rs)&lt;br/&gt;
+##### Use the generated &quot;decode&quot; method as fast way to write&lt;br/&gt;
+##### (specific) record types:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;record&quot;))&lt;br/&gt;
+$I    if (${var} == null) {&lt;br/&gt;
+$I      ${var} = new ${this.javaType($s)}();&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    ${var}.decode(in);&lt;br/&gt;
+##### For rest of cases, generate calls in.readXYZ:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;null&quot;))&lt;br/&gt;
+$I    in.readNull();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;boolean&quot;))&lt;br/&gt;
+$I    $var = in.readBoolean();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;int&quot;))&lt;br/&gt;
+$I    $var = in.readInt();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;long&quot;))&lt;br/&gt;
+$I    $var = in.readLong();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;float&quot;))&lt;br/&gt;
+$I    $var = in.readFloat();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;double&quot;))&lt;br/&gt;
+$I    $var = in.readDouble();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;string&quot;))&lt;br/&gt;
+#decodeString( &quot;$I&quot; $var $s )&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;bytes&quot;))&lt;br/&gt;
+$I    $var = in.readBytes(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;fixed&quot;))&lt;br/&gt;
+$I    if (${var} == null) {&lt;br/&gt;
+$I      ${var} = new ${this.javaType($s)}();&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    in.readFixed(${var}.bytes(), 0, ${s.FixedSize});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;enum&quot;))&lt;br/&gt;
+$I    $var = ${this.javaType($s)}.values()&lt;span class=&quot;error&quot;&gt;&amp;#91;in.readEnum()&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+#else&lt;br/&gt;
+## TODO &amp;#8211; singal a code-gen-time error&lt;br/&gt;
+#end&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeString $II $var $s )&lt;br/&gt;
+#set ($st = ${this.getStringType($s)})&lt;br/&gt;
+#if ($this.isStringable($s))&lt;br/&gt;
+$II    ${var} = new ${st}(in.readString());&lt;br/&gt;
+#elseif ($st.equals(&quot;java.lang.String&quot;))&lt;br/&gt;
+$II    $var = in.readString();&lt;br/&gt;
+#elseif ($st.equals(&quot;org.apache.avro.util.Utf8&quot;))&lt;br/&gt;
+$II    $var = in.readString(${var});&lt;br/&gt;
+#else&lt;br/&gt;
+$II    $var = in.readString(${var} instanceof Utf8 ? (Utf8)${var} : null);&lt;br/&gt;
+#end&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeArray $indent $var $s $rs )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($t = $this.javaType($s))&lt;br/&gt;
+#set ($et = $this.javaType($s.ElementType))&lt;br/&gt;
+#set ($gat = &quot;SpecificData.Array&amp;lt;${et}&amp;gt;&quot;)&lt;br/&gt;
+$I    long size${nv} = in.readArrayStart();&lt;br/&gt;
+$I    $t a${nv} = ${var}; // Need fresh name due to limitation of macro system&lt;br/&gt;
+$I    if (a${nv} == null) {&lt;br/&gt;
+$I      a${nv} = new ${gat}((int)size${nv}, ${rs});&lt;br/&gt;
+$I      $var = a${nv};&lt;br/&gt;
+$I    } else a${nv}.clear();&lt;br/&gt;
+$I    $gat ga${nv} = (a${nv} instanceof SpecificData.Array ? (${gat})a${nv} : null);&lt;br/&gt;
+$I    for ( ; 0 &amp;lt; size${nv}; size${nv} = in.arrayNext()) {&lt;br/&gt;
+$I      for ( ; size${nv} != 0; size${nv}--) {&lt;br/&gt;
+$I        $et e${nv} = (ga${nv} != null ? ga${nv}.peek() : null);&lt;br/&gt;
+#set ($var = &quot;e${nv}&quot;)&lt;br/&gt;
+#set ($nv = $nv + 1)&lt;br/&gt;
+#set ($maxnv = $nv)&lt;br/&gt;
+#set ($indent = $indent + 4)&lt;br/&gt;
+#decodeVar($indent $var $s.ElementType &quot;${rs}.getElementType()&quot;)&lt;br/&gt;
+#set ($nv = $nv - 1)&lt;br/&gt;
+#set ($indent = $indent - 4)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I        a${nv}.add(e${nv});&lt;br/&gt;
+$I      }&lt;br/&gt;
+$I    }&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeMap $indent $var $s $rs )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($t = $this.javaType($s))&lt;br/&gt;
+#set ($kt = $this.getStringType($s))&lt;br/&gt;
+#set ($vt = $this.javaType($s.ValueType))&lt;br/&gt;
+$I    long size${nv} = in.readMapStart();&lt;br/&gt;
+$I    $t m${nv} = ${var}; // Need fresh name due to limitation of macro system&lt;br/&gt;
+$I    if (m${nv} == null) {&lt;br/&gt;
+$I      m${nv} = new java.util.HashMap&amp;lt;${kt},${vt}&amp;gt;((int)size${nv});&lt;br/&gt;
+$I      $var = m${nv};&lt;br/&gt;
+$I    } else m${nv}.clear();&lt;br/&gt;
+$I    for ( ; 0 &amp;lt; size${nv}; size${nv} = in.mapNext()) {&lt;br/&gt;
+$I      for ( ; size${nv} != 0; size${nv}--) {&lt;br/&gt;
+$I        $kt k${nv} = null;&lt;br/&gt;
+#decodeString( &quot;$I    &quot; &quot;k${nv}&quot; $s )&lt;br/&gt;
+$I        $vt v${nv} = null;&lt;br/&gt;
+#set ($var = &quot;v${nv}&quot;)&lt;br/&gt;
+#set ($nv = $nv + 1)&lt;br/&gt;
+#set ($maxnv = $nv)&lt;br/&gt;
+#set ($indent = $indent + 4)&lt;br/&gt;
+#decodeVar($indent $var $s.ValueType &quot;${rs}.getValueType()&quot;)&lt;br/&gt;
+#set ($nv = $nv - 1)&lt;br/&gt;
+#set ($indent = $indent - 4)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I        m${nv}.put(k${nv}, v${nv});&lt;br/&gt;
+$I      }&lt;br/&gt;
+$I    }&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeUnion $indent $var $s $rs )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($et = $this.javaType($s.Types.get($this.getNonNullIndex($s))))&lt;br/&gt;
+#set ($si = $this.getNonNullIndex($s))&lt;br/&gt;
+$I    if (in.readIndex() != ${si}) {&lt;br/&gt;
+$I      in.readNull();&lt;br/&gt;
+$I      ${var} = null;&lt;br/&gt;
+$I    } else {&lt;br/&gt;
+#set ($indent = $indent + 2)&lt;br/&gt;
+#decodeVar($indent $var $s.Types.get($si) &quot;${rs}.getTypes().get(${si})&quot;)&lt;br/&gt;
+#set ($indent = $indent - 2)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I    }&lt;br/&gt;
+#end&lt;br/&gt;
diff --git a/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java b/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java&lt;br/&gt;
index 4dff5ef50..264e8e222 100644&lt;br/&gt;
&amp;#8212; a/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java&lt;br/&gt;
+++ b/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java&lt;br/&gt;
@@ -5,7 +5,9 @@&lt;br/&gt;
  */&lt;br/&gt;
 package avro.examples.baseball;&lt;br/&gt;
 &lt;br/&gt;
+import org.apache.avro.generic.GenericArray;&lt;br/&gt;
 import org.apache.avro.specific.SpecificData;&lt;br/&gt;
+import org.apache.avro.util.Utf8;&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageEncoder;&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageDecoder;&lt;br/&gt;
 import org.apache.avro.message.SchemaStore;&lt;br/&gt;
@@ -460,4 +462,65 @@ public Player build() {
     READER$.read(this, SpecificData.getDecoder(in));
   }&lt;br/&gt;
 &lt;br/&gt;
+  @Override public boolean hasCustomCoders() { return true; }
&lt;p&gt;+&lt;br/&gt;
+  @Override public void encode(org.apache.avro.io.Encoder out)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+    out.writeInt(this.number);&lt;br/&gt;
+&lt;br/&gt;
+    out.writeString(this.first_name);&lt;br/&gt;
+&lt;br/&gt;
+    out.writeString(this.last_name);&lt;br/&gt;
+&lt;br/&gt;
+    long size0 = this.position.size();&lt;br/&gt;
+    out.writeArrayStart();&lt;br/&gt;
+    out.setItemCount(size0);&lt;br/&gt;
+    long actualSize0 = 0;&lt;br/&gt;
+    for (avro.examples.baseball.Position e0: this.position) &lt;/p&gt;
{
+      actualSize0++;
+      out.startItem();
+      out.writeEnum(e0.ordinal());
+    }&lt;br/&gt;
+    out.writeArrayEnd();&lt;br/&gt;
+    if (actualSize0 != size0)&lt;br/&gt;
+      throw new java.util.ConcurrentModificationException(&quot;Array-size written was &quot; + size0 + &quot;, but element count was &quot; + actualSize0 + &quot;.&quot;);&lt;br/&gt;
+&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override public void decode(org.apache.avro.io.Decoder in)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+    this.number = in.readInt();&lt;br/&gt;
+&lt;br/&gt;
+    this.first_name = in.readString();&lt;br/&gt;
+&lt;br/&gt;
+    this.last_name = in.readString();&lt;br/&gt;
+&lt;br/&gt;
+    long size0 = in.readArrayStart();&lt;br/&gt;
+    java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position; // Need fresh name due to limitation of macro system&lt;br/&gt;
+    if (a0 == null) {
+      a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());
+      this.position = a0;
+    } else a0.clear();&lt;br/&gt;
+    SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;br/&gt;
+    for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) {&lt;br/&gt;
+      for ( ; size0 != 0; size0--) {
+        avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
+        e0 = avro.examples.baseball.Position.values()[in.readEnum()];
+        a0.add(e0);
+      }&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+  }&lt;br/&gt;
 }&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
diff --git a/lang/java/tools/src/test/compiler/output/Player.java b/lang/java/tools/src/test/compiler/output/Player.java&lt;br/&gt;
index 26fcbc0d5..c9bf1687a 100644&lt;br/&gt;
&amp;#8212; a/lang/java/tools/src/test/compiler/output/Player.java&lt;br/&gt;
+++ b/lang/java/tools/src/test/compiler/output/Player.java&lt;br/&gt;
@@ -5,7 +5,9 @@&lt;br/&gt;
  */&lt;br/&gt;
 package avro.examples.baseball;&lt;br/&gt;
 &lt;br/&gt;
+import org.apache.avro.generic.GenericArray;&lt;br/&gt;
 import org.apache.avro.specific.SpecificData;&lt;br/&gt;
+import org.apache.avro.util.Utf8;&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageEncoder;&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageDecoder;&lt;br/&gt;
 import org.apache.avro.message.SchemaStore;&lt;br/&gt;
@@ -460,4 +462,65 @@ public Player build() {
     READER$.read(this, SpecificData.getDecoder(in));
   }&lt;br/&gt;
 &lt;br/&gt;
+  @Override public boolean hasCustomCoders() { return true; }&lt;br/&gt;
+&lt;br/&gt;
+  @Override public void encode(org.apache.avro.io.Encoder out)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+    out.writeInt(this.number);&lt;br/&gt;
+&lt;br/&gt;
+    out.writeString(this.first_name);&lt;br/&gt;
+&lt;br/&gt;
+    out.writeString(this.last_name);&lt;br/&gt;
+&lt;br/&gt;
+    long size0 = this.position.size();&lt;br/&gt;
+    out.writeArrayStart();&lt;br/&gt;
+    out.setItemCount(size0);&lt;br/&gt;
+    long actualSize0 = 0;&lt;br/&gt;
+    for (avro.examples.baseball.Position e0: this.position) {+      actualSize0++;+      out.startItem();+      out.writeEnum(e0.ordinal());+    }
&lt;p&gt;+    out.writeArrayEnd();&lt;br/&gt;
+    if (actualSize0 != size0)&lt;br/&gt;
+      throw new java.util.ConcurrentModificationException(&quot;Array-size written was &quot; + size0 + &quot;, but element count was &quot; + actualSize0 + &quot;.&quot;);&lt;br/&gt;
+&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override public void decode(org.apache.avro.io.Decoder in)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+    this.number = in.readInt();&lt;br/&gt;
+&lt;br/&gt;
+    this.first_name = in.readString(this.first_name instanceof Utf8 ? (Utf8)this.first_name : null);&lt;br/&gt;
+&lt;br/&gt;
+    this.last_name = in.readString(this.last_name instanceof Utf8 ? (Utf8)this.last_name : null);&lt;br/&gt;
+&lt;br/&gt;
+    long size0 = in.readArrayStart();&lt;br/&gt;
+    java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position; // Need fresh name due to limitation of macro system&lt;br/&gt;
+    if (a0 == null) &lt;/p&gt;
{
+      a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());
+      this.position = a0;
+    }
&lt;p&gt; else a0.clear();&lt;br/&gt;
+    SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;br/&gt;
+    for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) {&lt;br/&gt;
+      for ( ; size0 != 0; size0--) &lt;/p&gt;
{
+        avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
+        e0 = avro.examples.baseball.Position.values()[in.readEnum()];
+        a0.add(e0);
+      }
&lt;p&gt;+    }&lt;br/&gt;
+&lt;br/&gt;
+  }&lt;br/&gt;
 }&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16653962" author="githubbot" created="Wed, 17 Oct 2018 18:02:37 +0000"  >&lt;p&gt;cutting commented on a change in pull request #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#discussion_r226033686&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#discussion_r226033686&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -101,6 +101,23 @@ private Class getPropAsClass(Schema schema, String prop) {&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+  @Override&lt;br/&gt;
+  protected Object readRecord(Object old, Schema expected, ResolvingDecoder in)&lt;br/&gt;
+    throws IOException {&lt;br/&gt;
+    SpecificData data = getSpecificData();&lt;br/&gt;
+    if (data.useCustomCoders()) {&lt;br/&gt;
+      Object r = data.newRecord(old, expected);&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   If you enable custom coders and use classes that don&apos;t have them, you&apos;ll silently create spurious instances.  That could be a significant performance hit.  Should it instead throw an exception?  Or, if that&apos;s not practical, might there be a faster way to test if a schema has a custom coder?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16654225" author="githubbot" created="Wed, 17 Oct 2018 21:29:10 +0000"  >&lt;p&gt;rstata commented on a change in pull request #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#discussion_r226101432&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#discussion_r226101432&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -101,6 +101,23 @@ private Class getPropAsClass(Schema schema, String prop) {&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+  @Override&lt;br/&gt;
+  protected Object readRecord(Object old, Schema expected, ResolvingDecoder in)&lt;br/&gt;
+    throws IOException {&lt;br/&gt;
+    SpecificData data = getSpecificData();&lt;br/&gt;
+    if (data.useCustomCoders()) {&lt;br/&gt;
+      Object r = data.newRecord(old, expected);&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   What about the following:&lt;br/&gt;
   ```&lt;br/&gt;
         old = data.newRecord(old, expected);&lt;br/&gt;
         if (old instanceof SpecificRecordBase) {&lt;br/&gt;
         ...&lt;br/&gt;
   ```&lt;br/&gt;
   That is to say, if I get a record back from newRecord and it doesn&apos;t have custom coders, then I pass the old-or-newly-allocated object to `super.readRecord`, which won&apos;t then need to allocate another object.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16654270" author="githubbot" created="Wed, 17 Oct 2018 21:57:18 +0000"  >&lt;p&gt;cutting commented on a change in pull request #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#discussion_r226108653&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#discussion_r226108653&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -101,6 +101,23 @@ private Class getPropAsClass(Schema schema, String prop) {&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+  @Override&lt;br/&gt;
+  protected Object readRecord(Object old, Schema expected, ResolvingDecoder in)&lt;br/&gt;
+    throws IOException {&lt;br/&gt;
+    SpecificData data = getSpecificData();&lt;br/&gt;
+    if (data.useCustomCoders()) {&lt;br/&gt;
+      Object r = data.newRecord(old, expected);&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Yes, I think that works.  The punt case at the bottom will then reuse the instance already created.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16654739" author="raymie" created="Thu, 18 Oct 2018 07:14:53 +0000"  >&lt;p&gt;I&apos;ve attached my two runs of Perf.java combined into a single file (&lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12944486/12944486_perf-data.txt&quot; title=&quot;perf-data.txt attached to AVRO-2090&quot;&gt;perf-data.txt&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/link_attachment_7.gif&quot; height=&quot;7&quot; width=&quot;7&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;).&#160; The first four columns of numbers in this file are the results with custom-encoders turned off; the next four columns are the results with custom-encoders on.&lt;/p&gt;

&lt;p&gt;For the two SpecificRecord cases: On my machine, FooBarSpecificRecordTestWrite improved 36% (from 3577 ms to 2296 ms), while FooBarSpecificRecordTestRead improved 12% (4728 ms to 4130 ms).&#160; It&apos;s not surprising that the read case improved less: the overhead of accommodating schema migration is high.&#160; I have some ideas on how improve performance even more, esp. for the read case.&#160; That said, a &amp;gt;10% improvement is not bad, and 36% improvement is quite good, so I suggest we commit this change as-is and save further improvements to future patches.&lt;/p&gt;

&lt;p&gt;(Thiru points out that FooBarSpecificRecord a very small class that probably understates the performance-improvements of this patch.&#160; In our work at Aqfer, we&apos;ve seen larger improvements.)&lt;/p&gt;</comment>
                            <comment id="16654741" author="githubbot" created="Thu, 18 Oct 2018 07:16:54 +0000"  >&lt;p&gt;rstata commented on issue #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#issuecomment-430901185&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#issuecomment-430901185&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I will make the change to SpecificDatumReader as discussed with Doug.  I&apos;d like to batch this change with a larger set of changes based on further feedback on this work.&lt;/p&gt;

&lt;p&gt;   More feedback?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16656690" author="githubbot" created="Fri, 19 Oct 2018 11:38:29 +0000"  >&lt;p&gt;rstata commented on issue #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#issuecomment-431334712&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#issuecomment-431334712&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I pushed a patch to fix the problem Doug found.  I think this is ready to go...&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16657118" author="githubbot" created="Fri, 19 Oct 2018 17:15:26 +0000"  >&lt;p&gt;cutting commented on a change in pull request #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#discussion_r226716217&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#discussion_r226716217&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -122,6 +122,11 @@ public DatumWriter createDatumWriter(Schema schema) {&lt;br/&gt;
   /** Return the singleton instance. */&lt;br/&gt;
   public static SpecificData get() &lt;/p&gt;
{ return INSTANCE; }

&lt;p&gt;+  private boolean useCustomCoderFlag&lt;br/&gt;
+    = Boolean.parseBoolean(System.getProperty(&quot;org.apache.avro.specific.use_custom_coders&quot;,&quot;false&quot;));&lt;br/&gt;
+  public boolean useCustomCoders() &lt;/p&gt;
{ return useCustomCoderFlag; }
&lt;p&gt;+  public void setCustomCoders(boolean flag) &lt;/p&gt;
{ useCustomCoderFlag = flag; }
&lt;p&gt;+&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   These new public methods need javadoc.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16657219" author="githubbot" created="Fri, 19 Oct 2018 18:01:44 +0000"  >&lt;p&gt;rstata commented on a change in pull request #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#discussion_r226733860&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#discussion_r226733860&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -122,6 +122,11 @@ public DatumWriter createDatumWriter(Schema schema) {&lt;br/&gt;
   /** Return the singleton instance. */&lt;br/&gt;
   public static SpecificData get() &lt;/p&gt;
{ return INSTANCE; }

&lt;p&gt;+  private boolean useCustomCoderFlag&lt;br/&gt;
+    = Boolean.parseBoolean(System.getProperty(&quot;org.apache.avro.specific.use_custom_coders&quot;,&quot;false&quot;));&lt;br/&gt;
+  public boolean useCustomCoders() &lt;/p&gt;
{ return useCustomCoderFlag; }
&lt;p&gt;+  public void setCustomCoders(boolean flag) &lt;/p&gt;
{ useCustomCoderFlag = flag; }
&lt;p&gt;+&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Regarding compiler options: the controlability here isn&apos;t intended to be a long-term option, it&apos;s intended to be a &quot;feature flag&quot; that allows more risk-seeking users to use the feature early and help find corner-case bugs.  After a release or two, the flag should go away and this should be the only way to generate code.  As a result, this feature flag is more appropriate as a runtime option (as it is now), vs. a compile-time option.  For example, imagine the scenario where the custom coders look really good during testing, they get shipped to production, and a bug is tickled.  In this scenario, the ops team will want to turn off the custom coders with a runtime flag, rather than wait for the system to be recompiled with a change to the compile-time flag.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16657220" author="githubbot" created="Fri, 19 Oct 2018 18:02:40 +0000"  >&lt;p&gt;rstata commented on a change in pull request #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#discussion_r226734142&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#discussion_r226734142&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -122,6 +122,11 @@ public DatumWriter createDatumWriter(Schema schema) {&lt;br/&gt;
   /** Return the singleton instance. */&lt;br/&gt;
   public static SpecificData get() &lt;/p&gt;
{ return INSTANCE; }

&lt;p&gt;+  private boolean useCustomCoderFlag&lt;br/&gt;
+    = Boolean.parseBoolean(System.getProperty(&quot;org.apache.avro.specific.use_custom_coders&quot;,&quot;false&quot;));&lt;br/&gt;
+  public boolean useCustomCoders() &lt;/p&gt;
{ return useCustomCoderFlag; }
&lt;p&gt;+  public void setCustomCoders(boolean flag) &lt;/p&gt;
{ useCustomCoderFlag = flag; }
&lt;p&gt;+&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Regarding documentation: there is a larger issue here that this feature flag isn&apos;t documented.  I&apos;ll add the suggested Javadoc but also look for other places to document this new feature and how Avro users can enable it.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16657223" author="githubbot" created="Fri, 19 Oct 2018 18:04:30 +0000"  >&lt;p&gt;rstata commented on a change in pull request #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#discussion_r226734720&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#discussion_r226734720&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -122,6 +122,11 @@ public DatumWriter createDatumWriter(Schema schema) {&lt;br/&gt;
   /** Return the singleton instance. */&lt;br/&gt;
   public static SpecificData get() &lt;/p&gt;
{ return INSTANCE; }

&lt;p&gt;+  private boolean useCustomCoderFlag&lt;br/&gt;
+    = Boolean.parseBoolean(System.getProperty(&quot;org.apache.avro.specific.use_custom_coders&quot;,&quot;false&quot;));&lt;br/&gt;
+  public boolean useCustomCoders() &lt;/p&gt;
{ return useCustomCoderFlag; }
&lt;p&gt;+  public void setCustomCoders(boolean flag) &lt;/p&gt;
{ useCustomCoderFlag = flag; }
&lt;p&gt;+&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Regarding piecemeal: yes, it would definitely be valuable to have a finite list of todo&apos;s here rather than an indefinitely growing one &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16657461" author="githubbot" created="Fri, 19 Oct 2018 21:27:08 +0000"  >&lt;p&gt;rstata commented on a change in pull request #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#discussion_r226786418&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#discussion_r226786418&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -122,6 +122,11 @@ public DatumWriter createDatumWriter(Schema schema) {&lt;br/&gt;
   /** Return the singleton instance. */&lt;br/&gt;
   public static SpecificData get() &lt;/p&gt;
{ return INSTANCE; }

&lt;p&gt;+  private boolean useCustomCoderFlag&lt;br/&gt;
+    = Boolean.parseBoolean(System.getProperty(&quot;org.apache.avro.specific.use_custom_coders&quot;,&quot;false&quot;));&lt;br/&gt;
+  public boolean useCustomCoders() &lt;/p&gt;
{ return useCustomCoderFlag; }
&lt;p&gt;+  public void setCustomCoders(boolean flag) &lt;/p&gt;
{ useCustomCoderFlag = flag; }
&lt;p&gt;+&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   I just pushed a change that added the missing Javadoc, and also updated the Getting Started Guide for Java to include a subsection on the new feature flag and how to use it.  Finally, since we point to JIRA tickets as our release notes, I updated the description of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; to be more informative to users looking to see what&apos;s new in Avro, and also included there a pointer to the more detailed documentation in the Getting Started Guide.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16658852" author="raymie" created="Mon, 22 Oct 2018 10:30:03 +0000"  >&lt;p&gt;Any more feedback on this patch?&lt;/p&gt;</comment>
                            <comment id="16659671" author="cutting" created="Mon, 22 Oct 2018 21:06:06 +0000"  >&lt;p&gt;Looks reasonable to me.&#160; Anyone object to me committing this soon?&lt;/p&gt;</comment>
                            <comment id="16661058" author="githubbot" created="Tue, 23 Oct 2018 17:57:29 +0000"  >&lt;p&gt;cutting closed pull request #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/doc/src/content/xdocs/gettingstartedjava.xml b/doc/src/content/xdocs/gettingstartedjava.xml&lt;br/&gt;
index fe6c7d284..7f331e347 100644&lt;br/&gt;
&amp;#8212; a/doc/src/content/xdocs/gettingstartedjava.xml&lt;br/&gt;
+++ b/doc/src/content/xdocs/gettingstartedjava.xml&lt;br/&gt;
@@ -319,6 +319,43 @@ $ mvn compile # includes code generation via Avro Maven plugin&lt;br/&gt;
 $ mvn -q exec:java -Dexec.mainClass=example.SpecificMain&lt;br/&gt;
         &amp;lt;/source&amp;gt;&lt;br/&gt;
       &amp;lt;/section&amp;gt;&lt;br/&gt;
+      &amp;lt;section&amp;gt;&lt;br/&gt;
+        &amp;lt;title&amp;gt;Beta feature: Generating faster code&amp;lt;/title&amp;gt;&lt;br/&gt;
+        &amp;lt;p&amp;gt;&lt;br/&gt;
+          In this release we have introduced a new approach to&lt;br/&gt;
+          generating code that speeds up decoding of objects by more&lt;br/&gt;
+          than 10% and encoding by more than 30% (future performance&lt;br/&gt;
+          enhancements are underway).  To ensure a smooth introduction&lt;br/&gt;
+          of this change into production systems, this feature is&lt;br/&gt;
+          controlled by a feature flag, the system&lt;br/&gt;
+          property &amp;lt;code&amp;gt;org.apache.avro.specific.use_custom_coders&amp;lt;/code&amp;gt;.&lt;br/&gt;
+          In this first release, this feature is off by default.  To&lt;br/&gt;
+          turn it on, set the system flag to &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; at&lt;br/&gt;
+          runtime.  In the sample above, for example, you could enable&lt;br/&gt;
+          the fater coders as follows:&lt;br/&gt;
+        &amp;lt;/p&amp;gt;&lt;br/&gt;
+        &amp;lt;source&amp;gt;&lt;br/&gt;
+$ mvn -q exec:java -Dexec.mainClass=example.SpecificMain \&lt;br/&gt;
+    -Dorg.apache.avro.specific.use_custom_coders=true&lt;br/&gt;
+        &amp;lt;/source&amp;gt;&lt;br/&gt;
+        &amp;lt;p&amp;gt;&lt;br/&gt;
+          Note that you do &amp;lt;em&amp;gt;not&amp;lt;/em&amp;gt; have to recompile your Avro&lt;br/&gt;
+          schema to have access to this feature.  The feature is&lt;br/&gt;
+          compiled and built into your code, and you turn it on and&lt;br/&gt;
+          off at runtime using the feature flag.  As a result, you can&lt;br/&gt;
+          turn it on during testing, for example, and then off in&lt;br/&gt;
+          production.  Or you can turn it on in production, and&lt;br/&gt;
+          quickly turn it off if something breaks.&lt;br/&gt;
+        &amp;lt;/p&amp;gt;&lt;br/&gt;
+        &amp;lt;p&amp;gt;&lt;br/&gt;
+          We encourage the Avro community to exercise this new feature&lt;br/&gt;
+          early to help build confidence.  (For those paying&lt;br/&gt;
+          one-demand for compute resources in the cloud, it can lead&lt;br/&gt;
+          to meaningful cost savings.)  As confidence builds, we will&lt;br/&gt;
+          turn this feature on by default, and eventually eliminate&lt;br/&gt;
+          the feature flag (and the old code).&lt;br/&gt;
+        &amp;lt;/p&amp;gt;&lt;br/&gt;
+      &amp;lt;/section&amp;gt;&lt;br/&gt;
     &amp;lt;/section&amp;gt;&lt;/p&gt;

&lt;p&gt;     &amp;lt;section&amp;gt;&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java b/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java&lt;br/&gt;
index cb9a82b48..073ca27b0 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java&lt;br/&gt;
@@ -116,9 +116,7 @@ public static Object resolve(Schema writer, Schema reader)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;the above loop will always be correct.&lt;br/&gt;
    *&lt;/li&gt;
	&lt;li&gt;Throws a runtime exception if we&apos;re not just about to read the&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;* field of a record.  Also, this method will consume the field&lt;/li&gt;
	&lt;li&gt;* information, and thus may only be called &amp;lt;em&amp;gt;once&amp;lt;/em&amp;gt; before&lt;/li&gt;
	&lt;li&gt;* reading the field value.  (However, if the client knows the&lt;br/&gt;
+   * first field of a record.  (If the client knows the&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;order of incoming fields, then the client does &amp;lt;em&amp;gt;not&amp;lt;/em&amp;gt;&lt;/li&gt;
	&lt;li&gt;need to call this method but rather can just start reading the&lt;/li&gt;
	&lt;li&gt;field values.)&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java b/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java&lt;br/&gt;
index 1c179007a..79558ba47 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java&lt;br/&gt;
@@ -66,6 +66,9 @@&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; /** Utilities to use existing Java classes and interfaces via reflection. */&lt;br/&gt;
 public class ReflectData extends SpecificData {&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public boolean useCustomCoders() &lt;/p&gt;
{ return false; }&lt;br/&gt;
+&lt;br/&gt;
   /** {@link ReflectData} implementation that permits null field values.  The&lt;br/&gt;
    * schema generated for each field is a union of its declared type and&lt;br/&gt;
    * null. */&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
index 44de5c434..60d43dcf0 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java&lt;br/&gt;
@@ -122,6 +122,22 @@ public DatumWriter createDatumWriter(Schema schema) {&lt;br/&gt;
   /** Return the singleton instance. */&lt;br/&gt;
   public static SpecificData get() { return INSTANCE; }&lt;br/&gt;
 &lt;br/&gt;
+  private boolean useCustomCoderFlag&lt;br/&gt;
+    = Boolean.parseBoolean(System.getProperty(&quot;org.apache.avro.specific.use_custom_coders&quot;,&quot;false&quot;));&lt;br/&gt;
+&lt;br/&gt;
+  /** Retrieve the current value of the custom-coders feature flag.&lt;br/&gt;
+    * Defaults to &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;, but this default can be overriden&lt;br/&gt;
+    * using the system property&lt;br/&gt;
+    * &amp;lt;code&amp;gt;org.apache.avro.specific.use_custom_coders&amp;lt;/code&amp;gt;, and can&lt;br/&gt;
+    * be set dynamically by {@link useCustomCoders}.  See &amp;lt;a&lt;br/&gt;
+    * href=&quot;https://avro.apache.org/docs/current/gettingstartedjava.html#Beta+feature:+Generating+faster+code&quot;Getting started with Java&amp;lt;/a&amp;gt; for more about this&lt;br/&gt;
+    * feature flag. */&lt;br/&gt;
+  public boolean useCustomCoders() { return useCustomCoderFlag; }&lt;br/&gt;
+&lt;br/&gt;
+  /** Dynamically set the value of the custom-coder feature flag.&lt;br/&gt;
+   *  See {@link useCustomCoders}. */&lt;br/&gt;
+  public void setCustomCoders(boolean flag) { useCustomCoderFlag = flag; }&lt;br/&gt;
+&lt;br/&gt;
   @Override&lt;br/&gt;
   protected boolean isEnum(Object datum) {&lt;br/&gt;
     return datum instanceof Enum || super.isEnum(datum);&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java&lt;br/&gt;
index 29c989b78..ccf8107ac 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java&lt;br/&gt;
@@ -101,6 +101,23 @@ private Class getPropAsClass(Schema schema, String prop) {&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;br/&gt;
 &lt;br/&gt;
+  @Override&lt;br/&gt;
+  protected Object readRecord(Object old, Schema expected, ResolvingDecoder in)&lt;br/&gt;
+    throws IOException {&lt;br/&gt;
+    SpecificData data = getSpecificData();&lt;br/&gt;
+    if (data.useCustomCoders()) {&lt;br/&gt;
+      old = data.newRecord(old, expected);&lt;br/&gt;
+      if (old instanceof SpecificRecordBase) {&lt;br/&gt;
+        SpecificRecordBase d = (SpecificRecordBase) old;&lt;br/&gt;
+        if (d.hasCustomCoders()) {
+          d.customDecode(in);
+          return d;
+        }&lt;br/&gt;
+      }&lt;br/&gt;
+    }&lt;br/&gt;
+    return super.readRecord(old, expected, in);&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
   @Override&lt;br/&gt;
   protected void readField(Object r, Schema.Field f, Object oldDatum,&lt;br/&gt;
                            ResolvingDecoder in, Object state)&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumWriter.java b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumWriter.java&lt;br/&gt;
index 1204f4955..3d5e7ff4f 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumWriter.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumWriter.java&lt;br/&gt;
@@ -71,6 +71,19 @@ protected void writeString(Schema schema, Object datum, Encoder out)&lt;br/&gt;
     writeString(datum, out);&lt;br/&gt;
   }&lt;br/&gt;
 &lt;br/&gt;
+  @Override&lt;br/&gt;
+  protected void writeRecord(Schema schema, Object datum, Encoder out)&lt;br/&gt;
+    throws IOException {&lt;br/&gt;
+    if (datum instanceof SpecificRecordBase &amp;amp;&amp;amp; this.getSpecificData().useCustomCoders()) {&lt;br/&gt;
+      SpecificRecordBase d = (SpecificRecordBase) datum;&lt;br/&gt;
+      if (d.hasCustomCoders()) {
+        d.customEncode(out);
+        return;
+      }&lt;br/&gt;
+    }&lt;br/&gt;
+    super.writeRecord(schema, datum, out);&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
   @Override&lt;br/&gt;
   protected void writeField(Object datum, Schema.Field f, Encoder out,&lt;br/&gt;
                             Object state) throws IOException {
diff --git a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificRecordBase.java b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificRecordBase.java
index 1902cbc52..eed41b514 100644
--- a/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificRecordBase.java
+++ b/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificRecordBase.java
@@ -25,6 +25,8 @@
 import org.apache.avro.Conversion;
 import org.apache.avro.Schema;
 import org.apache.avro.generic.GenericRecord;
+import org.apache.avro.io.ResolvingDecoder;
+import org.apache.avro.io.Encoder;
 
 /** Base class for generated record classes. */
 public abstract class SpecificRecordBase
@@ -90,4 +92,19 @@ public void readExternal(ObjectInput in)
     new SpecificDatumReader(getSchema())
       .read(this, SpecificData.getDecoder(in));
   }&lt;br/&gt;
+&lt;br/&gt;
+  /** Returns true iff an instance supports the {@link #encode} and&lt;br/&gt;
+    * {@link #decode} operations.  Should only be used by&lt;br/&gt;
+    * &amp;lt;code&amp;gt;SpecificDatumReader/Writer&amp;lt;/code&amp;gt; to selectively use&lt;br/&gt;
+    * {@link #customEncode} and {@link #customDecode} to optimize the (de)serialization of&lt;br/&gt;
+    * values. */&lt;br/&gt;
+  protected boolean hasCustomCoders() { return false; }
&lt;p&gt;+&lt;br/&gt;
+  protected void customEncode(Encoder out) throws IOException &lt;/p&gt;
{
+    throw new UnsupportedOperationException();
+  }&lt;br/&gt;
+&lt;br/&gt;
+  protected void customDecode(ResolvingDecoder in) throws IOException {+    throw new UnsupportedOperationException();+  }
&lt;p&gt; }&lt;br/&gt;
diff --git a/lang/java/compiler/pom.xml b/lang/java/compiler/pom.xml&lt;br/&gt;
index ee260c7f1..c7cef915f 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/pom.xml&lt;br/&gt;
+++ b/lang/java/compiler/pom.xml&lt;br/&gt;
@@ -113,7 +113,57 @@&lt;br/&gt;
           &amp;lt;/execution&amp;gt;&lt;br/&gt;
         &amp;lt;/executions&amp;gt;&lt;br/&gt;
       &amp;lt;/plugin&amp;gt;&lt;br/&gt;
-&lt;br/&gt;
+      &amp;lt;plugin&amp;gt;&lt;br/&gt;
+        &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+        &amp;lt;artifactId&amp;gt;exec-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+        &amp;lt;version&amp;gt;1.6.0&amp;lt;/version&amp;gt;&lt;br/&gt;
+        &amp;lt;executions&amp;gt;&lt;br/&gt;
+          &amp;lt;execution&amp;gt;&lt;br/&gt;
+            &amp;lt;phase&amp;gt;generate-test-sources&amp;lt;/phase&amp;gt;&lt;br/&gt;
+            &amp;lt;goals&amp;gt;&lt;br/&gt;
+              &amp;lt;goal&amp;gt;exec&amp;lt;/goal&amp;gt;&lt;br/&gt;
+            &amp;lt;/goals&amp;gt;&lt;br/&gt;
+            &amp;lt;configuration&amp;gt;&lt;br/&gt;
+              &amp;lt;executable&amp;gt;java&amp;lt;/executable&amp;gt;&lt;br/&gt;
+              &amp;lt;workingDirectory&amp;gt;/tmp&amp;lt;/workingDirectory&amp;gt;&lt;br/&gt;
+              &amp;lt;classpathScope&amp;gt;test&amp;lt;/classpathScope&amp;gt;&lt;br/&gt;
+              &amp;lt;arguments&amp;gt;&lt;br/&gt;
+                &amp;lt;argument&amp;gt;-classpath&amp;lt;/argument&amp;gt;&lt;br/&gt;
+                &amp;lt;classpath&amp;gt;&amp;lt;/classpath&amp;gt;&lt;br/&gt;
+                &amp;lt;argument&amp;gt;org.apache.avro.compiler.specific.SchemaTask&amp;lt;/argument&amp;gt;&lt;br/&gt;
+                &amp;lt;argument&amp;gt;${project.basedir}/src/test/resources/full_record_v1.avsc&amp;lt;/argument&amp;gt;&lt;br/&gt;
+                &amp;lt;argument&amp;gt;${project.basedir}/src/test/resources/full_record_v2.avsc&amp;lt;/argument&amp;gt;&lt;br/&gt;
+                &amp;lt;argument&amp;gt;${project.basedir}/target/generated-test-sources&amp;lt;/argument&amp;gt;&lt;br/&gt;
+              &amp;lt;/arguments&amp;gt;&lt;br/&gt;
+            &amp;lt;/configuration&amp;gt;&lt;br/&gt;
+          &amp;lt;/execution&amp;gt;&lt;br/&gt;
+        &amp;lt;/executions&amp;gt;&lt;br/&gt;
+      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
+      &amp;lt;plugin&amp;gt;&lt;br/&gt;
+        &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+        &amp;lt;artifactId&amp;gt;build-helper-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+        &amp;lt;version&amp;gt;3.0.0&amp;lt;/version&amp;gt;&lt;br/&gt;
+        &amp;lt;executions&amp;gt;&lt;br/&gt;
+          &amp;lt;execution&amp;gt;&lt;br/&gt;
+            &amp;lt;!--&lt;br/&gt;
+              Usually code is generated using a special-purpose maven plugin and the plugin&lt;br/&gt;
+              automatically adds the generated sources into project.&lt;br/&gt;
+              Here since general-purpose exec plugin is used for generating code, we need to manually&lt;br/&gt;
+              add the sources.&lt;br/&gt;
+            --&amp;gt;&lt;br/&gt;
+            &amp;lt;id&amp;gt;add-source&amp;lt;/id&amp;gt;&lt;br/&gt;
+            &amp;lt;phase&amp;gt;generate-test-sources&amp;lt;/phase&amp;gt;&lt;br/&gt;
+            &amp;lt;goals&amp;gt;&lt;br/&gt;
+              &amp;lt;goal&amp;gt;add-test-source&amp;lt;/goal&amp;gt;&lt;br/&gt;
+            &amp;lt;/goals&amp;gt;&lt;br/&gt;
+            &amp;lt;configuration&amp;gt;&lt;br/&gt;
+              &amp;lt;sources&amp;gt;&lt;br/&gt;
+                &amp;lt;source&amp;gt;${project.basedir}/target/generated-test-sources&amp;lt;/source&amp;gt;&lt;br/&gt;
+              &amp;lt;/sources&amp;gt;&lt;br/&gt;
+            &amp;lt;/configuration&amp;gt;&lt;br/&gt;
+          &amp;lt;/execution&amp;gt;&lt;br/&gt;
+        &amp;lt;/executions&amp;gt;&lt;br/&gt;
+      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
     &amp;lt;/plugins&amp;gt;&lt;br/&gt;
   &amp;lt;/build&amp;gt;&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SchemaTask.java b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SchemaTask.java&lt;br/&gt;
index 9d2c244d3..89e2f882c 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SchemaTask.java&lt;br/&gt;
+++ b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SchemaTask.java&lt;br/&gt;
@@ -32,5 +32,15 @@ protected void doCompile(File src, File dest) throws IOException &lt;/p&gt;
{
     compiler.setStringType(getStringType());
     compiler.compileToDestination(src, dest);
   }
&lt;p&gt;+&lt;br/&gt;
+  public static void main(String[] args) throws IOException {&lt;br/&gt;
+    if (args.length &amp;lt; 2) &lt;/p&gt;
{
+      System.err.println(&quot;Usage: SchemaTask &amp;lt;schema.avsc&amp;gt;... &amp;lt;output-folder&amp;gt;&quot;);
+      System.exit(1);
+    }
&lt;p&gt;+    File dst = new File(args&lt;span class=&quot;error&quot;&gt;&amp;#91;args.length-1&amp;#93;&lt;/span&gt;);&lt;br/&gt;
+    for (int i = 0; i &amp;lt; args.length-1; i++)&lt;br/&gt;
+      new SchemaTask().doCompile(new File(args&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;), dst);&lt;br/&gt;
+  }&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
index 575462e73..58c43d094 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
+++ b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
@@ -624,9 +624,24 @@ private Schema addStringType(Schema s, Map&amp;lt;Schema,Schema&amp;gt; seen) &lt;/p&gt;
{
     return result;
   }

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private String getStringType(JsonNode overrideClassProperty) {&lt;/li&gt;
	&lt;li&gt;if (overrideClassProperty != null)&lt;/li&gt;
	&lt;li&gt;return overrideClassProperty.getTextValue();&lt;br/&gt;
+  /** Utility for template use (and also internal use).  Returns&lt;br/&gt;
+    * a string giving the FQN of the Java type to be used for a string&lt;br/&gt;
+    * schema or for the key of a map schema.  (It&apos;s an error to call&lt;br/&gt;
+    * this on a schema other than a string or map.) */&lt;br/&gt;
+  public String getStringType(Schema s) {&lt;br/&gt;
+    String prop;&lt;br/&gt;
+    switch (s.getType()) 
{
+    case MAP:
+      prop = SpecificData.KEY_CLASS_PROP;
+      break;
+    case STRING:
+      prop = SpecificData.CLASS_PROP;
+      break;
+    default:
+      throw new IllegalArgumentException(&quot;Can&apos;t check string-type of non-string/map type: &quot; + s);
+    }
&lt;p&gt;+    JsonNode override = s.getJsonProp(prop);&lt;br/&gt;
+    if (override != null) return override.getTextValue();&lt;br/&gt;
     switch (stringType) {&lt;br/&gt;
     case String:        return &quot;java.lang.String&quot;;&lt;br/&gt;
     case Utf8:          return &quot;org.apache.avro.util.Utf8&quot;;&lt;br/&gt;
@@ -635,6 +650,17 @@ private String getStringType(JsonNode overrideClassProperty) {&lt;br/&gt;
    }&lt;br/&gt;
   }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  /** Utility for template use.  Returns true iff a STRING-schema or&lt;br/&gt;
+    * the key of a MAP-schema is what SpecificData defines as&lt;br/&gt;
+    * &quot;stringable&quot; (which means we need to call toString on it before&lt;br/&gt;
+    * before writing it). */&lt;br/&gt;
+  public boolean isStringable(Schema schema) &lt;/p&gt;
{
+    String t = getStringType(schema);
+    return ! (t.equals(&quot;java.lang.String&quot;)
+              || t.equals(&quot;java.lang.CharSequence&quot;)
+              || t.equals(&quot;org.apache.avro.util.Utf8&quot;));
+  }
&lt;p&gt;+&lt;br/&gt;
   private static final Schema NULL_SCHEMA = Schema.create(Schema.Type.NULL);&lt;/p&gt;

&lt;p&gt;   /** Utility for template use.  Returns the java type for a Schema. */&lt;br/&gt;
@@ -659,15 +685,14 @@ private String javaType(Schema schema, boolean checkConvertedLogicalType) {&lt;br/&gt;
       return &quot;java.util.List&amp;lt;&quot; + javaType(schema.getElementType()) + &quot;&amp;gt;&quot;;&lt;br/&gt;
     case MAP:&lt;br/&gt;
       return &quot;java.util.Map&amp;lt;&quot;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;+ getStringType(schema.getJsonProp(SpecificData.KEY_CLASS_PROP))+&quot;,&quot;&lt;/li&gt;
	&lt;li&gt;+ javaType(schema.getValueType()) + &quot;&amp;gt;&quot;;&lt;br/&gt;
+        + getStringType(schema)+ &quot;,&quot; + javaType(schema.getValueType()) + &quot;&amp;gt;&quot;;&lt;br/&gt;
     case UNION:&lt;br/&gt;
       List&amp;lt;Schema&amp;gt; types = schema.getTypes(); // elide unions with null&lt;br/&gt;
       if ((types.size() == 2) &amp;amp;&amp;amp; types.contains(NULL_SCHEMA))&lt;br/&gt;
         return javaType(types.get(types.get(0).equals(NULL_SCHEMA) ? 1 : 0));&lt;br/&gt;
       return &quot;java.lang.Object&quot;;&lt;br/&gt;
     case STRING:&lt;/li&gt;
	&lt;li&gt;return getStringType(schema.getJsonProp(SpecificData.CLASS_PROP));&lt;br/&gt;
+      return getStringType(schema);&lt;br/&gt;
     case BYTES:   return &quot;java.nio.ByteBuffer&quot;;&lt;br/&gt;
     case INT:     return &quot;java.lang.Integer&quot;;&lt;br/&gt;
     case LONG:    return &quot;java.lang.Long&quot;;&lt;br/&gt;
@@ -708,6 +733,58 @@ public String javaUnbox(Schema schema) {&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+&lt;br/&gt;
+  /** Utility for template use.  Return a string with a given number&lt;br/&gt;
+    * of spaces to be used for indentation purposes. */&lt;br/&gt;
+  public String indent(int n) &lt;/p&gt;
{
+    return new String(new char[n]).replace(&apos;\0&apos;, &apos; &apos;);
+  }
&lt;p&gt;+&lt;br/&gt;
+  /** Utility for template use.  For a two-branch union type with&lt;br/&gt;
+    * one null branch, returns the index of the null branch.  It&apos;s an&lt;br/&gt;
+    * error to use on anything other than a two-branch union with on&lt;br/&gt;
+    * null branch. */&lt;br/&gt;
+  public int getNonNullIndex(Schema s) &lt;/p&gt;
{
+    if (s.getType() != Schema.Type.UNION
+        || s.getTypes().size() != 2
+        || ! s.getTypes().contains(NULL_SCHEMA))
+      throw new IllegalArgumentException(&quot;Can only be used on 2-branch union with a null branch: &quot; + s);
+    return (s.getTypes().get(0).equals(NULL_SCHEMA) ? 1 : 0);
+  }
&lt;p&gt;+&lt;br/&gt;
+  /** Utility for template use.  Returns true if the encode/decode&lt;br/&gt;
+    * logic in record.vm can handle the schema being presented. */&lt;br/&gt;
+  public boolean isCustomCodable(Schema schema) &lt;/p&gt;
{
+    if (schema.isError()) return false;
+    return isCustomCodable(schema, new HashSet&amp;lt;Schema&amp;gt;());
+  }
&lt;p&gt;+&lt;br/&gt;
+  private boolean isCustomCodable(Schema schema, Set&amp;lt;Schema&amp;gt; seen) {&lt;br/&gt;
+    if (! seen.add(schema)) return true;&lt;br/&gt;
+    if (schema.getLogicalType() != null) return false;&lt;br/&gt;
+    boolean result = true;&lt;br/&gt;
+    switch (schema.getType()) &lt;/p&gt;
{
+    case RECORD:
+      for (Schema.Field f : schema.getFields())
+        result &amp;amp;= isCustomCodable(f.schema(), seen);
+      break;
+    case MAP:
+      result = isCustomCodable(schema.getValueType(), seen);
+      break;
+    case ARRAY:
+      result = isCustomCodable(schema.getElementType(), seen);
+      break;
+    case UNION:
+      List&amp;lt;Schema&amp;gt; types = schema.getTypes();
+      // Only know how to handle &quot;nulling&quot; unions for now
+      if (types.size() != 2 || ! types.contains(NULL_SCHEMA)) return false;
+      for (Schema s : types) result &amp;amp;= isCustomCodable(s, seen);
+      break;
+    default:
+    }
&lt;p&gt;+    return result;&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
   public boolean hasLogicalTypeField(Schema schema) {&lt;br/&gt;
     for (Schema.Field field : schema.getFields()) {&lt;br/&gt;
       if (field.schema().getLogicalType() != null) {&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
index 045c7e1ef..5a59a6ee9 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
+++ b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
@@ -19,7 +19,9 @@&lt;br/&gt;
 package $schema.getNamespace();&lt;br/&gt;
 #end&lt;/p&gt;

&lt;p&gt;+import org.apache.avro.generic.GenericArray;&lt;br/&gt;
 import org.apache.avro.specific.SpecificData;&lt;br/&gt;
+import org.apache.avro.util.Utf8;&lt;br/&gt;
 #if (!$schema.isError())&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageEncoder;&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageDecoder;&lt;br/&gt;
@@ -496,4 +498,294 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
     READER$.read(this, SpecificData.getDecoder(in));&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;+#if ($this.isCustomCodable($schema))&lt;br/&gt;
+  @Override protected boolean hasCustomCoders() &lt;/p&gt;
{ return true; }&lt;br/&gt;
+&lt;br/&gt;
+  @Override protected void customEncode(org.apache.avro.io.Encoder out)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+#set ($nv = 0)## Counter to ensure unique var-names&lt;br/&gt;
+#set ($maxnv = 0)## Holds high-water mark during recursion&lt;br/&gt;
+#foreach ($field in $schema.getFields())&lt;br/&gt;
+#set ($n = $this.mangle($field.name(), $schema.isError()))&lt;br/&gt;
+#set ($s = $field.schema())&lt;br/&gt;
+#encodeVar(0 &quot;this.${n}&quot; $s)&lt;br/&gt;
+&lt;br/&gt;
+#set ($nv = $maxnv)&lt;br/&gt;
+#end&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override protected void customDecode(org.apache.avro.io.ResolvingDecoder in)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrder();&lt;br/&gt;
+    for (int i = 0; i &amp;lt; $schema.getFields().size(); i++) {&lt;br/&gt;
+      switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;br/&gt;
+#set ($fieldno = 0)&lt;br/&gt;
+#set ($nv = 0)## Counter to ensure unique var-names&lt;br/&gt;
+#set ($maxnv = 0)## Holds high-water mark during recursion&lt;br/&gt;
+#foreach ($field in $schema.getFields())&lt;br/&gt;
+      case $fieldno:&lt;br/&gt;
+#set ($n = $this.mangle($field.name(), $schema.isError()))&lt;br/&gt;
+#set ($s = $field.schema())&lt;br/&gt;
+#set ($rs = &quot;SCHEMA$.getField(&quot;&quot;${n}&quot;&quot;).schema()&quot;)&lt;br/&gt;
+#decodeVar(4 &quot;this.${n}&quot; $s $rs)&lt;br/&gt;
+        break;&lt;br/&gt;
+&lt;br/&gt;
+#set ($nv = $maxnv)&lt;br/&gt;
+#set ($fieldno = $fieldno + 1)&lt;br/&gt;
+#end&lt;br/&gt;
+      default:&lt;br/&gt;
+        throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+      }&lt;br/&gt;
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+#end&lt;br/&gt;
 }&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeVar $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+##### Compound types (array, map, and union) require calls&lt;br/&gt;
+##### that will recurse back into this encodeVar macro:&lt;br/&gt;
+#if ($s.Type.Name.equals(&quot;array&quot;))&lt;br/&gt;
+#encodeArray($indent $var $s)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;map&quot;))&lt;br/&gt;
+#encodeMap($indent $var $s)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;union&quot;))&lt;br/&gt;
+#encodeUnion($indent $var $s)&lt;br/&gt;
+##### Use the generated &quot;encode&quot; method as fast way to write&lt;br/&gt;
+##### (specific) record types:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;record&quot;))&lt;br/&gt;
+$I    ${var}.customEncode(out);&lt;br/&gt;
+##### For rest of cases, generate calls out.writeXYZ:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;null&quot;))&lt;br/&gt;
+$I    out.writeNull();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;boolean&quot;))&lt;br/&gt;
+$I    out.writeBoolean(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;int&quot;))&lt;br/&gt;
+$I    out.writeInt(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;long&quot;))&lt;br/&gt;
+$I    out.writeLong(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;float&quot;))&lt;br/&gt;
+$I    out.writeFloat(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;double&quot;))&lt;br/&gt;
+$I    out.writeDouble(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;string&quot;))&lt;br/&gt;
+#if ($this.isStringable($s))&lt;br/&gt;
+$I    out.writeString(${var}.toString());&lt;br/&gt;
+#else&lt;br/&gt;
+$I    out.writeString(${var});&lt;br/&gt;
+#end&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;bytes&quot;))&lt;br/&gt;
+$I    out.writeBytes(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;fixed&quot;))&lt;br/&gt;
+$I    out.writeFixed(${var}.bytes(), 0, ${s.FixedSize});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;enum&quot;))&lt;br/&gt;
+$I    out.writeEnum(${var}.ordinal());&lt;br/&gt;
+#else&lt;br/&gt;
+## TODO &amp;#8211; singal a code-gen-time error&lt;br/&gt;
+#end&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeArray $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($et = $this.javaType($s.ElementType))&lt;br/&gt;
+$I    long size${nv} = ${var}.size();&lt;br/&gt;
+$I    out.writeArrayStart();&lt;br/&gt;
+$I    out.setItemCount(size${nv});&lt;br/&gt;
+$I    long actualSize${nv} = 0;&lt;br/&gt;
+$I    for ($et e${nv}: ${var}) {&lt;br/&gt;
&lt;ins&gt;$I      actualSize${nv}&lt;/ins&gt;+;&lt;br/&gt;
+$I      out.startItem();&lt;br/&gt;
+#set ($var = &quot;e${nv}&quot;)&lt;br/&gt;
+#set ($nv = $nv + 1)&lt;br/&gt;
+#set ($maxnv = $nv)&lt;br/&gt;
+#set ($indent = $indent + 2)&lt;br/&gt;
+#encodeVar($indent $var $s.ElementType)&lt;br/&gt;
+#set ($nv = $nv - 1)&lt;br/&gt;
+#set ($indent = $indent - 2)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    out.writeArrayEnd();&lt;br/&gt;
+$I    if (actualSize${nv} != size${nv})&lt;br/&gt;
+$I      throw new java.util.ConcurrentModificationException(&quot;Array-size written was &quot; + size${nv} + &quot;, but element count was &quot; + actualSize${nv} + &quot;.&quot;);&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeMap $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($kt = $this.getStringType($s))&lt;br/&gt;
+#set ($vt = $this.javaType($s.ValueType))&lt;br/&gt;
+$I    long size${nv} = ${var}.size();&lt;br/&gt;
+$I    out.writeMapStart();&lt;br/&gt;
+$I    out.setItemCount(size${nv});&lt;br/&gt;
+$I    long actualSize${nv} = 0;&lt;br/&gt;
+$I    for (java.util.Map.Entry&amp;lt;$kt, $vt&amp;gt; e${nv}: ${var}.entrySet()) {&lt;br/&gt;
&lt;ins&gt;$I      actualSize${nv}&lt;/ins&gt;+;&lt;br/&gt;
+$I      out.startItem();&lt;br/&gt;
+#if ($this.isStringable($s))&lt;br/&gt;
+$I      out.writeString(e${nv}.getKey().toString());&lt;br/&gt;
+#else&lt;br/&gt;
+$I      out.writeString(e${nv}.getKey());&lt;br/&gt;
+#end&lt;br/&gt;
+$I      $vt v${nv} = e${nv}.getValue();&lt;br/&gt;
+#set ($var = &quot;v${nv}&quot;)&lt;br/&gt;
+#set ($nv = $nv + 1)&lt;br/&gt;
+#set ($maxnv = $nv)&lt;br/&gt;
+#set ($indent = $indent + 2)&lt;br/&gt;
+#encodeVar($indent $var $s.ValueType)&lt;br/&gt;
+#set ($nv = $nv - 1)&lt;br/&gt;
+#set ($indent = $indent - 2)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    out.writeMapEnd();&lt;br/&gt;
+$I    if (actualSize${nv} != size${nv})&lt;br/&gt;
+      throw new java.util.ConcurrentModificationException(&quot;Map-size written was &quot; + size${nv} + &quot;, but element count was &quot; + actualSize${nv} + &quot;.&quot;);&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( encodeUnion $indent $var $s )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($et = $this.javaType($s.Types.get($this.getNonNullIndex($s))))&lt;br/&gt;
+$I    if (${var} == null) {&lt;br/&gt;
+$I      out.writeIndex(#if($this.getNonNullIndex($s)==0)1#{else}0#end);&lt;br/&gt;
+$I      out.writeNull();&lt;br/&gt;
+$I    } else {&lt;br/&gt;
+$I      out.writeIndex(${this.getNonNullIndex($s)});&lt;br/&gt;
+#set ($indent = $indent + 2)&lt;br/&gt;
+#encodeVar($indent $var $s.Types.get($this.getNonNullIndex($s)))&lt;br/&gt;
+#set ($indent = $indent - 2)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I    }&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeVar $indent $var $s $rs )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+##### Compound types (array, map, and union) require calls&lt;br/&gt;
+##### that will recurse back into this decodeVar macro:&lt;br/&gt;
+#if ($s.Type.Name.equals(&quot;array&quot;))&lt;br/&gt;
+#decodeArray($indent $var $s $rs)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;map&quot;))&lt;br/&gt;
+#decodeMap($indent $var $s $rs)&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;union&quot;))&lt;br/&gt;
+#decodeUnion($indent $var $s $rs)&lt;br/&gt;
+##### Use the generated &quot;decode&quot; method as fast way to write&lt;br/&gt;
+##### (specific) record types:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;record&quot;))&lt;br/&gt;
+$I    if (${var} == null) {&lt;br/&gt;
+$I      ${var} = new ${this.javaType($s)}();&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    ${var}.customDecode(in);&lt;br/&gt;
+##### For rest of cases, generate calls in.readXYZ:&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;null&quot;))&lt;br/&gt;
+$I    in.readNull();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;boolean&quot;))&lt;br/&gt;
+$I    $var = in.readBoolean();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;int&quot;))&lt;br/&gt;
+$I    $var = in.readInt();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;long&quot;))&lt;br/&gt;
+$I    $var = in.readLong();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;float&quot;))&lt;br/&gt;
+$I    $var = in.readFloat();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;double&quot;))&lt;br/&gt;
+$I    $var = in.readDouble();&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;string&quot;))&lt;br/&gt;
+#decodeString( &quot;$I&quot; $var $s )&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;bytes&quot;))&lt;br/&gt;
+$I    $var = in.readBytes(${var});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;fixed&quot;))&lt;br/&gt;
+$I    if (${var} == null) {&lt;br/&gt;
+$I      ${var} = new ${this.javaType($s)}();&lt;br/&gt;
+$I    }&lt;br/&gt;
+$I    in.readFixed(${var}.bytes(), 0, ${s.FixedSize});&lt;br/&gt;
+#elseif ($s.Type.Name.equals(&quot;enum&quot;))&lt;br/&gt;
+$I    $var = ${this.javaType($s)}.values()&lt;span class=&quot;error&quot;&gt;&amp;#91;in.readEnum()&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+#else&lt;br/&gt;
+## TODO &amp;#8211; singal a code-gen-time error&lt;br/&gt;
+#end&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeString $II $var $s )&lt;br/&gt;
+#set ($st = ${this.getStringType($s)})&lt;br/&gt;
+#if ($this.isStringable($s))&lt;br/&gt;
+$II    ${var} = new ${st}(in.readString());&lt;br/&gt;
+#elseif ($st.equals(&quot;java.lang.String&quot;))&lt;br/&gt;
+$II    $var = in.readString();&lt;br/&gt;
+#elseif ($st.equals(&quot;org.apache.avro.util.Utf8&quot;))&lt;br/&gt;
+$II    $var = in.readString(${var});&lt;br/&gt;
+#else&lt;br/&gt;
+$II    $var = in.readString(${var} instanceof Utf8 ? (Utf8)${var} : null);&lt;br/&gt;
+#end&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeArray $indent $var $s $rs )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($t = $this.javaType($s))&lt;br/&gt;
+#set ($et = $this.javaType($s.ElementType))&lt;br/&gt;
+#set ($gat = &quot;SpecificData.Array&amp;lt;${et}&amp;gt;&quot;)&lt;br/&gt;
+$I    long size${nv} = in.readArrayStart();&lt;br/&gt;
+## Need fresh variable name due to limitation of macro system&lt;br/&gt;
+$I    $t a${nv} = ${var};&lt;br/&gt;
+$I    if (a${nv} == null) {&lt;br/&gt;
+$I      a${nv} = new ${gat}((int)size${nv}, ${rs});&lt;br/&gt;
+$I      $var = a${nv};&lt;br/&gt;
+$I    } else a${nv}.clear();&lt;br/&gt;
+$I    $gat ga${nv} = (a${nv} instanceof SpecificData.Array ? (${gat})a${nv} : null);&lt;br/&gt;
+$I    for ( ; 0 &amp;lt; size${nv}; size${nv} = in.arrayNext()) {&lt;br/&gt;
+$I      for ( ; size${nv} != 0; size${nv}--) {&lt;br/&gt;
+$I        $et e${nv} = (ga${nv} != null ? ga${nv}.peek() : null);&lt;br/&gt;
+#set ($var = &quot;e${nv}&quot;)&lt;br/&gt;
+#set ($nv = $nv + 1)&lt;br/&gt;
+#set ($maxnv = $nv)&lt;br/&gt;
+#set ($indent = $indent + 4)&lt;br/&gt;
+#decodeVar($indent $var $s.ElementType &quot;${rs}.getElementType()&quot;)&lt;br/&gt;
+#set ($nv = $nv - 1)&lt;br/&gt;
+#set ($indent = $indent - 4)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I        a${nv}.add(e${nv});&lt;br/&gt;
+$I      }&lt;br/&gt;
+$I    }&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeMap $indent $var $s $rs )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($t = $this.javaType($s))&lt;br/&gt;
+#set ($kt = $this.getStringType($s))&lt;br/&gt;
+#set ($vt = $this.javaType($s.ValueType))&lt;br/&gt;
+$I    long size${nv} = in.readMapStart();&lt;br/&gt;
+$I    $t m${nv} = ${var}; // Need fresh name due to limitation of macro system&lt;br/&gt;
+$I    if (m${nv} == null) {&lt;br/&gt;
+$I      m${nv} = new java.util.HashMap&amp;lt;${kt},${vt}&amp;gt;((int)size${nv});&lt;br/&gt;
+$I      $var = m${nv};&lt;br/&gt;
+$I    } else m${nv}.clear();&lt;br/&gt;
+$I    for ( ; 0 &amp;lt; size${nv}; size${nv} = in.mapNext()) {&lt;br/&gt;
+$I      for ( ; size${nv} != 0; size${nv}--) {&lt;br/&gt;
+$I        $kt k${nv} = null;&lt;br/&gt;
+#decodeString( &quot;$I    &quot; &quot;k${nv}&quot; $s )&lt;br/&gt;
+$I        $vt v${nv} = null;&lt;br/&gt;
+#set ($var = &quot;v${nv}&quot;)&lt;br/&gt;
+#set ($nv = $nv + 1)&lt;br/&gt;
+#set ($maxnv = $nv)&lt;br/&gt;
+#set ($indent = $indent + 4)&lt;br/&gt;
+#decodeVar($indent $var $s.ValueType &quot;${rs}.getValueType()&quot;)&lt;br/&gt;
+#set ($nv = $nv - 1)&lt;br/&gt;
+#set ($indent = $indent - 4)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I        m${nv}.put(k${nv}, v${nv});&lt;br/&gt;
+$I      }&lt;br/&gt;
+$I    }&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#macro( decodeUnion $indent $var $s $rs )&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+#set ($et = $this.javaType($s.Types.get($this.getNonNullIndex($s))))&lt;br/&gt;
+#set ($si = $this.getNonNullIndex($s))&lt;br/&gt;
+$I    if (in.readIndex() != ${si}) {&lt;br/&gt;
+$I      in.readNull();&lt;br/&gt;
+$I      ${var} = null;&lt;br/&gt;
+$I    } else {&lt;br/&gt;
+#set ($indent = $indent + 2)&lt;br/&gt;
+#decodeVar($indent $var $s.Types.get($si) &quot;${rs}.getTypes().get(${si})&quot;)&lt;br/&gt;
+#set ($indent = $indent - 2)&lt;br/&gt;
+#set ($I = $this.indent($indent))&lt;br/&gt;
+$I    }&lt;br/&gt;
+#end&lt;br/&gt;
diff --git a/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java b/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java&lt;br/&gt;
index b5b3a0ab2..ceae52c12 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java&lt;br/&gt;
+++ b/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java&lt;br/&gt;
@@ -81,7 +81,7 @@ public void setUp() {&lt;br/&gt;
   }&lt;br/&gt;
 &lt;br/&gt;
   @After&lt;br/&gt;
-  public void tearDow() {&lt;br/&gt;
+  public void tearDown() {&lt;br/&gt;
     if (this.outputFile != null) {
       this.outputFile.delete();
     }&lt;br/&gt;
@@ -622,8 +622,4 @@ public void testConversionInstanceWithDecimalLogicalTypeEnabled() throws Excepti&lt;br/&gt;
     Assert.assertEquals(&quot;Should use null for decimal if the flag is off&quot;,&lt;br/&gt;
         &quot;null&quot;, compiler.conversionInstance(uuidSchema));&lt;br/&gt;
   }&lt;br/&gt;
-&lt;br/&gt;
-  public void testToFromByteBuffer() {
-
-  }&lt;br/&gt;
 }&lt;br/&gt;
diff --git a/lang/java/compiler/src/test/java/org/apache/avro/specific/TestGeneratedCode.java b/lang/java/compiler/src/test/java/org/apache/avro/specific/TestGeneratedCode.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..394a5900c&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/compiler/src/test/java/org/apache/avro/specific/TestGeneratedCode.java&lt;br/&gt;
@@ -0,0 +1,93 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Copyright 2017 The Apache Software Foundation.&lt;br/&gt;
+ *&lt;br/&gt;
+ * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&lt;br/&gt;
+ * you may not use this file except in compliance with the License.&lt;br/&gt;
+ * You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+package org.apache.avro.specific;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.ByteArrayInputStream;&lt;br/&gt;
+import java.io.ByteArrayOutputStream;&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import java.nio.ByteBuffer;&lt;br/&gt;
+&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.io.Encoder;&lt;br/&gt;
+import org.apache.avro.io.EncoderFactory;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.DecoderFactory;&lt;br/&gt;
+import org.apache.avro.io.DatumReader;&lt;br/&gt;
+import org.apache.avro.io.DatumWriter;&lt;br/&gt;
+import org.apache.avro.util.Utf8;&lt;br/&gt;
+&lt;br/&gt;
+import org.junit.Assert;&lt;br/&gt;
+import org.junit.Before;&lt;br/&gt;
+import org.junit.Test;&lt;br/&gt;
+&lt;br/&gt;
+import org.apache.avro.specific.test.FullRecordV1;&lt;br/&gt;
+import org.apache.avro.specific.test.FullRecordV2;&lt;br/&gt;
+&lt;br/&gt;
+public class TestGeneratedCode {&lt;br/&gt;
+&lt;br/&gt;
+  private final static SpecificData MODEL = new SpecificData();&lt;br/&gt;
+  private final static Schema V1S = FullRecordV1.getClassSchema();&lt;br/&gt;
+  private final static Schema V2S = FullRecordV2.getClassSchema();&lt;br/&gt;
+&lt;br/&gt;
+  @Before&lt;br/&gt;
+  public void setUp() {
+    MODEL.setCustomCoders(true);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void withoutSchemaMigration() throws IOException {
+    FullRecordV1 src = new FullRecordV1(true, 87231, 731L, 54.2832F, 38.321, &quot;Hi there&quot;, null);
+    Assert.assertTrue(&quot;Test schema must allow for custom coders.&quot;,
+                      ((SpecificRecordBase)src).hasCustomCoders());
+
+    ByteArrayOutputStream out = new ByteArrayOutputStream(1024);
+    Encoder e = EncoderFactory.get().directBinaryEncoder(out, null);
+    DatumWriter&amp;lt;FullRecordV1&amp;gt; w = (DatumWriter&amp;lt;FullRecordV1&amp;gt;)MODEL.createDatumWriter(V1S);
+    w.write(src, e);
+    e.flush();
+
+    ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
+    Decoder d = DecoderFactory.get().directBinaryDecoder(in, null);
+    DatumReader&amp;lt;FullRecordV1&amp;gt; r = (DatumReader&amp;lt;FullRecordV1&amp;gt;)MODEL.createDatumReader(V1S);
+    FullRecordV1 dst = r.read(null, d);
+
+    Assert.assertEquals(src, dst);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void withSchemaMigration() throws IOException {
+    FullRecordV2 src = new FullRecordV2(true, 731, 87231, 38L, 54.2832F, &quot;Hi there&quot;,
+                                        ByteBuffer.wrap(Utf8.getBytesFor(&quot;Hello, world!&quot;)));
+    Assert.assertTrue(&quot;Test schema must allow for custom coders.&quot;,
+                      ((SpecificRecordBase)src).hasCustomCoders());
+
+    ByteArrayOutputStream out = new ByteArrayOutputStream(1024);
+    Encoder e = EncoderFactory.get().directBinaryEncoder(out, null);
+    DatumWriter&amp;lt;FullRecordV2&amp;gt; w = (DatumWriter&amp;lt;FullRecordV2&amp;gt;)MODEL.createDatumWriter(V2S);
+    w.write(src, e);
+    e.flush();
+
+    ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
+    Decoder d = DecoderFactory.get().directBinaryDecoder(in, null);
+    DatumReader&amp;lt;FullRecordV1&amp;gt; r = (DatumReader&amp;lt;FullRecordV1&amp;gt;)MODEL.createDatumReader(V2S, V1S);
+    FullRecordV1 dst = r.read(null, d);
+
+    FullRecordV1 expected = new FullRecordV1(true, 87231, 731L, 54.2832F, 38.0, null,
+                                             &quot;Hello, world!&quot;);
+    Assert.assertEquals(expected, dst);
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/compiler/src/test/resources/full_record_v1.avsc b/lang/java/compiler/src/test/resources/full_record_v1.avsc&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..4e2218875&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/compiler/src/test/resources/full_record_v1.avsc&lt;br/&gt;
@@ -0,0 +1,30 @@&lt;br/&gt;
+{&lt;br/&gt;
+  &quot;type&quot; : &quot;record&quot;,&lt;br/&gt;
+  &quot;name&quot; : &quot;FullRecordV1&quot;,&lt;br/&gt;
+  &quot;doc&quot; : &quot;Test schema changes: this is the &apos;old&apos; schema the SpecificRecord expects to see&quot;,&lt;br/&gt;
+  &quot;namespace&quot; : &quot;org.apache.avro.specific.test&quot;,&lt;br/&gt;
+  &quot;fields&quot; : [ {
+    &quot;name&quot; : &quot;b&quot;,
+    &quot;type&quot; : &quot;boolean&quot;
+  }, {
+    &quot;name&quot; : &quot;i32&quot;,
+    &quot;type&quot; : &quot;int&quot;
+  }, {
+    &quot;name&quot; : &quot;i64&quot;,
+    &quot;type&quot; : &quot;long&quot;
+  }, {
+    &quot;name&quot; : &quot;f32&quot;,
+    &quot;type&quot; : &quot;float&quot;
+  }, {
+    &quot;name&quot; : &quot;f64&quot;,
+    &quot;type&quot; : &quot;double&quot;
+  }, {
+    &quot;name&quot; : &quot;s&quot;,
+    &quot;type&quot; : [ &quot;null&quot;, &quot;string&quot; ],
+    &quot;default&quot; : null
+  }, {
+    &quot;name&quot; : &quot;h&quot;,
+    &quot;type&quot; : [ &quot;null&quot;, &quot;string&quot; ]
+  } ]&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
diff --git a/lang/java/compiler/src/test/resources/full_record_v2.avsc b/lang/java/compiler/src/test/resources/full_record_v2.avsc&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..b80b9b4ae&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/compiler/src/test/resources/full_record_v2.avsc&lt;br/&gt;
@@ -0,0 +1,29 @@&lt;br/&gt;
+{&lt;br/&gt;
+  &quot;type&quot; : &quot;record&quot;,&lt;br/&gt;
+  &quot;name&quot; : &quot;FullRecordV2&quot;,&lt;br/&gt;
+  &quot;doc&quot; : &quot;Test schema changes: this is the &apos;new&apos; schema actually used to write data&quot;,&lt;br/&gt;
+  &quot;namespace&quot; : &quot;org.apache.avro.specific.test&quot;,&lt;br/&gt;
+  &quot;fields&quot; : [ {
+    &quot;name&quot; : &quot;b&quot;,
+    &quot;type&quot; : &quot;boolean&quot;
+  }, {
+    &quot;name&quot; : &quot;i64&quot;,
+    &quot;type&quot; : &quot;int&quot;
+  }, {
+    &quot;name&quot; : &quot;i32&quot;,
+    &quot;type&quot; : &quot;int&quot;
+  }, {
+    &quot;name&quot; : &quot;f64&quot;,
+    &quot;type&quot; : &quot;long&quot;
+  }, {
+    &quot;name&quot; : &quot;f32&quot;,
+    &quot;type&quot; : [ &quot;float&quot;, &quot;null&quot; ]
+  }, {
+    &quot;name&quot; : &quot;newfield&quot;,
+    &quot;type&quot; : &quot;string&quot;
+  }, {
+    &quot;name&quot; : &quot;h&quot;,
+    &quot;type&quot; : &quot;bytes&quot;
+  } ]&lt;br/&gt;
+}&lt;br/&gt;
+&lt;br/&gt;
diff --git a/lang/java/pom.xml b/lang/java/pom.xml&lt;br/&gt;
index 471c34044..dd2c28533 100644&lt;br/&gt;
&amp;#8212; a/lang/java/pom.xml&lt;br/&gt;
+++ b/lang/java/pom.xml&lt;br/&gt;
@@ -195,6 +195,21 @@&lt;br/&gt;
           &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br/&gt;
           &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
           &amp;lt;version&amp;gt;${surefire-plugin.version}&amp;lt;/version&amp;gt;&lt;br/&gt;
+          &amp;lt;executions&amp;gt;&lt;br/&gt;
+            &amp;lt;execution&amp;gt;&lt;br/&gt;
+              &amp;lt;id&amp;gt;test-with-custom-coders&amp;lt;/id&amp;gt;&lt;br/&gt;
+              &amp;lt;phase&amp;gt;test&amp;lt;/phase&amp;gt;&lt;br/&gt;
+              &amp;lt;goals&amp;gt;&lt;br/&gt;
+                &amp;lt;goal&amp;gt;test&amp;lt;/goal&amp;gt;&lt;br/&gt;
+              &amp;lt;/goals&amp;gt;&lt;br/&gt;
+              &amp;lt;configuration&amp;gt;&lt;br/&gt;
+                &amp;lt;systemPropertyVariables&amp;gt;&lt;br/&gt;
+                  &amp;lt;org.apache.avro.specific.use_custom_coders&amp;gt;true&amp;lt;/org.apache.avro.specific.use_custom_coders&amp;gt;&lt;br/&gt;
+                  &amp;lt;test.dir&amp;gt;${project.basedir}/target/&amp;lt;/test.dir&amp;gt;&lt;br/&gt;
+                &amp;lt;/systemPropertyVariables&amp;gt;&lt;br/&gt;
+              &amp;lt;/configuration&amp;gt;&lt;br/&gt;
+            &amp;lt;/execution&amp;gt;&lt;br/&gt;
+          &amp;lt;/executions&amp;gt;&lt;br/&gt;
           &amp;lt;configuration&amp;gt;&lt;br/&gt;
             &amp;lt;includes&amp;gt;&lt;br/&gt;
               &amp;lt;!-- Avro naming convention for JUnit tests --&amp;gt;&lt;br/&gt;
diff --git a/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java b/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java&lt;br/&gt;
index 569f42711..26cc31fc0 100644&lt;br/&gt;
&amp;#8212; a/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java&lt;br/&gt;
+++ b/lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java&lt;br/&gt;
@@ -5,7 +5,9 @@&lt;br/&gt;
  */&lt;br/&gt;
 package avro.examples.baseball;&lt;br/&gt;
 &lt;br/&gt;
+import org.apache.avro.generic.GenericArray;&lt;br/&gt;
 import org.apache.avro.specific.SpecificData;&lt;br/&gt;
+import org.apache.avro.util.Utf8;&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageEncoder;&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageDecoder;&lt;br/&gt;
 import org.apache.avro.message.SchemaStore;&lt;br/&gt;
@@ -472,4 +474,80 @@ public Player build() {
     READER$.read(this, SpecificData.getDecoder(in));
   }&lt;br/&gt;
 &lt;br/&gt;
+  @Override protected boolean hasCustomCoders() { return true; }
&lt;p&gt;+&lt;br/&gt;
+  @Override protected void customEncode(org.apache.avro.io.Encoder out)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+    out.writeInt(this.number);&lt;br/&gt;
+&lt;br/&gt;
+    out.writeString(this.first_name);&lt;br/&gt;
+&lt;br/&gt;
+    out.writeString(this.last_name);&lt;br/&gt;
+&lt;br/&gt;
+    long size0 = this.position.size();&lt;br/&gt;
+    out.writeArrayStart();&lt;br/&gt;
+    out.setItemCount(size0);&lt;br/&gt;
+    long actualSize0 = 0;&lt;br/&gt;
+    for (avro.examples.baseball.Position e0: this.position) &lt;/p&gt;
{
+      actualSize0++;
+      out.startItem();
+      out.writeEnum(e0.ordinal());
+    }&lt;br/&gt;
+    out.writeArrayEnd();&lt;br/&gt;
+    if (actualSize0 != size0)&lt;br/&gt;
+      throw new java.util.ConcurrentModificationException(&quot;Array-size written was &quot; + size0 + &quot;, but element count was &quot; + actualSize0 + &quot;.&quot;);&lt;br/&gt;
+&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override protected void customDecode(org.apache.avro.io.ResolvingDecoder in)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrder();&lt;br/&gt;
+    for (int i = 0; i &amp;lt; 4; i++) {&lt;br/&gt;
+      switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;br/&gt;
+      case 0:&lt;br/&gt;
+        this.number = in.readInt();&lt;br/&gt;
+        break;&lt;br/&gt;
+&lt;br/&gt;
+      case 1:&lt;br/&gt;
+        this.first_name = in.readString();&lt;br/&gt;
+        break;&lt;br/&gt;
+&lt;br/&gt;
+      case 2:&lt;br/&gt;
+        this.last_name = in.readString();&lt;br/&gt;
+        break;&lt;br/&gt;
+&lt;br/&gt;
+      case 3:&lt;br/&gt;
+        long size0 = in.readArrayStart();&lt;br/&gt;
+        java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position;&lt;br/&gt;
+        if (a0 == null) {
+          a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());
+          this.position = a0;
+        } else a0.clear();&lt;br/&gt;
+        SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;br/&gt;
+        for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) {&lt;br/&gt;
+          for ( ; size0 != 0; size0--) {
+            avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
+            e0 = avro.examples.baseball.Position.values()[in.readEnum()];
+            a0.add(e0);
+          }&lt;br/&gt;
+        }&lt;br/&gt;
+        break;&lt;br/&gt;
+&lt;br/&gt;
+      default:&lt;br/&gt;
+        throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+      }&lt;br/&gt;
+    }&lt;br/&gt;
+  }&lt;br/&gt;
 }&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
diff --git a/lang/java/tools/src/test/compiler/output/Player.java b/lang/java/tools/src/test/compiler/output/Player.java&lt;br/&gt;
index 5bbb3b018..8eaf5d7ad 100644&lt;br/&gt;
&amp;#8212; a/lang/java/tools/src/test/compiler/output/Player.java&lt;br/&gt;
+++ b/lang/java/tools/src/test/compiler/output/Player.java&lt;br/&gt;
@@ -5,7 +5,9 @@&lt;br/&gt;
  */&lt;br/&gt;
 package avro.examples.baseball;&lt;br/&gt;
 &lt;br/&gt;
+import org.apache.avro.generic.GenericArray;&lt;br/&gt;
 import org.apache.avro.specific.SpecificData;&lt;br/&gt;
+import org.apache.avro.util.Utf8;&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageEncoder;&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageDecoder;&lt;br/&gt;
 import org.apache.avro.message.SchemaStore;&lt;br/&gt;
@@ -472,4 +474,80 @@ public Player build() {
     READER$.read(this, SpecificData.getDecoder(in));
   }&lt;br/&gt;
 &lt;br/&gt;
+  @Override protected boolean hasCustomCoders() { return true; }&lt;br/&gt;
+&lt;br/&gt;
+  @Override protected void customEncode(org.apache.avro.io.Encoder out)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+    out.writeInt(this.number);&lt;br/&gt;
+&lt;br/&gt;
+    out.writeString(this.first_name);&lt;br/&gt;
+&lt;br/&gt;
+    out.writeString(this.last_name);&lt;br/&gt;
+&lt;br/&gt;
+    long size0 = this.position.size();&lt;br/&gt;
+    out.writeArrayStart();&lt;br/&gt;
+    out.setItemCount(size0);&lt;br/&gt;
+    long actualSize0 = 0;&lt;br/&gt;
+    for (avro.examples.baseball.Position e0: this.position) {+      actualSize0++;+      out.startItem();+      out.writeEnum(e0.ordinal());+    }
&lt;p&gt;+    out.writeArrayEnd();&lt;br/&gt;
+    if (actualSize0 != size0)&lt;br/&gt;
+      throw new java.util.ConcurrentModificationException(&quot;Array-size written was &quot; + size0 + &quot;, but element count was &quot; + actualSize0 + &quot;.&quot;);&lt;br/&gt;
+&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Override protected void customDecode(org.apache.avro.io.ResolvingDecoder in)&lt;br/&gt;
+    throws java.io.IOException&lt;br/&gt;
+  {&lt;br/&gt;
+    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrder();&lt;br/&gt;
+    for (int i = 0; i &amp;lt; 4; i++) {&lt;br/&gt;
+      switch (fieldOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.pos()) {&lt;br/&gt;
+      case 0:&lt;br/&gt;
+        this.number = in.readInt();&lt;br/&gt;
+        break;&lt;br/&gt;
+&lt;br/&gt;
+      case 1:&lt;br/&gt;
+        this.first_name = in.readString(this.first_name instanceof Utf8 ? (Utf8)this.first_name : null);&lt;br/&gt;
+        break;&lt;br/&gt;
+&lt;br/&gt;
+      case 2:&lt;br/&gt;
+        this.last_name = in.readString(this.last_name instanceof Utf8 ? (Utf8)this.last_name : null);&lt;br/&gt;
+        break;&lt;br/&gt;
+&lt;br/&gt;
+      case 3:&lt;br/&gt;
+        long size0 = in.readArrayStart();&lt;br/&gt;
+        java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; a0 = this.position;&lt;br/&gt;
+        if (a0 == null) &lt;/p&gt;
{
+          a0 = new SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;((int)size0, SCHEMA$.getField(&quot;position&quot;).schema());
+          this.position = a0;
+        }
&lt;p&gt; else a0.clear();&lt;br/&gt;
+        SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt; ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array&amp;lt;avro.examples.baseball.Position&amp;gt;)a0 : null);&lt;br/&gt;
+        for ( ; 0 &amp;lt; size0; size0 = in.arrayNext()) {&lt;br/&gt;
+          for ( ; size0 != 0; size0--) &lt;/p&gt;
{
+            avro.examples.baseball.Position e0 = (ga0 != null ? ga0.peek() : null);
+            e0 = avro.examples.baseball.Position.values()[in.readEnum()];
+            a0.add(e0);
+          }
&lt;p&gt;+        }&lt;br/&gt;
+        break;&lt;br/&gt;
+&lt;br/&gt;
+      default:&lt;br/&gt;
+        throw new java.io.IOException(&quot;Corrupt ResolvingDecoder.&quot;);&lt;br/&gt;
+      }&lt;br/&gt;
+    }&lt;br/&gt;
+  }&lt;br/&gt;
 }&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16661059" author="jira-bot" created="Tue, 23 Oct 2018 17:57:32 +0000"  >&lt;p&gt;Commit b4ede4b116b24b5308e8419504a73e02b7f7e406 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=raymie&quot; class=&quot;user-hover&quot; rel=&quot;raymie&quot;&gt;Raymie Stata&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=b4ede4b&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=b4ede4b&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try (#350)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Finished initial implementation (not tested).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added Reader/Decoder code&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Made some of the changes suggested by Doug.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Hide helper methods related to custom coding.  Changed them from public to protected.  Also changed name of encode and decode to customEncode and customDecode to be more clear as to their function.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Allow dynamic changes to flag that controls whether or not the custom en/decoders are used.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fixed typos in TestSpecificCompiler.java&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;New test case: breaks new code-gen when schema needs resolution.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fixed bug with decoding when the schema has been migrated.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added test-with-custom-coders execution of testing and fixed some problems that this uncovered.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fixed potential performance problem of redundantly allocating objects.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added documentation (also update &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; description to point to new docs).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Small doc fix (I forgot to commit these changes before pushing)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16661060" author="jira-bot" created="Tue, 23 Oct 2018 17:57:33 +0000"  >&lt;p&gt;Commit b4ede4b116b24b5308e8419504a73e02b7f7e406 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=raymie&quot; class=&quot;user-hover&quot; rel=&quot;raymie&quot;&gt;Raymie Stata&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=b4ede4b&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=b4ede4b&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try (#350)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Finished initial implementation (not tested).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added Reader/Decoder code&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Made some of the changes suggested by Doug.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Hide helper methods related to custom coding.  Changed them from public to protected.  Also changed name of encode and decode to customEncode and customDecode to be more clear as to their function.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Allow dynamic changes to flag that controls whether or not the custom en/decoders are used.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fixed typos in TestSpecificCompiler.java&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;New test case: breaks new code-gen when schema needs resolution.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fixed bug with decoding when the schema has been migrated.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added test-with-custom-coders execution of testing and fixed some problems that this uncovered.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fixed potential performance problem of redundantly allocating objects.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added documentation (also update &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; description to point to new docs).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Small doc fix (I forgot to commit these changes before pushing)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16661070" author="cutting" created="Tue, 23 Oct 2018 18:01:54 +0000"  >&lt;p&gt;I committed this. Thanks, Raymie!&lt;/p&gt;</comment>
                            <comment id="16661131" author="githubbot" created="Tue, 23 Oct 2018 19:05:43 +0000"  >&lt;p&gt;Fokko commented on issue #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#issuecomment-432378885&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#issuecomment-432378885&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Did you check the tests? I&apos;m trying to set up CI/CD, but the following tests are failing:&lt;br/&gt;
   ```&lt;br/&gt;
   -------------------------------------------------------&lt;br/&gt;
    T E S T S&lt;br/&gt;
   -------------------------------------------------------&lt;br/&gt;
   Running org.apache.avro.specific.TestGeneratedCode&lt;br/&gt;
   Tests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 1.353 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! - in org.apache.avro.specific.TestGeneratedCode&lt;br/&gt;
   withSchemaMigration(org.apache.avro.specific.TestGeneratedCode)  Time elapsed: 0.042 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
   java.lang.AssertionError: Test schema must allow for custom coders.&lt;br/&gt;
   	at org.apache.avro.specific.TestGeneratedCode.withSchemaMigration(TestGeneratedCode.java:75)&lt;/p&gt;

&lt;p&gt;   withoutSchemaMigration(org.apache.avro.specific.TestGeneratedCode)  Time elapsed: 0.001 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
   java.lang.AssertionError: Test schema must allow for custom coders.&lt;br/&gt;
   	at org.apache.avro.specific.TestGeneratedCode.withoutSchemaMigration(TestGeneratedCode.java:54)&lt;br/&gt;
   ```&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16661274" author="githubbot" created="Tue, 23 Oct 2018 20:54:15 +0000"  >&lt;p&gt;Fokko commented on issue #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#issuecomment-432415634&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#issuecomment-432415634&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   It looks like three more tests are failing later on: &lt;a href=&quot;https://gist.github.com/Fokko/40602f95c04313bd6c7aca00316ec84c&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gist.github.com/Fokko/40602f95c04313bd6c7aca00316ec84c&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;   PTAL @rstata &lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16661287" author="githubbot" created="Tue, 23 Oct 2018 21:03:54 +0000"  >&lt;p&gt;rstata commented on issue #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#issuecomment-432418896&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#issuecomment-432418896&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I am trying to reproduce.  When run from my Mac command-line (`mv clean &amp;amp;&amp;amp; mvn package`), it seems like all tests pass (see uploaded file).  Will try to reproduce using a Docker build, but this will take a while because I haven&apos;t done one before.&lt;/p&gt;



&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16661328" author="githubbot" created="Tue, 23 Oct 2018 21:37:39 +0000"  >&lt;p&gt;Fokko commented on issue #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#issuecomment-432429845&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#issuecomment-432429845&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thanks for the quick response! Using `./build.sh docker` you should get a full fledged docker environment to run the tests. If you run `mvn clean test` in `lang/avro/` the tests error on my current master.&lt;/p&gt;

&lt;p&gt;   For example, the trailing whitespace is something that is being added in the test reference file should not be in the generated file: &lt;a href=&quot;https://github.com/rstata-projects/avro/blob/98b3df3410c4dc14aa6b5890e2f7482da55350ca/lang/java/tools/src/test/compiler/output/Player.java#L543-L553&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/rstata-projects/avro/blob/98b3df3410c4dc14aa6b5890e2f7482da55350ca/lang/java/tools/src/test/compiler/output/Player.java#L543-L553&lt;/a&gt;&lt;br/&gt;
   This showed up in the diff of the failed test.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16661364" author="githubbot" created="Tue, 23 Oct 2018 22:04:36 +0000"  >&lt;p&gt;rstata commented on issue #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#issuecomment-432438717&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#issuecomment-432438717&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   The Docker build also passed (see below).&lt;/p&gt;

&lt;p&gt;   FWIW, when doing work on my laptop, I can&apos;t get `mvn test` to work &amp;#8211; I have to do `mvn package` instead.  I think this is because the `package` goal for earlier sub-projects of `lang/java` end up creating outputs needed to run tests in the later sub-projects.  (Although, `build.sh` does a `mvn test`, which seems to work &amp;#8211; I find the behavior of Maven mysterious).&lt;/p&gt;

&lt;p&gt;   Can you try a `mvn clean package` instead?&lt;/p&gt;

&lt;p&gt;   Here is the output of my Docker build: &lt;br/&gt;
   ```&lt;br/&gt;
   rstata@76312f39ae43:~/avro$ ./build.sh test&lt;br/&gt;
   + for target in &apos;&quot;$@&quot;&apos;&lt;br/&gt;
   + case &quot;$target&quot; in&lt;br/&gt;
   + cd lang/java&lt;br/&gt;
   + ./build.sh test&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Scanning for projects...&lt;br/&gt;
     ...LOTS OUT OUTPUT ELIDED...&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Reactor Summary:&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; &lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Apache Avro Java .................................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;30.554s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Apache Avro Guava Dependencies .................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;17.652s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Apache Avro ....................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;4:08.692s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Apache Avro Compiler .............................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;1:01.525s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Apache Avro Maven Plugin .......................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;40.351s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Apache Avro IPC ................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;3:48.624s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Trevni Java ....................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.282s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Trevni Java Core .................................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;14.026s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Apache Avro Mapred API ............................ SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;6:49.612s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Trevni Java Avro .................................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;1:09.773s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Trevni Specification .............................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.579s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Apache Avro Tools ................................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;2:44.934s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Apache Avro Protobuf Compatibility ................ SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;7.054s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Apache Avro Thrift Compatibility .................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;10.956s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Apache Avro Maven Archetypes ...................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;2.159s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Apache Avro Maven Service Archetype ............... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.902s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Apache Avro gRPC .................................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;19.420s&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; BUILD SUCCESS&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Total time: 22:47.899s&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Finished at: Tue Oct 23 21:50:05 UTC 2018&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Final Memory: 64M/194M&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
   ```&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16661468" author="githubbot" created="Tue, 23 Oct 2018 23:32:39 +0000"  >&lt;p&gt;cutting commented on issue #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#issuecomment-432458389&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#issuecomment-432458389&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Yes, I ran tests (outside of Docker) before I committed this. Sorry to hear&lt;br/&gt;
   it&apos;s broken for you.&lt;/p&gt;

&lt;p&gt;   Doug&lt;/p&gt;

&lt;p&gt;   On Tue, Oct 23, 2018, 12:05 PM Fokko Driesprong &amp;lt;notifications@github.com&amp;gt;&lt;br/&gt;
   wrote:&lt;/p&gt;

&lt;p&gt;   &amp;gt; Did you check the tests? I&apos;m trying to set up CI/CD, but the following&lt;br/&gt;
   &amp;gt; tests are failing:&lt;br/&gt;
   &amp;gt;&lt;br/&gt;
   &amp;gt; -------------------------------------------------------&lt;br/&gt;
   &amp;gt;  T E S T S&lt;br/&gt;
   &amp;gt; -------------------------------------------------------&lt;br/&gt;
   &amp;gt; Running org.apache.avro.specific.TestGeneratedCode&lt;br/&gt;
   &amp;gt; Tests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 1.353 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! - in org.apache.avro.specific.TestGeneratedCode&lt;br/&gt;
   &amp;gt; withSchemaMigration(org.apache.avro.specific.TestGeneratedCode)  Time elapsed: 0.042 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
   &amp;gt; java.lang.AssertionError: Test schema must allow for custom coders.&lt;br/&gt;
   &amp;gt; 	at org.apache.avro.specific.TestGeneratedCode.withSchemaMigration(TestGeneratedCode.java:75)&lt;br/&gt;
   &amp;gt;&lt;br/&gt;
   &amp;gt; withoutSchemaMigration(org.apache.avro.specific.TestGeneratedCode)  Time elapsed: 0.001 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
   &amp;gt; java.lang.AssertionError: Test schema must allow for custom coders.&lt;br/&gt;
   &amp;gt; 	at org.apache.avro.specific.TestGeneratedCode.withoutSchemaMigration(TestGeneratedCode.java:54)&lt;br/&gt;
   &amp;gt;&lt;br/&gt;
   &amp;gt; &#8212;&lt;br/&gt;
   &amp;gt; You are receiving this because you modified the open/close state.&lt;br/&gt;
   &amp;gt; Reply to this email directly, view it on GitHub&lt;br/&gt;
   &amp;gt; &amp;lt;&lt;a href=&quot;https://github.com/apache/avro/pull/350#issuecomment-432378885&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#issuecomment-432378885&lt;/a&gt;&amp;gt;, or mute&lt;br/&gt;
   &amp;gt; the thread&lt;br/&gt;
   &amp;gt; &amp;lt;&lt;a href=&quot;https://github.com/notifications/unsubscribe-auth/AAQhejA5vRqKytFRiRMGNPDmmJUdSfudks5un2iGgaJpZM4XjMR_&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/notifications/unsubscribe-auth/AAQhejA5vRqKytFRiRMGNPDmmJUdSfudks5un2iGgaJpZM4XjMR_&lt;/a&gt;&amp;gt;&lt;br/&gt;
   &amp;gt; .&lt;br/&gt;
   &amp;gt;&lt;/p&gt;


&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16661798" author="githubbot" created="Wed, 24 Oct 2018 06:35:06 +0000"  >&lt;p&gt;Fokko commented on issue #350: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; second try&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/350#issuecomment-432530681&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/350#issuecomment-432530681&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @rstata You&apos;re right, it could also be old state on my side. Let me figure it out. I&apos;ll let you know! Cheers&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="13107745">AVRO-2093</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="13107746">AVRO-2094</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="13107743">AVRO-2091</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="13107744">AVRO-2092</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="13189064">AVRO-2235</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12890882" name="customcoders.md" size="10512" author="raymie" created="Sun, 8 Oct 2017 00:12:19 +0000"/>
                            <attachment id="12944486" name="perf-data.txt" size="10281" author="raymie" created="Thu, 18 Oct 2018 07:07:42 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 8 Oct 2017 00:19:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            12 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3l04n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2091] Eliminate org.apache.avro.specific.use_custom_coder feature flag</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2091</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;After the implementation of &quot;custom coders&quot; (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;) is complete and seen more production usage, this feature flag should be eliminated.&#160; (More specifically, the initial release of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt; should set USE_CUSTOM_CODERS to false by default, to get some initial production testing.&#160; The release after that should set this flag to true by default, but allow folks to fall back on the old way in case there are corner cases that aren&apos;t working.&#160; The release after that should remove this feature flag altogether, under the assumption that it works just fine and there&apos;s no need to maintain two ways of doing things.)&lt;/p&gt;</description>
                <environment></environment>
        <key id="13107743">AVRO-2091</key>
            <summary>Eliminate org.apache.avro.specific.use_custom_coder feature flag</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="raymie">Raymie Stata</reporter>
                        <labels>
                    </labels>
                <created>Sat, 7 Oct 2017 23:58:36 +0000</created>
                <updated>Mon, 1 Oct 2018 01:57:36 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                    <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="13107744">AVRO-2092</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="13107742">AVRO-2090</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 15 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3l04v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2092] Flip default value of org.apache.avro.specific.use_custom_coder to true</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2092</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The initial implementation of &quot;custom coders&quot; for SpecificRecord is incomplete (it didn&apos;t initially handle logical types) and hasn&apos;t been battle-tested.  Thus, it includes a feature flag (org.apache.avro.specific.use_custom_coder) to toggle between the new code and the old code.  The initial default for this feature flag is false &amp;#8211; defaulting to the old code &amp;#8211; but when the implementation of SpecificRecord is completed and it&apos;s seen more production use, we should switch the default to false, on the way to eliminating the flag altogether (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2091&quot; title=&quot;Eliminate org.apache.avro.specific.use_custom_coder feature flag&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2091&quot;&gt;AVRO-2091&lt;/a&gt;).&lt;/p&gt;</description>
                <environment></environment>
        <key id="13107744">AVRO-2092</key>
            <summary>Flip default value of org.apache.avro.specific.use_custom_coder to true</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="raymie">Raymie Stata</reporter>
                        <labels>
                    </labels>
                <created>Sat, 7 Oct 2017 23:59:46 +0000</created>
                <updated>Sun, 8 Oct 2017 00:09:47 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                    <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="13107743">AVRO-2091</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="13107745">AVRO-2093</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="13107746">AVRO-2094</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="13107742">AVRO-2090</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 15 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3l053:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2093] Extend &quot;custom coders&quot; to fully support union types</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2093</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The initial implementation of &quot;custom coders&quot; for SpecificRecord (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;) only supports &quot;nullable unions&quot; (two-branch unions where one branch is the null type).  This JIRA extends that implementation to support all forms of unions.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13107745">AVRO-2093</key>
            <summary>Extend &quot;custom coders&quot; to fully support union types</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="raymie">Raymie Stata</reporter>
                        <labels>
                    </labels>
                <created>Sun, 8 Oct 2017 00:05:46 +0000</created>
                <updated>Sun, 30 Dec 2018 04:28:09 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                    <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="13107744">AVRO-2092</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="13107742">AVRO-2090</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 15 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3l05b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2094] Extend &quot;custom coders&quot; to support logical types</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2094</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The initial implementation of &quot;custom coders&quot; (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2090&quot; title=&quot;Improve encode/decode time for SpecificRecord using code generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2090&quot;&gt;&lt;del&gt;AVRO-2090&lt;/del&gt;&lt;/a&gt;) does not support Avro&apos;s logical types.  This JIRA extends that implementation to remove this limitation.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13107746">AVRO-2094</key>
            <summary>Extend &quot;custom coders&quot; to support logical types</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="raymie">Raymie Stata</reporter>
                        <labels>
                    </labels>
                <created>Sun, 8 Oct 2017 00:07:34 +0000</created>
                <updated>Sun, 30 Dec 2018 04:28:08 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                    <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="13107744">AVRO-2092</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="13107742">AVRO-2090</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 15 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3l05j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2095] Avro 1.8.2 encode in c++ -  java.lang.ArrayIndexOutOfBoundsException</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2095</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I have the following schema&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-json&quot;&gt;
[
    {
        &lt;span class=&quot;code-quote&quot;&gt;&quot;namespace&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;com.test&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;MyDevice&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;doc&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;client device&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
            {
                &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;deviceId&quot;&lt;/span&gt;,
                &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: [
                    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;,
                    &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;
                ],
                &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt;: &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;,
                &lt;span class=&quot;code-quote&quot;&gt;&quot;doc&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Usually unique MAC address&quot;&lt;/span&gt;
            }
        ]
    },
    {
        &lt;span class=&quot;code-quote&quot;&gt;&quot;namespace&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;com.test&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Event&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;doc&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;event&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
            {
                &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;myDevice&quot;&lt;/span&gt;,
                &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: [
                    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;,
                    &lt;span class=&quot;code-quote&quot;&gt;&quot;com.test.MyDevice&quot;&lt;/span&gt;
                ],
                &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt;: &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;,
                &lt;span class=&quot;code-quote&quot;&gt;&quot;doc&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Device information&quot;&lt;/span&gt;
            }
        ]
    }
]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I installed avro 1.8.2 on my ubuntu build machine and generated test.h using avrogencpp tool. &lt;br/&gt;
Then, I created binary encoded avro data as follows:&lt;/p&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-c++&quot;&gt;
    MyDevice device;
    device.deviceId.set_string(&lt;span class=&quot;code-quote-red&quot;&gt;&quot;device1&quot;&lt;/span&gt;);
    Event event;
    event.myDevice.set_MyDevice(device);

    &lt;span class=&quot;code-keyword&quot;&gt;std&lt;/span&gt;::vector&lt;span class=&quot;code-quote-red&quot;&gt;&amp;lt;&lt;span class=&quot;code-keyword&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;/span&gt; bytes;
    &lt;span class=&quot;code-keyword&quot;&gt;std&lt;/span&gt;::auto_ptr&lt;span class=&quot;code-quote-red&quot;&gt;&amp;lt;avro::OutputStream&amp;gt;&lt;/span&gt; out = avro::memoryOutputStream(1);
    avro::EncoderPtr e = avro::binaryEncoder();

    e-&amp;gt;init(*out);
    avro::encode(*e, event);
    out-&amp;gt;flush();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I deserialize my data in Java application as follows:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

Schema schema = SchemaUtils.getSchemaFromFile(&lt;span class=&quot;code-quote&quot;&gt;&quot;src/main/resources/schemas/test.avsc&quot;&lt;/span&gt;);

DatumReader&amp;lt;GenericRecord&amp;gt; genericDatumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader&amp;lt;&amp;gt;(schema);
        Decoder decoder = DecoderFactory.get().binaryDecoder(data, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
            GenericRecord userData = genericDatumReader.read(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, decoder);
            &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(userData);
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
            e.printStackTrace();
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the result is &lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java.lang.ArrayIndexOutOfBoundsException: 7
	at org.apache.avro.io.parsing.Symbol$Alternative.getSymbol(Symbol.java:424)
	at org.apache.avro.io.ResolvingDecoder.doAction(ResolvingDecoder.java:290)
	at org.apache.avro.io.parsing.Parser.advance(Parser.java:88)
	at org.apache.avro.io.ResolvingDecoder.readIndex(ResolvingDecoder.java:267)
	at org.apache.avro.generic.GenericDatumReader.readWithoutConversion(GenericDatumReader.java:179)
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:153)
	at org.apache.avro.generic.GenericDatumReader.readField(GenericDatumReader.java:232)
	at org.apache.avro.generic.GenericDatumReader.readRecord(GenericDatumReader.java:222)
	at org.apache.avro.generic.GenericDatumReader.readWithoutConversion(GenericDatumReader.java:175)
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:153)
	at org.apache.avro.generic.GenericDatumReader.readWithoutConversion(GenericDatumReader.java:179)
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:153)
	at org.apache.avro.generic.GenericDatumReader.readField(GenericDatumReader.java:232)
	at org.apache.avro.generic.GenericDatumReader.readRecord(GenericDatumReader.java:222)
	at org.apache.avro.generic.GenericDatumReader.readWithoutConversion(GenericDatumReader.java:175)
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:153)
	at org.apache.avro.generic.GenericDatumReader.readWithoutConversion(GenericDatumReader.java:179)
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:153)
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:145)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But if I do the same using a simple schema (without union), it works perfectly&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-json&quot;&gt;
{
        &lt;span class=&quot;code-quote&quot;&gt;&quot;namespace&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;com.test&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;MyDevice&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;doc&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;client device&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
            {
                &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;deviceId&quot;&lt;/span&gt;,
                &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: [
                    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;,
                    &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;
                ],
                &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt;: &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;,
                &lt;span class=&quot;code-quote&quot;&gt;&quot;doc&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Usually unique MAC address&quot;&lt;/span&gt;
            }
        ]
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Any help appreciated ! Thanks ! &lt;/p&gt;</description>
                <environment>&lt;p&gt;C++, Java&lt;/p&gt;</environment>
        <key id="13108100">AVRO-2095</key>
            <summary>Avro 1.8.2 encode in c++ -  java.lang.ArrayIndexOutOfBoundsException</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Not A Problem</resolution>
                                        <assignee username="thiru_mg">Thiruvalluvan M. G.</assignee>
                                    <reporter username="karthikus">Karthik</reporter>
                        <labels>
                            <label>newbie</label>
                    </labels>
                <created>Mon, 9 Oct 2017 21:33:57 +0000</created>
                <updated>Mon, 27 Nov 2017 19:36:43 +0000</updated>
                            <resolved>Mon, 27 Nov 2017 19:36:43 +0000</resolved>
                                    <version>1.8.2</version>
                                                    <component>c++</component>
                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="16199669" author="karthikus" created="Wed, 11 Oct 2017 01:26:14 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=thiru_mg&quot; class=&quot;user-hover&quot; rel=&quot;thiru_mg&quot;&gt;Thiruvalluvan M. G.&lt;/a&gt;, Thanks for your prompt response.&lt;/p&gt;

&lt;p&gt; The reason I did not define the MyDevice in-line (inside the Event schema) is, MyDevice schema will be used several times by other records (like event) in the actual schema definition. So the idea was to define it once and then reference it everywhere using the name (com.test.MyDevice). Please correct me if I am wrong ! &lt;/p&gt;</comment>
                            <comment id="16199675" author="thiru_mg" created="Wed, 11 Oct 2017 01:38:23 +0000"  >&lt;p&gt;The problem is that you have defined the top-level schema as a Union between &lt;tt&gt;MyDevice&lt;/tt&gt; and &lt;tt&gt;Event&lt;/tt&gt;. The Java code tries to first figure out if it is &lt;tt&gt;MyDevice&lt;/tt&gt; or &lt;tt&gt;Event&lt;/tt&gt; in the byte array. But what you wrote using C++ is plain &lt;tt&gt;Event&lt;/tt&gt;. In order to make them agree, you have to do write the union:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    MyDevice device;
    device.deviceId.set_string(&lt;span class=&quot;code-quote&quot;&gt;&quot;device1&quot;&lt;/span&gt;);
    Event event;
    event.myDevice.set_MyDevice(device);
    _t_avsc_Union__2__ u;
    u.set_Event(event);

    std::vector&amp;lt;&lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;&amp;gt; bytes;
    std::auto_ptr&amp;lt;avro::OutputStream&amp;gt; out = avro::memoryOutputStream(1);
    avro::EncoderPtr e = avro::binaryEncoder();

    e-&amp;gt;init(*out);
    avro::encode(*e, u);
    out-&amp;gt;flush();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The funny name &lt;tt&gt;_t_avsc_Union_&lt;em&gt;2&lt;/em&gt;_&lt;/tt&gt; is the internal name for the outer-most union. This will work but ugly.&lt;/p&gt;

&lt;p&gt;Unfortunately, the generated &lt;tt&gt;struct&lt;/tt&gt; for unions do not have a pretty names. Worse if you change the schema, the name for the Union could change. It is generally not a great idea to have top-level schemas as unions. You can embed it in a single-field Record with no loss of efficiency. Avro has zero overhead for single-field records in terms of serialized bytes.&lt;/p&gt;
</comment>
                            <comment id="16199679" author="thiru_mg" created="Wed, 11 Oct 2017 01:43:01 +0000"  >&lt;p&gt;I retracted my earlier response because I misunderstood the problem. My new response is more appropriate.&lt;/p&gt;</comment>
                            <comment id="16200268" author="thiru_mg" created="Wed, 11 Oct 2017 13:25:55 +0000"  >&lt;p&gt;You can reuse any named scheme (record, enum, fixed) even if they are nested inside another record. There is no need for them to be at the top-level.&lt;/p&gt;</comment>
                            <comment id="16267333" author="karthikus" created="Mon, 27 Nov 2017 19:36:14 +0000"  >&lt;p&gt;Hi, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=thiru_mg&quot; class=&quot;user-hover&quot; rel=&quot;thiru_mg&quot;&gt;Thiruvalluvan M. G.&lt;/a&gt; Apologies for my delayed response and thanks for your response. &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 11 Oct 2017 01:38:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310250" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10431"><![CDATA[Important]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 7 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3l1tr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
