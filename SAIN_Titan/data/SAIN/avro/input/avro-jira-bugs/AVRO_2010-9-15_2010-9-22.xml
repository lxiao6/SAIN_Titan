<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:14:33 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2010-9-15+AND+created+%3C%3D+2010-9-22+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="6" total="6"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-667] GenericArray fails to compare with List.  SpecificRecord compare gets ClassCastException</title>
                <link>https://issues.apache.org/jira/browse/AVRO-667</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-637&quot; title=&quot;GenericArray should implement Collection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-637&quot;&gt;&lt;del&gt;AVRO-637&lt;/del&gt;&lt;/a&gt; is incomplete.&lt;/p&gt;

&lt;p&gt;I am unable to convert my SpecificRecord project to 1.4.  It compiles, but unit tests get runtime exceptions.&lt;/p&gt;

&lt;p&gt;compareTo in GenericData does not handle List vs GenericArray and I get class cast exceptions.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java.lang.ClassCastException: java.util.ArrayList cannot be cast to org.apache.avro.generic.GenericArray
	at org.apache.avro.generic.GenericData.compare(GenericData.java:502)
	at org.apache.avro.specific.SpecificData.compare(SpecificData.java:190)
	at org.apache.avro.generic.GenericData.compare(GenericData.java:494)
	at org.apache.avro.specific.SpecificData.compare(SpecificData.java:190)
	at org.apache.avro.specific.SpecificRecordBase.compareTo(SpecificRecordBase.java:45)
	at org.apache.avro.specific.SpecificRecordBase.equals(SpecificRecordBase.java:35)
	at com.rr.eventdata.ViewRecord.equals(ViewRecord.java:350)
	at com.rr.eventdata.WriteStuffTest.main(WriteStuffTest.java:143)
	at com.rr.eventdata.WriteStuffTest.testReadWriteDataFile(WriteStuffTest.java:55)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;Also,  an array of string in SpecificRecord ends up as List&amp;lt;CharSequence&amp;gt;.  &lt;br/&gt;
However, it should be List&amp;lt;? extends CharSequence&amp;gt; or else you can&apos;t assign a List&amp;lt;String&amp;gt; to it.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12474247">AVRO-667</key>
            <summary>GenericArray fails to compare with List.  SpecificRecord compare gets ClassCastException</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.svg">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="scott_carey">Scott Carey</assignee>
                                    <reporter username="scott_carey">Scott Carey</reporter>
                        <labels>
                    </labels>
                <created>Thu, 16 Sep 2010 04:49:48 +0000</created>
                <updated>Thu, 14 Oct 2010 19:06:53 +0000</updated>
                            <resolved>Fri, 17 Sep 2010 01:42:29 +0000</resolved>
                                    <version>1.4.0</version>
                                    <fixVersion>1.4.1</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12910011" author="scott_carey" created="Thu, 16 Sep 2010 04:52:49 +0000"  >&lt;p&gt;This patch makes GenericData compatible with Lists and CharSequence for equals() and hashCode().&lt;/p&gt;

&lt;p&gt;It also adds unit tests for those two functions that are more complete and demonstrate the issue.  The current code coverage, after these tests, is 32% for GenericData.  We should increase that to 90%+, but perhaps in another ticket.&lt;/p&gt;</comment>
                            <comment id="12910015" author="scott_carey" created="Thu, 16 Sep 2010 05:02:22 +0000"  >&lt;p&gt;Hmm, I just realized this patch doesn&apos;t keep hashCode() consistent with equals().  We can only make this consistent for CharSequence if we .toString() the result... which is slow.  Although for Utf8 we could just change hashCode() in utf8 into:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.toString().hashCode(); 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which will at least cache the result.&lt;/p&gt;</comment>
                            <comment id="12910017" author="scott_carey" created="Thu, 16 Sep 2010 05:05:49 +0000"  >&lt;p&gt;Updated patch with consistend hashCode() and equals() for GenericData.&lt;/p&gt;</comment>
                            <comment id="12910238" author="cutting" created="Thu, 16 Sep 2010 17:37:15 +0000"  >&lt;p&gt;My intent is that, for arrays, the generic implementation will accept arbitrary Collection implementations.  I&apos;ve amended your patch to permit this and augmented the test you added.  We need more non-List Collection tests, but there&apos;s reflection-based code in Hadoop that requires this.&lt;/p&gt;

&lt;p&gt;Other than that, +1.&lt;/p&gt;</comment>
                            <comment id="12910248" author="scott_carey" created="Thu, 16 Sep 2010 17:55:37 +0000"  >&lt;p&gt;+1 &lt;/p&gt;

&lt;p&gt;Looks great to me!&lt;/p&gt;</comment>
                            <comment id="12910272" author="cutting" created="Thu, 16 Sep 2010 19:05:31 +0000"  >&lt;p&gt;I just realized that this could have a big performance impact on GenericData#compare() and hashCode().  The former is called in the inner loop of MapReduce sorts and is thus performance critical.  In this context, both instances will be Utf8.  Also, the correct ordering is by codepoint, which is the same as Utf8, while String&apos;s ordering may differ for surrogate pairs I believe.  So I&apos;d rather convert Strings to Utf8 than vice versa, to better preserve both correctness and performance.  Here&apos;s a patch that does this.  All tests pass.&lt;/p&gt;</comment>
                            <comment id="12910321" author="scott_carey" created="Thu, 16 Sep 2010 21:16:29 +0000"  >&lt;p&gt;If you are concerned about performance, then consider changing:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; STRING:
      Utf8 u1 = o1 &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; Utf8 ? (Utf8)o1 : &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Utf8(o1.toString());
      Utf8 u2 = o2 &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; Utf8 ? (Utf8)o2 : &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Utf8(o2.toString());
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; u1.compareTo(u2);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to use &lt;br/&gt;
  getClass().equals()&lt;br/&gt;
rather than &lt;br/&gt;
  instanceof&lt;/p&gt;

&lt;p&gt;since instanceof is slower (though not dramatically). &lt;/p&gt;

&lt;p&gt;This has limitations for anyone who extends Utf8, but it might be best to mark it final anyway.  Even if it is not final, we can&apos;t rely on a subclass implementing .equals() properly, it might be overridden and break equals() symmetry.  So I think Utf8.class.equals() or Utf8.class ==  are the right things to use, possibly while making Utf8 final.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; STRING:
  Utf8 u1 = Utf8.&lt;span class=&quot;code-keyword&quot;&gt;class.&lt;/span&gt;equals(o1.getClass()) ? (Utf8)o1 : &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Utf8(o1.toString());
  Utf8 u2 = Utf8.&lt;span class=&quot;code-keyword&quot;&gt;class.&lt;/span&gt;equals(o2.getClass()) ? (Utf8)o2 : &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Utf8(o2.toString());
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; u1.compareTo(u2);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="12910329" author="cutting" created="Thu, 16 Sep 2010 21:37:31 +0000"  >&lt;p&gt;I&apos;ve never found instanceof to be particularly slow, especially compared to new String() or new Utf8().  I&apos;m fairly confident that allocating and copying a new string instance for every key sorted in a MapReduce will slow things significantly.  I&apos;m considerably less confident that replacing instanceof with .getClass()== for each key would speed things significantly.  We could make Utf8 final to permit that, but then we&apos;d have to remember why it&apos;s final when someone asks if they can subclass it.  So I&apos;d prefer this patch as-is.&lt;/p&gt;</comment>
                            <comment id="12910405" author="scott_carey" created="Fri, 17 Sep 2010 00:20:59 +0000"  >&lt;p&gt;+1 on the current patch.&lt;/p&gt;

&lt;p&gt;Yes, instanceof is orders of magnitude off of object construction, and several times faster than the compareTo of two small strings.&lt;/p&gt;

&lt;p&gt;If we are trying to optimize comparing GenericRecords for Hadoop there are probably several other more significant things to change if we spent time profiling or experimenting.&lt;/p&gt;

&lt;p&gt;The benefit of marking Utf8 final is that we can guarantee that it uses Utf8 ordering and no subclasses do improper things.  That may not be a big concern however.&lt;/p&gt;</comment>
                            <comment id="12910420" author="scott_carey" created="Fri, 17 Sep 2010 01:42:29 +0000"  >&lt;p&gt;I have committed Doug&apos;s latest patch variation.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12454793" name="AVRO-667.patch" size="7447" author="cutting" created="Thu, 16 Sep 2010 19:05:31 +0000"/>
                            <attachment id="12454784" name="AVRO-667.patch" size="7046" author="cutting" created="Thu, 16 Sep 2010 17:37:15 +0000"/>
                            <attachment id="12454740" name="AVRO-667.patch" size="6752" author="scott_carey" created="Thu, 16 Sep 2010 05:05:49 +0000"/>
                            <attachment id="12454738" name="AVRO-667.patch" size="6547" author="scott_carey" created="Thu, 16 Sep 2010 04:52:49 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 16 Sep 2010 17:37:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94957</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 19 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1qn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80044</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-668] Java: Streamline writing of Strings for Encoders and GenericDatumWriter</title>
                <link>https://issues.apache.org/jira/browse/AVRO-668</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;We can streamline writing of strings to minimize object creation during writes.&lt;/p&gt;

&lt;p&gt;We can avoid converting a String into Utf8 for Json output, and for Binary output we can avoid a Utf8 (but still create a byte[]).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12474250">AVRO-668</key>
            <summary>Java: Streamline writing of Strings for Encoders and GenericDatumWriter</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="scott_carey">Scott Carey</assignee>
                                    <reporter username="scott_carey">Scott Carey</reporter>
                        <labels>
                    </labels>
                <created>Thu, 16 Sep 2010 05:46:55 +0000</created>
                <updated>Thu, 14 Oct 2010 19:06:54 +0000</updated>
                            <resolved>Tue, 21 Sep 2010 19:24:08 +0000</resolved>
                                                    <fixVersion>1.4.1</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12910220" author="scott_carey" created="Thu, 16 Sep 2010 16:48:22 +0000"  >&lt;p&gt;I forgot ValidatingEncoder in the last patch file. Oops.&lt;/p&gt;</comment>
                            <comment id="12910221" author="scott_carey" created="Thu, 16 Sep 2010 16:50:17 +0000"  >&lt;p&gt;We could also change this signature to take CharSequence instead of String.  But that would break the user-facing API.  This only requires those who have extended Encoder to implement the string variation, and that could be backed out and simply overriden in the child classes.&lt;/p&gt;</comment>
                            <comment id="12910229" author="cutting" created="Thu, 16 Sep 2010 17:11:18 +0000"  >&lt;p&gt;Scott, have you benchmarked this?  If so, how much does it improve things?&lt;/p&gt;

&lt;p&gt;Some problems with the current patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;it doesn&apos;t compile, failing with: ValidatingEncoder is not abstract and does not override abstract method writeString(java.lang.String)&lt;/li&gt;
	&lt;li&gt;once that&apos;s fixed, some tests fail for me (e.g., TestBlockIO2)&lt;/li&gt;
	&lt;li&gt;the utf8cs constant should be named UTF8_CS.  this fails checkstyle.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Should we also add Encoder#writeString(CharSequence s) as a convenience?  This could be implemented as:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (s &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; Utf8) 
  writeString((Utf8)s);
&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;
   writeString(s.toString());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That would move this logic from GenericDatumWriter to Encoder.  What do you think?  Are there other places that method might be useful?&lt;/p&gt;</comment>
                            <comment id="12910239" author="scott_carey" created="Thu, 16 Sep 2010 17:37:59 +0000"  >&lt;p&gt;As far as performance goes, I have not set up a benchmark.  I did note the String &amp;gt; Utf8 &amp;gt; byte[] &amp;gt; outputStream garbage creation in a profiler of my app.  But reducing garbage almost never does much in a microbenchmark, it is more of a system level optimization when you&apos;ve got lots of code churning the GC.  It might be useful for:&lt;br/&gt;
&lt;a href=&quot;http://wiki.github.com/eishay/jvm-serializers/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.github.com/eishay/jvm-serializers/&lt;/a&gt;   though.  Anything that makes String &amp;gt; out and in &amp;gt; String more streamlined will help that benchmark.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The most recent patch compiles. I failed to include it the first time.&lt;/li&gt;
	&lt;li&gt;I&apos;ll change it to UTF8_CS&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I can&apos;t run all java tests from ant on trunk. Not sure if its my fault or not but it hangs forever in:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Running org.apache.avro.TestProtocolHttp&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 5455 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; INFO org.apache.avro.ipc.DatagramTransceiver - sent to /127.0.0.1:15276&lt;/p&gt;

&lt;p&gt;The test prior fails too:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Running org.apache.avro.TestProtocolGenericMeta&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 5427 &lt;span class=&quot;error&quot;&gt;&amp;#91;SocketServer on 0.0.0.0/0.0.0.0:0&amp;#93;&lt;/span&gt; INFO org.apache.avro.ipc.SocketTransceiver - open to /10.0.0.231:65043&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 5429 &lt;span class=&quot;error&quot;&gt;&amp;#91;SocketServer on 0.0.0.0/0.0.0.0:0&amp;#93;&lt;/span&gt; INFO org.apache.avro.ipc.SocketServer - stopping /0.0.0.0&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 5427 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; INFO org.apache.avro.ipc.SocketTransceiver - open to 0.0.0.0/0.0.0.0:65040&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 5441 &lt;span class=&quot;error&quot;&gt;&amp;#91;Connection to /10.0.0.231:65043&amp;#93;&lt;/span&gt; INFO org.apache.avro.TestProtocolGeneric - hello: bob&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 5441 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; INFO org.apache.avro.ipc.SocketTransceiver - closing to 0.0.0.0/0.0.0.0:65040&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Tests run: 6, Failures: 0, Errors: 5, Time elapsed: 0.071 sec&lt;/p&gt;

&lt;p&gt;with 5 errors similar to:&lt;br/&gt;
Testcase: testEcho took 0 sec&lt;br/&gt;
        Caused an ERROR&lt;br/&gt;
null&lt;br/&gt;
java.nio.channels.ClosedChannelException&lt;br/&gt;
        at sun.nio.ch.SocketChannelImpl.ensureWriteOpen(SocketChannelImpl.java:126)&lt;br/&gt;
        at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:324)&lt;br/&gt;
        at org.apache.avro.ipc.SocketTransceiver.writeLength(SocketTransceiver.java:94)&lt;br/&gt;
        at org.apache.avro.ipc.SocketTransceiver.writeBuffers(SocketTransceiver.java:84)&lt;br/&gt;
        at org.apache.avro.ipc.Transceiver.transceive(Transceiver.java:38)&lt;br/&gt;
        at org.apache.avro.ipc.Requestor.request(Requestor.java:123)&lt;br/&gt;
        at org.apache.avro.generic.GenericRequestor.request(GenericRequestor.java:43)&lt;br/&gt;
        at org.apache.avro.TestProtocolGeneric.testEcho(TestProtocolGeneric.java:132)&lt;/p&gt;

&lt;p&gt;Either that is my setup, or a different JIRA to make that work.  Or its just more stupid Mac crap causing trouble.&lt;/p&gt;

&lt;p&gt;If I run TestBlockIO2 by itself, I can see the error you mention but I&apos;m puzzled by what that might be at the moment.  Maybe its because I switched from the deprecated Utf8 getLength() to getByteLength()?&lt;/p&gt;


&lt;p&gt;I think providing both writeString(Utf8) and writeString(CharSequence) at the Encoder level would be useful.  However thats an API change that would have to wait until 1.5.   That is not so bad I guess this isn&apos;t a huge performance benefit, just something that combined with 4 or 5 other little things would add up.&lt;/p&gt;
</comment>
                            <comment id="12910246" author="cutting" created="Thu, 16 Sep 2010 17:51:47 +0000"  >&lt;p&gt;&amp;gt; I can&apos;t run all java tests from ant on trunk.&lt;/p&gt;

&lt;p&gt;That&apos;s a problem.  Do you have a &apos;127.0.0.1 localhost&apos; line in /etc/hosts?  How about a &apos;0.0.0.0 localhost&apos; line?  I have both, but don&apos;t know if either are required.&lt;/p&gt;

&lt;p&gt;&amp;gt; I think providing both writeString(Utf8) and writeString(CharSequence) at the Encoder level would be useful. However thats an API change that would have to wait until 1.5.&lt;/p&gt;

&lt;p&gt;Why?  I&apos;m don&apos;t see how adding that method with a default implementation would be an incompatible change.&lt;/p&gt;</comment>
                            <comment id="12910258" author="scott_carey" created="Thu, 16 Sep 2010 18:38:23 +0000"  >&lt;p&gt;Patch includes suggestion by Doug to use default implementations in Encoder for writeString(String) and writeString(CharSequence) and move logic out of GenericDatumWriter.&lt;/p&gt;

&lt;p&gt;TestBlockIO2 still fails, but feedback on this variant would be useful regardless (or ideas on why these changes would cause such a failure).&lt;/p&gt;


&lt;p&gt;Doug:&lt;br/&gt;
My hosts file has:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;127.0.0.1	localhost
255.255.255.255	broadcasthost
::1             localhost 
fe80::1%lo0	localhost
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which looks like a typical BSD/Mac hosts file.&lt;br/&gt;
I&apos;ve got several interfaces in ifconfig; one of those might be causing confusion.&lt;/p&gt;</comment>
                            <comment id="12910260" author="scott_carey" created="Thu, 16 Sep 2010 18:39:11 +0000"  >&lt;p&gt;The last patch conflicts with &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-667&quot; title=&quot;GenericArray fails to compare with List.  SpecificRecord compare gets ClassCastException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-667&quot;&gt;&lt;del&gt;AVRO-667&lt;/del&gt;&lt;/a&gt;,  I&apos;ll make a patch that works on top of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-667&quot; title=&quot;GenericArray fails to compare with List.  SpecificRecord compare gets ClassCastException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-667&quot;&gt;&lt;del&gt;AVRO-667&lt;/del&gt;&lt;/a&gt; if we commit it.&lt;/p&gt;</comment>
                            <comment id="12910433" author="scott_carey" created="Fri, 17 Sep 2010 03:45:50 +0000"  >&lt;p&gt;Tests in o.a.a.io pass.&lt;/p&gt;

&lt;p&gt;Doug&apos;s suggestions incorporated.  &lt;/p&gt;
</comment>
                            <comment id="12910755" author="cutting" created="Fri, 17 Sep 2010 20:03:23 +0000"  >&lt;p&gt;Did you mean to use &apos;Utf8.class.equals(charSequence.getClass())&apos;?  I think &apos;charSequence instanceof Utf8&apos; reads much better, and, as we discussed in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-667&quot; title=&quot;GenericArray fails to compare with List.  SpecificRecord compare gets ClassCastException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-667&quot;&gt;&lt;del&gt;AVRO-667&lt;/del&gt;&lt;/a&gt;, the performance improvement is perhaps not significant and this might be risky if Utf8 is not final.&lt;/p&gt;

&lt;p&gt;(I wonder whether HotSpot doesn&apos;t already optimize instanceof for classes with no subclasses yet defined to be ==.  It could, couldn&apos;t it?)&lt;/p&gt;

&lt;p&gt;Did we also want to update GenericDatumWriter#writeString()?  Maybe not...&lt;/p&gt;

&lt;p&gt;Other than that, +1&lt;/p&gt;</comment>
                            <comment id="12912667" author="scott_carey" created="Mon, 20 Sep 2010 19:33:06 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Did you mean to use &apos;Utf8.class.equals(charSequence.getClass())&apos;? I think &apos;charSequence instanceof Utf8&apos; reads much better, and, as we discussed in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-667&quot; title=&quot;GenericArray fails to compare with List.  SpecificRecord compare gets ClassCastException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-667&quot;&gt;&lt;del&gt;AVRO-667&lt;/del&gt;&lt;/a&gt;, the performance improvement is perhaps not significant and this might be risky if Utf8 is not final. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;At first I did this defensively.  It is not risky for a subclass, as that would still work, via the CharSequence contract on toString().&lt;/p&gt;

&lt;p&gt;But thinking about it a bit more, this only requires that a sublcass implement getByteLength() and getBytes() properly, and these are unlikely to be done improperly.  &lt;br/&gt;
Unlike in other places where equals() and hashCode() have to remain consistent with Utf8 and it is easy for someone to write a subclass that is self-consistent with Object.equals() and Object.hashCode() but break Utf8&apos;s variations.  &lt;/p&gt;

&lt;p&gt;Therefore instanceof has little value from the defensive side here, and not much performance-wise either.  Writing is far more expensive than the difference between instanceof and class.equals() here.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Did we also want to update GenericDatumWriter#writeString()? Maybe not&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oops, I did intend to include that!&lt;/p&gt;

&lt;p&gt;Updated patch on the way.&lt;/p&gt;</comment>
                            <comment id="12913194" author="cutting" created="Tue, 21 Sep 2010 19:24:08 +0000"  >&lt;p&gt;I just committed this.  Thanks, Scott!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12455071" name="AVRO-668.patch" size="8180" author="scott_carey" created="Mon, 20 Sep 2010 19:39:34 +0000"/>
                            <attachment id="12454823" name="AVRO-668.patch" size="6940" author="scott_carey" created="Fri, 17 Sep 2010 03:45:50 +0000"/>
                            <attachment id="12454787" name="AVRO-668.patch" size="6802" author="scott_carey" created="Thu, 16 Sep 2010 18:38:23 +0000"/>
                            <attachment id="12454781" name="AVRO-668.patch" size="4844" author="scott_carey" created="Thu, 16 Sep 2010 16:48:22 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 16 Sep 2010 17:11:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94958</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 18 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1qv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80045</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-669] Avro Mapreduce Doesn&apos;t Work With Reflect Schemas</title>
                <link>https://issues.apache.org/jira/browse/AVRO-669</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I&apos;m trying to get the Avro trunk code (from Subversion) to work with a simple example of a reflection-defined schema, using a class I created. I use a ReflectDatumWriter to write a set of records to a file, e.g.,&lt;/p&gt;

&lt;p&gt;        DatumWriter writer = new ReflectDatumWriter(Record.class);&lt;br/&gt;
        DataFileWriter file = new DataFileWriter(writer);&lt;/p&gt;

&lt;p&gt;However, when I try to read that data in using an AvroMapper it fails with an exception as shown below. It turns out that the mapreduce implementation hard-codes a dependence on SpecificDatum readers and writers. &lt;/p&gt;

&lt;p&gt;I&apos;ve tested switching to use ReflectDatum instead in five places to try to get it to work for an end-to-end reflect data example:&lt;br/&gt;
AvroFileInputFormat&lt;br/&gt;
AvroFileOutputFormat&lt;br/&gt;
AvroSerialization (getDeserializer and getSerializer)&lt;br/&gt;
AvroKeyComparator&lt;/p&gt;

&lt;p&gt;However, switching to use reflection for AvroKeyComparator doesn&apos;t work:&lt;br/&gt;
java.lang.UnsupportedOperationException&lt;br/&gt;
	at org.apache.avro.reflect.ReflectData.compare(ReflectData.java:427)&lt;br/&gt;
	at org.apache.avro.mapred.AvroKeyComparator.compare(AvroKeyComparator.java:46)&lt;/p&gt;

&lt;p&gt;It should be possible to implement compare on reflect data (just like GenericData&apos;s implementation but use the field name instead (or better yet a cached java.lang.reflect.Field)...&lt;/p&gt;

&lt;p&gt;Original exception:&lt;br/&gt;
java.lang.ClassCastException: tba.mr.sample.avro.Record cannot be cast to org.apache.avro.generic.IndexedRecord&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumReader.setField(GenericDatumReader.java:152)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumReader.readRecord(GenericDatumReader.java:142)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:114)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:105)&lt;br/&gt;
	at org.apache.avro.file.DataFileStream.next(DataFileStream.java:198)&lt;br/&gt;
	at org.apache.avro.mapred.AvroRecordReader.next(AvroRecordReader.java:63)&lt;br/&gt;
	at org.apache.avro.mapred.AvroRecordReader.next(AvroRecordReader.java:33)&lt;br/&gt;
	at org.apache.hadoop.mapred.MapTask$TrackedRecordReader.moveToNext(MapTask.java:192)&lt;br/&gt;
	at org.apache.hadoop.mapred.MapTask$TrackedRecordReader.next(MapTask.java:176)&lt;br/&gt;
	at org.apache.hadoop.mapred.MapRunner.run(MapRunner.java:48)&lt;br/&gt;
	at org.apache.hadoop.mapred.MapTask.runOldMapper(MapTask.java:358)&lt;br/&gt;
	at org.apache.hadoop.mapred.MapTask.run(MapTask.java:307)&lt;br/&gt;
	at org.apache.hadoop.mapred.Child.main(Child.java:170)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12474354">AVRO-669</key>
            <summary>Avro Mapreduce Doesn&apos;t Work With Reflect Schemas</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="rbodkin">Ron Bodkin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 17 Sep 2010 05:46:16 +0000</created>
                <updated>Tue, 27 Mar 2012 06:29:15 +0000</updated>
                            <resolved>Wed, 29 Dec 2010 21:38:53 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>3</watches>
                                                                                                            <comments>
                            <comment id="12910742" author="cutting" created="Fri, 17 Sep 2010 19:25:45 +0000"  >&lt;p&gt;Here&apos;s a patch that implements ReflectData.compare() for all types but Object[] and byte[].  It moves the getField() and setField() methods from the reader/writers to GenericData, so that the generic implementation of record comparison can be shared.  This also eliminates a little duplicate code.&lt;/p&gt;

&lt;p&gt;It doesn&apos;t add full end-to-end MapReduce tests for reflect-based data, so I have not verified whether that works yet, but it should address the proximal cause.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-638&quot; title=&quot;make reflect, specific and generic data compatible&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-638&quot;&gt;&lt;del&gt;AVRO-638&lt;/del&gt;&lt;/a&gt; is related.  When that&apos;s complete, it should be possible to switch the mapred code to always use ReflectDatumReader, ReflectDatumWriter and ReflectData, since these should then work for specific and generic data as well.&lt;/p&gt;

&lt;p&gt;Please tell me if this helps.&lt;/p&gt;</comment>
                            <comment id="12910856" author="rbodkin" created="Fri, 17 Sep 2010 23:48:38 +0000"  >&lt;p&gt;Thanks Doug, that does help. With those changes (and a few more that I&apos;ll attach as a patch to be applied in addition) I was able to run my sample code.&lt;/p&gt;</comment>
                            <comment id="12910858" author="rbodkin" created="Fri, 17 Sep 2010 23:58:19 +0000"  >&lt;p&gt;Additional patch, to applied after &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-669&quot; title=&quot;Avro Mapreduce Doesn&amp;#39;t Work With Reflect Schemas&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-669&quot;&gt;&lt;del&gt;AVRO-669&lt;/del&gt;&lt;/a&gt;.patch, to allow reflect data to be used with mapreduce.&lt;/p&gt;

&lt;p&gt;I haven&apos;t got the map/reduce tests for avro working in my development environment, so they still needs to be verified and extended to test reflect data as well.&lt;/p&gt;</comment>
                            <comment id="12911082" author="rbodkin" created="Sat, 18 Sep 2010 20:20:26 +0000"  >&lt;p&gt;This change does break the word count test:&lt;/p&gt;

&lt;p&gt;  &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; java.lang.ClassCastException: java.lang.String cannot be cast to org.apache.avro.util.Utf8&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.avro.mapred.TestWordCount$MapImpl.map(TestWordCount.java:43)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.avro.mapred.HadoopMapper.map(HadoopMapper.java:80)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.avro.mapred.HadoopMapper.map(HadoopMapper.java:34)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.hadoop.mapred.MapRunner.run(MapRunner.java:50)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.hadoop.mapred.MapTask.runOldMapper(MapTask.java:358)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.hadoop.mapred.MapTask.run(MapTask.java:307)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.hadoop.mapred.LocalJobRunner$Job.run(LocalJobRunner.java:177)&lt;/p&gt;

&lt;p&gt;This was because ReflectDatumReader.readString returns a String, whereas GenericDatumReader.readString returns a Utf8.&lt;/p&gt;

&lt;p&gt;I&apos;m tested making ReflectDatumReader return a Utf8, but there are a number of places in the code that expect it to return a String - e.g., a protocol test breaks and TestDataFileReflect breaks also.&lt;/p&gt;

&lt;p&gt;What do you think is the right way to handle this inconsistency?&lt;/p&gt;
</comment>
                            <comment id="12912661" author="cutting" created="Mon, 20 Sep 2010 19:27:38 +0000"  >&lt;p&gt;&amp;gt; What do you think is the right way to handle this inconsistency?&lt;/p&gt;

&lt;p&gt;In TestWordCount,.java, we should change all non-constructor references to Utf8 to CharSequence, the common interface between String and Utf8.&lt;/p&gt;

&lt;p&gt;Looking at your patch, you&apos;ve added a few features without explanation.  You&apos;ve added an AvroSerialization#makeWriter() method.  This might be reasonable, but since it&apos;s protected and will appear in javadoc, it deserves a javadoc comment.  To AvroRecordReader you add a new constructor with a flag, indicating whether reflection&apos;s to be used.  Should we rather be consistent here in how we specify this?&lt;/p&gt;

&lt;p&gt;An early version of this API had a job parameter, avro.input.api, avro.mapout.api and avro.output.api or somesuch, that could have values &quot;reflect&quot;, &quot;specific&quot;, or &quot;generic&quot;.  Perhaps we should revive that approach?  The default would be &quot;reflect&quot;, and mapout would default to output.  Thoughts?&lt;/p&gt;</comment>
                            <comment id="12913325" author="rbodkin" created="Wed, 22 Sep 2010 00:37:28 +0000"  >&lt;p&gt;That makeWriter method was a hold-over from an earlier attempt at allowing the use of either reflect or specific. If we can let it always use reflect that would be a lot better (and I&apos;d just eliminate makeWriter). Likewise for that constructor flag - hopefully something to just drop.&lt;/p&gt;

&lt;p&gt;To fit the approach of converting Utf8 to CharSequence there would also be a need to have a similar change in any of the Avro-generated classes, e.g., if I try to read an array of strings with reflection using Avro-generated code I get this exception:&lt;/p&gt;

&lt;p&gt;java.lang.ClassCastException: [Ljava.lang.String; cannot be cast to java.util.List&lt;/p&gt;

&lt;p&gt;This got generated as&lt;br/&gt;
public java.util.List&amp;lt;java.lang.CharSequence&amp;gt; key;&lt;/p&gt;

&lt;p&gt;The back trace is:&lt;br/&gt;
	at org.apache.avro.generic.GenericData.setField(GenericData.java:377)&lt;br/&gt;
	at org.apache.avro.reflect.ReflectData.setField(ReflectData.java:79)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumReader.readRecord(GenericDatumReader.java:149)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:121)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumReader.readArray(GenericDatumReader.java:178)&lt;/p&gt;

&lt;p&gt;The problem here is that the system can&apos;t detect the type of null fields. Since it&apos;s possible to have fields that should be null, we can&apos;t just initialize an empty collection. Instead, it looks to me like the generated schema for a generated class needs to emit the right hints in the form of these schema properties:&lt;br/&gt;
  static final String CLASS_PROP = &quot;java-class&quot;;&lt;br/&gt;
  static final String ELEMENT_PROP = &quot;java-element-class&quot;;&lt;/p&gt;</comment>
                            <comment id="12918376" author="rbodkin" created="Wed, 6 Oct 2010 01:31:58 +0000"  >&lt;p&gt;From discussion on IRC, it&apos;d be better to change the default values that ReflectData uses when reading in types to be the values that are generated by the Avro code generator (e.g., it should use GenericData.Array rather than a Java array by default). &lt;/p&gt;

&lt;p&gt;This will also require encoding reflection data for arrays that used to be a default, e.g., the ReflectData.createSchema method should emit a CLASS_PROP of GenericArrayType.class and reflect data reader should honor that.&lt;/p&gt;</comment>
                            <comment id="12918664" author="cutting" created="Wed, 6 Oct 2010 20:23:12 +0000"  >&lt;p&gt;I moved my patch from here to a new issue, &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-678&quot; title=&quot;implement ReflectData#compare()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-678&quot;&gt;&lt;del&gt;AVRO-678&lt;/del&gt;&lt;/a&gt;, since it solves a distinct sub-problem.&lt;/p&gt;</comment>
                            <comment id="12920376" author="spikegronim" created="Tue, 12 Oct 2010 22:12:48 +0000"  >&lt;p&gt;I have also experienced this issue. In my case I could work around it by disabling the Combiner.&lt;/p&gt;</comment>
                            <comment id="12971461" author="cutting" created="Tue, 14 Dec 2010 23:07:18 +0000"  >&lt;p&gt;Here&apos;s a patch that makes Avro&apos;s MapReduce API work with reflection-based data, including a test.&lt;/p&gt;

&lt;p&gt;Jobs that wish to use reflection should call AvroJob.setReflect(job).&lt;/p&gt;

&lt;p&gt;Note that this also makes the reflect data representation almost a complete superset of specific, which is itself a superset of generic.  The only exception is that, in reflect, strings are read as java.lang.String while in specific and generic, strings are read as org.apache.avro.util.Utf8.  Either class may be used when writing strings.&lt;/p&gt;</comment>
                            <comment id="12971463" author="cutting" created="Tue, 14 Dec 2010 23:08:59 +0000"  >&lt;p&gt;Note that, combined with other issues, this nearly completes &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-638&quot; title=&quot;make reflect, specific and generic data compatible&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-638&quot;&gt;&lt;del&gt;AVRO-638&lt;/del&gt;&lt;/a&gt; too.  The representation that strings are read into is the only remaining incompatibility.&lt;/p&gt;</comment>
                            <comment id="12972196" author="cutting" created="Thu, 16 Dec 2010 20:17:16 +0000"  >&lt;p&gt;Here&apos;s a version of this patch that applies to trunk after the &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-647&quot; title=&quot;Break avro.jar into avro.jar, avro-dev.jar and avro-hadoop.jar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-647&quot;&gt;&lt;del&gt;AVRO-647&lt;/del&gt;&lt;/a&gt; re-org.&lt;/p&gt;</comment>
                            <comment id="12972244" author="cutting" created="Thu, 16 Dec 2010 22:15:41 +0000"  >&lt;p&gt;Unless there are objections, I will commit this soon.&lt;/p&gt;</comment>
                            <comment id="12975920" author="cutting" created="Wed, 29 Dec 2010 21:38:53 +0000"  >&lt;p&gt;I committed this.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12472722">AVRO-638</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12466402" name="AVRO-669.patch" size="20346" author="cutting" created="Thu, 16 Dec 2010 20:17:16 +0000"/>
                            <attachment id="12466268" name="AVRO-669.patch" size="19471" author="cutting" created="Tue, 14 Dec 2010 23:07:18 +0000"/>
                            <attachment id="12454892" name="AVRO-669.patch" size="15211" author="cutting" created="Fri, 17 Sep 2010 19:25:45 +0000"/>
                            <attachment id="12454921" name="AVRO-669.patch.2" size="4776" author="rbodkin" created="Fri, 17 Sep 2010 23:58:19 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12476708">AVRO-678</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 17 Sep 2010 19:25:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4198</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 4 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1r3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80046</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-670] Allow DataFileWriteTool to accept schema files as input</title>
                <link>https://issues.apache.org/jira/browse/AVRO-670</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;For non-trivial schemas, it&apos;s difficult to pass them inline as a command line argument. I made a patch to use two different arguments: instead of having the first argument be the schema you would now use -schema-file file or -schema schema and then have one other argument (the input JSON file)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12474418">AVRO-670</key>
            <summary>Allow DataFileWriteTool to accept schema files as input</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rbodkin">Ron Bodkin</assignee>
                                    <reporter username="rbodkin">Ron Bodkin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 17 Sep 2010 17:55:34 +0000</created>
                <updated>Tue, 13 Dec 2011 19:06:48 +0000</updated>
                            <resolved>Mon, 20 Sep 2010 17:14:49 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12910697" author="rbodkin" created="Fri, 17 Sep 2010 17:57:12 +0000"  >&lt;p&gt;The patch&lt;/p&gt;</comment>
                            <comment id="12910712" author="philip" created="Fri, 17 Sep 2010 18:22:17 +0000"  >&lt;p&gt;Hi Ron,&lt;/p&gt;

&lt;p&gt;The idea and implementation look good.  We should note that it&apos;s an incompatible change in terms of the tools command line API, which I think is fine, but should be noted.&lt;/p&gt;

&lt;p&gt;I couldn&apos;t get the patch to apply cleanly.  Typically (see &lt;a href=&quot;https://cwiki.apache.org/AVRO/how-to-contribute.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/AVRO/how-to-contribute.html&lt;/a&gt;) patches should be generated at top-level (so, lang/java/... should be the path that&apos;s being patched).  Many folks name their patches &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-670&quot; title=&quot;Allow DataFileWriteTool to accept schema files as input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-670&quot;&gt;&lt;del&gt;AVRO-670&lt;/del&gt;&lt;/a&gt;.patch, too, though I&apos;m not a stickler there.  I also recommend turning off Eclipse&apos;s autoimport.  I think our style guide discourages star imports (e.g., +import joptsimple.*; is not something your patch should have introduced).  Besides that, &quot;patch&quot; gave me a rejects file---how did you generate your patch?&lt;/p&gt;

&lt;p&gt;I was slightly surprised that &apos;lang/java/src/test/bin/test_tools.sh&apos; (which is run by the ant target &apos;test-tools&apos;) doesn&apos;t exercise this code.  Would be good to make sure that the tests for this code don&apos;t need any modification.  (There&apos;s a java test somewhere, but it might not exercise the command-line parsing code; I haven&apos;t looked.)&lt;/p&gt;

&lt;p&gt;Could you upload a new patch without the import changes and re-generated against the root of the repo?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12910719" author="rbodkin" created="Fri, 17 Sep 2010 18:30:35 +0000"  >&lt;p&gt;I am working on fixing the one test that actually does test this code (it is indeed incompatible). I&apos;ll submit an updated patch with that and the imports less modified. I just used svn diff to generate the patch.&lt;/p&gt;</comment>
                            <comment id="12910853" author="rbodkin" created="Fri, 17 Sep 2010 23:46:48 +0000"  >&lt;p&gt;Here&apos;s a revised patch from top-level, including updated tests that test the new argument as well.&lt;/p&gt;</comment>
                            <comment id="12912596" author="philip" created="Mon, 20 Sep 2010 17:14:49 +0000"  >&lt;p&gt;Hi Ron,&lt;/p&gt;

&lt;p&gt;Thanks for your contribution!  (And congratulations on your first contribution to AVRO.)  I&apos;ve committed it.&lt;/p&gt;

&lt;p&gt;I made two very minor changes:&lt;/p&gt;

&lt;p&gt;I fixed one &quot;checkstyle&quot; bug (&quot;ant test&quot; runs checkstyle) &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;checkstyle&amp;#93;&lt;/span&gt; /data/6/philip/avro-svn/lang/java/src/java/org/apache/avro/tool/DataFileWriteTool.java:121:69: Redundant throws: &apos;FileNotFoundException&apos; is subclass of &apos;IOException&apos;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I also added a &quot;--schema&quot; to src/test/bin/test_tools.sh in one place, to fix a test failure.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12454919" name="AVRO-670.patch" size="5945" author="rbodkin" created="Fri, 17 Sep 2010 23:46:48 +0000"/>
                            <attachment id="12454882" name="datafilewritefile.patch" size="2666" author="rbodkin" created="Fri, 17 Sep 2010 17:57:12 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 17 Sep 2010 18:22:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4175</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10342"><![CDATA[Incompatible change]]></customfieldvalue>
    <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 19 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1rb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80047</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>The &amp;quot;fromjson&amp;quot; tool now requires either a --schema or --schema-file command-line argument to specify the schema.  Previously, the schema was to be specified as the first argument.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-671] SpecificCompiler generates invalid Java code for invalid identifiers</title>
                <link>https://issues.apache.org/jira/browse/AVRO-671</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;e.g., if you have a field named &quot;a.b&quot; it will attempt to generate Java code with a field named a.b.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12474501">AVRO-671</key>
            <summary>SpecificCompiler generates invalid Java code for invalid identifiers</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="rbodkin">Ron Bodkin</reporter>
                        <labels>
                    </labels>
                <created>Sun, 19 Sep 2010 00:11:47 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:54 +0000</updated>
                            <resolved>Thu, 7 Oct 2010 21:32:24 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12911130" author="rbodkin" created="Sun, 19 Sep 2010 00:25:01 +0000"  >&lt;p&gt;Patch to fix this.&lt;/p&gt;</comment>
                            <comment id="12911149" author="rbodkin" created="Sun, 19 Sep 2010 01:31:24 +0000"  >&lt;p&gt;This patch has a bug - handling of periods is more tricky to allow for proper use of packages but not to generate field names etc. with periods in them. I&apos;m working on a fix for that issue.&lt;/p&gt;</comment>
                            <comment id="12912597" author="rbodkin" created="Mon, 20 Sep 2010 17:15:22 +0000"  >&lt;p&gt;Improved patch that handles namespaces and includes tests for those as well.&lt;/p&gt;</comment>
                            <comment id="12912649" author="cutting" created="Mon, 20 Sep 2010 19:09:09 +0000"  >&lt;p&gt;Rather, this should be fixed in Schema.java.  A name is not meant to contain such characters:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://avro.apache.org/docs/current/spec.html#Names&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/docs/current/spec.html#Names&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we should probably add a check into schema construction and throw an exception if a name contains invalid characters.&lt;/p&gt;</comment>
                            <comment id="12912717" author="rbodkin" created="Mon, 20 Sep 2010 21:19:46 +0000"  >&lt;p&gt;That sounds fair to me. It does mean that there will be valid JSON documents that can&apos;t be translated into Avro (since JSON will accept a lot of other identifier characters). But I can see that it&apos;s better to perform the same kind of mangling I proposed in the patch on translation into an Avro format.&lt;/p&gt;</comment>
                            <comment id="12912718" author="rbodkin" created="Mon, 20 Sep 2010 21:20:45 +0000"  >&lt;p&gt;Here is a patch that instead throws parse exceptions in the presence of invalid characters.&lt;/p&gt;</comment>
                            <comment id="12912782" author="cutting" created="Mon, 20 Sep 2010 23:54:15 +0000"  >&lt;p&gt;Here&apos;s a patch that checks every schema or field name and enum symbol.  I modified the constructors for these rather than the parser, so that schemas created programmatically are also checked.  I added tests to TestSchema instead of TestSpecificCompiler, since schemas must be created before the compiler operates on them.&lt;/p&gt;

&lt;p&gt;This does not validate namespaces, just names.&lt;/p&gt;</comment>
                            <comment id="12918250" author="cutting" created="Tue, 5 Oct 2010 22:09:45 +0000"  >&lt;p&gt;Unless there are objections, I will commit this soon.&lt;/p&gt;</comment>
                            <comment id="12919072" author="cutting" created="Thu, 7 Oct 2010 21:32:24 +0000"  >&lt;p&gt;I committed this, but don&apos;t plan to include it in 1.4.1, as it could break applications that use illegal names in schemas.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12455058" name="AVRO-671-r2.patch" size="5346" author="rbodkin" created="Mon, 20 Sep 2010 17:15:22 +0000"/>
                            <attachment id="12455078" name="AVRO-671-r3.patch" size="9782" author="rbodkin" created="Mon, 20 Sep 2010 21:20:45 +0000"/>
                            <attachment id="12455098" name="AVRO-671.patch" size="4215" author="cutting" created="Mon, 20 Sep 2010 23:54:15 +0000"/>
                            <attachment id="12454959" name="AVRO-671.patch" size="1542" author="rbodkin" created="Sun, 19 Sep 2010 00:25:01 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 20 Sep 2010 19:09:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4159</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10342"><![CDATA[Incompatible change]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 16 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1rj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80048</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-672] Convert JSON Text Input to Avro Tool</title>
                <link>https://issues.apache.org/jira/browse/AVRO-672</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The attached patch allows reading a JSON-formatted text file in, converting to a conforming Avro text file, emitting one record per line, e.g., it can read this input file:&lt;/p&gt;
{&quot;intval&quot;:12}
{&quot;intval&quot;:-73,&quot;strval&quot;:&quot;hello, there!!&quot;}

&lt;p&gt;with this schema:&lt;br/&gt;
{ &quot;type&quot;:&quot;record&quot;, &quot;name&quot;:&quot;TestRecord&quot;, &quot;fields&quot;: [ &lt;/p&gt;
{&quot;name&quot;:&quot;intval&quot;,&quot;type&quot;:&quot;int&quot;}
&lt;p&gt;, &lt;/p&gt;
{&quot;name&quot;:&quot;strval&quot;,&quot;type&quot;:[&quot;string&quot;, &quot;null&quot;]}
&lt;p&gt;]}&lt;/p&gt;

&lt;p&gt;returning valid Avro. This is different than the DataFileWriteTool, which would read in the following internal encoding:&lt;/p&gt;
{&quot;intval&quot;:12,&quot;strval&quot;:null}
&lt;p&gt;{&quot;intval&quot;:-73,&quot;strval&quot;:{&quot;string&quot;:&quot;hello, there!!&quot;}}&lt;/p&gt;

&lt;p&gt;In general, the internal encodings used by Avro aren&apos;t natural when reading in JSON text that appears in the wild. Likewise, this utility allows changing invalid Avro identifier characters into an underscore, again to tolerate JSON that wasn&apos;t designed to be readable by Avro.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12474636">AVRO-672</key>
            <summary>Convert JSON Text Input to Avro Tool</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="10002" iconUrl="https://issues.apache.org/jira/images/icons/statuses/document.png" description="A patch for this issue has been uploaded to JIRA by a contributor.">Patch Available</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="rbodkin">Ron Bodkin</reporter>
                        <labels>
                    </labels>
                <created>Mon, 20 Sep 2010 23:05:13 +0000</created>
                <updated>Wed, 24 Jun 2015 10:41:44 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12912777" author="rbodkin" created="Mon, 20 Sep 2010 23:41:44 +0000"  >&lt;p&gt;Patch with implementation of this feature, including a test.&lt;/p&gt;</comment>
                            <comment id="12918247" author="cutting" created="Tue, 5 Oct 2010 22:07:03 +0000"  >&lt;p&gt;It might be confusing to provide two different JSON encodings for Avro data.  Also, the encoding in your patch is indeed simpler, but can lose information.  For example, a string that looks like base64-encoded binary data would be assumed by Jackson to be binary data, which might not always be the case.  Schemas that include fixed or enum values are not supported by this encoding, nor are many unions.&lt;/p&gt;

&lt;p&gt;If reading and writing arbitrary JSON is a priority, then the approach taken in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-251&quot; title=&quot;add schema for schemas&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-251&quot;&gt;AVRO-251&lt;/a&gt; might be of interest.  Here&apos;s a patch that provides a DatumReader and DatumWriter for Jackson&apos;s JsonNode.  This uses a schema that permits arbitrary JSON data.  Would this be useful to you?  If so, we could provide it as a tool.&lt;/p&gt;</comment>
                            <comment id="12918322" author="rbodkin" created="Tue, 5 Oct 2010 23:34:46 +0000"  >&lt;p&gt;The use case I&apos;m most interested in supporting is converting from JSON data to a previously-defined Avro schema, either in a batch file conversion, or in memory (for use with map-reduce). &lt;/p&gt;

&lt;p&gt;This newer patch emits the output in a standard, different schema and conversion to a previously-defined (custom) schema seems to be a problem that would require code like I wrote in my patch. Also, it&apos;d be nice to be able to read in a value like &quot;1&quot; even to a double or a long field, even though it&apos;d be parsed as a JSON integer node.&lt;/p&gt;

&lt;p&gt;Also I have found it valuable to have transformation of names that have invalid characters since there&apos;s lots of valid JSON with identifiers that don&apos;t conform to the Avro identifier grammar. That would be pretty easy to put in this patch (although the regexp I used before was way too slow so I have a newer version that&apos;s efficient).&lt;/p&gt;

&lt;p&gt;To allow reading in JSON text and creating objects in memory that conform to that schema, I think it&apos;d be necessary to have hints for the type of data that arrays contain (e.g., in generated code or in runtime annotations if using a reflective style). That is something that I already ran into in trying to get the reflection reader to work with specific data (on &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-669&quot; title=&quot;Avro Mapreduce Doesn&amp;#39;t Work With Reflect Schemas&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-669&quot;&gt;&lt;del&gt;AVRO-669&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="12918338" author="cutting" created="Tue, 5 Oct 2010 23:57:50 +0000"  >&lt;p&gt;I am not convinced that the tool you need is a general-purpose tool that others will use or whether it might be better to keep this in your application.  Avro&apos;s existing JSON encoding is primarily a tool for debugging.  Tools that can losslessly import and export JSON data into and out of Avro might also be generally useful.  A tool that adapts JSON data to pre-existing schemas could be generally useful if it permitted enough control of how the adaptation is done, but might also be rather application-specific.  What do you think?&lt;/p&gt;</comment>
                            <comment id="12918341" author="philip" created="Wed, 6 Oct 2010 00:00:44 +0000"  >&lt;p&gt;I like the idea of having tools that manipulate &quot;traditional&quot; data formats into avro records, including guessing at the schema.  CSV and TSV and one-json-per-line are obvious candidates here.&lt;/p&gt;</comment>
                            <comment id="12918348" author="cutting" created="Wed, 6 Oct 2010 00:19:13 +0000"  >&lt;p&gt;&amp;gt; I like the idea of having tools that manipulate &quot;traditional&quot; data formats into avro records, including guessing at the schema.&lt;/p&gt;

&lt;p&gt;Do you think Ron&apos;s patch here is a good example of this that we should commit?&lt;/p&gt;

&lt;p&gt;I worry that such tools might do 90% of what each application wants and require constant tweaking.  And each tweak might break other users.  So a tool has to either have lots of flexibility or be lossless.  But perhaps I&apos;m just paranoid...&lt;/p&gt;</comment>
                            <comment id="13196400" author="lshabbot" created="Mon, 30 Jan 2012 20:37:14 +0000"  >&lt;p&gt;I see that this feature is unscheduled.  What Phillip mentioned above is a feature that we are looking for, with respect to avro.  I am just curious if this feature will be part of the avro tool set and if so, do you all have a good idea when this feature maybe targeted for??&lt;/p&gt;</comment>
                            <comment id="13210586" author="cutting" created="Fri, 17 Feb 2012 21:36:48 +0000"  >&lt;p&gt;Leith, is the tool that Ron provided here the one you need?  If so, then we can probably resuscitate this patch and get it committed.  If not, is there a specific tool you need (e.g., CSV or TSV)?  Thanks!&lt;/p&gt;</comment>
                            <comment id="14599230" author="ericsodt" created="Wed, 24 Jun 2015 10:41:44 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;&lt;br/&gt;
I believe this would be very useful.  Reading and validating json that is provided by a secondary source is very much desired by many user communities.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12456440" name="AVRO-672.patch" size="9145" author="cutting" created="Tue, 5 Oct 2010 22:07:03 +0000"/>
                            <attachment id="12455097" name="AVRO-672.patch" size="18833" author="rbodkin" created="Mon, 20 Sep 2010 23:41:44 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 5 Oct 2010 22:07:03 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94959</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 30 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1rr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80049</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>
