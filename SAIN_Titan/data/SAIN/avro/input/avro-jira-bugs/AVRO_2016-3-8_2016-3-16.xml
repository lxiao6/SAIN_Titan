<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:23:09 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2016-3-8+AND+created+%3C%3D+2016-3-16+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="5" total="5"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1807] NullPointerException from Json.ObjectWriter</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1807</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;/* I posted this bug already to the dev-mailinglist &lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt;. Reporting it here again only to make sure it doesn&apos;t get lost and because this is the right place. */&lt;/p&gt;

&lt;p&gt;The complete, slightly more involved code is on &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, especially &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;, the JSON schema is at &lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt;, but the relevant parts of the code follow below.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;// parsing the schema
&lt;/span&gt;Schema.Parser parser = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser();
Schema schema = parser.parse(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;code-quote&quot;&gt;&quot;schema.avsc&quot;&lt;/span&gt;)) ;
&lt;span class=&quot;code-comment&quot;&gt;// setting up the encoder and driver
&lt;/span&gt;Json.ObjectWriter jsonDatumWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Json.ObjectWriter();
OutputStream output = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; FileOutputStream(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;code-quote&quot;&gt;&quot;output.json&quot;&lt;/span&gt;));
Encoder encoder = EncoderFactory.get().jsonEncoder(schema, output, pretty);
&lt;span class=&quot;code-comment&quot;&gt;// writing
&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(payload); &lt;span class=&quot;code-comment&quot;&gt;// reassuring test the payload is intact
&lt;/span&gt;jsonDatumWriter.write(payload, encoder);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The console will print out a nice JSON string (the payload), followed by the following exception:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Exception in thread &lt;span class=&quot;code-quote&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.NullPointerException
at org.apache.avro.data.Json.write(Json.java:183)
at org.apache.avro.data.Json.writeObject(Json.java:272)
at org.apache.avro.data.Json.access$000(Json.java:48)
at org.apache.avro.data.Json$ObjectWriter.write(Json.java:122)
at converTor.WriterObject.append(WriterObject.java:59)
at converTor.ConverTor.main(ConverTor.java:251)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:606)
at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My beginners guess is that the source of the problem is a call of asToken() in org.codehaus.jackson.JsonNode, which is abstract.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/avro/?selectedTab=com.atlassian.jira.jira-projects-plugin:summary-panel&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/avro/?selectedTab=com.atlassian.jira.jira-projects-plugin:summary-panel&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://github.com/tomlurge/converTor&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tomlurge/converTor&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://github.com/tomlurge/converTor/blob/master/src/converTor/WriterObject.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tomlurge/converTor/blob/master/src/converTor/WriterObject.java&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://github.com/tomlurge/converTor/blob/master/src/converTor/avro/schemata/Torperf.avsc&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tomlurge/converTor/blob/master/src/converTor/avro/schemata/Torperf.avsc&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://mail-archives.apache.org/mod_mbox/avro-dev/201603.mbox/ajax/%3C828828B1-8A58-4050-81B4-C3EF0F26041B%40rat.io%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://mail-archives.apache.org/mod_mbox/avro-dev/201603.mbox/ajax/%3C828828B1-8A58-4050-81B4-C3EF0F26041B%40rat.io%3E&lt;/a&gt;&lt;/p&gt;</description>
                <environment>&lt;p&gt;avro 1.8.0  &lt;br/&gt;
jackson-core-asl 1.9.13  &lt;br/&gt;
jackson-mapper-asl 1.9.13  &lt;br/&gt;
Java 7  &lt;br/&gt;
Mac OS X 10.11.3&lt;/p&gt;</environment>
        <key id="12948056">AVRO-1807</key>
            <summary>NullPointerException from Json.ObjectWriter</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.svg">Blocker</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rdblue">Ryan Blue</assignee>
                                    <reporter username="thms">Thomas L&#246;rtsch</reporter>
                        <labels>
                    </labels>
                <created>Tue, 8 Mar 2016 15:59:26 +0000</created>
                <updated>Sat, 14 May 2016 20:47:15 +0000</updated>
                            <resolved>Sat, 14 May 2016 20:47:15 +0000</resolved>
                                    <version>1.8.0</version>
                                    <fixVersion>1.8.1</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="15251756" author="thms" created="Thu, 21 Apr 2016 11:44:19 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1833&quot; title=&quot;Release 1.8.1&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1833&quot;&gt;&lt;del&gt;AVRO-1833&lt;/del&gt;&lt;/a&gt; says &quot;Please link issues that should be included in the 1.8.1 release as blockers of this issue.&quot; I don&apos;t know how to &quot;link&quot; an issue - so I added &quot;blocker&quot; and &quot;1.8.1&quot; to this issue. I hope that&apos;s not annoying or otherwise just wrong. Please correct if necessary.&lt;/p&gt;</comment>
                            <comment id="15252217" author="rdblue" created="Thu, 21 Apr 2016 17:10:52 +0000"  >&lt;p&gt;Linking is under the &quot;More&quot; drop-down menu. Thanks for pointing this out and filing a bug for it.&lt;/p&gt;</comment>
                            <comment id="15275869" author="rdblue" created="Mon, 9 May 2016 02:24:28 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=thms&quot; class=&quot;user-hover&quot; rel=&quot;thms&quot;&gt;Thomas L&#246;rtsch&lt;/a&gt;, from looking at that stack trace, it looks like the object you passed in, payload, is generating a null json object. The trace is pretty straight-forward: the object you pass in is handed to JacksonUtils.toJsonNode, which succeeds. Then the value returned by that method is passed to Json.write and immediately throws the NPE because it is null when asToken is called on it on line 183. That means the result of toJsonNode must be null.&lt;/p&gt;

&lt;p&gt;That would happen in two cases. First, the object you passed could be null, but that is unlikely because of your print statement. The second case is where Avro doesn&apos;t recognize the object you passed in. The code for &lt;a href=&quot;https://github.com/apache/avro/blob/master/lang/java/avro/src/main/java/org/apache/avro/util/internal/JacksonUtils.java#L57-86&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;toJson&lt;/a&gt; is a series of if clauses for supported classes, like Map or Integer, with no final else to catch unmatched objects. I think the problem is that you&apos;re passing in a specific object, which isn&apos;t supported here. I think you want to be using the SpecificDatumWriter for specific objects with the JsonEncoder, rather than the ObjectWriter.&lt;/p&gt;

&lt;p&gt;I think this does expose a minor bug in Avro, which is that this method silently returns null when the object isn&apos;t recognized. If this happened to a nested field that allowed null, it looks like it would silently ignore the field. I&apos;ll add an else clause that throws an exception in that case.&lt;/p&gt;</comment>
                            <comment id="15280735" author="rdblue" created="Wed, 11 May 2016 20:11:53 +0000"  >&lt;p&gt;Since this is a really small change, I&apos;ll commit it to unblock the 1.8.1 release in the next day or so unless anyone disagrees. Thanks!&lt;/p&gt;</comment>
                            <comment id="15281283" author="thms" created="Thu, 12 May 2016 07:31:40 +0000"  >&lt;p&gt;Hi, &lt;/p&gt;

&lt;p&gt;I&apos;m on vacation and though I do read mail I can&apos;t log into my JIRA account or even test the patch. But please don&apos;t let it block the 1.8.1 release! &lt;/p&gt;

&lt;p&gt;Thanks for looking into this and for your detailed response in addition to the patch! &lt;/p&gt;

&lt;p&gt;Regards&lt;br/&gt;
Thomas L&#246;rtsch &lt;/p&gt;



</comment>
                            <comment id="15283668" author="rdblue" created="Sat, 14 May 2016 20:47:04 +0000"  >&lt;p&gt;I merged the patch to give a better warning rather than silently dropping data. I&apos;m also going to close this issue because I think the problem was not using the regular DatumWriter. Please reopen if you think that&apos;s wrong. Thanks!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12960588">AVRO-1833</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12802910" name="AVRO-1807.1.patch" size="1036" author="rdblue" created="Mon, 9 May 2016 02:27:34 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 21 Apr 2016 17:10:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 36 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2ucbr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1808] It would be useful to be able to change lock mechanics for handshake at Requestor </title>
                <link>https://issues.apache.org/jira/browse/AVRO-1808</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;For now there is no option to change lock mechanics for handshake at org.apache.avro.ipc.Requestor - it uses ReentrantLock. We can&apos;t use this type of lock in our system, so we need some way to override it, like the way you have already done for org.apache.avro.ipc.Transceiver.channelLock.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12948819">AVRO-1808</key>
            <summary>It would be useful to be able to change lock mechanics for handshake at Requestor </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="DrVirtual">Konstantin Usachev</assignee>
                                    <reporter username="DrVirtual">Konstantin Usachev</reporter>
                        <labels>
                    </labels>
                <created>Thu, 10 Mar 2016 15:05:30 +0000</created>
                <updated>Wed, 7 Nov 2018 22:22:19 +0000</updated>
                            <resolved>Wed, 7 Nov 2018 22:22:19 +0000</resolved>
                                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="15189403" author="githubbot" created="Thu, 10 Mar 2016 15:11:15 +0000"  >&lt;p&gt;GitHub user DrVirtual opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/75&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/75&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1808&quot; title=&quot;It would be useful to be able to change lock mechanics for handshake at Requestor &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1808&quot;&gt;&lt;del&gt;AVRO-1808&lt;/del&gt;&lt;/a&gt;. Added possibility of overriding lock mechanics for Requestor.handshakeLock&lt;/p&gt;

&lt;p&gt;    Look at &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1808&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1808&lt;/a&gt; for more information&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/DrVirtual/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/DrVirtual/avro&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1808&quot; title=&quot;It would be useful to be able to change lock mechanics for handshake at Requestor &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1808&quot;&gt;&lt;del&gt;AVRO-1808&lt;/del&gt;&lt;/a&gt;-Requestor-handshake-lock&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/75.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/75.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #75&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit cf3ea721b6e47eec7ec6284a31bb057c9858e8c6&lt;br/&gt;
Author: k.usachev &amp;lt;k.usachev@corp.mail.ru&amp;gt;&lt;br/&gt;
Date:   2016-03-10T15:08:32Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1808&quot; title=&quot;It would be useful to be able to change lock mechanics for handshake at Requestor &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1808&quot;&gt;&lt;del&gt;AVRO-1808&lt;/del&gt;&lt;/a&gt;. Added possibility of overriding lock mechanics for Requestor.handshakeLock&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="16678332" author="githubbot" created="Wed, 7 Nov 2018 14:52:49 +0000"  >&lt;p&gt;Fokko commented on issue #75: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1808&quot; title=&quot;It would be useful to be able to change lock mechanics for handshake at Requestor &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1808&quot;&gt;&lt;del&gt;AVRO-1808&lt;/del&gt;&lt;/a&gt;. Added possibility of overriding lock mechanics for Requestor.handshakeLock&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/75#issuecomment-436649030&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/75#issuecomment-436649030&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @KonstantinUsachev Do you know if this is still relevant?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16678423" author="githubbot" created="Wed, 7 Nov 2018 15:51:06 +0000"  >&lt;p&gt;KonstantinUsachev commented on issue #75: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1808&quot; title=&quot;It would be useful to be able to change lock mechanics for handshake at Requestor &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1808&quot;&gt;&lt;del&gt;AVRO-1808&lt;/del&gt;&lt;/a&gt;. Added possibility of overriding lock mechanics for Requestor.handshakeLock&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/75#issuecomment-436670848&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/75#issuecomment-436670848&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   &amp;gt; @KonstantinUsachev Do you know if this is still relevant?&lt;/p&gt;

&lt;p&gt;   @Fokko Hi. In our case it was necessary, because we used Avro with Quasar framework where it is forbidden to use ReentrantLock (it blocks thread instead of fiber). Don&apos;t know, what is the current situation, because we finished our work with that project. So I don&apos;t need it anymore personally and, actually, don&apos;t quite like this PR now &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; because in this case we have unused handshakeLock field. But I will not give any better, so feel free to reject it.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16678874" author="githubbot" created="Wed, 7 Nov 2018 22:21:47 +0000"  >&lt;p&gt;Fokko commented on issue #75: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1808&quot; title=&quot;It would be useful to be able to change lock mechanics for handshake at Requestor &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1808&quot;&gt;&lt;del&gt;AVRO-1808&lt;/del&gt;&lt;/a&gt;. Added possibility of overriding lock mechanics for Requestor.handshakeLock&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/75#issuecomment-436799398&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/75#issuecomment-436799398&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @KonstantinUsachev Thanks for the elaborate answer. Let&apos;s close this for now then. Thanks!&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16678875" author="githubbot" created="Wed, 7 Nov 2018 22:21:47 +0000"  >&lt;p&gt;Fokko closed pull request #75: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1808&quot; title=&quot;It would be useful to be able to change lock mechanics for handshake at Requestor &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1808&quot;&gt;&lt;del&gt;AVRO-1808&lt;/del&gt;&lt;/a&gt;. Added possibility of overriding lock mechanics for Requestor.handshakeLock&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/75&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/75&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/ipc/src/main/java/org/apache/avro/ipc/Requestor.java b/lang/java/ipc/src/main/java/org/apache/avro/ipc/Requestor.java&lt;br/&gt;
index 53799451d..225a916ed 100644&lt;br/&gt;
&amp;#8212; a/lang/java/ipc/src/main/java/org/apache/avro/ipc/Requestor.java&lt;br/&gt;
+++ b/lang/java/ipc/src/main/java/org/apache/avro/ipc/Requestor.java&lt;br/&gt;
@@ -128,7 +128,16 @@ public Object request(String messageName, Object request)&lt;br/&gt;
     throws Exception &lt;/p&gt;
{
     request(new Request(messageName, request, new RPCContext()), callback);
   }
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;p&gt;+&lt;br/&gt;
+  protected void lockHandshake() &lt;/p&gt;
{
+    handshakeLock.lock();
+  }
&lt;p&gt;+&lt;br/&gt;
+  protected void unlockHandshake() &lt;/p&gt;
{
+    if (handshakeLock.isHeldByCurrentThread())
+      handshakeLock.unlock();
+  }
&lt;p&gt;+&lt;br/&gt;
   /** Writes a request message and returns the result through a Callback. */&lt;br/&gt;
   &amp;lt;T&amp;gt; void request(Request request, Callback&amp;lt;T&amp;gt; callback)&lt;br/&gt;
     throws Exception {&lt;br/&gt;
@@ -136,12 +145,12 @@ public Object request(String messageName, Object request)&lt;br/&gt;
     if (!t.isConnected()) {&lt;br/&gt;
       // Acquire handshake lock so that only one thread is performing the&lt;br/&gt;
       // handshake and other threads block until the handshake is completed&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;handshakeLock.lock();&lt;br/&gt;
+      lockHandshake();&lt;br/&gt;
       try 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {         if (t.isConnected()) {
           // Another thread already completed the handshake; no need to hold
           // the write lock
-          handshakeLock.unlock();
+          unlockHandshake();
         } else {
           CallFuture&amp;lt;T&amp;gt; callFuture = new CallFuture&amp;lt;T&amp;gt;(callback);
           t.transceive(request.getBytes(),
@@ -161,9 +170,7 @@ public Object request(String messageName, Object request)
           return;
         }       }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt; finally{&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;if (handshakeLock.isHeldByCurrentThread()) 
{
-          handshakeLock.unlock();
-        }
&lt;p&gt;+        unlockHandshake();&lt;br/&gt;
       }&lt;br/&gt;
     }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@@ -272,7 +279,7 @@ public Protocol getRemote() throws IOException &lt;/p&gt;
{
       remote = REMOTE_PROTOCOLS.get(remoteHash);
       if (remote != null) return remote;            // already cached
     }
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;handshakeLock.lock();&lt;br/&gt;
+    lockHandshake();&lt;br/&gt;
     try 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {       // force handshake       ByteBufferOutputStream bbo = new ByteBufferOutputStream();@@ -289,7 +296,7 @@ public Protocol getRemote() throws IOException {
       readHandshake(in);
       return this.remote;
     } finally {
-      handshakeLock.unlock();
+      unlockHandshake();
     }   }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;






&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 10 Mar 2016 15:11:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            10 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2uh1b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1809] I wish to remove optimization from GenericDatumReader.getResolver</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1809</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;There is an optimization at org.apache.avro.generic.GenericDatumReader.getResolver, when we cache creator thread and it&apos;s first returned value. At first, It looks redundant, because it saves three calls to Map.get, which is unmeasurable, especially after Schema&apos;s hashcode calculation optimization, made by the same author &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, it&apos;s not obvious and adds additional complexity. Also caching of current thread whould be a source of bugs in case of different green threads libraries integration (which, actually, occurred during integration with Quasar).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12948838">AVRO-1809</key>
            <summary>I wish to remove optimization from GenericDatumReader.getResolver</summary>
                <type id="5" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Wish</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="DrVirtual">Konstantin Usachev</reporter>
                        <labels>
                    </labels>
                <created>Thu, 10 Mar 2016 16:15:17 +0000</created>
                <updated>Sat, 2 Apr 2016 09:13:54 +0000</updated>
                            <resolved>Sat, 2 Apr 2016 09:13:42 +0000</resolved>
                                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="15189529" author="githubbot" created="Thu, 10 Mar 2016 16:53:06 +0000"  >&lt;p&gt;GitHub user DrVirtual opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/76&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/76&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1809&quot; title=&quot;I wish to remove optimization from GenericDatumReader.getResolver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1809&quot;&gt;&lt;del&gt;AVRO-1809&lt;/del&gt;&lt;/a&gt; Removed creator&apos;s thread caching from GenericDatumReader.getResolver&lt;/p&gt;

&lt;p&gt;    For more explanation please read &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1809&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1809&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/DrVirtual/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/DrVirtual/avro&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1809&quot; title=&quot;I wish to remove optimization from GenericDatumReader.getResolver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1809&quot;&gt;&lt;del&gt;AVRO-1809&lt;/del&gt;&lt;/a&gt;-Removed-redundant-GenericDatumReader.getResolver-optimization&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/76.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/76.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #76&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit 54efba3b7be9408337479477a83fcf7d4260ac20&lt;br/&gt;
Author: k.usachev &amp;lt;k.usachev@corp.mail.ru&amp;gt;&lt;br/&gt;
Date:   2016-03-10T16:19:00Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1809&quot; title=&quot;I wish to remove optimization from GenericDatumReader.getResolver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1809&quot;&gt;&lt;del&gt;AVRO-1809&lt;/del&gt;&lt;/a&gt; Removed creator&apos;s thread caching from GenericDatumReader.getResolver&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="15189629" author="cutting" created="Thu, 10 Mar 2016 17:53:21 +0000"  >&lt;p&gt;Can you please benchmark this change, ideally including its impact on multithreaded performance?&lt;/p&gt;

&lt;p&gt;Generally, each past performance optimization was only made only after demonstrating measurable improvement.  For single-threaded performance, this is usually with Perf.java.  There aren&apos;t yet standard benchmarks for multi-threaded performance.&lt;/p&gt;

&lt;p&gt;The changes that led to the current implementation are primarily discussed in the following issues:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-743&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-743&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-557&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-557&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15190896" author="drvirtual" created="Fri, 11 Mar 2016 13:07:47 +0000"  >&lt;p&gt;Thank you for your answer. I&apos;ve benchmarked it, and, surprisingly for me, this optimization has quite measurable affect. I&apos;ve tried to optimize it in some other way, but, unfortunetly, failed, except some performance boost we can get, making org.apache.avro.util.WeakIdentityHashMap#reap not synchronized, because, actually, this map isn&apos;t thread safe, regardless this method synchronization. So, my results are:&lt;/p&gt;

&lt;p&gt;Without optimization:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;
                                  test name     time    M entries/sec   M bytes/sec  bytes/cycle
                               GenericRead:   3268 ms       5,099       197,903        808498
                              GenericWrite:   1679 ms       9,925       385,167        808498
                        GenericStringsRead:   4483 ms       3,717       396,236       2220873
                       GenericStringsWrite:   5609 ms       2,971       316,756       2220873
                        GenericNested_Read:   5086 ms       3,277       127,162        808498
                       GenericNested_Write:   2711 ms       6,146       238,515        808498
                    GenericNestedFake_Read:   1852 ms       8,995       349,092        808498
                   GenericNestedFake_Write:    970 ms      17,164       666,121        808498
                   GenericWithDefault_Read:   5923 ms       2,814       109,191        808498
                GenericWithOutOfOrder_Read:   3297 ms       5,054       196,120        808498
                 GenericWithPromotion_Read:   3625 ms       4,597       178,408        808498
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without optimization and not synchronized method:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                                  test name     time    M entries/sec   M bytes/sec  bytes/cycle
                               GenericRead:   2643 ms       6,305       244,702        808498
                              GenericWrite:   1675 ms       9,946       385,992        808498
                        GenericStringsRead:   3892 ms       4,282       456,431       2220873
                       GenericStringsWrite:   5498 ms       3,031       323,117       2220873
                        GenericNested_Read:   4495 ms       3,708       143,890        808498
                       GenericNested_Write:   2734 ms       6,096       236,570        808498
                    GenericNestedFake_Read:   1847 ms       9,021       350,087        808498
                   GenericNestedFake_Write:    974 ms      17,111       664,057        808498
                   GenericWithDefault_Read:   5218 ms       3,193       123,934        808498
                GenericWithOutOfOrder_Read:   2680 ms       6,217       241,265        808498
                 GenericWithPromotion_Read:   2931 ms       5,686       220,659        808498
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With optimization:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                                  test name     time    M entries/sec   M bytes/sec  bytes/cycle
                               GenericRead:   2310 ms       7,212       279,888        808498
                              GenericWrite:   1551 ms      10,741       416,837        808498
                        GenericStringsRead:   3537 ms       4,712       502,264       2220873
                       GenericStringsWrite:   5595 ms       2,978       317,512       2220873
                        GenericNested_Read:   4453 ms       3,742       145,218        808498
                       GenericNested_Write:   2622 ms       6,354       246,606        808498
                    GenericNestedFake_Read:   1853 ms       8,992       348,948        808498
                   GenericNestedFake_Write:    980 ms      16,989       659,328        808498
                   GenericWithDefault_Read:   4571 ms       3,645       141,472        808498
                GenericWithOutOfOrder_Read:   2266 ms       7,352       285,313        808498
                 GenericWithPromotion_Read:   2673 ms       6,233       241,911        808498
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, I suppose, you are not gonna accept this PR. The problem we&apos;ve encountered with Qusar integration is because it makes thread local values not thread but fiber local, so values might migrate between threads after fibers. So because of this optimization we might return the same resolver in different threads. At first I&apos;ve made helper to erase this field through reflection, but such solution isn&apos;t good enough. May be you have any ideas? &lt;/p&gt;</comment>
                            <comment id="15222808" author="drvirtual" created="Sat, 2 Apr 2016 09:13:42 +0000"  >&lt;p&gt;We workarounded our problem by cleaning with reflection shared reader&apos;s creator thread. It&apos;s a hack, but I couldn&apos;t make up any suitable patch to keep this optimization and resolve our problem at the same time. So, I&apos;m closing this issue and PR on github. But I&apos;d like you accept our other patch and PR &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1808&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1808&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15222809" author="githubbot" created="Sat, 2 Apr 2016 09:13:54 +0000"  >&lt;p&gt;Github user DrVirtual closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/76&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/76&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 10 Mar 2016 16:53:06 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 42 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2uh5j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1810] GenericDatumWriter broken with Enum</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1810</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;div class=&quot;panel&quot; style=&quot;background-color: #DDD;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelHeader&quot; style=&quot;border-bottom-width: 1px;background-color: #3FA;&quot;&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;panelContent&quot; style=&quot;background-color: #DDD;&quot;&gt;
&lt;p&gt;Using the GenericDatumWriter with either Generic OR SpecificRecord will break if an Enum is present.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;panel&quot; style=&quot;background-color: #DDD;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelHeader&quot; style=&quot;border-bottom-width: 1px;background-color: #8DB;&quot;&gt;&lt;b&gt;Steps To Reproduce&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;panelContent&quot; style=&quot;background-color: #DDD;&quot;&gt;
&lt;p&gt;I have been tracking Avro decoding oddities for a while.&lt;br/&gt;
The tests for this issue can be found &lt;a href=&quot;https://github.com/ryonday/avroDecodingHelp/blob/master/src/test/java/com/ryonday/test/Avro180EnumFail.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;panel&quot; style=&quot;background-color: #DDD;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelHeader&quot; style=&quot;border-bottom-width: 1px;background-color: #3AF;&quot;&gt;&lt;b&gt;Notes&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;panelContent&quot; style=&quot;background-color: #DDD;&quot;&gt;
&lt;p&gt;Due to the debacle that is the Avro &quot;UTF8&quot; object, we have been avoiding it by using the following scheme:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Write incoming records to a byte array using the GenericDatumWriter&lt;/li&gt;
	&lt;li&gt;Read back the byte array to our compiled Java domain objects using a SpecificDatumWriter&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This worked great with Avro 1.7.7, and this is a binary-incompatable breaking change with 1.8.0.&lt;/p&gt;

&lt;p&gt;This would appear to be caused by an addition in the &lt;tt&gt;GenericDatumWriter:163-164&lt;/tt&gt;:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!data.isEnum(datum))
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AvroTypeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Not an &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;: &quot;&lt;/span&gt;+datum);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12948882">AVRO-1810</key>
            <summary>GenericDatumWriter broken with Enum</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.svg">Blocker</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="ryonday">Ryon Day</reporter>
                        <labels>
                    </labels>
                <created>Thu, 10 Mar 2016 19:05:08 +0000</created>
                <updated>Wed, 12 Dec 2018 14:21:19 +0000</updated>
                                            <version>1.8.0</version>
                                    <fixVersion>1.9.0</fixVersion>
                    <fixVersion>1.8.4</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>5</votes>
                                    <watches>16</watches>
                                                                <comments>
                            <comment id="15189944" author="busbey" created="Thu, 10 Mar 2016 21:09:38 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Due to the debacle that is the Avro &quot;UTF8&quot; object, we have been avoiding it by using the following scheme:&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I am curious to hear what the debacle is, perhaps you could send a description to user@avro or dev@avro?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This worked great with Avro 1.7.7, and this is a binary-incompatable breaking change with 1.8.0.&lt;br/&gt;
This would appear to be caused by an addition in the GenericDatumWriter:163-164:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!data.isEnum(datum))
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AvroTypeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Not an &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;: &quot;&lt;/span&gt;+datum);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;This was the breaking change documented in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-997&quot; title=&quot;Generic API should require GenericEnumSymbol when writing Avro Enums&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-997&quot;&gt;&lt;del&gt;AVRO-997&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The example in &lt;tt&gt;genericDatumWriter_andSpecificDatumWriter_failForGenericRecord_populatedWithTextualEnum&lt;/tt&gt; is using Strings for enum types. Those should be GenericEnumSymbol, as documented in the &lt;a href=&quot;http://avro.apache.org/docs/1.8.0/api/java/org/apache/avro/generic/package-summary.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;javadocs for type mapping&lt;/a&gt; and the release notes for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-997&quot; title=&quot;Generic API should require GenericEnumSymbol when writing Avro Enums&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-997&quot;&gt;&lt;del&gt;AVRO-997&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The other two examples are based on what look like generated specific classes from &lt;a href=&quot;https://github.com/ryonday/avroDecodingHelp/tree/master/src/main/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;the schemas in your test project&lt;/a&gt;, is that right?&lt;/p&gt;

&lt;p&gt;If I build the test project at the top level is it straight forward to examine hte generated classes?&lt;/p&gt;</comment>
                            <comment id="15190041" author="ryonday" created="Thu, 10 Mar 2016 22:03:56 +0000"  >&lt;p&gt;Thanks for the quick response!&lt;/p&gt;

&lt;p&gt;Yes, doing a &lt;tt&gt;gradle build&lt;/tt&gt; at the top level (assuming you use Gradle...) should result in the domain objects being built and output in the &lt;tt&gt;build/generated-main-avro-java&lt;/tt&gt; directory. &lt;/p&gt;

&lt;p&gt;With respect to &lt;tt&gt;UTF8&lt;/tt&gt; vs &lt;tt&gt;String&lt;/tt&gt;, I regret my incendiary language there; it is just one of those things we have had to work around after a lot of {{ClassCastException}}s. &lt;/p&gt;

&lt;p&gt;We generate our domain objects using &lt;tt&gt;String&lt;/tt&gt; and therefore interoperability with teams who don&apos;t do so is terrible (I am working on defining additional test cases that show that &lt;tt&gt;GenericData.deepCopy()&lt;/tt&gt; and &lt;tt&gt;SpecificData.deepCopy()&lt;/tt&gt; do not work in many cases, ending up something like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;java.lang.ClassCastException: org.apache.avro.util.Utf8 cannot be &lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt; to java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;
	at our.&lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt;.domainObject.put(domainObject.java:151)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericData.setField(GenericData.java:573)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericData.setField(GenericData.java:590)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericData.deepCopy(GenericData.java:972)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="15190164" author="busbey" created="Thu, 10 Mar 2016 23:23:25 +0000"  >&lt;p&gt;This looks like an impedance mismatch between the Generic and Specific APIs. The Specific API generates bare java enums for avro enum types, while the Generic API now requires GenericEnumSymbol. (technically the switch to GenericEnumSymbol happened in 1.4.0, but enforcement has been inconsistent.)&lt;/p&gt;

&lt;p&gt;Short term, the &lt;tt&gt;genericDatumWriter_failsForGenericRecord_populatedWithRawEnum&lt;/tt&gt; test can be fixed similar to the string one by wrapping things in GenericData.EnumSymbol.&lt;/p&gt;

&lt;p&gt;It looks like the root cause for your helper utility is that SpecificRecordBase claims to implement GenericRecord, but then returns the raw java enums for the two avro enum fields rather than the correct o.a.avro.generic type.&lt;/p&gt;</comment>
                            <comment id="15504015" author="sircodesalot" created="Mon, 19 Sep 2016 17:04:17 +0000"  >&lt;p&gt;Sup Sean, getting burned by this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;org.apache.avro.AvroTypeException: Not an &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;: UNIT
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.writeEnum(GenericDatumWriter.java:164)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.writeWithoutConversion(GenericDatumWriter.java:106)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.write(GenericDatumWriter.java:73)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.writeField(GenericDatumWriter.java:153)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.writeRecord(GenericDatumWriter.java:143)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.writeWithoutConversion(GenericDatumWriter.java:105)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.write(GenericDatumWriter.java:73)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.writeField(GenericDatumWriter.java:153)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.writeRecord(GenericDatumWriter.java:143)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.writeWithoutConversion(GenericDatumWriter.java:105)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.write(GenericDatumWriter.java:73)
	at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter.write(GenericDatumWriter.java:60)
	at org.apache.avro.file.DataFileWriter.append(DataFileWriter.java:302)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks like enums have to subclass &lt;a href=&quot;https://github.com/apache/avro/blob/master/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java#L800&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;GenericEnumSymbol&lt;/a&gt;. Fair enough. But, it looks like the class auto-generation tools that we&apos;re using are not putting that into the schema. We&apos;re using:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;                 &amp;lt;plugin&amp;gt;
  &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;avro-maven-plugin&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;${avro.version}&amp;lt;/version&amp;gt;
  &amp;lt;executions&amp;gt;
    &amp;lt;execution&amp;gt;
      &amp;lt;phase&amp;gt;generate-sources&amp;lt;/phase&amp;gt;
      &amp;lt;goals&amp;gt;
        &amp;lt;goal&amp;gt;schema&amp;lt;/goal&amp;gt;
        &amp;lt;goal&amp;gt;protocol&amp;lt;/goal&amp;gt;
        &amp;lt;goal&amp;gt;idl-protocol&amp;lt;/goal&amp;gt;
      &amp;lt;/goals&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;fieldVisibility&amp;gt;PRIVATE&amp;lt;/fieldVisibility&amp;gt;
      &amp;lt;/configuration&amp;gt;
    &amp;lt;/execution&amp;gt;
  &amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But it generates:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;@org.apache.avro.specific.AvroGenerated
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; EntityType { &lt;span class=&quot;code-comment&quot;&gt;// LOOK MA, NO INTERFACE
&lt;/span&gt;  LISTING, UNIT  ;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; org.apache.avro.Schema SCHEMA$ = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; org.apache.avro.Schema.Parser().parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;EntityType\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;namespace\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;com.homeaway.commons.logging.events.lm\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;symbols\&lt;span class=&quot;code-quote&quot;&gt;&quot;:[\&quot;&lt;/span&gt;LISTING\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;UNIT\&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; org.apache.avro.Schema getClassSchema() { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; SCHEMA$; }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For now, rolling back to &lt;tt&gt;1.7.7&lt;/tt&gt;, but that does seem brokenish.&lt;/p&gt;</comment>
                            <comment id="15504036" author="busbey" created="Mon, 19 Sep 2016 17:13:26 +0000"  >&lt;p&gt;That does seem broken. Could you share a code snippet that results in the stacktrace?&lt;/p&gt;</comment>
                            <comment id="15573691" author="zolyfarkas" created="Fri, 14 Oct 2016 00:44:11 +0000"  >&lt;p&gt;I hit this issue when serializing a SpecificRecord (generated from idl) with a GenericDatumWriter.&lt;/p&gt;

&lt;p&gt;Everything works fine when serializing withe SpecificDatumWriter, but since all generated avro records implement GenericRecord I don&apos;t see why they should not be serializable with a GenericDatumWriter...&lt;/p&gt;

&lt;p&gt;I see 2 ways to fix this:&lt;/p&gt;

&lt;p&gt;1) make GenericDatumWriter handle java enums.&lt;br/&gt;
2) make the generated enums (like Reuben suggested) implement GenericEnumSymbol.&lt;/p&gt;

&lt;p&gt;I used approach 1 to fix my fork.&lt;/p&gt;

&lt;p&gt;I am not sure the separation between GenericRecord and SpecificRecords reader/writers is ideal...&lt;/p&gt;

&lt;p&gt;For example I wrote some utilities to on the fly generate Generic Data like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zolyfarkas/spf4j/blob/master/spf4j-avro/src/main/java/org/spf4j/avro/GenericRecordBuilder.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/zolyfarkas/spf4j/blob/master/spf4j-avro/src/main/java/org/spf4j/avro/GenericRecordBuilder.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;how to use:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zolyfarkas/spf4j/blob/master/spf4j-avro/src/test/java/org/spf4j/avro/GenericRecordBuilderTest.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/zolyfarkas/spf4j/blob/master/spf4j-avro/src/test/java/org/spf4j/avro/GenericRecordBuilderTest.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is still beta quality, but the results are slightly more efficient (10%) GenericRecord implementations. (see JMH benchmark: &lt;a href=&quot;https://github.com/zolyfarkas/spf4j/blob/master/spf4j-benchmarks/src/test/java/org/spf4j/avro/GenericRecordBenchmark.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/zolyfarkas/spf4j/blob/master/spf4j-benchmarks/src/test/java/org/spf4j/avro/GenericRecordBenchmark.java&lt;/a&gt;)&lt;/p&gt;
</comment>
                            <comment id="15654926" author="sjerman" created="Thu, 10 Nov 2016 19:41:35 +0000"  >&lt;p&gt;I&apos;m seeing this as well.... basically SpecificRecords generated by maven plugin in 1.8.1 don&apos;t satisfy contract for GenericRecord wrt enums. Rolling back to 1.7.7 works.&lt;/p&gt;</comment>
                            <comment id="15768250" author="xenoterracide" created="Wed, 21 Dec 2016 21:43:52 +0000"  >&lt;p&gt;Grabbed Spring Platform Athens SR1 which specifies 1.8.1 of Avro, and hibernate search threw this error, downgrading to 1.7.7 works.&lt;/p&gt;</comment>
                            <comment id="16166085" author="pederpansen" created="Thu, 14 Sep 2017 11:03:48 +0000"  >&lt;p&gt;This issue means that the Avro 1.8 release ist practically unusable in conjunction with Kafka Connect, which I think affects quite a lot of users. Any plans on fixing this? &lt;/p&gt;

&lt;p&gt;Any workarounds other than&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;don&apos;t use enums in your schema or&lt;/li&gt;
	&lt;li&gt;downgrade to Avro 1.7.7?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16166299" author="busbey" created="Thu, 14 Sep 2017 13:26:59 +0000"  >&lt;p&gt;Personally I&apos;d love to see this get fixed. I&apos;m happy to review, but almost certainly don&apos;t have the time to post a patch up. If anyone wants to try to work through things please either ping here or ping me off-list and I&apos;ll help get you up and running.&lt;/p&gt;</comment>
                            <comment id="16166377" author="zolyfarkas" created="Thu, 14 Sep 2017 14:36:34 +0000"  >&lt;p&gt;The way I resolved this in my fork was to make the Generated enums implement org.apache.avro.generic.GenericEnumSymbol:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zolyfarkas/avro/blob/trunk/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/enum.vm#L29&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/zolyfarkas/avro/blob/trunk/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/enum.vm#L29&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also changed GenericEnumSymbol from:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;/** An &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; symbol. */&lt;/span&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; GenericEnumSymbol
    &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; GenericContainer, Comparable&amp;lt;GenericEnumSymbol&amp;gt; {
  &lt;span class=&quot;code-comment&quot;&gt;/** Return the symbol. */&lt;/span&gt;
  &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; toString();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;/** An &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; symbol. */&lt;/span&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; GenericEnumSymbol&amp;lt;T &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; GenericEnumSymbol&amp;gt;
    &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; GenericContainer, Comparable&amp;lt;T&amp;gt; {
  &lt;span class=&quot;code-comment&quot;&gt;/** Return the symbol. */&lt;/span&gt;
  &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; toString();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I can prepare a PR if this approach is OK with everyone.&lt;/p&gt;</comment>
                            <comment id="16166383" author="howellbridger" created="Thu, 14 Sep 2017 14:42:51 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zolyfarkas&quot; class=&quot;user-hover&quot; rel=&quot;zolyfarkas&quot;&gt;Zoltan Farkas&lt;/a&gt; Would it be bad to interoperate &lt;tt&gt;GenericData.EnumSymbol&lt;/tt&gt; instances with generated classes in terms of &lt;tt&gt;equals&lt;/tt&gt; and &lt;tt&gt;compareTo&lt;/tt&gt;?&lt;/p&gt;</comment>
                            <comment id="16166749" author="zolyfarkas" created="Thu, 14 Sep 2017 18:11:05 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=howellbridger&quot; class=&quot;user-hover&quot; rel=&quot;howellbridger&quot;&gt;Bridger Howell&lt;/a&gt; &lt;br/&gt;
java.lang.Enum equals, hashCode, compareTo are final and cannot be overloaded... &lt;/p&gt;

&lt;p&gt;So if one would need to compare generated enums with generic enums a custom comparator would be the way...&lt;/p&gt;

&lt;p&gt;what is the use case you are thinking of?&lt;/p&gt;
</comment>
                            <comment id="16166847" author="howellbridger" created="Thu, 14 Sep 2017 19:18:32 +0000"  >&lt;p&gt;No particular use case, I was just looking at the way that &lt;tt&gt;GenericData.EnumSymbol&lt;/tt&gt; supports being compared with any other &lt;tt&gt;GenericEnumSymbol&lt;/tt&gt; and wondering if there was a good reason for that.&lt;/p&gt;

&lt;p&gt;Considering that &lt;tt&gt;equals&lt;/tt&gt; is final for enums, it seems harder to keep that property (although &lt;tt&gt;compareTo&lt;/tt&gt; should be fine because the type signatures for &lt;tt&gt;java.lang.Enum&lt;/tt&gt;&apos;s &lt;tt&gt;compareTo&lt;/tt&gt; only matches the enum type, not &lt;tt&gt;GenericEnumSymbol&lt;/tt&gt;?).&lt;/p&gt;

&lt;p&gt;At least It would be nice to avoid weird cases where the following test fails:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;/* assuming SpecificEnum is generated from enumSchema */
final SpecificEnum specificSymbol = SpecificEnum.FOO;
final GenericData.EnumSymbol genericSymbol = new GenericData.EnumSymbol(enumSchema, &quot;FOO&quot;);

assertTrue(genericSymbol.equals(specificSymbol) == specificSymbol.equals(genericSymbol));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="16463921" author="abellemare" created="Fri, 4 May 2018 14:07:59 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zolyfarkas&quot; class=&quot;user-hover&quot; rel=&quot;zolyfarkas&quot;&gt;Zoltan Farkas&lt;/a&gt; - How has the use of your branch been in the past months? I am interested in having this ticket revived as this is something that I will also be needing to do. Is there anything I could do to help?&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12984530">AVRO-1870</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 10 Mar 2016 21:09:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            37 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2uhfb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1811] SpecificData.deepCopy() cannot be used if schema compiler generated Java objects with Strings instead of UTF8</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1811</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;div class=&quot;panel&quot; style=&quot;background-color: #DDD;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelHeader&quot; style=&quot;border-bottom-width: 1px;background-color: #3FA;&quot;&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;panelContent&quot; style=&quot;background-color: #DDD;&quot;&gt;
&lt;p&gt;When the Avro compiler creates Java objects, you have the option to have them generate fields of type &lt;tt&gt;string&lt;/tt&gt; with the Java standard &lt;tt&gt;String&lt;/tt&gt; type, for wide interoperability with existing Java applications and APIs.&lt;/p&gt;

&lt;p&gt;By default, however, the compiler outputs these fields in the Avro-specific &lt;tt&gt;Utf8&lt;/tt&gt; type, requiring frequent usage of the &lt;tt&gt;toString()&lt;/tt&gt; method in order for default domain objects to be used with the majority of Java libraries.&lt;/p&gt;

&lt;p&gt;There are two ways to get around this. The first is to annotate every &lt;tt&gt;string&lt;/tt&gt; field in a schema like so:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    {
      &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;some_string&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;doc&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;a field that is guaranteed to compile to java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: [
        &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;,
        {
          &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;,
          &lt;span class=&quot;code-quote&quot;&gt;&quot;avro.java.string&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&quot;&lt;/span&gt;
        }
      ]
    },
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, long schemas containing many string fields can be dominated by this annotation by volume; for teams using heterogenous clients, they may to want to avoid  Java-specific annotation in their schema files, or may not think to use it unless there exist Java exploiters of the schema at the time the schema is proposed and written.&lt;/p&gt;

&lt;p&gt;The other solution to the problem is to compile the schema into Java objects  using the &lt;tt&gt;SpecificCompiler&lt;/tt&gt;&apos;s string type selection. This option actually alters the schema carried by the object&apos;s &lt;tt&gt;SCHEMA$&lt;/tt&gt; field to have the above annotation in it, ensuring that when used by the Java API, the String type will be used. &lt;/p&gt;

&lt;p&gt;Unfortunately, this method is not interoperable with GenericRecords created by libraries that use the &lt;em&gt;original&lt;/em&gt; schema.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;panel&quot; style=&quot;background-color: #DDD;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelHeader&quot; style=&quot;border-bottom-width: 1px;background-color: #8DB;&quot;&gt;&lt;b&gt;Steps To Reproduce&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;panelContent&quot; style=&quot;background-color: #DDD;&quot;&gt;
&lt;ol&gt;
	&lt;li&gt;Create a schema with several &lt;tt&gt;string&lt;/tt&gt; fields.&lt;/li&gt;
	&lt;li&gt;Parse the schema using the standard Avro schema parser&lt;/li&gt;
	&lt;li&gt;Create Java domain objects for that schema ensuring usage of the &lt;tt&gt;java.lang.String&lt;/tt&gt; string type.&lt;/li&gt;
	&lt;li&gt;Create a message of some sort that ends up as a &lt;tt&gt;GenericRecord&lt;/tt&gt; of the original schema&lt;/li&gt;
	&lt;li&gt;Attempt to use &lt;tt&gt;SpecificData.deepCopy()&lt;/tt&gt; to make a &lt;tt&gt;SpecificRecord&lt;/tt&gt; out of the &lt;tt&gt;GenericRecord&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;There is a unit test that demonstrate this &lt;a href=&quot;https://github.com/ryonday/avroDecodingHelp/blob/master/1.8.0/src/test/java/com/ryonday/avro/test/v180/AvroDeepCopyTest.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;panel&quot; style=&quot;background-color: #DDD;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelHeader&quot; style=&quot;border-bottom-width: 1px;background-color: #AD3;&quot;&gt;&lt;b&gt;Expected Results&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;panelContent&quot; style=&quot;background-color: #DDD;&quot;&gt;
&lt;p&gt;As the schemas are literally identical aside from string type, the conversion should work (and does work for schema that are exactly identical).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;panel&quot; style=&quot;background-color: #DDD;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelHeader&quot; style=&quot;border-bottom-width: 1px;background-color: #D55;&quot;&gt;&lt;b&gt;Actual Results&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;panelContent&quot; style=&quot;background-color: #DDD;&quot;&gt;
&lt;p&gt;&lt;tt&gt;ClassCastException&lt;/tt&gt; with the message &lt;tt&gt;org.apache.avro.util.Utf8 cannot be cast to java.lang.String&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12949279">AVRO-1811</key>
            <summary>SpecificData.deepCopy() cannot be used if schema compiler generated Java objects with Strings instead of UTF8</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.svg">Critical</priority>
                        <status id="10002" iconUrl="https://issues.apache.org/jira/images/icons/statuses/document.png" description="A patch for this issue has been uploaded to JIRA by a contributor.">Patch Available</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="Yibing">Yibing Shi</assignee>
                                    <reporter username="ryonday">Ryon Day</reporter>
                        <labels>
                    </labels>
                <created>Fri, 11 Mar 2016 18:56:45 +0000</created>
                <updated>Mon, 30 Jul 2018 13:49:29 +0000</updated>
                                            <version>1.8.0</version>
                    <version>1.8.1</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>3</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="15244451" author="rdblue" created="Sat, 16 Apr 2016 22:51:52 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ryonday&quot; class=&quot;user-hover&quot; rel=&quot;ryonday&quot;&gt;Ryon Day&lt;/a&gt;, thanks for the thorough bug report! It looks like the problem is that deepCopy simply doesn&apos;t check whether the returned data should be a Utf8 or a String. It would be relatively easy to fix this by adding a method for string construction to GenericData and overriding it in SpecificData. Are you interested in contributing a patch?&lt;/p&gt;</comment>
                            <comment id="15360955" author="yibing" created="Mon, 4 Jul 2016 07:22:40 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, this problem may not be very easy. It happens when deep copying an object that uses &lt;tt&gt;Utf8&lt;/tt&gt; as string representation into a specific record which uses &lt;tt&gt;java.lang.String&lt;/tt&gt; instead. We can simplify the issue with below unit test:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  @Test
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testStringDeepCopy() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    FooBarSpecificRecord specificRecord = FooBarSpecificRecord.newBuilder()
        .setId(1)
        .setName(&lt;span class=&quot;code-quote&quot;&gt;&quot;test_record_specific&quot;&lt;/span&gt;)
        .setNicknames(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt;())
        .setRelatedids(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt;())
        .build();

    GenericRecordBuilder builder = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericRecordBuilder(specificRecord.getSchema());
    GenericRecord genericRecord = builder
        .set(&lt;span class=&quot;code-quote&quot;&gt;&quot;id&quot;&lt;/span&gt;, 1)
        .set(&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Utf8(&lt;span class=&quot;code-quote&quot;&gt;&quot;test_record_specific&quot;&lt;/span&gt;))
        .set(&lt;span class=&quot;code-quote&quot;&gt;&quot;nicknames&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt;())
        .set(&lt;span class=&quot;code-quote&quot;&gt;&quot;relatedids&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt;())
        .build();

    FooBarSpecificRecord copiedFromGeneric = (FooBarSpecificRecord) SpecificData.get().deepCopy(
        FooBarSpecificRecord.getClassSchema(), genericRecord);

    assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;Should get an equal record by deep copying the &lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt; record&quot;&lt;/span&gt;,
        specificRecord, copiedFromGeneric);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This unit test fails in master branch with below exception:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java.lang.ClassCastException: org.apache.avro.util.Utf8 cannot be cast to java.lang.String
	at org.apache.avro.FooBarSpecificRecord.put(FooBarSpecificRecord.java:70)
	at org.apache.avro.generic.GenericData.setField(GenericData.java:659)
	at org.apache.avro.generic.GenericData.setField(GenericData.java:676)
	at org.apache.avro.generic.GenericData.deepCopy(GenericData.java:1081)
	at org.apache.avro.generic.TestGenericData.testStringDeepCopy(TestGenericData.java:450)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looking at &lt;a href=&quot;https://github.com/apache/avro/blob/master/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java#L1079-L1081&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;the code&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;          &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; newValue = deepCopy(f.schema(),
                                     getField(value, name, pos, oldState));
          setField(newRecord, name, pos, newValue, newState);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Variable newValue is an &lt;tt&gt;Utf8&lt;/tt&gt; object because &lt;tt&gt;getField&lt;/tt&gt; of the generic record uses it for field &quot;name&quot;, while &lt;tt&gt;setField&lt;/tt&gt; method in &lt;tt&gt;FooBarSpecificRecord&lt;/tt&gt; expects a &lt;tt&gt;java.lang.string&lt;/tt&gt; as input parameter. This causes above exception.&lt;/p&gt;

&lt;p&gt;Method &quot;deepCopy&quot; is defined with below signature:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; T deepCopy(Schema schema, T value) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which makes the problem a bit complicated. It can only return an object of exactly the same type as input parameter &quot;value&quot;. That is, if we pass in an &lt;tt&gt;Utf8&lt;/tt&gt; object as &quot;value&quot;, we cannot return a &lt;tt&gt;java.lang.String&lt;/tt&gt; object. &lt;/p&gt;

&lt;p&gt;The only way I can find to solve this problem is to finish the conversion before calling &lt;tt&gt;setField&lt;/tt&gt; when deep copying records. That is, change above code to something like below:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;          &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; newValue = deepCopy(f.schema(),
                                     getField(value, name, pos, oldState));
          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (STRING_TYPE_STRING.equals(f.schema().getProp(STRING_PROP))) {
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (! (newValue &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)) {
              newValue = newValue.toString();
            }
          } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (newValue &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;) {
              newValue = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Utf8((&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;) newValue);
            }
          }
          setField(newRecord, name, pos, newValue, newState);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I will submit a patch based on this thought. &lt;/p&gt;

&lt;p&gt;Further thoughts:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ryonday&quot; class=&quot;user-hover&quot; rel=&quot;ryonday&quot;&gt;Ryon Day&lt;/a&gt;, why did you have incompatible schemas in Specific Data and Generic Data in the unit test you provided &lt;a href=&quot;https://github.com/ryonday/avroDecodingHelp/blob/master/1.8.0/src/test/java/com/ryonday/avro/test/v180/AvroDeepCopyTest.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;? How did you generate the avsc files?&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, this problem reminds me of the Logical Types. A logical type field can have 2 representations: one uses raw type and the other uses upper level java types. For instance, for &quot;decimal&quot; type, we can use both ByteBuffer and BigDecimal. Do we need support copying between them?&lt;/li&gt;
&lt;/ol&gt;

</comment>
                            <comment id="15361264" author="yibing" created="Mon, 4 Jul 2016 12:53:25 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, I have another consideration about this problem. Above change is ugly. It only fixes the record copy problem. We may still face the same problem in other scenarios. Maybe we should change the specific compiler instead to make the &lt;tt&gt;setField&lt;/tt&gt; method be able to accept different types of values (for example, can accept both String and Utf8 for a string field)?&lt;/p&gt;</comment>
                            <comment id="15362449" author="busbey" created="Tue, 5 Jul 2016 12:55:05 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Ryan Blue, this problem reminds me of the Logical Types. A logical type field can have 2 representations: one uses raw type and the other uses upper level java types. For instance, for &quot;decimal&quot; type, we can use both ByteBuffer and BigDecimal. Do we need support copying between them?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s a very good question. What&apos;s the current behavior if we try to turn a SpecificRecord that contains either representation into a GenericRecord?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Above change is ugly. It only fixes the record copy problem. We may still face the same problem in other scenarios. Maybe we should change the specific compiler instead to make the setField method be able to accept different types of values (for example, can accept both String and Utf8 for a string field)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s interesting. It would make sense that the internal representation of the data shouldn&apos;t constrain how we get bytes into it. Also, we&apos;re in a good position to make sure that the String &amp;lt;-&amp;gt; Utf8 conversion is done correctly. Presuming this fixes the immediate problem, I&apos;d like this approach. I think it&apos;s fine for the get methods to be asymmetric with the set methods, which is the only drawback I can think of.&lt;/p&gt;</comment>
                            <comment id="15362617" author="yibing" created="Tue, 5 Jul 2016 15:14:11 +0000"  >&lt;blockquote&gt;
&lt;p&gt;What&apos;s the current behavior if we try to turn a SpecificRecord that contains either representation into a GenericRecord&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I believe it depends on how to do the conversion.&lt;br/&gt;
If we first serialize the SpecificRecord (no matter using high/low level representation), and then deserialize it into a GenericRecord, it should work fine , but the logical type fields will use low level representations in GenericRecord, unless conversion objects are explicitly added to GenericRecord before reading the underlying data.&lt;br/&gt;
If we use &lt;tt&gt;GenericRecord.deepCopy&lt;/tt&gt; directly to copy a SpecificRecord with high level logical type representations (BigDecimal etc.), I believe it would fail, because &lt;tt&gt;GenericData.deepCopy&lt;/tt&gt; doesn&apos;t understand the high level representations at all. A CCE would be thrown out. Copying a SpecificRecord with low level representation should be fine because it is just the same as before Logical Type is adopted in.&lt;br/&gt;
Actually, we may also face problems when deepCopy a GenericData to SpecificData. The setField method in SpecificData needs a value that matches field type. If the logical type field uses high level representation, I expect this copying would fail, because deepCopy at this moment only returns low level representations.&lt;br/&gt;
I haven&apos;t tested these behaviours though. Will do some test when I have time.&lt;/p&gt;

&lt;p&gt;The patch uploaded here should be able to solve the immediate problem. Thanks for your acceptance of it as a short-term solution. I am just afraid we may face other similar problems in other scenarios. Maybe we should create another JIRA to track the wider &quot;convertible&quot; values problem?&lt;/p&gt;</comment>
                            <comment id="16561940" author="laymain" created="Mon, 30 Jul 2018 13:49:29 +0000"  >&lt;p&gt;This issue also affects 1.8.2 version&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12815993" name="AVRO-1811.1.patch" size="22029" author="Yibing" created="Mon, 4 Jul 2016 07:23:28 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 16 Apr 2016 22:51:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            25 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2ujdz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>
