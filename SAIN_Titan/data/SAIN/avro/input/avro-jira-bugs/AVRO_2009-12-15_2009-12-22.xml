<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:13:09 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2009-12-15+AND+created+%3C%3D+2009-12-22+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="5" total="5"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-257] Dead code removal</title>
                <link>https://issues.apache.org/jira/browse/AVRO-257</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;There is dead code in org.apache.avro.reflect.ReflectData.validate().  The code is checking if datum is not an instance of Object. But it always is, as it is declared as Object and it is not null.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12443450">AVRO-257</key>
            <summary>Dead code removal</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.svg">Trivial</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kevinoliver">Kevin Oliver</assignee>
                                    <reporter username="kevinoliver">Kevin Oliver</reporter>
                        <labels>
                    </labels>
                <created>Tue, 15 Dec 2009 20:50:12 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:13 +0000</updated>
                            <resolved>Tue, 15 Dec 2009 23:06:02 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12790948" author="kevinoliver" created="Tue, 15 Dec 2009 21:01:59 +0000"  >&lt;p&gt;This also fixes some unnecessary casting by using Class&amp;lt;?&amp;gt; and also an used SuppressedWarnings(&quot;unchecked&quot;) in SpecificRecordBase. If committers would prefer those changes not be included, let me know and I&apos;ll submit another patch without those changes.&lt;/p&gt;</comment>
                            <comment id="12790958" author="cutting" created="Tue, 15 Dec 2009 21:17:50 +0000"  >&lt;p&gt;I think the &apos;instanceof Object&apos; should be replaced with a null check before the call to datum.getClass().  If it&apos;s non-null it has to be an Object, but it might be null, no?&lt;/p&gt;

&lt;p&gt;The rest of the patch looks good to me.&lt;/p&gt;</comment>
                            <comment id="12791003" author="kevinoliver" created="Tue, 15 Dec 2009 22:44:25 +0000"  >&lt;p&gt;Yes, datum can definitely be null (I just made the change locally because datum was being dereferenced on the line before).&lt;/p&gt;

&lt;p&gt;So it feels like the contract to validate(Schema, Object) should be that if datum is null, validate should always return false. And if thats the case, should I also modify SpecificRecord and GenericData&apos;s implementations to behave this way?&lt;/p&gt;</comment>
                            <comment id="12791006" author="cutting" created="Tue, 15 Dec 2009 22:50:53 +0000"  >&lt;p&gt;&amp;gt; if datum is null, validate should always return false&lt;/p&gt;

&lt;p&gt;No, a record cannot be null.  But a union that contains a null schema or a null schema itself can be null.  And, as much as possible, we want to permit folks to build new data representations that might map Java types to Avro types differently, i.e., to permit a zero-length Avro string to be represented as null or something crazy like that.&lt;/p&gt;</comment>
                            <comment id="12791011" author="cutting" created="Tue, 15 Dec 2009 22:54:38 +0000"  >&lt;p&gt;Here&apos;s a version of your patch that includes the change I mentioned.&lt;/p&gt;</comment>
                            <comment id="12791013" author="kevinoliver" created="Tue, 15 Dec 2009 23:01:10 +0000"  >&lt;p&gt;Yep. Doug, you beat me to the punch by a couple of minutes. Same thing I now have locally. Looks good to me.&lt;/p&gt;</comment>
                            <comment id="12791016" author="cutting" created="Tue, 15 Dec 2009 23:06:02 +0000"  >&lt;p&gt;I just committed this.  Thanks, Kevin!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12428095" name="AVRO-257.patch" size="3921" author="cutting" created="Tue, 15 Dec 2009 22:54:38 +0000"/>
                            <attachment id="12428081" name="AVRO-257.patch" size="3823" author="kevinoliver" created="Tue, 15 Dec 2009 21:01:59 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 15 Dec 2009 21:17:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94584</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 6 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dz7z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79636</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-258] Higher-level language for authoring schemata</title>
                <link>https://issues.apache.org/jira/browse/AVRO-258</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Early users of Avro have noted that authoring schemas and especially protocols in JSON feels unnatural. This JIRA is to work on a higher-level language that feels more like defining interfaces and classes in Java/C/etc.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12443732">AVRO-258</key>
            <summary>Higher-level language for authoring schemata</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tlipcon">Todd Lipcon</assignee>
                                    <reporter username="tlipcon">Todd Lipcon</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Dec 2009 08:40:08 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:13 +0000</updated>
                            <resolved>Thu, 31 Dec 2009 20:22:39 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>spec</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="12792391" author="tlipcon" created="Fri, 18 Dec 2009 08:46:21 +0000"  >&lt;p&gt;Here&apos;s the &quot;Simple&quot; example in my made-up language:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;protocol Simple {
  enum Kind {
    FOO,
    BAR,
    BAZ
  }
  
  fixed MD5(16);

  record TestRecord {
    @order(&quot;ignore&quot;)
    string name;

    @order(&quot;descending&quot;)
    Kind kind;

    MD5 hash;
  }

  error TestError {
    string message;
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Currently I&apos;m parsing this with JavaCC, but not generating any schema or AST or anything. I think the next steps are:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;See if people like the above style (and this idea at all)&lt;/li&gt;
	&lt;li&gt;Make the parser actually generate a Schema object&lt;/li&gt;
	&lt;li&gt;Dump that Schema object to JSON&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m proposing this as a way for developers to author and generate schemas, and do &lt;b&gt;not&lt;/b&gt; expect that each language binding would have to implement a parser. We could keep the authoritative high-level-language code in Java. This has a side benefit of being able to do some semantic checking of schemata, too.&lt;/p&gt;</comment>
                            <comment id="12792394" author="hammer" created="Fri, 18 Dec 2009 08:51:44 +0000"  >&lt;p&gt;We could also use this layer to do protocol inheritance.&lt;/p&gt;</comment>
                            <comment id="12792395" author="hammer" created="Fri, 18 Dec 2009 08:51:56 +0000"  >&lt;p&gt;And comments.&lt;/p&gt;</comment>
                            <comment id="12792396" author="tlipcon" created="Fri, 18 Dec 2009 08:57:30 +0000"  >&lt;p&gt;Other open questions:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Should this support complex defaults? If so, do we end up essentially embedding JSON inside the language? Eg:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;record SomeOtherRecord {
  TestRecord myfield = {
    &apos;name&apos;: &apos;bob&apos;,
    &apos;kind&apos;: &apos;FOO&apos;,
    &apos;hash&apos;: 0x1234234
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or should it be something with less quoting? In the first iteration, I&apos;ll probably just leave out non-literal defaults.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;How do we write nested non-reference-style records? For example, part of interop.avsc might be written something like:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;@namespace(org.apache.avro)
record Interop {
  record Node {
    string label;
    array&amp;lt;Node&amp;gt; children;
  } recordField;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but that looks a little bizarre to me. The other option is to force records to be defined more like inner classes:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;@namespace(org.apache.avro)
record Interop {
  record Node {
    string label;
    array&amp;lt;Node&amp;gt; children;
  }
  Node recordField;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12792559" author="philip" created="Fri, 18 Dec 2009 18:22:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;We could also use this layer to do protocol inheritance.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think protocol inheritance is a good idea.  It&apos;s better to support servers that &quot;implement&quot; a number of protocols.&lt;/p&gt;</comment>
                            <comment id="12792611" author="cutting" created="Fri, 18 Dec 2009 19:45:01 +0000"  >&lt;p&gt;First, I don&apos;t think we want to make such a tool a part of the spec: we don&apos;t expect there to be more than a single implementation of it, do we?  Given that, we should implement it such a way that it&apos;s available to the widest variety of platforms: Perl or Python might thus be preferable to Java.&lt;/p&gt;

&lt;p&gt;Support for comments and includes would we wonderful to have.&lt;/p&gt;

&lt;p&gt;Another approach, rather than trying to make the syntax more Java-like, implementing a full parser, is to just remove the most annoying things from JSON.  A good pre-processor that supports includes, comments and made quotes optional would make things vastly more readable and functional.  Beyond that, it starts to become lisp-versus-algol, unresolvable and a tremendous time sink.&lt;/p&gt;

&lt;p&gt;If we wanted to get fancy, we could try to do more complex JSON transformations, like transform &quot;foo bar {}&quot; (no comma) into &quot;&lt;/p&gt;
{type: foo, name: bar, ...}
&lt;p&gt;&quot;, and &quot;a; b; c;&quot; into &lt;span class=&quot;error&quot;&gt;&amp;#91;a, b, c&amp;#93;&lt;/span&gt;, etc.&lt;/p&gt;

&lt;p&gt;{type: record, name: Foo, fields: [&lt;/p&gt;
{name: f, type string}
&lt;p&gt;], java-class: FooImpl}&lt;/p&gt;
{type: enum, name: Bar, symbols: [X, Y, Z]}

&lt;p&gt;become&lt;/p&gt;

&lt;p&gt;record Foo { fields: string f {}; java-class: FooImpl}&lt;br/&gt;
enum Bar &lt;/p&gt;
{ symbols: X; Y; Z; }

&lt;p&gt;A json-preprocessor approach lets us more easily support default values, metadata, etc, and makes the transition to JSON easier for folks, since developers will see JSON-format schemas too.  My first choice would probably be to simply support comments, includes and make quotes optional.  That would gives us great bang for very little buck.  But I may not be able to convince anyone else of this...&lt;/p&gt;</comment>
                            <comment id="12792626" author="tlipcon" created="Fri, 18 Dec 2009 20:23:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;First, I don&apos;t think we want to make such a tool a part of the spec&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Fair enough - I&apos;m ambivalent there.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Perl or Python might thus be preferable to Java. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I looked at some Python based parsers, but the issue is that many of them rely on libraries rather than code generation. Many of those libraries are GPL or LGPL license, and also aren&apos;t available on CentOS/RHEL 5, which means that in a lot of ways it&apos;s &lt;em&gt;less&lt;/em&gt; deployable than Java. Pyparsing, which I like a lot and have used before, is a friendly license but still has the library requirement, and would still have to bundled with the script. Having recently worked on some python software that bundles a lot of library dependencies, it&apos;s a huge huge &lt;em&gt;huge&lt;/em&gt; pain. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I actually almost did this in C/C++ with straight lex/yacc, but went towards Java since it was easier for a quick first pass. Moving to C in the long run would be fine by me for the reasons you outlined.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Another approach, rather than trying to make the syntax more Java-like, implementing a full parser, is to just remove the most annoying things from JSON... more complex JSON transformations ... etc&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So, maybe I&apos;m misunderstanding you, but it seems like you&apos;re proposing either (a) writing a custom JSON parser that has some extensions to make the syntax more palatable, or (b) writing a text-based preprocessor that outputs JSON which is then fed into the parser. Solution (a) seems to me like it has all the same difficulties as writing our own language, but with a less familiar syntax. Solution (b) seems hackish, and has the downside that it inherits the syntactic strangeness of using JSON while not getting the benefits of using a standard language (editor support, preexisting familiarity, etc).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Beyond that, it starts to become lisp-versus-algol, unresolvable and a tremendous time sink.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m not convinced that implementing our own language is really that tough. In about 3 hours of work I got the above stuff done, and I&apos;d never used JavaCC before. As for the religious lisp-versus-algol question, I think it&apos;s already been resolved in the sense that most existing protocol/data description languages are more algol-like than JSON-like (eg xdr, CORBA IDL, protobufs, Apache Thrift, Apache Etch). The counterexamples are things like WSDL which no one seems to really like.&lt;/p&gt;


&lt;p&gt;To reiterate, I&apos;m definitely &lt;em&gt;not&lt;/em&gt; suggesting than JSON be supplanted as the definitive schema definition language for AVRO. It&apos;s great in that there are existing parsers in most languages and readily machine-readable.&lt;/p&gt;</comment>
                            <comment id="12792754" author="tlipcon" created="Sat, 19 Dec 2009 01:52:35 +0000"  >&lt;p&gt;Here&apos;s a patch that shows what works so far. It does not include proper unit tests yet, but you can try it like so:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;$ ant compile-java
$ java -cp build/lib/*:build/classes/ org.apache.avro.genavro.GenAvro &amp;lt; src/test/genavro/simple.avpr
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I also attached input and output for a schema basically the same as the test/schemata/simple.avpr&lt;/p&gt;

&lt;p&gt;Certainly more work to be done here, but I want to get feedback from the community before I spend the time to get it properly tested, documented, corner-cases worked out, etc. Most importantly, is this something people want? Does this style of syntax seem reasonable?&lt;/p&gt;</comment>
                            <comment id="12792962" author="cutting" created="Sun, 20 Dec 2009 04:44:12 +0000"  >&lt;p&gt;The syntax looks reasonable enough to me.  I think we&apos;ll want both an avroj command-line tool for this and an Ant task.&lt;/p&gt;</comment>
                            <comment id="12793057" author="kingryan" created="Mon, 21 Dec 2009 01:29:09 +0000"  >&lt;p&gt;I like the general approach here, but am not a fan of the decorator-like syntax. That sort of syntax is necessary when you can&apos;t make backwards-incompatible changes to a language. We don&apos;t have that constraint here. I would do this:&lt;/p&gt;

&lt;p&gt;&amp;lt;pre&amp;gt;&lt;br/&gt;
    string name ignore;&lt;br/&gt;
&amp;lt;/pre&amp;gt;&lt;/p&gt;</comment>
                            <comment id="12793058" author="tlipcon" created="Mon, 21 Dec 2009 01:32:59 +0000"  >&lt;p&gt;Ryan: how do you extend that to support the arbitrary properties? &apos;order&apos; isn&apos;t the only property that can be attached to schemas. I certainly don&apos;t love the java annotation style syntax, but I went with it because it was familiar-looking.&lt;/p&gt;</comment>
                            <comment id="12793062" author="kingryan" created="Mon, 21 Dec 2009 02:36:30 +0000"  >&lt;p&gt;We could make the properties, key-value:&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;string name sort=ignore future=property&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;I think my aversion to the annotation-style syntax is that they&apos;re very unfamiliar looking to me and just seem unnecessary when we&apos;re starting from scratch.&lt;/p&gt;</comment>
                            <comment id="12793064" author="thiru_mg" created="Mon, 21 Dec 2009 02:55:27 +0000"  >&lt;p&gt;The syntax looks fine for me. The only addition I&apos;d like to add to the grammar is to support optional fields in records. We use the idiom that a union of a &quot;Type&quot; and &quot;null&quot;  makes the field optional. I&apos;d like the language support it directly. That is I&apos;d like something like:&lt;/p&gt;

&lt;p&gt;&amp;lt;pre&amp;gt;&lt;br/&gt;
record r {&lt;br/&gt;
    string name;&lt;br/&gt;
    optional string org;&lt;br/&gt;
}&lt;br/&gt;
&amp;lt;/pre&amp;gt;&lt;/p&gt;

&lt;p&gt;as a shorthand for&lt;/p&gt;

&lt;p&gt;&amp;lt;pre&amp;gt;&lt;br/&gt;
record r {&lt;br/&gt;
    string name;&lt;br/&gt;
    union &lt;/p&gt;
{ null, string }
&lt;p&gt; org;&lt;br/&gt;
}&lt;br/&gt;
&amp;lt;/pre&amp;gt;&lt;/p&gt;
</comment>
                            <comment id="12793065" author="tlipcon" created="Mon, 21 Dec 2009 02:58:59 +0000"  >&lt;p&gt;Thanks for the input, guys.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We could make the properties, key-value: string name sort=ignore future=property&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m not a huge fan of this because it makes user-properties intermix with language constructors in a non-clearly-defined way. But I don&apos;t feel that strongly - anyone else have some opinions?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The only addition I&apos;d like to add to the grammar is to support optional fields in records&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Definitely +1. I was planning on using the keyword &quot;nullable&quot; instead of &quot;optional&quot; since to me &quot;optional&quot; seems to indicate a ternary state possibility (ie unset, set to null, and set to something else). But in general I like that kind of syntactic sugar.&lt;/p&gt;</comment>
                            <comment id="12793066" author="tlipcon" created="Mon, 21 Dec 2009 02:59:28 +0000"  >&lt;p&gt;err, by &quot;language constructors&quot; i meant &quot;language constructs&quot;. Sorry for the typo &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12794180" author="tlipcon" created="Wed, 23 Dec 2009 19:35:21 +0000"  >&lt;p&gt;New patch. This needs to go on top of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-263&quot; title=&quot;avroj tools should return exit codes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-263&quot;&gt;&lt;del&gt;AVRO-263&lt;/del&gt;&lt;/a&gt; and includes the following since last patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;avroj genavro&quot; tool implementation&lt;/li&gt;
	&lt;li&gt;fixes to build.xml so clean build works properly with javacc stuff&lt;/li&gt;
	&lt;li&gt;test harness and some tests in src/test/genavro/&lt;/li&gt;
	&lt;li&gt;added support for namespaces&lt;/li&gt;
	&lt;li&gt;added support for errors&lt;/li&gt;
	&lt;li&gt;added support for using reserved words bare in certain contexts, and escaped by backticks in others. See src/test/genavro/input/reservedwords.genavro&lt;/li&gt;
	&lt;li&gt;cleaned up the .jj file a bit&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12795188" author="cutting" created="Tue, 29 Dec 2009 23:16:00 +0000"  >&lt;p&gt;This is looking good.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GenAvroTool needs javadoc.&lt;/li&gt;
	&lt;li&gt;The language needs documentation.  This probably belongs in the Forrest rather than javadoc.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12795230" author="tlipcon" created="Wed, 30 Dec 2009 04:05:21 +0000"  >&lt;p&gt;New patch includes better docs for the tool, as well as forrest source for docs on the language. I&apos;m also attaching the generated PDF for easier reference here.&lt;/p&gt;

&lt;p&gt;I modified build.xml a bit to separate out a forrestdoc target from the general &quot;doc&quot; target (got tired of waiting for all the javadoc, etc, to build just to test the forrest docs)&lt;/p&gt;</comment>
                            <comment id="12795662" author="cutting" created="Thu, 31 Dec 2009 20:22:39 +0000"  >&lt;p&gt;I just committed this.  I took the liberty of making a few changes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added Apache license to genavro files and removed the change to rat-excludes.txt&lt;/li&gt;
	&lt;li&gt;moved GenAvroTool.java to tool package, since genavro package had no package.html, and no other public classes.&lt;/li&gt;
	&lt;li&gt;removed verbose test output.&lt;/li&gt;
	&lt;li&gt;added a missing final newline to TestGenAvro, as flagged by checkstyle.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks Todd!&lt;/p&gt;</comment>
                            <comment id="12795680" author="cutting" created="Thu, 31 Dec 2009 21:23:27 +0000"  >&lt;p&gt;One more change, Todd: Schema.Names should not have been made public: it has no Javadoc, it references other non-public classes, and otherwise clutters the core Javadoc with something that few need to know about.  Perhaps, in a separate issue, we could consider moving a lot of Schema.java&apos;s nested classes to an implementation package, that most users don&apos;t need to see, but for now using Schema.Names didn&apos;t actually save you more than a couple of lines of code, so I just removed its use and made it package-private again.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12428514" name="AVRO-258.txt" size="34258" author="tlipcon" created="Sat, 19 Dec 2009 01:52:35 +0000"/>
                            <attachment id="12429116" name="avro-258.txt" size="75562" author="tlipcon" created="Wed, 30 Dec 2009 04:05:21 +0000"/>
                            <attachment id="12428863" name="avro-258.txt" size="60074" author="tlipcon" created="Wed, 23 Dec 2009 19:35:21 +0000"/>
                            <attachment id="12429117" name="genavro.pdf" size="25592" author="tlipcon" created="Wed, 30 Dec 2009 04:05:21 +0000"/>
                            <attachment id="12428516" name="simple-genned.avpr" size="1485" author="tlipcon" created="Sat, 19 Dec 2009 01:52:35 +0000"/>
                            <attachment id="12428515" name="simple.avpr" size="519" author="tlipcon" created="Sat, 19 Dec 2009 01:52:35 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 18 Dec 2009 08:51:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94585</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 4 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dz87:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79637</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-259] GenericData.Array should fail fast when constructed with a null Schema</title>
                <link>https://issues.apache.org/jira/browse/AVRO-259</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;GenericData.Array&apos;s constructor takes a Schema but doesn&apos;t validate that it is not null. The schema is assumed to be not null in other places (equals() and hashCode()) which then trigger NPEs. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12443782">AVRO-259</key>
            <summary>GenericData.Array should fail fast when constructed with a null Schema</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.svg">Trivial</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kevinoliver">Kevin Oliver</assignee>
                                    <reporter username="kevinoliver">Kevin Oliver</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Dec 2009 17:14:49 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:13 +0000</updated>
                            <resolved>Sat, 9 Jan 2010 00:03:51 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12792534" author="kevinoliver" created="Fri, 18 Dec 2009 17:17:06 +0000"  >&lt;p&gt;Patch coming that includes a testcase.&lt;/p&gt;

&lt;p&gt;The patch also includes fixing some missing @Overrides and 2 unnecessary @SuppressWarnings. These can be removed if the committers would prefer they were not included.&lt;/p&gt;</comment>
                            <comment id="12798237" author="kevinoliver" created="Fri, 8 Jan 2010 23:14:29 +0000"  >&lt;p&gt;Anything I can do to help this patch along? Was my initial assumption valid?&lt;/p&gt;</comment>
                            <comment id="12798258" author="cutting" created="Sat, 9 Jan 2010 00:03:51 +0000"  >&lt;p&gt;I just committed this.  I also implemented the null check for GenericData.Record.&lt;/p&gt;

&lt;p&gt;Sorry it took me so long.&lt;/p&gt;

&lt;p&gt;Thanks, Kevin!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12428453" name="AVRO-259.patch" size="4570" author="kevinoliver" created="Fri, 18 Dec 2009 17:28:51 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 9 Jan 2010 00:03:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94586</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 3 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dz8f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79638</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-260] upgrade to current Jackson release (again)</title>
                <link>https://issues.apache.org/jira/browse/AVRO-260</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Avro should probably use a more recent version of Jackson.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12443785">AVRO-260</key>
            <summary>upgrade to current Jackson release (again)</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="kevinoliver">Kevin Oliver</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Dec 2009 17:37:14 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:13 +0000</updated>
                            <resolved>Tue, 29 Dec 2009 22:41:50 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12792542" author="kevinoliver" created="Fri, 18 Dec 2009 17:39:24 +0000"  >&lt;p&gt;The Jackson library has been upgraded to 1.3.2. Avro is currently on 1.2.1.&lt;/p&gt;

&lt;p&gt;Download:&lt;br/&gt;
&lt;a href=&quot;http://wiki.fasterxml.com/JacksonDownload&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.fasterxml.com/JacksonDownload&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Changelog:&lt;br/&gt;
&lt;a href=&quot;http://wiki.fasterxml.com/JacksonRelease13&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.fasterxml.com/JacksonRelease13&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12794276" author="tlipcon" created="Wed, 23 Dec 2009 23:35:44 +0000"  >&lt;p&gt;Re-again, it looks like current is now 1.4, and we&apos;re on 1.3.0&lt;/p&gt;</comment>
                            <comment id="12795177" author="cutting" created="Tue, 29 Dec 2009 22:41:50 +0000"  >&lt;p&gt;I just committed this.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10020">
                    <name>Cloners</name>
                                            <outwardlinks description="is a clone of">
                                        <issuelink>
            <issuekey id="12439569">AVRO-177</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 23 Dec 2009 23:35:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94587</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 4 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dz8n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79639</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-261] Allow Schemas to be immutable</title>
                <link>https://issues.apache.org/jira/browse/AVRO-261</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;It would be nice if there was the ability to have an immutable Schema in java. &lt;/p&gt;

&lt;p&gt;Without this, it makes sharing schemas risky. Also, with this, we could (lazily) cache the hashCode which is a fairly expensive operation today, especially on something like a record.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12443791">AVRO-261</key>
            <summary>Allow Schemas to be immutable</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thiru_mg">Thiruvalluvan M. G.</assignee>
                                    <reporter username="kevinoliver">Kevin Oliver</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Dec 2009 19:01:20 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:13 +0000</updated>
                            <resolved>Tue, 9 Feb 2010 03:40:56 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12792583" author="kevinoliver" created="Fri, 18 Dec 2009 19:04:34 +0000"  >&lt;p&gt;I can think of 2 approaches to take here:&lt;br/&gt;
1) Add a boolean flag to Schema, lets call it locked, that prevents modifications. Users could call Schema.lock() which would then set the flag and prevent further mutations (on the properties, fields, etc). &lt;br/&gt;
2) Convert Schema to an interface and have an implementation that never allows for modifications.&lt;/p&gt;

&lt;p&gt;Any interest? Any preference in which approach to take?&lt;/p&gt;</comment>
                            <comment id="12828125" author="thiru_mg" created="Mon, 1 Feb 2010 14:47:17 +0000"  >&lt;p&gt;Here is a patch which addresses this issue. The Schema we have had was almost immutable except a few things.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Union and Enum schemas stored references to Lists supplied to their constructors. So if the original Lists were modified, the schema would get affected. A simple fix is to make a fresh list. But these schemas also return the List through getter methods, opening them up for updates. The solution is to store an unmodifiable wrapper around the fresh list. If we are sure that the original list is not available for modification, we can simply wrap the list itself without constructing a new one.&lt;/li&gt;
	&lt;li&gt;Similar things happened in RecordSchema&apos;s &lt;em&gt;fields&lt;/em&gt; and &lt;em&gt;fieldSchemas&lt;/em&gt; attributes. But these collections were already constructed afresh in setFields() method. So we just need to make these unmodifiable.&lt;/li&gt;
	&lt;li&gt;We need extra protection against setFields() being called more than once. I applied Kevin&apos;s idea having a boolean variable &lt;em&gt;locked&lt;/em&gt;. It would have been nice if we can completely avoided setFields(). To avoid setFields() we need to set the fields in the constructor. But we cannot do that because we need to construct the RecordSchema and add to the &lt;em&gt;names&lt;/em&gt; map before we can fully construct its fields. This is necessary to handle recursive schemas.&lt;/li&gt;
	&lt;li&gt;The Field class had a non-final field &lt;em&gt;position&lt;/em&gt;. But it is private and there is already protection that it cannot be modified more than once. So nothing needs to be done there.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12828130" author="thiru_mg" created="Mon, 1 Feb 2010 15:14:36 +0000"  >&lt;blockquote&gt;&lt;p&gt;I applied Kevin&apos;s idea having a boolean variable locked. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Just noticed that the &lt;em&gt;fields&lt;/em&gt; attribute was already being checked for overwriting. So retracted the boolean.&lt;/p&gt;</comment>
                            <comment id="12828198" author="philip" created="Mon, 1 Feb 2010 17:51:56 +0000"  >&lt;p&gt;I like having schemas immutable.  This patch looks like a good step in that direction.  setProp() is still problematic, however.  (It&apos;s also the reason that the primitive schemas aren&apos;t singletons: I think the reflect API annotates the primitive types with stuff.)  I also wish that we could just get rid of setFields() altogether, relying on the constructor.&lt;/p&gt;</comment>
                            <comment id="12828211" author="cutting" created="Mon, 1 Feb 2010 18:33:41 +0000"  >&lt;p&gt;Thiru: does wrapping these not affect performance?  Many operations iterate over fields or lookup enum symbols.  The immutable wrapper adds another method call to each such operation.&lt;/p&gt;

&lt;p&gt;Philip&amp;gt; I also wish that we could just get rid of setFields() altogether, relying on the constructor.&lt;/p&gt;

&lt;p&gt;The problem is that, since schemas can be circular, we need to create it first, so that we can point back to it from its fields.  So, in general, we&apos;d need to make constructors for schemas with nested schemas (records, maps, arrays) accept names for these schemas instead of the actual schemas, and resolve these later, as a fixup pass.  So it would still be a two-step API: constructor &amp;amp; fixup.  The fixup could be done lazily, but that would insert runtime checks.&lt;/p&gt;</comment>
                            <comment id="12828220" author="scott_carey" created="Mon, 1 Feb 2010 18:52:53 +0000"  >&lt;blockquote&gt;&lt;p&gt;Thiru: does wrapping these not affect performance? Many operations iterate over fields or lookup enum symbols. The immutable wrapper adds another method call to each such operation. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Generally, if the wrapper is very simple then the JIT is good at in-lining these making the wrapper &apos;free&apos;.  So if its just wrapping the List api, delegating read methods and blocking write methods it usually will be fine other than the extra object allocation for the wrapper, which is less important.  &lt;br/&gt;
Inlining can get tripped up in a few cases &amp;#8211; Interfaces are much harder to inline, and polymorphic methods with more than two variations detected at runtime are not inlined, so don&apos;t get fancy.&lt;/p&gt;

&lt;p&gt;Either way, this should be easy to test.&lt;/p&gt;</comment>
                            <comment id="12828335" author="kevinoliver" created="Mon, 1 Feb 2010 23:43:35 +0000"  >&lt;p&gt;Yep, this looks like a good step. Thanks.&lt;/p&gt;

&lt;p&gt;Regarding setFields(), the only real implementor of it is in RecordSchema. Wouldn&apos;t passing in the fields LinkedHashMap into the constructor work? The constructor would still do what it does today, but then, after the call to the Schema&apos;s constructor, it would just do the code that is in setFields() inside its constructor. I think this is more or less equivalent to what exists today, but would let you make RecordSchema&apos;s member variables immutable and final.&lt;/p&gt;

&lt;p&gt;As Philip points out, due to setProp(), it still isn&apos;t immutable. To solve this, we could add a Map&amp;lt;String,String&amp;gt; argument to all the variants of Schema.createXXX(). We aren&apos;t using setProp() too much, so I&apos;m not sure if this would work for all use cases, but would for our simple examples.&lt;/p&gt;

&lt;p&gt;If putting this in a patch would help, I should have time this week.&lt;/p&gt;</comment>
                            <comment id="12828354" author="cutting" created="Tue, 2 Feb 2010 00:09:49 +0000"  >&lt;p&gt;&amp;gt; Wouldn&apos;t passing in the fields LinkedHashMap into the constructor work?&lt;/p&gt;

&lt;p&gt;That map needs to be able to contain pointers back to this instance.  E.g.:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;StringList&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;value&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;},  
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;next&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;StringList&quot;&lt;/span&gt;}
]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A way to fix this would be to add a RecordSchema constructor that accepts a JsonNode and a Names, that includes the logic of the &apos;if (type.equals(&quot;record&quot;)&apos; clause in Schema#parse(JsonNode,Names).  Then the new instance could be added to the Names before the constructor had returned, and referenced in recursive calls to parse().  However this would then require, e.g., genavro to construct a JsonNode to create a record schema, rather than directly construct one.&lt;/p&gt;

&lt;p&gt;As for setProp(), that could be changed to return a new schema with that property set.  This would need to walk the tree, copying while replacing pointers to the top-level schema whose properties are being modified.&lt;/p&gt;</comment>
                            <comment id="12828375" author="kevinoliver" created="Tue, 2 Feb 2010 00:54:01 +0000"  >&lt;p&gt;Gotcha, thanks Doug. Didn&apos;t grok your earlier comments on recursive schema references. Not sure if its worth the effort then, sounds like a bit of a hassle.&lt;/p&gt;</comment>
                            <comment id="12828615" author="thiru_mg" created="Tue, 2 Feb 2010 13:17:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;does wrapping these not affect performance? Many operations iterate over fields or lookup enum symbols. The immutable wrapper adds another method call to each such operation. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;One of the heavy users of schema is GenericDatumReader (prior to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-388&quot; title=&quot;Using ResolvingDecoder in GenericDatumReader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-388&quot;&gt;&lt;del&gt;AVRO-388&lt;/del&gt;&lt;/a&gt;). On my machine the performance of AvroGenericReader went down by 8 - 15%, depending on the kind of schema resolution used. Though the impact on GenericDatumReader will come down with &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-388&quot; title=&quot;Using ResolvingDecoder in GenericDatumReader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-388&quot;&gt;&lt;del&gt;AVRO-388&lt;/del&gt;&lt;/a&gt;, other users such as GenericDatumWriter will get affected.&lt;/p&gt;

&lt;p&gt;I don&apos;t see an easy way out. In order to avoid exposing the collections directly to the clients, we may add methods like iterator(), get() etc. in the Schema itself. But then we&apos;ll have the very same problem as the unmodifiable wrappers.&lt;/p&gt;

&lt;p&gt;With this kind of performance impact I&apos;m reluctant to push this patch.&lt;/p&gt;

&lt;p&gt;On the issue of setProp(),  will replacing it with addProp() (meaning one is allowed to add new properties to a schema, but not remove or replace existing properties) help? This is not quite immutability. But I don&apos;t think any code will be affected because of additional properties added.&lt;/p&gt;</comment>
                            <comment id="12828676" author="philip" created="Tue, 2 Feb 2010 17:30:57 +0000"  >&lt;p&gt;If dynamic schema generation is going to be a frequent use case, one of those builders that lets you chain things together might be nice.  Something like:&lt;/p&gt;

&lt;p&gt;SchemaBuilder.newUnionSchema().addElement(...).setDoc(&quot;....&quot;).addElement(SchemaBuilder.intSchema()).finish();&lt;/p&gt;

&lt;p&gt;Might be too over-wrought for what we&apos;re talking about now, though.&lt;/p&gt;</comment>
                            <comment id="12828679" author="scott_carey" created="Tue, 2 Feb 2010 17:44:09 +0000"  >&lt;p&gt;Another read-only design pattern is a bit unusual but perhaps performs better than the wrapper:&lt;/p&gt;

&lt;p&gt;A parent class is mutable, and its child class is immutable. package protected methods can pass around the mutable version, and cast freely between them.&lt;/p&gt;

&lt;p&gt;Essentially, create &apos;ImmutableArrayList extends ArrayList&apos; as the return type of the getters.  A user &lt;em&gt;could&lt;/em&gt; cast up to ArrayList and set it, but that would break the contract and wouldn&apos;t happen by accident.&lt;br/&gt;
If ImmutableArrayList isn&apos;t passed in when set, the mutable List passed in would have to be copied to an ImmutableArrayList.&lt;/p&gt;

&lt;p&gt;If most of the methods inside these classes operates on ImmutableArrayList directly instead of the List interface, performance may also go up a little. However, use of this concrete class internally needs to be carefully coordinated with the public API.&lt;/p&gt;
</comment>
                            <comment id="12828947" author="thiru_mg" created="Wed, 3 Feb 2010 05:14:56 +0000"  >&lt;p&gt;Perhaps a better approach (inspired by Scott&apos;s) is:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Have a subclass of ArrayList called LockableArrayList, In that&lt;/li&gt;
	&lt;li&gt;Have a boolean field &lt;em&gt;locked&lt;/em&gt;, which is initially set to &lt;em&gt;false&lt;/em&gt;.&lt;/li&gt;
	&lt;li&gt;Have a void method lock(), which sets &lt;em&gt;locked&lt;/em&gt; to &lt;em&gt;true&lt;/em&gt;.&lt;/li&gt;
	&lt;li&gt;Override mutating methods of ArrayList, which will call the ArrayList&apos;s corresponding method if &lt;em&gt;locked&lt;/em&gt; is &lt;em&gt;false&lt;/em&gt;. If &lt;em&gt;locked&lt;/em&gt; is &lt;em&gt;true&lt;/em&gt;, these methods would throw.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Use LockableArrayList instead of ArrayList. After fully constructing the container of the LockableArrayList, lock it.&lt;/p&gt;

&lt;p&gt;What do we do with iterator() method? Fortunately only mutating method of Iterator, remove, calls remove on the container. So one can remove things using iterator if the container is not locked; if the container is locked, remove() on the iterator would throw.&lt;/p&gt;

&lt;p&gt;There is no change to the public interface of Schema. There is minimal performance overhead during construction.&lt;/p&gt;

&lt;p&gt;A similar approach however doesn&apos;t work well with LinkedHashMap. For maps we have too many ways of modifying contents:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Through map&apos;s put(), putAll(), remove() and clear().&lt;/li&gt;
	&lt;li&gt;Through clear() of entrySet(), keySet() and valueSet().&lt;/li&gt;
	&lt;li&gt;Through remove(), removeAll(), retainAll() of entrySet(), keySet() and valueSet().&lt;/li&gt;
	&lt;li&gt;Through remove() method of iterator() of entrySet(), keySet() and valueSet().&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The technique above works for the first two but not with the last two. Sad!&lt;/p&gt;

</comment>
                            <comment id="12829153" author="philip" created="Wed, 3 Feb 2010 17:34:00 +0000"  >&lt;p&gt;How about &lt;a href=&quot;http://google-collections.googlecode.com/svn/trunk/javadoc/com/google/common/collect/ImmutableMap.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://google-collections.googlecode.com/svn/trunk/javadoc/com/google/common/collect/ImmutableMap.html&lt;/a&gt;  ?  There&apos;s an ImmutableList in there as well.  The implementations seem to be &quot;RegularX&quot;, e.g., &lt;a href=&quot;http://www.google.com/codesearch/p?hl=en#YXcrkXezIpQ/trunk/src/com/google/common/collect/RegularImmutableList.java&amp;amp;q=immutablelist.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.google.com/codesearch/p?hl=en#YXcrkXezIpQ/trunk/src/com/google/common/collect/RegularImmutableList.java&amp;amp;q=immutablelist.java&lt;/a&gt; .&lt;/p&gt;
</comment>
                            <comment id="12829161" author="cutting" created="Wed, 3 Feb 2010 17:53:14 +0000"  >&lt;p&gt;Philip, Google&apos;s ImmutableMap and ImmutableList look good: they should be fast and the map ordering is retained.&lt;/p&gt;</comment>
                            <comment id="12829940" author="thiru_mg" created="Fri, 5 Feb 2010 03:31:23 +0000"  >&lt;p&gt;Google&apos;s immutablemap seems promising. But I think I found a solution without using immutable maps.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-388&quot; title=&quot;Using ResolvingDecoder in GenericDatumReader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-388&quot;&gt;&lt;del&gt;AVRO-388&lt;/del&gt;&lt;/a&gt; added the &lt;em&gt;name&lt;/em&gt; field to &lt;em&gt;Schema.Field&lt;/em&gt;. Schema.getFields(), which is a &lt;em&gt;LinkedHashMap&amp;lt;String, Field&amp;gt;&lt;/em&gt; is used for two purposes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;To iterate over the Fields. Since the &lt;em&gt;Field&lt;/em&gt; now has name, this use can be handled by a &lt;em&gt;List&amp;lt;Field&amp;gt;&lt;/em&gt;. That is &lt;em&gt;getFields()&lt;/em&gt; can return &lt;em&gt;List&amp;lt;Field&amp;gt;&lt;/em&gt;.&lt;/li&gt;
	&lt;li&gt;To get the Field for a given fieldname. This is a much less frequent use case. This can be achieved by adding a &lt;em&gt;getField(String)&lt;/em&gt; method in &lt;em&gt;Schema&lt;/em&gt;. To implement it, we&apos;ll can a Map&amp;lt;String, Field&amp;gt; inside &lt;em&gt;RecordSchema&lt;/em&gt;, but this map is not exposed outside &lt;em&gt;RecordSchema&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The &lt;em&gt;getFieldSchemas()&lt;/em&gt; method is longer required as its purpose can be served by the two methods (&lt;em&gt;List&amp;lt;Field&amp;gt; getFields()&lt;/em&gt; and &lt;em&gt;Field getField(String)&lt;/em&gt; above.&lt;/p&gt;

&lt;p&gt;As a consequence &lt;em&gt;setFields()&lt;/em&gt; can now take a &lt;em&gt;List&amp;lt;Field&amp;gt;&lt;/em&gt; instead of &lt;em&gt;LinkedHashMap&amp;lt;String, Field&amp;gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To solve the problem with setProp(), I renamed it to addProp() and changed its semantics to allow only addition of new properties (no deletion or update)&lt;/p&gt;

&lt;p&gt;It turns out that the code in many places have become simpler with these changes.&lt;/p&gt;

&lt;p&gt;There is no performance impact. I tested with both pre- and post-&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-388&quot; title=&quot;Using ResolvingDecoder in GenericDatumReader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-388&quot;&gt;&lt;del&gt;AVRO-388&lt;/del&gt;&lt;/a&gt; GenericDatumReader.&lt;/p&gt;</comment>
                            <comment id="12830470" author="philip" created="Sat, 6 Feb 2010 05:29:53 +0000"  >&lt;p&gt;A few problems with the current patch:&lt;/p&gt;

&lt;p&gt;LockableIArrayList isn&apos;t:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; @Test
  public void testLockStuff() {
    LockableArrayList&amp;lt;Integer&amp;gt; x = new LockableArrayList&amp;lt;Integer&amp;gt;();
    x.add(13);
    x.lock();
    Iterator&amp;lt;Integer&amp;gt; y = x.iterator();
    y.next();
    y.remove(); // this doesn&apos;t fail
    // this isn&apos;t true
    assertEquals(1, x.size());
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Yes, Java&apos;s List interface is porous left and right.  If there are serious objections to depending on another jar (and I get that), let&apos;s just lift Google&apos;s ImmutableList implementation (it&apos;s apache-licensed).&lt;/p&gt;

&lt;p&gt;Also, this patch breaks GenAvro.  GenAvro.java is generated by JavaCC, so if you changed that locally, the change didn&apos;t get propagated.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12830491" author="thiru_mg" created="Sat, 6 Feb 2010 07:55:07 +0000"  >&lt;p&gt;Good catch. I failed to override remove(int) method. The latest patch fixes that.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If there are serious objections to depending on another jar (and I get that), let&apos;s just lift Google&apos;s ImmutableList implementation (it&apos;s apache-licensed).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m not so much against Google&apos;s jar. But I&apos;m reluctant to add a jar just for this single purpose. &lt;span class=&quot;error&quot;&gt;&amp;#91;Though this patch is large, the changes due to LockableArrayList is quite small. The rest are cleaning up of the Schema&amp;#39;s public interface. I think the new interface is better irrespective of LockableArrayList.&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also, this patch breaks GenAvro. GenAvro.java is generated by JavaCC, so if you changed that locally, the change didn&apos;t get propagated.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I did update GenAvro.jj. By any chance your build didn&apos;t Javacc?&lt;/p&gt;</comment>
                            <comment id="12831058" author="cutting" created="Mon, 8 Feb 2010 19:17:56 +0000"  >&lt;p&gt;The List-based fields interface is indeed an improvement, since iterating over maps is awkard in Java.  +1 for that.&lt;/p&gt;

&lt;p&gt;One nit: I prefer the name LockableList to LockableArrayList.  Otherwise I&apos;m okay with this patch.&lt;/p&gt;

&lt;p&gt;An standalone List implementation might be more clearly immutable than one based on ArrayList.  But the Google collections jar is over 500k, which would make, e.g., the tools jar that much bigger.  Copying just the ImmutableList code into this project could be a little tricky, since its not a single, standalone file.  Philip, do you want to construct a patch that copies the minimal code from Google, building a standalone ImmutableList that&apos;s not based on ArrayList?&lt;/p&gt;</comment>
                            <comment id="12831280" author="thiru_mg" created="Tue, 9 Feb 2010 03:40:56 +0000"  >&lt;p&gt;Added documentation to about immutability. I retained the name LockableArrayList as it is indeed based on the ArrayList. In any case the name is not needed outside Schema class, so the name can be changed anytime without affecting others. (It is not private only because we have unit-tests on it).&lt;/p&gt;

&lt;p&gt;Thanks Doug, Philip, Kevin and Scott for your contribution.&lt;/p&gt;

&lt;p&gt;Committed revision 907913.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12435074" name="AVRO-261.patch" size="43453" author="thiru_mg" created="Sat, 6 Feb 2010 07:55:07 +0000"/>
                            <attachment id="12434923" name="AVRO-261.patch" size="46207" author="thiru_mg" created="Fri, 5 Feb 2010 03:31:23 +0000"/>
                            <attachment id="12434392" name="AVRO-261.patch" size="2024" author="thiru_mg" created="Mon, 1 Feb 2010 15:14:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 1 Feb 2010 14:47:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94588</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 50 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dz8v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79640</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
