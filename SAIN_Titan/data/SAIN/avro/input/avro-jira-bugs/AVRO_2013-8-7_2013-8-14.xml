<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:19:03 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2013-8-7+AND+created+%3C%3D+2013-8-14+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="1" total="1"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1360] C++ Resolving decoder is not working when reader schema has more fields than writer schema</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1360</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;When reader schema has more number of fields than writer schema, C++ implementation of resolving decoder is throwing exception &quot;throwing exception &quot;Don&apos;t know how to handle excess fields for reader.&#8221; with out checking whether fields are optional or fields have default values.&lt;/p&gt;

&lt;p&gt;Attached are reader and writer schemas. Record in reader schema has 2 additional fields than writer schema. One field is required field but it has default value and another one is optional field (union of null and string). Since one has default value and another is optional both reader and writer schemas are supposed to be compatible. &lt;/p&gt;

{&quot;name&quot;: &quot;defaultField&quot;, &quot;type&quot;: &quot;string&quot;, &quot;default&quot;: &quot;DEFAULT&quot;, &quot;declared&quot;:&quot;true&quot;}
&lt;p&gt;,     &lt;/p&gt;
{&quot;name&quot;: &quot;optionalField&quot;, &quot;type&quot;: [&quot;string&quot;, &quot;null&quot;],&quot;declared&quot;:&quot;true&quot;}
&lt;p&gt;,&lt;/p&gt;

&lt;p&gt;main()&lt;br/&gt;
{&lt;br/&gt;
  avro::ValidSchema readerSchema = load(&quot;reader.json&quot;);&lt;br/&gt;
  avro::ValidSchema writerSchema = load(&quot;writer.json&quot;);&lt;br/&gt;
  avro::DecoderPtr d = avro::resolvingDecoder(writerSchema, readerSchema,avro::binaryDecoder());&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;But when I tried to create resolving decoder, I am getting &quot;Don&apos;t know how to handle excess fields for reader.&#8221; But Java implementation works.  &lt;/p&gt;

&lt;p&gt;Can you please let us know if there are any other limitations with c++ implementation of ResolvingDecoder? We are planning to use it in our project and we want to make sure it works as per avro specification.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12663217">AVRO-1360</key>
            <summary>C++ Resolving decoder is not working when reader schema has more fields than writer schema</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="thiru_mg">Thiruvalluvan M. G.</assignee>
                                    <reporter username="ramanasv">Ramana Suvarapu</reporter>
                        <labels>
                    </labels>
                <created>Mon, 12 Aug 2013 14:06:55 +0000</created>
                <updated>Fri, 28 Dec 2018 16:28:58 +0000</updated>
                            <resolved>Tue, 25 Mar 2014 18:32:54 +0000</resolved>
                                    <version>1.7.4</version>
                                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13744935" author="thiru_mg" created="Tue, 20 Aug 2013 13:02:43 +0000"  >&lt;p&gt;This patch enables AVRO C++ to handle schema resolution.&lt;/p&gt;</comment>
                            <comment id="13751124" author="thiru_mg" created="Tue, 27 Aug 2013 09:45:40 +0000"  >&lt;p&gt;I&apos;ll commit this soon unless there are objections or suggestions for improvement.&lt;/p&gt;</comment>
                            <comment id="13754105" author="ramanasv" created="Thu, 29 Aug 2013 21:56:34 +0000"  >&lt;p&gt;Compilation errors when because of undefined int32_t, int64_t types in GenericDatum.hh file. I had to add manually add #include &amp;lt;stdint.h&amp;gt; to fix the problem.&lt;/p&gt;</comment>
                            <comment id="13755000" author="thiru_mg" created="Fri, 30 Aug 2013 18:48:25 +0000"  >&lt;p&gt;Ramana,&lt;/p&gt;

&lt;p&gt;I suppose you added &lt;tt&gt;#include &amp;lt;stdint.h&amp;gt;&lt;/tt&gt; in &lt;tt&gt;GenericDatum.hh&lt;/tt&gt;. Am I right?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="13755017" author="ramanasv" created="Fri, 30 Aug 2013 18:56:44 +0000"  >&lt;p&gt;Yes.&lt;/p&gt;</comment>
                            <comment id="13755019" author="ramanasv" created="Fri, 30 Aug 2013 18:57:10 +0000"  >&lt;p&gt;Hi Thiru,&lt;/p&gt;

&lt;p&gt;I tested the &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1360&quot; title=&quot;C++ Resolving decoder is not working when reader schema has more fields than writer schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1360&quot;&gt;&lt;del&gt;AVRO-1360&lt;/del&gt;&lt;/a&gt; and it fixed only &quot;Don&apos;t know how to handle excess fields for reader.&#8221;  error and handling the default values. But resolving decoder functionality is not working as per avro specification. Here are the issues I noticed when testing.&lt;/p&gt;

&lt;p&gt;1)	If the field ordering of writer schema and reader schema is different, resolving decoder is unable to decode and it&#8217;s throwing exception.&lt;br/&gt;
2)	If one of the additional field of reader schema is optional field &lt;span class=&quot;error&quot;&gt;&amp;#91;null, string&amp;#93;&lt;/span&gt;, while decoding this optional field to null, resolving decoder is throwing exceptions.&lt;/p&gt;


&lt;p&gt;Please find the attached schemas and sample c++ program that I tried to re-produce this issue. The same schema works fine in Java.&lt;/p&gt;


&lt;p&gt;void testResolvingDecoder()&lt;br/&gt;
{&lt;br/&gt;
	const char *reader = &quot;C:\\temp&lt;br class=&quot;atl-forced-newline&quot; /&gt;testreader&quot;;&lt;br/&gt;
	const char *writer = &quot;C:\\temp\tempwriter;&lt;br/&gt;
	avro::ValidSchema readerSchema = load(reader);&lt;br/&gt;
	avro::ValidSchema writerSchema = load(writer);&lt;/p&gt;

&lt;p&gt;	std::auto_ptr&amp;lt;avro::OutputStream&amp;gt; out = avro::memoryOutputStream();&lt;br/&gt;
      avro::EncoderPtr e = avro::binaryEncoder();&lt;br/&gt;
     e-&amp;gt;init(*out);&lt;br/&gt;
	writer::MyRecord wr;&lt;br/&gt;
	wr.kind = writer::Kind::FOO;&lt;br/&gt;
	wr.name = &quot;Foo&quot;;&lt;br/&gt;
	wr.longType = 999;&lt;br/&gt;
	wr.floatType = 10.25;&lt;br/&gt;
	wr.doubleType = 20.23;&lt;br/&gt;
	wr.extra = &quot;extra&quot;;&lt;br/&gt;
	wr.hash.empty();&lt;br/&gt;
	wr.arrayTest.empty();&lt;br/&gt;
	wr.mapTest.empty();&lt;br/&gt;
	wr.unionTest1 = &quot;union1&quot;;&lt;br/&gt;
	wr.unionTest2.set_Kind(writer::Kind::BAZ);&lt;/p&gt;


&lt;p&gt;	avro::encode(*e, wr);&lt;br/&gt;
	std::auto_ptr&amp;lt;avro::InputStream&amp;gt; in = avro::memoryInputStream(*out);&lt;br/&gt;
	avro::DecoderPtr d = avro::resolvingDecoder(writerSchema, readerSchema,avro::binaryDecoder());&lt;/p&gt;

&lt;p&gt;	d-&amp;gt;init(*in);&lt;br/&gt;
	reader::MyRecord rr;&lt;br/&gt;
	avro::decode(*d, rr);&lt;br/&gt;
}&lt;/p&gt;


&lt;p&gt;Thanks,&lt;br/&gt;
Ramana&lt;/p&gt;</comment>
                            <comment id="13755467" author="thiru_mg" created="Sat, 31 Aug 2013 09:58:42 +0000"  >&lt;p&gt;Ramana,&lt;/p&gt;

&lt;p&gt;Great catch. The trouble was not in the resolver, but in the code generator. While resolving the user of &lt;tt&gt;ResolvingDecoder&lt;/tt&gt; must adjust itself for field ordering. The generated code was not doing that.&lt;/p&gt;

&lt;p&gt;The new patch fixes it. Unfortunately, the generated code now becomes even larger than then the previous one.&lt;/p&gt;

&lt;p&gt;Thank you for testing it.&lt;/p&gt;</comment>
                            <comment id="13757442" author="ramanasv" created="Wed, 4 Sep 2013 03:54:10 +0000"  >&lt;p&gt;Patch seems to be working. But I still need to test couple of scenarios and I will let you know.&lt;/p&gt;</comment>
                            <comment id="13758281" author="ramanasv" created="Wed, 4 Sep 2013 20:11:43 +0000"  >&lt;p&gt;Hi Thiru,&lt;/p&gt;

&lt;p&gt;I am trying to generate code for below record schema with one of the field is union type and it has default value null. During the compileJsonSchema phase, avrogencpp crashes due to &#8220;Access violation writing location 0x0000000000000000&#8221;.&lt;/p&gt;

&lt;p&gt;I debugged the code and there is a bug in void selectBranch(size_t branch, const T&amp;amp; v) of GenericUnion and GenericDatum(const NodePtr&amp;amp; schema, const T&amp;amp; v) constructor when dealing with null types.&lt;/p&gt;

&lt;p&gt;{&lt;br/&gt;
  &quot;type&quot; : &quot;record&quot;,&lt;br/&gt;
  &quot;name&quot; : &quot;MyRecord&quot;,&lt;br/&gt;
  &quot;namespace&quot; : &quot;com.baml.gmrt.messaging.avro.tester&quot;,&lt;br/&gt;
  &quot;fields&quot; : [ &lt;/p&gt;
{
    &quot;name&quot; : &quot;unionTest1&quot;,
    &quot;type&quot; : [ &quot;string&quot;, &quot;null&quot; ],
                &quot;default&quot;: null,
                &quot;declared&quot; : &quot;true&quot;
  }
&lt;p&gt;]&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;This is a blocker for us as our schema as lot of union type fields with null default values. Please fix this issue at the earliest. I attached sample schema and to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1360&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1360&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Ramana&lt;/p&gt;</comment>
                            <comment id="13758284" author="ramanasv" created="Wed, 4 Sep 2013 20:14:54 +0000"  >&lt;p&gt;Please use attached testreader-1, testwriter-2 versions to test the resolving decoder functionaliy. reader schema as 2 addional fields with default types. 1) string type with default value and 2) union type &lt;span class=&quot;error&quot;&gt;&amp;#91;string, null&amp;#93;&lt;/span&gt; with default value null.&lt;/p&gt;</comment>
                            <comment id="13762317" author="thiru_mg" created="Mon, 9 Sep 2013 21:22:49 +0000"  >&lt;p&gt;Ramana,&lt;/p&gt;

&lt;p&gt;Please have a look at the latest. I think the problem is fixed.&lt;/p&gt;</comment>
                            <comment id="13782541" author="roehrss" created="Tue, 1 Oct 2013 01:40:49 +0000"  >&lt;p&gt;First - thanks for the work in getting this part of Avro working for C++. It always appears to be the poor cousin of the Java implementation, and I appreciate the time that you&apos;ve put into this patch (especially after trying to tackle it myself once, and failing!)&lt;/p&gt;

&lt;p&gt;Basic schema resolution seems to working fine for me now, using default values. More troubling to me is that I think there is an issue with correct resolution of enums.  &lt;/p&gt;

&lt;p&gt;My writer schema has a type like this :&lt;/p&gt;

&lt;p&gt;{&lt;br/&gt;
&quot;type&quot; : &quot;enum&quot;,&lt;br/&gt;
&quot;name&quot; : &quot;foo&quot;,&lt;br/&gt;
&quot;symbols&quot; : [&lt;br/&gt;
  &quot;charlie&quot;,&lt;br/&gt;
  &quot;delta&quot;,&lt;br/&gt;
  &quot;echo&quot;&lt;br/&gt;
]&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;The reader schema looks like this ;&lt;br/&gt;
{&lt;br/&gt;
&quot;type&quot; : &quot;enum&quot;,&lt;br/&gt;
&quot;name&quot; : &quot;foo&quot;,&lt;br/&gt;
&quot;symbols&quot; : [&lt;br/&gt;
  &quot;alpha&quot;,&lt;br/&gt;
  &quot;bravo&quot;,&lt;br/&gt;
  &quot;charlie&quot;,&lt;br/&gt;
  &quot;delta&quot;,&lt;br/&gt;
  &quot;echo&quot;&lt;br/&gt;
]&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;When I write a value &apos;charlie&apos; to my data file, and read it back using the resolving decoder (DataFileReader&amp;lt;avro::GenericDatum&amp;gt; reader(filename, readerSchema) - I get the value &apos;alpha&apos; not the &apos;charlie&apos;  that I expect. &lt;/p&gt;

&lt;p&gt;GenericEnum::value() returns a 0, and GenericEnum::symbol() returns &apos;alpha&apos; - so it&apos;s clearly using the reader schema, but not remapping the value as part of the schema resolution process. &lt;/p&gt;

&lt;p&gt;Sorry I don&apos;t have a full test case I can send you, I&apos;m unable to export anything from my development system.&lt;/p&gt;

&lt;p&gt;Should this be raised as a separate issue?&lt;/p&gt;</comment>
                            <comment id="13784242" author="ramanasv" created="Wed, 2 Oct 2013 18:23:37 +0000"  >&lt;p&gt;Hi Thiru,&lt;/p&gt;

&lt;p&gt;I did some investigation to find out the root cause for the slowness of resolving decoder and why it&#8217;s taking huge memory when dealing with larger schemas. When I tried ResolvingDecoder using our schema, ValidatingGrammer::generate step is taking forever and after 2 to 3  minutes it&#8217;s taking the entire  memory of the system and method never returns. Here is the task manager image during the ValidatingGrammer::generate step. &lt;/p&gt;

&lt;p&gt;I debugged the code and from the call stack I noticed that huge amount of time and memory is being spent during boost::any and std::vector operations, constructors, destructors . Currently Production, RootInfo and RepeaterInfo are type-define as&lt;/p&gt;

&lt;p&gt;typedef std::vector&amp;lt;Symbol&amp;gt; Production;&lt;br/&gt;
typedef boost::tuple&amp;lt;size_t, bool, Production, Production&amp;gt; RepeaterInfo;&lt;br/&gt;
typedef boost::tuple&amp;lt;Production, Production&amp;gt; RootInfo;&lt;br/&gt;
Since each of these collection stores Objects, lot of temporary objects are being created and destructed. Please find the attached call-stack for more information.&lt;/p&gt;

&lt;p&gt;I modified Production, RepeaterInfo and Rootinfo collections to store shared_ptrs instead of Objects and modified the decoder code accordingly and when I ran the program, ValidatingGrammer::generate performed fast and  return the result within few milliseconds (less than 10 ms).&lt;/p&gt;

&lt;p&gt;typedef std::vector&amp;lt;boost::shared_ptr&amp;lt;Symbol&amp;gt;&amp;gt; Production;&lt;br/&gt;
typedef boost::tuple&amp;lt;size_t, bool, boost::shared_ptr&amp;lt;Production&amp;gt;, boost::shared_ptr&amp;lt;Production&amp;gt;&amp;gt; RepeaterInfo;&lt;br/&gt;
typedef boost::tuple&amp;lt;boost::shared_ptr&amp;lt;Production&amp;gt;, boost::shared_ptr&amp;lt;Production&amp;gt;&amp;gt; RootInfo;&lt;/p&gt;

&lt;p&gt;I created a patch for my changes and attached in this email. Please take a look and let me know your thoughts on the changes.&lt;/p&gt;

&lt;p&gt;After these changes, ResolvingGrammarGenerator::generate() is getting executed faster.&lt;/p&gt;

&lt;p&gt;Another biggest bottle neck is fixup method() and which is taking lot of time when production vector has lot of nested symbols.&lt;br/&gt;
What is the significance of recursive method fixup()? This method is also taking long time to execute. Can you please let me how this method works? Is there anyway it can be improved?&lt;/p&gt;
</comment>
                            <comment id="13792711" author="thiru_mg" created="Fri, 11 Oct 2013 15:21:04 +0000"  >&lt;p&gt;Ramana,&lt;/p&gt;

&lt;p&gt;I think the current patch fixes the problems you have been encountering. It caches most of its work. So a lot of repeated resolutions within a single schema should be fast. Please let us know whether you still have slowness issues. Thanks&lt;/p&gt;</comment>
                            <comment id="13811870" author="thiru_mg" created="Sat, 2 Nov 2013 04:32:06 +0000"  >&lt;p&gt;This patch fixes a typo and a related bug&lt;/p&gt;</comment>
                            <comment id="13850066" author="ramanasv" created="Tue, 17 Dec 2013 03:30:31 +0000"  >&lt;p&gt;Hi Thiru,&lt;/p&gt;

&lt;p&gt;Finally I am able rep huge memory leak issue with large test schema. Attached is test schema (model.avsc). Try to create ValidatingDecoder and you can see that program hangs and memory grows forever.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Ramana&lt;/p&gt;

&lt;p&gt;testValidatingDecoder()&lt;br/&gt;
{&lt;br/&gt;
    ValidSchema s;&lt;br/&gt;
    ifstream ifs(&quot;c:\\temp&lt;br class=&quot;atl-forced-newline&quot; /&gt;model.avsc&quot;);&lt;br/&gt;
    compileJsonSchema(ifs, s);&lt;br/&gt;
   DecoderPtr d = validatingDecoder(s, binaryDecoder());&lt;br/&gt;
}&lt;/p&gt;


&lt;p&gt;}&lt;/p&gt;</comment>
                            <comment id="13918481" author="ramanasv" created="Mon, 3 Mar 2014 19:33:03 +0000"  >&lt;p&gt;This patch can&apos;t be applied to latest trunk. Lot of changes were introduced since creation of this patch. Also this JIRA can be closed as new JIRA is created to track this issue&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1474&quot; title=&quot;C++ resolving decoder doesn&amp;#39;t work when reader schema has more fields than writer schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1474&quot;&gt;&lt;del&gt;AVRO-1474&lt;/del&gt;&lt;/a&gt; C++ resolvind decoder doesn&apos;t work when reader schema has more fields than writer schema&lt;/p&gt;</comment>
                            <comment id="13946914" author="thiru_mg" created="Tue, 25 Mar 2014 18:32:54 +0000"  >&lt;p&gt;The patches for this JIRA have become stale because the codebase have moved. &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1474&quot; title=&quot;C++ resolving decoder doesn&amp;#39;t work when reader schema has more fields than writer schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1474&quot;&gt;&lt;del&gt;AVRO-1474&lt;/del&gt;&lt;/a&gt; tracks this issue anew.&lt;/p&gt;</comment>
                            <comment id="16730360" author="thiru_mg" created="Fri, 28 Dec 2018 16:28:58 +0000"  >&lt;p&gt;Closing the issues that got resolved in earlier releases&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12600939" name="AVRO-1360-2.patch" size="65629" author="thiru_mg" created="Sat, 31 Aug 2013 09:58:42 +0000"/>
                            <attachment id="12602211" name="AVRO-1360-3.patch" size="66838" author="thiru_mg" created="Mon, 9 Sep 2013 21:22:11 +0000"/>
                            <attachment id="12608016" name="AVRO-1360-4.patch" size="84421" author="thiru_mg" created="Fri, 11 Oct 2013 15:21:04 +0000"/>
                            <attachment id="12611741" name="AVRO-1360-5.patch" size="85407" author="thiru_mg" created="Sat, 2 Nov 2013 04:32:06 +0000"/>
                            <attachment id="12598942" name="AVRO-1360.patch" size="58050" author="thiru_mg" created="Tue, 20 Aug 2013 13:02:43 +0000"/>
                            <attachment id="12606405" name="AVRO-RD.patch" size="84377" author="ramanasv" created="Wed, 2 Oct 2013 18:28:03 +0000"/>
                            <attachment id="12606406" name="callstack.txt" size="83291" author="ramanasv" created="Wed, 2 Oct 2013 18:28:03 +0000"/>
                            <attachment id="12619030" name="model.avsc" size="385753" author="ramanasv" created="Tue, 17 Dec 2013 03:33:14 +0000"/>
                            <attachment id="12600833" name="testreader" size="1862" author="ramanasv" created="Fri, 30 Aug 2013 18:59:01 +0000"/>
                            <attachment id="12601459" name="testreader-1" size="1877" author="ramanasv" created="Wed, 4 Sep 2013 20:38:26 +0000"/>
                            <attachment id="12600831" name="testreader.hh" size="4419" author="ramanasv" created="Fri, 30 Aug 2013 18:59:01 +0000"/>
                            <attachment id="12600834" name="testwriter" size="1334" author="ramanasv" created="Fri, 30 Aug 2013 18:59:01 +0000"/>
                            <attachment id="12601460" name="testwriter-1" size="1241" author="ramanasv" created="Wed, 4 Sep 2013 20:38:53 +0000"/>
                            <attachment id="12600832" name="testwriter.hh" size="4344" author="ramanasv" created="Fri, 30 Aug 2013 18:59:01 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 20 Aug 2013 13:02:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>343218</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1n6uf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>343522</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
