<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:19:59 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2014-2-25+AND+created+%3C%3D+2014-3-4+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="9" total="9"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1466] Avro Tools fromjson (ie JsonDecoder) cannot parse &quot;NaN&quot; values created by tojson (ie JsonEncoder)</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1466</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Avro files containing NaN values are converted to JSON as a string &quot;NaN&quot; by Avro Tools tojson command (ie JsonEncoder).  These values cannot be parsed by the Avro Tools fromjson command (ie JsonDecoder.readDouble).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12697160">AVRO-1466</key>
            <summary>Avro Tools fromjson (ie JsonDecoder) cannot parse &quot;NaN&quot; values created by tojson (ie JsonEncoder)</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jfolson">Jamie Olson</reporter>
                        <labels>
                    </labels>
                <created>Tue, 25 Feb 2014 17:49:42 +0000</created>
                <updated>Sun, 30 Dec 2018 04:17:18 +0000</updated>
                                            <version>1.7.6</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13934137" author="cutting" created="Thu, 13 Mar 2014 21:43:36 +0000"  >&lt;p&gt;The fundamental problem is that JSON does not support NaN or Infinity values.&lt;/p&gt;

&lt;p&gt;One might automatically convert the strings, &quot;NaN&quot;, &quot;Infinity&quot;, and &quot;-Infinity&quot; to numbers.  This could cause some odd surprises, so should probably be avoided.&lt;/p&gt;

&lt;p&gt;Instead we could configure Jackson (the JSON parser/printer library we use) to print and these, producing invalid JSON.  But we should only do this as an option, so that we continue to generate valid JSON by default.  So we might add a &apos;--nan&apos; option to the &apos;tojson&apos; and &apos;fromjson&apos; commands to cause it to generate and accept such non-standard JSON.  Would that be of interest?&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 13 Mar 2014 21:43:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>375634</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 45 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1sqaf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>375930</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1467] Schema resolution does not check record names</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1467</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;According to &lt;a href=&quot;http://avro.apache.org/docs/1.7.6/spec.html#Schema+Resolution&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/docs/1.7.6/spec.html#Schema+Resolution&lt;/a&gt; , writer and reader schemae should be considered compatible if they (1) have the same name and (2) the reader requests a subset of the writer&apos;s fields with compatible types.  In the Java version, I find that the structure of the fields is checked but the name is &lt;em&gt;not&lt;/em&gt; checked.  (It&apos;s too permissive; acts like a structural type check, rather than structural and nominal.)&lt;/p&gt;

&lt;p&gt;Here&apos;s a demonstration (in the Scala REPL to allow for experimentation; launch with &quot;scala -cp avro-tools-1.7.6.jar&quot; to get all the classes).  The following writes a small, valid Avro data file:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.file.DataFileReader
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.file.DataFileWriter
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericData
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericRecord
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.io.DatumReader
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.io.DatumWriter
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Schema

val parser = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser
&lt;span class=&quot;code-comment&quot;&gt;// The name is different but the fields are the same.
&lt;/span&gt;val writerSchema = parser.parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;record&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;fields&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;one&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;}, {&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;two&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;string&lt;span class=&quot;code-quote&quot;&gt;&quot;}]}&quot;&lt;/span&gt;&quot;&quot;)
val readerSchema = parser.parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;record&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;fields&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;one&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;}, {&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;two&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;string&lt;span class=&quot;code-quote&quot;&gt;&quot;}]}&quot;&lt;/span&gt;&quot;&quot;)

def makeRecord(one: Int, two: &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;): GenericRecord = {
  val out = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Record(writerSchema)
  out.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;one&quot;&lt;/span&gt;, one)
  out.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;two&quot;&lt;/span&gt;, two)
  out
}

val datumWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumWriter[GenericRecord](writerSchema)
val dataFileWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileWriter[GenericRecord](datumWriter)
dataFileWriter.create(writerSchema, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test.avro&quot;&lt;/span&gt;))
dataFileWriter.append(makeRecord(1, &lt;span class=&quot;code-quote&quot;&gt;&quot;one&quot;&lt;/span&gt;))
dataFileWriter.append(makeRecord(2, &lt;span class=&quot;code-quote&quot;&gt;&quot;two&quot;&lt;/span&gt;))
dataFileWriter.append(makeRecord(3, &lt;span class=&quot;code-quote&quot;&gt;&quot;three&quot;&lt;/span&gt;))
dataFileWriter.close()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looking at the output with &quot;hexdump -C /tmp/test.avro&quot;, we see that the writer schema is embedded in the file, and the record&apos;s name is &quot;Writer&quot;.  To read it back:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;val datumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericRecord](writerSchema, readerSchema)
val dataFileReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericRecord](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test.avro&quot;&lt;/span&gt;), datumReader)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader.hasNext) {
  val in = dataFileReader.next()
  println(in, in.getSchema)
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem is that the above is successful, even though I&apos;m requesting a record with name &quot;Reader&quot;.&lt;/p&gt;

&lt;p&gt;If I make structurally incompatible records, for instance by writing with &quot;Writer.two&quot; being an integer and &quot;Reader.two&quot; being a string, it fails to read with org.apache.avro.AvroTypeException (as it should).  If I try the above test with an enum type or a fixed type, it &lt;em&gt;does&lt;/em&gt; require the writer and reader names to match: record is the only named type for which the name is ignored during schema resolution.&lt;/p&gt;

&lt;p&gt;We&apos;re supposed to use aliases to explicitly declare which structurally compatible writer-reader combinations to accept.  Because of the above bug, differently named records are accepted regardless of their aliases, but enums and fixed types are not accepted, even if they have the right aliases.  This may be a separate bug, or it may be related to the above.&lt;/p&gt;

&lt;p&gt;To make sure that I&apos;m correctly understanding the specification, I tried exactly the same thing in the Python version:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-python&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; avro.schema
&lt;span class=&quot;code-keyword&quot;&gt;from&lt;/span&gt; avro.datafile &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; DataFileReader, DataFileWriter
&lt;span class=&quot;code-keyword&quot;&gt;from&lt;/span&gt; avro.io &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; DatumReader, DatumWriter

writerSchema = avro.schema.parse(&lt;span class=&quot;code-quote&quot;&gt;&apos;{&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;type&lt;/span&gt;&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Writer&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;type&lt;/span&gt;&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;}, {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;two&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;type&lt;/span&gt;&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;}]}&apos;&lt;/span&gt;)
readerSchema = avro.schema.parse(&lt;span class=&quot;code-quote&quot;&gt;&apos;{&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;type&lt;/span&gt;&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Reader&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;type&lt;/span&gt;&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;}, {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;two&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;type&lt;/span&gt;&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;}]}&apos;&lt;/span&gt;)

writer = DataFileWriter(&lt;span class=&quot;code-object&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test2.avro&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;w&quot;&lt;/span&gt;), DatumWriter(), writerSchema)
writer.append({&lt;span class=&quot;code-quote&quot;&gt;&quot;one&quot;&lt;/span&gt;: 1, &lt;span class=&quot;code-quote&quot;&gt;&quot;two&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;one&quot;&lt;/span&gt;})
writer.append({&lt;span class=&quot;code-quote&quot;&gt;&quot;one&quot;&lt;/span&gt;: 2, &lt;span class=&quot;code-quote&quot;&gt;&quot;two&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;two&quot;&lt;/span&gt;})
writer.append({&lt;span class=&quot;code-quote&quot;&gt;&quot;one&quot;&lt;/span&gt;: 3, &lt;span class=&quot;code-quote&quot;&gt;&quot;two&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;three&quot;&lt;/span&gt;})
writer.close()

reader = DataFileReader(&lt;span class=&quot;code-object&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test2.avro&quot;&lt;/span&gt;), DatumReader(&lt;span class=&quot;code-keyword&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;None&lt;/span&gt;&lt;/span&gt;, readerSchema))
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; datum &lt;span class=&quot;code-keyword&quot;&gt;in&lt;/span&gt; reader:
    &lt;span class=&quot;code-object&quot;&gt;print&lt;/span&gt; datum
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Python code fails in the first read with avro.io.SchemaResolutionException, as it is supposed to.  (Interestingly, Python ignores the aliases as well, which I think it&apos;s not supposed to do.  Since the Java and Python versions both have the same behavior with regard to aliases, I wonder if I&apos;m understanding &lt;a href=&quot;http://avro.apache.org/docs/1.7.6/spec.html#Aliases&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/docs/1.7.6/spec.html#Aliases&lt;/a&gt; correctly.)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12697412">AVRO-1467</key>
            <summary>Schema resolution does not check record names</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jpivarski">Jim Pivarski</reporter>
                        <labels>
                    </labels>
                <created>Wed, 26 Feb 2014 17:46:49 +0000</created>
                <updated>Fri, 29 Jan 2016 12:35:31 +0000</updated>
                                            <version>1.7.6</version>
                                    <fixVersion>1.9.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13914860" author="cutting" created="Thu, 27 Feb 2014 18:47:01 +0000"  >&lt;p&gt;A few separate issues are described above.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Record names are not checked during Java schema resolution.  Changing this might break applications that currently work, so a fix should wait until Avro 1.8.0.  In the meantime, &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1409&quot; title=&quot;Accurate method for evaluating schema compatibility&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1409&quot;&gt;&lt;del&gt;AVRO-1409&lt;/del&gt;&lt;/a&gt; permits applications to explicitly check compatibility (including name checks).  This can be useful, since many schema resolution problems are currently only detected as data is read rather than when a data file is opened or earlier.&lt;/li&gt;
	&lt;li&gt;Aliases in Java do not work in enums or fixed.  There are tests for aliases in enum and fixed, but perhaps these are not sufficient.  (&lt;a href=&quot;https://svn.apache.org/viewvc?view=revision&amp;amp;revision=r986455&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/viewvc?view=revision&amp;amp;revision=r986455&lt;/a&gt;)  If you can provide another test case that illustrates a failure we can probably fix this in a bugfix release (e.g., 1.7.7).  Please file a separate issue for this.&lt;/li&gt;
	&lt;li&gt;Python does not implement aliases.  Aliases are an optional feature that an implementation may support.  Java may be the only implementation that currently supports aliases.  There is an existing feature request to implement aliases in Python (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1303&quot; title=&quot;Python avro library does not support aliasing for schema evolution&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1303&quot;&gt;AVRO-1303&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13915903" author="jpivarski" created="Fri, 28 Feb 2014 15:48:03 +0000"  >&lt;p&gt;Hi!  Working through your bullet points here...&lt;/p&gt;

&lt;p&gt;Thanks for pointing me to org.apache.avro.SchemaCompatibility.checkReaderWriterCompatibility (from &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1409&quot; title=&quot;Accurate method for evaluating schema compatibility&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1409&quot;&gt;&lt;del&gt;AVRO-1409&lt;/del&gt;&lt;/a&gt;): it&apos;s exactly what I was looking for.  Something like that ought to be briefly mentioned on the Getting Started (Java) page.&lt;/p&gt;

&lt;p&gt;My examples work in this per-schema validation, including names and including aliases, but my bug report about the per-instance validation stands.&lt;/p&gt;

&lt;p&gt;Does decoding always go through the following sequence: (1) read embedded schema, (2) loop through data instances?  If so, then the problem of a too-permissive instance validation can be solved by doing a one-time schema validation at the beginning of reading, using checkReaderWriterCompatibility, which does the full tests.  In fact, that may be preferable to doing redundant checks on every instance.&lt;/p&gt;

&lt;p&gt;I&apos;m going to look into aliases in more detail, and if I find what looks like a bug, I&apos;ll file another bug report.  I won&apos;t bother checking the Python version because of its lack of support.&lt;/p&gt;</comment>
                            <comment id="13915942" author="jpivarski" created="Fri, 28 Feb 2014 16:27:20 +0000"  >&lt;p&gt;I&apos;ve tested aliases, and they completely work--- there&apos;s no need to open a new ticket.&lt;/p&gt;

&lt;p&gt;Specifically, I tested enums and fixed, with and without a namespace on the writer, with and without an alias on the reader, with relative and fully-qualified aliases (18 cases).  Each case behaved as expected.  (I must have gotten my alias-related tests crossed while I was focusing on record names.)&lt;/p&gt;

&lt;p&gt;For the record, I&apos;ll post my tests here.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.file.DataFileReader
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.file.DataFileWriter
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericData
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.io.DatumReader
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.io.DatumWriter
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Schema

&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; writerSchema = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;symbols&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;one&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;two&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;three&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; datumWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumWriter[GenericData.EnumSymbol](writerSchema)
&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; dataFileWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileWriter[GenericData.EnumSymbol](datumWriter)
dataFileWriter.create(writerSchema, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test.avro&quot;&lt;/span&gt;))
dataFileWriter.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.EnumSymbol(writerSchema, &lt;span class=&quot;code-quote&quot;&gt;&quot;one&quot;&lt;/span&gt;))
dataFileWriter.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.EnumSymbol(writerSchema, &lt;span class=&quot;code-quote&quot;&gt;&quot;two&quot;&lt;/span&gt;))
dataFileWriter.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.EnumSymbol(writerSchema, &lt;span class=&quot;code-quote&quot;&gt;&quot;three&quot;&lt;/span&gt;))
dataFileWriter.close()

&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; readerSchema = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;symbols&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;one&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;two&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;three&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; datumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.EnumSymbol](writerSchema, readerSchema)
&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; dataFileReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.EnumSymbol](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test.avro&quot;&lt;/span&gt;), datumReader)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader.hasNext) {
  val in = dataFileReader.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// fails (good)
&lt;/span&gt;
readerSchema = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;symbols&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;one&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;two&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;three&lt;span class=&quot;code-quote&quot;&gt;&quot;], &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.EnumSymbol](writerSchema, readerSchema)
dataFileReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.EnumSymbol](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test.avro&quot;&lt;/span&gt;), datumReader)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader.hasNext) {
  val in = dataFileReader.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// succeeds (good)
&lt;/span&gt;
readerSchema = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;symbols&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;one&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;two&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;three&lt;span class=&quot;code-quote&quot;&gt;&quot;], &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;NOTWRITER&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.EnumSymbol](writerSchema, readerSchema)
dataFileReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.EnumSymbol](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test.avro&quot;&lt;/span&gt;), datumReader)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader.hasNext) {
  val in = dataFileReader.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// fails (good)
&lt;/span&gt;
writerSchema = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;namespace&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;com.wowie&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;symbols&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;one&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;two&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;three&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumWriter[GenericData.EnumSymbol](writerSchema)
dataFileWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileWriter[GenericData.EnumSymbol](datumWriter)
dataFileWriter.create(writerSchema, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test2.avro&quot;&lt;/span&gt;))
dataFileWriter.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.EnumSymbol(writerSchema, &lt;span class=&quot;code-quote&quot;&gt;&quot;one&quot;&lt;/span&gt;))
dataFileWriter.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.EnumSymbol(writerSchema, &lt;span class=&quot;code-quote&quot;&gt;&quot;two&quot;&lt;/span&gt;))
dataFileWriter.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.EnumSymbol(writerSchema, &lt;span class=&quot;code-quote&quot;&gt;&quot;three&quot;&lt;/span&gt;))
dataFileWriter.close()

readerSchema = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;symbols&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;one&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;two&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;three&lt;span class=&quot;code-quote&quot;&gt;&quot;], &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.EnumSymbol](writerSchema, readerSchema)
dataFileReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.EnumSymbol](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test2.avro&quot;&lt;/span&gt;), datumReader)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader.hasNext) {
  val in = dataFileReader.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// fails (good)
&lt;/span&gt;
readerSchema = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;symbols&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;one&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;two&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;three&lt;span class=&quot;code-quote&quot;&gt;&quot;], &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;com.wowie.Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.EnumSymbol](writerSchema, readerSchema)
dataFileReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.EnumSymbol](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test2.avro&quot;&lt;/span&gt;), datumReader)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader.hasNext) {
  val in = dataFileReader.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// succeeds (good)
&lt;/span&gt;
readerSchema = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;symbols&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;one&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;two&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;three&lt;span class=&quot;code-quote&quot;&gt;&quot;], &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;com.wowie.NOTWRITER&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.EnumSymbol](writerSchema, readerSchema)
dataFileReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.EnumSymbol](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test2.avro&quot;&lt;/span&gt;), datumReader)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader.hasNext) {
  val in = dataFileReader.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// fails (good)
&lt;/span&gt;
readerSchema = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;symbols&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;one&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;two&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;three&lt;span class=&quot;code-quote&quot;&gt;&quot;], &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;com.notnamespace.Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.EnumSymbol](writerSchema, readerSchema)
dataFileReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.EnumSymbol](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test2.avro&quot;&lt;/span&gt;), datumReader)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader.hasNext) {
  val in = dataFileReader.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// fails (good)
&lt;/span&gt;
readerSchema = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;namespace&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;com.wowie&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;symbols&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;one&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;two&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;three&lt;span class=&quot;code-quote&quot;&gt;&quot;], &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.EnumSymbol](writerSchema, readerSchema)
dataFileReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.EnumSymbol](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test2.avro&quot;&lt;/span&gt;), datumReader)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader.hasNext) {
  val in = dataFileReader.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// succeeds (good)
&lt;/span&gt;
readerSchema = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;namespace&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;com.wowie&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;symbols&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;one&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;two&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;three&lt;span class=&quot;code-quote&quot;&gt;&quot;], &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;com.wowie.Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.EnumSymbol](writerSchema, readerSchema)
dataFileReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.EnumSymbol](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test2.avro&quot;&lt;/span&gt;), datumReader)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader.hasNext) {
  val in = dataFileReader.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// succeeds (good)
&lt;/span&gt;
&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; writerSchema2 = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;fixed&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;size&lt;span class=&quot;code-quote&quot;&gt;&quot;: 10}&quot;&lt;/span&gt;&quot;&quot;)
&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; datumWriter2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumWriter[GenericData.Fixed](writerSchema2)
&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; dataFileWriter2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileWriter[GenericData.Fixed](datumWriter2)
dataFileWriter2.create(writerSchema2, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test3.avro&quot;&lt;/span&gt;))
dataFileWriter2.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Fixed(writerSchema2, &lt;span class=&quot;code-quote&quot;&gt;&quot;hellohello&quot;&lt;/span&gt;.getBytes))
dataFileWriter2.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Fixed(writerSchema2, &lt;span class=&quot;code-quote&quot;&gt;&quot;hellohello&quot;&lt;/span&gt;.getBytes))
dataFileWriter2.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Fixed(writerSchema2, &lt;span class=&quot;code-quote&quot;&gt;&quot;hellohello&quot;&lt;/span&gt;.getBytes))
dataFileWriter2.close()

&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; readerSchema2 = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;fixed&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;size&lt;span class=&quot;code-quote&quot;&gt;&quot;: 10}&quot;&lt;/span&gt;&quot;&quot;)
&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; datumReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.Fixed](writerSchema2, readerSchema2)
&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; dataFileReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.Fixed](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test3.avro&quot;&lt;/span&gt;), datumReader2)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader2.hasNext) {
  val in = dataFileReader2.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// fails (good)
&lt;/span&gt;
readerSchema2 = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;fixed&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;size&lt;span class=&quot;code-quote&quot;&gt;&quot;: 10, &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.Fixed](writerSchema2, readerSchema2)
dataFileReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.Fixed](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test3.avro&quot;&lt;/span&gt;), datumReader2)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader2.hasNext) {
  val in = dataFileReader2.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// succeeds (good)
&lt;/span&gt;
readerSchema2 = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;fixed&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;size&lt;span class=&quot;code-quote&quot;&gt;&quot;: 10, &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;NOTWRITER&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.Fixed](writerSchema2, readerSchema2)
dataFileReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.Fixed](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test3.avro&quot;&lt;/span&gt;), datumReader2)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader2.hasNext) {
  val in = dataFileReader2.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// fails (good)
&lt;/span&gt;
writerSchema2 = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;fixed&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;namespace&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;com.wowie&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;size&lt;span class=&quot;code-quote&quot;&gt;&quot;: 10}&quot;&lt;/span&gt;&quot;&quot;)
datumWriter2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumWriter[GenericData.Fixed](writerSchema2)
dataFileWriter2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileWriter[GenericData.Fixed](datumWriter2)
dataFileWriter2.create(writerSchema2, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test4.avro&quot;&lt;/span&gt;))
dataFileWriter2.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Fixed(writerSchema2, &lt;span class=&quot;code-quote&quot;&gt;&quot;hellohello&quot;&lt;/span&gt;.getBytes))
dataFileWriter2.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Fixed(writerSchema2, &lt;span class=&quot;code-quote&quot;&gt;&quot;hellohello&quot;&lt;/span&gt;.getBytes))
dataFileWriter2.append(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Fixed(writerSchema2, &lt;span class=&quot;code-quote&quot;&gt;&quot;hellohello&quot;&lt;/span&gt;.getBytes))
dataFileWriter2.close()

readerSchema2 = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;fixed&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;size&lt;span class=&quot;code-quote&quot;&gt;&quot;: 10, &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.Fixed](writerSchema2, readerSchema2)
dataFileReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.Fixed](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test4.avro&quot;&lt;/span&gt;), datumReader2)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader2.hasNext) {
  val in = dataFileReader2.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// fails (good)
&lt;/span&gt;
readerSchema2 = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;fixed&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;size&lt;span class=&quot;code-quote&quot;&gt;&quot;: 10, &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;com.wowie.Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.Fixed](writerSchema2, readerSchema2)
dataFileReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.Fixed](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test4.avro&quot;&lt;/span&gt;), datumReader2)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader2.hasNext) {
  val in = dataFileReader2.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// succeeds (good)
&lt;/span&gt;
readerSchema2 = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;fixed&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;size&lt;span class=&quot;code-quote&quot;&gt;&quot;: 10, &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;com.wowie.NOTWRITER&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.Fixed](writerSchema2, readerSchema2)
dataFileReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.Fixed](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test4.avro&quot;&lt;/span&gt;), datumReader2)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader2.hasNext) {
  val in = dataFileReader2.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// fails (good)
&lt;/span&gt;
readerSchema2 = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;fixed&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;size&lt;span class=&quot;code-quote&quot;&gt;&quot;: 10, &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;com.notnamespace.Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.Fixed](writerSchema2, readerSchema2)
dataFileReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.Fixed](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test4.avro&quot;&lt;/span&gt;), datumReader2)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader2.hasNext) {
  val in = dataFileReader2.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// fails (good)
&lt;/span&gt;
readerSchema2 = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;fixed&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;namespace&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;com.wowie&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;size&lt;span class=&quot;code-quote&quot;&gt;&quot;: 10, &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.Fixed](writerSchema2, readerSchema2)
dataFileReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.Fixed](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test4.avro&quot;&lt;/span&gt;), datumReader2)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader2.hasNext) {
  val in = dataFileReader2.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// succeeds (good)
&lt;/span&gt;
readerSchema2 = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser).parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;fixed&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Reader&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;namespace&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;com.wowie&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;size&lt;span class=&quot;code-quote&quot;&gt;&quot;: 10, &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;com.wowie.Writer&lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;&quot;&quot;)
datumReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.Fixed](writerSchema2, readerSchema2)
dataFileReader2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.Fixed](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/test4.avro&quot;&lt;/span&gt;), datumReader2)
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader2.hasNext) {
  val in = dataFileReader2.next()
  println(in, in.getSchema)
}
&lt;span class=&quot;code-comment&quot;&gt;// succeeds (good)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13916018" author="jpivarski" created="Fri, 28 Feb 2014 17:10:38 +0000"  >&lt;p&gt;Regarding: &quot;Record names are not checked during Java schema resolution. Changing this might break applications that currently work, so a fix should wait until Avro 1.8.0.&quot;&lt;/p&gt;

&lt;p&gt;Some applications might inadvertently rely on this behavior, so I understand why you&apos;d want to wait for a backward-incompatible release to make this change.  But perhaps there are also applications that intentionally use this feature: for instance, you don&apos;t care what record names you&apos;re going to receive, but you need them to have a particular subset of fields.&lt;/p&gt;

&lt;p&gt;I&apos;m developing a decision tree processor, and I want to make sure that an input record type has a particular form of predicate and branches to follow if the predicate passes or fails, like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-json&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Tree&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;field&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Fields&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;two&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;three&quot;&lt;/span&gt;]}},
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;comparison&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Comparisons&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;lessThan&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;equalTo&quot;&lt;/span&gt;]}},
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;value&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;},
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;pass&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;Tree&quot;&lt;/span&gt;, {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Score&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;class1&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;class2&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;class3&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;class4&quot;&lt;/span&gt;]}]},
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;fail&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;Tree&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;Score&quot;&lt;/span&gt;]}
    ]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(I could relax some of the the enums to be arbitrary strings in cases where I don&apos;t know all the fields; this is just for illustration.)  The input tree models may have metadata in the form of unspecified fields, such as &lt;/p&gt;
{&quot;name&quot;: &quot;numberOfTrainingSamples&quot;, &quot;type&quot;: &quot;int&quot;}
&lt;p&gt;, and I&apos;m using Avro&apos;s schema resolution to ignore them.  They may appear in the writer&apos;s schema and are therefore embedded in the model for future reference, but they don&apos;t appear in the reader&apos;s schema (the decision tree processor) because they&apos;re irrelevant to scoring.&lt;/p&gt;

&lt;p&gt;When Avro 1.8.x enforces record names, it could be useful be able to say something like &quot;aliases&quot;: &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;*&amp;quot;&amp;#93;&lt;/span&gt; to accept input records with any name but the correct structure.  That way, I&apos;m not putting a restriction on the namespaces of the input records; they can be &quot;com.mycompany.Tree&quot; or &quot;com.yourcompany.Tree&quot; or whatever.&lt;/p&gt;

&lt;p&gt;Should I open a ticket to request &quot;aliases&quot;: &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;*&amp;quot;&amp;#93;&lt;/span&gt;?&lt;/p&gt;</comment>
                            <comment id="13916326" author="cutting" created="Fri, 28 Feb 2014 20:25:50 +0000"  >&lt;p&gt;&amp;gt; When Avro 1.8.x enforces record names [ ... ]&lt;/p&gt;

&lt;p&gt;The question is still one of &quot;if&quot; rather than &quot;when&quot;.  Incompatible fixes are sometimes not worth making.  This has been the case for five years and no one has complained before, so it&apos;s not creating a lot of problems.&lt;/p&gt;

&lt;p&gt;Does using explicit checking with checkReaderWriterCompatibility suffice for your case?  Perhaps instead of changing the behavior we could just better document current behavior (as you suggest above)?&lt;/p&gt;

&lt;p&gt;What do others think?&lt;/p&gt;</comment>
                            <comment id="13916338" author="jpivarski" created="Fri, 28 Feb 2014 20:31:19 +0000"  >&lt;p&gt;For me, explicit checking with checkReaderWriterCompatibility is sufficient.  But if the default schema check deviates from the specification, that fact should probably be posted.  Mentioning it in a section on checkReaderWriterCompatibility would probably suffice for anybody, since anyone can explicitly call this function before iterating over a dataset.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 27 Feb 2014 18:47:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>375886</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 47 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1sruf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>376182</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>schema-resolution, record</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1468] implement interface-based code-generation</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1468</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The current specific compiler generates a concrete class per record.  Instead, we might generate an interface per record that might be implemented in different ways.  Implementations might include:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A wrapper for a generic record.  This would permit the schema that is compiled against to differ from that of the runtime instance.  A field that was added since code-generation could be retained as records are filtered or sorted and re-written.&lt;/li&gt;
	&lt;li&gt;A concrete record.  This would be similar to the existing specific.&lt;/li&gt;
	&lt;li&gt;A wrapped POJO.  The generated class could wrap a POJO using reflection.  Aliases could map between the schema used at compilation and that of the POJO, so field and class names need not match exactly.  This would permit one to evolve from a POJO-based Avro application to using generated code without breaking existing code.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This approach was first described in &lt;a href=&quot;http://s.apache.org/AvroFlex&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://s.apache.org/AvroFlex&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12697743">AVRO-1468</key>
            <summary>implement interface-based code-generation</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Thu, 27 Feb 2014 17:35:08 +0000</created>
                <updated>Sun, 30 Dec 2018 04:17:18 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>3</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="13914919" author="cutting" created="Thu, 27 Feb 2014 19:16:37 +0000"  >&lt;p&gt;This should be implemented as new functionality that applications must explicitly switch to.  For example, POM files must be updated to specify the new-format code generation, and runtime code must then also be updated to adapt to API changes in the generated code.  Since it is opt-in, this can thus be considered a compatible addition and included in a minor, bugfix release.&lt;/p&gt;

&lt;p&gt;This also thus provides the (rare) opportunity to make incompatible changes to generated code.  In particular, the generated implementations can be immutable, use java.lang.String for string schemas, not have a visible SCHEMA$ member nor public fields, etc.&lt;/p&gt;</comment>
                            <comment id="14075130" author="keegan" created="Fri, 25 Jul 2014 23:30:57 +0000"  >&lt;p&gt;Would the ability to do polymorphic interface references like this be out of the scope of this Jira?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{
  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Cat&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;namespace&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;the.universe&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;,
     &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;},
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;collarSize&quot;&lt;/span&gt;,
     &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;},
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;aloofness&quot;&lt;/span&gt;,
     &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;},
  ]
}

{
  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Dog&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;namespace&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;the.universe&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;,
     &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;},
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;collarSize&quot;&lt;/span&gt;,
     &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;},
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;friendliness&quot;&lt;/span&gt;,
     &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;},
  ]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; Pet {
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; getName();
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setName(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; name);
}

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Cat &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Pet {
  &lt;span class=&quot;code-comment&quot;&gt;// ...
&lt;/span&gt;}

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Dog &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Pet {
  &lt;span class=&quot;code-comment&quot;&gt;// ...
&lt;/span&gt;}

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;ExampleUsage {
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) {
    List&amp;lt;Pet&amp;gt; pets = PetUtil.listPets();
    Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; petNames = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Pet pet : pets) {
        petNames.put(pet.getname(), pet.getCollarSize());
    }
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12697778">AVRO-1469</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 25 Jul 2014 23:30:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>376217</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 26 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1stvj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>376513</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1469] Support interchangeable object models</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1469</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The current way to use a different in-memory representation is to subclass one of the data modules, like &lt;tt&gt;GenericData&lt;/tt&gt;, and override the relevant methods. This approach has a couple of drawbacks:&lt;br/&gt;
1. Because Reflect inherits from Generic, both must be subclassed and altered to preserve the choice between generic records and POJOs. This may have nothing to do with the object classes being changed (e.g., Map implementation).&lt;br/&gt;
2. Replacing the data class tends to also require replacing the DatumReader and DatumWriter implementation.&lt;/p&gt;

&lt;p&gt;From discussion on a related Kite issue, Doug writes:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;It&apos;s hard to know up front what bundles of functionality folks will need. We might add a separate interface that determines the representation of each type (records, maps, arrays, enums, strings, bytes, fixed, unions, numbers, etc.), then have generic/specific/reflect implementations for records, collection/array implementations for array, Utf8/String for string, tagged/untagged unions, etc. Currently we have one big interface (GenericData) for all of these, with a hierarchy of implementations that provide a few common combinations, but far fewer than are logically possible.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The use case I&apos;d like to focus on is interchanging both the POJO/record model and the other objects independently. I think this follows from the distinction between Generic and Reflect and is a good starting point.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12697778">AVRO-1469</key>
            <summary>Support interchangeable object models</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="rdblue">Ryan Blue</reporter>
                        <labels>
                    </labels>
                <created>Thu, 27 Feb 2014 19:27:43 +0000</created>
                <updated>Thu, 27 Feb 2014 19:30:21 +0000</updated>
                                            <version>1.7.6</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13914946" author="rdblue" created="Thu, 27 Feb 2014 19:30:21 +0000"  >&lt;p&gt;One solution is related to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1468&quot; title=&quot;implement interface-based code-generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1468&quot;&gt;AVRO-1468&lt;/a&gt;, proposed by Doug:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One might build a data model with something like,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;dataModel = new GenericData().setRecordModel(new ReflectRecordModel());&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;We might be lazy about abstracting models. We might start by adding just RecordModel and see if that, combined with the existing hierarchy, satisfies most needs. When someone needs a bundle not possible with that, then we can incrementally add models for more types. So we&apos;d start by implementing GenericRecordModel, SpecificRecordModel, ReflectRecordModel and change GenericData to delegate all record-related work to its RecordModel field.&lt;/p&gt;&lt;/blockquote&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12697743">AVRO-1468</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>376252</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 47 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1su33:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>376547</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1470] Perl API boolean type misencoded</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1470</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The boolean serialization is incorrect, as these new unit tests would indicate:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;primitive_ok boolean =&amp;gt; 0, &quot;\x0&quot;;
primitive_ok boolean =&amp;gt; 1, &quot;\x1&quot;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When run they print:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;#   Failed test &apos;primitive boolean encoded correctly&apos;
#   at t/02_bin_encode.t line 40.
#          got: &apos;30&apos;
#     expected: &apos;00&apos;

#   Failed test &apos;primitive boolean encoded correctly&apos;
#   at t/02_bin_encode.t line 40.
#          got: &apos;31&apos;
#     expected: &apos;01&apos;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Secondly, when evaluating whether a &apos;boolean&apos; branch should be taken in a union, the check for boolean-ness of the data is being done incorrectly, matching a regular expression against the wrong variable.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12697822">AVRO-1470</key>
            <summary>Perl API boolean type misencoded</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jkarp">John Karp</assignee>
                                    <reporter username="jkarp">John Karp</reporter>
                        <labels>
                    </labels>
                <created>Thu, 27 Feb 2014 23:00:45 +0000</created>
                <updated>Thu, 24 Jul 2014 20:16:11 +0000</updated>
                            <resolved>Wed, 11 Jun 2014 19:48:33 +0000</resolved>
                                                    <fixVersion>1.7.7</fixVersion>
                                    <component>perl</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13916467" author="jkarp" created="Fri, 28 Feb 2014 21:54:29 +0000"  >&lt;p&gt;Patch to restrict accepted boolean values to 0 and 1.&lt;/p&gt;</comment>
                            <comment id="13934043" author="cutting" created="Thu, 13 Mar 2014 20:56:30 +0000"  >&lt;p&gt;In languages with no boolean type I&apos;d think the natural thing would be to be consistent with boolean expressions, i.e., any non-false value is true.  It seems like there are serious bugs in how this was implemented, which would be good to fix, but narrowing things to 0 and 1 might be less intuitive.  What do others think?&lt;/p&gt;</comment>
                            <comment id="13937960" author="jkarp" created="Mon, 17 Mar 2014 16:07:39 +0000"  >&lt;p&gt;Since everything is evaluable to true or false in Perl, including undef, I think that might be problematic. If you had a union of &lt;span class=&quot;error&quot;&gt;&amp;#91;boolean, null&amp;#93;&lt;/span&gt;, there&apos;s no value you can specify to get the null branch. If you have a union of &lt;span class=&quot;error&quot;&gt;&amp;#91;boolean, string&amp;#93;&lt;/span&gt;, any string specified will be encoded as a true boolean, except for the empty string which would be false. And if someone is encoding a populated hash or array as a boolean type, there&apos;s a good chance its a mistake, and it would be more useful to produce an error than to encode the whole thing as a true value.&lt;/p&gt;

&lt;p&gt;Another approach would be to use &apos;1&apos; and the empty string as true and false, since they&apos;re the closest thing in Perl to canonical boolean values. (&apos;&apos; == !!0 and &apos;1&apos; == !!1). However, deserializing false as the empty string might be confusing to some users.&lt;/p&gt;

&lt;p&gt;Another approach that avoids all the above problems would be to require a special class for representing booleans, for example:&lt;br/&gt;
&lt;a href=&quot;http://search.cpan.org/~mattp/Data-Perl-0.001000/lib/Data/Perl/Bool.pm&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://search.cpan.org/~mattp/Data-Perl-0.001000/lib/Data/Perl/Bool.pm&lt;/a&gt;&lt;br/&gt;
The downsides are that it would be another dependency, and you couldn&apos;t directly pass the result of a boolean test into the serializer without having to wrap it first.&lt;/p&gt;</comment>
                            <comment id="14007598" author="jkarp" created="Fri, 23 May 2014 19:49:27 +0000"  >&lt;p&gt;perl&apos;s JSON module has to deal with a similar issue, and it has its own JSON::true and JSON::false definitions, which seems like a reasonable solution to me.&lt;/p&gt;</comment>
                            <comment id="14014097" author="jkarp" created="Fri, 30 May 2014 18:50:57 +0000"  >&lt;p&gt;Splitting issue to separate the contentious part&lt;/p&gt;</comment>
                            <comment id="14014142" author="jkarp" created="Fri, 30 May 2014 19:35:17 +0000"  >&lt;p&gt;Minimal fix + test case, no fix for inconsistency issue, that&apos;s now &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1521&quot; title=&quot;Inconsistent behavior of Perl API with &amp;#39;boolean&amp;#39; type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1521&quot;&gt;AVRO-1521&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14014152" author="jkarp" created="Fri, 30 May 2014 19:40:16 +0000"  >&lt;p&gt;Minimal fix + test case, no fix for inconsistency issue, that&apos;s now &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1521&quot; title=&quot;Inconsistent behavior of Perl API with &amp;#39;boolean&amp;#39; type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1521&quot;&gt;AVRO-1521&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14026665" author="_alexm" created="Tue, 10 Jun 2014 16:49:05 +0000"  >&lt;p&gt;Should these patches be applied to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1521&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;AVRO-1521&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="14026902" author="jkarp" created="Tue, 10 Jun 2014 19:52:02 +0000"  >&lt;p&gt;Both are issues are closely related, but its possible to address one without addressing the other.&lt;/p&gt;

&lt;p&gt;I imagine &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1470&quot; title=&quot;Perl API boolean type misencoded&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1470&quot;&gt;&lt;del&gt;AVRO-1470&lt;/del&gt;&lt;/a&gt; will get applied to trunk relatively quickly because its a straightforward backwards compatible bugfix, whereas technically &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1521&quot; title=&quot;Inconsistent behavior of Perl API with &amp;#39;boolean&amp;#39; type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1521&quot;&gt;AVRO-1521&lt;/a&gt; should wait for 1.8.0 because its more of a design change. So likely &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1470&quot; title=&quot;Perl API boolean type misencoded&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1470&quot;&gt;&lt;del&gt;AVRO-1470&lt;/del&gt;&lt;/a&gt; will already be a part of the trunk that the &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1521&quot; title=&quot;Inconsistent behavior of Perl API with &amp;#39;boolean&amp;#39; type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1521&quot;&gt;AVRO-1521&lt;/a&gt; patch will get written against.&lt;/p&gt;</comment>
                            <comment id="14027024" author="_alexm" created="Tue, 10 Jun 2014 21:10:45 +0000"  >&lt;p&gt;+1 two attached patches LGTM, will look forward to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1521&quot; title=&quot;Inconsistent behavior of Perl API with &amp;#39;boolean&amp;#39; type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1521&quot;&gt;AVRO-1521&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14028305" author="jira-bot" created="Wed, 11 Jun 2014 19:48:08 +0000"  >&lt;p&gt;Commit 1602002 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1602002&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1602002&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1470&quot; title=&quot;Perl API boolean type misencoded&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1470&quot;&gt;&lt;del&gt;AVRO-1470&lt;/del&gt;&lt;/a&gt;. Perl: Fix encoding of boolean values.  Contributed by John Karp.&lt;/p&gt;</comment>
                            <comment id="14028306" author="cutting" created="Wed, 11 Jun 2014 19:48:33 +0000"  >&lt;p&gt;I committed this.  Thanks, John!&lt;/p&gt;</comment>
                            <comment id="14028354" author="hudson" created="Wed, 11 Jun 2014 20:37:33 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #458 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/458/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/458/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1470&quot; title=&quot;Perl API boolean type misencoded&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1470&quot;&gt;&lt;del&gt;AVRO-1470&lt;/del&gt;&lt;/a&gt;. Perl: Fix encoding of boolean values.  Contributed by John Karp. (cutting: rev 1602002)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/perl/lib/Avro/BinaryEncoder.pm&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/perl/lib/Avro/Schema.pm&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/perl/t/02_bin_encode.t&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10020">
                    <name>Cloners</name>
                                                                <inwardlinks description="is cloned by">
                                        <issuelink>
            <issuekey id="12717607">AVRO-1521</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12647675" name="AVRO-1470.patch" size="1615" author="jkarp" created="Fri, 30 May 2014 19:40:16 +0000"/>
                            <attachment id="12631851" name="AVRO-1470.patch" size="5878" author="jkarp" created="Fri, 28 Feb 2014 21:54:29 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 13 Mar 2014 20:56:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>376296</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 32 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1sud3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>376592</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Perl API: Fix encoding of boolean type&lt;br/&gt;
Perl API: Fix boolean compatibility test in unions</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1471] avro-maven-plugin schema generation should use project.build.sourceEncoding for generated files</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1471</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;avro-maven-plugin generates java sources using system default encoding which is not good if maven project sources&apos; encoding is different (which is often true on OS with non-UTF-8 system encoding like OSX and Windows) as generated files encoding differs from the rest of the project sources.&lt;/p&gt;

&lt;p&gt;It would be great if avro-maven-plugin used the project.build.sourceEncoding property for generated sources.&lt;/p&gt;</description>
                <environment>&lt;p&gt;MacOS 10.9&lt;/p&gt;</environment>
        <key id="12698132">AVRO-1471</key>
            <summary>avro-maven-plugin schema generation should use project.build.sourceEncoding for generated files</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="eumust">Eugene Mustaphin</assignee>
                                    <reporter username="eumust">Eugene Mustaphin</reporter>
                        <labels>
                    </labels>
                <created>Sat, 1 Mar 2014 18:51:38 +0000</created>
                <updated>Thu, 24 Jul 2014 20:16:13 +0000</updated>
                            <resolved>Fri, 14 Mar 2014 19:32:29 +0000</resolved>
                                    <version>1.7.7</version>
                                    <fixVersion>1.7.7</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13917155" author="eumust" created="Sat, 1 Mar 2014 18:56:21 +0000"  >&lt;p&gt;Suggested patch.&lt;br/&gt;
It adds SpecificCompiler.setOutputEncoding() method and a call for this method to SchemaMojo for changing output encoding according to the project.build.sourceEncoding property&lt;/p&gt;</comment>
                            <comment id="13933669" author="cutting" created="Thu, 13 Mar 2014 18:08:51 +0000"  >&lt;p&gt;The patch looks good.  Can you please supply a test case?  It should be straightforward to add one to TestSpecificCompiler.java.  Thanks!&lt;/p&gt;</comment>
                            <comment id="13935449" author="eumust" created="Fri, 14 Mar 2014 18:54:27 +0000"  >&lt;p&gt;Added test case&lt;/p&gt;</comment>
                            <comment id="13935510" author="jira-bot" created="Fri, 14 Mar 2014 19:31:21 +0000"  >&lt;p&gt;Commit 1577670 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1577670&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1577670&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1471&quot; title=&quot;avro-maven-plugin schema generation should use project.build.sourceEncoding for generated files&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1471&quot;&gt;&lt;del&gt;AVRO-1471&lt;/del&gt;&lt;/a&gt;. Java: Permit writing generated code in different character encodings.  Contributed by Eugene Mustaphin.&lt;/p&gt;</comment>
                            <comment id="13935512" author="cutting" created="Fri, 14 Mar 2014 19:32:29 +0000"  >&lt;p&gt;I committed this.  Thanks, Eugene!&lt;/p&gt;</comment>
                            <comment id="13935663" author="hudson" created="Fri, 14 Mar 2014 21:22:32 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #447 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/447/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/447/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1471&quot; title=&quot;avro-maven-plugin schema generation should use project.build.sourceEncoding for generated files&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1471&quot;&gt;&lt;del&gt;AVRO-1471&lt;/del&gt;&lt;/a&gt;. Java: Permit writing generated code in different character encodings.  Contributed by Eugene Mustaphin. (cutting: rev 1577670)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/compiler/src/test/java/org/apache/avro/compiler/TestSpecificCompiler.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12634793" name="AVRO-1471.patch" size="5697" author="eumust" created="Fri, 14 Mar 2014 18:54:27 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 13 Mar 2014 18:08:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>376601</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 45 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1sw8n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>376896</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>avro-maven-plugin encoding</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1472] Usage of Parser is Wrong in Getting Started Guide</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1472</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;In the Getting Started Guide for java, in the &quot;Serializing and deserializing without code generation&quot; section, for versions 1.7.3 and later, I still see this:&lt;/p&gt;

&lt;p&gt;Schema schema = new Parser().parse(new File(&quot;user.avsc&quot;));&lt;/p&gt;

&lt;p&gt;This is COMPLETELY confusing to people, I am assuming now that you have imported org.apache.avro.Schema.Parser, but that is not clear to the users.&lt;/p&gt;

&lt;p&gt;There is also a class in avro called org.apache.avro.io.parsing.Parser, most users would look at your &quot;Parser&quot; in the example and think you are talking about &quot;org.apache.avro.io.parsing.Parser&quot;, when you are actually talking about &quot;org.apache.avro.Schema.Parser&quot;&lt;/p&gt;

&lt;p&gt;I just wasted the last hour of my life trying to figure this out.  Please fix your documentation.  Either tell people exactly what parser you are importing, or explicitly state it like this:&lt;/p&gt;

&lt;p&gt;Schema schema = new Schema.Parser().parse(in);&lt;/p&gt;</description>
                <environment></environment>
        <key id="12698234">AVRO-1472</key>
            <summary>Usage of Parser is Wrong in Getting Started Guide</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="msknapp84">Michael Knapp</reporter>
                        <labels>
                    </labels>
                <created>Sun, 2 Mar 2014 17:41:25 +0000</created>
                <updated>Thu, 24 Jul 2014 20:16:11 +0000</updated>
                            <resolved>Thu, 13 Mar 2014 18:04:30 +0000</resolved>
                                    <version>1.7.4</version>
                    <version>1.7.5</version>
                    <version>1.7.6</version>
                                    <fixVersion>1.7.7</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13933655" author="jira-bot" created="Thu, 13 Mar 2014 18:04:06 +0000"  >&lt;p&gt;Commit 1577264 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1577264&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1577264&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1472&quot; title=&quot;Usage of Parser is Wrong in Getting Started Guide&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1472&quot;&gt;&lt;del&gt;AVRO-1472&lt;/del&gt;&lt;/a&gt;. Java: Clarify parse method in getting started guide.  Contributed by Michael Knapp.&lt;/p&gt;</comment>
                            <comment id="13933656" author="cutting" created="Thu, 13 Mar 2014 18:04:30 +0000"  >&lt;p&gt;I committed this.  Thanks, Michael.&lt;/p&gt;</comment>
                            <comment id="13933854" author="hudson" created="Thu, 13 Mar 2014 18:37:20 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #444 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/444/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/444/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1472&quot; title=&quot;Usage of Parser is Wrong in Getting Started Guide&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1472&quot;&gt;&lt;del&gt;AVRO-1472&lt;/del&gt;&lt;/a&gt;. Java: Clarify parse method in getting started guide.  Contributed by Michael Knapp. (cutting: rev 1577264)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/doc/src/content/xdocs/gettingstartedjava.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 13 Mar 2014 18:04:06 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>376663</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 45 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1swmf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>376958</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1473] Nested schema reference with empty namespace cannot be parsed</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1473</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Related to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1295&quot; title=&quot;null namespace within non-null is not print/parse consistent&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1295&quot;&gt;&lt;del&gt;AVRO-1295&lt;/del&gt;&lt;/a&gt;, a reference to a nested named schema with an empty namespace cannot be parsed. An example of such a schema is as follows:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{
  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;Outer&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;namespace&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;space&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;f1&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : {
      &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;Inner&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;namespace&quot;&lt;/span&gt; : &quot;&quot;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ ]
    }
  }, {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;f2&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;Inner&quot;&lt;/span&gt;
  } ]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Attempting to parse this results in the following exception:&lt;/p&gt;

&lt;p&gt;org.apache.avro.SchemaParseException: &quot;Inner&quot; is not a defined name. The type of the &quot;f2&quot; field must be a defined name or a {&quot;type&quot;: ...} expression.&lt;/p&gt;

&lt;p&gt;The issue seems to be that the lookup for the name &quot;Inner&quot; is done with the namspace of the encoding record, and not with the empty namespace for this case.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12698332">AVRO-1473</key>
            <summary>Nested schema reference with empty namespace cannot be parsed</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="gabriel.reid">Gabriel Reid</assignee>
                                    <reporter username="gabriel.reid">Gabriel Reid</reporter>
                        <labels>
                    </labels>
                <created>Sun, 2 Mar 2014 23:05:17 +0000</created>
                <updated>Thu, 24 Jul 2014 20:16:11 +0000</updated>
                            <resolved>Thu, 13 Mar 2014 18:36:17 +0000</resolved>
                                                    <fixVersion>1.7.7</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13917595" author="gabriel.reid" created="Sun, 2 Mar 2014 23:06:57 +0000"  >&lt;p&gt;Patch to resolve this issue. The approach taken is to attempt to retrieve the name with the enclosing record&apos;s namespace, and if that fails, the name lookup is attempted with the empty namespace.&lt;/p&gt;</comment>
                            <comment id="13933849" author="jira-bot" created="Thu, 13 Mar 2014 18:35:32 +0000"  >&lt;p&gt;Commit 1577275 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1577275&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1577275&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1473&quot; title=&quot;Nested schema reference with empty namespace cannot be parsed&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1473&quot;&gt;&lt;del&gt;AVRO-1473&lt;/del&gt;&lt;/a&gt;. Java: Fix references to names in the empty namespace.  Contributed by Gabriel Reid.&lt;/p&gt;</comment>
                            <comment id="13933850" author="cutting" created="Thu, 13 Mar 2014 18:36:17 +0000"  >&lt;p&gt;I committed this.  Thanks, Gabriel!&lt;/p&gt;</comment>
                            <comment id="13933935" author="hudson" created="Thu, 13 Mar 2014 19:37:19 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #445 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/445/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/445/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1473&quot; title=&quot;Nested schema reference with empty namespace cannot be parsed&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1473&quot;&gt;&lt;del&gt;AVRO-1473&lt;/del&gt;&lt;/a&gt;. Java: Fix references to names in the empty namespace.  Contributed by Gabriel Reid. (cutting: rev 1577275)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12632162" name="AVRO-1473.patch" size="5111" author="gabriel.reid" created="Sun, 2 Mar 2014 23:06:57 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 13 Mar 2014 18:35:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>376690</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 45 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1swsf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>376985</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1474] C++ resolving decoder doesn&apos;t work when reader schema has more fields than writer schema</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1474</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;When reader schema has more number of fields than writer schema, C++ implementation of resolving decoder is throwing exception &quot;throwing exception &quot;Don&apos;t know how to handle excess fields for reader.&#8221; with out checking whether fields are optional or fields have default values.&lt;/p&gt;

&lt;p&gt;Attached are reader and writer schemas. Record in reader schema has 2 additional fields than writer schema. One field is required field but it has default value and another one is optional field (union of null and string). Since one has default value and another is optional both reader and writer schemas are supposed to be compatible. &lt;/p&gt;

{&quot;name&quot;: &quot;defaultField&quot;, &quot;type&quot;: &quot;string&quot;, &quot;default&quot;: &quot;DEFAULT&quot;, &quot;declared&quot;:&quot;true&quot;}
&lt;p&gt;,     &lt;/p&gt;
{&quot;name&quot;: &quot;optionalField&quot;, &quot;type&quot;: [&quot;string&quot;, &quot;null&quot;],&quot;declared&quot;:&quot;true&quot;}
&lt;p&gt;,&lt;/p&gt;

&lt;p&gt;main()&lt;br/&gt;
{&lt;br/&gt;
  avro::ValidSchema readerSchema = load(&quot;reader.json&quot;);&lt;br/&gt;
  avro::ValidSchema writerSchema = load(&quot;writer.json&quot;);&lt;br/&gt;
  avro::DecoderPtr d = avro::resolvingDecoder(writerSchema, readerSchema,avro::binaryDecoder());&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;But when I tried to create resolving decoder, I am getting &quot;Don&apos;t know how to handle excess fields for reader.&#8221; But Java implementation works.  &lt;/p&gt;

&lt;p&gt;Also field ordering is not working. &lt;/p&gt;

&lt;p&gt;The same issue is reported in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1360&quot; title=&quot;C++ Resolving decoder is not working when reader schema has more fields than writer schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1360&quot;&gt;&lt;del&gt;AVRO-1360&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12698492">AVRO-1474</key>
            <summary>C++ resolving decoder doesn&apos;t work when reader schema has more fields than writer schema</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thiru_mg">Thiruvalluvan M. G.</assignee>
                                    <reporter username="ramanasv">Ramana Suvarapu</reporter>
                        <labels>
                    </labels>
                <created>Mon, 3 Mar 2014 19:27:21 +0000</created>
                <updated>Fri, 28 Dec 2018 16:25:31 +0000</updated>
                            <resolved>Sun, 29 Jun 2014 18:00:48 +0000</resolved>
                                    <version>1.7.6</version>
                                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13918483" author="ramanasv" created="Mon, 3 Mar 2014 19:34:25 +0000"  >&lt;p&gt;First few patches of AVRo-1360 needs to be reapplied to fix this issue.&lt;/p&gt;</comment>
                            <comment id="13946937" author="thiru_mg" created="Tue, 25 Mar 2014 18:44:28 +0000"  >&lt;p&gt;This patch introduces support for default fields in reader schema.&lt;/p&gt;</comment>
                            <comment id="13974170" author="thiru_mg" created="Fri, 18 Apr 2014 15:33:44 +0000"  >&lt;p&gt;Ramana,&lt;/p&gt;

&lt;p&gt;Can we commit this?&lt;/p&gt;</comment>
                            <comment id="13975579" author="ramanasv" created="Mon, 21 Apr 2014 14:01:03 +0000"  >&lt;p&gt;Yes. You can commit this. I created separate JIRA for handling Avro aliases. &lt;/p&gt;

&lt;p&gt;Please include #include &amp;lt;stdint.h&amp;gt; to GenericDatum.hh. We are getting compilation errors when compiling on Windows.&lt;/p&gt;

&lt;p&gt;Also please add -DBOOST_IOSTREAMS_DYN_LINK to CMakeLists.txt to following section. This is to fix Windows compilation errors.&lt;/p&gt;

&lt;p&gt;if (WIN32 AND NOT CYGWIN AND NOT MSYS)&lt;br/&gt;
add_definitions (/EHa)&lt;br/&gt;
add_definitions (&lt;br/&gt;
    -DBOOST_REGEX_DYN_LINK&lt;br/&gt;
    -DBOOST_FILESYSTEM_DYN_LINK&lt;br/&gt;
    -DBOOST_SYSTEM_DYN_LINK&lt;br/&gt;
    -DBOOST_IOSTREAMS_DYN_LINK&lt;br/&gt;
    -DBOOST_PROGRAM_OPTIONS_DYN_LINK	&lt;br/&gt;
    -DBOOST_ALL_NO_LIB)&lt;br/&gt;
endif()&lt;/p&gt;


</comment>
                            <comment id="13979252" author="ramanasv" created="Thu, 24 Apr 2014 03:59:18 +0000"  >&lt;p&gt;Patch is not working in the following scenario.&lt;/p&gt;

&lt;p&gt;Hi Thiru,&lt;/p&gt;

&lt;p&gt;Attached are writer and reader schema. In writer schema I added new field &#8220;optionalNestedrecord&#8221;&lt;br/&gt;
to RootRecord which is optional and default value is null.  This field doesn&#8217;t exist in Reader schema.&lt;/p&gt;

{
                                                &quot;name&quot;: &quot;optionalNestedrecord&quot;,
                                                &quot;type&quot;: [&quot;null&quot;, &quot;Nested&quot;],
                                                &quot;default&quot;: null

                                }

&lt;p&gt;When I populate this field in writers RootRecord and when I tried to deserialize using reader schema, It&#8217;s throwing following exception.&lt;/p&gt;

&lt;p&gt;boost::exception_detail::clone_impl&amp;lt;boost::exception_detail::error_info_injector&amp;lt;boost::bad_weak_ptr&amp;gt; &amp;gt; at memory location 0x00b5d3b0..&lt;/p&gt;

&lt;p&gt;This exception is thrown in the following section of void skip(Decoder&amp;amp; d) of Symbol.hh &lt;/p&gt;

&lt;p&gt;case Symbol::sSymbolic:&lt;br/&gt;
{&lt;br/&gt;
                    ProductionPtr pp(&lt;br/&gt;
                        t.extra&amp;lt;boost::weak_ptr&amp;lt;Production&amp;gt; &amp;gt;());&lt;br/&gt;
                    parsingStack.pop();&lt;br/&gt;
                    append(pp);&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;Steps to reproduce:&lt;br/&gt;
1.	Use the attached files to regenerate bigrecord types for both reader and writer&lt;br/&gt;
2.	In writer RootRecord, populate  optionalNestedrecord  and encode it&lt;br/&gt;
3.	Using ResolvingDecoder and using reader schema, try to deserialize encoded writer&#8217;s record and you will see this exception.&lt;/p&gt;

&lt;p&gt;I attached theses schema to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1474&quot; title=&quot;C++ resolving decoder doesn&amp;#39;t work when reader schema has more fields than writer schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1474&quot;&gt;&lt;del&gt;AVRO-1474&lt;/del&gt;&lt;/a&gt; jira. &lt;br/&gt;
Please take a look into this. &lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Ramana&lt;/p&gt;

&lt;p&gt;On Wed, Apr 23, 2014 at 7:41 PM, Srinidhi S &amp;lt;sri0406@gmail.com&amp;gt; wrote:&lt;br/&gt;
Hi Thiru&lt;/p&gt;

&lt;p&gt;I found a bug with latest patch.  Here is the scenario.&lt;/p&gt;

&lt;p&gt;writer record schema has optional field which is defined as union &lt;span class=&quot;error&quot;&gt;&amp;#91;null, another record&amp;#93;&lt;/span&gt; and here &quot;another record&quot; is defined as Symbolic to schema instead of actual definition of full record schema.&lt;/p&gt;

&lt;p&gt;If reader schema doesn&apos;t have this field and writer populates this field and try to decode writer&apos;s record using reader schema it&apos;s throwing boost::bad_ptr exception. The exception is thrown from symbol class where it&apos;s trying to extract extra info from Production for Symbollic.&lt;/p&gt;


&lt;p&gt;I have a test case to reproduce this issue and I will send it in my next email.&lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
Venkat&lt;/p&gt;
</comment>
                            <comment id="13981471" author="ramanasv" created="Fri, 25 Apr 2014 19:14:36 +0000"  >&lt;p&gt;Please see the email below for more details and attached is the patch to fix this issue.&lt;/p&gt;



&lt;p&gt;From: Suvarapu, Venkata - GMRT-GET &lt;br/&gt;
Sent: Friday, April 25, 2014 9:52 AM&lt;br/&gt;
To: &apos;Thiruvalluvan MG&apos;&lt;br/&gt;
Cc: &apos;Srinidhi S&apos;&lt;br/&gt;
Subject: RE: Resolving decoder bug&apos;s fix&lt;/p&gt;

&lt;p&gt;Hi Thiru,&lt;/p&gt;

&lt;p&gt;Just to make it clear that ResolvingGrammarGenerator::getWriterProduction function doesn&#8217;t work with Schemas with Symbollic nodes. Because Production to actual node of Symbollic node is not going to be available in the node-&amp;gt;production map created within getWriterProduction() method. If Schema contains nested schema for its child nodes then the function works.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Ramana&lt;/p&gt;

&lt;p&gt;From: Suvarapu, Venkata - GMRT-GET &lt;br/&gt;
Sent: Thursday, April 24, 2014 7:42 PM&lt;br/&gt;
To: &apos;Thiruvalluvan MG&apos;&lt;br/&gt;
Cc: &apos;Srinidhi S&apos;; Ye, Xiaolu - GMRT-EST&lt;br/&gt;
Subject: RE: Resolving decoder bug&apos;s fix&lt;/p&gt;

&lt;p&gt;Hi Thiru,&lt;/p&gt;

&lt;p&gt;I debugged the code and found the root cause for the issue. I suspect that ProductionPtr ResolvingGrammarGenerator::getWriterProduction method has a bug.&lt;br/&gt;
Let&#8217;s say writer record schema has following additional and reader schema doesn&#8217;t have this field.  &lt;/p&gt;

{
                                                &quot;name&quot;: &quot;optionalNestedrecord&quot;,
                                                &quot;type&quot;: [&quot;null&quot;, &quot;Nested&quot;],
                                                &quot;default&quot;: null

                                }
&lt;p&gt;When resolving the Writer and Readers record fields, Since this field is not there in reader schema, ResolveRecords does skip the Production of this node and ProductionPtr for this field will be retrieved by calling getWriterProduction(). &lt;/p&gt;

&lt;p&gt;ProductionPtr ResolvingGrammarGenerator::getWriterProduction(&lt;br/&gt;
    const NodePtr&amp;amp; n, const map&amp;lt;NodePtr, ProductionPtr&amp;gt;&amp;amp; m2)&lt;br/&gt;
{&lt;br/&gt;
    const NodePtr&amp;amp; nn = (n-&amp;gt;type() == AVRO_SYMBOLIC) ?&lt;br/&gt;
        static_cast&amp;lt;const NodeSymbolic&amp;amp; &amp;gt;(*n).getNode() : n;         &lt;br/&gt;
    map&amp;lt;NodePtr, ProductionPtr&amp;gt;::const_iterator it2 = m2.find(nn);&lt;br/&gt;
                return (it2 != m2.end()) ? it2-&amp;gt;second :&lt;br/&gt;
                                ValidatingGrammarGenerator::generate(nn);&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;In the above code, when nn is not found in m2, it calls ValidatingGrammarGenerator::generate(nn) to generate the ProductionPtr and this function uses new node-&amp;gt;production map instead of m2 which is already processed during the first pass.&lt;/p&gt;

&lt;p&gt;I think this is not correct. We should call ProductionPtr result = ValidatingGrammarGenerator::doGenerate(nn, m2) to generate the ProductionPtr.&lt;/p&gt;

&lt;p&gt;The reason for this is that in my above example schema, optionalNestedrecord is union schema and since it doesn&#8217;t exists in m2, it generates the new production using new node-&amp;gt;production map. Since &#8220;Nested&#8221; node is not going to be available in new map, it will generates  null production. Later point of time, this is causing boost::exception_detail::clone_impl&amp;lt;boost::exception_detail::error_info_injector&amp;lt;boost::bad_weak_ptr&amp;gt; &amp;gt; at memory location 0x00b5d3b0 exception during the performing skip operation when decoding the record using reader schema. But If m2 is used , &#8220;Nested&#8221; node is guaranteed to  be available in m2 and that value is used instead of null or empty production.&lt;/p&gt;

&lt;p&gt;Modified function&lt;br/&gt;
ProductionPtr ResolvingGrammarGenerator::getWriterProduction(&lt;br/&gt;
    const NodePtr&amp;amp; n, map&amp;lt;NodePtr, ProductionPtr&amp;gt;&amp;amp; m2)&lt;br/&gt;
{&lt;br/&gt;
    const NodePtr&amp;amp; nn = (n-&amp;gt;type() == AVRO_SYMBOLIC) ?&lt;br/&gt;
        static_cast&amp;lt;const NodeSymbolic&amp;amp; &amp;gt;(*n).getNode() : n;  &lt;/p&gt;

&lt;p&gt;       map&amp;lt;NodePtr, ProductionPtr&amp;gt;::const_iterator it2 = m2.find(nn);&lt;br/&gt;
       if (it2 != m2.end())&lt;br/&gt;
              return it2-&amp;gt;second;&lt;br/&gt;
       else&lt;/p&gt;
       {
              ProductionPtr result = ValidatingGrammarGenerator::doGenerate(nn, m2);
              fixup(result, m2);
              return result;       
       }


&lt;p&gt;}&lt;/p&gt;


&lt;p&gt;I tested the fix locally and it seems to be working.  But I had to modify qualifiers of arguments of few functions in the code to make it compile. Attached is the patch for this fix and please review it and see it makes sense.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Ramana&lt;/p&gt;

&lt;p&gt;From: Suvarapu, Venkata - GMRT-GET &lt;br/&gt;
Sent: Wednesday, April 23, 2014 11:57 PM&lt;br/&gt;
To: Thiruvalluvan MG&lt;br/&gt;
Cc: &apos;Srinidhi S&apos;; Ye, Xiaolu - GMRT-EST&lt;br/&gt;
Subject: RE: Resolving decoder bug&lt;/p&gt;

&lt;p&gt;Hi Thiru,&lt;/p&gt;

&lt;p&gt;Attached are writer and reader schema. In writer schema I added new field &#8220;optionalNestedrecord&#8221;&lt;br/&gt;
to RootRecord which is optional and default value is null.  This field doesn&#8217;t exist in Reader schema.&lt;/p&gt;

{
                                                &quot;name&quot;: &quot;optionalNestedrecord&quot;,
                                                &quot;type&quot;: [&quot;null&quot;, &quot;Nested&quot;],
                                                &quot;default&quot;: null

                                }

&lt;p&gt;When I populate this field in writers RootRecord and when I tried to deserialize using reader schema, It&#8217;s throwing following exception.&lt;/p&gt;

&lt;p&gt;boost::exception_detail::clone_impl&amp;lt;boost::exception_detail::error_info_injector&amp;lt;boost::bad_weak_ptr&amp;gt; &amp;gt; at memory location 0x00b5d3b0..&lt;/p&gt;

&lt;p&gt;This exception is thrown in the following section of void skip(Decoder&amp;amp; d) of Symbol.hh &lt;/p&gt;

&lt;p&gt;case Symbol::sSymbolic:&lt;br/&gt;
{&lt;br/&gt;
                    ProductionPtr pp(&lt;br/&gt;
                        t.extra&amp;lt;boost::weak_ptr&amp;lt;Production&amp;gt; &amp;gt;());&lt;br/&gt;
                    parsingStack.pop();&lt;br/&gt;
                    append(pp);&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;Steps to reproduce:&lt;br/&gt;
1.	Use the attached files to regenerate bigrecord types for both reader and writer&lt;br/&gt;
2.	In writer RootRecord, populate  optionalNestedrecord  and encode it&lt;br/&gt;
3.	Using ResolvingDecoder and using reader schema, try to deserialize encoded writer&#8217;s record and you will see this exception.&lt;/p&gt;

&lt;p&gt;I attached theses schema to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1474&quot; title=&quot;C++ resolving decoder doesn&amp;#39;t work when reader schema has more fields than writer schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1474&quot;&gt;&lt;del&gt;AVRO-1474&lt;/del&gt;&lt;/a&gt; jira. &lt;br/&gt;
Please take a look into this. &lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Ramana&lt;/p&gt;

&lt;p&gt;On Wed, Apr 23, 2014 at 7:41 PM, Srinidhi S &amp;lt;sri0406@gmail.com&amp;gt; wrote:&lt;br/&gt;
Hi Thiru&lt;/p&gt;

&lt;p&gt;I found a bug with latest patch.  Here is the scenario.&lt;/p&gt;

&lt;p&gt;writer record schema has optional field which is defined as union &lt;span class=&quot;error&quot;&gt;&amp;#91;null, another record&amp;#93;&lt;/span&gt; and here &quot;another record&quot; is defined as Symbolic to schema instead of actual definition of full record schema.&lt;/p&gt;

&lt;p&gt;If reader schema doesn&apos;t have this field and writer populates this field and try to decode writer&apos;s record using reader schema it&apos;s throwing boost::bad_ptr exception. The exception is thrown from symbol class where it&apos;s trying to extract extra info from Production for Symbollic.&lt;/p&gt;


&lt;p&gt;I have a test case to reproduce this issue and I will send it in my next email.&lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
Venkat&lt;/p&gt;




</comment>
                            <comment id="14009684" author="ramanasv" created="Tue, 27 May 2014 13:59:07 +0000"  >&lt;p&gt;Hi Thiru,&lt;/p&gt;

&lt;p&gt;I attached 4 patch files (patch over your patch) for the following issues.&lt;br/&gt;
1) ResolvingGrammarGenerator::getWriterProduction function doesn&#8217;t work with Schemas with Symbollic nodes. Look at the attached &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1474&quot; title=&quot;C++ resolving decoder doesn&amp;#39;t work when reader schema has more fields than writer schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1474&quot;&gt;&lt;del&gt;AVRO-1474&lt;/del&gt;&lt;/a&gt;-ResolvingDecoder.patch file for the fix.&lt;br/&gt;
2) Enum ordering doesn&apos;t work. Look at the &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1474&quot; title=&quot;C++ resolving decoder doesn&amp;#39;t work when reader schema has more fields than writer schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1474&quot;&gt;&lt;del&gt;AVRO-1474&lt;/del&gt;&lt;/a&gt;-ENUM.patch file for the fix&lt;br/&gt;
3) Resolving decoder re-use issue. Look at the &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1474&quot; title=&quot;C++ resolving decoder doesn&amp;#39;t work when reader schema has more fields than writer schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1474&quot;&gt;&lt;del&gt;AVRO-1474&lt;/del&gt;&lt;/a&gt;-REUSE-RD.patch for the fox&lt;br/&gt;
4) Bug in AVRO map handling because of shared_ptr. Please look at the &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1474&quot; title=&quot;C++ resolving decoder doesn&amp;#39;t work when reader schema has more fields than writer schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1474&quot;&gt;&lt;del&gt;AVRO-1474&lt;/del&gt;&lt;/a&gt;-MAP.patch file.&lt;/p&gt;

&lt;p&gt;Please review these files and make these changes available for the next Avro Release if it makes sense. &lt;/p&gt;</comment>
                            <comment id="14047188" author="jira-bot" created="Sun, 29 Jun 2014 18:00:12 +0000"  >&lt;p&gt;Commit 1606545 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=thiru_mg&quot; class=&quot;user-hover&quot; rel=&quot;thiru_mg&quot;&gt;Thiruvalluvan M. G.&lt;/a&gt; in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1606545&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1606545&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1474&quot; title=&quot;C++ resolving decoder doesn&amp;#39;t work when reader schema has more fields than writer schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1474&quot;&gt;&lt;del&gt;AVRO-1474&lt;/del&gt;&lt;/a&gt;. C++ resolvind decoder doesn&apos;t work when reader schema has more fields than writer schema&lt;/p&gt;</comment>
                            <comment id="14047191" author="thiru_mg" created="Sun, 29 Jun 2014 18:00:48 +0000"  >&lt;p&gt;Committed revision 1606545. Thank you Ramana.&lt;/p&gt;</comment>
                            <comment id="14047204" author="hudson" created="Sun, 29 Jun 2014 18:36:45 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #460 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/460/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/460/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1474&quot; title=&quot;C++ resolving decoder doesn&amp;#39;t work when reader schema has more fields than writer schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1474&quot;&gt;&lt;del&gt;AVRO-1474&lt;/del&gt;&lt;/a&gt;. C++ resolvind decoder doesn&apos;t work when reader schema has more fields than writer schema (thiru: rev 1606545)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/.gitignore&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/CMakeLists.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/api/Generic.hh&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/api/GenericDatum.hh&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/api/Node.hh&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/api/NodeImpl.hh&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/api/Stream.hh&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/build.sh&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/examples/cpx.hh&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/Compiler.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/Generic.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/GenericDatum.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/Stream.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/avrogencpp.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/parsing/ResolvingDecoder.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/parsing/Symbol.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/parsing/Symbol.hh&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/parsing/ValidatingCodec.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/jsonschemas/bigrecord&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/jsonschemas/bigrecord_r&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/test/AvrogencppTests.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/test/CodecTests.cc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16730357" author="thiru_mg" created="Fri, 28 Dec 2018 16:25:31 +0000"  >&lt;p&gt;Closing issues that got resolved in earlier releases.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310050">
                    <name>Regression</name>
                                            <outwardlinks description="breaks">
                                        <issuelink>
            <issuekey id="12905299">AVRO-1750</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12646915" name="AVRO-1474-ENUM.patch" size="1142" author="ramanasv" created="Tue, 27 May 2014 13:52:43 +0000"/>
                            <attachment id="12646916" name="AVRO-1474-MAP.patch" size="2736" author="ramanasv" created="Tue, 27 May 2014 13:52:43 +0000"/>
                            <attachment id="12646917" name="AVRO-1474-REUSE-RD.patch" size="1416" author="ramanasv" created="Tue, 27 May 2014 13:52:43 +0000"/>
                            <attachment id="12641995" name="AVRO-1474-ResolvingDecoder.patch" size="3536" author="ramanasv" created="Fri, 25 Apr 2014 19:17:18 +0000"/>
                            <attachment id="12636750" name="AVRO-1474.patch" size="73706" author="thiru_mg" created="Tue, 25 Mar 2014 18:44:28 +0000"/>
                            <attachment id="12641645" name="bigrecord" size="2351" author="ramanasv" created="Thu, 24 Apr 2014 04:00:21 +0000"/>
                            <attachment id="12641646" name="bigrecord_r" size="3837" author="ramanasv" created="Thu, 24 Apr 2014 04:00:21 +0000"/>
                            <attachment id="12632335" name="reader" size="1861" author="ramanasv" created="Mon, 3 Mar 2014 19:28:21 +0000"/>
                            <attachment id="12632336" name="writer" size="1321" author="ramanasv" created="Mon, 3 Mar 2014 19:28:21 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 25 Mar 2014 18:44:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>376850</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1sxrz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>377145</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
