<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:15:03 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2011-1-18+AND+created+%3C%3D+2011-1-25+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="11" total="11"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-736] test_valgrind fails during make check for avro-c-1.4.1</title>
                <link>https://issues.apache.org/jira/browse/AVRO-736</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Downloaded c-1.4.1 fron stable.  First &quot;./configure; make; make check&quot; failed because valgrind not found.  Did &quot;sudo port valgrind  @3.6.0&quot; to install.  Did &quot; make check&quot; then &quot;make distclean; ./configure; make; make check&quot; and got the following both times.&lt;/p&gt;

&lt;p&gt;PASS: test_avro_data&lt;br/&gt;
PASS: test_cpp&lt;br/&gt;
+ which valgrind&lt;br/&gt;
/opt/local/bin/valgrind&lt;br/&gt;
+ LD_LIBRARY_PATH=../src/.libs/&lt;br/&gt;
+ valgrind --leak-check=full --show-reachable=yes -q .libs/test_avro_data&lt;br/&gt;
+ grep -E &apos;^==&lt;span class=&quot;error&quot;&gt;&amp;#91;0-9&amp;#93;&lt;/span&gt;+== &apos;&lt;br/&gt;
==29176== &lt;br/&gt;
==29176== Process terminating with default action of signal 5 (SIGTRAP)&lt;br/&gt;
==29176==    at 0x7FFF5FC01065: dyld_fatal_error (in /usr/lib/dyld)&lt;br/&gt;
==29176==    by 0x7FFF5FC0699B: dyld::_main(macho_header const*, unsigned long, int, char const*&lt;b&gt;, char const&lt;/b&gt;&lt;b&gt;, char const&lt;/b&gt;*) (in /usr/lib/dyld)&lt;br/&gt;
==29176==    by 0x7FFF5FC016D1: dyldbootstrap::start(macho_header const*, int, char const**, long) (in /usr/lib/dyld)&lt;br/&gt;
==29176==    by 0x7FFF5FC01051: _dyld_start (in /usr/lib/dyld)&lt;br/&gt;
==29176==    by 0xFFFFFFFF: ???&lt;br/&gt;
+ &apos;&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39; 0 -eq 0 &amp;#39;&amp;#93;&lt;/span&gt;&apos;&lt;br/&gt;
+ exit 1&lt;br/&gt;
FAIL: test_valgrind&lt;br/&gt;
==========================================================&lt;br/&gt;
1 of 4 tests failed&lt;br/&gt;
Please report to &lt;a href=&quot;http://issues.apache.org/jira/browse/AVRO&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/AVRO&lt;/a&gt;&lt;br/&gt;
==========================================================&lt;br/&gt;
Make&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;: *** &lt;span class=&quot;error&quot;&gt;&amp;#91;check-TESTS&amp;#93;&lt;/span&gt; Error 1&lt;br/&gt;
make&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;: *** &lt;span class=&quot;error&quot;&gt;&amp;#91;check-am&amp;#93;&lt;/span&gt; Error 2&lt;br/&gt;
make: *** &lt;span class=&quot;error&quot;&gt;&amp;#91;check-recursive&amp;#93;&lt;/span&gt; Error 1&lt;br/&gt;
bash-3.2$ &lt;/p&gt;

&lt;p&gt;This is my first attempt at building any avro component, so it is entirely possible that I have done something wrong to cause this.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Macbook Pro 2.53Ghz Intel Core I5, 8GB Ram, OSX 10.6.4&lt;/p&gt;</environment>
        <key id="12495927">AVRO-736</key>
            <summary>test_valgrind fails during make check for avro-c-1.4.1</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="brucem">Bruce Mitchener</assignee>
                                    <reporter username="mchugh">John McHugh</reporter>
                        <labels>
                    </labels>
                <created>Tue, 18 Jan 2011 19:09:30 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:48 +0000</updated>
                            <resolved>Mon, 24 Jan 2011 12:10:49 +0000</resolved>
                                    <version>1.4.1</version>
                                    <fixVersion>1.5.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12984121" author="brucem" created="Thu, 20 Jan 2011 10:12:48 +0000"  >&lt;p&gt;This is because the test_valgrind script uses LD_LIBRARY_PATH ... I may have a better way to do this.&lt;/p&gt;</comment>
                            <comment id="12984125" author="brucem" created="Thu, 20 Jan 2011 10:34:12 +0000"  >&lt;p&gt;Fixing this introduces some new failures:&lt;/p&gt;

&lt;p&gt;==55169== Invalid read of size 8&lt;br/&gt;
==55169==    at 0x10002A061: avro_schema_decref (schema.c:193)&lt;br/&gt;
==55169==    by 0x100001084: test_fixed (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169==    by 0x100001FF7: main (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169==  Address 0x1002f8860 is 16 bytes inside a block of size 40 free&apos;d&lt;br/&gt;
==55169==    at 0x10001446F: free (vg_replace_malloc.c:366)&lt;br/&gt;
==55169==    by 0x100000D62: test_allocator (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169==    by 0x100001023: test_fixed (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169==    by 0x100001FF7: main (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== &lt;br/&gt;
==55169== Invalid write of size 8&lt;br/&gt;
==55169==    at 0x10002A073: avro_schema_decref (schema.c:193)&lt;br/&gt;
==55169==    by 0x100001084: test_fixed (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169==    by 0x100001FF7: main (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169==  Address 0x1002f8860 is 16 bytes inside a block of size 40 free&apos;d&lt;br/&gt;
==55169==    at 0x10001446F: free (vg_replace_malloc.c:366)&lt;br/&gt;
==55169==    by 0x100000D62: test_allocator (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169==    by 0x100001023: test_fixed (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169==    by 0x100001FF7: main (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== &lt;br/&gt;
==55169== 32 bytes in 1 blocks are still reachable in loss record 1 of 4&lt;br/&gt;
==55169==    at 0x100014915: malloc (vg_replace_malloc.c:236)&lt;br/&gt;
==55169==    by 0x100080E98: __Balloc_D2A (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x10009613F: __rv_alloc_D2A (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x100095566: __dtoa (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x100056EFF: __vfprintf (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x10005B656: snprintf (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x100031190: do_dump (dump.c:200)&lt;br/&gt;
==55169==    by 0x1000310D8: do_dump (dump.c:249)&lt;br/&gt;
==55169==    by 0x10003151B: json_dumps (dump.c:429)&lt;br/&gt;
==55169==    by 0x10002EE3C: avro_datum_to_json (datum_json.c:329)&lt;br/&gt;
==55169==    by 0x100000CE8: test_json (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169==    by 0x100001C83: test_float (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== &lt;br/&gt;
==55169== 36 bytes in 1 blocks are still reachable in loss record 2 of 4&lt;br/&gt;
==55169==    at 0x100014915: malloc (vg_replace_malloc.c:236)&lt;br/&gt;
==55169==    by 0x100080E98: __Balloc_D2A (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x100080F7A: __d2b_D2A (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x1000952A3: __dtoa (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x100056EFF: __vfprintf (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x10005B656: snprintf (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x100031190: do_dump (dump.c:200)&lt;br/&gt;
==55169==    by 0x1000310D8: do_dump (dump.c:249)&lt;br/&gt;
==55169==    by 0x10003151B: json_dumps (dump.c:429)&lt;br/&gt;
==55169==    by 0x10002EE3C: avro_datum_to_json (datum_json.c:329)&lt;br/&gt;
==55169==    by 0x100000CE8: test_json (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169==    by 0x100001C83: test_float (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== &lt;br/&gt;
==55169== 88 bytes in 1 blocks are still reachable in loss record 3 of 4&lt;br/&gt;
==55169==    at 0x100014915: malloc (vg_replace_malloc.c:236)&lt;br/&gt;
==55169==    by 0x10004B0EB: get_or_create_key_element (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x10004B008: _keymgr_get_and_lock_processwide_ptr_2 (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x10004AFCF: __keymgr_initializer (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x1000495E7: libSystem_initializer (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x7FFF5FC0D4FF: ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&amp;amp;) (in /usr/lib/dyld)&lt;br/&gt;
==55169==    by 0x7FFF5FC0BCEB: ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&amp;amp;, unsigned int) (in /usr/lib/dyld)&lt;br/&gt;
==55169==    by 0x7FFF5FC0BC9C: ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&amp;amp;, unsigned int) (in /usr/lib/dyld)&lt;br/&gt;
==55169==    by 0x7FFF5FC0BDA5: ImageLoader::runInitializers(ImageLoader::LinkContext const&amp;amp;) (in /usr/lib/dyld)&lt;br/&gt;
==55169==    by 0x7FFF5FC020EE: dyld::initializeMainExecutable() (in /usr/lib/dyld)&lt;br/&gt;
==55169==    by 0x7FFF5FC06980: dyld::_main(macho_header const*, unsigned long, int, char const*&lt;b&gt;, char const&lt;/b&gt;&lt;b&gt;, char const&lt;/b&gt;*) (in /usr/lib/dyld)&lt;br/&gt;
==55169==    by 0x7FFF5FC016D1: dyldbootstrap::start(macho_header const*, int, char const**, long) (in /usr/lib/dyld)&lt;br/&gt;
==55169== &lt;br/&gt;
==55169== 128 bytes in 1 blocks are still reachable in loss record 4 of 4&lt;br/&gt;
==55169==    at 0x100014915: malloc (vg_replace_malloc.c:236)&lt;br/&gt;
==55169==    by 0x100080E3F: __Balloc_D2A (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x100080F7A: __d2b_D2A (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x1000952A3: __dtoa (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x100056EFF: __vfprintf (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x10005B656: snprintf (in /usr/lib/libSystem.B.dylib)&lt;br/&gt;
==55169==    by 0x100031190: do_dump (dump.c:200)&lt;br/&gt;
==55169==    by 0x1000310D8: do_dump (dump.c:249)&lt;br/&gt;
==55169==    by 0x10003151B: json_dumps (dump.c:429)&lt;br/&gt;
==55169==    by 0x10002EE3C: avro_datum_to_json (datum_json.c:329)&lt;br/&gt;
==55169==    by 0x100000CE8: test_json (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169==    by 0x100001C83: test_float (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== &lt;/p&gt;</comment>
                            <comment id="12984157" author="brucem" created="Thu, 20 Jan 2011 12:39:27 +0000"  >&lt;p&gt;I opened a separate bug for the avro_schema_decref issue and fixed that.&lt;/p&gt;

&lt;p&gt;I checked in something to allow valgrind to run test_avro_data on Mac OS X ... but I&apos;m not sure how / why snprintf is causing a problem yet (or what the best solution will be).&lt;/p&gt;</comment>
                            <comment id="12985639" author="brucem" created="Mon, 24 Jan 2011 12:10:10 +0000"  >&lt;p&gt;This was easy once I was awake. No need for --show-reachable=yes, so remove it. That&apos;s a difficult invariant to maintain on every OS / every libc / etc.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 20 Jan 2011 10:12:48 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4174</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 1 week ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e25r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80112</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-737] Java: Improve correlation between packages and modules</title>
                <link>https://issues.apache.org/jira/browse/AVRO-737</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Several packages have classes from multiple modules in the new layout.&lt;/p&gt;

&lt;p&gt;In general, we should avoid this.  Ideally, o.a.a.ipc would only exist in the avro-ipc.jar for example.&lt;/p&gt;

&lt;p&gt;For 1.5.0, I&apos;d like to move the easy stuff around to better correlate packages with modules.&lt;/p&gt;

&lt;p&gt;This will cause API changes we need to document.  Unfortunately, moving classes around is not something you can do gradually.  Ideally these are isolated.&lt;/p&gt;

</description>
                <environment></environment>
        <key id="12495934">AVRO-737</key>
            <summary>Java: Improve correlation between packages and modules</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21146&amp;avatarType=issuetype">Sub-task</type>
                            <parent id="12495596">AVRO-735</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="scott_carey">Scott Carey</assignee>
                                    <reporter username="scott_carey">Scott Carey</reporter>
                        <labels>
                    </labels>
                <created>Tue, 18 Jan 2011 20:48:36 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:46 +0000</updated>
                            <resolved>Fri, 28 Jan 2011 01:05:59 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12983487" author="scott_carey" created="Wed, 19 Jan 2011 01:29:50 +0000"  >&lt;p&gt;There are a few tricky parts:&lt;/p&gt;


&lt;ul&gt;
	&lt;li&gt;AvroRuntimeException.&lt;br/&gt;
If we move this into org.apache.avro.util, it changes the signature of the network protocols.  I&apos;m  not sure what the impact of this is, but it may not be acceptable.&lt;br/&gt;
The alternative is to move it from the avro project to the ipc project.  If we do that we have to change several other classes, or move them to ipc.  I&apos;m not familiar enough with ipc to know which way is best, or if we are stuck.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;mapred.tether generated classes.&lt;br/&gt;
We currently generate these in the ipc project.  Perhaps they should be generated in mapred instead.  Otherwise they would need to move to something like o.a.a.ipc.mapred.tether.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Tool.java&lt;br/&gt;
org.apache.avro.tool.Tool is defined in the avro project, but only implemented in the tools project.  Perhaps we should move it to o.a.a.tool.api, or move all tools in the tools project somewhere else.  We need to keep this interface in the root project so that all tools don&apos;t have to reside in the tools project.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Easy changes, if we&apos;re OK with the package movement:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;ByteBufferInputStream and ByteBufferOutputStream moved from o.a.a.ipc to o.a.a.util&lt;/li&gt;
	&lt;li&gt;SpecificCompiler SchemaTask and ProtocolTask moved from o.a.a.specific  to o.a.a.specific.compiler ; associated tests as well&lt;/li&gt;
	&lt;li&gt;ReflectRequestor and ReflectResponder moved from o.a.a.reflect to o.a.a.ipc.reflect&lt;/li&gt;
	&lt;li&gt;SpecificRequestor and SpecificResponder moved from o.a.a.specific to o.a.a.ipc.specific&lt;/li&gt;
	&lt;li&gt;GenericRequestor and GenericResponder moved from o.a.a.generic to o.a.a.ipc.generic&lt;/li&gt;
&lt;/ul&gt;




</comment>
                            <comment id="12983489" author="scott_carey" created="Wed, 19 Jan 2011 01:33:23 +0000"  >&lt;p&gt;patch that applies the &apos;easy&apos; changes noted above. &lt;/p&gt;</comment>
                            <comment id="12983900" author="cutting" created="Wed, 19 Jan 2011 22:12:13 +0000"  >&lt;p&gt;The patch looks fine.  +1&lt;/p&gt;

&lt;p&gt;What&apos;s the motivation for moving AvroRuntimeException?  Did you mean AvroRemoteException?  If so, then &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-732&quot; title=&quot;Generated protocol&amp;#39;s method should not throw AvroRemoteException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-732&quot;&gt;AVRO-732&lt;/a&gt; would remove that from generated method signatures.&lt;/p&gt;

&lt;p&gt;+1 for moving the tether generated classes into the mapred module.&lt;/p&gt;

&lt;p&gt;As for tools, why not just move the Tool interface and all implementations to the tool module?&lt;/p&gt;</comment>
                            <comment id="12983911" author="scott_carey" created="Wed, 19 Jan 2011 22:36:22 +0000"  >&lt;p&gt;Ah, yes AvroRemoteException.   &lt;br/&gt;
I was afraid to move it because doing so changed the generated method signatures.  If we&apos;re already going to change that, then I&apos;ll move it to o.a.a.util or o.a.a.  If so, we should fix &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-732&quot; title=&quot;Generated protocol&amp;#39;s method should not throw AvroRemoteException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-732&quot;&gt;AVRO-732&lt;/a&gt; for 1.5.0 as well.&lt;/p&gt;

&lt;p&gt;Several classes implement Tool that are not in the Tools package.  I assume that we will have use cases in the future for Tool classes that don&apos;t reside in avro-tools.  I did not investigate whether the ones already defined in other projects can be moved easily.&lt;/p&gt;</comment>
                            <comment id="12983918" author="cutting" created="Wed, 19 Jan 2011 22:43:22 +0000"  >&lt;p&gt;There shouldn&apos;t be a problem moving tool implementations to the tools module, since the tools module depends on every other module.  There could be issues if a Tool depends on a non-public API, that that would be a bug anyway, I think.&lt;/p&gt;</comment>
                            <comment id="12983946" author="scott_carey" created="Thu, 20 Jan 2011 00:15:36 +0000"  >
&lt;blockquote&gt;&lt;p&gt;There could be issues if a Tool depends on a non-public API, that that would be a bug anyway, I think. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good point.  The only case this wouldn&apos;t be true would be if the tool was only for tests.  But we could make a clone Tool interface for tests if we wanted to.   &lt;/p&gt;

&lt;p&gt;I&apos;ll move them to the tools package/module.&lt;/p&gt;</comment>
                            <comment id="12985027" author="scott_carey" created="Sat, 22 Jan 2011 01:35:09 +0000"  >&lt;p&gt;Updated patch includes the prior changes plus: &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;AvroRemoteException is now in o.a.a.   Generated signatures in protocols include this change.  (address &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-732&quot; title=&quot;Generated protocol&amp;#39;s method should not throw AvroRemoteException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-732&quot;&gt;AVRO-732&lt;/a&gt; separately after)&lt;/li&gt;
	&lt;li&gt;mapred.tether generated classes now in ipc.mapred.tether.&lt;/li&gt;
	&lt;li&gt;Tool.java and all Tool classes now in tools project, in o.a.a.tool&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I took the opportunity to do one more package reorg:&lt;br/&gt;
create o.a.a.compiler&lt;br/&gt;
move o.a.a.idl and o.a.a.specific.compiler inside of here.&lt;/p&gt;

&lt;p&gt;The end result is a good one, and was easier than I thought it would be &amp;#8212;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;avro-ipc.jar exclusively contains o.a.a.ipc.** packages&lt;/li&gt;
	&lt;li&gt;avro-tools.jar exclusively contains o.a.a.tool.** packages&lt;/li&gt;
	&lt;li&gt;avro-mapred.jar exclusively contains o.a.a.mapred.** packages&lt;/li&gt;
	&lt;li&gt;avro-maven-plugin.jar exclusively contains o.a.a.mojo.** packages&lt;/li&gt;
	&lt;li&gt;avro-compiler.jar exclusively contains o.a.a.compiler.** packages&lt;/li&gt;
	&lt;li&gt;avro.jar contains all the other stuff &amp;#8211; util, tools, o.a.a, file, generic, specific, reflect, io&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There is work to do to refactor the test side of things to work similarly.  I That is going to be more difficult and require some maven pom.xml changes, but will be worthwhile.  Right now we don&apos;t unit test the compiler completely until ipc, but ipc requires the compiler to generate sources.  So if there is a bug in the compiler that makes code generation fail you can&apos;t test it!&lt;/p&gt;
</comment>
                            <comment id="12985182" author="scott_carey" created="Sat, 22 Jan 2011 19:10:21 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-737&quot; title=&quot;Java: Improve correlation between packages and modules&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-737&quot;&gt;&lt;del&gt;AVRO-737&lt;/del&gt;&lt;/a&gt;.v2.patch&lt;/p&gt;</comment>
                            <comment id="12985736" author="h2o" created="Mon, 24 Jan 2011 15:35:44 +0000"  >&lt;p&gt;This sounds great but I haven&apos;t been able to cleanly apply the v2 patch on top of trunk, no matter how hard I tried. Suggestions?&lt;/p&gt;</comment>
                            <comment id="12985907" author="scott_carey" created="Mon, 24 Jan 2011 19:10:59 +0000"  >&lt;p&gt;I&apos;m going to have to provide a shell script to run before the patch.   The last few steps rearranged packages rather than just moving files.  It will be a bash script, but a windows user should be able to convert it easily to &apos;.cmd&apos; since it should only have svn commands and some basic file ops.&lt;/p&gt;</comment>
                            <comment id="12986224" author="scott_carey" created="Tue, 25 Jan 2011 05:07:31 +0000"  >&lt;p&gt;New patch and migrate_avro_packages.sh script.&lt;/p&gt;

&lt;p&gt;First run the script, then the (v3) patch.&lt;/p&gt;</comment>
                            <comment id="12986302" author="h2o" created="Tue, 25 Jan 2011 09:54:21 +0000"  >&lt;p&gt;Got v3 to run &amp;amp; apply on Windows; no changes necessary except for renaming the script to .bat. Regular commandline GNU patch wouldn&apos;t eat the patch file, but TortoiseSVN liked it and everything worked/built. Nice! The changes are pretty much exactly what I had in mind, thanks a lot. This will be very helpful going forwards.&lt;/p&gt;

&lt;p&gt;One addition to the first block of instructions in the script:&lt;/p&gt;

&lt;p&gt;svn mv lang/java/avro/src/main/java/org/apache/avro/ipc/package.html lang/java/ipc/src/main/java/org/apache/avro/ipc/&lt;/p&gt;

&lt;p&gt;to move the lonely package.html file across projects.&lt;/p&gt;

&lt;p&gt;I did get a build/install error with the tools project but couldn&apos;t really find what was wrong. Might try again later.&lt;/p&gt;
</comment>
                            <comment id="12986313" author="h2o" created="Tue, 25 Jan 2011 10:13:07 +0000"  >&lt;p&gt;The remaining problem is that the avro:test-jar is not yet found for assembling tools:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; Failed to execute goal on project avro-tools: Could not resolve dependencies for project org.apache.avro:avro-tools:jar:1.5.0-SNAPSHOT: Failure to find org.apache.avro:avro:jar:tests:1.5.0-SNAPSHOT in &lt;a href=&quot;http://tux:8080/nexus/content/groups/public&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://tux:8080/nexus/content/groups/public&lt;/a&gt; was cached in the local repository, resolution will not be reattempted until the update interval of nexus has elapsed or updates are forced -&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;Help 1&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;There is no avro:avro-tests.jar created yet. Doing so manually will create the jar, but it will then not be seen or installed during the install phase since it is not declared anywhere.&lt;/p&gt;</comment>
                            <comment id="12986546" author="cutting" created="Tue, 25 Jan 2011 17:46:40 +0000"  >&lt;p&gt;This patch looks good and passes test for me.  Thanks Scott!  +1&lt;/p&gt;</comment>
                            <comment id="12986596" author="scott_carey" created="Tue, 25 Jan 2011 18:47:37 +0000"  >&lt;p&gt;@Holger&lt;/p&gt;

&lt;p&gt;What maven version are you using?&lt;/p&gt;

&lt;p&gt;Try &apos;mvn install -DskipTests -U&apos;  which will force an update of your local repo and do a full build and install of libraries to your local repo. &lt;/p&gt;

&lt;p&gt;If you still have problems, make sure your settings.xml (local maven configuration) is not directing you to a corporate maven repository that potentially is blocking certain libraries or failing to proxy others. &lt;/p&gt;

&lt;p&gt;@Doug&lt;br/&gt;
I will commit this patch.  There may subsequently be some trivial changes to move dangling folders or package.html files.  If there are, I&apos;ll have a second patch since those changes should be trivial to review alone.&lt;/p&gt;</comment>
                            <comment id="12986618" author="h2o" created="Tue, 25 Jan 2011 19:13:01 +0000"  >&lt;p&gt;Scott, I use 3.0.2 and my own personal nexus instance, but that had nothing to do with the problem as everything was local. As I said, tools tries to use the avro-tests.jar but as far as I can tell this is not yet declared anywhere. I did full clean installs and always skip tests by default etc. (not a mvn newbie &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I don&apos;t have access to the machine right now but will take another look tomorrow. If this works for everyone else just commit &amp;amp; I&apos;ll continue to track/report against svn trunk.&lt;/p&gt;</comment>
                            <comment id="12986673" author="scott_carey" created="Tue, 25 Jan 2011 20:32:16 +0000"  >&lt;p&gt;Odd.&lt;/p&gt;

&lt;p&gt;OK, so avro/pom.xml creates its tests jar  (avro.jar, classifier: tests) with:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &amp;lt;!-- in addition to the usual jar artifact, create a -tests.jar that contains our test classes.
             this allows downstream dependencies in the build to use test utility classes. --&amp;gt;
        &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-jar-plugin&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;test-jar&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The jar builds and appears in avro/target as  avro-1.5.0-SNAPSHOT-tests.jar.&lt;/p&gt;

&lt;p&gt;Perhaps the problem is what is noted at the bottom of this page:&lt;br/&gt;
&lt;a href=&quot;http://maven.apache.org/guides/mini/guide-attached-tests.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/guides/mini/guide-attached-tests.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that previous editions of this guide suggested to use &amp;lt;classifier&amp;gt;tests&amp;lt;/classifier&amp;gt; instead of &amp;lt;type&amp;gt;test-jar&amp;lt;/type&amp;gt;. While this currently works for some cases, it does not properly work during a reactor build of the test JAR module and any consumer if a lifecycle phase prior to install is invoked. In such a scenario, Maven will not resolve the test JAR from the output of the reactor build but from the local/remote repository. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Does it work if you change the ipc dependency on avro-test from &amp;lt;classifier&amp;gt;tests&amp;lt;/classifier&amp;gt; to &amp;lt;type&amp;gt;test-jar&amp;lt;type&amp;gt; ?  or potentially adding that to tools?  I&apos;ll have time to experiment with that later today.&lt;/p&gt;


</comment>
                            <comment id="12986755" author="scott_carey" created="Tue, 25 Jan 2011 23:10:29 +0000"  >&lt;p&gt;Holger,&lt;/p&gt;

&lt;p&gt;I can reproduce your problem by deleting org/apache/avro from my local repo and doing &apos;clean compile&apos;.   &apos;clean test&apos; or &apos;clean install&apos; works.    Changing the dependency from &amp;lt;classifier&amp;gt;tests&amp;lt;/classifier&amp;gt; to &amp;lt;type&amp;gt;test-jar&amp;lt;/type&amp;gt; does not seem to help.&lt;/p&gt;

&lt;p&gt;Even though the test scope dependency is not needed for &apos;compile&apos; it is searching for it and fails when it is not found.&lt;/p&gt;

&lt;p&gt;A possible solution is to re-map the test-compile portion in the avro project to occur in the compile phase.  That should attatch the test stuff to the reactor eariler.&lt;/p&gt;</comment>
                            <comment id="12986799" author="scott_carey" created="Wed, 26 Jan 2011 01:06:42 +0000"  >&lt;p&gt;It appears that this is a bug in Maven.  The test-jar test dependency is resolved mistakenly during the compile phase rather than the test-compile phase.  It isn&apos;t possible to move the test compilation up in the lifecycle without a lot of work because the phases between compile and test-compile do things like configure the classpath and filter files.   &lt;/p&gt;

&lt;p&gt;The workaround is to use &apos;test-compile&apos; instead of &apos;compile&apos; when the test artifact has not been installed to the local repo.&lt;/p&gt;

&lt;p&gt;If there are suggestions for a better work-around I&apos;d love to hear it.  We could go back to copying those test classes across projects but I&apos;d rather not.  &lt;/p&gt;</comment>
                            <comment id="12986814" author="h2o" created="Wed, 26 Jan 2011 02:11:30 +0000"  >&lt;p&gt;Scott: I thought something was wrong since I&apos;ve used attached test jars in the past just fine. Just found this: &lt;a href=&quot;http://jira.codehaus.org/browse/MJAR-138&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jira.codehaus.org/browse/MJAR-138&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12986833" author="scott_carey" created="Wed, 26 Jan 2011 03:41:45 +0000"  >&lt;p&gt;Big clue:&lt;/p&gt;

&lt;p&gt;If you break the inheritance from the apache parent pom, it works.&lt;/p&gt;

&lt;p&gt;So, one of the cascaded dependencies from that is breaking it.&lt;/p&gt;
</comment>
                            <comment id="12987147" author="scott_carey" created="Wed, 26 Jan 2011 18:34:39 +0000"  >&lt;p&gt;I found the issue.  It is in the remote-resources-plugin that we inherit from Apache that automatically takes care of placing the apache license in all the jars.&lt;/p&gt;

&lt;p&gt;I filed a bug on it:&lt;br/&gt;
&lt;a href=&quot;http://jira.codehaus.org/browse/MRRESOURCES-53&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jira.codehaus.org/browse/MRRESOURCES-53&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a workaround for us I believe.   I&apos;ll submit a new patch later today.&lt;/p&gt;
</comment>
                            <comment id="12987188" author="scott_carey" created="Wed, 26 Jan 2011 19:51:30 +0000"  >&lt;p&gt;Disabling the plugin is not an option, it creates DEPENDENCY, LICENCE, and NOTICE files for every jar, as required by Apache.&lt;/p&gt;

&lt;p&gt;I&apos;m going to back out the changes that remove the duplicated test classes for now.  After that bug is fixed, we can use test-jar artifacts.  Not ideal, but I can&apos;t find any other way and I&apos;ve spent a lot of time on this.&lt;/p&gt;</comment>
                            <comment id="12987247" author="scott_carey" created="Wed, 26 Jan 2011 21:50:44 +0000"  >&lt;p&gt;New script and patch that avoids using test-jar artifacts.&lt;/p&gt;

&lt;p&gt;Other issues caused by test-jar artifacts will be addressed in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-716&quot; title=&quot;New Java build: integrate with parent build and remove cruft&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-716&quot;&gt;&lt;del&gt;AVRO-716&lt;/del&gt;&lt;/a&gt;.   &lt;/p&gt;</comment>
                            <comment id="12987400" author="scott_carey" created="Thu, 27 Jan 2011 06:26:56 +0000"  >&lt;p&gt;I believe this is the last patch version.  I have tested it several times.&lt;/p&gt;

&lt;p&gt;There are minor differences from the last one:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;This includes the changes to CHANGES.txt&lt;/li&gt;
	&lt;li&gt;The ipc.mapred.tether generated classes are now in mapred.tether inside of the avro-mapred project.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;ll commit this after confirmation that this works.  The CHANGES.txt message for this change is:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    AVRO-716. Java: Improve correlation between packages and modules.
    Each module introduced by AVRO-647 now exclusively provides 
    different java packages.  This required moving several classes
    around into new packages and will therefore require users to
    change their package imports when upgrading to Avro 1.5.0.
    Summary of changes:
    * AvroRemoteException has moved to org.apache.avro
    * ByteBufferInputStream and ByteBufferInputStream have moved 
      to org.apache.avro.util
    * InduceSchemaTool has moved to org.apache.avro.tools
    * SpecificCompiler, SchemaTask, and ProtocolTask have moved 
      to org.apache.avro.compiler.specific
    * The Idl compiler has moved to org.apache.avro.compiler.idl
    * ReflectRequestor and ReflectResponder have moved to
      org.apache.avro.ipc.reflect
    * GenericRequestor and GenericResponder have moved to
      org.apache.avro.ipc.generic
    * SpecificRequestor and SpecificResponder have moved to
      org.apache.avro.ipc.specific
    (scottcarey)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12987741" author="cutting" created="Thu, 27 Jan 2011 20:25:19 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="12987867" author="scott_carey" created="Fri, 28 Jan 2011 01:05:39 +0000"  >&lt;p&gt;This has been committed.&lt;/p&gt;</comment>
                            <comment id="12989339" author="cutting" created="Tue, 1 Feb 2011 19:11:23 +0000"  >&lt;p&gt;Resolved in &lt;a href=&quot;http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1064397&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1064397&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12468712" name="AVRO-737.v1.patch" size="119292" author="scott_carey" created="Wed, 19 Jan 2011 01:33:23 +0000"/>
                            <attachment id="12469020" name="AVRO-737.v2.patch" size="201019" author="scott_carey" created="Sat, 22 Jan 2011 01:35:09 +0000"/>
                            <attachment id="12469240" name="AVRO-737.v3.patch" size="66688" author="scott_carey" created="Tue, 25 Jan 2011 05:07:31 +0000"/>
                            <attachment id="12469483" name="AVRO-737.v4.patch" size="66288" author="scott_carey" created="Wed, 26 Jan 2011 21:50:44 +0000"/>
                            <attachment id="12469521" name="AVRO-737.v5.patch" size="66253" author="scott_carey" created="Thu, 27 Jan 2011 06:26:56 +0000"/>
                            <attachment id="12469239" name="migrate_avro_packages.sh" size="3334" author="scott_carey" created="Tue, 25 Jan 2011 05:07:31 +0000"/>
                            <attachment id="12469484" name="migrate_avro_packages.v4.sh" size="3262" author="scott_carey" created="Wed, 26 Jan 2011 21:50:44 +0000"/>
                            <attachment id="12469522" name="migrate_avro_packages.v5.sh" size="3182" author="scott_carey" created="Thu, 27 Jan 2011 06:26:56 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 19 Jan 2011 22:12:13 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4169</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 51 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e25z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80113</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-738] BinaryEncoder&apos;s init() function does not reset the OutputStream of the embedded SimpleByteWriter</title>
                <link>https://issues.apache.org/jira/browse/AVRO-738</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;This is a problem if one is trying to reuse the BinaryEncoder by passing a new OutputStream with the init() method. While the encoder will write all the fields to the new OutputStream, fields that are of type &quot;bytes&quot; do not get written. This effectively means that one needs to create a new BinaryEncoder each time if one is serializing record with a &quot;bytes&quot; field in it.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12495966">AVRO-738</key>
            <summary>BinaryEncoder&apos;s init() function does not reset the OutputStream of the embedded SimpleByteWriter</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.svg">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="devsarkar">Devajyoti Sarkar</reporter>
                        <labels>
                    </labels>
                <created>Wed, 19 Jan 2011 06:00:56 +0000</created>
                <updated>Fri, 6 May 2011 19:18:37 +0000</updated>
                            <resolved>Mon, 14 Mar 2011 16:59:52 +0000</resolved>
                                    <version>1.4.1</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12983616" author="scott_carey" created="Wed, 19 Jan 2011 08:47:17 +0000"  >&lt;p&gt;This looks like a relatively crirical bug.&lt;/p&gt;

&lt;p&gt;BinaryEncoder is not clearing out its byteWriter state when initialized with a new output stream.&lt;/p&gt;

&lt;p&gt;In general it seems like there are several performance enhancements to be had as well &amp;#8211; access to the outputStream is too fine-grained.&lt;/p&gt;

&lt;p&gt;As a work-around use the &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void writeBytes(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bytes, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; start, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; len) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;signature instead of&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void writeBytes(ByteBuffer bytes) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That should avoid this bug.&lt;/p&gt;</comment>
                            <comment id="12997636" author="scott_carey" created="Tue, 22 Feb 2011 04:20:14 +0000"  >&lt;p&gt;After &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-753&quot; title=&quot;Java:  Improve BinaryEncoder Performance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-753&quot;&gt;&lt;del&gt;AVRO-753&lt;/del&gt;&lt;/a&gt;, this will be closed since there won&apos;t be an init() method and the replacement via EncoderFactory.binaryEncoder() will not have this problem.&lt;/p&gt;</comment>
                            <comment id="13006514" author="cutting" created="Mon, 14 Mar 2011 16:59:52 +0000"  >&lt;p&gt;This was made obsolete by &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-753&quot; title=&quot;Java:  Improve BinaryEncoder Performance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-753&quot;&gt;&lt;del&gt;AVRO-753&lt;/del&gt;&lt;/a&gt;.  Resolving.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12497300">AVRO-753</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 19 Jan 2011 08:47:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94975</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 46 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e267:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80114</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-739] Add Date/Time data types</title>
                <link>https://issues.apache.org/jira/browse/AVRO-739</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description></description>
                <environment></environment>
        <key id="12496081">AVRO-739</key>
            <summary>Add Date/Time data types</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dk-apache">Dmitry Kovalev</assignee>
                                    <reporter username="hammer">Jeff Hammerbacher</reporter>
                        <labels>
                    </labels>
                <created>Thu, 20 Jan 2011 01:30:50 +0000</created>
                <updated>Mon, 1 Feb 2016 14:55:53 +0000</updated>
                            <resolved>Wed, 17 Sep 2014 13:14:13 +0000</resolved>
                                                    <fixVersion>1.8.0</fixVersion>
                                    <component>spec</component>
                        <due></due>
                            <votes>8</votes>
                                    <watches>30</watches>
                                                                <comments>
                            <comment id="12986729" author="rbodkin" created="Tue, 25 Jan 2011 22:37:36 +0000"  >&lt;p&gt;From the discussion on the users list, I agree that it&apos;d be great to start with a simple timestamp, which gets serialized as a long. Let&apos;s start with a simple feature, and future enhancements can be tracked separately.&lt;/p&gt;

&lt;p&gt;Doug proposed this design:&lt;/p&gt;


&lt;p&gt;I noted that it would be nice to allow some flexibility in the implementation&lt;br/&gt;
classes for dates, e.g., letting Java users use Joda time classes as well&lt;br/&gt;
as java.util.Date&lt;/p&gt;

&lt;p&gt;Scott said:&lt;br/&gt;
Absolutely.  This is a per-language feature though, so it may not require&lt;br/&gt;
much of the spec.  For example, in Java it could simply be a configuration&lt;br/&gt;
parameter passed to the DatumReader/Writers.  It doesn&apos;t make a lot of&lt;br/&gt;
sense to store metadata on the data that says &quot;this is a Joda object, not&lt;br/&gt;
java.util.Date&quot; &amp;#8211; that is a user choice and not intrinsic to describing&lt;br/&gt;
the data.&lt;/p&gt;

&lt;p&gt;My input: &lt;br/&gt;
I agree this shouldn&apos;t be part of the serialized format. It would be nice to&lt;br/&gt;
have a clean way to specify the configuration/mappings used that allows&lt;br/&gt;
for specifying the mappings for more such org.apache.avro data types. It&lt;br/&gt;
also should be supported for reflection and code generation approaches, as well.&lt;/p&gt;

&lt;p&gt;Scott also said:&lt;br/&gt;
There are other questions too &amp;#8211; what are the timestamp units&lt;br/&gt;
(milliseconds? configurable?), what is the origin (1970? 2010?&lt;br/&gt;
configurable?) &amp;#8211; these decisions affect the serialization size.&lt;/p&gt;

&lt;p&gt;My input:&lt;br/&gt;
I would like to see a format that allows storing data at the precision of popular libraries and languages (java.util.Date, Joda time, Python datetime, etc.). Having a long representing microseconds since Jan. 1 1970 seems like a good compromise for general purpose use. It supports higher precision libraries and still allows representing a few hundred thousand years of data. Some libraries do allow nanosecond resolution - but limiting to 270 years seems like a bigger limitation than microsecond precision.&lt;/p&gt;
</comment>
                            <comment id="12986730" author="rbodkin" created="Tue, 25 Jan 2011 22:39:43 +0000"  >&lt;p&gt;Sorry I forgot to pate in Doug Cutting&apos;s design:&lt;br/&gt;
The way that I have imagined doing this is to specify a standard schema&lt;br/&gt;
for dates, then implementations can optionally map this to a native date&lt;br/&gt;
type.&lt;/p&gt;

&lt;p&gt;The schema could be a record containing a long, e.g.:&lt;/p&gt;

&lt;p&gt;{&quot;type&quot;: &quot;record&quot;, &quot;name&quot;:&quot;org.apache.avro.lib.Date&quot;, &quot;fields&quot; : [&lt;/p&gt;
   {&quot;name&quot;: &quot;time&quot;, &quot;type&quot;: &quot;long&quot;}
&lt;p&gt;  ]&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;Java could read this into a java.util.Date, Python to a datetime, etc.&lt;br/&gt;
Such conventions could be added to the Avro specification.&lt;/p&gt;

&lt;p&gt;Does this sound like a reasonable approach?&lt;/p&gt;

&lt;p&gt;And also this email thread -&lt;/p&gt;

&lt;p&gt;On 01/18/2011 09:19 AM, Jeremy Custenborder wrote:&lt;br/&gt;
I agree with storing it as a long. How would you handle this in code&lt;br/&gt;
generation and serialization? Would you envision hooks during code&lt;br/&gt;
generation that would generate a member that is the native date time&lt;br/&gt;
for the language?&lt;/p&gt;

&lt;p&gt;Yes.  Just as &quot;bytes&quot; is represented in Java by java.nio.ByteBuffer,&lt;br/&gt;
&quot;org.apache.avro.lib.Date&quot; could be represented by java.util.Date.&lt;/p&gt;

&lt;p&gt;Does the serializer handle a date object that is&lt;br/&gt;
native to the language?&lt;/p&gt;

&lt;p&gt;Yes, serializers and deserializers would need to implement this mapping.&lt;/p&gt;

&lt;p&gt;Does this sound like a reasonable approach?&lt;/p&gt;

&lt;p&gt;I really like the idea of having a standard&lt;br/&gt;
datetime as a supported type of avro. It&apos;s a problem that everyone has&lt;br/&gt;
to solve on their own.&lt;/p&gt;</comment>
                            <comment id="12990370" author="jcustenborder" created="Thu, 3 Feb 2011 23:20:59 +0000"  >&lt;p&gt;What were you thinking a long with the number of milliseconds since 1980 UTC? If you need more precision than that you are most likely going to make your own type. I really like the idea of getting something that can map to the native types in most of the languages. This would be a really cool feature.    &lt;/p&gt;</comment>
                            <comment id="13128000" author="cafletch" created="Sat, 15 Oct 2011 00:09:44 +0000"  >&lt;p&gt;The serialization of date/times must incorporate timezone. If it does not, then i will be unable to use it for the large scale projects I am leading.  It doesnt matter to me if the format is custom in byte mode, but in json must be json compliant.&lt;/p&gt;</comment>
                            <comment id="13169988" author="russell.jurney" created="Thu, 15 Dec 2011 06:30:08 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1314&quot; title=&quot;Add DateTime Support to Pig&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1314&quot;&gt;&lt;del&gt;PIG-1314&lt;/del&gt;&lt;/a&gt; may be relevant.  ISO8601 datetime format seemed convenient.&lt;/p&gt;</comment>
                            <comment id="13179475" author="kbaltrinic" created="Wed, 4 Jan 2012 13:35:52 +0000"  >&lt;p&gt;I concur w/ C Fletcher that some consideration to timezones and daylight savings time is needed.  At the very minimum the spec would need require that in the absence of an explicit timezone, all times are in UTC.&lt;/p&gt;</comment>
                            <comment id="13474263" author="jdegoes" created="Thu, 11 Oct 2012 16:02:37 +0000"  >&lt;p&gt;Adopting UTC milliseconds as the date/time format is fundamentally wrong and will render the type useless for any serious application. ISO8601 is the standard format for date/time. It preserves the critical notion of timezone and daylight savings time, and of course lets you express time in UTC as well if that&apos;s what you want. The binary encoding is only slightly bulkier than UTC milliseconds.&lt;/p&gt;</comment>
                            <comment id="13751545" author="cutting" created="Tue, 27 Aug 2013 18:21:34 +0000"  >&lt;p&gt;The custom encoding feature added in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1341&quot; title=&quot;Allow controlling avro via java annotations when using reflection. &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1341&quot;&gt;&lt;del&gt;AVRO-1341&lt;/del&gt;&lt;/a&gt; might be a good way to implement this.  SpecificData could have a table mapping classes to custom encodings.&lt;/p&gt;

&lt;p&gt;By default this would map java.util.Date to a standard schema that writes it as a long.  My instinct is to use a record schema rather than a long schema, however.&lt;/p&gt;</comment>
                            <comment id="13760424" author="cutting" created="Fri, 6 Sep 2013 17:50:41 +0000"  >&lt;p&gt;Here&apos;s a patch that changes Java&apos;s specific &amp;amp; reflect to serialize and deserialize java.util.Date using the following schema:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.Datetime&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;ms&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&quot;&lt;/span&gt;}]}&quot;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is implemented by adding a custom encodings feature to SpecificData that permits a class to be mapped to a record schema.  I had to modify reflect&apos;s CustomEncoding API.  To make this back-compatible, we&apos;ll perhaps need to copy that API into specific, so this is not yet ready for commit.&lt;/p&gt;

&lt;p&gt;Do folks like this approach?  We proclaim a language-independent schema for datetimes, then implementations can choose to map this into a native type or not.&lt;/p&gt;

&lt;p&gt;I did not extend Generic, since I believe there is value in keeping Generic&apos;s representations a closed set of classes.  This permits applications to be sure they can process any data read using Generic.  I might be convinced to add this to Generic, but that would make it an incompatible change.&lt;/p&gt;</comment>
                            <comment id="13760525" author="scott_carey" created="Fri, 6 Sep 2013 19:11:26 +0000"  >&lt;p&gt;There are two types of interest, one that is a UTC coordinate &amp;#8211; a long like this one without any timezone or other &apos;date&apos; information, and one that is a date-time, and therefore must contain timezone information.   The latter would probably best be some ISO8601 subset.  The former is a long (which is only 5 bytes for &apos;today&apos;, if in ms since 1970 UTC. &lt;/p&gt;

&lt;p&gt;We should decide on the names for these two things now.  I think that &quot;Datetime&quot; is probably the thing that includes dates, times, and therefore time zones.   The pure long universal time coordinate is perhaps &quot;Instant&quot; or &quot;timestamp&quot; &amp;#8211; it has nothing to do with dates except that in Java the typical class used to hold such an instant is Date (or a long).&lt;/p&gt;


&lt;p&gt;I wish these were fundamental Avro primitive types.  To work well with database systems we need these two types.   The syntax as a special Record in the schema is klunky, but more backwards compatible.   If we assume that some version of Avro in the future requires all language implementations to support new primitive types for these, how would we migrate from this klunky form to &quot;type&quot;:&quot;instant&quot; ?&lt;/p&gt;

&lt;p&gt;This proposal isn&apos;t all that backwards compatible:  If Python doesn&apos;t know what &quot;org.apache.avro.Datetime&quot; is, it won&apos;t be able to decode the type.   Perhaps &lt;/p&gt;
{&quot;type&quot;:&quot;instant&quot;}
&lt;p&gt; is better &amp;#8211; other than colliding with existing schemas with a custom type of that name.  Perhaps &lt;/p&gt;
{&quot;type&quot;:&quot;org.apache.avro.instant&quot;}
&lt;p&gt;  Rather than the record with nested field?&lt;/p&gt;</comment>
                            <comment id="13760576" author="cutting" created="Fri, 6 Sep 2013 20:14:08 +0000"  >&lt;p&gt;&amp;gt; There are two types of interest [ ... ]&lt;/p&gt;

&lt;p&gt;These seem like two different external representations of the same thing.  A time plus a timezone can be losslessly converted to a UTC time.  You do lose the original timezone, but dates and times are usually displayed in the timezone of the displayer, not where the time was originally noted.&lt;/p&gt;

&lt;p&gt;Also note that SQL has five different variants (&lt;a href=&quot;http://en.wikipedia.org/wiki/SQL#Date_and_time&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/SQL#Date_and_time&lt;/a&gt;) which are interconvertable.  I suggest all of these should be converted to a single type in Avro.  Perhaps one could annotate the schema with resolution and/or timezone to improve fidelity, e.g., &lt;/p&gt;
{&quot;type&quot;:&quot;Datetime&quot;, &quot;resolution&quot;:&quot;date&quot;, &quot;timezone&quot;:&quot;PST&quot;}
&lt;p&gt;, but a long would always be written and used for comparison with other Datetime instances.&lt;/p&gt;

&lt;p&gt;&amp;gt; How would we migrate from this klunky form to &quot;type&quot;:&quot;instant&quot;?&lt;/p&gt;

&lt;p&gt;We could simply treat instances of the klunky schema identically to &quot;type&quot;:&quot;instant&quot;.&lt;/p&gt;</comment>
                            <comment id="13760779" author="scott_carey" created="Sat, 7 Sep 2013 00:02:48 +0000"  >&lt;blockquote&gt;
&lt;p&gt;These seem like two different external representations of the same thing. A time plus a timezone can be losslessly converted to a UTC time. You do lose the original timezone, but dates and times are usually displayed in the timezone of the displayer, not where the time was originally noted.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I completely agree for use cases where the time is being displayed to a user, but there are use cases where the loss of the original time zone is not acceptable.   One could log another field with the timezone identifier for these.    The use case for a UTC timestamp is more broadly applicable.  I do not think we need to implement the one that also persists timezone now, but I do think we need to make sure that if we did implement such a thing in the future, that the names for these two things would be consistent.  If we name this &quot;Datetime&quot; we are implying it has relation to dates, which implies relationship to timezones. &lt;/p&gt;

&lt;p&gt;With respect to the SQL variants, I see only two that represent a single point in time. Three are either dates or times and not the combination (e.g. &quot;January 7, 2100&quot;, representing a time with granularity of one day, or &quot;5:01&quot; &amp;#8211; a time of day, respectively).&lt;/p&gt;

&lt;p&gt;The two SQL equivalents are TIMESTAMP and TIMESTAMP WITH TIMEZONE.   This proposal covers TIMESTAMP, roughly.  I am suggesting we reserve space for a future TIMESTAMP WITH TIMEZONE.   We could adopt the names for consistency.&lt;/p&gt;

&lt;p&gt;&quot;timestamp&quot;&lt;br/&gt;
and&lt;br/&gt;
&quot;timestamptz&quot;&lt;/p&gt;

&lt;p&gt;There is also the question of serialization in JSON form.  A long in binary form makes sense, but in JSON, an ISO8601 string might be more useful.&lt;/p&gt;</comment>
                            <comment id="13763187" author="cutting" created="Tue, 10 Sep 2013 16:39:27 +0000"  >&lt;p&gt;&amp;gt; One could log another field with the timezone identifier for these.&lt;/p&gt;

&lt;p&gt;From my understanding of SQL, for TIMETZ and TIMESTAMPTZ columns, a separate timezone is not stored per row.  Rather, the TZ in the schema only affects how dates are parsed and displayed.  Am I wrong?  If I am correct, then the timezone should not be a field but a schema attribute that&apos;s used by implementations when parsing and displaying values.  In all cases I believe we should only store a single UTC timestamp per value.  Adding a distinct primitive type for each parsing/display variant seems like a poor design choice.&lt;/p&gt;

&lt;p&gt;&amp;gt; A long in binary form makes sense, but in JSON, an ISO8601 string might be more useful.&lt;/p&gt;

&lt;p&gt;Special-casing this would rule out back-compatibility, no?&lt;/p&gt;</comment>
                            <comment id="13933465" author="cutting" created="Thu, 13 Mar 2014 16:11:10 +0000"  >&lt;p&gt;Here&apos;s another approach.  Instead of defining some new record types (which would bloat schemas), or some new primitives (which would be incompatible), might we instead standardize on some attributes?&lt;/p&gt;

&lt;p&gt;Thus we might use something like:&lt;/p&gt;
  {&quot;type&quot;:&quot;string&quot;, &quot;subType&quot;:&quot;ISO-8601-date&quot;}

&lt;p&gt;This could be added to the specification, as an optional extension.  If it&apos;s specified, then the string must be in ISO 8601 format.&lt;/p&gt;

&lt;p&gt;We could also have a type like:&lt;/p&gt;
  {&quot;type&quot;:&quot;long&quot;, &quot;subType&quot;:&quot;unix-epoch&quot;}

&lt;p&gt;Note that with both of these formats, sorting by the primitive Avro type is consistent with sorting by time.&lt;/p&gt;

&lt;p&gt;Implementations can insert language-specific types for these at runtime.&lt;/p&gt;

&lt;p&gt;This approach might also be used to handle decimal values, using a lexicographic-friendly string format.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zanopha.com/docs/elen.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.zanopha.com/docs/elen.pdf&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13941828" author="tomwhite" created="Thu, 20 Mar 2014 15:21:02 +0000"  >&lt;p&gt;Using subtypes for optional extensions sounds like a good approach to me. We might promote them to primitive types in a future major version of Avro.&lt;/p&gt;

&lt;p&gt;I&apos;ve posted a patch with a trial implementation of a decimal type in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1402&quot; title=&quot;Support for DECIMAL type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1402&quot;&gt;&lt;del&gt;AVRO-1402&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14079790" author="dk-apache" created="Wed, 30 Jul 2014 19:09:40 +0000"  >&lt;p&gt;Hi guys, &lt;/p&gt;

&lt;p&gt;I am currently using an attribute-based approach which builds upon this discussion plus the one about decimal type -  and extends it to support various types of date/time information - roughly following the JodaTime/NodaTime classification.&lt;/p&gt;

&lt;p&gt;I distinguish a few logicalTypes (this defines what it represents e.g. just a date, an instant in time, a time in specific zone etc), each of which can have one or more logicalEncoding (this defines which primitive type is holding the info, and how it is encoded).&lt;/p&gt;

&lt;p&gt;For example (using IDL syntax, sorry I&apos;m not good at emitting JSON):&lt;/p&gt;

&lt;p&gt;1) DateTimeInstant - represents exact moment in time - millis, UTC or specific offset are all equivalent representations&lt;/p&gt;

&lt;p&gt;  @logicalType(&quot;DateTimeInstant&quot;) @logicalEncoding(&quot;millis-unix-epoch&quot;) long timestamp; //just a usual long with number of millis since unix epoch&lt;/p&gt;

&lt;p&gt;  @logicalType(&quot;DateTimeInstant&quot;) @logicalEncoding(&quot;ISO8601-datetime-offset&quot;) string asOfDateTime; //must be ISO full date and time including offset or UTC symbol i.e. YYYY-MM-DDThh:mm:ss.xxx+-hh:mm or YYYY-MM-DDThh:mm:ss.xxxZ &lt;/p&gt;


&lt;p&gt;2) LocalDate - represents a calendar date, time is not important/not defined, so day start differences due to timezones are not directly applicable&lt;/p&gt;

&lt;p&gt;  @logicalType(&quot;LocalDate&quot;) @logicalEncoding(&quot;ISO8601-date&quot;) string settlementDate; //must be ISO local date without any time, offset or UTC symbol, i.e. YYYY-MM-DD&lt;/p&gt;


&lt;p&gt;3) ZonedDateTime - represents not just a moment in time, but preserves the information about which time zone it was defined originally - which may be important&lt;/p&gt;


&lt;p&gt;  @logicalType(&quot;ZonedDateTime&quot;) @logicalEncoding(&quot;ISO8601-datetime-timezone&quot;) string optionExpiration; //must be ISO local date and time without any offset or UTC symbol, followed by a space and either &quot;UTC&quot; or an IANA tzdb id such as &quot;Europe/London&quot;, &quot;Europe/Moscow&quot;, i.e. YYYY-MM-DDThh:mm:ss.xxx zzzzz/zzzzz&lt;/p&gt;


&lt;p&gt;All of the above logicalEncodings are sufficiently well-defined to be interpreted easily and unambiguously on any platform, for example I use the following:&lt;/p&gt;


&lt;p&gt;ISO8601-datetime-offset:&lt;br/&gt;
 in JodaTime: ISODateTimeFormat.dateTimeParser().parseDateTime(), ISODateTimeFormat.dateTime().print()&lt;br/&gt;
 in NodaTime: InstantPattern.ExtendedIsoPattern.Parse((string)inputValue).GetValueOrThrow(), InstantPattern.ExtendedIsoPattern.Format(instant)&lt;/p&gt;

&lt;p&gt;ISO8601-date: &lt;br/&gt;
 in JodaTime: ISODateTimeFormat.localDateParser().parseDateTime(), ISODateTimeFormat.date().print()&lt;br/&gt;
 in NodaTime: LocalDatePattern.IsoPattern.Parse((string)inputValue).GetValueOrThrow(), LocalDatePattern.IsoPattern.Format(localDate)&lt;/p&gt;

&lt;p&gt;ISO8601-datetime-timezone:&lt;br/&gt;
 in JodaTime: sb.append(zdt.toLocalDateTime().toString()).append(&quot; &quot;).append(zdt.getZone().getID()), &lt;/p&gt;

&lt;p&gt;		String[] parts = cs.toString().split(&quot; &quot;);&lt;/p&gt;

&lt;p&gt;		LocalDateTime localDt =  ISODateTimeFormat.dateTimeParser().parseDateTime(parts&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.trim()).toLocalDateTime();&lt;/p&gt;

&lt;p&gt;		DateTimeZone tz = DateTimeZone.forID(parts&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.trim());&lt;br/&gt;
  in NodaTime: ZonedDateTimePattern.ExtendedFormatOnlyIsoPattern.Format(zonedDateTime),&lt;br/&gt;
		var parts = (inputValue as string).Split(&apos; &apos;);&lt;/p&gt;

&lt;p&gt;                var localDateTime = LocalDateTimePattern.ExtendedIsoPattern.Parse(parts&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.Trim()).GetValueOrThrow();&lt;br/&gt;
                DateTimeZone tz = NodaTime.DateTimeZoneProviders.Tzdb[parts&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.Trim()];&lt;/p&gt;

&lt;p&gt;                return localDateTime.InZoneStrictly(tz);&lt;/p&gt;

&lt;p&gt;This is backwards compatible as older code can ignore the attributes and assume the encoding, while newer code can make use of this metainformation - for example it can be used to detect the end type in generic code, or during codegen to generate properly typed properties.&lt;/p&gt;

&lt;p&gt;If you like the general idea, then I would suggest to just document these (happy to rename/amend/extend them) to provide a common basis, without any code for the moment - in the spirit of the decimal type.&lt;/p&gt;

&lt;p&gt;Any thoughts welcome.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Dmitry&lt;/p&gt;</comment>
                            <comment id="14080122" author="cutting" created="Wed, 30 Jul 2014 22:53:01 +0000"  >&lt;p&gt;These sound reasonable to me.&lt;/p&gt;</comment>
                            <comment id="14080695" author="dk-apache" created="Thu, 31 Jul 2014 10:01:33 +0000"  >&lt;p&gt;Cool, I&apos;ll wait for a while in case there will be more comments/suggestions,  and then prepare a documentation patch for your review&lt;/p&gt;</comment>
                            <comment id="14081463" author="tomwhite" created="Thu, 31 Jul 2014 21:00:49 +0000"  >&lt;p&gt;Thanks Dmitry. The Parquet project recently added date and time types (&lt;a href=&quot;https://issues.apache.org/jira/browse/PARQUET-12&quot; title=&quot;Add support for additional converted types&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PARQUET-12&quot;&gt;&lt;del&gt;PARQUET-12&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/apache/incubator-parquet-format/pull/3/files&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/incubator-parquet-format/pull/3/files&lt;/a&gt;) and I think it would be very useful to align the two where possible, since this would make Hive integration easier (for example).&lt;/p&gt;

&lt;p&gt;For DateTimeInstant I would propose the two types (one string, one int):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{ &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;logicalType&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;ISO-8601-datetime-offset&quot;&lt;/span&gt; }
{ &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;logicalType&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;timestamp-millis&quot;&lt;/span&gt; }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For LocalDate we could have two logical types, one for Avro string (ISO-8610 encoding), and one for int (days since Unix epoch):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{ &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;logicalType&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;ISO-8601-date&quot;&lt;/span&gt; }
{ &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;logicalType&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;date&quot;&lt;/span&gt; }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We might also consider time and interval logical types.&lt;/p&gt;</comment>
                            <comment id="14082098" author="dk-apache" created="Fri, 1 Aug 2014 09:16:05 +0000"  >&lt;p&gt;Hi Tom,&lt;/p&gt;

&lt;p&gt;So basically you suggest to &quot;mix&quot; type and encoding, and have a logicalType for each combination, correct? From pure design perspective, I still think my approach is better because it clearly separates the &quot;what it is&quot; from the &quot;how it is represented&quot;, and allows for more powerful mapping logic in e.g. codegen scenario. &lt;/p&gt;

&lt;p&gt;Other than that, I agree that in general the single-attribute approach is more or less equivalent, so if it gets more &quot;votes&quot; here than my original proposition, then I am happy to adopt it. Even then, I would definitely changes some of the type names you have suggested.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; { &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;logicalType&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;date&quot;&lt;/span&gt; } &lt;span class=&quot;code-comment&quot;&gt;// a bit vague - what exactly is a date here? &lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; - this one is vague as it doesn&apos;t tell you much about how the date is represented in the int - presicely the thing we want to address with the attributes. I would go for smth like &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; { &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;logicalType&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;days-unix-epoch&quot;&lt;/span&gt; } &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Likewise, &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; { &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;logicalType&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;timestamp-millis&quot;&lt;/span&gt; } &lt;span class=&quot;code-comment&quot;&gt;//what is the epoch from which the millis are counted? &lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; doesn&apos;t tell you what is the epoch you count from, I know in opensource context one can assume it is unix epoch, but we also have some databases which use 1 January 1900, Excel/OLE automation uses 30 December 1899 etc - so more generally I think it would improve clarity a lot if it was  &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; { &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;logicalType&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;millis-unix-epoch&quot;&lt;/span&gt; } &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; as I suggested, or smth similar.&lt;/p&gt;

&lt;p&gt;How problematic would it be to rename stuff in your project? Or could you support both sets of names - one for backward compatibility, one to conform to whatever will be agreed as Avro standard?&lt;/p&gt;

&lt;p&gt;Doug, what is your opinion, both on single attribute vs two attributes and on the naming stuff?&lt;/p&gt;</comment>
                            <comment id="14082657" author="cutting" created="Fri, 1 Aug 2014 18:13:09 +0000"  >&lt;p&gt;I don&apos;t have a strong opinion on the single versus dual attribute approach.  Are there features we want to support that will be substantially helped or hindered by one or the other?  From a simplicity point of view, a single attribute is attractive.&lt;/p&gt;

&lt;p&gt;Whether we opt for simple names (&quot;date&quot;, &quot;time&quot;) or those that also include the encoding (&quot;unix-epoch-millis&quot;) depends on what we wish to distinguish them from.  If we think we&apos;ll primarily support only a single timestamp representation then a simple name like &quot;timestamp&quot; suffices.  If we think we may need to support multiple kinds of epochs, then putting the epoch type in the name is probably wise.  My guess is that we should standardize on a single epoch and set of types compatible with SQL and Parquet, and use the simplest names that achieve that.&lt;/p&gt;</comment>
                            <comment id="14083121" author="tomwhite" created="Fri, 1 Aug 2014 22:48:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;My guess is that we should standardize on a single epoch and set of types compatible with SQL and Parquet, and use the simplest names that achieve that.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="14083646" author="rdblue" created="Sat, 2 Aug 2014 18:01:46 +0000"  >&lt;p&gt;I agree we should standardize on a single epoch. I&apos;ve been working lately on high-level types across a variety of storage formats and I think we need to keep the specifications as small as possible to ensure people can actually implement them. A spec doesn&apos;t help much if it ends up being partially implemented and we have to worry about what parts of it different components implemented.&lt;/p&gt;

&lt;p&gt;I&apos;m also in favor of simple names &amp;#8211; &quot;date&quot;, &quot;time&quot; and so on. These names imply that they are the canonical way to store the type, which is exactly what we want for interoperability.&lt;/p&gt;

&lt;p&gt;For specifics on what each type means, here is what we added to parquet:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;b&gt;date&lt;/b&gt; - an int, the number of days from the unix epoch, 1 January 1970 (no time component)&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;time-millis&lt;/b&gt; - an int, the number of milliseconds after midnight, 00:00:00.000 (no date component)&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;timestamp-millis&lt;/b&gt; - a long, the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC (combined date and time)&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;interval&lt;/b&gt; - 12-byte fixed, a 3-tuple of independent durations in months, days, milliseconds&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There are more specifics on the &lt;a href=&quot;https://github.com/apache/incubator-parquet-format/pull/5&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;spec PR&lt;/a&gt;. I would really like to see the Avro and Parquet communities adopt the same logical type encodings. That would be much easier for applications to implement, which means fewer bugs and better compatibility.&lt;/p&gt;</comment>
                            <comment id="14084061" author="dk-apache" created="Sun, 3 Aug 2014 18:13:30 +0000"  >&lt;p&gt;Epochs and short names - I wasn&apos;t suggesting to support different ones, I just mentioned this to illustrate why I thought longer, more descriptive names were better. I still think they are, but I having read about Parquet etc I understand where you are coming from.&lt;/p&gt;

&lt;p&gt;I believe the different views come from the usage context - if you view Avro as storage format for Hadoop only then I would agree that it makes sense to choose a single, most compact representation as standard and this would improve interop in the sense that every part of that ecosystem will only have to support this single format.&lt;/p&gt;

&lt;p&gt;However I am using Avro as an IPC protocol in an application which exchanges complex data between services (saves me a lot of manual work as it supports maps and unions and codegen on all platforms). From this perspective, I believe that having standard type names for ISO8601-based representations of the above, in addition to binary ones, would actually improve interop. This is because people will want to use ISO-8601 in their protocols anyway (it is human readable in JSON dumps, familiar to people with XML background etc). So I think it is better to provide standard type names for these, rather than forcing to either use binary representation or custom names.&lt;/p&gt;

&lt;p&gt;So what would you say to the following: adopt Parquet names/specs for binary representations, and add ISO-8601 string ones on top? &lt;/p&gt;

&lt;p&gt;If you agree that this makes sense from both storage and IPC perspective then I could draft it and post here as a documentation patch. &lt;br/&gt;
If you see ISO alternative representations as redundant or even evil then I guess it means I cannot contribute anything else to this topic and will leave it to you guys to sort out.&lt;/p&gt;</comment>
                            <comment id="14085043" author="tomwhite" created="Mon, 4 Aug 2014 18:27:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;So what would you say to the following: adopt Parquet names/specs for binary representations, and add ISO-8601 string ones on top?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That sounds reasonable to me.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If you agree that this makes sense from both storage and IPC perspective then I could draft it and post here as a documentation patch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Please do.&lt;/p&gt;</comment>
                            <comment id="14085054" author="rdblue" created="Mon, 4 Aug 2014 18:34:13 +0000"  >&lt;p&gt;Yes, that sounds like a good solution to me. For the spec part, we can use the same logical types for both the string / ISO representations and the numeric encoding. We would just state in the spec that the string encoding is ISO-8601 and the int encoding is days from unix epoch and that no other underlying types are allowed. That way we don&apos;t have more logical types, just different ways of representing them. That&apos;s what we ended up doing for decimal, which has an unscaled component that can be stored in an int, a long, binary, or fixed.&lt;/p&gt;</comment>
                            <comment id="14089534" author="dk-apache" created="Thu, 7 Aug 2014 18:03:30 +0000"  >&lt;p&gt;Attaching a first draft - please review. My comments/issues:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;in its current form, the spec only provides for a precision of up to a millisecond - this may save space and be a most universally used precision, but modern platforms and ISO standard provide for better precision&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;we could support high-precision time as a separate type on the grounds that it is less frequently used, or we could introduce an optional &quot;precision&quot; annotation which will say define a number of decimal places in second fractions&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;also, whether we only support the millis or also a higher precision, in either case your reasoning about simple names implying &quot;canonical&quot; use would arguably suggest smth like &quot;timestamp&quot; instead of &quot;timestamp-millis&quot; and &quot;time&quot; instead of &quot;time-millis&quot;? Was there a specific reason for adding &quot;millis&quot; in Parquet and is it important from interop point of view if Avro adopts a different name (as long as the actual definition is the same)?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I didn&apos;t provide a binary representation for Timestamp-timezone as I&apos;m not entirely sure how it would look like and whether it will be popular at all, compared to the string representation&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;finally, re Parquet Interval type - I used to think (and ISO, Noda time etc seem to agree) that an &quot;interval&quot; means an interval on a global timeline, i.e. something with start and end at a specific instant in time, whereas what the current wording defines is actually better called a Duration. So the question is again - whether there was a specific reason to call it Interval in Parquet and if naming it Duration in Avro impacts Hadoop interop?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14089565" author="rdblue" created="Thu, 7 Aug 2014 18:24:13 +0000"  >&lt;p&gt;Dmitry, thanks for doing this. It looks really good to me with just a couple of minor things:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If the timezone Z is required for timestamp-millis and the milliseconds are optional, then the naive sort order no longer works. My vote is to require milliseconds in the string representations for both time-millis and timestamp-millis to solve the problem.
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&amp;gt;&amp;gt; &lt;span class=&quot;code-quote&quot;&gt;&apos;10.123Z&apos;&lt;/span&gt; &amp;lt; &lt;span class=&quot;code-quote&quot;&gt;&apos;10Z&apos;&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;The interval type needs to specify the endianness of its components. Parquet uses little-endian, so I&apos;d say we should specify that here also.&lt;/li&gt;
	&lt;li&gt;I&apos;d rather not include representations that have a time zone because the logic is always tricky and changes. I think best practice is to convert to UTC and I&apos;d like for people to do that rather than using an expensive representation to get around best practice.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14089855" author="skye" created="Thu, 7 Aug 2014 21:07:32 +0000"  >&lt;p&gt;I realize I&apos;m chiming in a little late, but I would strongly prefer a single binary encoding for each type (rather than both a human-readable and binary encoding). The extra string encodings seem like an unreasonably high price to pay in development and test effort for human-readable output (I count 4 extra type/logicalType pairs that need to be implemented by every library/application implementing the spec). I think we&apos;ll end up with very few libraries/applications implementing all of the types and encodings, which is bad for interop whether you&apos;re using Avro for storage or IPC. And once it&apos;s in the spec, we won&apos;t be able to scale back to a smaller, easier-to-maintain option.&lt;/p&gt;

&lt;p&gt;From a more ideological perspective, I don&apos;t think it&apos;s always a good idea to offer more choices. Instead of having users choose between performance and human-readability (and realistically between which applications will be able to read their data), maybe it would make more sense to only use the binary encoding and provide a tool for dumping the data in a human-readable format.&lt;/p&gt;

&lt;p&gt;(As to why I would prefer only the binary encoding and not only the string encoding: not only is the binary encoding more performant, I think we&apos;ll see fewer bugs/incompatibilities around what constitutes a valid date/time string). &lt;/p&gt;</comment>
                            <comment id="14089964" author="rdblue" created="Thu, 7 Aug 2014 22:30:40 +0000"  >&lt;p&gt;I think Skye makes some good points. Dmitry, is this something that we could realistically accomplish with better support for logical types in the data models? If, for example, we added the conversion to a Calendar or a Date to deserialization rather than returning integers or longs, would that meet your use case? That would certainly make it an easier-to-implement spec and avoid performance problems.&lt;/p&gt;</comment>
                            <comment id="14090571" author="dk-apache" created="Fri, 8 Aug 2014 10:07:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;My vote is to require milliseconds in the string representations for both time-millis and timestamp-millis to solve the problem. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sure&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The interval type needs to specify the endianness of its components. Parquet uses little-endian, so I&apos;d say we should specify that here also.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Could you suggest the wording? Bearing in mind that Avro specifies binary and JSON encodings for each type&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;d rather not include representations that have a time zone because the logic is always tricky and changes. I think best practice is to convert to UTC and I&apos;d like for people to do that rather than using an expensive representation to get around best practice.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I assume you are referring to datetime-timezone type? This is not another representation of timestamp-millis (where it already allows UTC only) - this is smth different. Consider for example a financial product whose definition says that it &quot;ceases to trade on YYYY-MM-DD hh:mm Moscow time&quot;. It you convert it to UTC and store in a timestamp-millis, and on the next day the Russian authorities change the offset or daylight saving rules (which they did a few times in last decade) - you will end up with wrong expiration time (and potentially date). I think some zones like Israel adjust the rules every year. If you store timezone id with the &quot;local&quot; date-time in that zone - you can use the open database maintained by IANA to adjust.  So the point of this type is exactly that it is required when you cannot just convert to UTC and have to embrace the trickiness and mutability of timezones. Both components (date-time and timezone id) are pretty standard.&lt;/p&gt;
</comment>
                            <comment id="14090592" author="dk-apache" created="Fri, 8 Aug 2014 10:22:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;The extra string encodings seem like an unreasonably high price to pay in development and test effort for human-readable output (I count 4 extra type/logicalType pairs that need to be implemented by every library/application implementing the spec). I think we&apos;ll end up with very few libraries/applications implementing all of the types and encodings, which is bad for interop whether you&apos;re using Avro for storage or IPC.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Well from IPC perspective the typical price to pay is 2-3 lines of code to convert to and from the chosen internal representation (see e.g. my initial comment on this topic), so I wouldn&apos;t fear that nobody will want to implement this, and having a service which accepts both does make the clients&apos; life easier, especially scripted clients etc. However, I have already agreed before that in other scenarios it may be best to insist on just one representation. &lt;/p&gt;

&lt;p&gt;I think the way forward is to invite everyone who cares to &quot;vote&quot; for or against including string representations in the spec. Then if there are more votes &quot;against&quot;  - please feel free to take my patch, remove the string bits and resubmit.&lt;/p&gt;

&lt;p&gt;My only concern would be the datetime-timezone type which had only string representation, but I have a feeling that there won&apos;t be much interest in including it either way, because it is relatively rare compared to timestamps etc.&lt;/p&gt;</comment>
                            <comment id="14090614" author="dk-apache" created="Fri, 8 Aug 2014 10:45:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;is this something that we could realistically accomplish with better support for logical types in the data models? If, for example, we added the conversion to a Calendar or a Date to deserialization rather than returning integers or longs, would that meet your use case?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The problem here is that it is going to be difficult to agree on what this support should constitute on each platform. For example, I don&apos;t care about either Date or Calendar (or .NET DateTime for that matter) - none of these can inambiguously represent all the different kinds of date/time data that I need to communicate. JodaTime/ NodaTime provide all the types I need, but people would probably not be happy to add these libraries as firm dependencies in Avro codebase. Newer versions of Java and .NET are going to try and address this problem by embracing core concepts from those libraries, but currently on these platforms there are just no standard types which we could safely translate to.  So at the moment the best that could be done is to provide on each platform a framework for plugging in logical type &quot;implementations&quot;, including the codegen for specific, and a means for the users to specify which one to use. Then on top of this core framework there could be &quot;contributed&quot; implementations for most popular types.&lt;/p&gt;
</comment>
                            <comment id="14093329" author="rdblue" created="Mon, 11 Aug 2014 21:32:56 +0000"  >&lt;p&gt;On the endianness of numbers in the &quot;interval&quot; type:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This array stores three little-endian unsigned integers that represent durations at different granularities of time. The first stores a number in months, the second stores a number in days, and the third stores a number in milliseconds. . . .&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think we need to specify a JSON representation because this should use whatever the JSON representation of a fixed(12) is. The logical type just states how those bytes should be interpreted.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Consider for example a financial product whose definition says that it &quot;ceases to trade on YYYY-MM-DD hh:mm Moscow time&quot;. . .&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the right way to handle this is to use the zone-independent date/time types and an application-level zone implementation. These cases aren&apos;t very common, as you noted, and I think having a timestamp with zone logical type allows people to get around best practices and doesn&apos;t deliver a better solution for people that actually need to represent the zone. It may be slightly easier to represent the type in a single field, but size is significantly larger and the value only has significance when interpreted at the application layer anyway.&lt;/p&gt;</comment>
                            <comment id="14093371" author="rdblue" created="Mon, 11 Aug 2014 21:50:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;The problem here is that it is going to be difficult to agree on what this support should constitute on each platform&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree with you here, which is one reason why I like the logical types. It&apos;s valuable to have standard representations that aren&apos;t necessarily tied to the object model. But what I&apos;m trying to get at is whether your IPC use case for the string representations could be solved another way. I know it&apos;s easier to debug with ISO-8601 strings rather than ints, but it seems like this probably doesn&apos;t apply to bytes on the wire because those the format is (usually) binary for everything else.&lt;/p&gt;

&lt;p&gt;Maybe I&apos;m wrong about this, but it seems like using strings would probably be most helpful in debugging the application. And if that&apos;s the case, we can provide a few simple tools for working with these types rather than changing the representation to avoid the conversion. What about adding a set of helpers that works like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; date = Iso8601.dateAsString( record.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;date&quot;&lt;/span&gt;) );
&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; time = Iso8601.timeAsString( record.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;time&quot;&lt;/span&gt;) );
&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; timestamp = Iso8601.timestampAsString( record.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;) );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Would that help you debug these applications without needing a different representation? Or do you need the wire protocol to include the date/time string for debugging? If so, why is it necessary to treat date/time differently than other types that are binary-encoded?&lt;/p&gt;</comment>
                            <comment id="14094121" author="dk-apache" created="Tue, 12 Aug 2014 14:53:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;But what I&apos;m trying to get at is whether your IPC use case for the string representations could be solved another way.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In short - of course it could, just in a more laborious way.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe I&apos;m wrong about this, but it seems like using strings would probably be most helpful in debugging the application. And if that&apos;s the case, we can provide a few simple tools for working with these types rather than changing the representation to avoid the conversion. What about adding a set of helpers...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Having these in Avro distribution would certainly encourage more people to go with binary representations if they are going to be the only standard, although this level of support is of course not the same - e.g. when you use toString() to dump the object as JSON or introspect an object in a debugger you will still see just a byte sequence. Other binary-encoded types are mostly first-class primitives which get translated to strings by standard tools so this is not an issue.&lt;/p&gt;

&lt;p&gt;However I used the debugging as just one illustration of why I thought it would be worth having standardised string representations where compactness and performance are not absolutely critical. &lt;br/&gt;
Another reason we have also touched above is that there is a real lack of common &lt;em&gt;binary&lt;/em&gt; representations (and platform support) of anything beyond simple timestamps and dates, and this is what made people misuse e.g. Date to confuse utc/local/zoned time, fixed duration vs duration in months/days etc. &lt;br/&gt;
Even in this spec we don&apos;t have a separate type/binary representation of &quot;local&quot; date+time - only separate types for each component - so undoubtedly some people will decide to use timestamp-millis, despite the spec saying that it represents UTC date-time explicitly. And the representation specified for Duration may be most efficient but is not something that can be called commonly used or easy to interpret. If you remember the issue of higher-precision time we have omitted in the spec - is it going to have a separate binary representation as well? &lt;br/&gt;
ISO-8601 provides a basis to represent all of these &quot;naturally&quot;, in a way instantly understandable by human, and makes it easy to standardise different types of date-time information and promote their correct usage, and also provide a &quot;bridge&quot; to binary representations.&lt;/p&gt;

&lt;p&gt;Having said that, I absolutely don&apos;t insist on including these into spec - just attempted to explain the reasons I am using them currently and have initially suggested them.&lt;/p&gt;</comment>
                            <comment id="14094128" author="dk-apache" created="Tue, 12 Aug 2014 14:57:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think the right way to handle this is to use the zone-independent date/time types and an application-level zone implementation. These cases aren&apos;t very common, as you noted, and I think having a timestamp with zone logical type allows people to get around best practices and doesn&apos;t deliver a better solution for people that actually need to represent the zone. It may be slightly easier to represent the type in a single field, but size is significantly larger and the value only has significance when interpreted at the application layer anyway.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In environments providing &quot;rich&quot; support for date-time related types (such as Joda Time / Noda time), this actually translates directly into the likes of ZonedDateTime, and can be handled on Avro level, e.g. using Specific the generated objects can expose ZonedDateTime properties instead of strings. This is what I do so it does deliver a better solution for me.&lt;/p&gt;

&lt;p&gt;Happy to drop it from the spec anyway.&lt;/p&gt;</comment>
                            <comment id="14094138" author="dk-apache" created="Tue, 12 Aug 2014 15:07:02 +0000"  >&lt;p&gt;Attaching a revised patch which fixes timestamp sorting and duration endianness issues.&lt;/p&gt;

&lt;p&gt;With regard to keeping string representations/zoned types - if I&apos;m not missing anyone, so far we have basically 1 vote for keeping them and 2 votes against. &lt;br/&gt;
If nobody else votes, all that needs to be done is to remove the bits about string representations from this patch.&lt;/p&gt;

&lt;p&gt;Comments about adding &quot;local&quot; date-time and &quot;High-precision&quot; time in addition to timestamp-millis are welcome.&lt;/p&gt;</comment>
                            <comment id="14094341" author="rdblue" created="Tue, 12 Aug 2014 17:24:08 +0000"  >&lt;p&gt;Good point about not being able to use conversion methods in situations like debugging. But, I think I&apos;d rather not have those limitations dictate the possible representations when we&apos;ll end up with more to support and wasteful formats. You also mention using specific objects with ZonedDateTime fields &amp;#8211; that addresses this problem by deserializing to a form that has a meaningful toString representation, right? Maybe we should encourage that approach.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Having said that, I absolutely don&apos;t insist on including these into spec - just attempted to explain the reasons I am using them currently and have initially suggested them.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Same here, I don&apos;t want to insist on anything. I just want to find a good solution.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Comments about adding &quot;local&quot; date-time and &quot;High-precision&quot; time in addition to timestamp-millis are welcome.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For high-precision, what granularity do you think needs to be supported? Nanos? Micros? We didn&apos;t have a clear answer on the Parquet side, which is why we pushed high-precision from the original spec &amp;#8211; better to get some of the types in and expand later. Maybe we should open a follow-up issue to discuss these?&lt;/p&gt;</comment>
                            <comment id="14104706" author="rdblue" created="Wed, 20 Aug 2014 22:25:04 +0000"  >&lt;p&gt;I&apos;ve edited the spec additions from Dmitry, removing the string representations. The new patch is &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-739&quot; title=&quot;Add Date/Time data types&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-739&quot;&gt;&lt;del&gt;AVRO-739&lt;/del&gt;&lt;/a&gt;-update-spec.diff.&lt;/p&gt;</comment>
                            <comment id="14105749" author="cutting" created="Thu, 21 Aug 2014 18:41:39 +0000"  >&lt;p&gt;Using little endian in durations will cause them to sort poorly, since Avro defines sorting as byte-wise for fixed.&lt;/p&gt;</comment>
                            <comment id="14105788" author="russell.jurney" created="Thu, 21 Aug 2014 18:55:25 +0000"  >&lt;p&gt;Ints were used in Pig&apos;s datetime and it resulted in a bad situation where you can&apos;t read a timestamp from the raw data. ISO8601 strings are much better - any program and any person can read them.&lt;/p&gt;</comment>
                            <comment id="14105869" author="rdblue" created="Thu, 21 Aug 2014 20:05:52 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, is there a specific use case you have in mind that will perform poorly when durations are encoded in little-endian and sorted byte-wise?&lt;/p&gt;

&lt;p&gt;I think it should be okay to use little-endian because there isn&apos;t a well-defined sort order for durations. Each value is independent and there&apos;s no requirement for conversion. (1, 0, 0) and (0, 30, 0) are incomparable because sometimes 1 month is longer than 30 days and sometimes shorter, depending on the start time the interval is applied to. Big-endian would produce results that are generally grouped by similarity and size, but I think it&apos;s more important to match the format used elsewhere (if its reasonable) and Parquet uses little-endian.&lt;/p&gt;</comment>
                            <comment id="14105938" author="cutting" created="Thu, 21 Aug 2014 20:48:32 +0000"  >&lt;p&gt;I&apos;d expect many applications of durations to have similar forms, e.g.. all with zero month and millisecond, just days.  In such applications sometimes sorting might be useful.  With big-endian it could be.  With little-endian it couldn&apos;t be.&lt;/p&gt;

&lt;p&gt;Was there a particular reason that Parquet chose little-endian for this?  Is it too late to change Parquet?  Has this been released?&lt;/p&gt;

&lt;p&gt;I don&apos;t view this as a fatal misfeature, but it is a misfeature, one we may be stuck with, or one we may still be able to avoid.&lt;/p&gt;</comment>
                            <comment id="14106070" author="rdblue" created="Thu, 21 Aug 2014 22:29:01 +0000"  >&lt;p&gt;I looked into the Parquet side and it looks like the decision to use little-endian is based on not having to reorder the bytes to work with the integers. Big-endian would be better for encoding, but only a little because there are 3 numbers being stored and prefix encoding will stop working unless the values are identical. This hasn&apos;t been released yet, so there&apos;s still a chance to get it changed.&lt;/p&gt;</comment>
                            <comment id="14115692" author="rdblue" created="Fri, 29 Aug 2014 19:21:00 +0000"  >&lt;p&gt;I asked around in the Parquet community if it was still possible to change the interval spec from little endian to big endian. Unfortunately, some downstream projects are already using the interval encoding with little endian, so there&apos;s a strong reason not to change the spec even though it isn&apos;t released. I&apos;d still like for the Avro and Parquet specs to match, so I&apos;d like to keep the Avro spec as it is in the proposed diff, using little endian. Does this sound reasonable?&lt;/p&gt;</comment>
                            <comment id="14115777" author="cutting" created="Fri, 29 Aug 2014 20:39:32 +0000"  >&lt;p&gt;So the tradeoff is between having to byte-swap when moving between Avro &amp;amp; Parquet, versus never being able to make reasonable use of ordering in Avro.  Meh.  No clear winner.&lt;/p&gt;</comment>
                            <comment id="14117584" author="matthjw" created="Mon, 1 Sep 2014 17:37:28 +0000"  >&lt;p&gt;Hi all&lt;/p&gt;

&lt;p&gt;Definitely concur that there should at least be a standard option for serializing timestamps in a compact form (e.g. epoch millis). The reason I&apos;m using avro is because it&apos;s an efficient binary format which can cut down on the IO bottleneck of running big analysis jobs.&lt;/p&gt;

&lt;p&gt;Having some standard for storing local timezone offset information alongside a timestamp would be useful for &quot;local-time-of-day&quot;-based analyses, e.g. of web traffic.&lt;/p&gt;

&lt;p&gt;Since the majority of analyses will not be local-time-of-day based though, I&apos;d prefer to store all timestamps in UTC epoch millis, and store the local timezone offset in a separate field which can be used to correct it where required for time-of-day analysis.&lt;/p&gt;

&lt;p&gt;I&apos;d suggest storing a timezone offset in minutes, since it should then fit into 2 bytes. This is the choice made in the javascript date.getTimezoneOffset() API for example, and it appears to be a safe assumption that all timezone boundaries in use are aligned to minute boundaries (in fact 15 minute boundaries as it stands). But I&apos;m not too picky if someone has another sensible suggestion.&lt;/p&gt;

&lt;p&gt;Note this would mean you lose information about a logical timezone name, e.g. BST for british summertime, or &quot;Europe/London&quot; for whatever timezone is in force in London at this point in local time. For most purposes this is a good thing I think, since the definitions of these things can shift over time, whereas a UTC offset is pretty unambiguous.&lt;/p&gt;</comment>
                            <comment id="14117607" author="matthjw" created="Mon, 1 Sep 2014 18:00:22 +0000"  >&lt;p&gt;On second thoughts, for time-of-day analyses I suppose I could just use the time-millis standard to serialize the local time of day alongside the UTC timestamp. I don&apos;t think you can always recover the timezone offset and the exact local timestamp from these two things though, since you don&apos;t know the local calendar date, and timezone offsets can range from UTC-12 to UTC+14 hours (a span of greater than 24hour) so there could be multiple possibilities for this.&lt;/p&gt;</comment>
                            <comment id="14118366" author="tomwhite" created="Tue, 2 Sep 2014 17:10:20 +0000"  >&lt;p&gt;I think we can go with the latest patch, which has binary date, time, timestamp, and duration (little-endian). Other types (timezone) or encodings (string) can be added separately.&lt;/p&gt;</comment>
                            <comment id="14135536" author="tomwhite" created="Tue, 16 Sep 2014 14:38:33 +0000"  >&lt;p&gt;+1. I&apos;d like to commit this soon.&lt;/p&gt;</comment>
                            <comment id="14137196" author="jira-bot" created="Wed, 17 Sep 2014 13:12:43 +0000"  >&lt;p&gt;Commit 1625574 from tomwhite@apache.org in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1625574&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1625574&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-739&quot; title=&quot;Add Date/Time data types&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-739&quot;&gt;&lt;del&gt;AVRO-739&lt;/del&gt;&lt;/a&gt;. Add date, time, timestamp, and duration binary types to specification. Contributed by Dmitry Kovalev and Ryan Blue.&lt;/p&gt;</comment>
                            <comment id="14137197" author="tomwhite" created="Wed, 17 Sep 2014 13:14:13 +0000"  >&lt;p&gt;I just committed this. Thanks Dmitry and Ryan!&lt;/p&gt;</comment>
                            <comment id="14137216" author="hudson" created="Wed, 17 Sep 2014 13:37:16 +0000"  >&lt;p&gt;FAILURE: Integrated in AvroJava #476 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/476/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/476/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-739&quot; title=&quot;Add Date/Time data types&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-739&quot;&gt;&lt;del&gt;AVRO-739&lt;/del&gt;&lt;/a&gt;. Add date, time, timestamp, and duration binary types to specification. Contributed by Dmitry Kovalev and Ryan Blue. (tomwhite: rev 1625574)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/doc/src/content/xdocs/spec.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15092731" author="ctaggart" created="Mon, 11 Jan 2016 21:40:43 +0000"  >&lt;p&gt;Reviewing the docs (&lt;a href=&quot;https://github.com/apache/avro/blob/branch-1.8/doc/src/content/xdocs/spec.xml#L1412-L1472&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/blob/branch-1.8/doc/src/content/xdocs/spec.xml#L1412-L1472&lt;/a&gt;), are `date`, `time-millis`, `time-micros`, `timestamp-millis`, `timesteamp-micros`, and `duration` going to be added to Avro IDL too (&lt;a href=&quot;https://avro.apache.org/docs/current/idl.html)?&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://avro.apache.org/docs/current/idl.html)?&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15092737" author="rdblue" created="Mon, 11 Jan 2016 21:44:30 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ctaggart&quot; class=&quot;user-hover&quot; rel=&quot;ctaggart&quot;&gt;Cameron Taggart&lt;/a&gt;, see &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1684&quot; title=&quot;Add date, time, and timestamp to specific object model classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1684&quot;&gt;&lt;del&gt;AVRO-1684&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/apache/avro/pull/37&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;PR #37&lt;/a&gt;. That adds date, time_millis, and timestamp_millis to specific in Java.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12741826">HIVE-8130</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12741829">HIVE-8131</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310060">
                    <name>Container</name>
                                                                <inwardlinks description="Is contained by">
                                        <issuelink>
            <issuekey id="12647717">AVRO-1330</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12649704">AVRO-1341</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12459893">PIG-1314</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12730240">AVRO-1554</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12661222" name="AVRO-739-datetime-spec.xml.patch" size="5742" author="dk-apache" created="Tue, 12 Aug 2014 15:07:02 +0000"/>
                            <attachment id="12660418" name="AVRO-739-datetime-spec.xml.patch" size="5898" author="dk-apache" created="Thu, 7 Aug 2014 17:43:48 +0000"/>
                            <attachment id="12663245" name="AVRO-739-update-spec.diff" size="3091" author="rdblue" created="Wed, 20 Aug 2014 22:25:04 +0000"/>
                            <attachment id="12601861" name="AVRO-739.patch" size="8246" author="cutting" created="Fri, 6 Sep 2013 17:50:41 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 25 Jan 2011 22:37:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>85671</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 1 week, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i08n27:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>48335</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-740] test_avro_data double frees schema</title>
                <link>https://issues.apache.org/jira/browse/AVRO-740</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;==55169== Invalid read of size 8&lt;br/&gt;
==55169== at 0x10002A061: avro_schema_decref (schema.c:193)&lt;br/&gt;
==55169== by 0x100001084: test_fixed (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== by 0x100001FF7: main (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== Address 0x1002f8860 is 16 bytes inside a block of size 40 free&apos;d&lt;br/&gt;
==55169== at 0x10001446F: free (vg_replace_malloc.c:366)&lt;br/&gt;
==55169== by 0x100000D62: test_allocator (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== by 0x100001023: test_fixed (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== by 0x100001FF7: main (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== &lt;br/&gt;
==55169== Invalid write of size 8&lt;br/&gt;
==55169== at 0x10002A073: avro_schema_decref (schema.c:193)&lt;br/&gt;
==55169== by 0x100001084: test_fixed (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== by 0x100001FF7: main (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== Address 0x1002f8860 is 16 bytes inside a block of size 40 free&apos;d&lt;br/&gt;
==55169== at 0x10001446F: free (vg_replace_malloc.c:366)&lt;br/&gt;
==55169== by 0x100000D62: test_allocator (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== by 0x100001023: test_fixed (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== by 0x100001FF7: main (in /Users/bruce/Development/avro/lang/c/build/tests/.libs/test_avro_data)&lt;br/&gt;
==55169== &lt;/p&gt;</description>
                <environment></environment>
        <key id="12496120">AVRO-740</key>
            <summary>test_avro_data double frees schema</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="brucem">Bruce Mitchener</assignee>
                                    <reporter username="brucem">Bruce Mitchener</reporter>
                        <labels>
                    </labels>
                <created>Thu, 20 Jan 2011 11:32:24 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:49 +0000</updated>
                            <resolved>Thu, 20 Jan 2011 11:36:55 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4177</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 1 week, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e26f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80115</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-741] C: examples/quickstep segfaults</title>
                <link>https://issues.apache.org/jira/browse/AVRO-741</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;On ubuntu 10.10 32-bit, &apos;cd lang/c; configure ; make check&apos; currently fails.  The failure is when running examples/quickstep:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
make[2]: Entering directory `/home/cutting/src/avro/trunk/lang/c/examples&apos;
Successfully added Hicks, Dante id=1
Successfully added Graves, Randal id=2
Successfully added Loughran, Veronica id=3
Successfully added Bree, Caitlin id=4
Successfully added Silent, Bob id=5
Successfully added ???, Jay id=6

Now let&apos;s read all the records back out
Error printing person
FAIL: quickstop
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12496189">AVRO-741</key>
            <summary>C: examples/quickstep segfaults</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.svg">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Thu, 20 Jan 2011 22:10:28 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:55 +0000</updated>
                            <resolved>Wed, 26 Jan 2011 03:45:19 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12985049" author="dcreager" created="Sat, 22 Jan 2011 04:28:44 +0000"  >&lt;p&gt;This happens on 64-bit Ubuntu, too.&lt;/p&gt;

&lt;p&gt;I&apos;ve tracked down the &quot;why&quot;, but haven&apos;t had a chance to put together a patch yet.  The problem is that before, the binary encoding class ensured that it allocated an extra byte for bytes values, and made sure they were NUL terminated.  It doesn&apos;t do that anymore.  Inside of file_read_header, the JSON schema for the file is stored in a bytes value, which we pass right in to avro_schema_from_json&#160;&#8212; which expects the JSON string to be NUL-terminated.  So if the byte right after the schema string isn&apos;t a \x00, then we get a segfault.&lt;/p&gt;</comment>
                            <comment id="12985631" author="brucem" created="Mon, 24 Jan 2011 11:37:47 +0000"  >&lt;p&gt;That&apos;s due to this change:&lt;/p&gt;


&lt;p&gt;diff --git a/lang/c/src/encoding_binary.c b/lang/c/src/encoding_binary.c&lt;br/&gt;
index 819711e..b464f96 100644&lt;br/&gt;
&amp;#8212; a/lang/c/src/encoding_binary.c&lt;br/&gt;
+++ b/lang/c/src/encoding_binary.c&lt;br/&gt;
@@ -16,6 +16,7 @@&lt;br/&gt;
  */&lt;/p&gt;

&lt;p&gt; #include &quot;avro_private.h&quot;&lt;br/&gt;
+#include &quot;allocation.h&quot;&lt;br/&gt;
 #include &quot;encoding.h&quot;&lt;br/&gt;
 #include &amp;lt;stdlib.h&amp;gt;&lt;br/&gt;
 #include &amp;lt;limits.h&amp;gt;&lt;br/&gt;
@@ -126,11 +127,10 @@ static int read_bytes(avro_reader_t reader, char **bytes, int64_t * len)&lt;br/&gt;
        if (rval) &lt;/p&gt;
{
                return rval;
        }
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;*bytes = malloc(*len + 1);&lt;br/&gt;
+       *bytes = avro_malloc(*len);&lt;br/&gt;
        if (!*bytes) 
{
                return ENOMEM;
        }&lt;/li&gt;
	&lt;li&gt;(*bytes)&lt;span class=&quot;error&quot;&gt;&amp;#91;*len&amp;#93;&lt;/span&gt; = &apos;\0&apos;;&lt;br/&gt;
        AVRO_READ(reader, *bytes, *len);&lt;br/&gt;
        return 0;&lt;br/&gt;
 }&lt;br/&gt;
@@ -169,10 +169,21 @@ size_bytes(avro_writer_t writer, const char *bytes, const int64_t len)&lt;br/&gt;
        return size_long(writer, len) + len;&lt;br/&gt;
 }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;-static int read_string(avro_reader_t reader, char **s)&lt;br/&gt;
+static int read_string(avro_reader_t reader, char **s, int64_t *len)&lt;br/&gt;
 {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;int64_t len;&lt;/li&gt;
	&lt;li&gt;return read_bytes(reader, s, &amp;amp;len);&lt;br/&gt;
+       int64_t  str_len;&lt;br/&gt;
+       int rval = read_long(reader, &amp;amp;str_len);&lt;br/&gt;
+       if (rval) 
{
+               return rval;
+       }
&lt;p&gt;+       *len = str_len + 1;&lt;br/&gt;
+       *s = avro_malloc(*len);&lt;br/&gt;
+       if (!*s) &lt;/p&gt;
{
+               return ENOMEM;
+       }
&lt;p&gt;+       (*s)&lt;span class=&quot;error&quot;&gt;&amp;#91;str_len&amp;#93;&lt;/span&gt; = &apos;\0&apos;;&lt;br/&gt;
+       AVRO_READ(reader, *s, str_len);&lt;br/&gt;
+       return 0;&lt;br/&gt;
 }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; static int skip_string(avro_reader_t reader)&lt;/p&gt;

&lt;p&gt;Why is that the right thing to do?&lt;/p&gt;

&lt;p&gt;There&apos;s nothing in the spec that says we can&apos;t zero-terminate the byte array ... there&apos;s also nothing about strings being null terminated, but we do that in C.&lt;/p&gt;

&lt;p&gt;I&apos;m inclined to just revert that part of that change so that byte arrays that are read from a file are null terminated once again.&lt;/p&gt;</comment>
                            <comment id="12985739" author="dcreager" created="Mon, 24 Jan 2011 15:40:46 +0000"  >&lt;p&gt;I wouldn&apos;t just revert the commit &#8212; that would mean that the buffer used to store the bytes value wouldn&apos;t go through the custom allocator anymore.&lt;/p&gt;

&lt;p&gt;I can create a patch that makes read_bytes allocate an extra byte for a NUL terminator, like read_string does (and like read_bytes used to), while still going through the custom allocator.  This is the solution I&apos;d prefer, I think&#160;&#8212; but to do that, we&apos;d have to nail down the contract for avro_givebytes.&lt;/p&gt;

&lt;p&gt;The issue here is that we need to keep track of the allocated size of the buffer if we want to free it using the custom allocator.  We&apos;re already keeping track of the size of the actual bytes value.  We could require that any buffer passed in to avro_givebytes be NUL terminated.  Then we&apos;d know to use (value_size + 1) as the allocated size when we free the buffer.  But that would break any existing code that passes in a non-NUL-terminated buffer to avro_givebytes.&lt;/p&gt;

&lt;p&gt;I think a better solution would be to update avro_givebytes to take in a custom free function.  Then read_bytes would provide a free function that knows that its buffer is NUL terminated.  I think that&apos;s the proper way to have a bytes datum wrap a buffer that may or may not have been allocated by the avro library itself.  It would also allow us to deprecate the avro_wrapbytes function, since it would just be a special case of the avro_givebytes function.  That would be a breaking API change though &#8212; would that be a deal-breaker?&lt;/p&gt;</comment>
                            <comment id="12985745" author="brucem" created="Mon, 24 Jan 2011 15:46:48 +0000"  >&lt;p&gt;I&apos;d meant to only revert that one part ... but I can see where that would cause further problems as well with avro_givebytes().&lt;/p&gt;

&lt;p&gt;I wouldn&apos;t mind seeing a patch that does what you say here.  I&apos;m not averse to API changes ... Personally, I think some pretty serious API breakages are needed if we want to see adequate performance in the near future.&lt;/p&gt;

&lt;p&gt;(But that&apos;s probably a 1.6.0 thing...)&lt;/p&gt;</comment>
                            <comment id="12985763" author="dcreager" created="Mon, 24 Jan 2011 16:02:41 +0000"  >&lt;p&gt;Cool, I&apos;ll try to get a patch put together today and post it for review.&lt;/p&gt;</comment>
                            <comment id="12986053" author="dcreager" created="Mon, 24 Jan 2011 22:02:25 +0000"  >&lt;p&gt;Here we go.  With this patch applied, I don&apos;t get the segfault on Ubuntu 10.10.&lt;/p&gt;</comment>
                            <comment id="12986627" author="cutting" created="Tue, 25 Jan 2011 19:25:19 +0000"  >&lt;p&gt;+1 This fixes things for me.  I&apos;ll commit this in the next day or so unless someone objects.&lt;/p&gt;</comment>
                            <comment id="12986828" author="brucem" created="Wed, 26 Jan 2011 03:21:29 +0000"  >&lt;p&gt;I plan to get it in the next couple of hours. Fighting off the flu at the moment otherwise it would&apos;ve gone in 12 hours ago.&lt;/p&gt;</comment>
                            <comment id="12986835" author="brucem" created="Wed, 26 Jan 2011 03:45:05 +0000"  >&lt;p&gt;And it is in.. Thanks!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12469210" name="0001-Custom-free-functions-in-avro_give-bytes-fixed-strin.patch" size="18790" author="dcreager" created="Mon, 24 Jan 2011 22:02:25 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 22 Jan 2011 04:28:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4141</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e26n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80116</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-742] Maintain reference counts for singleton objects</title>
                <link>https://issues.apache.org/jira/browse/AVRO-742</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;We use singleton objects for the null Avro value, and for each of the primitive Avro schema types.  They&apos;re initialized with a reference count of 1, and their reference counts are decremented with the avro_whatever_decref methods, but we don&apos;t increment them in the &quot;constructor&quot; methods.  That causes the reference counts to get wonky.  We don&apos;t ever free the static singleton instances, so we don&apos;t get any memory corruption, but it&apos;s still not very clean.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12496361">AVRO-742</key>
            <summary>Maintain reference counts for singleton objects</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dcreager">Douglas Creager</assignee>
                                    <reporter username="dcreager">Douglas Creager</reporter>
                        <labels>
                    </labels>
                <created>Sat, 22 Jan 2011 03:21:54 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:49 +0000</updated>
                            <resolved>Mon, 24 Jan 2011 12:06:14 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12985043" author="dcreager" created="Sat, 22 Jan 2011 03:22:26 +0000"  >&lt;p&gt;Patch to keep accurate reference counts for singleton instances&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12469026" name="0001-Maintain-reference-count-for-singleton-objects.patch" size="3068" author="dcreager" created="Sat, 22 Jan 2011 03:22:26 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4162</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 1 week, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e26v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80117</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-743] Java: Performance Regression and memory pressure with GenericDatumReader</title>
                <link>https://issues.apache.org/jira/browse/AVRO-743</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-650&quot; title=&quot;failures under client concurrency&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-650&quot;&gt;&lt;del&gt;AVRO-650&lt;/del&gt;&lt;/a&gt; introduced a large performance regression and memory bloat issue with GenericDatumReader.&lt;/p&gt;

&lt;p&gt;Performance plummets for some Perf.java tests (One test took 1 hour to finish on my laptop).&lt;br/&gt;
Some minor changes I tried result in it passing in shorter time, but with still an 80% performance degredation.&lt;/p&gt;

&lt;p&gt;This is associated with memory bloat related to ThreadLocals.&lt;/p&gt;

&lt;p&gt;More details provided in comments.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12496482">AVRO-743</key>
            <summary>Java: Performance Regression and memory pressure with GenericDatumReader</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.svg">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="scott_carey">Scott Carey</assignee>
                                    <reporter username="scott_carey">Scott Carey</reporter>
                        <labels>
                    </labels>
                <created>Mon, 24 Jan 2011 07:26:04 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:50 +0000</updated>
                            <resolved>Mon, 7 Feb 2011 18:37:57 +0000</resolved>
                                    <version>1.5.0</version>
                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12985550" author="scott_carey" created="Mon, 24 Jan 2011 07:48:05 +0000"  >&lt;p&gt;On trunk, Perf.java does not complete in reasonable time for me.  I can make some changes that help, but these get the following performance:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;NestedRecordTest: 1525 ms, 32.77809426848799 million entries/sec.  82.48148529345245 million bytes/sec
ResolverTest: 746 ms, 11.162490388711324 million entries/sec.  433.1971901548255 million bytes/sec
MigrationWithDefaultTest: 2986 ms, 2.7902796608268243 million entries/sec.  108.28598876454534 million bytes/sec
GenericReaderTest: 1510 ms, 2.758188340605312 million entries/sec.  107.0486888261762 million bytes/sec
GenericReaderOneTimeUseReaderTest: 7258 ms, 0.5739884392267267 million entries/sec.  22.27995399275671 million bytes/sec
GenericReaderOneTimeUseDecoderTest: 1569 ms, 2.6550866272593567 million entries/sec.  103.03571383053837 million bytes/sec
GenericReaderOneTimeUseTest: 7662 ms, 0.5437721933184865 million entries/sec.  21.10381644161428 million bytes/sec
GenericReaderTestWithDefaultTest: 2615 ms, 1.593089132314149 million entries/sec.  61.826693773206664 million bytes/sec
GenericReaderTestWithOutOfOrderTest: 1542 ms, 2.7016336892067576 million entries/sec.  104.87577931741035 million bytes/sec
GenericReaderTestWithPromotionTest: 1558 ms, 2.6727042262917378 million entries/sec.  103.74088785226581 million bytes/sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Performance when I revert the &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-650&quot; title=&quot;failures under client concurrency&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-650&quot;&gt;&lt;del&gt;AVRO-650&lt;/del&gt;&lt;/a&gt; changes is much better for GenericReader tests:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;NestedRecordTest: 1324 ms, 37.760699871915705 million entries/sec.  95.01951472969381 million bytes/sec
ResolverTest: 715 ms, 11.648566400183402 million entries/sec.  452.0609701034574 million bytes/sec
MigrationWithDefaultTest: 2919 ms, 2.8541473504518238 million entries/sec.  110.76458473406217 million bytes/sec
GenericReaderTest: 1109 ms, 3.754252987904214 million entries/sec.  145.70943802892032 million bytes/sec
GenericReaderOneTimeUseReaderTest: 1454 ms, 2.864026615891172 million entries/sec.  111.15055988231816 million bytes/sec
GenericReaderOneTimeUseDecoderTest: 1132 ms, 3.6795452959841604 million entries/sec.  142.80018121749544 million bytes/sec
GenericReaderOneTimeUseTest: 1471 ms, 2.830739253347936 million entries/sec.  109.8712732110088 million bytes/sec
GenericReaderTestWithDefaultTest: 2020 ms, 2.06191332095476 million entries/sec.  80.03430501173852 million bytes/sec
GenericReaderTestWithOutOfOrderTest: 1124 ms, 3.7038683266586956 million entries/sec.  143.73524875433927 million bytes/sec
GenericReaderTestWithPromotionTest: 1440 ms, 2.8925109202440358 million entries/sec.  112.26017811174887 million bytes/sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;My conclusion after several variations and experiments is that:&lt;/p&gt;

&lt;p&gt;A new ThreadLocal per GenericDatumReader simply won&apos;t work, its very expensive.&lt;br/&gt;
You can do better by keeping a static ThreadLocal&amp;lt;WeakIdentityHashMap&amp;lt;GenericDatumReader,ResolvingDecoder&amp;gt;  but this is still too slow and creates a lot of mess on the heap.  In the &quot;GenericReaderOneTimeUseReaderTest it bloats the map size tremendously because the map keeps an entry for every object not yet GC&apos;d.  &apos;jmap&apos; output looks like this during the test:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; num     #instances         #bytes  class name
----------------------------------------------
   1:        371287       23762368  org.apache.avro.util.WeakIdentityHashMap$IdentityWeakReference
   2:        359761       17268528  java.util.HashMap$Entry
   3:        171171        6846840  org.apache.avro.generic.GenericDatumReader
   4:           258        4241968  [Ljava.util.HashMap$Entry;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When I revert &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-650&quot; title=&quot;failures under client concurrency&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-650&quot;&gt;&lt;del&gt;AVRO-650&lt;/del&gt;&lt;/a&gt; it is much faster and the most common objects on the heap are much more sane:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; num     #instances         #bytes  class name
----------------------------------------------
   1:        299380        7185120  java.lang.Long
   2:        299125        7179000  java.lang.Double
   3:          1470        6658728  [B
   4:         12485        1707464  &amp;lt;constMethodKlass&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What it comes down to, is that either our map, or the one on the thread, has to keep track of every instance created between garbage collections if we want to track per thread state for an object.   The global ThreadLocal for resolvers works because its key is (Schema actual, Schema expected)  we aren&apos;t creating and destroying a large number of Schema objects and attempting to resolve them and that is a use case that makes little sense.  &lt;/p&gt;


&lt;p&gt;The best long term options I have thought of so far are then:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Leave GenericDatumReader in the state before &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-650&quot; title=&quot;failures under client concurrency&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-650&quot;&gt;&lt;del&gt;AVRO-650&lt;/del&gt;&lt;/a&gt; &amp;#8211; not thread safe &amp;#8211; and fix the places elsewhere that assume it is thread safe.&lt;/li&gt;
	&lt;li&gt;Make GenericDatumReader threadsafe via immutability.   This would require some other changes (builder pattern?) to allow for the cases where we now call setSchema and setExpected after construction.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think the second option is the better one, but it would be an API break in a significant way.   The more I think about it, the more that I feel that all of the complicated behavioral objects should be immutable &amp;#8211; Schema/Protocol, DatumReader/DatumWriter, ResolvingDecoders, etc.     That or not thread safe &amp;#8211; mutability + threadsafe is either hard, bug prone, or performs poorly.&lt;/p&gt;

&lt;p&gt;The first option is easier and might be OK for 1.5.0 &amp;#8211; fix the stuff in ipc that is re-using decoders across threads calling setSchema or setExpected.&lt;/p&gt;

</comment>
                            <comment id="12991201" author="scott_carey" created="Sun, 6 Feb 2011 19:15:12 +0000"  >&lt;p&gt;With a larger heap, it completes but slowly.  There is still a large regression.  Using the new Perf.java, here are full read results with and without the &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-650&quot; title=&quot;failures under client concurrency&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-650&quot;&gt;&lt;del&gt;AVRO-650&lt;/del&gt;&lt;/a&gt; changes.  &lt;/p&gt;

&lt;p&gt;args: -nowrite -server -Xmx256m -Xms256m -XX:+UseParallelGC -XX:+UseCompressedOops -XX:+DoEscapeAnalysis&lt;/p&gt;

&lt;p&gt;Only the generic results are below &amp;#8211; only the &quot;one time use&quot; reader tests are affected and other generic tests are a good reference.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;                  GenericRead:  1811 ms,      3.680 million entries/sec.    142.805 million bytes/sec
           GenericNested_Read:  3015 ms,      2.211 million entries/sec.     85.801 million bytes/sec
      GenericWithDefault_Read:  3253 ms,      2.049 million entries/sec.     79.532 million bytes/sec
   GenericWithOutOfOrder_Read:  1855 ms,      3.594 million entries/sec.    139.472 million bytes/sec
    GenericWithPromotion_Read:  1962 ms,      3.397 million entries/sec.    131.853 million bytes/sec
GenericOneTimeDecoderUse_Read:  1791 ms,      3.721 million entries/sec.    144.426 million bytes/sec
 GenericOneTimeReaderUse_Read:  6989 ms,      0.954 million entries/sec.     37.014 million bytes/sec
       GenericOneTimeUse_Read:  7373 ms,      0.904 million entries/sec.     35.088 million bytes/sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I revert &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-650&quot; title=&quot;failures under client concurrency&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-650&quot;&gt;&lt;del&gt;AVRO-650&lt;/del&gt;&lt;/a&gt;, I get:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;                  GenericRead:  1808 ms,      3.687 million entries/sec.    143.076 million bytes/sec
           GenericNested_Read:  2872 ms,      2.321 million entries/sec.     90.062 million bytes/sec
      GenericWithDefault_Read:  3389 ms,      1.967 million entries/sec.     76.340 million bytes/sec
   GenericWithOutOfOrder_Read:  1805 ms,      3.693 million entries/sec.    143.319 million bytes/sec
    GenericWithPromotion_Read:  1978 ms,      3.369 million entries/sec.    130.759 million bytes/sec
GenericOneTimeDecoderUse_Read:  1803 ms,      3.696 million entries/sec.    143.443 million bytes/sec
 GenericOneTimeReaderUse_Read:  2289 ms,      2.912 million entries/sec.    113.024 million bytes/sec
       GenericOneTimeUse_Read:  2299 ms,      2.899 million entries/sec.    112.501 million bytes/sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;To prevent the cases where GenericDatumReaders are created and disposed rapidly from causing this issue, I tried several things.  One was to remove the resolver cached in GenericDatumReader entirely and only use the global cache.  This was surprisingly fast, but slowed all Generic tests by 10% to 15%.&lt;br/&gt;
Any variation that creates a new threadLocal per instance of GenericDatumReader was bad.  An alternate attempt tried to instead keep one global ThreadLocal WeakReferenceCache with GenericDatumReader&apos;s as keys to track the relationship was faster, but still a large memory hog and performance problem.&lt;/p&gt;



&lt;p&gt;This is still not 100% thread-safe, but it is no worse than before.   Since we allow mutating state in setSchema() and setExpected() the only way to be completely thread-safe is to synchronize those as well as their access .  Performance dropped quite a bit when I did that.  Longer term we need to make these objects immutable, and use a builder pattern when we don&apos;t know all the fields prior to construction.&lt;/p&gt;
</comment>
                            <comment id="12991202" author="scott_carey" created="Sun, 6 Feb 2011 19:23:22 +0000"  >&lt;p&gt;Patch implements a simple solution that worked best:&lt;/p&gt;

&lt;p&gt;Keep track of the thread that created the GenericDatumReader, and allow only this thread to access the local resolver reference.  Other threads use the global resolver cache.&lt;/p&gt;

&lt;p&gt;Performance results:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                  GenericRead:  1824 ms,      3.654 million entries/sec.    141.829 million bytes/sec
           GenericNested_Read:  2940 ms,      2.267 million entries/sec.     87.989 million bytes/sec
      GenericWithDefault_Read:  3364 ms,      1.981 million entries/sec.     76.898 million bytes/sec
   GenericWithOutOfOrder_Read:  1799 ms,      3.705 million entries/sec.    143.792 million bytes/sec
    GenericWithPromotion_Read:  2020 ms,      3.300 million entries/sec.    128.059 million bytes/sec
GenericOneTimeDecoderUse_Read:  1813 ms,      3.676 million entries/sec.    142.682 million bytes/sec
 GenericOneTimeReaderUse_Read:  2290 ms,      2.910 million entries/sec.    112.944 million bytes/sec
       GenericOneTimeUse_Read:  2253 ms,      2.959 million entries/sec.    114.831 million bytes/sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is just as thread-safe as the prior version.  If multiple threads are concurrently doing setSchema() or setExcpeted() other threads may not see the changes at the same time.  It should be stable, and eventually consistent.  If &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-650&quot; title=&quot;failures under client concurrency&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-650&quot;&gt;&lt;del&gt;AVRO-650&lt;/del&gt;&lt;/a&gt; was good enough, this should be too.  &lt;/p&gt;</comment>
                            <comment id="12991496" author="cutting" created="Mon, 7 Feb 2011 17:53:42 +0000"  >&lt;p&gt;+1 This looks great.&lt;/p&gt;</comment>
                            <comment id="12991509" author="scott_carey" created="Mon, 7 Feb 2011 18:37:57 +0000"  >&lt;p&gt;Committed in revision 1068045.&lt;/p&gt;</comment>
                            <comment id="12992257" author="stuhood" created="Wed, 9 Feb 2011 00:52:51 +0000"  >&lt;p&gt;If someone needed to use a GenericDatumReader in multiple threads after this patch, would the recommended approach be a ThreadLocal GDR for each consumer?&lt;/p&gt;</comment>
                            <comment id="12992290" author="scott_carey" created="Wed, 9 Feb 2011 02:19:23 +0000"  >&lt;p&gt;It should be as thread-safe as it was before the patch, so what worked before should continue to work.   &lt;/p&gt;

&lt;p&gt;In general, per thread is probably the way to go.  A static ThreadLocal&amp;lt;GenericDatumReader&amp;gt; will work, or tie it to the consumer in the app in a more natural way (part of a thread pool?) if there is one.&lt;/p&gt;

&lt;p&gt;The fact is, the API is mutable, and if one thread calls setSchema() while another is reading a datum, that contract is never going to be great.  Even fully synchronized it doesn&apos;t make a lot of sense to do that.  &lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12473074">AVRO-650</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12470405" name="AVRO-743.patch" size="2173" author="scott_carey" created="Sun, 6 Feb 2011 19:18:58 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 7 Feb 2011 17:53:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4154</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 50 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e273:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80118</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-744] Helper macros for extracting and setting record field values</title>
                <link>https://issues.apache.org/jira/browse/AVRO-744</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I&apos;ve created two helper macros that can be used to extract or set the value of a record field using fewer function calls.  So instead of&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;  rc;
avro_datum_t  field;
&lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;  *value;
rc = avro_record_get(record, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;, &amp;amp;field);
rc = avro_string_get(field, &amp;amp;value);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;you can do:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;  rc;
&lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;  *value;
avro_record_get_field_value(rc, record, string, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;, &amp;amp;value);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12496567">AVRO-744</key>
            <summary>Helper macros for extracting and setting record field values</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dcreager">Douglas Creager</assignee>
                                    <reporter username="dcreager">Douglas Creager</reporter>
                        <labels>
                    </labels>
                <created>Mon, 24 Jan 2011 16:09:18 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:58 +0000</updated>
                            <resolved>Tue, 15 Feb 2011 15:40:43 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12985776" author="brucem" created="Mon, 24 Jan 2011 16:13:15 +0000"  >&lt;p&gt;I still want to bring back my older patch that used atoms instead of char* for record field names....&lt;/p&gt;</comment>
                            <comment id="12985811" author="dcreager" created="Mon, 24 Jan 2011 16:58:22 +0000"  >&lt;p&gt;I like atoms, too.  That change shouldn&apos;t cause much of a problem with this patch &#8212; the two new functions are actually macros, which pass the field name to avro_record_get as-is.  So if you change avro_record_get to take in an atom, then get_field_value and set_field_value would start taking in atoms, too.&lt;/p&gt;</comment>
                            <comment id="12994843" author="dcreager" created="Tue, 15 Feb 2011 15:40:43 +0000"  >&lt;p&gt;Committed to SVN.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12469169" name="0001-Helper-macros-for-extracting-and-setting-record-fiel.patch" size="2836" author="dcreager" created="Mon, 24 Jan 2011 16:09:41 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 24 Jan 2011 16:13:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4188</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 49 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e27b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80119</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-745] Segfault in avro_{bytes,sting,fixed}_set</title>
                <link>https://issues.apache.org/jira/browse/AVRO-745</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The avro_bytes_set function (and its string and fixed counterparts) are supposed to save a copy of the value, which the avro_datum_t instance takes full control over.  Unfortunately, we were making that copy but then saving the original pointer, which would lead to a segfault when freeing the datum.  Whoops...&lt;/p&gt;</description>
                <environment></environment>
        <key id="12496568">AVRO-745</key>
            <summary>Segfault in avro_{bytes,sting,fixed}_set</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dcreager">Douglas Creager</assignee>
                                    <reporter username="dcreager">Douglas Creager</reporter>
                        <labels>
                    </labels>
                <created>Mon, 24 Jan 2011 16:11:50 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:47 +0000</updated>
                            <resolved>Mon, 24 Jan 2011 16:52:45 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12985806" author="brucem" created="Mon, 24 Jan 2011 16:52:45 +0000"  >&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12469171" name="0001-Fixed-memory-bug-in-bytes-string-fixed-values.patch" size="3727" author="dcreager" created="Mon, 24 Jan 2011 16:12:09 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 24 Jan 2011 16:52:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4165</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 1 week ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e27j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80120</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-746] Atomic reference counts</title>
                <link>https://issues.apache.org/jira/browse/AVRO-746</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;In one of my projects that uses Avro, I pass avro_datum_t instances between threads, using the reference count mechanism to make sure that they&apos;re not freed while any thread still has a reference to them.  I was getting some spurious segfaults, which were caused by the fact that the reference counts aren&apos;t updated atomically.  I&apos;ve created a patch that implements atomic reference counts, using the &lt;a href=&quot;http://trac.mcs.anl.gov/projects/openpa/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;OpenPA library&lt;/a&gt; to provide the atomic operations themselves.  (That library is MIT licensed, so it can be included in the source tree.)&lt;/p&gt;

&lt;p&gt;Note that only avro_XXX_incref and avro_XXX_decref are thread-safe as a result of this patch.  For all of the other library functions, the caller is still responsible for ensuring thread safety.&lt;/p&gt;

&lt;p&gt;The patch makes sure that the OpenPA code works in both the old autotools build and the newer CMake build.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12496603">AVRO-746</key>
            <summary>Atomic reference counts</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dcreager">Douglas Creager</assignee>
                                    <reporter username="dcreager">Douglas Creager</reporter>
                        <labels>
                    </labels>
                <created>Mon, 24 Jan 2011 21:21:47 +0000</created>
                <updated>Tue, 1 Nov 2011 18:36:08 +0000</updated>
                            <resolved>Tue, 12 Jul 2011 20:22:41 +0000</resolved>
                                                    <fixVersion>1.6.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12988112" author="dcreager" created="Fri, 28 Jan 2011 15:32:44 +0000"  >&lt;p&gt;Ignore the 0001 patch; the new openpa directory wasn&apos;t being included in the distribution tarball, giving you compilation errors.  The new patch fixes this.&lt;/p&gt;</comment>
                            <comment id="12988115" author="dcreager" created="Fri, 28 Jan 2011 15:42:48 +0000"  >&lt;p&gt;Third time&apos;s a charm.&lt;/p&gt;</comment>
                            <comment id="12988832" author="brucem" created="Mon, 31 Jan 2011 18:27:32 +0000"  >&lt;p&gt;I&apos;d like to see more / wider discussion of this.&lt;/p&gt;

&lt;p&gt;1) Portability: Will this work on Windows as set up now via CMake?&lt;br/&gt;
2) New external code...&lt;br/&gt;
3) Performance hit in single-threaded case?&lt;br/&gt;
4) Portability: iOS / Android impact?&lt;/p&gt;

&lt;p&gt;Also, the CMake integration here doesn&apos;t build any code, it just uses the headers, I&apos;m guessing that&apos;s okay?&lt;/p&gt;

&lt;p&gt;And this piles on top of some other stuff that uses C99 struct initializers ... I have another patch that I&apos;ve been working on that gets rid of those because they don&apos;t work in Visual Studio which will now conflict with this.&lt;/p&gt;</comment>
                            <comment id="12989897" author="dcreager" created="Wed, 2 Feb 2011 23:45:49 +0000"  >&lt;p&gt;I&apos;m not married to the idea of incorporating OpenPA, it just seemed like an expedient solution.  We could easily create our own refcount.h header, that contained static inline definitions like OpenPA&apos;s does, to ensure that we can target all of the platforms you mention.&lt;/p&gt;

&lt;p&gt;I&apos;ll try to run some tests to compare single-threaded performance.  I don&apos;t think it&apos;s a big hit, but some data to back that up would be nice.&lt;/p&gt;</comment>
                            <comment id="12993565" author="dcreager" created="Fri, 11 Feb 2011 16:24:22 +0000"  >&lt;p&gt;Here&apos;s a patch that does a performance test of the reference counting mechanism.  It allocates a single int value, and then references and dereferences that value 100,000,000 times.  It runs the test 3 times and prints out the average time across the 3 runs.&lt;/p&gt;

&lt;p&gt;It turns out that the atomic counts are a bigger performance hit than I thought.  With the original implementation, which just uses C&apos;s ++ and &amp;#8211; operators, the test case ran in 0.460 seconds.  Using the new atomic operation, it took 1.820 seconds.&lt;/p&gt;

&lt;p&gt;That said, I don&apos;t know if reference counting is the bottleneck in a &quot;typical&quot; use of the library.  I&apos;m going to add some more performance tests to the test program to see what we get.&lt;/p&gt;</comment>
                            <comment id="12993744" author="dcreager" created="Fri, 11 Feb 2011 22:47:51 +0000"  >&lt;p&gt;Here&apos;s another performance test.  It basically reproduces the write/read test from test_avro_data, but does it 100,000 times and times it.&lt;/p&gt;

&lt;p&gt;In this case, the reference counting isn&apos;t as much of a bottleneck.  I&apos;m averaging about 0.85 seconds per run with the original non-atomic reference counts, and about 0.87 seconds with atomic reference counts.&lt;/p&gt;</comment>
                            <comment id="12993753" author="scott_carey" created="Fri, 11 Feb 2011 23:15:40 +0000"  >&lt;p&gt;That sounds about right.  Atomic increments are a lot more expensive than a simple increment, since it has to push the value to the processor cache and notify any other processors that may have copies of the cache line.  And because an ordinary increment is basically the cheapest thing you can ask a CPU to do.  However, such increments are rarely a big chunk of the total work.&lt;/p&gt;

&lt;p&gt;Very heavy multi-threaded access will likely show a bigger performance hit.&lt;/p&gt;</comment>
                            <comment id="12993989" author="dcreager" created="Sat, 12 Feb 2011 20:31:19 +0000"  >&lt;p&gt;Here&apos;s a new version of the patch that doesn&apos;t include the full OpenPA distribution.  There&apos;s a single header file, src/refcount.h, which defines a bunch of static inline functions.&lt;/p&gt;

&lt;p&gt;I think this patch takes care of all of the platforms that Bruce mentioned.  There are implementations using Mac OS X functions (which should also include iOS), GCC intrinsics (valid for any platform with GCC &amp;gt;= 4.1), raw assembly in GCC for i386, x86_64, and ppc, and Windows intrinsics.  I don&apos;t have a Windows machine to test the Windows intrinsics on; Bruce, would you be able to test that?&lt;/p&gt;</comment>
                            <comment id="13045507" author="dcreager" created="Tue, 7 Jun 2011 15:58:12 +0000"  >&lt;p&gt;There hasn&apos;t been any word on whether the Windows intrinsics work, but this is working on all of the other platforms I can test.  And we still don&apos;t officially list Windows as a supported port; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-551&quot; title=&quot;C: Build and pass tests on Win32&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-551&quot;&gt;&lt;del&gt;AVRO-551&lt;/del&gt;&lt;/a&gt; is still open to get the tests to compile and run under Windows.  Unless I hear objections in the next couple of days, I&apos;m going to go ahead and commit this on the 1.6 trunk branch.&lt;/p&gt;</comment>
                            <comment id="13064122" author="dcreager" created="Tue, 12 Jul 2011 20:22:41 +0000"  >&lt;p&gt;Committed to SVN for 1.6.0; not back-ported to 1.5 branch&lt;/p&gt;</comment>
                            <comment id="13064141" author="cutting" created="Tue, 12 Jul 2011 21:18:56 +0000"  >&lt;p&gt;Can you please update the top-level CHANGES.txt too?  Thanks!&lt;/p&gt;</comment>
                            <comment id="13064156" author="dcreager" created="Tue, 12 Jul 2011 21:37:20 +0000"  >&lt;p&gt;Apologies!  CHANGES.txt now updated.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12470946" name="0001-Atomic-reference-counts.patch" size="13763" author="dcreager" created="Sat, 12 Feb 2011 20:31:19 +0000"/>
                            <attachment id="12470867" name="0001-Performance-test-program.patch" size="4786" author="dcreager" created="Fri, 11 Feb 2011 16:24:22 +0000"/>
                            <attachment id="12470909" name="0002-Serialization-performance-test.patch" size="4365" author="dcreager" created="Fri, 11 Feb 2011 22:47:51 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 31 Jan 2011 18:27:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>68238</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 28 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e27r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80121</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
