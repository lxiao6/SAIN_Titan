<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:15:07 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2011-2-1+AND+created+%3C%3D+2011-2-8+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="7" total="7"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-752] Java:  Enhanced Performance Test Suite</title>
                <link>https://issues.apache.org/jira/browse/AVRO-752</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The Perf.java performance test can be improved.  Notably, it is only useful for testing Decoders at the moment.  Upgrading it to run tests more consistently, support both read (Decoder) and write (Encoder) tests, and be more flexible in general will help us performance tune and spot regressions more easily.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12497297">AVRO-752</key>
            <summary>Java:  Enhanced Performance Test Suite</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="scott_carey">Scott Carey</assignee>
                                    <reporter username="scott_carey">Scott Carey</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Feb 2011 08:35:36 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:46 +0000</updated>
                            <resolved>Wed, 9 Feb 2011 01:38:52 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12989096" author="scott_carey" created="Tue, 1 Feb 2011 08:43:40 +0000"  >&lt;p&gt;Major refactoring of the Perf test.  &lt;br/&gt;
Includes write (Encoder) performance tests, more read tests, and more consistency across all tests.&lt;br/&gt;
Names are simplified and many more command-line parameters are available.&lt;br/&gt;
The output if you do not specify a valid command line is:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Usage: Perf { -nowrite | -noread | -basic | -i | -ls | -l | -f | -d | -b | -by | -s | -record | -R | -Rv | -Rr | -Rd | -Ro | -Rp | -generic | -G | -Gn | -Gd | -Go | -Gp | -generic-onetime | -Gotd | -Gotr | -Got }

 -nowrite   (do not execute write tests)
 -noread   (do not execute write tests)
 -basic   (executes all basic tests):
      -i  (IntTest)
      -ls  (SmallLongTest)
      -l  (LongTest)
      -f  (FloatTest)
      -d  (DoubleTest)
      -b  (BoolTest)
      -by  (BytesTest)
      -s  (StringTest)
 -record   (executes all record tests):
      -R  (RecordTest)
      -Rv  (ValidatingRecord)
      -Rr  (ResolvingRecord)
      -Rd  (RecordWithDefault)
      -Ro  (RecordWithOutOfOrder)
      -Rp  (RecordWithPromotion)
 -generic   (executes all generic tests):
      -G  (GenericTest)
      -Gn  (GenericNested)
      -Gd  (GenericWithDefault)
      -Go  (GenericWithOutOfOrder)
      -Gp  (GenericWithPromotion)
 -generic-onetime   (executes all generic-onetime tests):
      -Gotd  (GenericOneTimeDecoderUse)
      -Gotr  (GenericOneTimeReaderUse)
      -Got  (GenericOneTimeUse)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12989102" author="scott_carey" created="Tue, 1 Feb 2011 09:01:24 +0000"  >&lt;p&gt;To run Perf.java via maven, use the maven exec plugin.&lt;/p&gt;

&lt;p&gt;for info:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;mvn exec:help
mvn exec:help -Dgoal=java
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and &lt;a href=&quot;http://mojo.codehaus.org/exec-maven-plugin/usage.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mojo.codehaus.org/exec-maven-plugin/usage.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;to run only the write tests:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;cd lang/java/avro
mvn exec:java -Dexec.mainClass=&quot;org.apache.avro.io.Perf&quot; -Dexec.classpathScope=test -Dexec.args=&quot;-noread&quot;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can simplify this later with a profile in the pom that sets up the class and classpath, or wire it up another way.&lt;/p&gt;</comment>
                            <comment id="12989322" author="cutting" created="Tue, 1 Feb 2011 18:44:01 +0000"  >&lt;p&gt;+1 This looks like a good improvement and works for me.&lt;/p&gt;

&lt;p&gt;Ideally we might run performance benchmarks regularly on trunk and graph the results.  Hudson could do this for us, I think.&lt;/p&gt;</comment>
                            <comment id="12989334" author="scott_carey" created="Tue, 1 Feb 2011 19:02:43 +0000"  >&lt;p&gt;Great. I&apos;m going to commit this and leave the ticket open for a few days in case anyone finds any minor glitches or enhancements to add to this ticket.&lt;/p&gt;</comment>
                            <comment id="12991777" author="scott_carey" created="Tue, 8 Feb 2011 03:49:48 +0000"  >&lt;p&gt;This patch follows on the previous one.&lt;br/&gt;
Changes are:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;longer test by default, more consistent results.&lt;/li&gt;
	&lt;li&gt;improved output formatting and additional column that reports the size of the encoded data for each test.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Output now looks like:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Executing tests: 
[IntTest, SmallLongTest, LongTest, FloatTest, DoubleTest, BoolTest, BytesTest, StringTest, RecordTest, ValidatingRecord, ResolvingRecord, RecordWithDefault, RecordWithOutOfOrder, RecordWithPromotion, GenericTest, GenericNested, GenericWithDefault, GenericWithOutOfOrder, GenericWithPromotion, GenericOneTimeDecoderUse, GenericOneTimeReaderUse, GenericOneTimeUse]
 readTests:false
 writeTests:true
 cycles=800
                    test name     time    M entries/sec   M bytes/sec  bytes/cycle
                     IntWrite:   5372 ms      37.229        93.717        629325
               SmallLongWrite:   5502 ms      36.349        91.501        629325
                    LongWrite:   9874 ms      20.254        88.494       1092275
                   FloatWrite:   7337 ms      27.259       109.035       1000000
                  DoubleWrite:  14798 ms      13.515       108.117       2000000
                 BooleanWrite:   2111 ms      94.707        94.707        250000
                   BytesWrite:   2843 ms      14.066       499.879       1776937
                  StringWrite:  12230 ms       3.270       116.487       1780910
                  RecordWrite:  12538 ms       2.659       103.178       1617069
        ValidatingRecordWrite:  14139 ms       2.358        91.495       1617069
                 GenericWrite:  10777 ms       1.546        60.013        808498
          GenericNested_Write:  12837 ms       1.298        50.384        808498

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;I will commit this change soon and close the ticket if there are no objections tomorrow.&lt;/p&gt;</comment>
                            <comment id="12992281" author="scott_carey" created="Wed, 9 Feb 2011 01:38:52 +0000"  >&lt;p&gt;The second change was committed in revision 1068726&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12469905" name="AVRO-752.patch" size="48201" author="scott_carey" created="Tue, 1 Feb 2011 08:43:40 +0000"/>
                            <attachment id="12470538" name="AVRO-752.patch-2" size="2600" author="scott_carey" created="Tue, 8 Feb 2011 03:49:48 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 1 Feb 2011 18:44:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4217</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 50 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e293:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80127</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-753] Java:  Improve BinaryEncoder Performance</title>
                <link>https://issues.apache.org/jira/browse/AVRO-753</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;BinaryEncoder has not had a performance improvement pass like BinaryDecoder did.  It still mostly writes directly to the underlying OutputStream which is not optimal for performance.  I like to use a rule that if you are writing to an OutputStream or reading from an InputStream in chunks smaller than 128 bytes, you have a performance problem.&lt;/p&gt;

&lt;p&gt;Measurements indicate that optimizing BinaryEncoder yields a 2.5x to 6x performance improvement.  The process is significantly simpler than BinaryDecoder because &apos;pushing&apos; is easier than &apos;pulling&apos; &amp;#8211; and also because we do not need a &apos;direct&apos; variant because BinaryEncoder already buffers sometimes.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12497300">AVRO-753</key>
            <summary>Java:  Improve BinaryEncoder Performance</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.svg">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="scott_carey">Scott Carey</assignee>
                                    <reporter username="scott_carey">Scott Carey</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Feb 2011 09:07:25 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:55 +0000</updated>
                            <resolved>Fri, 25 Feb 2011 00:38:16 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12989107" author="scott_carey" created="Tue, 1 Feb 2011 09:14:50 +0000"  >&lt;p&gt;This patch implements an experimental variation of BinaryEncoder named FastBinaryEncoder and its accompanying EncoderFactory.&lt;/p&gt;

&lt;p&gt;This is a first pass proof-of-concept.  A final patch would replace BinaryEncoder rather than introduce FastBinaryEncoder.  The purpose here is that you can do side-by-side comparison with the old one using the new Perf.java tool in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-752&quot; title=&quot;Java:  Enhanced Performance Test Suite&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-752&quot;&gt;&lt;del&gt;AVRO-752&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The results of Perf with &apos;-noread&apos; mode is as follows.&lt;/p&gt;

&lt;p&gt;BinaryEncoder (original):&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                     IntWrite:  2219 ms,     36.047 million entries/sec.     90.729 million bytes/sec
               SmallLongWrite:  2253 ms,     35.499 million entries/sec.     89.350 million bytes/sec
                    LongWrite:  4494 ms,     17.801 million entries/sec.     77.769 million bytes/sec
                   FloatWrite:  3088 ms,     25.900 million entries/sec.    103.599 million bytes/sec
                  DoubleWrite:  6000 ms,     13.333 million entries/sec.    106.663 million bytes/sec
                 BooleanWrite:   876 ms,     91.265 million entries/sec.     91.265 million bytes/sec
                   BytesWrite:  1007 ms,     15.882 million entries/sec.    565.653 million bytes/sec
                  StringWrite:  4835 ms,      3.309 million entries/sec.    117.875 million bytes/sec
                  RecordWrite:  5333 ms,      2.500 million entries/sec.     97.016 million bytes/sec
        ValidatingRecordWrite:  5741 ms,      2.322 million entries/sec.     90.121 million bytes/sec
                 GenericWrite:  3953 ms,      1.686 million entries/sec.     65.439 million bytes/sec
          GenericNested_Write:  4429 ms,      1.505 million entries/sec.     58.408 million bytes/sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;FastBinaryEncoder:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                     IntWrite:   693 ms,    115.425 million entries/sec.    290.518 million bytes/sec
               SmallLongWrite:   797 ms,    100.329 million entries/sec.    252.522 million bytes/sec
                    LongWrite:  1323 ms,     60.450 million entries/sec.    264.097 million bytes/sec
                   FloatWrite:   561 ms,    142.443 million entries/sec.    569.772 million bytes/sec
                  DoubleWrite:   893 ms,     89.528 million entries/sec.    716.227 million bytes/sec
                 BooleanWrite:   317 ms,    252.174 million entries/sec.    252.174 million bytes/sec
                   BytesWrite:   843 ms,     18.979 million entries/sec.    675.963 million bytes/sec
                  StringWrite:  4631 ms,      3.455 million entries/sec.    123.065 million bytes/sec
                  RecordWrite:  1255 ms,     10.617 million entries/sec.    412.047 million bytes/sec
        ValidatingRecordWrite:  1686 ms,      7.907 million entries/sec.    306.883 million bytes/sec
                 GenericWrite:  1302 ms,      5.119 million entries/sec.    198.660 million bytes/sec
          GenericNested_Write:  2073 ms,      3.215 million entries/sec.    124.769 million bytes/sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Performance is 2.5 to 6 times faster.&lt;/p&gt;

&lt;p&gt;There is more tuning and testing to do, but I wanted to checkpoint my work at this point and share progress.&lt;/p&gt;</comment>
                            <comment id="12989113" author="scott_carey" created="Tue, 1 Feb 2011 09:28:29 +0000"  >&lt;p&gt;Not quite 2.5x faster... Bytes and String only increase performance moderately, since the former is just System.arraycopy in both cases, and the latter is dominated by char[] &amp;gt; Utf8 conversion.  Everything else is a big gain because it avoids the very slow OutputStream.write(int b).  &lt;/p&gt;</comment>
                            <comment id="12989115" author="scott_carey" created="Tue, 1 Feb 2011 09:31:10 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-753&quot; title=&quot;Java:  Improve BinaryEncoder Performance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-753&quot;&gt;&lt;del&gt;AVRO-753&lt;/del&gt;&lt;/a&gt; should fix &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-738&quot; title=&quot;BinaryEncoder&amp;#39;s init() function does not reset the OutputStream of the embedded SimpleByteWriter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-738&quot;&gt;&lt;del&gt;AVRO-738&lt;/del&gt;&lt;/a&gt; as a byproduct.&lt;/p&gt;</comment>
                            <comment id="12989312" author="cutting" created="Tue, 1 Feb 2011 18:33:40 +0000"  >&lt;p&gt;This is great stuff!&lt;/p&gt;

&lt;p&gt;Glancing at the code, it appears that writeFixed() should return after calling out.write, no?&lt;/p&gt;</comment>
                            <comment id="12989331" author="scott_carey" created="Tue, 1 Feb 2011 19:00:21 +0000"  >&lt;p&gt;Yup, that is a bug.  The below is the correct form.  It doesn&apos;t change the performance.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void writeFixed(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bytes, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; start, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; len) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (len &amp;gt; (limit &amp;gt;&amp;gt; 2)) {
      &lt;span class=&quot;code-comment&quot;&gt;//greater than 25% of the buffer, write direct
&lt;/span&gt;      flushBuffer();
      out.write(bytes, start, len);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
    }
    ensureBounds(len);
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.arraycopy(bytes, start, buf, pos, len);
    pos+=len;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12991207" author="scott_carey" created="Sun, 6 Feb 2011 19:59:32 +0000"  >&lt;p&gt;Pursuing this further has led to new information, some questions, and some trouble.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The old BinaryEncoder in most cases wrote directly to the output stream.  In some cases it buffered (writeBytes).  Almost every use of it in Avro assumes that it does not buffer.  Therefore, although we know from the mailing lists that many users have run into the buffering and now use flush(), many likely do not.  Therefore we need something akin to &quot;DirectBinaryEncoder&quot;, and another big note in CHANGES.txt.  This should be much simpler than the Decoder case.&lt;/li&gt;
	&lt;li&gt;BlockingBinaryEncoder should be easy to adapt, and integrate with the factory.  It should become simpler than it is now.&lt;/li&gt;
	&lt;li&gt;Does itt makes sense to have BinaryEncoder implement BufferedOutputStream?  And likewise make &quot;DirectBinaryEncoder&quot; implement OutputStream?  This should then be easier for users to understand the semantics and not have to keep a reference to the underlying stream around to close.  Any use cases where one &quot;weaves&quot; avro and non-avro data to the same stream gets much simpler too.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I have made a few more performance improvements, the big one is to writeString(String), which goes from ~125MB/sec to ~183MB/sec.  The downside is that it requires an additional 50 lines of code and a simpler, 5 line variation gets 160MB/sec.  This is the big one for the &quot;thrift/protobuf compare&quot; performance benchmark. &lt;a href=&quot;http://evanjones.ca/software/java-string-encoding.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://evanjones.ca/software/java-string-encoding.html&lt;/a&gt;&lt;br/&gt;
We could try adapting the raw UTF-8 code from the Hadoop project and see if that is faster.  Perhaps for 1.5.0, we keep it simple and go with the 160MB/sec variant and research faster string encoding and decoding on its own later.&lt;/p&gt;
</comment>
                            <comment id="12991491" author="cutting" created="Mon, 7 Feb 2011 17:47:14 +0000"  >&lt;p&gt;It would be great to improve our ranking the &quot;thrift/protobuf compare&quot; benchmark.  Currently that has Avro 1.3.2 at about half the speed of Thrift and Protobuf, but most of the gap is in deserialization.&lt;/p&gt;

&lt;p&gt;I like the idea of committing the simpler writeString() optimization first, then continuing to tune.  +1&lt;/p&gt;</comment>
                            <comment id="12991501" author="scott_carey" created="Mon, 7 Feb 2011 18:22:19 +0000"  >&lt;p&gt;I think that 1.4.1 is significantly faster for Specific/Generic decoding than 1.3.2 due to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-557&quot; title=&quot;Speed up one-time data decoding&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-557&quot;&gt;&lt;del&gt;AVRO-557&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What about the buffering issue?&lt;/p&gt;

&lt;p&gt;Does it make sense to follow our Decoder pattern and have BinaryEncoder and DirectBinaryEncoder?  Or follow the OutputStream naming convention and have BinaryEncoder (implements OutputStream) and BufferedBinaryEncoder (implements BufferedOutputStream) ?&lt;/p&gt;

&lt;p&gt;The former matches our decoder convention, but the latter will not introduce bugs to users who don&apos;t call flush() properly now.&lt;br/&gt;
I&apos;m leaning towards the latter, with careful javadoc and release notes. &lt;/p&gt;</comment>
                            <comment id="12991511" author="cutting" created="Mon, 7 Feb 2011 18:45:33 +0000"  >&lt;p&gt;I think you mean that BinaryEncoder would &lt;b&gt;extend&lt;/b&gt; BufferedOutputStream, not implement it, right?  That seems fine to me since BinaryEncoder&apos;s public methods already all come from the Encoder interface and we don&apos;t lose any abstraction.  But it could get tricky to also have DirectBinaryEncoder extend OutputStream, since it couldn&apos;t also then extend BinaryEncoder.  It might be easier if OutputStream was an interface...  Am I missing something?&lt;/p&gt;</comment>
                            <comment id="12991514" author="scott_carey" created="Mon, 7 Feb 2011 18:58:13 +0000"  >&lt;p&gt;Nope. I&apos;m just losing a bit of my mind.  Decoder and Encoder are both abstract classes.  OutputStream too.  So the only related option is making Encoder extend OutputStream, but I&apos;m not sure that is a good idea, since not all encoders encode to a byte stream.  Making Encoder an interface would hurt performance.   BinaryDecoder&apos;s inputStream() method was made due to the same reasoning.&lt;/p&gt;</comment>
                            <comment id="12992661" author="scott_carey" created="Wed, 9 Feb 2011 19:01:12 +0000"  >&lt;p&gt;I need to change BlockingBinaryEncoder as part of this process.  It appears that I can simplify it significantly since both the new BinaryEncoder and the blocking variant will need to buffer data in a similar way and thus they will share a lot more code.&lt;/p&gt;

&lt;p&gt;I want to clarify how it should work. The &lt;a href=&quot;http://avro.apache.org/docs/current/spec.html#binary_encoding&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;spec&lt;/a&gt; doesn&apos;t seem to have the answer.  &lt;br/&gt;
It says: &quot;If a block&apos;s count is negative, its absolute value is used, and the count is followed immediately by a long block size indicating the number of bytes in the block.&quot;  and &quot;The blocked representation permits one to read and write arrays larger than can be buffered in memory, since one can start writing items without knowing the full length of the array.&quot;&lt;/p&gt;

&lt;p&gt;If you need to write the length of the block, how can you write without knowing the full length of the array?  Looking at the code, it mentions this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&quot;Regular&quot; blocks have a non-zero byte count.&lt;br/&gt;
 &quot;Overflow&quot; blocks help us deal with the case where a block&lt;br/&gt;
 contains a value that&apos;s too big to buffer.  In this case, the&lt;br/&gt;
 block contains only one item, and we give it an unknown&lt;br/&gt;
 byte-count.  Because these values (1,unknown) are fixed, we&apos;re&lt;br/&gt;
 able to write the header for these overflow blocks to the&lt;br/&gt;
 underlying stream without seeing the entire block.  After writing&lt;br/&gt;
 this header, we&apos;ve freed our buffer space to be fully devoted to&lt;br/&gt;
 blocking the large, inner value.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The spec does not mention that a block can have an &apos;unknown&apos; byte count.  Is this something that should be added to the spec?  Or is it somewhere else that I did not notice?&lt;/p&gt;

&lt;p&gt;The code indicates that an &apos;overflow&apos; block has one item (count = -1) and size = 0.  That seems a little ambiguous, &quot;-1, -1&quot; would make more sense since a negative size is impossible.  A valid record can have size zero if it only contains null fields.  &lt;/p&gt;

&lt;p&gt;I&apos;m refactoring BlockingBinaryEncoder to share code with the new BinaryEncoder and be a little simpler.  I don&apos;t intend to change its behavior but it would help to know more about the details of encoding &apos;too large to buffer&apos; array values.&lt;/p&gt;
</comment>
                            <comment id="12992669" author="cutting" created="Wed, 9 Feb 2011 19:12:39 +0000"  >&lt;p&gt;The length of each block in the array is known, but not of the entire array.  Arrays are buffered by block (except in the &quot;overflow&quot; case).&lt;/p&gt;

&lt;p&gt;The byte count of a block is &apos;unknown&apos; when the item count is positive.&lt;/p&gt;

&lt;p&gt;I agree that the &quot;overflow&quot; case is ambiguous and should probably be changed to (-1,-1).  Thiru?&lt;/p&gt;</comment>
                            <comment id="12992830" author="thiru_mg" created="Thu, 10 Feb 2011 01:39:59 +0000"  >&lt;p&gt;We just write (positive) 1 for item-count and no byte-count (line 602 in BlockedBinaryEncoder.java) for overflow blocks. Since the reader is not supposed to expect byte-count when it encounters a positive item-count, it works.&lt;/p&gt;</comment>
                            <comment id="12992852" author="cutting" created="Thu, 10 Feb 2011 03:48:19 +0000"  >&lt;p&gt;Good point, Thiru--overflow doesn&apos;t need to be a special case in the format.&lt;/p&gt;</comment>
                            <comment id="12993158" author="scott_carey" created="Thu, 10 Feb 2011 18:35:45 +0000"  >&lt;p&gt;Thanks Thiru, it is making more sense now.  I&apos;ve gotten BlockingBinaryEncoder integrated with my changes and it shares more code with BinaryEncoder.&lt;/p&gt;

&lt;p&gt;I&apos;m nearly done here, but have found lots of bugs in Avro and our tests as a result.  In most places, we assume that BinaryEncoder does not buffer.  These are bugs because the Encoder contract calls out that it may buffer, and has a flush() method.  JsonEncoder, BlockingBinaryEncoder, and some corner cases of BinaryEncoder do buffer, and there are several bits of code that have an Encoder object that is used without calling flush().&lt;/p&gt;</comment>
                            <comment id="12994159" author="scott_carey" created="Sun, 13 Feb 2011 23:05:57 +0000"  >&lt;p&gt;This patch changes BinaryEncoder for significantly improved performance.  This requires that all users of BinaryEncoder use the Encoder API properly and call flush() as needed.&lt;/p&gt;

&lt;p&gt;This has resulted in 4 BinaryEncoder related classes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;AbstractBinaryEncoder &amp;#8211; defines the common API and has much shared code, mostly low level encoding functions.&lt;/li&gt;
	&lt;li&gt;BinaryEncoder &amp;#8211; a fast encoder that buffers, by default up to 2k.&lt;/li&gt;
	&lt;li&gt;BlockingBinaryEncoder &amp;#8211; a buffering encoder that implements blocking of arrays and maps, extends BinaryEncoder&lt;/li&gt;
	&lt;li&gt;DirectBinaryEncoder &amp;#8211; a light-weight encoder that does not buffer but is about 2.2 times slower than BinaryEncoder.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have implemented an EncoderFactory and deprected Encoder.init(OutputStream) in favor of having the factory or implementations take care of that.  There are some other options for this factory that might better hide abstractions like BlockingBinaryEncoder, but the included one here is the simple.&lt;/p&gt;

&lt;p&gt;The decisions / discussions around this change that I am uncertain of are:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;API Changes and migration: This change makes BinaryEncoder buffer all the time, instead of only sometimes.  All prior uses that did not call flush() were bugs, but they are surely out in the wild.  This variation leaves BinaryEncoder constructable the old way (the constructor is deprecated, but still there) so users might introduce bugs form this change silently.  We could remove the constructor entirely, and force a choice through the factory to solve this instead.&lt;/li&gt;
	&lt;li&gt;Class Heirarchy.  AbstractBinaryEncoder is package protected, and DirectBinaryEncoder does not inherit from BinaryEncoder (to keep it light weight with minimal member variables and overrides).  Another option is to rename BinaryEncodr to BufferedBinaryEncoder, and then change the name of AbstractBinaryEncoder to BinaryEncoder and make it public.  This is probably the best representation of the classes, but means that BinaryEncoder can no longer be constructed.  It could lead to a cleaner Factory as well &amp;#8211; the factory could always return the abstract BinaryEncoder type and thus we could hide more implementation details behind it and not expose the concrete classes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I prefer the cleaner factory and class heirarchy to encapsulate the details.  For exmple, it would allow us to later merge BufferedBinaryEncoder and BlockingBinaryEncoder and not affect any user code.  But it means that right now, we break an API without deprecating it first &amp;#8211; BinaryEncoder would not have public constructors.  A side effect would be that users compile breaks, forcing them to choose the fast buffered, or slower direct implementation.&lt;/p&gt;</comment>
                            <comment id="12994177" author="scott_carey" created="Mon, 14 Feb 2011 00:48:34 +0000"  >&lt;p&gt;Performance results from the above patch.&lt;/p&gt;

&lt;p&gt;I tested with Sun JRE 6u22 (64 bit) on Mac OS X 10.6.6 pm a 2.4 Ghz Intel Core i5 (2 cores, 4 threads, can &apos;turbo&apos; up to 2.93Ghz).&lt;/p&gt;

&lt;p&gt;I used the following JVM arguments:&lt;br/&gt;
-server -Xmx256m -Xms256m -XX:+UseParallelGC  -XX:+UseCompressedOops -XX:+DoEscapeAnalysis -XX:+UseLoopPredicate&lt;/p&gt;

&lt;p&gt;ParallelGC is fast and most common on servers.  CompressedOops is &lt;em&gt;highly&lt;/em&gt; recommended if running 64 bit, it improves performance and reduces memory footprint.&lt;br/&gt;
The last two are default flags in JRE 6u23 and above, but are not in 6u22.  These have measurable impact on the tests.  UseLoopPredicate speeds up a couple cases by 10%.&lt;/p&gt;

&lt;p&gt;A 32 bit JVM slows down somewhat.  In particular, writeLong is about 35% slower, and a few other cases degrade by 15% or so.  Some others (writeDouble, writeFloat) don&apos;t change.  More registers, and 64 bit integer native registers, help some of the inner loops significantly.  I expect non-Intel hardware to behave more like the 64 bit case.&lt;/p&gt;

&lt;p&gt;I ran with the &apos;-noread&apos; command line option of Perf.java&lt;/p&gt;

&lt;p&gt;This is the performance of the legacy encoder:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;old legacy encoder:
                    test name     time    M entries/sec   M bytes/sec  bytes/cycle
                     IntWrite:   3784 ms      52.849       133.036        629325
               SmallLongWrite:   3715 ms      53.828       135.500        629325
                    LongWrite:   6153 ms      32.502       142.013       1092353
                   FloatWrite:   7289 ms      27.437       109.748       1000000
                  DoubleWrite:  13988 ms      14.298       114.383       2000000
                 BooleanWrite:   2150 ms      93.001        93.001        250000
                   BytesWrite:   2588 ms      15.451       549.113       1776937
                  StringWrite:   9656 ms       4.142       147.535       1780910
                   ArrayWrite:   7315 ms      27.340       109.359       1000006
                     MapWrite:   8727 ms      22.916       114.581       1250004
                  RecordWrite:  10204 ms       3.266       126.771       1617069
        ValidatingRecordWrite:  11584 ms       2.877       111.673       1617069
                 GenericWrite:   7522 ms       2.216        85.986        808498
          GenericNested_Write:   9713 ms       1.716        66.588        808498
      GenericNestedFake_Write:   5893 ms       2.828       109.743        808498
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the new BinaryEncoder:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                    test name     time    M entries/sec   M bytes/sec  bytes/cycle
                     IntWrite:   1558 ms     128.342       323.076        629325
               SmallLongWrite:   1495 ms     133.760       336.714        629325
                    LongWrite:   2736 ms      73.083       319.329       1092353
                   FloatWrite:   1286 ms     155.517       622.066       1000000
                  DoubleWrite:   2005 ms      99.742       797.935       2000000
                 BooleanWrite:    597 ms     334.696       334.696        250000
                   BytesWrite:   2491 ms      16.054       570.550       1776937
                  StringWrite:   9050 ms       4.420       157.417       1780910
                   ArrayWrite:   1352 ms     147.852       591.412       1000006
                     MapWrite:   2245 ms      89.054       445.269       1250004
                  RecordWrite:   2418 ms      13.780       534.813       1617069
        ValidatingRecordWrite:   4191 ms       7.952       308.631       1617069
                 GenericWrite:   3477 ms       4.792       185.978        808498
          GenericNested_Write:   5661 ms       2.944       114.249        808498
      GenericNestedFake_Write:   2068 ms       8.057       312.696        808498
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Performance ranges from 2x to 7x faster, except for writing byte arrays and strings, which are only slightly faster.  The test above writes strings and byte arrays that average 35 bytes in size &amp;#8211; smaller ones will benefit more from the buffering, especially with high overhead OutputStreams.&lt;/p&gt;

&lt;p&gt;This is the performance of the new non-buffering variation, DirectBinaryEncoder:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                    test name     time    M entries/sec   M bytes/sec  bytes/cycle
                     IntWrite:   3446 ms      58.023       146.062        629325
               SmallLongWrite:   3491 ms      57.274       144.176        629325
                    LongWrite:   5931 ms      33.716       147.320       1092353
                   FloatWrite:   4337 ms      46.105       184.419       1000000
                  DoubleWrite:   5525 ms      36.194       289.556       2000000
                 BooleanWrite:   1949 ms     102.603       102.603        250000
                   BytesWrite:   2814 ms      14.212       505.091       1776937
                  StringWrite:   9480 ms       4.219       150.285       1780910
                   ArrayWrite:   4437 ms      45.068       180.273       1000006
                     MapWrite:   5803 ms      34.464       172.321       1250004
                  RecordWrite:   5005 ms       6.659       258.446       1617069
        ValidatingRecordWrite:   6519 ms       5.113       198.419       1617069
                 GenericWrite:   4978 ms       3.348       129.920        808498
          GenericNested_Write:   6966 ms       2.392        92.838        808498
      GenericNestedFake_Write:   3507 ms       4.752       184.430        808498
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is between 0x and 2.5x faster than the &apos;legacy&apos; BinaryEncoder, with Float and Double encoding significantly faster and most other things only slightly faster.  It is still substantially slower than the buffering variation.&lt;/p&gt;

&lt;p&gt;Next up: BlockingBinaryEncoder.  This is essentially the same performance as the BinaryEncoder, however it defaults to a larger buffer size (64K instead of 2K) and due to this is slightly faster, except for MapWrite, ArrayWrite, where blocking is in effect.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                    test name     time    M entries/sec   M bytes/sec  bytes/cycle
                     IntWrite:   1512 ms     132.260       332.937        629325
               SmallLongWrite:   1459 ms     137.012       344.902        629325
                    LongWrite:   2640 ms      75.739       330.937       1092353
                   FloatWrite:   1265 ms     158.088       632.352       1000000
                  DoubleWrite:   1999 ms     100.004       800.032       2000000
                 BooleanWrite:    638 ms     313.294       313.294        250000
                   BytesWrite:   2458 ms      16.273       578.305       1776937
                  StringWrite:   9259 ms       4.320       153.862       1780910
                   ArrayWrite:   1443 ms     138.580       554.373       1000098
                     MapWrite:   2589 ms      77.233       386.200       1250119
                  RecordWrite:   3001 ms      11.104       430.964       1617069
        ValidatingRecordWrite:   5829 ms       5.718       221.933       1617069
                 GenericWrite:   3545 ms       4.701       182.450        808498
          GenericNested_Write:   5831 ms       2.858       110.906        808498
      GenericNestedFake_Write:   2052 ms       8.119       315.091        808498
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And for those curious, this is what JSON looks like:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                    test name     time    M entries/sec   M bytes/sec  bytes/cycle
                     IntWrite:  10238 ms      19.534       115.334       1476104
               SmallLongWrite:  10383 ms      19.261       113.722       1476104
                    LongWrite:  18078 ms      11.063       109.950       2484706
                   FloatWrite:  50300 ms       3.976        42.252       2656635
                  DoubleWrite:  96585 ms       2.071        39.894       4816469
                 BooleanWrite:   8940 ms      22.369       123.022       1374900
                   BytesWrite:  40859 ms       0.979        72.197       3687468
                  StringWrite:   9021 ms       4.434       166.411       1876635
                   ArrayWrite:  59728 ms       3.349        54.000       4031647
                     MapWrite:  63564 ms       3.146        55.460       4406637
                  RecordWrite:  63687 ms       0.523        64.246       5114596
        ValidatingRecordWrite:  65488 ms       0.509        62.480       5114596
                 GenericWrite:  34985 ms       0.476        58.478       2557400
          GenericNested_Write:  42137 ms       0.396        58.047       3057392
      GenericNestedFake_Write:  37551 ms       0.444        65.134       3057392
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that included in all of these results (including the legacy result) is improved string &amp;lt;&amp;gt; Utf8 conversion in Utf8.java.  This brings String encoding up from ~120MB/sec to ~160MB/sec.  I noticed that Jackson was faster than our binary encoder for the string test case, and now it is a tie.  There is more to do there, but it is dominated by JVM code that isn&apos;t as optimal as it should be.&lt;/p&gt;</comment>
                            <comment id="12994403" author="cutting" created="Mon, 14 Feb 2011 18:17:33 +0000"  >&lt;p&gt;I also much prefer the cleaner class hierarchy.&lt;/p&gt;

&lt;p&gt;The biggest downside I see of forcing applications to upgrade is that they&apos;re unable to simply drop in newer jar files.  That means that applications that use a library that was developed against Avro 1.4 will not be able to use Avro 1.5 until that library is also upgraded.  But we&apos;ve already made several incompatible API changes in Avro 1.5 so it may be too late to worry about that.&lt;/p&gt;</comment>
                            <comment id="12994420" author="scott_carey" created="Mon, 14 Feb 2011 18:59:05 +0000"  >&lt;p&gt;If we do go with that approach, perhaps it is also time to remove several deprecated methods elsewhere, rather than have that pain hit in 1.6 or later as well.   I&apos;m thinking mostly of other things on the Decoder side.   Perhaps we can look at the Decoder and Encoder side with more scrutiny and label it &quot;stable&quot; after this pass?&lt;/p&gt;

&lt;p&gt;We&apos;re starting to be used in more frameworks, and once that happens API instability will be harder to manage.  Its not too bad for one application to switch, but when we&apos;re brought in via multiple third party paths it becomes a problem.&lt;/p&gt;

&lt;p&gt;I&apos;ll post an alternate patch that rearranges the classes and changes the Factory to hide more abstraction (return the abstract parent type, not the implementation type, where possible).&lt;/p&gt;</comment>
                            <comment id="12994460" author="cutting" created="Mon, 14 Feb 2011 20:05:38 +0000"  >&lt;p&gt;+1 for removing other deprecated stuff now, to establish new baseline encoder/decoder APIs.&lt;/p&gt;</comment>
                            <comment id="12995675" author="scott_carey" created="Thu, 17 Feb 2011 05:46:50 +0000"  >&lt;p&gt;Updated patch, v3:&lt;/p&gt;

&lt;p&gt;Cleaner design, breaks the Encoder API with respect to initialization and configuration of encoders.&lt;/p&gt;

&lt;p&gt;All Encoders have no public constructors, and go through EncoderFactory.&lt;br/&gt;
BinaryEncoder is an abstract type, with three subtypes:&lt;br/&gt;
DirectBinaryEncoder, BufferedBinaryEncoder, and BlockingBinaryEncoder.&lt;/p&gt;

&lt;p&gt;Encoder.init(OutputStream) is removed, all construction and configuration flow thorugh EncoderFactory.  Encoder&apos;s API is strictly about writing Avro primitives.&lt;/p&gt;

&lt;p&gt;Much JavaDoc.&lt;/p&gt;

&lt;p&gt;Intended CHANGES.txt message included.  I think this is ready.&lt;/p&gt;</comment>
                            <comment id="12995981" author="cutting" created="Thu, 17 Feb 2011 19:00:29 +0000"  >&lt;p&gt;Looks good, passes tests.  A few questions:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Should we provide a &apos;public static EncoderFactory get()&apos; method that returns an immutable factory?  There&apos;s lot of &apos;new EncoderFactory().binaryEncoder();&apos; and &apos;private static final EncoderFactor FACTORY = new EncoderFactory();&apos; sprinkled in the code that might use this instead.&lt;/li&gt;
	&lt;li&gt;Should the &apos;protected final&apos; BinaryEncoder methods perhaps be made &apos;public static&apos;?  They might even live on BinaryData instead, as a common place for such static utility methods related to the binary encoding.  I don&apos;t feel too strongly about this, but it seems like these highly optimized routines might also be useful in other contexts.&lt;/li&gt;
	&lt;li&gt;Why does BlockingBinaryEncoder override BufferedBinaryEncoder methods with identical implementations, e.g., writeBoolean(), writeInt(), writeFloat()?  Is this intentional, accidental or did I miss something?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12996102" author="scott_carey" created="Thu, 17 Feb 2011 21:39:07 +0000"  >&lt;ul&gt;
	&lt;li&gt;EncoderFactory.get() :  This would mirror what we have in DecoderFactory, and I had something similar in in a previous version.  I&apos;ll add it back and see how much that cleans up other code.&lt;/li&gt;
	&lt;li&gt;I&apos;ll move them.  BinaryData is a good home for these, and already has a similar &apos;skipLong&apos; method.  Making them a public part of the API makes sense too.&lt;/li&gt;
	&lt;li&gt;Those methods are not quite equal, ensureBounds() is private in each implementation, and tends to a different buffer.  It can&apos;t be made protected, since both have to exist at the same time to manage both buffers.  Another way to state it is that ensureBounds() is an implementation detail, named the same thing in the two classes and similar in function, but not polymorphic.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;ll put together a patch with changes later today.&lt;/p&gt;</comment>
                            <comment id="12996697" author="scott_carey" created="Sat, 19 Feb 2011 04:35:44 +0000"  >&lt;p&gt;patch contains the following changes since the last:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Added EncoderFactory.get() which returns an immutable static factory instance.&lt;/li&gt;
	&lt;li&gt;Moved optimized binary write methods to BinaryData from BinaryEncoder.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12999036" author="cutting" created="Thu, 24 Feb 2011 20:55:06 +0000"  >&lt;p&gt;This looks great!  It does generate several javadoc warnings, but we could commit it and fix those in a subsequent pass.  We should probably improve the package.html for the io package to point folks to EncoderFactory and DecoderFactory as primary entry points.&lt;/p&gt;</comment>
                            <comment id="12999117" author="scott_carey" created="Thu, 24 Feb 2011 23:20:32 +0000"  >&lt;p&gt;If there are no objections, I&apos;ll commit this soon as-is, and treat the javadoc/package.html issues as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-769&quot; title=&quot;Java: Align Decoder/Encoder APIs for consistency and long term stability &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-769&quot;&gt;&lt;del&gt;AVRO-769&lt;/del&gt;&lt;/a&gt;.  The doc needs review as a whole for the entire API anyway, and it will be easier to review as such.&lt;/p&gt;</comment>
                            <comment id="12999130" author="cutting" created="Thu, 24 Feb 2011 23:47:30 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="12999158" author="scott_carey" created="Fri, 25 Feb 2011 00:38:16 +0000"  >&lt;p&gt;Committed in 1074364&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12498821">AVRO-769</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12495966">AVRO-738</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12469906" name="AVRO-753.v1.patch" size="14260" author="scott_carey" created="Tue, 1 Feb 2011 09:14:50 +0000"/>
                            <attachment id="12470967" name="AVRO-753.v2.patch" size="128221" author="scott_carey" created="Sun, 13 Feb 2011 23:05:56 +0000"/>
                            <attachment id="12471250" name="AVRO-753.v3.patch" size="131591" author="scott_carey" created="Thu, 17 Feb 2011 05:46:50 +0000"/>
                            <attachment id="12471455" name="AVRO-753.v4.patch" size="134764" author="scott_carey" created="Sat, 19 Feb 2011 04:35:44 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 1 Feb 2011 18:33:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4146</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10342"><![CDATA[Incompatible change]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 48 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e29b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80128</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>The Encoder API has several resulting changes:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* Construction and configuration is handled by EncoderFactory.  All &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Constructors are hidden, and Encoder.init(OutputStream) is removed.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* Some Encoders previously did not buffer output.  Users must call&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Encoder.flush() to ensure output is written unless the EncoderFactory&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;method used to construct an instance explicitly states that the Encoder&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;does not buffer output. &lt;br/&gt;
</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-754] NettyTransceiver: allow to provide custom ChannelFactory</title>
                <link>https://issues.apache.org/jira/browse/AVRO-754</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The threads created by NettyTransceiver are non-daemon threads. The effect is that in client apps you need to properly call NettyTransceiver.close() or it will hang when done.&lt;/p&gt;

&lt;p&gt;In order to be able to control the kinds of threads (and thread pools) used, the attached patch allows to pass the ChannelFactory via the constructor. Alternatively, I&apos;d also be happy with the ability to pass the ThreadFactory or the ExecutorService, or by making daemon threads the default.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12497321">AVRO-754</key>
            <summary>NettyTransceiver: allow to provide custom ChannelFactory</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bruno">Bruno Dumon</assignee>
                                    <reporter username="bruno">Bruno Dumon</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Feb 2011 12:15:05 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:50 +0000</updated>
                            <resolved>Thu, 24 Feb 2011 22:54:20 +0000</resolved>
                                    <version>1.5.0</version>
                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12999103" author="cutting" created="Thu, 24 Feb 2011 22:54:20 +0000"  >&lt;p&gt;I just committed this.  Thanks, Bruno!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12469922" name="nettytransceiver-custom-channelfactory-patch.txt" size="957" author="bruno" created="Tue, 1 Feb 2011 12:15:59 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 24 Feb 2011 22:54:20 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4209</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 48 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e29j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80129</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-755] Responder.readRequest only has remote schema as argument, not local schema</title>
                <link>https://issues.apache.org/jira/browse/AVRO-755</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;readRequest in Responder only has remote schema as argument. This works fine when local and remote schame are the same. But if remote and local schema are different, but compatible, the readRequest has no access to local schema when creating DatumReader to read the request&lt;/p&gt;</description>
                <environment></environment>
        <key id="12497373">AVRO-755</key>
            <summary>Responder.readRequest only has remote schema as argument, not local schema</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.svg">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="xiaoluye">Xiaolu Ye</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Feb 2011 18:48:45 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:51 +0000</updated>
                            <resolved>Mon, 21 Feb 2011 17:20:45 +0000</resolved>
                                    <version>1.4.1</version>
                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12989364" author="cutting" created="Tue, 1 Feb 2011 20:12:26 +0000"  >&lt;p&gt;Yes, this looks like a bug.  Java&apos;s implementation of message parameters looks like it may have other issues and needs more tests.  I just filed &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-756&quot; title=&quot;Java: need RPC tests that alter protocol parameters between client &amp;amp; server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-756&quot;&gt;&lt;del&gt;AVRO-756&lt;/del&gt;&lt;/a&gt;, which is related.&lt;/p&gt;</comment>
                            <comment id="12996086" author="xiaoluye" created="Thu, 17 Feb 2011 21:18:57 +0000"  >&lt;p&gt;Hi Doug,&lt;/p&gt;

&lt;p&gt;Noticed that neither this one nor &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-756&quot; title=&quot;Java: need RPC tests that alter protocol parameters between client &amp;amp; server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-756&quot;&gt;&lt;del&gt;AVRO-756&lt;/del&gt;&lt;/a&gt; is not marked as blocker for 1.5. Could it be included given this would introduce api change to include local schema? Thanks!&lt;/p&gt;

&lt;p&gt;Xiaolu&lt;/p&gt;</comment>
                            <comment id="12996130" author="cutting" created="Thu, 17 Feb 2011 22:37:54 +0000"  >&lt;p&gt;I doubt many (if any) folks implement their own Responders, so changing this API is unlikely to break anyone, but still, it might be hard to do back-compatibly.&lt;/p&gt;

&lt;p&gt;To fix this, I think we need to:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;add a remote schema parameter to Responder#readRequest()&lt;/li&gt;
	&lt;li&gt;change GenericResponder to use this when reading the request;&lt;/li&gt;
	&lt;li&gt;change SpecificResponder to extend GenericResponder
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;inherit its readRequest implementation&lt;/li&gt;
		&lt;li&gt;in respond(), construct the parameter array from the GenericRecord request&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;add some tests&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12996156" author="cutting" created="Fri, 18 Feb 2011 00:03:29 +0000"  >&lt;p&gt;Here&apos;s a patch that should fix this.  Current tests pass, but we still need a test that alters message parameters.&lt;/p&gt;</comment>
                            <comment id="12996586" author="cutting" created="Fri, 18 Feb 2011 20:17:00 +0000"  >&lt;p&gt;Here&apos;s a version that includes a test.&lt;/p&gt;</comment>
                            <comment id="12996671" author="cutting" created="Sat, 19 Feb 2011 00:33:36 +0000"  >&lt;p&gt;I&apos;ll commit this soon unless someone objects.&lt;/p&gt;</comment>
                            <comment id="12997120" author="scott_carey" created="Sun, 20 Feb 2011 10:00:52 +0000"  >&lt;p&gt;Looks good on a quick review.  I only have basic knowledge on the Protocol side of things though.&lt;/p&gt;</comment>
                            <comment id="12997477" author="cutting" created="Mon, 21 Feb 2011 17:20:45 +0000"  >&lt;p&gt;I committed this.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12497376">AVRO-756</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12471438" name="AVRO-755.patch" size="10851" author="cutting" created="Fri, 18 Feb 2011 20:17:00 +0000"/>
                            <attachment id="12471346" name="AVRO-755.patch" size="8237" author="cutting" created="Fri, 18 Feb 2011 00:03:29 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 1 Feb 2011 20:12:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4147</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 49 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e29r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80130</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-756] Java: need RPC tests that alter protocol parameters between client &amp; server</title>
                <link>https://issues.apache.org/jira/browse/AVRO-756</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;We need RPC tests that:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;have client and server use different protocols that:
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;add a parameter to a message&lt;/li&gt;
		&lt;li&gt;remove a parameter from a message&lt;/li&gt;
		&lt;li&gt;change the type of a parameter&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;run with each of generic, specific and reflect as both client &amp;amp; server&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12497376">AVRO-756</key>
            <summary>Java: need RPC tests that alter protocol parameters between client &amp; server</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Feb 2011 19:46:24 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:48 +0000</updated>
                            <resolved>Mon, 21 Feb 2011 17:22:05 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12989362" author="cutting" created="Tue, 1 Feb 2011 20:09:07 +0000"  >&lt;p&gt;The simplest way to test adding and removing parameters might be:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;create a protocol that modifies the Simple protocol currently used in RPC tests, adding and removing a parameter.  For example, the hello(string) method might be changed to hello(string,string) and  add(int,int) might be changed to add(int).  In both cases a default value might be specified.&lt;/li&gt;
	&lt;li&gt;implement a generic client for the new protocol
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;test this against each of the existing generic, specific and reflect servers&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;implement a generic server for the new protocol
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;test this against each of the existing generic, specific and reflect clients&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12997478" author="cutting" created="Mon, 21 Feb 2011 17:22:05 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-755&quot; title=&quot;Responder.readRequest only has remote schema as argument, not local schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-755&quot;&gt;&lt;del&gt;AVRO-755&lt;/del&gt;&lt;/a&gt; added a test with a varied parameter list.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12497373">AVRO-755</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4176</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 49 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e29z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80131</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-757] Allow a DataFile to be reopened without reading the head</title>
                <link>https://issues.apache.org/jira/browse/AVRO-757</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;It is useful to be able to re-open a file without needing to seek to the head of the stream to collect metadata and schema that you&apos;ve read before.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12497660">AVRO-757</key>
            <summary>Allow a DataFile to be reopened without reading the head</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stuhood">Stu Hood</assignee>
                                    <reporter username="stuhood">Stu Hood</reporter>
                        <labels>
                            <label>file</label>
                    </labels>
                <created>Fri, 4 Feb 2011 09:32:23 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:53 +0000</updated>
                            <resolved>Mon, 7 Feb 2011 21:21:32 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12990680" author="cutting" created="Fri, 4 Feb 2011 19:05:51 +0000"  >&lt;p&gt;This sounds reasonable.&lt;/p&gt;

&lt;p&gt;The specification includes a schema that corresponds to the file header.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://avro.apache.org/docs/current/spec.html#Object+Container+Files&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/docs/current/spec.html#Object+Container+Files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perhaps we should implement this by adding the following methods to DataFileReader:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public Header getHeader();&lt;/li&gt;
	&lt;li&gt;public static FileReader&amp;lt;D&amp;gt; openReader(SeekableInput in, DatumReader&amp;lt;D&amp;gt;, Header);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The openReader() implementation should probably call sync(in.tell()), although there might be cases where you want it to instead just call seek(in.tell()).  Perhaps there should be a boolean &apos;sync&apos; parameter to that method that defaults to true?&lt;/p&gt;</comment>
                            <comment id="12990718" author="stuhood" created="Fri, 4 Feb 2011 20:10:36 +0000"  >&lt;p&gt;&amp;gt; Perhaps we should implement this by adding the following methods to DataFileReader:&lt;br/&gt;
This is almost exactly what I prototyped last night: I&apos;ll post a patch over the weekend.&lt;/p&gt;

&lt;p&gt;&amp;gt; ...Perhaps there should be a boolean &apos;sync&apos; parameter to that method that defaults to true?&lt;br/&gt;
I was going to take a much lazier approach that assumed that the next step after reopening was to call seek or sync, but I think you are right that we need to be in some known position.&lt;/p&gt;</comment>
                            <comment id="12990844" author="cutting" created="Sat, 5 Feb 2011 00:14:45 +0000"  >&lt;p&gt;Overall this looks good.  Some quick comments:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the Handle fields should not be public, but private, perhaps with accessor methods.&lt;/li&gt;
	&lt;li&gt;the Handle constructor should be private or package-private, not protected, since it should not appear in javadoc.&lt;/li&gt;
	&lt;li&gt;can we call it a Header instead of a Handle, to be consistent with the spec?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12990877" author="stuhood" created="Sat, 5 Feb 2011 02:04:03 +0000"  >&lt;p&gt;&amp;gt; the Handle fields should not be public, but private, perhaps with accessor methods.&lt;br/&gt;
They are currently package protected... I don&apos;t think we can do any better than that though, because there are other members of the package that need access.&lt;/p&gt;

&lt;p&gt;I can add accessors that are also package protected?&lt;/p&gt;

&lt;p&gt;&amp;gt; the Handle constructor should be private or package-private, not protected, since it&lt;br/&gt;
&amp;gt; should not appear in javadoc.&lt;br/&gt;
Done.&lt;/p&gt;

&lt;p&gt;&amp;gt; can we call it a Header instead of a Handle, to be consistent with the spec?&lt;br/&gt;
Done.&lt;/p&gt;

&lt;p&gt;Thanks Doug!&lt;/p&gt;</comment>
                            <comment id="12991532" author="cutting" created="Mon, 7 Feb 2011 19:30:36 +0000"  >&lt;p&gt;Here&apos;s a new version of the patch with some mostly cosmetic changes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;combines the two patch files into a single patch&lt;/li&gt;
	&lt;li&gt;fixes a few places where changed lines exceeded 80-columns&lt;/li&gt;
	&lt;li&gt;adds a javadoc comment to a protected method&lt;/li&gt;
	&lt;li&gt;adds a transient declaration to &apos;metaKeyList&apos; and a few &apos;private&apos; declarations, where feasible.&lt;/li&gt;
	&lt;li&gt;moved the Header definition to the front of the file&lt;/li&gt;
	&lt;li&gt;fixed minor pre-existing whitespace and javadoc issue&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Barring objections, I will commit this version soon.&lt;/p&gt;</comment>
                            <comment id="12991595" author="scott_carey" created="Mon, 7 Feb 2011 20:51:50 +0000"  >&lt;p&gt;+1, tests run and pass for me, code looks good.&lt;/p&gt;</comment>
                            <comment id="12991617" author="cutting" created="Mon, 7 Feb 2011 21:21:32 +0000"  >&lt;p&gt;I committed this.  Thanks, Stu!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12444767">CASSANDRA-674</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12470331" name="0001-Move-header-state-into-a-Header-object.txt" size="7383" author="stuhood" created="Sat, 5 Feb 2011 02:04:03 +0000"/>
                            <attachment id="12470332" name="0002-Expose-Header-for-use-in-DataFileReader-and-test-usage.txt" size="4464" author="stuhood" created="Sat, 5 Feb 2011 02:04:03 +0000"/>
                            <attachment id="12470488" name="AVRO-757.patch" size="9895" author="cutting" created="Mon, 7 Feb 2011 19:30:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 4 Feb 2011 19:05:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4166</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 50 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2a7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80132</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Allow a DataFileReader to be reopened at an arbitrary position.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-758] avro-tools jar contains log4j config</title>
                <link>https://issues.apache.org/jira/browse/AVRO-758</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The avro-tools jar generated on trunk contains a log4j config that can override the defaults of projects that include it.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12497727">AVRO-758</key>
            <summary>avro-tools jar contains log4j config</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="stuhood">Stu Hood</reporter>
                        <labels>
                    </labels>
                <created>Sat, 5 Feb 2011 00:04:17 +0000</created>
                <updated>Wed, 6 Jul 2011 00:56:22 +0000</updated>
                            <resolved>Wed, 6 Jul 2011 00:55:56 +0000</resolved>
                                    <version>1.5.0</version>
                                    <fixVersion>1.6.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12992217" author="stuhood" created="Tue, 8 Feb 2011 22:44:07 +0000"  >&lt;p&gt;Actually, removing the log4j.properties has not fixed the problem: it looks like including SLF4J in the tools jar is the culprit.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/Users/stuhood/src/cassandra/working/lib/avro-tools-1.5.0-SNAPSHOT~r1068142+AVRO-757.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/Users/stuhood/src/cassandra/working/lib/slf4j-log4j12-1.6.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12992234" author="scott_carey" created="Tue, 8 Feb 2011 23:35:30 +0000"  >&lt;p&gt;Since the tools jar is intended to run stand-alone, it has to have an slf4j binding in it.  &lt;/p&gt;

&lt;p&gt;If you intend to use avro in a project, you&apos;ll want to include the component avro jars depending on what features you need.  This way you can control the dependencies and anything common that might collide like slf4j.  The tools-jar isn&apos;t going to work in the classpath of most projects, since it has all of the dependencies inside of it.&lt;/p&gt;

&lt;p&gt;The slf4j-log4j12-1.6.1.jar in your classpath is not from avro, and may not be compatible with Avro&apos;s 1.5.x slf4j.  Usually slf4j happily functions with only a warning when you have multiple jars, but I haven&apos;t tried mixing 1.5.x and 1.6.x.&lt;/p&gt;

&lt;p&gt;We definitely should get rid of the junk that hadoop-jar is pulling into toolsjar:  log4j.properties, its shell scripts, and other stuff.&lt;/p&gt;</comment>
                            <comment id="12992312" author="stuhood" created="Wed, 9 Feb 2011 03:07:47 +0000"  >&lt;p&gt;&amp;gt; If you intend to use avro in a project, you&apos;ll want to include&lt;br/&gt;
&amp;gt; the component avro jars depending on what features you need.&lt;br/&gt;
It appears that the compiler jar has a dependency on the tools jar: this is why we needed to pull them both in. I can probably subdivide our classpath to include the tools jar only at compile time, but this is suboptimal.&lt;/p&gt;

&lt;p&gt;&amp;gt; The slf4j-log4j12-1.6.1.jar in your classpath is not from avro&lt;br/&gt;
Correct: the Cassandra project is using slf4j for its logging, so adding the Avro tools jar gave this warning, and resulted in our runtime log settings being ignored.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Whether the tools jar needs to be split a bit more so that the compiler jar doesn&apos;t depend on it, or whether we can remove the embedded slf4j dependency is my question.&lt;/p&gt;

&lt;p&gt;Also, I might have just run the wrong mvn target: I assume when Avro goes into the maven repos, it isn&apos;t in this super-jar form. &lt;/p&gt;</comment>
                            <comment id="12992317" author="stuhood" created="Wed, 9 Feb 2011 03:26:12 +0000"  >&lt;p&gt;Re-reading your comment, it sounds like tools.jar should always contain all of its dependencies, so I didn&apos;t run the wrong target.&lt;/p&gt;

&lt;p&gt;Perhaps the compile vs run classpaths will be the way to go.&lt;/p&gt;</comment>
                            <comment id="12992439" author="h2o" created="Wed, 9 Feb 2011 11:21:42 +0000"  >&lt;p&gt;Stu, the compiler module definitely does not depend on tools. Any chance you are looking at an old svn rev?&lt;/p&gt;</comment>
                            <comment id="12992444" author="stuhood" created="Wed, 9 Feb 2011 11:35:32 +0000"  >&lt;p&gt;Without the tools jar I see the following failure:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;avro-interface-generate-hadoop:
     [echo] Generating Avro hadoop code...
    [mkdir] Created dir: /Users/stuhood/src/cassandra/working/src/gen-java/org/apache/cassandra/hadoop
     [java] Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/apache/avro/tool/Main
     [java] Caused by: java.lang.ClassNotFoundException: org.apache.avro.tool.Main
     [java]     at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
     [java]     at java.security.AccessController.doPrivileged(Native Method)
     [java]     at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
     [java]     at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
     [java]     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
     [java]     at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
     [java] Java Result: 1

avro-interface-generate-internode:
     [echo] Generating Avro internode code...
     [java] Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/apache/avro/tool/Main
     [java] Caused by: java.lang.ClassNotFoundException: org.apache.avro.tool.Main
     [java]     at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
     [java]     at java.security.AccessController.doPrivileged(Native Method)
     [java]     at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
     [java]     at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
     [java]     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
     [java]     at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
     [java] Java Result: 1&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12992446" author="stuhood" created="Wed, 9 Feb 2011 11:38:29 +0000"  >&lt;p&gt;This is with SVN r1068142&lt;/p&gt;</comment>
                            <comment id="12992623" author="scott_carey" created="Wed, 9 Feb 2011 18:00:34 +0000"  >&lt;p&gt;Yes, the Main method and all the Tool classes are only in the tools.jar.  Is your project calling those directly?  Or executing the tools stand-alone?&lt;/p&gt;

&lt;p&gt;The intention of avro-tools.jar is to provide command-line utilities and use it like &quot;java -jar avro-tools.jar&quot;.  Everything it does is accessible via public API&apos;s in other projects &amp;#8211; for example compiling schemas/protocols.  &lt;/p&gt;


&lt;p&gt;We could add &apos;avro-tools-nodeps.jar&apos; for users who want to access org/apache/avro/tool/Main.java from code inside another project.&lt;/p&gt;

&lt;p&gt;Can you describe your use case in more detail Stu?&lt;/p&gt;
</comment>
                            <comment id="12992680" author="stuhood" created="Wed, 9 Feb 2011 19:39:22 +0000"  >&lt;p&gt;Ah, you&apos;re right... I missed a step. We&apos;re calling org.apache.avro.tool.Main in order to generate a JSON protocol from an IDL file, then we&apos;re calling the compiler via the ant task: org.apache.avro.specific.ProtocolTask. See lines 245 through 300 here (but ignore the reference to Hadoop, which is for our Hadoop integration, rather than Avro&apos;s): &lt;a href=&quot;https://github.com/apache/cassandra/blob/trunk/build.xml#L245&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/cassandra/blob/trunk/build.xml#L245&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12992695" author="cutting" created="Wed, 9 Feb 2011 20:06:00 +0000"  >&lt;p&gt;Sounds to me like we should add an Ant task that converts an .avdl file to a .avpr file.  Then you wouldn&apos;t need to use the command-line tool here.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-572&quot; title=&quot;Create a Maven plugin goal and Ant task to generate an avpr file from a avdl file&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-572&quot;&gt;AVRO-572&lt;/a&gt; is related too, for Maven users.&lt;/p&gt;</comment>
                            <comment id="12997121" author="scott_carey" created="Sun, 20 Feb 2011 10:07:46 +0000"  >&lt;p&gt;We need to make the classes in the tools module available outside of the shaded jar.  I ran into another case where that was necessary when experimenting with the thrift-protobuf comapre benchmark with Avro 1.5.0.  They&apos;re using make, and calling the main method to compile.  Using the whole tools jar steps on the jackson stuff in the classpath. &lt;/p&gt;</comment>
                            <comment id="13058033" author="cutting" created="Thu, 30 Jun 2011 19:41:37 +0000"  >&lt;p&gt;Was this fixed by &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-791&quot; title=&quot;Split avro-tools jar in 1.5.0 to one contains avro tool classes and one contains external dependencies&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-791&quot;&gt;&lt;del&gt;AVRO-791&lt;/del&gt;&lt;/a&gt;, which provides the tool classes without bundled dependencies?&lt;/p&gt;</comment>
                            <comment id="13058063" author="scott_carey" created="Thu, 30 Jun 2011 20:40:49 +0000"  >&lt;p&gt;There were two issues as I understand it:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;We needed the avro-tools-nodeps.jar for those that want to use the main methods there without all the bundled dependencies.&lt;/li&gt;
	&lt;li&gt;Either we need an ant/maven task/plugin for compiling avdl --&amp;gt; avpr, or users need to use the ant/maven/API that takes avdl --&amp;gt; Java class.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13058764" author="cutting" created="Fri, 1 Jul 2011 20:16:09 +0000"  >&lt;p&gt;We now have the -nodeps jar.  Should we add a new issue for the Ant &amp;amp; Maven IDL tasks?&lt;/p&gt;

&lt;p&gt;I don&apos;t think this should block 1.5.2.&lt;/p&gt;</comment>
                            <comment id="13060174" author="scott_carey" created="Tue, 5 Jul 2011 22:38:01 +0000"  >&lt;p&gt;Looks like we already have a ticket for the avdl --&amp;gt; avpr maven task:  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-572&quot; title=&quot;Create a Maven plugin goal and Ant task to generate an avpr file from a avdl file&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-572&quot;&gt;AVRO-572&lt;/a&gt;&lt;br/&gt;
Perhaps we should expand that one to include ant tasks and close this one?&lt;/p&gt;</comment>
                            <comment id="13060185" author="cutting" created="Tue, 5 Jul 2011 23:07:23 +0000"  >&lt;p&gt;+1 That sounds like a good plan to me.&lt;/p&gt;</comment>
                            <comment id="13060224" author="scott_carey" created="Wed, 6 Jul 2011 00:55:56 +0000"  >&lt;p&gt;The problems identified in this ticket are covered in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-572&quot; title=&quot;Create a Maven plugin goal and Ant task to generate an avpr file from a avdl file&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-572&quot;&gt;AVRO-572&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-791&quot; title=&quot;Split avro-tools jar in 1.5.0 to one contains avro tool classes and one contains external dependencies&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-791&quot;&gt;&lt;del&gt;AVRO-791&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12466614">AVRO-572</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12502892">AVRO-791</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 8 Feb 2011 23:35:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>69094</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 29 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2af:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80133</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
