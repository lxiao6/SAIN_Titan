<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:18:28 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2013-3-20+AND+created+%3C%3D+2013-3-27+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="9" total="9"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1276] Support previousSync() call on DataFileWriter as it exists in DataFileReader</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1276</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The previousSync() call on DataFileReader is useful for building catalogs of where Avro files live within their containers.  In combination with tracking an ordinal offset for where each record lives relative to a synchronization point, random access can be achieved on large data-sets stored in Avro.&lt;/p&gt;

&lt;p&gt;For operations where construction of such a catalog is useful during the write phase of data processing, support for querying the DataFileWriter for the same information would allow for catalog construction without re-reading the written data or major workarounds to get this information out of a subclass.&lt;/p&gt;

&lt;p&gt;I plan to submit patches for this in the near future.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12638066">AVRO-1276</key>
            <summary>Support previousSync() call on DataFileWriter as it exists in DataFileReader</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="matthewcmead">matt mead</assignee>
                                    <reporter username="matthewcmead">matt mead</reporter>
                        <labels>
                    </labels>
                <created>Wed, 20 Mar 2013 19:54:59 +0000</created>
                <updated>Wed, 20 Mar 2013 19:54:59 +0000</updated>
                                            <version>1.7.4</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                    <timeoriginalestimate seconds="7200">2h</timeoriginalestimate>
                            <timeestimate seconds="7200">2h</timeestimate>
                                                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>318544</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 44 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1iypr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>318885</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1277] Improve performance of reflection-based serializers</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1277</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I&apos;ve played a bit with Avro serialization based on reflection, i.e. with the classes from org.apache.avro.generic package.&lt;/p&gt;

&lt;p&gt;It works fine in this mode, but is rather slow compared to such frameworks like protostuff or kryo.&lt;/p&gt;

&lt;p&gt;Quick look at the source code has shown that a lot of reflection-based operations and class lookups are not cached. And such operations are usually pretty expensive when executed by a JVM. &lt;/p&gt;

&lt;p&gt;So I changed some of org.apache.avro.generic classes, introduced caching and a few other optimizations. Now it seems to perform much better.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12638314">AVRO-1277</key>
            <summary>Improve performance of reflection-based serializers</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="romixlev">Leo Romanoff</reporter>
                        <labels>
                    </labels>
                <created>Thu, 21 Mar 2013 16:51:19 +0000</created>
                <updated>Tue, 23 Apr 2013 16:42:43 +0000</updated>
                            <resolved>Tue, 23 Apr 2013 16:42:43 +0000</resolved>
                                    <version>1.7.4</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13609145" author="cutting" created="Thu, 21 Mar 2013 17:19:05 +0000"  >&lt;p&gt;This may be related to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1268&quot; title=&quot;Add java-class, java-key-class and java-element-class support for stringable types to SpecificData&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1268&quot;&gt;&lt;del&gt;AVRO-1268&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13609175" author="romixlev" created="Thu, 21 Mar 2013 17:41:54 +0000"  >&lt;p&gt;I attach a first version of my patch. It is just to explain the idea. Formatting and other issues can be solved later.&lt;/p&gt;

&lt;p&gt;What this patch does:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It caches using thread-local cache classes that were looked up before&lt;/li&gt;
	&lt;li&gt;It caches using thread-local cache fields of classes that were determined before using reflection&lt;/li&gt;
	&lt;li&gt;It provides a more efficient way to work with arrays of primitive types, because working with arrays using reflection is quite slow&lt;/li&gt;
	&lt;li&gt;It adds support for Character fields in Java classes, because it was not supported for some reason. It has nothing to do with reflection &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I just needed it and added support in a way similar to how &quot;short&quot; class is handled. This change touches the same classes that reflection changes though. If you don&apos;t like it or want it to be a separate patch, I could submit it separately later&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;-Leo&lt;/p&gt;</comment>
                            <comment id="13609179" author="romixlev" created="Thu, 21 Mar 2013 17:44:24 +0000"  >&lt;p&gt;Patch for improving performance of reflection-based serializers&lt;/p&gt;</comment>
                            <comment id="13609201" author="h2o" created="Thu, 21 Mar 2013 17:55:42 +0000"  >&lt;p&gt;This will successfully leak classes, classloaders, keep threads alive and prevent web apps from undeploying properly.&lt;/p&gt;</comment>
                            <comment id="13609207" author="cutting" created="Thu, 21 Mar 2013 17:58:15 +0000"  >&lt;p&gt;This looks like great stuff!  Some comments:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Can you please add some test cases to Perf.java that illustrate the performance improvement?  We shouldn&apos;t make optimizations without benchmarks.&lt;/li&gt;
	&lt;li&gt;In readArray(), you might move the test for whether an Accessor is applicable to the start of the method, and, when it&apos;s not, simply call super.readArray().  That would also tighten the inner loop a bit.&lt;/li&gt;
	&lt;li&gt;Just remove the old FIELD_CACHE code, rather than commenting it out.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13609229" author="cutting" created="Thu, 21 Mar 2013 18:06:36 +0000"  >&lt;p&gt;Holger, such problems can be avoided by making the caches non-static and/or weak.  We should benchmark various options and try to find a good combination of performance without memory leaks.&lt;/p&gt;</comment>
                            <comment id="13609281" author="romixlev" created="Thu, 21 Mar 2013 18:34:37 +0000"  >&lt;p&gt;@Doug: &lt;br/&gt;
1) If I add a test to Perf.java, I cannot directly compare it to the unoptimized reflection-based approach, as I changed it, or? Of course, one can try then this Perf test with the old and with the new patched version and compare results. Is it what you mean?&lt;/p&gt;

&lt;p&gt;2) I&apos;m not sure I can move Accessor check to the start, as it currently happens after the array object is created. And at the start of the method I don&apos;t have the array object yet. More over, if I&apos;d call super.readArray() it would create this array on its own. But may be there is a way to check the type of array elements without creating it?&lt;/p&gt;

&lt;p&gt;3) Done &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;@Holger: Yes, there is a potential for leaks. But quick grep on Avro sources shows that it is not the only use of ThreadLocal. In addition to what Doug said, I can also think of caches which clean-up themselves after a certain timeout or period of inactivity. &lt;/p&gt;</comment>
                            <comment id="13609293" author="cutting" created="Thu, 21 Mar 2013 18:46:56 +0000"  >&lt;ol&gt;
	&lt;li&gt;Yes, the standard approach is to run tests from Perf.java with and without a patch.&lt;/li&gt;
	&lt;li&gt;You&apos;re right.  Maybe we just need to live with the replicated logic here.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13609297" author="romixlev" created="Thu, 21 Mar 2013 18:49:53 +0000"  >&lt;p&gt;BTW, regarding the use of ThreadLocals:&lt;br/&gt;
I think the issue is related to the current design of Avro. Serializers/Deserializers are supposed to be thread-safe as far as I understand. At the same time, there is no &quot;context&quot; object being passed through all the calls when performing serialization and deserialization. Hence you need to store the context somewhere, e.g. in the ThreadLocal variables. Is it correct understanding?&lt;/p&gt;

&lt;p&gt;Some other frameworks, e.g. Kryo, take a different approach: They pass the Kryo instance through all the calls (i.e. Kryo is the context object) and they do not try to be thread-safe, i.e. you cannot use the same Kryo instance by multiple threads simultaneously. As a result, there are no ThreadLocals used by Kryo (and therefore no problems related to that) and its performance is significantly faster in most cases.&lt;/p&gt;</comment>
                            <comment id="13609326" author="cutting" created="Thu, 21 Mar 2013 19:12:12 +0000"  >&lt;p&gt;The ReflectDatumReader is a context here.  The caches could be kept there instead of ReflectData, whose instances may be shared by multiple threads.&lt;/p&gt;</comment>
                            <comment id="13610338" author="romixlev" created="Fri, 22 Mar 2013 14:40:41 +0000"  >&lt;p&gt;This is an updated patch, containing Perf.java tests for improved reflection-based serialization.&lt;/p&gt;</comment>
                            <comment id="13610342" author="romixlev" created="Fri, 22 Mar 2013 14:46:12 +0000"  >&lt;p&gt;The updated version of the patch has some perf. tests. And they are looking quite good. &lt;br/&gt;
This is what I get with the vanilla Avro:&lt;br/&gt;
Executing tests: &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ReflectArrayTest, ReflectSmallFloatArrayTest, ReflectMediumFloatArrayTest&amp;#93;&lt;/span&gt;&lt;br/&gt;
 readTests:true&lt;br/&gt;
 writeTests:true&lt;br/&gt;
 cycles=800&lt;br/&gt;
                    test name     time    M entries/sec   M bytes/sec  bytes/cycle&lt;br/&gt;
             ReflectArrayRead:  26948 ms       7,421        29,686       1000006&lt;br/&gt;
            ReflectArrayWrite:  24391 ms       8,200        32,799       1000006&lt;br/&gt;
   ReflectSmallFloatArrayRead:  68081 ms       2,938        13,220       1125004&lt;br/&gt;
  ReflectSmallFloatArrayWrite:  38192 ms       5,237        23,565       1125004&lt;br/&gt;
  ReflectMediumFloatArrayRead:  25759 ms       7,764        31,368       1010003&lt;br/&gt;
 ReflectMediumFloatArrayWrite:  25045 ms       7,986        32,262       1010003&lt;/p&gt;

&lt;p&gt;And this is what I get with my patch applied:&lt;br/&gt;
Executing tests: &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ReflectArrayTest, ReflectSmallFloatArrayTest, ReflectMediumFloatArrayTest&amp;#93;&lt;/span&gt;&lt;br/&gt;
 readTests:true&lt;br/&gt;
 writeTests:true&lt;br/&gt;
 cycles=800&lt;br/&gt;
                    test name     time    M entries/sec   M bytes/sec  bytes/cycle&lt;br/&gt;
             ReflectArrayRead:  25050 ms       7,984        31,936       1000006&lt;br/&gt;
            ReflectArrayWrite:  20039 ms       9,980        39,921       1000006&lt;br/&gt;
   ReflectSmallFloatArrayRead:  28119 ms       7,113        32,007       1125004&lt;br/&gt;
  ReflectSmallFloatArrayWrite:  16043 ms      12,466        56,096       1125004&lt;br/&gt;
  ReflectMediumFloatArrayRead:   9153 ms      21,851        88,276       1010003&lt;br/&gt;
 ReflectMediumFloatArrayWrite:   4715 ms      42,416       171,361       1010003&lt;/p&gt;

&lt;p&gt;As you can see, the patch improves performance overall and gives real boost for objects containing arrays of primitive types.&lt;/p&gt;

&lt;p&gt;Future ideas: According to the profiler, a lot of time is spent in java.lang.reflect.Field.get/set methods. They are very slow. To get the ultimate speed, one could use java.misc.Unsafe-based approach to access fields. The drawback is that it would make the source dependent on Sun/Oracle/IBM JVM, because other JVMs do not implement Unsafe. So, such a feature should be optional, if it is included, so that people e.g. using Android could disable it. &lt;/p&gt;</comment>
                            <comment id="13610409" author="cutting" created="Fri, 22 Mar 2013 15:57:48 +0000"  >&lt;p&gt;Thanks for benchmarking this.  The improvements look significant and we should incorporate them.&lt;/p&gt;

&lt;p&gt;I doubt the caches need to be static, they could instead be per ReflectData instance without significantly harming performance.  Folks currently use ReflectData.get() to access a static instance, but I suspect performance would not be much worse if ReflectData.get() allocated a new ReflectData instance.  For example, ReflectDatumReader(Class) already allocates a new ReflectData instance.  The cost of allocating this and its caches per the lifetime of a DatumReader or DatumWriter is minimal.&lt;/p&gt;

&lt;p&gt;So, to address Holger&apos;s concerns, if the performance is no worse, I&apos;d argue we should:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;change all caches in ReflectData, SpecificData &amp;amp; GenericData to be non-static, non-thread safe&lt;/li&gt;
	&lt;li&gt;change ReflectData.get() etc. to allocate new instances.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These might be done in a separate, follow-up issue.  For now, the new caches should be non-static.&lt;/p&gt;

&lt;p&gt;Using Unsafe when on a JVM that supports it is a great idea.  Would you like to file a Jira for that?&lt;/p&gt;</comment>
                            <comment id="13610609" author="h2o" created="Fri, 22 Mar 2013 16:21:07 +0000"  >&lt;p&gt;Doug, thanks for addressing my concerns. I agree that making a client responsible for managing ReflectData instances and passing them into any created readers/writers fixes practically every possible lifecycle issue, so +1. Also getting rid of the static instance is useful for other purposes (less leaks in testing etc.) so +1 on all of that. Thanks!&lt;/p&gt;</comment>
                            <comment id="13610649" author="romixlev" created="Fri, 22 Mar 2013 16:24:06 +0000"  >&lt;p&gt;Regarding static vs non-static caches:&lt;br/&gt;
Should I still do something in scope of this issue or should I file a separate one?&lt;/p&gt;

&lt;p&gt;&amp;gt; Using Unsafe when on a JVM that supports it is a great idea. Would you like to file a Jira for that?&lt;/p&gt;

&lt;p&gt;Sure, I can do that. In fact I did the same optimization for Kryo already and performance boost quite significant there. An even bigger performance boost can be obtained if you use Unsafe-based Input/Output streams. For more info, please have a look at these two links:&lt;br/&gt;
&lt;a href=&quot;http://code.google.com/p/kryo/issues/detail?id=75&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://code.google.com/p/kryo/issues/detail?id=75&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://groups.google.com/forum/?fromgroups=#!topic/kryo-users/o_vQsEBVPeU&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://groups.google.com/forum/?fromgroups=#!topic/kryo-users/o_vQsEBVPeU&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks like improving performance of serialization frameworks is slowly becoming my hobby. I did it already for Kryo, protostuff-runtime, JDBM3/MapDB and now do it for Avro &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; And Hazelcast is in the waiting queue ...&lt;/p&gt;
</comment>
                            <comment id="13610753" author="h2o" created="Fri, 22 Mar 2013 16:32:35 +0000"  >&lt;p&gt;Adding support for Unsafe is great and can indeed provide huge speedups (by factors!), but it&apos;s fiddly. For a good example that degrades as gracefully as possible see e.g. &lt;a href=&quot;http://code.google.com/p/guava-libraries/source/browse/guava/src/com/google/common/cache/Striped64.java#317&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://code.google.com/p/guava-libraries/source/browse/guava/src/com/google/common/cache/Striped64.java#317&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13610932" author="romixlev" created="Fri, 22 Mar 2013 16:58:20 +0000"  >&lt;p&gt;I created an issue for Unsafe-based serialization:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1282&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1282&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&apos;s move related discussions to that issue.&lt;/p&gt;</comment>
                            <comment id="13610985" author="cutting" created="Fri, 22 Mar 2013 17:51:15 +0000"  >&lt;p&gt;Re static caches: this should probably be addressed in a separate issue.&lt;/p&gt;</comment>
                            <comment id="13611408" author="cutting" created="Fri, 22 Mar 2013 23:14:16 +0000"  >&lt;p&gt;I just filed &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1283&quot; title=&quot;remove static caches from GenericData, SpecificData and ReflectData&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1283&quot;&gt;AVRO-1283&lt;/a&gt;, to remove the static, thread-safe caches.&lt;/p&gt;</comment>
                            <comment id="13638387" author="cutting" created="Mon, 22 Apr 2013 20:08:37 +0000"  >&lt;p&gt;Is this issue now fully subsumed by &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1282&quot; title=&quot;Make use of the sun.misc.Unsafe class during serialization if a JDK supports it&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1282&quot;&gt;&lt;del&gt;AVRO-1282&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="13638795" author="romixlev" created="Tue, 23 Apr 2013 05:24:06 +0000"  >&lt;p&gt;Yes, &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1282&quot; title=&quot;Make use of the sun.misc.Unsafe class during serialization if a JDK supports it&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1282&quot;&gt;&lt;del&gt;AVRO-1282&lt;/del&gt;&lt;/a&gt; includes all changes from this one as well.&lt;br/&gt;
Keep in mind, that &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1283&quot; title=&quot;remove static caches from GenericData, SpecificData and ReflectData&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1283&quot;&gt;AVRO-1283&lt;/a&gt; is not fixed/addressed in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1282&quot; title=&quot;Make use of the sun.misc.Unsafe class during serialization if a JDK supports it&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1282&quot;&gt;&lt;del&gt;AVRO-1282&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12638613">AVRO-1283</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12634703">AVRO-1268</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310051">
                    <name>Supercedes</name>
                                                                <inwardlinks description="is superceded by">
                                        <issuelink>
            <issuekey id="12638536">AVRO-1282</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12575017" name="AVRO-1277-v2.patch" size="18178" author="romixlev" created="Fri, 22 Mar 2013 14:40:41 +0000"/>
                            <attachment id="12574839" name="AVRO-1277.patch" size="9634" author="romixlev" created="Thu, 21 Mar 2013 17:44:24 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 21 Mar 2013 17:19:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>318790</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 39 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1j08f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>319131</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1278] Avro-C: Error parsing schema with fixed field default value</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1278</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description></description>
                <environment></environment>
        <key id="12638343">AVRO-1278</key>
            <summary>Avro-C: Error parsing schema with fixed field default value</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="cwsteinbach">Carl Steinbach</reporter>
                        <labels>
                    </labels>
                <created>Thu, 21 Mar 2013 18:49:11 +0000</created>
                <updated>Thu, 20 Oct 2016 10:51:08 +0000</updated>
                                            <version>1.7.4</version>
                                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13609304" author="cwsteinbach" created="Thu, 21 Mar 2013 18:56:39 +0000"  >&lt;p&gt;I observed the following behavior using Avro version 1.7.4:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;% avropipe ComplexTypes.avro
Error opening ComplexTypes.avro:
  Cannot parse file header: Error parsing JSON: \u0000 is not allowed near &lt;span class=&quot;code-quote&quot;&gt;&apos;&lt;span class=&quot;code-quote&quot;&gt;&quot;\u0000&quot;&lt;/span&gt;&apos;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, I can dump the header and contents of the same file using the Java Avro library:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;% avro getschema ComplexTypes.avro
{
  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;ComplexTypes&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;namespace&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;avro_fdw&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;mapField&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : {
      &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;map&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;values&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;
    },
    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : {
    }
  }, {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;arrayField&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : {
      &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;array&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;items&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;
    },
    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : [ ]
  }, {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;enumField&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : {
      &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;RGBEnum&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;RED&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;GREEN&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;BLUE&quot;&lt;/span&gt; ]
    },
    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;RED&quot;&lt;/span&gt;
  }, {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;fixedField&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : {
      &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;fixed&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;MD5Fixed&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;size&quot;&lt;/span&gt; : 16
    },
    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;\u0000&quot;&lt;/span&gt;
  }, {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;unionField&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt;&quot;&lt;/span&gt; ],
    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;DEFAULT VALUE&quot;&lt;/span&gt;
  }, {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;recordField&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : {
      &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;SampleRecord&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
        &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;stringField&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;DEFAULT VALUE&quot;&lt;/span&gt;
      }, {
        &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;intField&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : 0
      } ]
    },
    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : {
    }
  } ]
}

% avro tojson ComplexTypes.avro
{&lt;span class=&quot;code-quote&quot;&gt;&quot;mapField&quot;&lt;/span&gt;:{},&lt;span class=&quot;code-quote&quot;&gt;&quot;arrayField&quot;&lt;/span&gt;:[],&lt;span class=&quot;code-quote&quot;&gt;&quot;enumField&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;RED&quot;&lt;/span&gt;,
&lt;span class=&quot;code-quote&quot;&gt;&quot;fixedField&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000&quot;&lt;/span&gt;,
&lt;span class=&quot;code-quote&quot;&gt;&quot;unionField&quot;&lt;/span&gt;:{&lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;DEFAULT VALUE&quot;&lt;/span&gt;},&lt;span class=&quot;code-quote&quot;&gt;&quot;recordField&quot;&lt;/span&gt;:{&lt;span class=&quot;code-quote&quot;&gt;&quot;stringField&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;DEFAULT VALUE&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;intField&quot;&lt;/span&gt;:0}}
{&lt;span class=&quot;code-quote&quot;&gt;&quot;mapField&quot;&lt;/span&gt;:{},&lt;span class=&quot;code-quote&quot;&gt;&quot;arrayField&quot;&lt;/span&gt;:[],&lt;span class=&quot;code-quote&quot;&gt;&quot;enumField&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;RED&quot;&lt;/span&gt;,
&lt;span class=&quot;code-quote&quot;&gt;&quot;fixedField&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000&quot;&lt;/span&gt;,
&lt;span class=&quot;code-quote&quot;&gt;&quot;unionField&quot;&lt;/span&gt;:{&lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;DEFAULT VALUE&quot;&lt;/span&gt;},&lt;span class=&quot;code-quote&quot;&gt;&quot;recordField&quot;&lt;/span&gt;:{&lt;span class=&quot;code-quote&quot;&gt;&quot;stringField&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;DEFAULT VALUE&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;intField&quot;&lt;/span&gt;:0}}
{&lt;span class=&quot;code-quote&quot;&gt;&quot;mapField&quot;&lt;/span&gt;:{&lt;span class=&quot;code-quote&quot;&gt;&quot;b&quot;&lt;/span&gt;:2,&lt;span class=&quot;code-quote&quot;&gt;&quot;c&quot;&lt;/span&gt;:3,&lt;span class=&quot;code-quote&quot;&gt;&quot;a&quot;&lt;/span&gt;:1},&lt;span class=&quot;code-quote&quot;&gt;&quot;arrayField&quot;&lt;/span&gt;:[-2,-1,0,1,2],&lt;span class=&quot;code-quote&quot;&gt;&quot;enumField&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;GREEN&quot;&lt;/span&gt;,
&lt;span class=&quot;code-quote&quot;&gt;&quot;fixedField&quot;&lt;/span&gt;:&quot;&#195;&#168;\fq^]N&#194;&#136;_h&#195;&#151;&#194;&#163;&#194;&#133;;_&#195;&#138;s&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;unionField&lt;span class=&quot;code-quote&quot;&gt;&quot;:{&quot;&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;:1},
&lt;span class=&quot;code-quote&quot;&gt;&quot;recordField&quot;&lt;/span&gt;:{&lt;span class=&quot;code-quote&quot;&gt;&quot;stringField&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;SAMPLE VALUE&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;intField&quot;&lt;/span&gt;:100}}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The error is thrown in json_loadb() which gets called from avro_schema_from_json_length().&lt;/p&gt;</comment>
                            <comment id="13666308" author="dcreager" created="Fri, 24 May 2013 13:41:30 +0000"  >&lt;p&gt;This is an issue in the underlying JSON library that we&apos;re using.  Jansson doesn&apos;t support NUL bytes in JSON string values.  They have an &lt;a href=&quot;https://github.com/akheron/jansson/pull/63&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;open issue&lt;/a&gt; for this, but it hasn&apos;t been updated in awhile.  If this gets merged into Jansson, then we can update the version that we have embedded in the Avro C library source, and then this error would go away.&lt;/p&gt;

&lt;p&gt;The alternative would be to switch to a different JSON library, though that would be a pretty invasive change.&lt;/p&gt;</comment>
                            <comment id="13851729" author="dcreager" created="Wed, 18 Dec 2013 13:34:04 +0000"  >&lt;p&gt;Jansson has recently added support for NUL bytes in JSON string values.  It didn&apos;t make it into the 2.5 release, but as soon as they release a new version, I&apos;ll update the embedded copy in Avro and this issue should go away.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12574851" name="ComplexTypes.avro" size="924" author="cwsteinbach" created="Thu, 21 Mar 2013 18:57:30 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 24 May 2013 13:41:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>318819</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 5 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1j0ev:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>319160</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1279] Avro-C: file_read_header() segfaults when avro.codec is not defined</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1279</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description></description>
                <environment></environment>
        <key id="12638350">AVRO-1279</key>
            <summary>Avro-C: file_read_header() segfaults when avro.codec is not defined</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cwsteinbach">Carl Steinbach</assignee>
                                    <reporter username="cwsteinbach">Carl Steinbach</reporter>
                        <labels>
                    </labels>
                <created>Thu, 21 Mar 2013 19:04:10 +0000</created>
                <updated>Tue, 20 Aug 2013 17:46:08 +0000</updated>
                            <resolved>Fri, 26 Jul 2013 13:55:52 +0000</resolved>
                                    <version>1.7.4</version>
                                    <fixVersion>1.7.5</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13609325" author="cwsteinbach" created="Thu, 21 Mar 2013 19:12:00 +0000"  >&lt;p&gt;I observed the following behavior while using Avro-C version 1.7.4:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;% avropipe PrimitiveTypesNoCodec.avro 
Segmentation fault: 11

% avropipe PrimitiveTypes.avro 
/	[]
...

% avro getmeta PrimitiveTypesNoCodec.avro 
avro.schema	...

% avro getmeta PrimitiveTypes.avro 
avro.codec	&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
avro.schema	...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only difference between the two avro files is that PrimitiveTypesNoCodec.avro&lt;br/&gt;
does not include an avro.codec key in it&apos;s file header. According to the spec this&lt;br/&gt;
should be fine since avro.codec is not listed as a required header field.&lt;/p&gt;

&lt;p&gt;The offending code is located in file_read_header:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;rval = avro_value_get_by_name(&amp;amp;meta, &lt;span class=&quot;code-quote&quot;&gt;&quot;avro.codec&quot;&lt;/span&gt;, &amp;amp;codec_val, NULL);
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rval) {
	avro_set_error(&lt;span class=&quot;code-quote&quot;&gt;&quot;File header doesn&apos;t contain a codec&quot;&lt;/span&gt;);
	avro_value_decref(&amp;amp;meta);
	&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; rval;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13639812" author="cutting" created="Tue, 23 Apr 2013 23:20:18 +0000"  >&lt;p&gt;Carl, can you please provide a patch that fixes this?  Thanks!&lt;/p&gt;</comment>
                            <comment id="13639926" author="cwsteinbach" created="Wed, 24 Apr 2013 01:13:40 +0000"  >&lt;p&gt;Will do.&lt;/p&gt;</comment>
                            <comment id="13720804" author="jira-bot" created="Fri, 26 Jul 2013 13:55:40 +0000"  >&lt;p&gt;Commit 1507317 from dcreager@apache.org in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1507317&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1507317&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1279&quot; title=&quot;Avro-C: file_read_header() segfaults when avro.codec is not defined&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1279&quot;&gt;&lt;del&gt;AVRO-1279&lt;/del&gt;&lt;/a&gt;. C: Treat missing codec in data file as null codec.&lt;/p&gt;

&lt;p&gt;Contributed by Carl Steinbach.&lt;/p&gt;</comment>
                            <comment id="13720805" author="dcreager" created="Fri, 26 Jul 2013 13:55:52 +0000"  >&lt;p&gt;Looks good.  Merged into SVN.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12638359">AVRO-1281</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12580489" name="AVRO-1279.1.patch.txt" size="1401" author="cwsteinbach" created="Thu, 25 Apr 2013 06:17:04 +0000"/>
                            <attachment id="12574855" name="PrimitiveTypes.avro" size="673" author="cwsteinbach" created="Thu, 21 Mar 2013 19:13:23 +0000"/>
                            <attachment id="12574856" name="PrimitiveTypesNoCodec.avro" size="657" author="cwsteinbach" created="Thu, 21 Mar 2013 19:13:23 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 23 Apr 2013 23:20:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>318826</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 26 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1j0gf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>319167</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1280] Avro-C: Missing error checks in avro_schema_* functions</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1280</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description></description>
                <environment></environment>
        <key id="12638355">AVRO-1280</key>
            <summary>Avro-C: Missing error checks in avro_schema_* functions</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="cwsteinbach">Carl Steinbach</reporter>
                        <labels>
                    </labels>
                <created>Thu, 21 Mar 2013 19:17:18 +0000</created>
                <updated>Thu, 20 Oct 2016 10:51:35 +0000</updated>
                                                                            <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13609340" author="cwsteinbach" created="Thu, 21 Mar 2013 19:22:29 +0000"  >&lt;p&gt;Many of the avro_schema_* functions fail to properly catch and signal errors.&lt;/p&gt;

&lt;p&gt;avro_schema_record_field_get_index() properly handles failed lookups, but&lt;br/&gt;
the following functions do not:&lt;/p&gt;

&lt;p&gt;avro_schema_record_field_get()&lt;br/&gt;
avro_schema_record_field_name()&lt;br/&gt;
avro_schema_record_field_get_by_index()&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>318831</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 44 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1j0hj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>319172</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1281] DataFileWriter should default to using the null codec</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1281</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description></description>
                <environment></environment>
        <key id="12638359">AVRO-1281</key>
            <summary>DataFileWriter should default to using the null codec</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="cwsteinbach">Carl Steinbach</reporter>
                        <labels>
                    </labels>
                <created>Thu, 21 Mar 2013 19:27:18 +0000</created>
                <updated>Thu, 20 Oct 2016 10:52:06 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13609359" author="cwsteinbach" created="Thu, 21 Mar 2013 19:32:34 +0000"  >&lt;p&gt;According to the Avro spec the header metadata property &apos;avro.codec&apos; is optional&lt;br/&gt;
and is assumed to have the value &apos;null&apos; when absent. I recently discovered a bug&lt;br/&gt;
in Avro-C (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1279&quot; title=&quot;Avro-C: file_read_header() segfaults when avro.codec is not defined&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1279&quot;&gt;&lt;del&gt;AVRO-1279&lt;/del&gt;&lt;/a&gt;) that causes a segfault when &apos;avro.codec&apos; is missing from&lt;br/&gt;
the header. I think it&apos;s likely that this bug will crop up again in the future,&lt;br/&gt;
and propose that we modify DataFileWriter so that it always include &apos;avro.codec&apos;&lt;br/&gt;
in the file header metadata.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12638350">AVRO-1279</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>318835</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 44 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1j0if:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>319176</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1282] Make use of the sun.misc.Unsafe class during serialization if a JDK supports it</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1282</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Unsafe can be used to significantly speed up serialization process, if a JDK implementation supports java.misc.Unsafe properly. Most JDKs running on PCs support it. Some platforms like Android lack a proper support for Unsafe yet.&lt;/p&gt;

&lt;p&gt;There are two possibilities to use Unsafe for serialization:&lt;br/&gt;
1) Very quick access to the fields of objects. It is way faster than with the reflection-based approach using Field.get/set&lt;/p&gt;

&lt;p&gt;2) Input and Output streams can be using Unsafe to perform very quick input/output.&lt;/p&gt;

&lt;p&gt;3) More over, Unsafe makes it possible to serialize to/deserialize from off-heap memory directly and very quickly, without any intermediate buffers allocated on heap. There is virtually no overhead compared to the usual byte arrays.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12638536">AVRO-1282</key>
            <summary>Make use of the sun.misc.Unsafe class during serialization if a JDK supports it</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="romixlev">Leo Romanoff</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Mar 2013 16:57:25 +0000</created>
                <updated>Tue, 20 Aug 2013 17:46:09 +0000</updated>
                            <resolved>Tue, 30 Apr 2013 16:19:21 +0000</resolved>
                                    <version>1.7.4</version>
                                    <fixVersion>1.7.5</fixVersion>
                    <fixVersion>1.8.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13610942" author="romixlev" created="Fri, 22 Mar 2013 17:07:37 +0000"  >&lt;p&gt;One thing I&apos;d like to ask is the following:&lt;/p&gt;

&lt;p&gt;I&apos;ve implemented this kind of optimization for Kryo and the results are impressive.&lt;br/&gt;
While doing this, I almost have rewritten most of the Input/Output classes from Kryo. They now support Unsafe-based streams and contribute the most to the speed ups. Since these IO classes are pretty self-contained and do not really depend on Kryo, it could be interesting to reuse them for Avro (and may be for other serialization frameworks). &lt;/p&gt;

&lt;p&gt;What do you think about this idea?&lt;/p&gt;

&lt;p&gt;Note:&lt;br/&gt;
One of the biggest wins for Kryo was Unsafe-based serialization of arrays. In this mode, Kryo would use native byte order and native size of primitive types (because this is what Unsafe supports), but it can serialize whole arrays of primitive types extremely quickly. Overall, most of speed ups coming from Unsafe-based streams are due to the usage of very efficient native byte order operations by Unsafe. E.g. it can serialize primitive types as a whole and not byte-by-byte.&lt;/p&gt;

&lt;p&gt;Since Avro uses a platform-independent format, this feature cannot be used with Avro then I guess. Or one could enable this mode optionally with a disclaimer that is makes serialized representation non-portable between platforms with different byte-orders.&lt;/p&gt;</comment>
                            <comment id="13610988" author="cutting" created="Fri, 22 Mar 2013 17:55:01 +0000"  >&lt;p&gt;I&apos;m hesitant to add native-byte-order serialization to Avro.  A primary purpose for Avro is as an interchange format.  Native byte-order would be an incompatible change.&lt;/p&gt;

&lt;p&gt;Improving reflection performance would be a clear win.&lt;/p&gt;</comment>
                            <comment id="13611299" author="romixlev" created="Fri, 22 Mar 2013 21:43:07 +0000"  >&lt;p&gt;&amp;gt; I&apos;m hesitant to add native-byte-order serialization to Avro. A primary purpose for Avro is as an interchange format. &lt;br/&gt;
&amp;gt; Native byte-order would be an incompatible change.&lt;/p&gt;

&lt;p&gt;I suspected this reaction &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Let&apos;s postpone this feature it for now. IMHO, having a native byte order is not bad as such, as long as you indicate in the produced representation which concrete byte order was used during serialization (e.g. big endian, little endian, etc). This can be an attribute or something like this. If this is provided, the other side can always deserialize without problems, even if it uses a different byte order. In this case it would simply apply a conversion. And if it has the same byte-order it can deserialize at full speed. I think for Big Data applications which use Avro as internal storage format (are there such apps/frameworks, e.g. Voldermont?), it could be a huge win, because you usually use the same CPU architecture in your data center, or?&lt;/p&gt;

&lt;p&gt;&amp;gt; Improving reflection performance would be a clear win.&lt;/p&gt;

&lt;p&gt;OK. I will concentrate on this fist.&lt;/p&gt;</comment>
                            <comment id="13611333" author="cutting" created="Fri, 22 Mar 2013 22:07:55 +0000"  >&lt;p&gt;I can see adding a native byte order option that&apos;s disabled by default, and that, when enabled, changes the file&apos;s magic number so that existing implementations that don&apos;t support this immediately reject such files.&lt;/p&gt;

&lt;p&gt;Avro uses little-endian for floats, longs and doubles, so on x86 native byte order would do the right thing.  So there might be some room for this optimization without altering the format.&lt;/p&gt;</comment>
                            <comment id="13611449" author="romixlev" created="Fri, 22 Mar 2013 23:52:04 +0000"  >&lt;p&gt;&amp;gt; Avro uses little-endian for floats, longs and doubles, so on x86 native byte order would do the right thing. So there &lt;br/&gt;
&amp;gt; might be some room for this optimization without altering the format.&lt;/p&gt;

&lt;p&gt;Well, Avro seems to use the variable-length zig-zag coding. And Unsafe uses native fixed length coding, i.e. 4 bytes for ints and floats and 8 bytes for longs and doubles. No tricks to reduce the size. So, I&apos;m not sure it would be compatible with existing Avro format.&lt;/p&gt;</comment>
                            <comment id="13612586" author="romixlev" created="Mon, 25 Mar 2013 12:42:10 +0000"  >&lt;p&gt;I have implemented an initial version of the Unsafe-based serialization/deserialization. It uses Unsafe (when it is available) to read/write fields of an object. I can see that it improves performance of reflection-based (de)serialization by a factor of two. This is actually less than I expected. &lt;/p&gt;

&lt;p&gt;One of the problems that I see is that read/write methods work with Objects. It means that when reading/writing primitive types they are being boxed and unboxed all the time. It would be cool to improve it.&lt;br/&gt;
How about introducing setIntField, setFloatField, setDoubleField, setShortField, setXXXField in GenericData? By default it would invoke setField for all of them. But it can be redefined by derived classes, i.e. ReflectData. Then the GenericDataReader#read() method could read a primitive type and write a primitive type without all those boxing/unboxing.&lt;br/&gt;
What do you think?&lt;/p&gt;</comment>
                            <comment id="13612901" author="romixlev" created="Mon, 25 Mar 2013 17:50:27 +0000"  >&lt;p&gt;I implemented the optimization that avoids boxing/unboxing. Now Perf test shows that performance is about 3-4 times better than the vanilla reflection-based Avro version.  But I want to check a few more potential improvements before I submit a patch.&lt;/p&gt;</comment>
                            <comment id="13632757" author="romixlev" created="Tue, 16 Apr 2013 11:18:20 +0000"  >&lt;p&gt;Unsafe serialization patch&lt;/p&gt;</comment>
                            <comment id="13632764" author="romixlev" created="Tue, 16 Apr 2013 11:24:54 +0000"  >&lt;p&gt;I just submitted a patch that implements Unsafe-based serialization/deserialization in case of reflection-based (de)serializers. It also includes a performance test. &lt;br/&gt;
You can run it using &lt;br/&gt;
 mvn exec:java -Dexec.mainClass=&quot;org.apache.avro.io.Perf&quot; -Dexec.classpathScope=test -Dexec.args=&quot;-REFr&quot;&lt;/p&gt;

&lt;p&gt;or &lt;/p&gt;

&lt;p&gt; mvn exec:java -Dexec.mainClass=&quot;org.apache.avro.io.Perf&quot; -Dexec.classpathScope=test -Dexec.args=&quot;-reflect&quot;&lt;/p&gt;

&lt;p&gt;On my machine I get 5x performance boost using Unsafe approach.&lt;/p&gt;</comment>
                            <comment id="13632789" author="romixlev" created="Tue, 16 Apr 2013 12:15:40 +0000"  >&lt;p&gt;Minor fixes for problems with UNIONs and GenericData.Record-based structs&lt;/p&gt;</comment>
                            <comment id="13633048" author="cutting" created="Tue, 16 Apr 2013 17:38:11 +0000"  >&lt;p&gt;I don&apos;t think we should add an &apos;accessor&apos; field to the Schema, nor should GenericDatumReader have reflect logic in it.  Rather I think we can accomplish this by implementing ReflectData#getRecordState(Object,Schema) to return an array of accessors from a cache keyed by the schema.  Then ReflectData#getField(Object r, String f, int p, Object state) can find the accessor as state&lt;span class=&quot;error&quot;&gt;&amp;#91;p&amp;#93;&lt;/span&gt;.  Does that make sense?&lt;/p&gt;</comment>
                            <comment id="13633920" author="romixlev" created="Wed, 17 Apr 2013 09:23:41 +0000"  >&lt;p&gt;Doug, you are right! I haven&apos;t noticed the getRecordState method, when I was originally creating my patch. Using this method is certainly a much cleaner way to solve the problem. Please find attached a new version of the patch based on this approach.&lt;/p&gt;</comment>
                            <comment id="13633921" author="romixlev" created="Wed, 17 Apr 2013 09:24:14 +0000"  >&lt;p&gt;Use getRecordState-based approach, as suggested by Doug&lt;/p&gt;</comment>
                            <comment id="13634205" author="cutting" created="Wed, 17 Apr 2013 17:08:54 +0000"  >&lt;p&gt;This is looking good.  I think FieldAccess.java is missing from the patch.&lt;/p&gt;</comment>
                            <comment id="13634352" author="romixlev" created="Wed, 17 Apr 2013 19:46:36 +0000"  >&lt;p&gt;Include files that were forgotten in previous patch&lt;/p&gt;</comment>
                            <comment id="13634356" author="romixlev" created="Wed, 17 Apr 2013 19:48:22 +0000"  >&lt;p&gt;@Doug: Sorry, I forgot that git needs &quot;git diff HEAD&quot; instead of simple &quot;git diff&quot; to include new files. Now the patch should be complete, which makes it possible to test it.&lt;/p&gt;</comment>
                            <comment id="13635158" author="cutting" created="Thu, 18 Apr 2013 13:35:12 +0000"  >&lt;p&gt;Leo, the patch seems to be based off an older version of trunk.  Perf.java has since moved, and a few changes now have conflicts.&lt;/p&gt;</comment>
                            <comment id="13635194" author="romixlev" created="Thu, 18 Apr 2013 14:20:30 +0000"  >&lt;p&gt;This time on top of the current trunk &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13635198" author="romixlev" created="Thu, 18 Apr 2013 14:22:05 +0000"  >&lt;p&gt;Doug, I just pulled the latest trunk and applied my changes on top of it. &lt;br/&gt;
Perf.java should be fixed as well.&lt;/p&gt;</comment>
                            <comment id="13635603" author="cutting" created="Thu, 18 Apr 2013 19:58:09 +0000"  >&lt;p&gt;A few minor issues with the latest patch.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the new protected methods need javadoc&lt;/li&gt;
	&lt;li&gt;why is ReflectDatumReader overriding readString()?  I don&apos;t see the advantages over the implementation now in GenericDatumReader.&lt;/li&gt;
	&lt;li&gt;do the Unsafe* classes need to be public?  If they&apos;re only used internally let&apos;s keep them package-private.&lt;/li&gt;
	&lt;li&gt;the patch includes a few spurious whitespace changes&lt;/li&gt;
	&lt;li&gt;the new code is indented with tabs rather than the standard 2 spaces.&lt;/li&gt;
	&lt;li&gt;&apos;mvn clean test&apos; fails in checkstyle, since some methods have non-standard names&lt;/li&gt;
	&lt;li&gt;the spacing around braces is non-standard.  we use, e.g., &apos;if (condition) then 
{ ... }
&lt;p&gt;&apos;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;the @author tag is not used at Apache&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="13635644" author="romixlev" created="Thu, 18 Apr 2013 20:28:04 +0000"  >&lt;p&gt;I&apos;ll try to fix all stylistic things tomorrow and next days.&lt;/p&gt;

&lt;p&gt;&amp;gt;why is ReflectDatumReader overriding readString()?&lt;br/&gt;
Hmm. I don&apos;t know. I don&apos;t even remember I redefined it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; May be it was an experiment and I forgot to remove traces ...&lt;/p&gt;

&lt;p&gt;Were you able to run Perf tests? What were the results? Can you confirm that it also improves speed on your side as well?&lt;/p&gt;</comment>
                            <comment id="13636177" author="romixlev" created="Fri, 19 Apr 2013 08:17:40 +0000"  >&lt;p&gt;Code clean-up based on Doug&apos;s comments. &lt;br/&gt;
Formatting is fixed. New protected methods are documented. Checkstyle does not complain anymore.&lt;/p&gt;</comment>
                            <comment id="13636589" author="scott_carey" created="Fri, 19 Apr 2013 16:47:18 +0000"  >&lt;p&gt;I will have a look at this this weekend.&lt;/p&gt;</comment>
                            <comment id="13636985" author="cutting" created="Fri, 19 Apr 2013 22:53:54 +0000"  >&lt;p&gt;There was a &apos;==========&apos; in the patch that I had to remove to get it to compile, and a print statement I removed.&lt;/p&gt;

&lt;p&gt;Here are the results I see with the latest patch:&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;                    test name     time    M entries/sec   M bytes/sec  bytes/cycle
             ReflectArrayRead:  23522 ms       8.503        34.011       1000006
            ReflectArrayWrite:  18698 ms      10.696        42.785       1000006
   ReflectSmallFloatArrayRead:  58845 ms       3.399        15.294       1125004
  ReflectSmallFloatArrayWrite:  29458 ms       6.789        30.551       1125004
  ReflectMediumFloatArrayRead:  22690 ms       8.814        35.610       1010003
 ReflectMediumFloatArrayWrite:  19735 ms      10.134        40.941       1010003
            ReflectRecordRead:  46990 ms       0.709        43.536       2557239
           ReflectRecordWrite:  42195 ms       0.790        48.483       2557239
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;                    test name     time    M entries/sec   M bytes/sec  bytes/cycle
             ReflectArrayRead:   9099 ms      21.978        87.913       1000006
            ReflectArrayWrite:   3677 ms      54.388       217.552       1000006
   ReflectSmallFloatArrayRead:  20353 ms       9.826        44.219       1125004
  ReflectSmallFloatArrayWrite:  10164 ms      19.676        88.541       1125004
  ReflectMediumFloatArrayRead:   7869 ms      25.414       102.672       1010003
 ReflectMediumFloatArrayWrite:   4719 ms      42.379       171.213       1010003
            ReflectRecordRead:  14973 ms       2.226       136.629       2557239
           ReflectRecordWrite:  11479 ms       2.904       178.218       2557239
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In general, around a 3x speedup.  Nice!&lt;/p&gt;

&lt;p&gt;(This is Java 7 on my laptop, 64-bit Linux.)&lt;/p&gt;</comment>
                            <comment id="13637508" author="romixlev" created="Sun, 21 Apr 2013 08:46:59 +0000"  >&lt;p&gt;@Doug: Thanks that you confirmed my measurements! 3x is nice indeed. On my MacBook Air with i7 and 8 GB of memory I&apos;ve seen even 4-5 speedups on the same tests. So, it seems to be a big performance win in any case. Do you plan to include it into the trunk? If so, when?&lt;/p&gt;

&lt;p&gt;Coming back to the beginning of this thread:&lt;br/&gt;
Improvements we have seen so far are purely due to the optimization of accesses to the fields of structures and avoiding reflection as much as possible. &lt;br/&gt;
Based on my experience with Kryo, it could be even more beneficial to use Unsafe-based approach for Input/Output streams. But this would affect the format of produced data, because Unsafe reads/writes primitive types using their native size and native byte order. We touched a bit upon this at the beginning, but may be it is time now to decide what to do with it? Do you see any option to support it in Avro, e.g. by introducing a new format id or something like this? or may be by introducing new type ids (something like LITTLE_ENDIAN_INT, LITTLE_ENDIAN_LONG, LITTLE_ENDIAN_FLOAT, LITTLE_ENDIAN_DOUBLE,etc and the same for BIG_ENDIAN). This way one could use both encodings for different parts/fields of the same object grpah. What do you think?&lt;/p&gt;





</comment>
                            <comment id="13638232" author="scott_carey" created="Mon, 22 Apr 2013 18:00:21 +0000"  >&lt;p&gt;I think changing the binary format for primitives is probably off the table.  Google got performance improvements by going from zig-zag encoding to group varint encoding, which we tried in the past as an experiment without much luck but with Unsafe we may do better.  Group Varint encoding for the case of arrays of ints and longs will be fast and significantly smaller than raw int/longs.   Extending the avro spec to allow for group varint encoding may be a better choice than using fixed size int/long.  float/double are already fixed size and can use unsafe when the native ordering of the system matches (e.g. x86).&lt;/p&gt;

&lt;p&gt;Float and Double are already written as 4 or 8 byte chunks, and you can use the float &amp;lt;&amp;gt; int bit conversion or double &amp;lt;&amp;gt; long bit conversion to pack ints or longs that way if you wish to test performance differences.&lt;/p&gt;

&lt;p&gt;On the other hand, we could pack our variable length writes into int/long on the stack, then use unsafe rather than per byte writes, which might help.  This would not work when writing to OutputStream but could for writing to byte buffers or byte[], since the fields are variable length we would have to &apos;rewind&apos;.&lt;/p&gt;

&lt;p&gt;I am not convinced that using Unsafe will help that much on the read side on the input buffer &amp;#8211; I&apos;ve already optimized much of the read pipeline to avoid triggering array bounds checking if you look at the output assembly from the JIT.  It would help for native byte buffers, however (or byte buffers in general, which have poor performance for the raw read/write access because the interface methods used to access them do not get inlined).  Reading doubles and floats in Perf.java is very fast &amp;#8211; the bottleneck for ReflectSmallFloatArrayRead is elsewhere.  Have you profiled it?&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                    test name     time    M entries/sec   M bytes/sec  bytes/cycle
                    FloatRead:    399 ms     501.220      2004.882       1000000
                   FloatWrite:   1164 ms     171.812       687.248       1000000
                   DoubleRead:    399 ms     500.677      4005.417       2000000
                  DoubleWrite:   1896 ms     105.439       843.515       2000000
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="13638255" author="scott_carey" created="Mon, 22 Apr 2013 18:15:04 +0000"  >&lt;p&gt;Other frameworks (e.g. Jackson) avoid field access reflection entirely due to the performance problems with it (method reflection is faster, hence all the frameworks that exclusively use it).  How much performance improvement would that yield?&lt;/p&gt;</comment>
                            <comment id="13638355" author="romixlev" created="Mon, 22 Apr 2013 19:28:04 +0000"  >&lt;p&gt;@Scott: Kryo was using ASM-based byte code instrumentation and so on to avoid reflection. Unsafe-based approach beats it easily. More over, Unsafe-based approach has no problems with private fields, which is a problem for other approaches.&lt;/p&gt;</comment>
                            <comment id="13638365" author="cutting" created="Mon, 22 Apr 2013 19:42:30 +0000"  >&lt;p&gt;Unless there are objections, I&apos;ll commit this to trunk soon.&lt;/p&gt;</comment>
                            <comment id="13638471" author="scott_carey" created="Mon, 22 Apr 2013 21:51:36 +0000"  >&lt;p&gt;-1&lt;/p&gt;

&lt;p&gt;This appears to break some JVMs by assuming that Unsafe exists.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;UnsafeUtil {
  &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Unsafe UNSAFE;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is guaranteed to trigger class not found on say, IBM&apos;s JDK.&lt;/p&gt;

&lt;p&gt;Other libraries that use Unsafe prevent this by attempting to load Unsafe in an inner class.  If it succeeds, they load the &quot;unsafe variant&quot; types, and otherwise load the ordinary variant.&lt;/p&gt;

&lt;p&gt;So for example, there would be two implementations of FieldAccess &amp;#8211; and only one would ever be loaded by the classloader &amp;#8211; UnsafeFieldAccess if Unsafe is reachable and ReflectFieldAccess otehrwise.  This also helps performance because if there is only one implementation of an abstract class encountered by the JVM, it can inline all of the virtual call sites.&lt;/p&gt;


&lt;p&gt;For example, see how this project does it:&lt;br/&gt;
&lt;a href=&quot;https://github.com/dain/snappy/blob/master/src/main/java/org/iq80/snappy/Memory.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/dain/snappy/blob/master/src/main/java/org/iq80/snappy/Memory.java&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/dain/snappy/blob/master/src/main/java/org/iq80/snappy/SnappyInternalUtils.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/dain/snappy/blob/master/src/main/java/org/iq80/snappy/SnappyInternalUtils.java&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/dain/snappy/blob/master/src/main/java/org/iq80/snappy/SlowMemory.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/dain/snappy/blob/master/src/main/java/org/iq80/snappy/SlowMemory.java&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/dain/snappy/blob/master/src/main/java/org/iq80/snappy/UnsafeMemory.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/dain/snappy/blob/master/src/main/java/org/iq80/snappy/UnsafeMemory.java&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13638507" author="scott_carey" created="Mon, 22 Apr 2013 22:22:11 +0000"  >&lt;p&gt;Newer IBM JDK&apos;s seem to have Unsafe support &amp;#8211; so perhaps that is not the best example.  My concern still stands &amp;#8211; how does this avoid failure when Unsafe does not exist?  I assume that the presence of a static field of the type requires it to exist.&lt;br/&gt;
Other examples I can find seem to go different routes to protect form this case, and I don&apos;t have access to a JVM without Unsafe to try it on.&lt;/p&gt;</comment>
                            <comment id="13638523" author="scott_carey" created="Mon, 22 Apr 2013 22:33:33 +0000"  >&lt;p&gt;I am measuring a 2x to 7x performance increase (typically 3x to 4x) for the Reflect use cases.  I am measuring no difference for the Specific and &quot;raw&quot; tests.  The generic tests are all slower by about 5% to 10%. &lt;/p&gt;

&lt;p&gt;It is unclear why the Generic tests are slower, perhaps we have more implementations of abstract methods triggering more virtual table lookups, or there could be a more obvious change there.&lt;/p&gt;</comment>
                            <comment id="13638527" author="scott_carey" created="Mon, 22 Apr 2013 22:35:26 +0000"  >&lt;p&gt;Note, my measurements were with all tests active; results sometimes vary if only subsets are run due to JIT interactions (especially deoptimization).&lt;/p&gt;</comment>
                            <comment id="13638548" author="scott_carey" created="Mon, 22 Apr 2013 23:00:54 +0000"  >&lt;p&gt;After several runs in a row, the Generic performance decline looks consistent, but smaller than my prior report &amp;#8211; about 2% to 5% on most tests.&lt;/p&gt;
</comment>
                            <comment id="13638792" author="romixlev" created="Tue, 23 Apr 2013 05:21:16 +0000"  >&lt;p&gt;@Scott: Thanks for testing it on IBM&apos;s JDK and confirming the results!&lt;/p&gt;

&lt;p&gt;Regarding your concern that Unsafe is not provided on all platforms, I&apos;m with you and aware of the problem. One such platform is Android, IMHO. It has Unsafe, but it has a limited API compared to Sun JDK version. I can try to load the Unsafe class only dynamically (i.e. using a string name of it and loading at runtime) and/or based on examples you provided. And I&apos;ll try to provide for platforms lacking Unsafe a default FieldAccess implementation which does not use Unsafe and uses cached Reflection-based approach.&lt;/p&gt;</comment>
                            <comment id="13638813" author="scott_carey" created="Tue, 23 Apr 2013 05:54:02 +0000"  >&lt;p&gt;A related issue is what happens when you run under a security manager and Unsafe.getUnsafe() does not work.  The examples from the snappy library as well as the one that Holger referenced: &lt;br/&gt;
&lt;a href=&quot;http://code.google.com/p/guava-libraries/source/browse/guava/src/com/google/common/cache/Striped64.java#317&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://code.google.com/p/guava-libraries/source/browse/guava/src/com/google/common/cache/Striped64.java#317&lt;/a&gt;&lt;br/&gt;
from guava work around the security manager in some cases with reflection.  In others, getUnsafe will still fail with a RuntimeException or class not found error, which can be caught and the reflection based implementation used instead. &lt;/p&gt;</comment>
                            <comment id="13638830" author="romixlev" created="Tue, 23 Apr 2013 06:23:48 +0000"  >&lt;p&gt;@Scott: I don&apos;t think that security manager related issues are difficult to solve. Just as you say, we can always revert back to reflection-based approach if we cannot obtain an instance of Unsafe.&lt;br/&gt;
Therefore, I&apos;d say we only need to implement a reflection-based FieldAccess and use it in every situation where Unsafe class is not available or its instances cannot be created.&lt;/p&gt;</comment>
                            <comment id="13638860" author="scott_carey" created="Tue, 23 Apr 2013 07:25:44 +0000"  >&lt;p&gt;I agree, it is the same solution &amp;#8211; two instances of some type, one that uses Unsafe internally and one that does not, with the Unsafe one loaded if possible and the other loaded otherwise.&lt;/p&gt;</comment>
                            <comment id="13638920" author="romixlev" created="Tue, 23 Apr 2013 09:57:55 +0000"  >&lt;p&gt;@Scott: Coming back to your message about reading doubles and floats and observation that they are much slower with ReflectDatumReader/Writer. I just did some profiling and found some issues. With small changes, I could significantly improve write performance and improved a bit read performance. All this without Unsafe reads/writes into streams yet.&lt;br/&gt;
But reads are still slow compared to FloatTest. Further investigation has shown the following:&lt;/p&gt;

&lt;p&gt;1) My ReflectSmallFloatArrayRead tests and the like were named improperly. Their name does not reflect what they actually do. In fact, they store an array of structs with arrays fields and so on. I.e. their structure is much more complex than the one used in the FloatTest. Therefore I renamed them and added an additional test which is really like FloatTest, but uses RefelctDatumReader/Writer. This one performs much better. It has almost a comparable speed for writes, but is much slower on reads still.&lt;/p&gt;

&lt;p&gt;2) I looked deeper into this reading speed issue. First, FloatTest does not perform many of the operations which are done when you read arrays using GenericDatumReader, i.e. it does not do in.readArrayStart() and it does not assign results to a real float array that it needs to allocate when it reads from a stream. When I add this actions to the FloatTest, then it read performance drops and becomes roughly equal to the write performance of FloatTest. But it is still much faster than ReflectDatumReader.&lt;/p&gt;

&lt;p&gt;3) Profiler has shown that Reflect*** tests use a ResolvingDecoder and this one uses Parser.advance() method very often. And those Parser.advance() invocations consume 50% of overall test execution time. Is there any way to optimize this and make ResolvingDecoder faster or may be used only conditionally? &lt;/p&gt;
</comment>
                            <comment id="13638981" author="romixlev" created="Tue, 23 Apr 2013 12:02:23 +0000"  >&lt;p&gt;I did some experiments with Unsafe IO, i.e. I&apos;ve created UnsafeBufferedBinaryEncoder and UnsafeBinaryDecoder. Both are derived from the corresponding classes without Unsafe prefix. The only thing I did so far is to redefine the read/writeFloat and read/writeDouble to use Unsafe. Below you can see the results:&lt;/p&gt;

&lt;p&gt;Unsafe Binary Encoder/Decoder           &lt;br/&gt;
  test name     time    M entries/sec   M bytes/sec  bytes/cycle&lt;br/&gt;
   FloatRead:   6184 ms     323,374      1293,497       1000000&lt;br/&gt;
  FloatWrite:   6405 ms     312,232      1248,927       1000000&lt;br/&gt;
  DoubleRead:   7424 ms     269,371      2154,968       2000000&lt;br/&gt;
 DoubleWrite:   8221 ms     243,262      1946,097       2000000&lt;/p&gt;

&lt;p&gt;Standard BinaryEncoder/Decoder: &lt;br/&gt;
   test name     time    M entries/sec   M bytes/sec  bytes/cycle&lt;br/&gt;
   FloatRead:   9181 ms     217,827       871,307       1000000&lt;br/&gt;
  FloatWrite:   9963 ms     200,736       802,943       1000000&lt;br/&gt;
  DoubleRead:  15589 ms     128,289      1026,316       2000000&lt;br/&gt;
 DoubleWrite:  15583 ms     128,339      1026,710       2000000&lt;/p&gt;

&lt;p&gt;So, it seems to be a win to have Unsafe-based IO streams.&lt;/p&gt;

&lt;p&gt;From experience with Kryo, one can get much better results for arrays of primitives - I&apos;ve observed results like 20x or 40x compared to the standard version, which does not use Unsafe. I.e. Unsafe can efficiently write/read whole arrays of primitives in one go. The drawback of it: It uses native byte order and fixed size representations per element. You also cannot write anything between elements. It really simply dumps memory into the target buffer.&lt;/p&gt;</comment>
                            <comment id="13639339" author="scott_carey" created="Tue, 23 Apr 2013 18:15:00 +0000"  >&lt;p&gt;Yes, ResolvingDecoder is a bottleneck.  I have several ideas for abolishing it completely but they aren&apos;t trivial.  In general, decoding involves continuously traversing multiple data structures &amp;#8211; the Parser and the object graph being built or read, as well as the Schema.  Instead, building the read pipeline and resolving by composition of small functional bits and precomputing all of the possibilities into a composite function will be faster.  This composite function can then pass through ASM to &apos;devirtualize&apos; it and inline some operations.  That is out of scope for this ticket, but enhancing what we can in the current framework is not a bad idea.&lt;/p&gt;

&lt;p&gt;Re:  Float/Double&lt;br/&gt;
How much do those improvements help the Generic tests? I assume they are still dominated by the issues with the decoder.  Although decreasing the time of a Float read by 35% is a big win, it is a small part of what happens with Generic/Specific/Reflect reading.  Does using unsafe here break anything if the system&apos;s byte order does not match?&lt;/p&gt;

&lt;p&gt;Your results for reading Floats/Doubles above are slower than mine, is this because you are now populating an array when reading as well?  The benchmark was intended to isolate (as best as possible) the read and write portions of the decoder/encoder?  I&apos;d be interested in looking at this code.&lt;/p&gt;


&lt;p&gt;As for arrays of primitives, we should look into Group varint encoding and similar techniques: &lt;a href=&quot;http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/people/jeff/WSDM09-keynote.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/people/jeff/WSDM09-keynote.pdf&lt;/a&gt;  (go to page 55).&lt;/p&gt;


&lt;p&gt;In general, lets separate out the Unsafe enhancements for Reflection from those that are for the Input/Output streams.  Lets get the reflection work in this ticket done and committed, then move on to other enhancements.&lt;/p&gt;


&lt;p&gt;We have three tickets then:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;This one related to reflection improvements via Unsafe.&lt;/li&gt;
	&lt;li&gt;Another one related  to input/output improvements via Unsafe.&lt;/li&gt;
	&lt;li&gt;A third related to other non-Unsafe performance improvements, for example those you allude to with:
&lt;blockquote&gt;
&lt;p&gt;Coming back to your message about reading doubles and floats and observation that they are much slower with ReflectDatumReader/Writer. I just did some profiling and found some issues. With small changes, I could significantly improve write performance and improved a bit read performance. All this without Unsafe reads/writes into streams yet.&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think we should try and separate these from each other.&lt;/p&gt;</comment>
                            <comment id="13639987" author="romixlev" created="Wed, 24 Apr 2013 02:07:00 +0000"  >&lt;p&gt;&amp;gt;How much do those improvements help the Generic tests? I assume they are still dominated by &lt;br/&gt;
&amp;gt;the issues with the decoder. Although decreasing the time of a Float read by 35% is a big win, &lt;br/&gt;
&amp;gt;it is a small part of what happens with Generic/Specific/Reflect reading. Does using unsafe &lt;br/&gt;
&amp;gt;here break anything if the system&apos;s byte order does not match?&lt;/p&gt;

&lt;p&gt;Well, if you mean the last numbers I posted, they were because of using Unsafe for IO. I.e. it should provide the same kind of speedups to any of Generic/Specific/Reflect as it simply provides a faster stream implementation.&lt;/p&gt;


&lt;p&gt;&amp;gt; Your results for reading Floats/Doubles above are slower than mine, is this because you are &lt;br/&gt;
&amp;gt; now populating an array when reading as well? &lt;/p&gt;

&lt;p&gt;Yes. There are a few reasons for populating the array when reading:&lt;/p&gt;

&lt;p&gt;1) Make it more symmetric to writing, as writing in FloatTest/DoubleTest always iterates over an array. And it means additional memory accesses, which also have their cost.&lt;/p&gt;

&lt;p&gt;2) It is more realistic scenario, as most deserializers would store results somewhere. And as I just mentioned, storing comes at cost of memory access. And those memory accesses seem to have a very big impact on the performance.&lt;/p&gt;

&lt;p&gt;3) For scehma-based serialization performance tests like Reflect-based, it is almost impossible to decouple pure reading from storing the result somewhere. Therefore it is unfair (or useless) to compare them with vanilla FloatTest/DoubleTest reading speeds as they measure different things. With my little change to reading it seems to make more sense.&lt;/p&gt;

&lt;p&gt;&amp;gt; The benchmark was intended to isolate (as best as possible) the read and write portions of &lt;br/&gt;
&amp;gt; the decoder/encoder? I&apos;d be interested in looking at this code.&lt;/p&gt;

&lt;p&gt;The code change is trivial. It is in the readInternal. It basically allocates an array before a loop and then inside a loop it assigns each read object to a corresponding array element, thus filling the array with a content.&lt;/p&gt;

&lt;p&gt;&amp;gt; As for arrays of primitives, we should look into Group varint encoding and similar &lt;br/&gt;
&amp;gt; techniques: ...&lt;/p&gt;

&lt;p&gt;Yes, I&apos;ve seen this paper before. IMHO, it is faster than the usual varint encoding, but it will be slower (though more space efficient) than what Unsafe-based primitive arrays serialization does. And the reason for this is the number of memory accesses and branching. Unsafe-based array serialization just copies bytes and it does it in chunks of 4 or 8 bytes per instruction. No branching at all. You can hardly beat it, I&apos;d say. &lt;br/&gt;
(As a remark, I&apos;ve experimented with Kryo and have seen that Kryo using Unsafe-based IO + LZ-like compression on top of it is often faster than Kryo using varing encoding for the same content while producing a compressed output of comparable size)&lt;/p&gt;

&lt;p&gt;&amp;gt; In general, lets separate out the Unsafe enhancements for Reflection from those that are &lt;br/&gt;
&amp;gt; for the Input/Output streams. Lets get the reflection work in this ticket done and &lt;br/&gt;
&amp;gt; committed, then move on to other enhancements.&lt;/p&gt;

&lt;p&gt;I agree. We should not mix to many things in this ticket.&lt;/p&gt;

&lt;p&gt;&amp;gt; A third related to other non-Unsafe performance improvements, for example those you allude &lt;br/&gt;
&amp;gt; to with:&lt;br/&gt;
&amp;gt; Coming back to your message about reading doubles and floats and observation that they are &lt;br/&gt;
&amp;gt; much slower with ReflectDatumReader/Writer. I just did some profiling and found some &lt;br/&gt;
&amp;gt; issues. With small changes, I could significantly improve write performance and improved a &lt;br/&gt;
&amp;gt; bit read performance. All this without Unsafe reads/writes into streams yet.&lt;/p&gt;

&lt;p&gt;This one is still in scope of this ticket, IMHO. It affects only ReflectDatumReader/Writer and the changes are mostly in my ArrayAccessor class. I&apos;ll provide an updated patch today.&lt;/p&gt;

&lt;p&gt;BTW, should I include TestFloat&apos;s/TestDouble&apos;s readInternal changes mentioned above into this patch or should I leave them out?&lt;/p&gt;</comment>
                            <comment id="13640081" author="scott_carey" created="Wed, 24 Apr 2013 05:07:17 +0000"  >&lt;p&gt;Regarding copying of data into an array on read:&lt;br/&gt;
Many cases will be reading not into an array, but into an object.  Object field writes and constructor parameters are faster than array writes because there is no bounds checking and so less branches.&lt;/p&gt;

&lt;p&gt;Yes, it is more realistic to test it where the data in a read test ends up someplace, and in a write test where it comes from some place, but that is what the Generic/Specific/Reflect tests are for &amp;#8211; these are meant to isolate the BinaryEncoder or BinaryDecoder as much as possible.  Perhaps we can get the encoder tests to avoid the array read.&lt;/p&gt;

&lt;p&gt;We may want both variations of performance tests in the long run so that we can see the isolated parts as well as the effect when mixed with other likely activity.&lt;/p&gt;


&lt;p&gt;Regarding Group Varint and raw arrays for int/long:&lt;br/&gt;
We want to keep our compactness of representation for the same reasons Google does.  But in any case, changing the format is a big deal &amp;#8211; it would likely require changes in every language implementation and a rev of Avro to 2.0 (we only change binary representation in major versions).  Such a big change would take time and likely include many other spec breaking features.&lt;/p&gt;

&lt;p&gt;As an aside, for array copying System.arraycopy can be faster than Unsafe for cases where the copy is between two arrays and the call site is not megamorphic and can be in-lined.  In that case, the JIT can turn the array copy into one instruction on x86 (REP MOVSB), no matter how long the array is.  Interestingly, in some cases it is fastest to write:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; out.lengh; i++) {
  out[i] = arr[i];
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;than even System.arraycopy, as the JIT converts the above into a single instruction if the bounds check can be eliminated or pushed outside the loop, while with System.arraycopy it uses a stub that first checks whether the arrays are not the same and the sizes are larger than a threshold.&lt;/p&gt;

&lt;p&gt;More interestingly, to get the above to compile to that speed the loop can&apos;t be in a shared method that has many call sites, so copying the code multiple times can help.&lt;/p&gt;
</comment>
                            <comment id="13640169" author="romixlev" created="Wed, 24 Apr 2013 06:47:26 +0000"  >&lt;p&gt;Interestng. I thought that Systen.arraycopy uses Unsafe.copyMemory internally. I guess both are in-lined by the JIT.&lt;/p&gt;

&lt;p&gt;Regarding copying of data into an array on read:&lt;br/&gt;
OK. I won&apos;t include into my patch the change related to this one.&lt;/p&gt;</comment>
                            <comment id="13640708" author="romixlev" created="Wed, 24 Apr 2013 17:43:11 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Arrays of primitive types are serialized much faster&lt;/li&gt;
	&lt;li&gt;Unsafe is used only if available, otherwise reflection based approach is used&lt;/li&gt;
	&lt;li&gt;New ReflectFloatTest&lt;/li&gt;
	&lt;li&gt;Better naming for some of the new classes&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13640712" author="romixlev" created="Wed, 24 Apr 2013 17:45:19 +0000"  >&lt;p&gt;I attached a new patch, see description above. &lt;br/&gt;
The only thing where I&apos;m not 100% sure is the code which picks Unsafe or reflection based on the availability of Unsafe. I don&apos;t know how to test it on my machine. In theory it should work, but I&apos;d feel better if someone would confirm it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13640791" author="cutting" created="Wed, 24 Apr 2013 18:56:17 +0000"  >&lt;p&gt;I can&apos;t find FieldAcessor in this.  Are some files missing from the patch?&lt;/p&gt;</comment>
                            <comment id="13641034" author="romixlev" created="Wed, 24 Apr 2013 22:08:17 +0000"  >&lt;p&gt;Forgot to include some files in the previous version of the patch. Sorry &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13641150" author="scott_carey" created="Wed, 24 Apr 2013 23:23:44 +0000"  >&lt;p&gt;In practice, nearly all JVMs have Unsafe these days (since ~2010) because Doug Lea&apos;s concurrent collections are built on it.  However, it is not required, so we should be prepared to have a fallback.  And since each implementation does not contain all methods, we have to be prepared for that as well.&lt;/p&gt;

&lt;p&gt;Perhaps we should support reading a System property to disable use?  Perhaps if &quot;avro.disable.unsafe&quot; exists, we fall back to plain reflection?  Then we can run tests that simulate what happens when it fails to find Unsafe or one of the expected methods by adding &quot;-Davro.disable.unsafe&quot;.  This also serves as a work-around if there are other unexpected consequences.&lt;/p&gt;</comment>
                            <comment id="13641154" author="scott_carey" created="Wed, 24 Apr 2013 23:27:19 +0000"  >&lt;p&gt;Lastly, in Java 9 Unsafe will likely be hidden behind something more powerful than the current security manager, it would be good if our current libraries are future-proof.&lt;/p&gt;

&lt;p&gt;There are rumors on the hotspot/jdk mailing lists that they want to have something more official to replace it or provide equivalent performance via a standard API.  Being able to work no matter what happens with this internal API is important.&lt;/p&gt;</comment>
                            <comment id="13641197" author="scott_carey" created="Wed, 24 Apr 2013 23:53:32 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; Accessor getAccessor(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; o) {
    &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt; c = o.getClass().getComponentType();
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;.class)
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IntAccessor(o);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;.class)
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; LongAccessor(o);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;.class)
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ByteAccessor(o);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt;.class)
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; FloatAccessor(o);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;.class)
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DoubleAccessor(o);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;.class)
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CharAccessor(o);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;code-object&quot;&gt;short&lt;/span&gt;.class)
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ShortAccessor(o);
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is c == int.class guaranteed to work across classloaders?  is int.class in one classloader == to int.class in another?  Otherwise we&apos;ll need to use instanceof (which is fast).&lt;/p&gt;</comment>
                            <comment id="13641346" author="scott_carey" created="Thu, 25 Apr 2013 03:11:14 +0000"  >&lt;p&gt;Here is a unit test that demonstrates that UnsafeUtil fails when Unsafe does not exist.&lt;/p&gt;

&lt;p&gt;I will work on a patch that refactors this in a way that is safe.&lt;/p&gt;</comment>
                            <comment id="13641387" author="romixlev" created="Thu, 25 Apr 2013 04:04:17 +0000"  >&lt;p&gt;I don&apos;t know if you noticed it, but there is now a second line of protection in ReflectData. In this class we do not statically refer to Unsafe. Instead we try to dynamically load a class that refers to it. If it fails, we revert back to a reflection based solution. Or do you see this approach failing as well?&lt;/p&gt;</comment>
                            <comment id="13641473" author="scott_carey" created="Thu, 25 Apr 2013 06:11:33 +0000"  >&lt;p&gt;UnsafeUtils is a public class with public static content &amp;#8211; if we want to guarantee that it is only accessed in a controlled way, it will need to be hidden.&lt;/p&gt;


&lt;p&gt;Additionally, the unit tests fail with this patch for me in avro-ipc:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Tests in error: 
  testError(org.apache.avro.TestNamespaceReflect): org.apache.avro.AvroRuntimeException: No field named message in: class org.apache.avro.test.errors.TestError
  testEcho(org.apache.avro.TestProtocolReflect): java.lang.NullPointerException
  testAdd(org.apache.avro.TestProtocolReflect): java.lang.NullPointerException
  testEchoBytes(org.apache.avro.TestProtocolReflect): java.lang.NullPointerException
  testEcho(org.apache.avro.TestProtocolReflectMeta): java.lang.NullPointerException
  testAdd(org.apache.avro.TestProtocolReflectMeta): java.lang.NullPointerException
  testEchoBytes(org.apache.avro.TestProtocolReflectMeta): java.lang.NullPointerException
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;



</comment>
                            <comment id="13641520" author="scott_carey" created="Thu, 25 Apr 2013 07:27:50 +0000"  >&lt;p&gt;Perf.java is also not working for at least two reasons (commented out one portion, missing code in another).  I reverted to the one from the v6 patch.&lt;/p&gt;</comment>
                            <comment id="13641555" author="romixlev" created="Thu, 25 Apr 2013 08:12:57 +0000"  >&lt;p&gt;Hmm. At the moment we use UnsafeUtil only internally, so it could be hidden. But in principle, it would be nice to find a proper solution.&lt;/p&gt;

&lt;p&gt;Regarding avro-ipc failures:&lt;br/&gt;
Sorry, for some reason I cannot test locally. I get this:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; Failed to execute goal on project avro-tools: Could not resolve dependencies for project org.apache.avro:avro-tools:jar:1.7.5-SNAPSHOT: Failure to find org.apache.avro:trevni-avro:jar:tests:1.7.5-SNAPSHOT in &lt;a href=&quot;http://repository.apache.org/snapshots&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://repository.apache.org/snapshots&lt;/a&gt; was cached in the local repository, resolution will not be reattempted until the update interval of apache.snapshots has elapsed or updates are forced -&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;Help 1&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Since I cannot test some things at the moment, I cannot always detect if something is broken.&lt;/p&gt;</comment>
                            <comment id="13641568" author="scott_carey" created="Thu, 25 Apr 2013 08:30:37 +0000"  >&lt;p&gt;First try with the -U parameter to force it to re-resolve artifacts.&lt;/p&gt;

&lt;p&gt;If that does not work then try to build from the root and install without tests (the contents should have BUILD.txt and CHANGES.txt):&lt;/p&gt;

&lt;p&gt;mvn clean install -DskipTests&lt;/p&gt;

&lt;p&gt;Generally, if you see an error like the above that says &quot;XYZ was cached in the local repository, resolution will not be reattempted ...&quot;  try running with the -U parameter or deleting the offending artifact from your local repo in ~/.m2/repository&lt;/p&gt;


</comment>
                            <comment id="13641569" author="scott_carey" created="Thu, 25 Apr 2013 08:33:29 +0000"  >&lt;p&gt;The below appears to be a bug that assumes every class is only associated with exactly one Schema.  If this is not the case, we could corrupt the heap or segfault by using the wrong field accessor for the field.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; FieldAccessor[] getOrCreateFieldsArray(&lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt; c, Schema schema) {
    Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;, FieldAccessor[]&amp;gt; cache = FIELDS_ARRAY_CACHE.get();  
    FieldAccessor[] fields = cache.get(c);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (fields == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (schema == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;)
        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AvroRuntimeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;No schema is known &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &quot;&lt;/span&gt; + c);
      fields = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; FieldAccessor[schema.getFields().size()];
      cache.put(c, fields);   
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (schema != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Schema.Field f: schema.getFields()) {
        getFieldAccessor(c, f.pos(), f.name());
      }
    }
  }
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; fields;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13641696" author="romixlev" created="Thu, 25 Apr 2013 11:48:15 +0000"  >&lt;p&gt;Scott, your Maven advice has helped! I can reproduce your avro-ipc errors.&lt;br/&gt;
I analyzed them and most/all of them seem to be related to the getOrCreateFieldsArray code snipped that you correctly posted above. The reason for this is:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This code does not handle GenericRecord properly. In case of a generic record, Class c would always point to the org.apache.avro.generic.Record.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So,to solve it we need to distinguish between types of different objects based on something else rather than their Class. My first idea was to use a string, which is actually either a class name or GenericRecord name. But it turns out that GenericRecord objects/schemas do not always have a name for a record, e.g. I see something like this, where the top-level record has no name.&lt;/p&gt;

&lt;p&gt;{&quot;type&quot;:&quot;record&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;TestRecord0&quot;,&quot;type&quot;:{&quot;type&quot;:&quot;record&quot;,&quot;name&quot;:&quot;TestRecord&quot;, &quot;namespace&quot;:&quot;org.apache.avro.TestProtocolReflect$&quot;,&quot;fields&quot;:[&lt;/p&gt;
{&quot;name&quot;:&quot;name&quot;,&quot;type&quot;:&quot;string&quot;}
&lt;p&gt;]}}]}&lt;/p&gt;

&lt;p&gt;The other idea could be to use schema object as a key in this method. But I&apos;m not sure if it would really solve all of our problems. Any suggestions on what to use as a key to make this mapping unique? &lt;/p&gt;</comment>
                            <comment id="13641725" author="scott_carey" created="Thu, 25 Apr 2013 12:25:27 +0000"  >&lt;p&gt;This patch fixes a few bugs, adds tests around the Unsafe functionality, and restricts more classes and methods to private or package visibility.&lt;/p&gt;

&lt;p&gt;On the bug side, FieldAccessors are no longer cached by Class + avro schema index as this is unsafe since two avro schemas can apply to the same class, and have different order for fields or number of fields.  The only safe way to cache is to cache by Class + field name, so FieldAccessor[] turned into Map&amp;lt;String, FieldAccessor&amp;gt; which slows things down a little when field access is heavy.&lt;/p&gt;

&lt;p&gt;Additionally, I fixed the bug where we were using native accessors for boxed objects, which would lead to heap corruption.&lt;/p&gt;

&lt;p&gt;Array reading still has a bug.  The arrays are assumed to be of size equal to the first array block length, but this is not true.  We should get ArrayIndexOutOfBounds if we used the blocked encoding for arrays.  These will need to grow in size if there is more than one block, or to chain together and flatten when complete.&lt;/p&gt;

&lt;p&gt;There is opportunity for better performance with intrinsic arrays if we do away with the iterator for them and use a specialized loop for the raw array case.&lt;/p&gt;</comment>
                            <comment id="13641768" author="romixlev" created="Thu, 25 Apr 2013 13:16:21 +0000"  >&lt;p&gt;I think I fixed the issues with IPC tests. They are all green now. IndexedRecord and derived classes required some special handling.&lt;/p&gt;

&lt;p&gt;&amp;gt;The below appears to be a bug that assumes every class is only associated with exactly one Schema. If this is not the case, we &lt;br/&gt;
&amp;gt;could corrupt the heap or segfault by using the wrong field accessor for the field.&lt;/p&gt;

&lt;p&gt;This observation is true. Is it a big issue? Do you have a test case, where a class is associated with more than one schema? I&apos;d like to have it to see how I could solve this issue.&lt;/p&gt;</comment>
                            <comment id="13641789" author="romixlev" created="Thu, 25 Apr 2013 13:36:19 +0000"  >&lt;p&gt;&amp;gt; On the bug side, FieldAccessors are no longer cached by Class + avro schema index as this is unsafe since two avro schemas can &lt;br/&gt;
&amp;gt; apply to the same class, and have different order for fields or number of fields. The only safe way to cache is to cache by &lt;br/&gt;
&amp;gt; Class + field name, so FieldAccessor[] turned into Map&amp;lt;String, FieldAccessor&amp;gt; which slows things down a little when field &lt;br/&gt;
&amp;gt; access is heavy.&lt;/p&gt;

&lt;p&gt;Hmm. But this would introduce overhead on each access. Wouldn&apos;t it be better to use a different way of caching for FIELDS_ARRAY_CACHE? E.g. we map a compound class + schema (as string?) to the FieldAccessor[]? This way we have different mappings for different combinations of class/schema, but we only have overhead when we do getState and not on each iteration of the loop over struct fields. What do you think?&lt;/p&gt;

&lt;p&gt;&amp;gt; Additionally, I fixed the bug where we were using native accessors for boxed objects, which would lead to heap corruption.&lt;br/&gt;
Good catch!&lt;/p&gt;

&lt;p&gt;&amp;gt; Array reading still has a bug. The arrays are assumed to be of size equal to the first array block length, but this is not &lt;br/&gt;
&amp;gt; true. We should get ArrayIndexOutOfBounds if we used the blocked encoding for arrays. These will need to grow in size if there &lt;br/&gt;
&amp;gt; is more than one block, or to chain together and flatten when complete.&lt;/p&gt;

&lt;p&gt;Yes. This situation is not handled yet, but should be easy to fix, I&apos;d say. We can easily grow arrays in size.&lt;/p&gt;


&lt;p&gt;&amp;gt; There is opportunity for better performance with intrinsic arrays if we do away with the iterator for them and use a &lt;br/&gt;
&amp;gt; specialized loop for the raw array case.&lt;/p&gt;

&lt;p&gt;But I already introduced this optimization in the latest versions of the patch that I submitted. Have you seen them?&lt;/p&gt;</comment>
                            <comment id="13641792" author="romixlev" created="Thu, 25 Apr 2013 13:39:22 +0000"  >&lt;p&gt;I meant this code in ReflectDatumReader:&lt;/p&gt;

&lt;p&gt;for (long i = 0; i &amp;lt; l; i++) {&lt;br/&gt;
   ac.read((int)(base + i), in);&lt;br/&gt;
   //ac.set((int)(base + i), read(peekArray(array), expectedType, in));&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;It essentially directly reads into a primitive array, element-by-element. No boxing is performed.&lt;br/&gt;
Or do you have in mind something even more optimized?&lt;/p&gt;</comment>
                            <comment id="13641814" author="romixlev" created="Thu, 25 Apr 2013 14:00:28 +0000"  >&lt;p&gt;&amp;gt; Perf.java is also not working for at least two reasons (commented out one portion, missing code in another). I reverted to the &lt;br/&gt;
&amp;gt; one from the v6 patch.&lt;/p&gt;

&lt;p&gt;If possible, please include the latest versions of Perf.java reflection tests from my patches. They are nicer and include an additional test case called ReflectFloatTest, which is the closest to FloatTest, but is based on reflection.&lt;/p&gt;</comment>
                            <comment id="13641962" author="scott_carey" created="Thu, 25 Apr 2013 17:07:40 +0000"  >&lt;p&gt;I&apos;ll have a look at your more recent changes for Perf.java again &amp;#8211; mine were based on v8 + the performance tests from v6 since v8&apos;s performance tests don&apos;t execute for me at all.&lt;/p&gt;

&lt;p&gt;Re: GenericRecord uniqueness:&lt;/p&gt;

&lt;p&gt;Either a compound key including the schema would work (but also be slower for each record, so fields would speed up and records would go slower &amp;#8211; wide records vs narrow.  We can still avoid IndexedRecords.  Perhaps if instead of an array or map, the state was the actual strategy used to access fields for the whole record, so we don&apos;t have to check instanceof IndexedRecord repeatedly either.&lt;/p&gt;

&lt;p&gt;We probably should not cache any accessors for GenericRecords (or any IndexedRecord for that matter) since they have a fast setter / getter already.  I&apos;m trying out some changes to my patch to incorporate that.&lt;/p&gt;


&lt;p&gt;The performande idea for arrays is to avoid iterators and simplify the loops so the compiler will be able to avoid more branches and virtual method calls per item.  On the write side:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!array.getClass().getComponentType().isPrimitive()) {
        &lt;span class=&quot;code-comment&quot;&gt;// Handle arrays of objects
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Iterator&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;&amp;gt;() {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; is unnecessary, calling into getArrayElements from writeArray is optional, we don&apos;t need to create a stateful iterator.&lt;/p&gt;</comment>
                            <comment id="13642048" author="romixlev" created="Thu, 25 Apr 2013 18:24:34 +0000"  >&lt;p&gt;&amp;gt; We probably should not cache any accessors for GenericRecords (or any IndexedRecord for that matter) since they have a fast &lt;br/&gt;
&amp;gt; setter / getter already. I&apos;m trying out some changes to my patch to incorporate that.&lt;/p&gt;

&lt;p&gt;+1 for this. I also came to the same conclusion earlier today. And it took just 2-3 lines to fix it.&lt;/p&gt;

&lt;p&gt;Your idea about avoiding iterators is also nice.&lt;/p&gt;

&lt;p&gt;Regarding compound keys:&lt;br/&gt;
FYI, I experimented with something like this, where I used class or schema as a key, depending on what is provided as parameters to getOrCreateFieldsArray. It does not use compound keys and it passes all tests in Avro and IPC, but it could be that it still does not cover everything.&lt;/p&gt;

&lt;p&gt;  private static FieldAccessor[] getOrCreateFieldsArray(Class c, Schema schema) {&lt;br/&gt;
    Map&amp;lt;Object, FieldAccessor[]&amp;gt; cache = FIELDS_ARRAY_CACHE.get();&lt;br/&gt;
    Object key = (schema !=null &amp;amp;&amp;amp; IndexedRecord.class.isAssignableFrom(c)) ? schema : c;&lt;br/&gt;
    FieldAccessor[] fields = cache.get(key);&lt;br/&gt;
    if (fields == null) {&lt;br/&gt;
      if (schema == null)&lt;br/&gt;
        throw new AvroRuntimeException(&quot;No schema is known for &quot; + c);&lt;br/&gt;
      fields = new FieldAccessor&lt;span class=&quot;error&quot;&gt;&amp;#91;schema.getFields().size()&amp;#93;&lt;/span&gt;;&lt;br/&gt;
      cache.put(key, fields);   &lt;br/&gt;
      if (schema != null) {&lt;br/&gt;
      if(key instanceof Class) {&lt;br/&gt;
        for (Schema.Field f: schema.getFields()) &lt;/p&gt;
{
            getFieldAccessor(c, f.pos(), f.name());
          }
&lt;p&gt;        } else {&lt;br/&gt;
          for (Schema.Field f: schema.getFields()) &lt;/p&gt;
{
            fields [f.pos()] = new GenericRecordAccessor(f.name());
          }
&lt;p&gt;        }&lt;br/&gt;
      }&lt;br/&gt;
    }&lt;br/&gt;
    return fields;&lt;br/&gt;
  }&lt;/p&gt;
</comment>
                            <comment id="13642190" author="scott_carey" created="Thu, 25 Apr 2013 20:45:09 +0000"  >&lt;p&gt;Here is my work in progress.  It successfully passes all tests and only has a slight performance decrease, largely due to commenting out the bits that avoid boxing in some cases.&lt;/p&gt;

&lt;p&gt;I plan to use a different approach to solving that.&lt;/p&gt;

&lt;p&gt;There are some cases that I think the tests do not cover that I worry about.  Are we supposed to be able to read a short[] as an avro array of int?  What about a widening conversion from float to double?&lt;br/&gt;
The ArrayAccessor code makes strong assumptions about the relationship of java types to avro types in its current state. &lt;/p&gt;

&lt;p&gt;I think I can solve that and reduce boxing at the same time with ArrayRead and ArrayWrite strategies decoupled from each other and decoupled from boxed get() and set().&lt;/p&gt;

&lt;p&gt;We need to remove the static ReflectData cache because it will cause classloader leaks.  That is in here, but I did not make enough attempts to address the performance drop due to it.  We probably need to have two places we store context:  ReflectData can store only Class + field name -&amp;gt; FieldAccessor information.   ReflectDatumReader and ReflectDatumWriter may have their own cache or state to improve performance that differs.&lt;/p&gt;</comment>
                            <comment id="13642616" author="scott_carey" created="Fri, 26 Apr 2013 05:30:30 +0000"  >&lt;p&gt;Re: using schema or class as the key:&lt;/p&gt;

&lt;p&gt;This still will not work.  You can have a few scenarios cause big trouble, the most likely one where two schemas map to the same class:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Foo {
  &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; b;
  &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; l;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There are several valid schemas for reading this via reflection, for example:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;Foo&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;&quot;&lt;/span&gt;},
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;l&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&quot;&lt;/span&gt;}
]}

{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;Foo&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;l&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&quot;&lt;/span&gt;},
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;&quot;&lt;/span&gt;}
]}

{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;Foo&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;l&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&quot;&lt;/span&gt;}
]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the schema resolution is set up so that the in memory schema matches the in memory class, then there is no issue, but if it differs in any way we&apos;ll be reading the wrong data from the wrong offset if we go by index instead of name &amp;#8211; or writing to the wrong place.&lt;/p&gt;

&lt;p&gt;Additionally, Schemas as a key in a map tend to be a little slow.  Feel free to try out different approaches.&lt;/p&gt;</comment>
                            <comment id="13642618" author="scott_carey" created="Fri, 26 Apr 2013 05:35:53 +0000"  >&lt;p&gt;This patch brings the performance back up a little, but it is still slightly below the prior level due to using a Map&amp;lt;String, FieldAccessor&amp;gt; instead of FieldAccessor[].&lt;/p&gt;

&lt;p&gt;There are a couple other simplifications.&lt;/p&gt;

&lt;p&gt;The read side is particularly slow for both arrays and fields &amp;#8211; there is room for improvement in how the array read machinery works.&lt;/p&gt;

&lt;p&gt;I&apos;m likely done with my main burst of activity on this ticket for now &amp;#8211; feel free to pick up where I&apos;ve left off and experiment more.&lt;/p&gt;

&lt;p&gt;All tests are passing, but I think we should add some more tests to cover more corner cases before committing any of these variations &amp;#8211; this stuff is a little dangerous.&lt;/p&gt;

&lt;p&gt;Latly, My patch does not contain all of Leo&apos;s changes to Perf.java &amp;#8211; please submit another patch for that; I can&apos;t seem to get the latest one uploaded to work.&lt;/p&gt;</comment>
                            <comment id="13643421" author="scott_carey" created="Sat, 27 Apr 2013 00:28:47 +0000"  >&lt;p&gt;I&apos;ve got this back to using FieldAccessor[], doing as Leo suggested by caching the indexes against Schemas &amp;#8211; with an IdentityHashMap so that the lookup is fast.&lt;/p&gt;

&lt;p&gt;This got the performance up decently.&lt;/p&gt;

&lt;p&gt;I will try one more thing that may help:  Currently we signify an IndexedRecord with a null context, and this clutters up a lot of the code paths with branch conditions.  If we had an IndexedRecordFieldAccessor then we could streamline the remainder which might speed it up more.&lt;/p&gt;</comment>
                            <comment id="13643541" author="romixlev" created="Sat, 27 Apr 2013 05:43:42 +0000"  >&lt;p&gt;Scott, this is great! Question: If you index indexes against Schemas and the same schema is used for two different classes with different structure in memory, what would happen?&lt;/p&gt;


&lt;p&gt;Regarding IndexedRecords: Have a look at my latest patch and take the class GenericRecordAccessor for it (the name was not quite reflecting what it does. In principle it can work also with IndexedRecords). It does almost what you need. The only differences is that it uses a name instead of a position and GenericRecord. So, you can easily change it to take position as constructor argument and use it for access. And you change it to use IndexedRecord. That&apos;s it.&lt;/p&gt;</comment>
                            <comment id="13643923" author="scott_carey" created="Sun, 28 Apr 2013 06:56:05 +0000"  >&lt;p&gt;Leo:  Using a variation of your GenericRecordAccessor was the plan, but after a little more work I&apos;m not sure it will go much faster.&lt;/p&gt;

&lt;p&gt;Regarding caching by schema &amp;#8211; it caches first by class, then for each class it has both a lookup of Accessors by field name, and one by schema.   The looup by schema returns a FieldAccessor[], the one by name returns the FieldAccessor for that specific named field.&lt;/p&gt;

&lt;p&gt;All of the main remaining performance issues are now similar to Generic and Specific code:&lt;/p&gt;

&lt;p&gt;We are traversing and inspecting objects and other data structures on the fly far too often &amp;#8211; e.g. Schema, Parser, and various instanceof checks, and most of it could be pre computed if the code was structured radically differently.  That will have to wait for another time.  I&apos;ve got some old prototypes around elsewhere for Generic/Specific, and after digging in this deep in Reflect for the first time I&apos;m convinced they all share the same fundamental performance barriers now.   Of course there is room for some tweaks here and there, but for major wins we need to make bigger changes.&lt;/p&gt;

&lt;p&gt;I am finalizing a patch that gets performance back up to the level you had it or better &amp;#8211; a little faster in most cases and a little slower in others.  I&apos;ve also rearranged and streamlined Perf.java, incorporating your more recent versions and refactoring to share more code and make it simpler.&lt;/p&gt;

&lt;p&gt;There is still one fundamental flaw:  reading blocked encoding is not supported (it would trigger an array bounds check exception).  I have isolated the code that loops and writes arrays, so we can add that more easily from here.&lt;/p&gt;</comment>
                            <comment id="13643924" author="scott_carey" created="Sun, 28 Apr 2013 06:58:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1282&quot; title=&quot;Make use of the sun.misc.Unsafe class during serialization if a JDK supports it&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1282&quot;&gt;&lt;del&gt;AVRO-1282&lt;/del&gt;&lt;/a&gt;-s5.patch :&lt;/p&gt;

&lt;p&gt;Performance is back up.&lt;br/&gt;
Perf.java streamlined, many more reflect tests.&lt;br/&gt;
Reading of block encoded primitive arrays still broken (we should add a test for it).  Unsure if this was supported or worked previously.&lt;/p&gt;</comment>
                            <comment id="13644024" author="romixlev" created="Sun, 28 Apr 2013 14:10:36 +0000"  >&lt;p&gt;Scott: I tested with your latest patch and confirm that it brings the performance back! Very well done. I attach a slightly modified version of your patch, where I added two more tests to Perf.java. These are the ReflectFloatTest and ReflectDoubleTest and they do the same as FloatTest and DoubleTest, but using reflection. If you look at the &quot;M bytes/sec&quot; figures you&apos;d see that write speed for arrays using reflection is almost the same as without reflection, which is very good. But reading speed is very slow compared to non-reflection case, as we know. &lt;/p&gt;

&lt;p&gt;Overall, I see speed improvements with factors 3x or 4x for structures and complex types and much better improvements for arrays, e.g. sometimes 10x or 20x.&lt;/p&gt;

&lt;p&gt;With this in mind, I think we are ready for inclusion into a trunk. &lt;/p&gt;

&lt;p&gt;&amp;gt; There is still one fundamental flaw: reading blocked encoding is not supported (it would trigger an array bounds check &lt;br/&gt;
&amp;gt; exception). I have isolated the code that loops and writes arrays, so we can add that more easily from here.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure if blocked encoding ever worked for Java. If required we can add it later as you say.&lt;/p&gt;

&lt;p&gt;Overall, it was a great joint effort! Thank you very much Scott!!!&lt;/p&gt;</comment>
                            <comment id="13644025" author="romixlev" created="Sun, 28 Apr 2013 14:13:32 +0000"  >&lt;p&gt;Minor change to the Scott&apos;s s5 patch.&lt;br/&gt;
Two more test cases are added to Perf.java, which provide a more detailed picture of the read/write speed for arrays of primitives when using reflection.&lt;/p&gt;</comment>
                            <comment id="13644913" author="scott_carey" created="Mon, 29 Apr 2013 21:47:17 +0000"  >&lt;p&gt;This patch (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1282&quot; title=&quot;Make use of the sun.misc.Unsafe class during serialization if a JDK supports it&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1282&quot;&gt;&lt;del&gt;AVRO-1282&lt;/del&gt;&lt;/a&gt;-s6.patch) includes the following:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The Reflect API now uses sun.misc.Unsafe to do Field reflection, for significantly improved performance. (Leo)&lt;/li&gt;
	&lt;li&gt;The Reflect API avoids boxing for reading and writing primitive arrays.  (Leo, Scott)&lt;/li&gt;
	&lt;li&gt;Resolution of whether it is safe to use Unsafe is done statically, only one implementation is loaded.  The Unsafe implementation is tested to ensure that all features function properly at load time (for example, to handle Android or other JVMs with partial Unsafe support).  A unit test is added that uses a classloader that fails to load Unsafe to test this. (Leo, Scott)&lt;/li&gt;
	&lt;li&gt;EncoderFactory is fixed to properly configure the BlockingBinaryEncoder. (Scott)&lt;/li&gt;
	&lt;li&gt;Reflection now supports reading the Blocked encoding into native arrays. (Scott)&lt;/li&gt;
	&lt;li&gt;A dozen new tests added to Perf.java to cover the ReflectDatum
{Reader,Writer}
&lt;p&gt;, including with the blocked binary encoding. (Leo, Scott)&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;Additional unit tests in TestReflect to cover encoding and decoding primitive arrays, including with blocked binary encoding. (Scott)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Performance on Reflect Perf.java tests is approximately 2.5x to 29x faster, usually between 3x and 5x faster.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                                 test name     time    M entries/sec   M bytes/sec  bytes/cycle
                         ReflectRecordRead:  15067 ms       1.106        42.927        808498
                        ReflectRecordWrite:  10903 ms       1.529        59.319        808498
                      ReflectBigRecordRead:  19285 ms       0.519        31.832        767380
                     ReflectBigRecordWrite:  13958 ms       0.716        43.979        767380
                          ReflectFloatRead:  29594 ms       0.000        27.032       1000004
                         ReflectFloatWrite:  33327 ms       0.000        24.004       1000004
                         ReflectDoubleRead:  27442 ms       0.000        58.303       2000004
                        ReflectDoubleWrite:  31529 ms       0.000        50.746       2000004
                       ReflectIntArrayRead:  38088 ms       0.438        18.057        859709
                      ReflectIntArrayWrite:  23342 ms       0.714        29.464        859709
                      ReflectLongArrayRead:  18476 ms       0.451        34.869        805344
                     ReflectLongArrayWrite:  12715 ms       0.655        50.667        805344
                    ReflectDoubleArrayRead:  19411 ms       0.515        33.718        818144
                   ReflectDoubleArrayWrite:  13825 ms       0.723        47.340        818144
                     ReflectFloatArrayRead:  39502 ms       0.506        17.137        846172
                    ReflectFloatArrayWrite:  27492 ms       0.727        24.623        846172
               ReflectNestedFloatArrayRead:  41225 ms       0.485        16.420        846172
              ReflectNestedFloatArrayWrite:  30229 ms       0.662        22.393        846172
              ReflectNestedObjectArrayRead:  31679 ms       0.126        16.291        645104
             ReflectNestedObjectArrayWrite:  17206 ms       0.232        29.994        645104
          ReflectNestedLargeFloatArrayRead:  33099 ms       0.101        26.282       1087381
         ReflectNestedLargeFloatArrayWrite:  35159 ms       0.095        24.742       1087381
   ReflectNestedLargeFloatArrayBlockedRead:  33326 ms       0.100        26.302       1095674
  ReflectNestedLargeFloatArrayBlockedWrite:  36921 ms       0.090        23.741       1095674
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                                 test name     time    M entries/sec   M bytes/sec  bytes/cycle
                         ReflectRecordRead:   6058 ms       2.751       106.754        808498
                        ReflectRecordWrite:   3750 ms       4.444       172.470        808498
                      ReflectBigRecordRead:   6767 ms       1.478        90.709        767380
                     ReflectBigRecordWrite:   4433 ms       2.255       138.466        767380
                          ReflectFloatRead:   6155 ms       0.000       129.970       1000004
                         ReflectFloatWrite:   1083 ms       0.001       738.434       1000004
                         ReflectDoubleRead:   6610 ms       0.000       242.028       2000004
                        ReflectDoubleWrite:   1968 ms       0.000       812.864       2000004
                       ReflectIntArrayRead:   9462 ms       1.761        72.683        859709
                      ReflectIntArrayWrite:   2468 ms       6.751       278.584        859709
                      ReflectLongArrayRead:   5556 ms       1.500       115.941        805344
                     ReflectLongArrayWrite:   1851 ms       4.500       347.921        805344
                    ReflectDoubleArrayRead:   5755 ms       1.737       113.719        818144
                   ReflectDoubleArrayWrite:   1423 ms       7.027       459.900        818144
                     ReflectFloatArrayRead:  11373 ms       1.758        59.519        846172
                    ReflectFloatArrayWrite:   2267 ms       8.821       298.557        846172
               ReflectNestedFloatArrayRead:  12626 ms       1.584        53.610        846172
              ReflectNestedFloatArrayWrite:   4216 ms       4.743       160.542        846172
              ReflectNestedObjectArrayRead:  10522 ms       0.380        49.046        645104
             ReflectNestedObjectArrayWrite:   5565 ms       0.719        92.725        645104
          ReflectNestedLargeFloatArrayRead:   8022 ms       0.415       108.436       1087381
         ReflectNestedLargeFloatArrayWrite:   1788 ms       1.863       486.359       1087381
   ReflectNestedLargeFloatArrayBlockedRead:   8098 ms       0.412       108.799       1101357
  ReflectNestedLargeFloatArrayBlockedWrite:   7511 ms       0.444       117.295       1101357

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13644920" author="scott_carey" created="Mon, 29 Apr 2013 21:51:09 +0000"  >&lt;p&gt;At this point, I believe we are ready for another committer to have a look; I&apos;ll commit this once I&apos;ve got a +1 and no objections.&lt;/p&gt;</comment>
                            <comment id="13645051" author="cutting" created="Mon, 29 Apr 2013 23:39:58 +0000"  >&lt;p&gt;Why is the singleton INSTANCE removed from ReflectData?  I thought this would be done as a part of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1283&quot; title=&quot;remove static caches from GenericData, SpecificData and ReflectData&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1283&quot;&gt;AVRO-1283&lt;/a&gt;.  I&apos;m fine having it done here, but wonder whether it&apos;s required for this change.&lt;/p&gt;

&lt;p&gt;I hate to see more static caches added.  I doubt they&apos;re required for performance.  A single instance of ReflectData is reused for all read/write operations on a file or RPC session, which should be sufficient to amortize the cost of cache creation.  And, with INSTANCE gone, we can also get rid of cache synchronization.  But this can wait for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1283&quot; title=&quot;remove static caches from GenericData, SpecificData and ReflectData&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1283&quot;&gt;AVRO-1283&lt;/a&gt;, I guess?&lt;/p&gt;</comment>
                            <comment id="13645054" author="scott_carey" created="Mon, 29 Apr 2013 23:50:31 +0000"  >&lt;p&gt;I think I simply missed that.  I changed it at some point in the process and did not revert.&lt;/p&gt;

&lt;p&gt;I&apos;ll change it back to use INSTANCE with get().&lt;/p&gt;

&lt;p&gt;There are a lot of static caches here, and the ones that have Class objects in them without weak references are prone to trigger classloader leaking.  We can fix that elsewhere.  &lt;/p&gt;</comment>
                            <comment id="13645068" author="scott_carey" created="Tue, 30 Apr 2013 00:15:31 +0000"  >&lt;p&gt;Minor difference to the -s7 patch:  Returns INSTANCE to ReflectData, as &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1283&quot; title=&quot;remove static caches from GenericData, SpecificData and ReflectData&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1283&quot;&gt;AVRO-1283&lt;/a&gt; is the ticket for such changes.&lt;/p&gt;</comment>
                            <comment id="13645224" author="cutting" created="Tue, 30 Apr 2013 04:08:41 +0000"  >&lt;p&gt;+1 Patch looks good, tests pass, &apos;Perf -reflect&apos; performance improves 3x or more in most cases.&lt;/p&gt;</comment>
                            <comment id="13645320" author="romixlev" created="Tue, 30 Apr 2013 06:36:00 +0000"  >&lt;p&gt;As we discussed in this issue, I created a dedicated issues &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1312&quot; title=&quot;Make use of the sun.misc.Unsafe class in the IO streams implementation if a JDK supports it&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1312&quot;&gt;AVRO-1312&lt;/a&gt; for the Unsafe-based IO streams optimizations.&lt;/p&gt;</comment>
                            <comment id="13645691" author="scott_carey" created="Tue, 30 Apr 2013 16:19:21 +0000"  >&lt;p&gt;Committed @r1477712&lt;/p&gt;</comment>
                            <comment id="13645921" author="hudson" created="Tue, 30 Apr 2013 20:12:51 +0000"  >&lt;p&gt;Integrated in AvroJava #369 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/369/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/369/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1282&quot; title=&quot;Make use of the sun.misc.Unsafe class during serialization if a JDK supports it&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1282&quot;&gt;&lt;del&gt;AVRO-1282&lt;/del&gt;&lt;/a&gt;. Java: Use sun.misc.Unsafe to improve Reflect API Performance.&lt;br/&gt;
    (Leo Romanoff via scottcarey) (Revision 1477712)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
scottcarey : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/io/EncoderFactory.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/reflect/ArrayAccessor.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/reflect/FieldAccess.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/reflect/FieldAccessReflect.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/reflect/FieldAccessUnsafe.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/reflect/FieldAccessor.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumReader.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumWriter.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectionUtil.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflect.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectionUtil.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/ipc/src/test/java/org/apache/avro/io/Perf.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12638613">AVRO-1283</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310051">
                    <name>Supercedes</name>
                                            <outwardlinks description="supercedes">
                                        <issuelink>
            <issuekey id="12638314">AVRO-1277</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12580524" name="AVRO-1282-s1.patch" size="64607" author="scott_carey" created="Thu, 25 Apr 2013 12:25:27 +0000"/>
                            <attachment id="12580583" name="AVRO-1282-s2.patch" size="64348" author="scott_carey" created="Thu, 25 Apr 2013 20:45:09 +0000"/>
                            <attachment id="12580668" name="AVRO-1282-s3.patch" size="67259" author="scott_carey" created="Fri, 26 Apr 2013 05:35:53 +0000"/>
                            <attachment id="12580872" name="AVRO-1282-s5.patch" size="76745" author="scott_carey" created="Sun, 28 Apr 2013 06:58:27 +0000"/>
                            <attachment id="12581049" name="AVRO-1282-s6.patch" size="90518" author="scott_carey" created="Mon, 29 Apr 2013 21:47:17 +0000"/>
                            <attachment id="12581084" name="AVRO-1282-s7.patch" size="90058" author="scott_carey" created="Tue, 30 Apr 2013 00:15:31 +0000"/>
                            <attachment id="12580884" name="AVRO-1282-v9.patch" size="79524" author="romixlev" created="Sun, 28 Apr 2013 14:13:32 +0000"/>
                            <attachment id="12580459" name="TestUnsafeUtil.java" size="2357" author="scott_carey" created="Thu, 25 Apr 2013 03:11:14 +0000"/>
                            <attachment id="12578921" name="avro-1282-v1.patch" size="33798" author="romixlev" created="Tue, 16 Apr 2013 11:18:20 +0000"/>
                            <attachment id="12578933" name="avro-1282-v2.patch" size="34977" author="romixlev" created="Tue, 16 Apr 2013 12:15:40 +0000"/>
                            <attachment id="12579112" name="avro-1282-v3.patch" size="30199" author="romixlev" created="Wed, 17 Apr 2013 09:24:14 +0000"/>
                            <attachment id="12579182" name="avro-1282-v4.patch" size="47450" author="romixlev" created="Wed, 17 Apr 2013 19:46:36 +0000"/>
                            <attachment id="12579323" name="avro-1282-v5.patch" size="48313" author="romixlev" created="Thu, 18 Apr 2013 14:20:30 +0000"/>
                            <attachment id="12579509" name="avro-1282-v6.patch" size="48883" author="romixlev" created="Fri, 19 Apr 2013 08:17:40 +0000"/>
                            <attachment id="12580321" name="avro-1282-v7.patch" size="46212" author="romixlev" created="Wed, 24 Apr 2013 17:43:11 +0000"/>
                            <attachment id="12580397" name="avro-1282-v8.patch" size="60916" author="romixlev" created="Wed, 24 Apr 2013 22:08:17 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 22 Mar 2013 17:55:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>319012</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 38 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1j1lr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>319353</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1283] remove static caches from GenericData, SpecificData and ReflectData</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1283</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Currently GenericData, ReflectData and SpecificData are often treated as singletons, through an instance returned by a static get() method.  Because of this, the caches they have must be thread-safe and are also memory leaks.&lt;/p&gt;

&lt;p&gt;Increasingly of late, new instances of these are allocated for use by a given DatumReader or DatumWriter.  This issue explores whether we can:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Change the static get() methods to always return new instances, so that each DatumReader and DatumWriter has its own instance.  Since DatumReader and DatumWriter are not thread-safe, the thread safety requirement could then be removed from caches, increasing their performance; and&lt;/li&gt;
	&lt;li&gt;Change caches to be non-static, to remove potential memory leaks.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12638613">AVRO-1283</key>
            <summary>remove static caches from GenericData, SpecificData and ReflectData</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Mar 2013 23:13:05 +0000</created>
                <updated>Sun, 30 Dec 2018 04:17:17 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="15990268" author="kenn" created="Sun, 30 Apr 2017 15:42:13 +0000"  >&lt;p&gt;I wanted to note that these caches also caused some trouble with classloaders in &lt;a href=&quot;https://issues.apache.org/jira/browse/FLINK-5633&quot; title=&quot;ClassCastException: X cannot be cast to X when re-submitting a job.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;FLINK-5633&quot;&gt;&lt;del&gt;FLINK-5633&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-1970&quot; title=&quot;Cannot run UserScore on Flink runner due to AvroCoder classload issues&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BEAM-1970&quot;&gt;&lt;del&gt;BEAM-1970&lt;/del&gt;&lt;/a&gt;. Maybe this is known but since I didn&apos;t see that mentioned here, I thought I would add a comment.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12638314">AVRO-1277</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12638536">AVRO-1282</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 30 Apr 2017 15:42:13 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>319089</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 38 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1j22v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>319430</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1284] Python: validation should be a method of Schema objects</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1284</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;In Python, validation of a datum by the schema was done in &lt;tt&gt;avro.io.validate&lt;/tt&gt; function.&lt;br/&gt;
The &lt;tt&gt;avro.io.validate&lt;/tt&gt; function is a complex, recursively-called switch statement.&lt;/p&gt;

&lt;p&gt;Instead of calling a two-argument &lt;tt&gt;avro.io.validate&lt;/tt&gt; with a Schema object and a datum, it is easier to understand and extend if they are one-argument methods on the schema.&lt;/p&gt;

&lt;p&gt;I (Jeremy) have written a patch that implements &lt;tt&gt;validate&lt;/tt&gt; methods on Schema objects. This patch will form the prerequisite for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1265&quot; title=&quot;Python: schema objects should support builder() default-filling behavior&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1265&quot;&gt;AVRO-1265&lt;/a&gt; (see &quot;easier to extend&quot; above).&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12639015">AVRO-1284</key>
            <summary>Python: validation should be a method of Schema objects</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="10002" iconUrl="https://issues.apache.org/jira/images/icons/statuses/document.png" description="A patch for this issue has been uploaded to JIRA by a contributor.">Patch Available</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="trochee">Jeremy Kahn</assignee>
                                    <reporter username="trochee">Jeremy Kahn</reporter>
                        <labels>
                            <label>patch</label>
                    </labels>
                <created>Tue, 26 Mar 2013 00:41:55 +0000</created>
                <updated>Fri, 29 Jan 2016 12:35:37 +0000</updated>
                                                            <fixVersion>1.9.0</fixVersion>
                                    <component>python</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13613356" author="trochee" created="Tue, 26 Mar 2013 00:55:05 +0000"  >&lt;p&gt;The &lt;tt&gt;validation-as-method-backwards-compatible&lt;/tt&gt; patch maintains the functional behavior of &lt;tt&gt;avro.io.validate&lt;/tt&gt; by calling the method indirectly, in case users are calling &lt;tt&gt;avro.io.validate&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Prefer this patch to the simpler &lt;tt&gt;validation-as-method&lt;/tt&gt; patch.&lt;/p&gt;</comment>
                            <comment id="13618111" author="trochee" created="Sat, 30 Mar 2013 16:13:57 +0000"  >&lt;p&gt;Seems to be a working fix. tests pass.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12575436" name="validation-as-method-backwards-compatible.patch" size="8018" author="trochee" created="Tue, 26 Mar 2013 00:55:05 +0000"/>
                            <attachment id="12575433" name="validation-as-method.patch" size="7926" author="trochee" created="Tue, 26 Mar 2013 00:49:08 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>319485</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 43 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1j4in:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>319826</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>
