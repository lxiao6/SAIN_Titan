<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:22:28 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2015-9-28+AND+created+%3C%3D+2015-10-7+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="2" total="2"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1743] BlockingBinaryEncoder should override writeFixed(ByteBuffer bytes)</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1743</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;BlockingBinaryEncoder which extends BufferedBinaryEncoder should override &quot;public void writeFixed(ByteBuffer bytes) throws IOException&quot; method.&lt;br/&gt;
Now if we use BlockingBinaryEncoder - all writeFixed(ByteBuffer bytes) are addressed by BufferedBinaryEncoder. As a result, if  &quot;!bytes.hasArray() &amp;amp;&amp;amp; bytes.remaining() &amp;gt; bulkLimit&quot;, then in flushBuffer() we flush empty buffer from BufferedBinaryEncoder and don&apos;t flush actual buffer from BlockingBinaryEncoder.&lt;/p&gt;

&lt;p&gt;I prepared localized unit tests to replicate bugs here: &lt;a href=&quot;https://github.com/Spikhalskiy/avro-blockingbinaryencoder-error&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/Spikhalskiy/avro-blockingbinaryencoder-error&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bug could appears in silently incorrect serialization (We will read another object) or in deserialization errors. Both replicated in provided tests.&lt;/p&gt;

&lt;p&gt;Looks like BlockingBinaryEncoder which extends BufferedBinaryEncoder is error-prone approach and mistake in class hierarchy. We mostly override everything from BufferedBinaryEncoder, creating unused buffers and fields (like double pos, buf, etc), and it&apos;s already not first bug relating to &quot;somebody forget to override method in BlockingBinaryEncoder from BufferedBinaryEncoder&quot; (ex. &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-88&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-88&lt;/a&gt;). So, this classes should be separated at all or have common interface, or at least work with same buffer and pos instances. But BlockingBinaryEncoder shouldn&apos;t inherit method implementations, which work with another buffer object.&lt;/p&gt;</description>
                <environment>&lt;p&gt;All environments&lt;/p&gt;</environment>
        <key id="12902315">AVRO-1743</key>
            <summary>BlockingBinaryEncoder should override writeFixed(ByteBuffer bytes)</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dkulp">Daniel Kulp</assignee>
                                    <reporter username="spikhalskiy">Dmitry Spikhalskiy</reporter>
                        <labels>
                            <label>starter</label>
                    </labels>
                <created>Sun, 4 Oct 2015 14:45:40 +0000</created>
                <updated>Thu, 29 Nov 2018 20:34:46 +0000</updated>
                            <resolved>Thu, 29 Nov 2018 20:34:42 +0000</resolved>
                                    <version>1.7.6</version>
                    <version>1.7.7</version>
                                    <fixVersion>1.9.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="15198259" author="githubbot" created="Wed, 16 Mar 2016 21:50:24 +0000"  >&lt;p&gt;GitHub user tbobrovytsky opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/78&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/78&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1743&quot; title=&quot;BlockingBinaryEncoder should override writeFixed(ByteBuffer bytes)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1743&quot;&gt;&lt;del&gt;AVRO-1743&lt;/del&gt;&lt;/a&gt;: override writeFixed in BlockingBinaryEncoder&lt;/p&gt;



&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/tbobrovytsky/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tbobrovytsky/avro&lt;/a&gt; master&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/78.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/78.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #78&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;</comment>
                            <comment id="15198265" author="tarasbob" created="Wed, 16 Mar 2016 21:54:27 +0000"  >&lt;p&gt;I opened a pull request, can someone please have a look: &lt;br/&gt;
&lt;a href=&quot;https://github.com/apache/avro/pull/78&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/78&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16703771" author="jira-bot" created="Thu, 29 Nov 2018 20:34:39 +0000"  >&lt;p&gt;Commit 6583fcce6d32627c55faf9e1df35cc353b8c8841 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tarasbob&quot; class=&quot;user-hover&quot; rel=&quot;tarasbob&quot;&gt;Taras Bobrovytsky&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=6583fcc&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=6583fcc&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1743&quot; title=&quot;BlockingBinaryEncoder should override writeFixed(ByteBuffer bytes)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1743&quot;&gt;&lt;del&gt;AVRO-1743&lt;/del&gt;&lt;/a&gt;: override writeFixed in BlockingBinaryEncoder&lt;br/&gt;
Closed #78&lt;/p&gt;</comment>
                            <comment id="16703773" author="githubbot" created="Thu, 29 Nov 2018 20:34:46 +0000"  >&lt;p&gt;dkulp closed pull request #78: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1743&quot; title=&quot;BlockingBinaryEncoder should override writeFixed(ByteBuffer bytes)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1743&quot;&gt;&lt;del&gt;AVRO-1743&lt;/del&gt;&lt;/a&gt;: override writeFixed in BlockingBinaryEncoder&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/78&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/78&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/BlockingBinaryEncoder.java b/lang/java/avro/src/main/java/org/apache/avro/io/BlockingBinaryEncoder.java&lt;br/&gt;
index e8b6c3388..351a3aab4 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/io/BlockingBinaryEncoder.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/BlockingBinaryEncoder.java&lt;br/&gt;
@@ -19,6 +19,7 @@&lt;/p&gt;

&lt;p&gt; import java.io.IOException;&lt;br/&gt;
 import java.io.OutputStream;&lt;br/&gt;
+import java.nio.ByteBuffer;&lt;br/&gt;
 import java.util.Arrays;&lt;/p&gt;

&lt;p&gt; import org.apache.avro.AvroTypeException;&lt;br/&gt;
@@ -287,7 +288,20 @@ public void writeDouble(double d) throws IOException {&lt;br/&gt;
   public void writeFixed(byte[] bytes, int start, int len) throws IOException &lt;/p&gt;
{
     doWriteBytes(bytes, start, len);
   }
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public void writeFixed(ByteBuffer bytes) throws IOException &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    int pos = bytes.position();+    int len = bytes.limit() - pos;+    if (bytes.hasArray()) {
+      doWriteBytes(bytes.array(), bytes.arrayOffset() + pos, len);
+    } else {
+      byte[] b = new byte[len];
+      bytes.duplicate().get(b, 0, len);
+      doWriteBytes(b, 0, len);
+    }+  }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+&lt;br/&gt;
   @Override&lt;br/&gt;
   protected void writeZero() throws IOException {&lt;br/&gt;
     ensureBounds(1);&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/ByteBufferRecord.java b/lang/java/avro/src/test/java/org/apache/avro/ByteBufferRecord.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..2ef7b10df&lt;/p&gt;
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/ByteBufferRecord.java&lt;br/&gt;
@@ -0,0 +1,62 @@&lt;br/&gt;
+/**&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro;&lt;br/&gt;
+&lt;br/&gt;
+import java.nio.ByteBuffer;&lt;br/&gt;
+&lt;br/&gt;
+public class ByteBufferRecord {&lt;br/&gt;
+&lt;br/&gt;
+  private ByteBuffer payload;&lt;br/&gt;
+  private TypeEnum tp;&lt;br/&gt;
+&lt;br/&gt;
+  public ByteBufferRecord() { }&lt;br/&gt;
+&lt;br/&gt;
+  public ByteBuffer getPayload() 
{
+    return payload;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public void setPayload(ByteBuffer payload) &lt;/p&gt;
{
+    this.payload = payload;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public TypeEnum getTp() &lt;/p&gt;
{
+    return tp;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public void setTp(TypeEnum tp) &lt;/p&gt;
{
+    this.tp = tp;
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public boolean equals(Object ob) &lt;/p&gt;
{
+    if (this == ob) return true;
+    if (!(ob instanceof ByteBufferRecord))
+      return false;
+    ByteBufferRecord that = (ByteBufferRecord)ob;
+    if (this.getPayload() == null) return that.getPayload() == null;
+    if (!this.getPayload().equals(that.getPayload())) return false;
+    if (this.getTp() == null) return that.getTp() == null;
+    if (!this.getTp().equals(that.getTp())) return false;
+    return true;
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public int hashCode() &lt;/p&gt;
{
+    return this.payload.hashCode();
+  }
&lt;p&gt;+}&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/TestDataFileReflect.java b/lang/java/avro/src/test/java/org/apache/avro/TestDataFileReflect.java&lt;br/&gt;
index 78ff01456..15ad25701 100644&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;a/lang/java/avro/src/test/java/org/apache/avro/TestDataFileReflect.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/TestDataFileReflect.java&lt;br/&gt;
@@ -17,9 +17,8 @@&lt;br/&gt;
  */&lt;br/&gt;
 package org.apache.avro;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;-import java.io.File;&lt;br/&gt;
-import java.io.FileOutputStream;&lt;br/&gt;
-import java.io.IOException;&lt;br/&gt;
+import java.io.*;&lt;br/&gt;
+import java.nio.ByteBuffer;&lt;br/&gt;
 import java.util.ArrayList;&lt;br/&gt;
 import java.util.Arrays;&lt;br/&gt;
 import java.util.List;&lt;br/&gt;
@@ -27,6 +26,10 @@&lt;br/&gt;
 import org.apache.avro.file.DataFileReader;&lt;br/&gt;
 import org.apache.avro.file.DataFileWriter;&lt;br/&gt;
 import org.apache.avro.file.SeekableFileInput;&lt;br/&gt;
+import org.apache.avro.io.BinaryDecoder;&lt;br/&gt;
+import org.apache.avro.io.BinaryEncoder;&lt;br/&gt;
+import org.apache.avro.io.DecoderFactory;&lt;br/&gt;
+import org.apache.avro.io.EncoderFactory;&lt;br/&gt;
 import org.apache.avro.reflect.ReflectData;&lt;br/&gt;
 import org.apache.avro.reflect.ReflectDatumReader;&lt;br/&gt;
 import org.apache.avro.reflect.ReflectDatumWriter;&lt;br/&gt;
@@ -105,6 +108,33 @@ public void testNull() throws IOException &lt;/p&gt;
{
     reader.close();
   }

&lt;p&gt;+  @Test&lt;br/&gt;
+  public void testNew() throws IOException {&lt;br/&gt;
+    ByteBuffer payload = ByteBuffer.allocateDirect(8 * 1024);&lt;br/&gt;
+    for (int i = 0; i &amp;lt; 500; i++) &lt;/p&gt;
{
+      payload.putInt(1);
+    }
&lt;p&gt;+    payload.flip();&lt;br/&gt;
+    ByteBufferRecord bbr = new ByteBufferRecord();&lt;br/&gt;
+    bbr.setPayload(payload);&lt;br/&gt;
+    bbr.setTp(TypeEnum.b);&lt;br/&gt;
+&lt;br/&gt;
+    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();&lt;br/&gt;
+    ReflectDatumWriter&amp;lt;ByteBufferRecord&amp;gt; writer = new ReflectDatumWriter&amp;lt;ByteBufferRecord&amp;gt;(ByteBufferRecord.class);&lt;br/&gt;
+    BinaryEncoder avroEncoder = EncoderFactory.get().blockingBinaryEncoder(outputStream, null);&lt;br/&gt;
+    writer.write(bbr, avroEncoder);&lt;br/&gt;
+    avroEncoder.flush();&lt;br/&gt;
+&lt;br/&gt;
+    byte[] bytes = outputStream.toByteArray();&lt;br/&gt;
+&lt;br/&gt;
+    ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);&lt;br/&gt;
+    ReflectDatumReader&amp;lt;ByteBufferRecord&amp;gt; datumReader = new ReflectDatumReader&amp;lt;ByteBufferRecord&amp;gt;(ByteBufferRecord.class);&lt;br/&gt;
+    BinaryDecoder avroDecoder = DecoderFactory.get().binaryDecoder(inputStream, null);&lt;br/&gt;
+    ByteBufferRecord deserialized = datumReader.read(null, avroDecoder);&lt;br/&gt;
+&lt;br/&gt;
+    Assert.assertEquals(bbr, deserialized);&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
   /*&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Test that writing out and reading in a nested class works&lt;br/&gt;
    */&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 16 Mar 2016 21:50:24 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2mknj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1744] New AvroValueInputFormat class to process Avro messages without a key.</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1744</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;My Avro messages do not contain a Key value and as such, there are no Avro supporting classes to deal with this.&lt;/p&gt;

&lt;p&gt;As I was unable to use the following classes,&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;org.apache.avro.mapreduce.AvroKeyInputFormat&lt;/li&gt;
	&lt;li&gt;org.apache.avro.mapreduce.AvroKeyValueInputFormat&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I created the following supporting classes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/mark1900/druid-sandbox/blob/master/spark-hdfs-avro-test/src/main/java/test/avro/AvroValueInputFormat.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;AvroValueInputFormat&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/mark1900/druid-sandbox/blob/master/spark-hdfs-avro-test/src/main/java/test/avro/AvroValueRecordReader.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;AvroValueRecordReader&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/mark1900/druid-sandbox/blob/master/spark-hdfs-avro-test/src/main/java/test/avro/AvroValueOutputFormat.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;AvroValueOutputFormat&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/mark1900/druid-sandbox/blob/master/spark-hdfs-avro-test/src/main/java/test/avro/AvroValueRecordWriter.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;AvroValueRecordWriter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <environment></environment>
        <key id="12902713">AVRO-1744</key>
            <summary>New AvroValueInputFormat class to process Avro messages without a key.</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="10002" iconUrl="https://issues.apache.org/jira/images/icons/statuses/document.png" description="A patch for this issue has been uploaded to JIRA by a contributor.">Patch Available</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="marks1900">Mark S</reporter>
                        <labels>
                            <label>patch</label>
                            <label>starter</label>
                    </labels>
                <created>Tue, 6 Oct 2015 14:45:16 +0000</created>
                <updated>Wed, 16 Dec 2015 19:33:59 +0000</updated>
                                            <version>1.7.7</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                    <timeoriginalestimate seconds="3600">1h</timeoriginalestimate>
                            <timeestimate seconds="3600">1h</timeestimate>
                                        <comments>
                            <comment id="14945467" author="rdblue" created="Tue, 6 Oct 2015 17:59:25 +0000"  >&lt;p&gt;This seems reasonable to me since some Avro values (maps) that can&apos;t be used in keys. Could you open a pull request or submit a patch?&lt;/p&gt;</comment>
                            <comment id="14945529" author="marks1900" created="Tue, 6 Oct 2015 18:32:58 +0000"  >&lt;p&gt;Requested patch file.  Please review code.  Code comments should be updated to reflect similar classes.&lt;/p&gt;</comment>
                            <comment id="14945536" author="marks1900" created="Tue, 6 Oct 2015 18:35:23 +0000"  >&lt;p&gt;Please update patch files to include better code documentation similar to related classes.&lt;/p&gt;</comment>
                            <comment id="14945544" author="marks1900" created="Tue, 6 Oct 2015 18:42:05 +0000"  >&lt;p&gt;A bit of context as to why I am requesting this functionality.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://stackoverflow.com/questions/32766398/how-do-i-use-java-to-read-avro-data-in-spark-1-3-1/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://stackoverflow.com/questions/32766398/how-do-i-use-java-to-read-avro-data-in-spark-1-3-1/&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12765218" name="avro.patch" size="9801" author="marks1900" created="Tue, 6 Oct 2015 18:32:58 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 6 Oct 2015 17:59:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 15 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2mn3r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>
