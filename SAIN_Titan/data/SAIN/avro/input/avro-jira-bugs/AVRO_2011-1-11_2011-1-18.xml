<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:15:01 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2011-1-11+AND+created+%3C%3D+2011-1-18+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="5" total="5"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-731] documentation should better identify trademarks</title>
                <link>https://issues.apache.org/jira/browse/AVRO-731</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The Avro documentation should better identify Apache trademarks.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12495306">AVRO-731</key>
            <summary>documentation should better identify trademarks</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Tue, 11 Jan 2011 21:37:00 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:56 +0000</updated>
                            <resolved>Wed, 12 Jan 2011 21:07:01 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>doc</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12980382" author="cutting" created="Tue, 11 Jan 2011 22:26:47 +0000"  >&lt;p&gt;I just committed this.  If there are no objections I will resolve this as fixed soon.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4185</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 2 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e24v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80108</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-732] Generated protocol&apos;s method should not throw AvroRemoteException</title>
                <link>https://issues.apache.org/jira/browse/AVRO-732</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;If user does NOT define the throws clause in the idl, the code is generated with &quot;throws AvroRemoteException&quot; clause. However on throwing the AvroRemoteException from the implementation, the serialization fails. This is not intuitive to users.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12495471">AVRO-732</key>
            <summary>Generated protocol&apos;s method should not throw AvroRemoteException</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="sharadag">Sharad Agarwal</reporter>
                        <labels>
                    </labels>
                <created>Thu, 13 Jan 2011 09:25:08 +0000</created>
                <updated>Fri, 29 Jan 2016 12:35:36 +0000</updated>
                                                            <fixVersion>1.9.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>3</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12981189" author="sharadag" created="Thu, 13 Jan 2011 09:25:50 +0000"  >&lt;p&gt;More details and Example. &lt;br/&gt;
a) For idl:&lt;br/&gt;
  void test();&lt;br/&gt;
Generated code is:&lt;br/&gt;
  public void test() throws AvroRemoteException;&lt;/p&gt;

&lt;p&gt;b) For idl:&lt;br/&gt;
  void test1() throws TestError;&lt;br/&gt;
Generated code is:&lt;br/&gt;
  public void test1() throws AvroRemoteException, TestException;&lt;/p&gt;


&lt;p&gt;The generated code should add the throws clause only for the errors defined in idl. &lt;/p&gt;

&lt;p&gt;For above example the generated code should be:&lt;br/&gt;
a) public void test();&lt;br/&gt;
b) public void test1() throws TestException;&lt;/p&gt;</comment>
                            <comment id="12981384" author="cutting" created="Thu, 13 Jan 2011 17:32:03 +0000"  >&lt;p&gt;This sounds like it would be a good improvement.  I can&apos;t recall why I did things this way.  It looks to be a mistake.&lt;/p&gt;</comment>
                            <comment id="12985032" author="scott_carey" created="Sat, 22 Jan 2011 01:47:17 +0000"  >&lt;p&gt;The code always adds AvroRemoteException if is not a one-way message:&lt;/p&gt;

&lt;p&gt;in the compiler&apos;s velocity template protocol.vm there is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;)#if (! $message.isOneWay())&lt;br/&gt;
 throws org.apache.avro.AvroRemoteException##&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;and corresponding logic in the Avro14SpecificCompiler test class.&lt;/p&gt;


&lt;p&gt;Is it OK to remove this?  Or is the suggestion that if an exception is declared, then omit the AvroRemoteException?   If we get rid of it completely, what is the expected behavior when the remote side sends back an error?  I&apos;m not familiar enough with the protocols to fix this, but we should do so for 1.5.0 since the exception signature is changing due to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-737&quot; title=&quot;Java: Improve correlation between packages and modules&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-737&quot;&gt;&lt;del&gt;AVRO-737&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12985746" author="h2o" created="Mon, 24 Jan 2011 15:47:05 +0000"  >&lt;p&gt;My vote would be to:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;get rid of AvroRemoteException in interfaces&lt;/li&gt;
	&lt;li&gt;serialize service-level remote exceptions &amp;amp; pass them through (most exceptions are serializable)&lt;/li&gt;
	&lt;li&gt;throw AvroRemoteExceptions for caught non-RuntimeExceptions, i.e. transport errors as cause&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;AvroRemoteException should therefore not be a subclass of IOException.&lt;/p&gt;

&lt;p&gt;This allows clients and any client-side infrastructure (proxy interceptors etc.) to distinguish between interface-declared service exceptions and undeclared transport exceptions via AvroRemoteExceptions with a cause.&lt;/p&gt;</comment>
                            <comment id="12985775" author="philip" created="Mon, 24 Jan 2011 16:11:12 +0000"  >&lt;p&gt;Serializing Java exceptions only works for Java: I think you&apos;ve more or less got to coerce the exception into a string.&lt;/p&gt;</comment>
                            <comment id="12985793" author="h2o" created="Mon, 24 Jan 2011 16:35:55 +0000"  >&lt;p&gt;Philip: you are of course completely correct - thanks for pointing it out. This means that every implementation needs to be aware of exceptional return values in general, and at least understand the returned &quot;special&quot; payload enough to extract meaningful information from it.&lt;br/&gt;
I guess this brings us to the question whether we should force lowest-common-denominator behaviour on all languages, or allow semantic differences &amp;amp; capabilities to shine through.&lt;/p&gt;</comment>
                            <comment id="12986570" author="cutting" created="Tue, 25 Jan 2011 18:14:16 +0000"  >&lt;p&gt;For specific and reflect code, the natural mapping to me is that errors declared in the protocol should be declared as thrown in the generated interface methods.  Generic code needs to throw something that&apos;s both an exception and contains GenericRecord.  Currently this is done by wrapping a GenericData.Record within a AvroRemoteException.&lt;/p&gt;

&lt;p&gt;I am still +1 for removing AvroRemoteException from the list of exceptions thrown by generated code.  Perhaps other exception-related improvements could be made, but I&apos;d prefer to limit this issue to that improvement if possible.&lt;/p&gt;</comment>
                            <comment id="13006511" author="cutting" created="Mon, 14 Mar 2011 16:55:21 +0000"  >&lt;p&gt;This is an incompatible change to generated interfaces, so we&apos;ll schedule it for 1.6.0.&lt;/p&gt;</comment>
                            <comment id="13474868" author="tino" created="Fri, 12 Oct 2012 07:51:04 +0000"  >&lt;p&gt;This issue is still present in 1.7.2. Are there any plans to do this improvement in one of the next releases?&lt;/p&gt;</comment>
                            <comment id="13475139" author="cutting" created="Fri, 12 Oct 2012 16:42:56 +0000"  >&lt;p&gt;Tino&amp;gt; Are there any plans to do this improvement in one of the next releases?&lt;/p&gt;

&lt;p&gt;We just need a patch and some tests.  This could go into 1.8.0.  I will not have time to work on this for the next few weeks.&lt;/p&gt;</comment>
                            <comment id="13529550" author="yabon" created="Wed, 12 Dec 2012 01:32:46 +0000"  >&lt;p&gt;I attached a patch for removing the AvroRemoteException from the generated code than can be found here as well:&lt;br/&gt;
&lt;a href=&quot;https://github.com/slaunay/avro/commits/enhancement/AVRO-732-remove-generated-remote-exception&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/slaunay/avro/commits/enhancement/AVRO-732-remove-generated-remote-exception&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I changed AvroRemoteException parent class from IOException to RuntimeException in order to still be able to catch it while keeping the code compiling.&lt;br/&gt;
I don&apos;t know if this is the best approach but at least we have a base for going forward now.&lt;/p&gt;</comment>
                            <comment id="13530461" author="cutting" created="Wed, 12 Dec 2012 22:55:33 +0000"  >&lt;p&gt;Using a RuntimeException for undeclared errors is an improvement.  But we should perhaps also split the uses of AvroRemoteException into more than one class.  Its uses include:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;undeclared errors&lt;/li&gt;
	&lt;li&gt;a base class for declared errors&lt;/li&gt;
	&lt;li&gt;a wrapper for error data in the generic API&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We might keep AvroRemoteException for the second use, add a new RuntimeException named AvroUndeclaredException, a new GenericException extending AvroRemoteException that&apos;s used by the Generic API.  Is that overkill?  Can you think of a different re-factoring might break less user code?&lt;/p&gt;</comment>
                            <comment id="13533940" author="yabon" created="Mon, 17 Dec 2012 14:18:31 +0000"  >&lt;p&gt;I made the following modifications:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;AvroRemoteException is now a subclass of Exception&lt;/li&gt;
	&lt;li&gt;Generic &amp;amp; Specific still uses AvroRemoteException for declared exception&lt;/li&gt;
	&lt;li&gt;Reflect does not use AvroRemoteException at all&lt;/li&gt;
	&lt;li&gt;every requestor/responder undeclared error is now wrapped into an AvroRuntimeException&lt;/li&gt;
	&lt;li&gt;Requestor API has been changed to throw &lt;tt&gt;AvroRemoteException&lt;/tt&gt;, &lt;tt&gt;IOException&lt;/tt&gt; and implicitly &lt;tt&gt;AvroRuntimeException&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This breaks user code for sure but it is not too bad I think.&lt;/p&gt;

&lt;p&gt;You can find the new modifications in an attached squashed commit or here:&lt;br/&gt;
&lt;a href=&quot;https://github.com/slaunay/avro/commits/enhancement/AVRO-732-remove-generated-remote-exception&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/slaunay/avro/commits/enhancement/AVRO-732-remove-generated-remote-exception&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know what you think and if altering the Requestor API to have something clearer but not backward compatible is good idea.&lt;/p&gt;</comment>
                            <comment id="13534159" author="cutting" created="Mon, 17 Dec 2012 18:53:53 +0000"  >&lt;p&gt;I&apos;m now starting to worry that switching to an unchecked exception might make it more difficult to write distributed applications.  Remote procedure calls are more likely to fail in than local procedure calls and those failures are often recoverable.  Distributed applications often explicitly consider the failure of every remote call.  Every RPC involves i/o, so always throwing some IOException might be reasonable.&lt;/p&gt;

&lt;p&gt;Does that make any sense?  What is the bug we&apos;re trying to fix here?&lt;/p&gt;</comment>
                            <comment id="13534770" author="yabon" created="Tue, 18 Dec 2012 09:11:26 +0000"  >&lt;p&gt;I understand your concern but if you stand from the responder point of view you don&apos;t want to have a transport exception when implementing your interface.&lt;br/&gt;
When are you supposed to throw a AvroRemoteException or IOException, actually never I think because these exceptions comes from the transport layer not the business layer (except maybe some not wanted runtime exceptions like NPE but you want the framework to translate those automatically I guess).&lt;/p&gt;

&lt;p&gt;On the other hand when using the requestor you want to catch transport errors and differentiate them with business errors indeed. This can be achieved easily with the generic API where you will have documented access to these transport exceptions but not with specific or reflect API because you use a Java interface without those exceptions explicitly declared.&lt;/p&gt;

&lt;p&gt;It&apos;s common practice to use a POJO business interface (not tied to the transport layer) for exporting services like Spring does:&lt;br/&gt;
&lt;a href=&quot;http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/remoting.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/remoting.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I agree that catching an undocumented (from the business interface definition) runtime exception when calling a method is not straightforward but that is also the beauty of it where you can implement a retry logic in a higher level (e.g. where you manage the transaction state) or at this very level through an aspect.&lt;br/&gt;
Existing AvroRemoteException in methods is viral because you need to declare that exception recursively in the higher levels if you want to manage it there.&lt;br/&gt;
I guess most people don&apos;t add the AvroRemoteException to every methods in there interface either when using the reflect API (not the recommended one though) where it is mandatory today in the specific API.&lt;/p&gt;</comment>
                            <comment id="13536572" author="cutting" created="Wed, 19 Dec 2012 23:24:49 +0000"  >&lt;p&gt;&amp;gt; you don&apos;t want to have a transport exception when implementing your interface&lt;/p&gt;

&lt;p&gt;You don&apos;t have to throw or even declare every exception in an interface that you implement.  Still, having it in the interface may be confusing.  Generating two interfaces, one for remote clients and one for implementors, like Spring, would be cleaner.  Or we might just improve the documentation around this.&lt;/p&gt;

&lt;p&gt;&amp;gt; AvroRemoteException in methods is viral [ on clients ]&lt;/p&gt;

&lt;p&gt;This is like IOException.  A checked exception for transport errors seems appropriate on the client.&lt;/p&gt;</comment>
                            <comment id="13537221" author="yabon" created="Thu, 20 Dec 2012 18:13:58 +0000"  >&lt;p&gt;The two interfaces looks cleaner indeed plus we could remove the callback structure on the responder side but it could be a bit confusing for developers to know the one to use I guess.&lt;br/&gt;
This approach is actually used in Spring for RMI and the implementation of JAX-RPC, two somewhat deprecated technologies.&lt;/p&gt;

&lt;p&gt;The recommended technologies by Spring (JAX-RS, JMS, Burlap, Hessian, ...) use the following runtime exception not declared in a single business interface defined by the user:&lt;br/&gt;
&lt;a href=&quot;https://github.com/SpringSource/spring-framework/blob/v3.2.0.RELEASE/spring-context/src/main/java/org/springframework/remoting/RemoteAccessException.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/SpringSource/spring-framework/blob/v3.2.0.RELEASE/spring-context/src/main/java/org/springframework/remoting/RemoteAccessException.java&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A client object simply receives an implementation for the interface that&lt;br/&gt;
it needs via a bean reference, like it does for a local bean as well.&lt;/p&gt;

&lt;p&gt;A client may catch RemoteAccessException if it wants to, but as&lt;br/&gt;
remote access errors are typically unrecoverable, it will probably let&lt;br/&gt;
such exceptions propagate to a higher level that handles them generically.&lt;br/&gt;
In this case, the client code doesn&apos;t show any signs of being involved in&lt;br/&gt;
remote access, as there aren&apos;t any remoting-specific dependencies.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;They insist on the unrecoverable error aspect of such remoting interfaces and they are known to be advocates of RuntimeException especially through their famous template pattern.&lt;br/&gt;
I guess these remoting facilities are more targeted towards J2EE applications rather than highly available distributed applications where you expect things to fail and need explicit control.&lt;/p&gt;

&lt;p&gt;The two interfaces available might actually be the best of both worlds, I am wondering if we could use both of them on the client side with the same &amp;#42;Requestor code.&lt;br/&gt;
That is by introspecting the interface&apos;s method exceptions in the InvocationHandler we can choose whether to throw an AvroRemoteException if declared or else an AvroRuntimeException.&lt;br/&gt;
We can even choose at generation if the user want to have both interfaces or else just the &quot;business&quot; one or else the current one for backward compatibility (might be confusing again if not properly documented).&lt;br/&gt;
The performance impact should be negligible especially if the behaviour is cached per method.&lt;/p&gt;

&lt;p&gt;Today using ReflectResponder will wrap a transport error into an AvroRemoteException except if it is a runtime or a declared exception.&lt;br/&gt;
This means that if somebody uses an interface without AvroRemoteException declared in the methods, the only way to recover is to catch Exception and check it is an AvroRemoteException because catching it directly AvroRemoteException won&apos;t compile.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12560489" name="AVRO-732-remove-generated-remote-exception-2012-12-11.patch" size="12390" author="yabon" created="Wed, 12 Dec 2012 01:32:46 +0000"/>
                            <attachment id="12561288" name="AVRO-732-remove-generated-remote-exception-2012-12-17.patch" size="32235" author="yabon" created="Mon, 17 Dec 2012 14:18:31 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 13 Jan 2011 17:32:03 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>86215</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 years, 5 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i08tq7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>49416</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-733] Avro Java r1059016 does not build due to Checkstyle faulure</title>
                <link>https://issues.apache.org/jira/browse/AVRO-733</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Trying to build avro-java from svn trunk fails in checkstyle:&lt;/p&gt;

&lt;p&gt;&quot;Unused import - org.apache.avro.UnresolvedUnionException&quot; in&lt;br/&gt;
ipc\src\main\java\org\apache\avro\specific\SpecificResponder.java&lt;/p&gt;

&lt;p&gt;I had to run with -Dcheckstyle.skip=true to get anywhere. Maybe consider running checkstyle only on demand or on the build server (set &quot;skip&quot; property from default false to true in the pom and pass skip=false to enable when required).&lt;/p&gt;</description>
                <environment>&lt;p&gt;Win7, JDK6, maven 3.0.2&lt;/p&gt;</environment>
        <key id="12495592">AVRO-733</key>
            <summary>Avro Java r1059016 does not build due to Checkstyle faulure</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.svg">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="scott_carey">Scott Carey</assignee>
                                    <reporter username="h2o">Holger Hoffst&#228;tte</reporter>
                        <labels>
                    </labels>
                <created>Fri, 14 Jan 2011 14:32:55 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:58 +0000</updated>
                            <resolved>Fri, 14 Jan 2011 18:45:31 +0000</resolved>
                                    <version>1.5.0</version>
                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12981824" author="scott_carey" created="Fri, 14 Jan 2011 16:57:17 +0000"  >&lt;p&gt;I noticed this last night as well and was planning on addressing it with some other things.  Very simple patch to follow.&lt;/p&gt;</comment>
                            <comment id="12981831" author="scott_carey" created="Fri, 14 Jan 2011 17:19:28 +0000"  >&lt;p&gt;Unless there are objections, I&apos;ll commit this later today.&lt;/p&gt;</comment>
                            <comment id="12981859" author="scott_carey" created="Fri, 14 Jan 2011 18:28:55 +0000"  >&lt;p&gt;Note that &apos;mvn install&apos; will run checkstyle.  &apos;mvn test&apos; will not.&lt;/p&gt;

&lt;p&gt;Documentation on the new build is not complete yet (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-714&quot; title=&quot;New Java build: Documentation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-714&quot;&gt;&lt;del&gt;AVRO-714&lt;/del&gt;&lt;/a&gt;) &amp;#8211; proper testing before a checkin requires &apos;mvn install&apos; rather than only &apos;mvn test&apos;.  Alternatively we could attach checkstyle to the &apos;test&apos; phase.&lt;/p&gt;</comment>
                            <comment id="12981871" author="scott_carey" created="Fri, 14 Jan 2011 18:45:31 +0000"  >&lt;p&gt;I have committed this.&lt;/p&gt;</comment>
                            <comment id="12981876" author="cutting" created="Fri, 14 Jan 2011 19:04:09 +0000"  >&lt;p&gt;+1 for adding checkstyle to the &apos;test&apos; phase, to better prevent this sort of thing in the future.&lt;/p&gt;</comment>
                            <comment id="12981901" author="scott_carey" created="Fri, 14 Jan 2011 19:49:02 +0000"  >&lt;p&gt;I&apos;ll move checkstyle to the test phase and commit that on this JIRA later today unless there are objections.&lt;/p&gt;</comment>
                            <comment id="12981909" author="h2o" created="Fri, 14 Jan 2011 20:08:25 +0000"  >&lt;p&gt;Agreed, binding to test phase is good. My primary stumbling block was that I had to run install before eclipse (no m2eclipse plugin here) and that failed, so I got nowhere until I found the checkstyle.skip flag..&lt;/p&gt;</comment>
                            <comment id="12981968" author="scott_carey" created="Fri, 14 Jan 2011 23:06:18 +0000"  >&lt;p&gt;tiny patch to change checkstyle to be bound to the &apos;test&apos; phase instead of the &apos;verify&apos; phase.&lt;/p&gt;</comment>
                            <comment id="12981970" author="scott_carey" created="Fri, 14 Jan 2011 23:08:21 +0000"  >&lt;p&gt;checkstyle changed to &apos;test&apos; phase from &apos;verify&apos; phase.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12468426" name="AVRO-733.2.patch" size="436" author="scott_carey" created="Fri, 14 Jan 2011 23:06:18 +0000"/>
                            <attachment id="12468383" name="AVRO-733.patch" size="651" author="scott_carey" created="Fri, 14 Jan 2011 16:58:27 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 14 Jan 2011 16:57:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4152</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 2 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e253:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80109</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-734] Maven build could need a few plugin updates</title>
                <link>https://issues.apache.org/jira/browse/AVRO-734</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Some of the plugins used by default could need a bump to newer versions.&lt;/p&gt;

&lt;p&gt;According to mvn versions:display-plugin-updates this affects:&lt;/p&gt;

&lt;p&gt;maven-compiler-plugin&lt;br/&gt;
maven-surefire-plugin&lt;br/&gt;
paranamer-maven-plugin&lt;br/&gt;
maven-jar-plugin&lt;/p&gt;

&lt;p&gt;I&apos;ve been using the newer plugins in other projects without issue.&lt;/p&gt;
</description>
                <environment>&lt;p&gt;Win7, JDK6, maven 3.0.2&lt;/p&gt;</environment>
        <key id="12495593">AVRO-734</key>
            <summary>Maven build could need a few plugin updates</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.svg">Trivial</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="h2o">Holger Hoffst&#228;tte</assignee>
                                    <reporter username="h2o">Holger Hoffst&#228;tte</reporter>
                        <labels>
                    </labels>
                <created>Fri, 14 Jan 2011 14:40:13 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:45 +0000</updated>
                            <resolved>Fri, 14 Jan 2011 18:38:39 +0000</resolved>
                                    <version>1.5.0</version>
                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12981782" author="h2o" created="Fri, 14 Jan 2011 15:09:36 +0000"  >&lt;p&gt;Patches for parent pom.xml and compiler/pom.xml. The latter was just cleaned up to not duplicate the version; instead it is taken from the parent&apos;s pluginManagement section.&lt;/p&gt;</comment>
                            <comment id="12981783" author="h2o" created="Fri, 14 Jan 2011 15:11:02 +0000"  >&lt;p&gt;Btw I&apos;ve run all tests without issue, except for mapred which doesn&apos;t like Windows since it tries to fork chmod.&lt;/p&gt;</comment>
                            <comment id="12981860" author="scott_carey" created="Fri, 14 Jan 2011 18:32:08 +0000"  >&lt;p&gt;I have been testing these changes as well recently.   This is trivial and will simplify the review of other changes I&apos;ll be making to the java build in preparation for 1.5.0.&lt;/p&gt;

&lt;p&gt;I have committed this.&lt;/p&gt;</comment>
                            <comment id="12981865" author="scott_carey" created="Fri, 14 Jan 2011 18:38:39 +0000"  >&lt;p&gt;Contributed by Holger Hoffst&#228;tte via scottcarey&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12468374" name="compiler-pom.xml.patch" size="484" author="h2o" created="Fri, 14 Jan 2011 15:09:36 +0000"/>
                            <attachment id="12468373" name="pom.xml.patch" size="1634" author="h2o" created="Fri, 14 Jan 2011 15:09:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 14 Jan 2011 18:32:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4225</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 2 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e25b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80110</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-735] Split packages across artifacts</title>
                <link>https://issues.apache.org/jira/browse/AVRO-735</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I was glad to see the ongoing work for a more modular build (thanks Scott Carey!). Whilst looking into the cross-platform IPC facilities for use in OSGi I noticed something that makes OSGi compatibility (and maintenance) more difficult than necessary, for no good reason. I plan to submit OSGi bundle patches later (though not necessarily for the 1.5.0 release) so this is a necessary prelude.&lt;/p&gt;

&lt;p&gt;The term &quot;split packages&quot; refers to the situation that two artifacts carry the same packages, which means that the classes in both packages are more or less randomly munged together at runtime. This unfortunate situation is &quot;mostly&quot; without consequence in &quot;normal&quot; flat-classpath Java (assuming there are no overlaps!), but bad for OSGi since class visibility &amp;amp; wiring is based on package visibility. Split packages generally make any form of automatic package resolution (for deployment) almost impossible.&lt;/p&gt;

&lt;p&gt;As far as I can see there are several classes in packages across artifacts that can easily be moved a bit without really disturbing anything. Some examples:&lt;/p&gt;

&lt;p&gt;org.apache.avro.specific is defined by acro, compiler AND ipc&lt;/p&gt;

&lt;p&gt;org.apache.avro.ipc &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/warning.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; is defined in avro and contains classes that could go into avro:avro.io (the buffers) or avro-ipc:org.apache.avro.ipc&lt;/p&gt;

&lt;p&gt;It seems that the previously unmodular package membership of classes has been carried over during the artifact separation. I&apos;d like to see this cleaned up as well before the 1.5.0 release, as this is a breaking change. However, most of the overlaps can be fixed easily with IDE refactorings like package renaming or by moving classes.&lt;/p&gt;

&lt;p&gt;Please let me know if this is an acceptable change and if you want me to provide help/patches etc.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12495596">AVRO-735</key>
            <summary>Split packages across artifacts</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="scott_carey">Scott Carey</assignee>
                                    <reporter username="h2o">Holger Hoffst&#228;tte</reporter>
                        <labels>
                    </labels>
                <created>Fri, 14 Jan 2011 15:27:19 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:43 +0000</updated>
                            <resolved>Fri, 28 Jan 2011 01:12:15 +0000</resolved>
                                    <version>1.5.0</version>
                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>0</watches>
                                                                                                            <comments>
                            <comment id="12981857" author="scott_carey" created="Fri, 14 Jan 2011 18:25:16 +0000"  >&lt;p&gt;The initial move did not try and solve this problem because it is trickier than it looks and would complicate the initial split ticket significantly.&lt;/p&gt;

&lt;p&gt;There are some cases that would be simple moves, but there are others that simple movement would require changing classes or methods with package scope visibility to public, which is not acceptable.  To avoid this there is more refactoring required and some API breakages.   &lt;/p&gt;

&lt;p&gt;This is a change that I agree we should attempt, but I&apos;m not convinced that we should do so before 1.5.0 or that it is even possible.  If it is we could introduce the resulting API breakages in a later release.  1.5.0 may be very soon.&lt;/p&gt;

&lt;p&gt;Conceptually, the requirement that we can&apos;t share packages across jars means that avro-ipc can only use public API&apos;s to work with avro &amp;#8211; and that may never be desirable.  &lt;br/&gt;
Its not possible to build avro-ipc and avro using Maven in the same project &amp;#8211; avro-ipc requires compiling schema files into Java classes.  In order to compile those schema files, the build needs to have already created the avro-compiler artifact which depends on avro.&lt;/p&gt;

&lt;p&gt;Would it be possible for OSGi to simply not support a smaller bundle than avro + avro-ipc?  I think all other components can separate cleanly by package.&lt;br/&gt;
Alternatively, we could build a variation avro-ipc.jar that shades in avro.jar that could be the smallest unit for OSGi.  This however would mean that all Avro users have to pull in jetty and netty even if they aren&apos;t using those features.&lt;/p&gt;

&lt;p&gt;Another approach would be to trim the dependencies from avro-ipc down by removing implementations like netty and jetty.  Then we could have a separate jar with those implementations, which could be in a different package.&lt;/p&gt;</comment>
                            <comment id="12982587" author="h2o" created="Mon, 17 Jan 2011 10:42:16 +0000"  >
&lt;p&gt;&amp;gt; The initial move did not try and solve this problem because it is&lt;br/&gt;
&amp;gt; trickier than it looks and would complicate the initial split ticket&lt;br/&gt;
&amp;gt; significantly.&lt;/p&gt;

&lt;p&gt;That&apos;s fine - probably would have done the same thing initially. What I don&apos;t understand is: if the separate artifacts are tied to each other anyway, why split them up in the first place?&lt;br/&gt;
If the dependency for ipc, mapred and tools were the motivation then maybe avro, compiler and ipc should have stayed one project, with ipc&apos;s transport-specific dependencies separated out.&lt;br/&gt;
Sorry, not blaming anyone..came too late to the party to suggest otherwise :/&lt;/p&gt;

&lt;p&gt;&amp;gt; There are some cases that would be simple moves, but there are others&lt;br/&gt;
&amp;gt; that simple movement would require changing classes or methods with&lt;br/&gt;
&amp;gt; package scope visibility to public, which is not acceptable.  To&lt;br/&gt;
&amp;gt; avoid this there is more refactoring required and some API breakages.&lt;/p&gt;

&lt;p&gt;I understand, but why does this preclude doing the easy/nonbreaking things now? I mean, I really cannot see any reason why avro:..ipc has to contain generic IOStream classes just because they are also used in ipc. Move them to avro:..io and done. Same for the AvroRemoteException - it can stay in avro alright, but there is no harm by moving it into avro..io or wherever. Bang: one down.&lt;/p&gt;

&lt;p&gt;&amp;gt; This is a change that I agree we should attempt, but I&apos;m not&lt;br/&gt;
&amp;gt; convinced that we should do so before 1.5.0 or that it is even&lt;br/&gt;
&amp;gt; possible.  If it is we could introduce the resulting API breakages in&lt;br/&gt;
&amp;gt; a later release.  1.5.0 may be very soon.&lt;/p&gt;

&lt;p&gt;..which is why I wanted to fix the easy (really trivial) things now; I am not at all suggesting the full surgery in the last minute. My understanding is that 1.5 is already another break compared to previous versions (see the Hadoop-related drama). Selling more breaks later will just get harder and harder.&lt;br/&gt;
Can&apos;t really put the horseshoes under the horse when it&apos;s out of the barn..&lt;/p&gt;

&lt;p&gt;&amp;gt; Conceptually, the requirement that we can&apos;t share packages across&lt;br/&gt;
&amp;gt; jars means that avro-ipc can only use public API&apos;s to work with avro&lt;br/&gt;
&amp;gt; &amp;#8211; and that may never be desirable.&lt;/p&gt;

&lt;p&gt;So have public and private APIs?! No need to rely on package overlaps for that.&lt;/p&gt;

&lt;p&gt;&amp;gt; Its not possible to build avro-ipc and avro using Maven in the same&lt;br/&gt;
&amp;gt; project &amp;#8211; avro-ipc requires compiling schema files into Java&lt;br/&gt;
&amp;gt; classes.  In order to compile those schema files, the build needs to&lt;br/&gt;
&amp;gt; have already created the avro-compiler artifact which depends on&lt;br/&gt;
&amp;gt; avro.&lt;/p&gt;

&lt;p&gt;I think that just shows that those three really belong together, and that dependency problems come from ipc, mapred and the tools. avro, compiler and ipc together are still pretty small.&lt;/p&gt;

&lt;p&gt;&amp;gt; Would it be possible for OSGi to simply not support a smaller bundle&lt;br/&gt;
&amp;gt; than avro + avro-ipc?  I think all other components can separate&lt;br/&gt;
&amp;gt; cleanly by package. Alternatively, we could build a variation&lt;br/&gt;
&amp;gt; avro-ipc.jar that shades in avro.jar that could be the smallest unit&lt;br/&gt;
&amp;gt; for OSGi.  This however would mean that all Avro users have to pull&lt;br/&gt;
&amp;gt; in jetty and netty even if they aren&apos;t using those features.&lt;/p&gt;

&lt;p&gt;I&apos;m not convinced that trying to build &quot;special&quot; artifacts is going to fix anything in either the short, medium or long runs. As an example, it&apos;s fairly easy to embed the avro/compiler/ipc trifecta and just block the imports that a bundle doesn&apos;t need (assuming the bundle has service-like standalone functionality). This would only be necessary for no good reason whatsoever, increase bloat and cost everyone&apos;s time over and over again.&lt;br/&gt;
I fully agree that not every jar has to be bundleized by itself (as some people try and complain about..), but if the jar is useless on its own without a set of add-ons - why are they separate in the first place?&lt;/p&gt;

&lt;p&gt;Maybe I should have explained my initial motivation for all this earlier &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I intend to use avro-ipc as a transport layer for OSGi RemoteServices, and probably would have been fine with split packages etc. since I can just embed the jars into the transport bundle and block stuff I don&apos;t need, as described above. But since 1.5.0 is already a breaking release I figured we can fix the easy things now, so that I can go spelunking on the not-so-easy things afterwards, for 1.6/2.0.&lt;/p&gt;

&lt;p&gt;&amp;gt; Another approach would be to trim the dependencies from avro-ipc down&lt;br/&gt;
&amp;gt; by removing implementations like netty and jetty.  Then we could have&lt;br/&gt;
&amp;gt; a separate jar with those implementations, which could be in a&lt;br/&gt;
&amp;gt; different package.&lt;/p&gt;

&lt;p&gt;This would have been my step 3 or 5 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Definitely a good way forward and also very useful for non-OSGi (plain maven etc.) users.&lt;/p&gt;

&lt;p&gt;Not sure if that helped? I don&apos;t want to hold up the release.&lt;/p&gt;</comment>
                            <comment id="12982823" author="scott_carey" created="Mon, 17 Jan 2011 19:47:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;I understand, but why does this preclude doing the easy/nonbreaking things now? I mean, I really cannot see any reason why avro:..ipc has to contain generic IOStream classes just because they are also used in ipc. Move them to avro:..io and done. Same for the AvroRemoteException - it can stay in avro alright, but there is no harm by moving it into avro..io or wherever. Bang: one down.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The only consideration there is public classes.  If its public, moving them is an API breakage.  We can do that, but until now there was little motivation.  This affects OSGi users and not others.  I&apos;ll have a look at moving the easy stuff like the IOStream and AvroRemoteException bits which were already discussed in the past (but we saw no harm in leaving them alone).&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;So have public and private APIs?! No need to rely on package overlaps for that.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Someone would have to document it or use some annotation framework to declare what is public and private.   And the vast majority of users will not use such an annotation framework and will ONLY look at what can be accessed and the Javadoc. I feel that its always best to use the built-in java visibility when possible.  I&apos;m not sure OSGi alone is enough of a driver to expose non-public APIs.  &lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;I think that just shows that those three really belong together, and that dependency problems come from ipc, mapred and the tools. avro, compiler and ipc together are still pretty small.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Their dependencies are not small.  Furhtermore, as I said it is &lt;em&gt;not possible&lt;/em&gt; to build all three at once with maven.   You need the output artifacts of one to generate code to compile another.  It is possible to do this in two modules (avro + compile, ipc), but not one.  Three makes the most sense since we want to separate out the compiler dependencies.  If you aren&apos;t using the compiler, why would you require pulling in its unique dependencies?  We want to be able to use any dependency we wish in the compiler without forcing the maven/ivy user to have those on their classpath by default.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;As an example, it&apos;s fairly easy to embed the avro/compiler/ipc trifecta and just block the imports that a bundle doesn&apos;t need (assuming the bundle has service-like standalone functionality).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If its easy to make an OSGi bundle with a couple jars then this is definitely preferred over making a custom bundled jar artifact.   Most likely this would be avro + ipc unless you need the compiler functionality to create java classes from .avpr .avsc or .avdl files.&lt;/p&gt;


&lt;p&gt;I propose that we look at the low hanging fruit stuff for 1.5.0 &amp;#8211; simple things like AvroRemoteException that reduce the number of packages that overlap amongst artifacts.  As long as this doesn&apos;t force something dangerous to be publicly visible I&apos;m fine with that.  We&apos;ll need others to agree however.&lt;/p&gt;

&lt;p&gt;Items such as moving netty/jetty and tracing out on their own are definitely not in scope for 1.5.0, nor attempting to untangle ipc and avro.   The current structure may not be ideal for OSGi but it is a HUGE improvement for most  ivy and maven users.&lt;/p&gt;</comment>
                            <comment id="12985234" author="scott_carey" created="Sun, 23 Jan 2011 03:08:13 +0000"  >&lt;p&gt;I did not expect to be able to completely separate packages to be distinct per artifact, but the patch in the child task &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-737&quot; title=&quot;Java: Improve correlation between packages and modules&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-737&quot;&gt;&lt;del&gt;AVRO-737&lt;/del&gt;&lt;/a&gt; does just that.&lt;/p&gt;

&lt;p&gt;There is more to do on the test side, but that can happen after 1.5.0.&lt;/p&gt;</comment>
                            <comment id="12987869" author="scott_carey" created="Fri, 28 Jan 2011 01:12:15 +0000"  >&lt;p&gt;This was resolved in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-737&quot; title=&quot;Java: Improve correlation between packages and modules&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-737&quot;&gt;&lt;del&gt;AVRO-737&lt;/del&gt;&lt;/a&gt;.   I had expected to only partially resolve this there, but ended up completing all of it.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                            <subtask id="12495934">AVRO-737</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 14 Jan 2011 18:25:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4172</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e25j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80111</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
