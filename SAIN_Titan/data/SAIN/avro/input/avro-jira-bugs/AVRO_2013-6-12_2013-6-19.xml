<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:18:50 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2013-6-12+AND+created+%3C%3D+2013-6-19+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="1" total="1"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1347] Improve name and alias matching for named schemas</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1347</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;When reading an avro file with a named schema, the aliases of the writers schema are not taken into account; only the aliases of the readers are matched against the writers name. Even if the writers aliases match the readers name, the schemas will not be matched.&lt;/p&gt;

&lt;p&gt;For example, the following two enum schemas will not be matched, even though they share a common alias. &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{
	&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;  : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;,
	&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;  : &lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;,
	&lt;span class=&quot;code-quote&quot;&gt;&quot;alias&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;CommonAlias&quot;&lt;/span&gt;,
	&lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt; : [&lt;span class=&quot;code-quote&quot;&gt;&quot;LEFT&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;RIGHT&quot;&lt;/span&gt;]

}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{
	&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;  : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;,
	&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;  : &lt;span class=&quot;code-quote&quot;&gt;&quot;bar&quot;&lt;/span&gt;,
	&lt;span class=&quot;code-quote&quot;&gt;&quot;alias&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;CommonAlias&quot;&lt;/span&gt;,
	&lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt; : [&lt;span class=&quot;code-quote&quot;&gt;&quot;LEFT&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;RIGHT&quot;&lt;/span&gt;]

}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In most cases, the DatumReader resolves records of different names or namespaces by matching their fields. &lt;br/&gt;
Unfortunately, there are some cases, where this sort of matching is not happening, but just the names are compared:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Other named nodes, like enums, fixed or fieldschemas are not matched this way.&lt;/li&gt;
	&lt;li&gt;A record inside a union is also only matched by the full name.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The latter one is especially tricky, since two recordschemas that match structurally but differ in name or space, are interexchangable until they are put into an union, at which point an exception is thrown.&lt;/p&gt;

&lt;p&gt;I propose that two named schemas are matched, when they share a common name or alias. &lt;br/&gt;
I implemented said changes and added a java annotation @AvroAlias(alias, space) that allows one to add an alias to a record, enum or field.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12652454">AVRO-1347</key>
            <summary>Improve name and alias matching for named schemas</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="vince83">Vincenz Priesnitz</reporter>
                        <labels>
                    </labels>
                <created>Wed, 12 Jun 2013 18:34:13 +0000</created>
                <updated>Thu, 9 Feb 2017 08:55:14 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>7</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="13681484" author="vince83" created="Wed, 12 Jun 2013 18:36:01 +0000"  >&lt;p&gt;Please review this patch which resolves this issue.&lt;/p&gt;</comment>
                            <comment id="13699247" author="cutting" created="Wed, 3 Jul 2013 17:51:48 +0000"  >&lt;p&gt;This is a fundamental change to alias semantics.  If we implement it, we&apos;ll need to add it to the specification too.&lt;/p&gt;

&lt;p&gt;I&apos;m not (yet) convinced this change is required.  The writer&apos;s schema is currently used minimally--one can generally replace writer schemas with their Parsing Canonical Form and everything would work the same.  The reader&apos;s schema is used to interpret the data, containing aliases and other annotations that influence the representation of that data.  In the above case, is there a reason that &quot;foo&quot; cannot be added to the aliases of &quot;bar&quot;?  The reader&apos;s schema is assumed to be malleable and the writer&apos;s is not.&lt;/p&gt;

&lt;p&gt;Looking at the patch (should we choose to implement this), one potential bug is that one cannot specify an alias that has no namespace.  Probably null should be interpreted as the containing namespace and the empty string as no namespace.&lt;/p&gt;

&lt;p&gt;Perhaps the annotation should be moved to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1341&quot; title=&quot;Allow controlling avro via java annotations when using reflection. &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1341&quot;&gt;&lt;del&gt;AVRO-1341&lt;/del&gt;&lt;/a&gt;, independent of the change in alias semantics?&lt;/p&gt;

&lt;p&gt;Also, the patch needs unit tests.&lt;/p&gt;</comment>
                            <comment id="13699588" author="martinkl" created="Wed, 3 Jul 2013 23:22:25 +0000"  >&lt;p&gt;I can imagine a scenario where this may be useful. Say you have a key-value store; each value is a pair of (schema-id, avro-data) where schema-id identifies the writer&apos;s schema, and avro-data is encoded using that schema. Various different clients read values from the store and write values to the store.&lt;/p&gt;

&lt;p&gt;Some clients may be using a newer version of the schema than others (e.g. the client may use specific classes generated from the version of the schema that was current at the time the client was built). &lt;/p&gt;

&lt;p&gt;In this scenario, when evolving the schema, fields or types cannot safely be renamed, because clients built using the old schema cannot read values written by clients with a newer schema. Using alias information in the writer schema would allow such clients to map the names in the newer schema into their own, older schema, without rebuilding clients. That would be an advantage of this change.&lt;/p&gt;

&lt;p&gt;However, there are also other things you cannot safely do in this scenario. For example, you cannot add a branch to a union, or a symbol to an enum, because again clients built using an older version of the schema would not be able to map occurrences of that new union branch or enum symbol into their own old-schema world.&lt;/p&gt;

&lt;p&gt;This suggests that this scenario is a use case that Avro doesn&apos;t really support anyway (though perhaps we should give some guidance to people who have a use case like this). Which means that this scenario doesn&apos;t really support changing alias semantics. Perhaps there are other scenarios that would support it more strongly, but so far I don&apos;t think we have strong enough arguments for changing semantics.&lt;/p&gt;

&lt;p&gt;In general, I would suggest being very cautious about any spec changes. A lot of the appeal of a serialization format like Avro is that it takes compatibility very seriously, which makes it suitable for long-lived systems. A data serialization format is not a place to be adventurous.&lt;/p&gt;</comment>
                            <comment id="13700214" author="vince83" created="Thu, 4 Jul 2013 16:56:32 +0000"  >&lt;p&gt;Thanks a lot for the indepth review. &lt;/p&gt;

&lt;p&gt;I moved the annotation to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1341&quot; title=&quot;Allow controlling avro via java annotations when using reflection. &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1341&quot;&gt;&lt;del&gt;AVRO-1341&lt;/del&gt;&lt;/a&gt;. I think the annotation is still handy even without writer schema aliases. &lt;/p&gt;

&lt;p&gt;There are scenarios where it is not possible to add aliases to the readers schema when using reflection, for example if i have no control over the class or when reading an avro file with a specificreader, it is not possible to add aliases to the reader. &lt;br/&gt;
The change is backwards compatible, but it enhances flexibility when using reflection. &lt;/p&gt;
</comment>
                            <comment id="13870822" author="ipostelnik" created="Tue, 14 Jan 2014 15:40:33 +0000"  >&lt;p&gt;We have this problem as well with forward compatibility of data stored in hadoop. When a job that produces a dataset is updated to rename a field, the client jobs that consume this dataset have to be recompiled. This is an important requirement for supporting schema evolution.&lt;/p&gt;</comment>
                            <comment id="14222481" author="ravishanbhag" created="Sun, 23 Nov 2014 19:57:12 +0000"  >&lt;p&gt;Same here.. If my Writer has upgraded to define aliases and create a Super Schema (that comprises of the aliases), then my old Readers would cease to work unless they are changed refer to the new Super Schema. Besides Schema Evolution mentioned by Igor this would also help different applications with different upgrade life-cycles to continue to work without getting errored out.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12649437">AVRO-1340</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12587790" name="AVRO-1347.patch" size="9642" author="vince83" created="Fri, 14 Jun 2013 08:19:17 +0000"/>
                            <attachment id="12587477" name="AVRO-1347.patch" size="8005" author="vince83" created="Wed, 12 Jun 2013 18:36:01 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 3 Jul 2013 17:51:48 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>332778</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 9 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1leo7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>333107</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>
