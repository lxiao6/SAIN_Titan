<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:14:47 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2010-11-9+AND+created+%3C%3D+2010-11-16+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="1" total="1"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-695] Cycle Reference Support</title>
                <link>https://issues.apache.org/jira/browse/AVRO-695</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;This is a proposed implementation to add cycle reference support to Avro. It basically introduce a new type named Cycle. Cycles contains a string representing the path to the other reference.&lt;/p&gt;

&lt;p&gt;For example if we have an object of type Message that have a member named previous with type Message too. If we have have this hierarchy:&lt;/p&gt;

&lt;p&gt;message&lt;br/&gt;
  previous : message2&lt;/p&gt;

&lt;p&gt;message2&lt;br/&gt;
  previous : message2&lt;/p&gt;

&lt;p&gt;When serializing the cycle path for &quot;message2.previous&quot; will be &quot;previous&quot;.&lt;/p&gt;

&lt;p&gt;The implementation depend on ANTLR to evaluate those cycle at read time to resolve them. I used ANTLR 3.2. This dependency is not mandated; I just used ANTLR to speed thing up. I kept in this implementation the generated code from ANTLR though this should not be the case as this should be generated during the build. I only updated the Java code.&lt;/p&gt;

&lt;p&gt;I did not make full unit testing but you can find &quot;avrotest.Main&quot; class that can be used a preliminary test.&lt;/p&gt;

&lt;p&gt;Please do not hesitate to contact me for further clarification if this seems interresting.&lt;/p&gt;

&lt;p&gt;Best regards,&lt;br/&gt;
Moustapha Cherri&lt;/p&gt;</description>
                <environment></environment>
        <key id="12479970">AVRO-695</key>
            <summary>Cycle Reference Support</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rdblue">Ryan Blue</assignee>
                                    <reporter username="mcherri">Moustapha Cherri</reporter>
                        <labels>
                    </labels>
                <created>Mon, 15 Nov 2010 16:01:16 +0000</created>
                <updated>Thu, 4 Feb 2016 22:53:42 +0000</updated>
                            <resolved>Wed, 3 Feb 2016 19:18:26 +0000</resolved>
                                    <version>1.7.6</version>
                                    <fixVersion>1.8.0</fixVersion>
                                    <component>spec</component>
                        <due></due>
                            <votes>4</votes>
                                    <watches>10</watches>
                                    <timeoriginalestimate seconds="2419200">672h</timeoriginalestimate>
                            <timeestimate seconds="2419200">672h</timeestimate>
                                        <comments>
                            <comment id="12932098" author="mcherri" created="Mon, 15 Nov 2010 16:03:08 +0000"  >&lt;p&gt;implementation patch from version 1.4.1&lt;/p&gt;</comment>
                            <comment id="12976065" author="xiaoluye" created="Thu, 30 Dec 2010 16:36:24 +0000"  >&lt;p&gt;Moustapha,&lt;/p&gt;

&lt;p&gt;Our project need cycle reference support. Thanks for submitting the patch. When trying to use it, I noticed a bug in GenericData.Array. It needs to override AbstractList.set(int, T) as below section of GenericDatumReader.interpretCycles() uses set call. Currently, it throws UnsupportedOperationException at line 175&lt;/p&gt;

&lt;p&gt;            if (record instanceof List) &lt;/p&gt;
{
              ((List) record).set(Integer.parseInt(field), result); // line 175
            }
&lt;p&gt; else &lt;/p&gt;
{
              Array.set(record, Integer.parseInt(field), result);
            }

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Xiaolu&lt;/p&gt;</comment>
                            <comment id="12977510" author="mcherri" created="Tue, 4 Jan 2011 22:43:49 +0000"  >&lt;p&gt;Dear Xiaolu,&lt;/p&gt;

&lt;p&gt;Please find the fix to the issue you mentioned. I fixed more issues related to GenericDatumReader too.&lt;/p&gt;

&lt;p&gt;Thanks for your reply and interest in this.&lt;/p&gt;

&lt;p&gt;Best regards,&lt;br/&gt;
Moustapha Cherri&lt;/p&gt;</comment>
                            <comment id="12978470" author="cutting" created="Thu, 6 Jan 2011 19:42:09 +0000"  >&lt;p&gt;The current patch is a specification change, since it adds a new schema type, &quot;cycle&quot;.  It is back-compatible, but not forward-compatible: implementations that do not implement cycles would be unable to read data that contains cycle schemas.&lt;/p&gt;

&lt;p&gt;Instead, a schema for a cycle reference might be defined.  For example, one could define a org.apache.avro.cycles.CycleReference record containing a single integer field.  CycleReference would only be used in unions with types that it may refer to.  The DatumWriter would keep a IdentityHashMap&amp;lt;Object,Integer&amp;gt; of records, maps and arrays written, adding an entry the first time an instance is seen, and writing a CycleReference for subsequent occurrences in appropriate unions.  The DatumReader would then keep an array of all records, maps and arrays that have been read and, when it reads a CycleReference in a union, return a pointer to the indicated element of that array.&lt;/p&gt;

&lt;p&gt;Adding cycles should not slow applications that do not require this feature.  They could be implemented in newly defined CycleDatumReader/Writer, or perhaps GenericDatumReader and GenericDatumWriter could be modified to optionally handle such cycles.&lt;/p&gt;</comment>
                            <comment id="12979402" author="mcherri" created="Sun, 9 Jan 2011 20:34:34 +0000"  >&lt;p&gt;Dear Doug,&lt;/p&gt;

&lt;p&gt;Thanks for your valuable comments. I agree with you. I will implement them soon. I will build a wrapper around GenericDatumReader and GenericDatumWriter so that applications can inject this aspect as needed. Wrapping will allow application using for example ReflectDatumReader/ ReflectDatumWriter to use this feature without implementing a new special class for them.&lt;/p&gt;

&lt;p&gt;Best regards,&lt;br/&gt;
Moustapha Cherri&lt;/p&gt;</comment>
                            <comment id="14029917" author="sachingoyal" created="Thu, 12 Jun 2014 22:12:22 +0000"  >&lt;p&gt;Support for circular references without modifying the grammar.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, this patch takes above recommendations into account.&lt;/p&gt;

&lt;p&gt;Example of a simple circular reference (very common in Java and Hibernate world):&lt;br/&gt;
-------------------&lt;br/&gt;
class Parent&lt;br/&gt;
{&lt;br/&gt;
  String name;&lt;br/&gt;
  Child child;&lt;br/&gt;
};&lt;/p&gt;

&lt;p&gt;class Child&lt;br/&gt;
{&lt;br/&gt;
  Parent parent;&lt;br/&gt;
  String city;&lt;br/&gt;
};&lt;br/&gt;
-------------------&lt;br/&gt;
Without this fix, Avro correctly generates schema for the above but fails with StackOverflow error when trying to serialize actual objects with circular reference.&lt;/p&gt;

&lt;p&gt;This fix requires following steps for using it:&lt;br/&gt;
1) Allow clients to choose name of the extra-field which every entity can use to store its ID.&lt;br/&gt;
        ReflectData rdata = ReflectData.AllowNull.get();&lt;br/&gt;
        rdata.setCircularRefIdPrefix(&quot;__crefId&quot;);&lt;/p&gt;

&lt;p&gt;2) One must pass the same rdata when serializing objects.&lt;br/&gt;
        DatumWriter&amp;lt;T&amp;gt; datumWriter = new ReflectDatumWriter (T.class, rdata);&lt;/p&gt;

&lt;p&gt;3) MUST use the same field-name when reading circular-reference objects.&lt;br/&gt;
        GenericDatumReader&amp;lt;GenericRecord&amp;gt; datumReader = new GenericDatumReader&amp;lt;GenericRecord&amp;gt; ();&lt;br/&gt;
        GenericData gdata = datumReader.getData();&lt;br/&gt;
        gdata.setCircularRefIdPrefix(&quot;__crefId&quot;);&lt;br/&gt;
  If field-name is different, there may be no error but circular references will not be resolved.&lt;/p&gt;

&lt;p&gt;4) Choose if the circular references should be fully resolved or not.&lt;br/&gt;
        datumReader.setResolveCircularRefs (false);&lt;br/&gt;
   If this is set to true, circular references will point to actual objects forming a cycle.&lt;br/&gt;
   If this is set to false, circular references will point to dummy objects having only the circular-reference-ID. This option allows Avro to work everywhere else without running into infinite loops (like GenericRecord.toString()) while providing users enough information to&lt;br/&gt;
   form true circular references themselves if required.&lt;/p&gt;

&lt;p&gt;Test-case provided for circular references in List and Maps as well.&lt;br/&gt;
Happy to make modifications if any.&lt;/p&gt;</comment>
                            <comment id="14029918" author="sachingoyal" created="Thu, 12 Jun 2014 22:13:08 +0000"  >&lt;p&gt;Avro-Circular-References-1.7.6&lt;/p&gt;</comment>
                            <comment id="14029922" author="sachingoyal" created="Thu, 12 Jun 2014 22:17:13 +0000"  >&lt;p&gt;For designs with no circular reference, the above options need not be used and those clients would not be affected thus.&lt;/p&gt;</comment>
                            <comment id="14030889" author="cutting" created="Fri, 13 Jun 2014 17:42:59 +0000"  >&lt;p&gt;This does not appear to write data that other implementations can read.  Am I missing something?  It also appears to require that, to support circularity, the first field in a record must be a string.&lt;/p&gt;

&lt;p&gt;Rather, I think we must explicitly add the reference to the schema, e.g.:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;CircularListOfStrings&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;value&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;},
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;next&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:[&lt;span class=&quot;code-quote&quot;&gt;&quot;CircularListOfStrings&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;]}
]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A circular instance would appear to existing Avro implementations as a non-circular list of strings terminating with an integer.&lt;/p&gt;
</comment>
                            <comment id="14030919" author="sachingoyal" created="Fri, 13 Jun 2014 18:02:51 +0000"  >&lt;p&gt;For other applications to read, they must set in the field-name used for circular reference:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;GenericDatumReader&amp;lt;GenericRecord&amp;gt; datumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader&amp;lt;GenericRecord&amp;gt; ();
GenericData gdata = datumReader.getData();
gdata.setCircularRefIdPrefix(&lt;span class=&quot;code-quote&quot;&gt;&quot;__crefId&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If they use the above for the reader, then the output would be:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-javascript&quot;&gt;{
   &lt;span class=&quot;code-quote&quot;&gt;&quot;__crefId&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;0&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;John Sr&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;child&quot;&lt;/span&gt;:{
      &lt;span class=&quot;code-quote&quot;&gt;&quot;__crefId&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;1&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;John Jr&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;parent&quot;&lt;/span&gt;:{
         &lt;span class=&quot;code-quote&quot;&gt;&quot;__crefId&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;__crefId0&quot;&lt;/span&gt;,
         &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;,
         &lt;span class=&quot;code-quote&quot;&gt;&quot;child&quot;&lt;/span&gt;:&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
      }
   }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And if they set the flag:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;datumReader.setResolveCircularRefs (&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then the reference to parent is actually replaced with the reference to the actual parent.&lt;br/&gt;
The reason I have made the actual reference optional is because some tools might not be prepared to handle circular reference yet.&lt;br/&gt;
For example, GenericRecord.toString() fails with StackOverflow if the reference is replaced with an actual one.&lt;/p&gt;

&lt;p&gt;Default value for datumReader.setResolveCircularRefs is false, so the output record&apos;s type is consistent with the schema and it has enough information for clients to help them deduce circular reference.&lt;/p&gt;

&lt;p&gt;As per this fix, the first field in a record must be a string to support circularity.&lt;/p&gt;</comment>
                            <comment id="14030931" author="sachingoyal" created="Fri, 13 Jun 2014 18:10:25 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, I could not get why other applications would not be able to read it.&lt;br/&gt;
Could you provide an example?&lt;br/&gt;
If they use the following, Avro reader can read the data and so other applications can also.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;GenericDatumReader&amp;lt;GenericRecord&amp;gt; datumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader&amp;lt;GenericRecord&amp;gt; ();
GenericData gdata = datumReader.getData();
gdata.setCircularRefIdPrefix(&lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;id&amp;gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I am actually trying to follow the Jackson way of doing it (We have used this approach for Jackson in several places and it worked well).&lt;br/&gt;
&lt;a href=&quot;http://java.dzone.com/articles/circular-dependencies-jackson&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.dzone.com/articles/circular-dependencies-jackson&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14031017" author="cutting" created="Fri, 13 Jun 2014 19:06:09 +0000"  >&lt;p&gt;By other implementations I mean C, C++, Python, Perl, C#, Ruby, &amp;amp; PHP.  Existing versions of these should be able to read a data file that contains circular references written by Java.&lt;/p&gt;

&lt;p&gt;Perhaps I&apos;m missing something, but it looks like once the reference ID is read the rest of the schema is skipped.  If that&apos;s correct, then, in order for an existing implementation to be able to read such data it must declare a union of the id type and the record type, to accurately describe what&apos;s written.&lt;/p&gt;</comment>
                            <comment id="14031503" author="sachingoyal" created="Sat, 14 Jun 2014 07:51:20 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, excellent suggestion.&lt;br/&gt;
I have made the suggested changes in the new patch:&lt;/p&gt;

&lt;p&gt;1) If &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;ReflectData.setCircularRefIdPrefix(&lt;span class=&quot;code-quote&quot;&gt;&quot;some-field-name&quot;&lt;/span&gt;)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; is set, Avro converts each RECORD schema into a UNION schema such that it can either be a record or a string. This should make circular references readable by other implementations of Avro like c, c++, php, ruby etc.&lt;br/&gt;
(AllowNull also works with this).&lt;/p&gt;

&lt;p&gt;2) Added some thread-safe constructs like ThreadLocal for hash-maps used in circular reference code.&lt;/p&gt;

&lt;p&gt;3) Enhanced the test-case (with detailed comments) to test regular deserialization and circular deserialization for a circular-ref serialized Avro.&lt;/p&gt;</comment>
                            <comment id="14044266" author="sachingoyal" created="Thu, 26 Jun 2014 02:01:46 +0000"  >
&lt;h3&gt;&lt;a name=&quot;CircularReferences&quot;&gt;&lt;/a&gt;Circular References&lt;/h3&gt;
&lt;p&gt;------------------------------------&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Serialization&lt;/b&gt;&lt;br/&gt;
Extra API required (not optional): &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;ReflectData.setCircularRefIdPrefix(&lt;span class=&quot;code-quote&quot;&gt;&quot;some-field-name&quot;&lt;/span&gt;)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the above is set, following happens:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;During serialization, each record contains the extra field specified above. The value for this field is just a monotonically increasing number meant to uniquely identify each record in one particular serialization.&lt;/li&gt;
	&lt;li&gt;While writing schema, each RECORD schema is converted into a UNION schema such that it can either be a record or a string. During object serialization, if a record is seen before, it is not written as a record. Rather it is written as a string in the format: &quot;some-field-name&quot; + &quot;ID-generated-in #1 above&quot;. With this structure, reading applications have enough information to restore the circular reference if they want. This structure is also usable by languages not supporting circular reference because they will read that circular-reference as a normal string.&lt;br/&gt;
(AllowNull also works with this).&lt;/li&gt;
	&lt;li&gt;Above field-name is included in each record as a property. This allows the readers to become aware of this field-name so that the clients do not have to specify this just to populate the circular references. Basically it makes the schema self-sufficient.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;b&gt;Deserialization&lt;/b&gt;&lt;br/&gt;
Extra API required (optional):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;GenericDatumReader.setResolveCircularRefs(&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Based on #3 above, GenericDatumReader becomes circular-reference-aware.&lt;br/&gt;
But since all GenericDatumReaders share a common GenericData instance,  they are provided with another flag &quot;resolveCircularRefs&quot; to control whether they want to resolve circular references or not.&lt;br/&gt;
If this flag is set and the serialized schema has non-null value for circular-reference-field, GenericDatumReader does the following:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;If any record has circular-ref-field, store its value and the corresponding record in a map.&lt;/li&gt;
	&lt;li&gt;Look for unions which can be serialized as a record as well as a string. On finding such a record serialized as a string, replace the string with the record retreived from the map created in #1&lt;/li&gt;
&lt;/ol&gt;





&lt;h3&gt;&lt;a name=&quot;Nonstringmapkeys&quot;&gt;&lt;/a&gt;Non-string map-keys&lt;/h3&gt;
&lt;p&gt;----------------------------------------&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Serialization&lt;/b&gt;&lt;br/&gt;
No extra API required.&lt;/p&gt;

&lt;p&gt;Without this patch, Avro throws an exception for non-string map-keys.&lt;br/&gt;
This patch converts such maps into an array of records where each record has two fields: key and value. Example:&lt;br/&gt;
Map&amp;lt;ObjX, ObjY&amp;gt; is converted to [{&quot;key&quot;:&lt;/p&gt;
{ObjX}
&lt;p&gt;, &quot;value&quot;:{ObjY}}]&lt;br/&gt;
To do this, following is done:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;In ReflectData.java, create schema for key as well as value in the non-string hash-map.&lt;br/&gt;
  Encapsulate these two schemas into a record schema and create an array schema of such records.&lt;br/&gt;
  Set property NS_MAP_FLAG to &quot;1&quot; and store the actual class of the map as a CLASS_PROP&lt;/li&gt;
&lt;/ol&gt;


&lt;ol&gt;
	&lt;li&gt;While writing out a non-string map field, if NS_MAP_FLAG is set, convert map to array of records using map.entrySet()&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;b&gt;Deserialization&lt;/b&gt;&lt;br/&gt;
No extra API required.&lt;/p&gt;

&lt;p&gt;Deserialization for non-string map-keys is pretty simple since data and the schema match exactly.&lt;br/&gt;
So it just deserializes automatically.&lt;br/&gt;
To create an actual map (like when using ReflectDatumReader with actual-class type-parameter), map is instantiated using CLASS_PROP if the property NS_MAP_FLAG is set to &quot;1&quot;&lt;/p&gt;



&lt;h3&gt;&lt;a name=&quot;Testcasesincluded&quot;&gt;&lt;/a&gt;Testcases included&lt;/h3&gt;
&lt;p&gt;------------------------------------&lt;br/&gt;
The unit tests cover the following:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Circular references at multiple levels of hierarchy&lt;/li&gt;
	&lt;li&gt;Circular references within Collections and Maps.&lt;/li&gt;
	&lt;li&gt;Circular and non-circular deserialization of circularly serialized objects.&lt;/li&gt;
	&lt;li&gt;Non-string map-keys having circular references.&lt;/li&gt;
	&lt;li&gt;Non-string map-keys with nested maps.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="14050789" author="cutting" created="Wed, 2 Jul 2014 22:11:10 +0000"  >&lt;p&gt;For some reason I cannot apply the patch file you&apos;ve generated, so it&apos;s hard for me to analyze it in detail.  What tool are you using to generate this patch?&lt;/p&gt;

&lt;p&gt;I&apos;d prefer we use an explicit type rather than overload string for this purpose.  A union with a record like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.CircularRef&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;ref&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;}]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We don&apos;t ever have to create or define such a record.  Rather, a CustomEncoding can be used to directly resolve such references at read time.  (If circular references are not enabled then a GenericRecord would be read.)  No string prefixing, etc. would then be required.&lt;/p&gt;

&lt;p&gt;Rather than modifying ReflectData to support this, might we instead create a subclass of ReflectData that supports circular references?&lt;/p&gt;

&lt;p&gt;Non-string map key support in reflection should be addressed in a separate issue.&lt;/p&gt;</comment>
                            <comment id="14051012" author="sachingoyal" created="Thu, 3 Jul 2014 03:13:10 +0000"  >&lt;p&gt;Thanks Doug.&lt;/p&gt;

&lt;p&gt;I created the patch using &lt;b&gt;diff -r&lt;/b&gt; and it can be patched using &lt;b&gt;patch -i &amp;lt;patch-file&amp;gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;For non-string map-keys, I have submitted a separate patch at &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-680&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-680&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Could you please explain your comment regarding circular references in more detail?&lt;br/&gt;
I will change my patch accordingly.&lt;/p&gt;

&lt;p&gt;For example, here is a circular reference schema generated using Avro:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-javascript&quot;&gt;{
  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;SimpleParent&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;namespace&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.generic&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;parentName&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt; ],
    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
  }, {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;child&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;, {
      &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;SimpleChild&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
        &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;childName&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt; ],
        &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
      }, {
        &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;parent&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;SimpleParent&quot;&lt;/span&gt;],
        &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
      } ]
    }, &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt; ],
    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
  } ]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The current code converts it to the following:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-javascript&quot;&gt;{
  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;SimpleParent&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;namespace&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.generic&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;__crefId&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;
  }, {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;parentName&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt; ],
    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
  }, {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;child&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;, {
      &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;SimpleChild&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
        &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;__crefId&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;
      }, {
        &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;childName&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt; ],
        &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
      }, {
        &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;parent&quot;&lt;/span&gt;,
        &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;SimpleParent&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt; ],
        &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
      } ],
      &lt;span class=&quot;code-quote&quot;&gt;&quot;circularRefIdPrefix&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;__crefId&quot;&lt;/span&gt;
    }, &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt; ],
    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
  } ],
  &lt;span class=&quot;code-quote&quot;&gt;&quot;circularRefIdPrefix&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;__crefId&quot;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can you please apply your comments above to this example?&lt;br/&gt;
It will help me in understanding how it would be different from the above solution.&lt;/p&gt;

&lt;p&gt;As per my understanding, circular references can come in any record-type element.&lt;br/&gt;
So CustomeEncoder approach would need to write it as a record sometimes or a string/int sometimes.&lt;br/&gt;
Can a CustomEncoder pass the control to regular Avro Encoder to write a record normally?&lt;/p&gt;</comment>
                            <comment id="14051597" author="martinkl" created="Thu, 3 Jul 2014 15:40:54 +0000"  >&lt;p&gt;I don&apos;t mean to be grouchy, but I&apos;m not convinced this is a feature that Avro really needs to have. It adds complexity to all the language implementations of Avro that need to support it, and it creates difficulties for anyone who needs to map between Avro&apos;s data model and another data model (e.g. representing Avro data in JSON format, or accessing Avro data in Pig through Pig&apos;s type system).&lt;/p&gt;

&lt;p&gt;For an application that needs to model an arbitrary graph of references between objects in Avro, I would argue that it&apos;s actually better for the object IDs to be explicitly visible in the data model, rather than being automatically resolved and thus hidden.&lt;/p&gt;

&lt;p&gt;If there&apos;s some really awesome use case for circular references that I&apos;m missing, I&apos;m open to being convinced. But I don&apos;t currently see it.&lt;/p&gt;</comment>
                            <comment id="14051686" author="cutting" created="Thu, 3 Jul 2014 17:03:40 +0000"  >&lt;p&gt;I imagine a schema like the following, to permit potentially circular linked lists:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;List&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;nodeName&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;},
  {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;next&quot;&lt;/span&gt;, 
   &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;List&quot;&lt;/span&gt;, 
           {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.CircularRef&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;id&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;}] }] }] }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The writer would add an entry to an IdentityHashMap&amp;lt;Object,Integer&amp;gt; for every sub-record it writes.  Whenever it encounters a previously-written record, it writes a ref instead.  Similarly, the reader would add each records it reads to an array, and when a ref is read, return the corresponding element of the array.&lt;/p&gt;

&lt;p&gt;Such functionality should entirely be contained in CircularData (subclass of ReflectData) and CircularDatumReader and CircularDatumWriter, with no alterations to existing classes (except perhaps to expose functionality to subclasses if needed).&lt;/p&gt;</comment>
                            <comment id="14068023" author="sachingoyal" created="Sun, 20 Jul 2014 19:06:55 +0000"  >&lt;blockquote&gt;
&lt;p&gt;The writer would add an entry to an IdentityHashMap&amp;lt;Object,Integer&amp;gt; for every sub-record it writes. Whenever it encounters a previously-written record, it writes a ref instead. Similarly, the reader would add each records it reads to an array, and when a ref is read, return the corresponding element of the array.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The current fix does use an IdentityHashMap to do this. Reference code in patch:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;GenericDatumWriter.java, line 40 and&lt;/li&gt;
	&lt;li&gt;GenericDatumReader.java, line 46&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Please correct me if I am wrong, but it appears the schema generated for a circular list should look somewhat like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-javascript&quot;&gt;{
  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;CircularList&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;namespace&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.generic&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;__crefId&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;
  }, {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;nodeData&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt; ],
    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
  }, {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;next&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;CircularList&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt; ],
    &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
  } ],
  &lt;span class=&quot;code-quote&quot;&gt;&quot;circularRefIdPrefix&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;__crefId&quot;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(This is generated using current patch)&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;
Circular references could be just anywhere in the code.&lt;br/&gt;
For example, in a family-tree involving grandparents, uncles, aunts, cousins, children, grandchildren etc. circular references could be encountered for many branches outgoing from a single node.&lt;/p&gt;

&lt;p&gt;Since we do not know which outgoing link would reveal itself as an already-traversed-node, the &lt;b&gt;__crefId&lt;/b&gt; field needs to be written in advance for each and every record. Hence the need for a separate field in &lt;b&gt;each&lt;/b&gt; record.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-javascript&quot;&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;__crefId&quot;&lt;/span&gt;,
    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;
  }, ....
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, when we do encounter an already-traversed-node, the node must be written as an ID. Hence every record&apos;s type must be a union with string:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-javascript&quot;&gt;    &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;CircularList&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt; ]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I would be happy to consider other options if the above seems incorrect.&lt;br/&gt;
If it seems correct, &lt;ins&gt;I will submit a patch without non-string map-keys&lt;/ins&gt;.&lt;/p&gt;


&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=martinkl&quot; class=&quot;user-hover&quot; rel=&quot;martinkl&quot;&gt;Martin Kleppmann&lt;/a&gt;, Currently Avro supports circular references in schema.&lt;br/&gt;
So supporting circular references in data should be a natural extension of the same.&lt;/p&gt;

&lt;p&gt;Also, circular references are very common in ORM (like Hibernate/JPA) and Java based programs in general.&lt;br/&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/11007247/are-circular-references-in-jpa-an-antipattern&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://stackoverflow.com/questions/11007247/are-circular-references-in-jpa-an-antipattern&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And parsers like Gson and Jackson support this feature too.&lt;/p&gt;

&lt;p&gt;The serialized data from the above patch should work with all language implementations and also with Hive/Pig (because we are breaking the circular reference by changing it to an ID).&lt;br/&gt;
Please share if you think otherwise.&lt;/p&gt;</comment>
                            <comment id="14068850" author="cutting" created="Mon, 21 Jul 2014 17:31:39 +0000"  >&lt;p&gt;I realize this is what you&apos;ve implemented, however I think the implementation can be improved.&lt;/p&gt;

&lt;p&gt;I would prefer that the circular reference not be a string, but rather be a unique type, e.g., a record named CircularRef that contains an integer id field.&lt;/p&gt;

&lt;p&gt;I agree that all object references in a schema need to be changed to unions containing possible circular references.  However I don&apos;t see that a target id field needs to be added to all records.  Rather the target id can be implicit, based on the order that sub-objects are written, as follows.&lt;/p&gt;

&lt;p&gt;In each call to DatumWriter#write, an IdentityHashMap&amp;lt;Object,Integer&amp;gt; table is created.  In #resolveUnion, when a union containing a record and a CircularRef is passed a record, it looks for the record in the table.  If the record already exists in the table, then the CircularRef branch is returned, writing a reference containing the integer value from the table.  If the record does not exist in the table, then an entry for it is added to the table whose value is the current size of the table, and the record branch of the union is returned and written.&lt;/p&gt;

&lt;p&gt;Then, each call to DatumReader#read creates a Vector&amp;lt;Object&amp;gt;.  If #readRecord reads a CircularRef, then it returns the item indicated by its id in the vector, otherwise it adds a reference to each record read to the vector.&lt;/p&gt;

&lt;p&gt;I believe this can work, is more strongly-typed, and avoids adding new fields to schemas, only inserting unions for record references.&lt;/p&gt;</comment>
                            <comment id="14068886" author="sachingoyal" created="Mon, 21 Jul 2014 17:48:20 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;.&lt;br/&gt;
I agree that this will eliminate the need for another field in each record.&lt;br/&gt;
Will make this change and submit another patch shortly.&lt;/p&gt;</comment>
                            <comment id="14105899" author="sachingoyal" created="Thu, 21 Aug 2014 20:24:23 +0000"  >&lt;p&gt;avro_circular_refs6.patch is created using&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;lang/java/avro% svn diff src/
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It eliminates the need to add an extra field per record and relies on the order of record-writing and reading.&lt;/p&gt;

&lt;p&gt;In this patch, there is an equals check at 3 places of the form:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;schema.getFullName().equals(CircularRef.&lt;span class=&quot;code-keyword&quot;&gt;class.&lt;/span&gt;getName())
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I think this could be improved by adding a boolean-property in the schema for CircularRef or somehow comparing the class.&lt;br/&gt;
Comments are welcome.&lt;/p&gt;</comment>
                            <comment id="14114541" author="cutting" created="Thu, 28 Aug 2014 22:56:35 +0000"  >&lt;p&gt;Some comments on the latest patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the CircularRef class is not used in generic.  in fact, it probably doesn&apos;t need to exist at all, we could always use a GenericData.Record.  instead we perhaps need constants with the CircularRef schema, it&apos;s name, etc.&lt;/li&gt;
	&lt;li&gt;it might be more efficient to use IndexedRecord#get(int) to access the circular ref id.&lt;/li&gt;
	&lt;li&gt;we should benchmark performance with and without this change with circular references disabled using Perf.java, to make sure that changes to read &amp;amp; write methods, clearing state etc., don&apos;t significantly affect performance.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14117928" author="sachingoyal" created="Tue, 2 Sep 2014 06:15:06 +0000"  >&lt;p&gt;avro_circular_refs7.patch fixes the above.&lt;/p&gt;

&lt;p&gt;Performance has been checked by running Perf.java for 8k cycles (PERF_8000_cycles.zip contains a small Tcl utility to compare two outputs of Perf.java)&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;% tclsh perf_processor.tcl all/orig.txt all/circular.txt
Finding tests where time is 1.05 times more than the original
                               orig.txt    circular.txt
GenericWrite:                  34552 ms     37010 ms
ReflectNestedObjectArrayWrite: 51701 ms     54562 ms
LongRead:                      12508 ms     16907 ms

% tclsh perf_processor.tcl reduced/orig.txt reduced/circular.txt
Finding tests where time is 1.05 times more than the original
            orig.txt  circular.txt
GenericWrite: 33359 ms   35552 ms

% tclsh perf_processor.tcl reduced_further/orig.txt reduced_further/circular.txt
Finding tests where time is 1.05 times more than the original
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So the Perf.java shows irregular performance degradation and that too varies only in small numbers.&lt;/p&gt;</comment>
                            <comment id="14157110" author="cutting" created="Thu, 2 Oct 2014 20:19:49 +0000"  >&lt;p&gt;Here&apos;s a modified version of the patch.  It moves all significant changes to reflect.  Since reflect is the only implementation that can generate an appropriate schema, changes should be confined to there.&lt;/p&gt;

&lt;p&gt;The tests need to be updated, as they still assume generic.&lt;/p&gt;</comment>
                            <comment id="14286370" author="sachingoyal" created="Wed, 21 Jan 2015 21:56:57 +0000"  >&lt;p&gt;Here is a patch with the updated test-cases.&lt;br/&gt;
I also confirm that all my changes are there in the patch.&lt;/p&gt;</comment>
                            <comment id="14328067" author="sachingoyal" created="Thu, 19 Feb 2015 20:25:23 +0000"  >&lt;p&gt;On a related note, Hive AvroSerDe will also be supporting circular references from now on.&lt;br/&gt;
Associated JIRA: &lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-7653&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;HIVE-7653&lt;/a&gt;&lt;br/&gt;
Pull request: &lt;a href=&quot;https://github.com/apache/hive/commit/9c74ae0c636a49304c8377b1730428bc6141733d&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Hive code changes&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14353768" author="githubbot" created="Mon, 9 Mar 2015 22:26:35 +0000"  >&lt;p&gt;GitHub user sachingsachin opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/23&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/23&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-695&quot; title=&quot;Cycle Reference Support&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-695&quot;&gt;&lt;del&gt;AVRO-695&lt;/del&gt;&lt;/a&gt;: Support for circular references.&lt;/p&gt;

&lt;p&gt;    All objects are put into a temporary thread-local hash-map whose key is the object and value is an integer ID.&lt;br/&gt;
    If any object is seen again while serializaing, its ID is taken from the hash-map, wrapped into &apos;CircularRef&apos; class and the CircularRef wrapper is serialized instead.&lt;/p&gt;

&lt;p&gt;    On deserializing, if the CircularRef is encountered, we know that it has to be the ID of a previously seen object.&lt;br/&gt;
    And so we restore the same.&lt;/p&gt;

&lt;p&gt;    On the schema side, we create unions of all classes with CircularRef if the user suspects circular references in his code. This union makes sure the above writers are able to write a CircularRef instead of the actual object.&lt;/p&gt;

&lt;p&gt;    Note that this strategy is perfectly safe in other languages&apos; deserialization of a circularly referenced data.&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/sachingsachin/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sachingsachin/avro&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-695&quot; title=&quot;Cycle Reference Support&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-695&quot;&gt;&lt;del&gt;AVRO-695&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/23.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/23.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #23&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit e3f9295474a3f45c022850cb4ac2ba84a8ac31f4&lt;br/&gt;
Author: Sachin Goyal &amp;lt;sgoyal@walmart.com&amp;gt;&lt;br/&gt;
Date:   2015-03-09T22:18:01Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-695&quot; title=&quot;Cycle Reference Support&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-695&quot;&gt;&lt;del&gt;AVRO-695&lt;/del&gt;&lt;/a&gt;: Support for circular references.&lt;/p&gt;

&lt;p&gt;    All objects are put into a temporary thread-local hash-map whose key is the object and value is an integer ID.&lt;br/&gt;
    If any object is seen again while serializaing, its ID is taken from the hash-map,&lt;br/&gt;
    wrapped into &apos;CircularRef&apos; class and the CircularRef wrapper is serialized instead.&lt;br/&gt;
    On deserializing, if the CircularRef is encountered, we know that it has to be the ID of a previously seen object.&lt;br/&gt;
    And so we restore the same.&lt;/p&gt;

&lt;p&gt;    On the schema side, we create unions of all classes with CircularRef if the user suspects circular references in his code.&lt;br/&gt;
    This union makes sure the above writers are able to write a CircularRef instead of the actual object.&lt;/p&gt;

&lt;p&gt;    Note that this strategy is perfectly safe in other languages&apos; deserialziation of a circularly referenced data.&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="14362409" author="sachingoyal" created="Sun, 15 Mar 2015 15:02:08 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, Circular references are very common in Hibernate related code and in Java.&lt;br/&gt;
So I would really appreciate your help in getting this one merged.&lt;/p&gt;</comment>
                            <comment id="14363782" author="sachingoyal" created="Mon, 16 Mar 2015 19:51:16 +0000"  >&lt;p&gt;Updated the pull request with the merged &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-680&quot; title=&quot;Allow for non-string keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-680&quot;&gt;&lt;del&gt;AVRO-680&lt;/del&gt;&lt;/a&gt; changes in trunk.&lt;br/&gt;
Also, added a test for circular references in the keys and values of a non-string map.&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
Example:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Map &amp;lt;Foo, Bar&amp;gt; abc;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above code can now be a non-string map with circular references for Foo as well as Bar.&lt;br/&gt;
This can help support very complex Java objects with ease.&lt;/p&gt;</comment>
                            <comment id="14739177" author="rdblue" created="Thu, 10 Sep 2015 17:21:20 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sachingoyal&quot; class=&quot;user-hover&quot; rel=&quot;sachingoyal&quot;&gt;Sachin Goyal&lt;/a&gt;, on the Avro list I sent an example of using logical types to implement circular references. Did that work for your use case? The code I sent is now a &lt;a href=&quot;https://github.com/apache/avro/blob/trunk/lang/java/avro/src/test/java/org/apache/avro/TestCircularReferences.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;unit test for logical types&lt;/a&gt;. If that satisfies you, then maybe we can close out this issue.&lt;/p&gt;

&lt;p&gt;We can also look at adding the referencable and reference logical types so you can use them without adding them yourself.&lt;/p&gt;</comment>
                            <comment id="15130935" author="rdblue" created="Wed, 3 Feb 2016 19:18:26 +0000"  >&lt;p&gt;Closing this since it is available using logical types and is used as a &lt;a href=&quot;https://github.com/apache/avro/blob/trunk/lang/java/avro/src/test/java/org/apache/avro/TestCircularReferences.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;test case&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="15133234" author="githubbot" created="Thu, 4 Feb 2016 22:53:42 +0000"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/23&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/23&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12693719" name="AVRO-695.patch" size="36343" author="sachingoyal" created="Wed, 21 Jan 2015 21:56:57 +0000"/>
                            <attachment id="12672620" name="AVRO-695.patch" size="37773" author="cutting" created="Thu, 2 Oct 2014 20:19:49 +0000"/>
                            <attachment id="12665850" name="PERF_8000_cycles.zip" size="7643" author="sachingoyal" created="Tue, 2 Sep 2014 06:15:06 +0000"/>
                            <attachment id="12467486" name="avro-1.4.1-cycle.patch.gz" size="43886" author="mcherri" created="Tue, 4 Jan 2011 22:43:49 +0000"/>
                            <attachment id="12459620" name="avro-1.4.1-cycle.patch.gz" size="41737" author="mcherri" created="Mon, 15 Nov 2010 16:03:08 +0000"/>
                            <attachment id="12650158" name="avro_circular_references.zip" size="4579" author="sachingoyal" created="Thu, 12 Jun 2014 22:13:08 +0000"/>
                            <attachment id="12663488" name="avro_circular_refs6.patch" size="40653" author="sachingoyal" created="Thu, 21 Aug 2014 20:24:23 +0000"/>
                            <attachment id="12665851" name="avro_circular_refs7.patch" size="39114" author="sachingoyal" created="Tue, 2 Sep 2014 06:15:06 +0000"/>
                            <attachment id="12650443" name="avro_circular_refs_2014_06_14.zip" size="6892" author="sachingoyal" created="Sat, 14 Jun 2014 07:51:20 +0000"/>
                            <attachment id="12652536" name="circular_refs_and_nonstring_map_keys_2014_06_25.zip" size="11684" author="sachingoyal" created="Thu, 26 Jun 2014 01:49:52 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 30 Dec 2010 16:36:24 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>86217</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 50 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1wn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80071</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>-Cyclic reference support</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
