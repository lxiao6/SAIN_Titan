<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:13:47 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2010-4-14+AND+created+%3C%3D+2010-4-21+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="5" total="5"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-517] Resolving Decoder fails in some cases</title>
                <link>https://issues.apache.org/jira/browse/AVRO-517</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;User reports that reading an &apos;actual&apos; schema of &lt;br/&gt;
 string, string, int&lt;br/&gt;
fails when using an expected schema of:&lt;br/&gt;
 string, string&lt;/p&gt;

&lt;p&gt;Sample code and details in the comments.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12462163">AVRO-517</key>
            <summary>Resolving Decoder fails in some cases</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.svg">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thiru_mg">Thiruvalluvan M. G.</assignee>
                                    <reporter username="scott_carey">Scott Carey</reporter>
                        <labels>
                    </labels>
                <created>Thu, 15 Apr 2010 17:06:08 +0000</created>
                <updated>Mon, 14 Jun 2010 01:37:03 +0000</updated>
                            <resolved>Mon, 19 Apr 2010 11:12:37 +0000</resolved>
                                    <version>1.3.2</version>
                                    <fixVersion>1.3.3</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12857417" author="scott_carey" created="Thu, 15 Apr 2010 17:10:52 +0000"  >&lt;p&gt;Sample code that shows this issue:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.File;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;

&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Schema;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.file.DataFileReader;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.file.DataFileWriter;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericData;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericData.Record;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.util.Utf8;

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;AddressBook {
	&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; fileName = &lt;span class=&quot;code-quote&quot;&gt;&quot;AddressBook.db&quot;&lt;/span&gt;;
	&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; prefix = &lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;record\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;: \&quot;&lt;/span&gt;Person\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;fields\&lt;span class=&quot;code-quote&quot;&gt;&quot;:[&quot;&lt;/span&gt;;
	&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; suffix = &lt;span class=&quot;code-quote&quot;&gt;&quot;]}&quot;&lt;/span&gt;;
	&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; fieldFirst = &lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;First\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;string\&lt;span class=&quot;code-quote&quot;&gt;&quot;}&quot;&lt;/span&gt;;
	&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; fieldLast = &lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;Last\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;string\&lt;span class=&quot;code-quote&quot;&gt;&quot;}&quot;&lt;/span&gt;;
	&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; fieldAge = &lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;Age\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;\&lt;span class=&quot;code-quote&quot;&gt;&quot;}&quot;&lt;/span&gt;;
	Schema personSchema = Schema.parse(prefix + fieldFirst + &lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt; + fieldLast + &lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;  + fieldAge + suffix);
	Schema ageSchema = Schema.parse(prefix + fieldAge + suffix);
	Schema extractSchema = Schema.parse(prefix + fieldFirst + &lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt; + fieldLast + suffix);
	/**
	 * @param args
	 * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
	 */
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
		AddressBook ab = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AddressBook();
		ab.init();
		ab.browseAge();
		ab.browseName();
	}

	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void init() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {		
		DataFileWriter&amp;lt;Record&amp;gt; writer = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileWriter&amp;lt;Record&amp;gt;(
				&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumWriter&amp;lt;Record&amp;gt;(personSchema)).create(
						personSchema, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; File(fileName));
		&lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
			writer.append(createPerson(&lt;span class=&quot;code-quote&quot;&gt;&quot;Dante&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;Hicks&quot;&lt;/span&gt;, 27));
			writer.append(createPerson(&lt;span class=&quot;code-quote&quot;&gt;&quot;Randal&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;Graves&quot;&lt;/span&gt;, 20));
			writer.append(createPerson(&lt;span class=&quot;code-quote&quot;&gt;&quot;Steve&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;Jobs&quot;&lt;/span&gt;, 31));
		} &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
			writer.close();
		}
	}
	
	&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Record createPerson(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; first, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; last, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; age) {
		Record person = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Record(personSchema);
		person.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;First&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Utf8(first));
		person.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;Last&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Utf8(last));
		person.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;Age&quot;&lt;/span&gt;, age);
		&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; person;
	}
	
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void browseAge() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {		
		GenericDatumReader&amp;lt;Record&amp;gt; dr = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader&amp;lt;Record&amp;gt;();
		dr.setExpected(ageSchema);
		DataFileReader&amp;lt;Record&amp;gt; reader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader&amp;lt;Record&amp;gt;(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; File(
		  fileName), dr);
		
		&lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
			&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (reader.hasNext()) {
				Record person = reader.next();
				&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(person.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;Age&quot;&lt;/span&gt;).toString());
			}
		} &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
			reader.close();
		}
	}
	
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void browseName() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {		
		GenericDatumReader&amp;lt;Record&amp;gt; dr = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader&amp;lt;Record&amp;gt;();
		dr.setExpected(extractSchema);
		DataFileReader&amp;lt;Record&amp;gt; reader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader&amp;lt;Record&amp;gt;(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; File(
		  fileName), dr);
		
		&lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
			&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (reader.hasNext()) {
				Record person = reader.next();
				&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(person.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;First&quot;&lt;/span&gt;).toString() + &lt;span class=&quot;code-quote&quot;&gt;&quot; &quot;&lt;/span&gt; + person.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;Last&quot;&lt;/span&gt;).toString() + &lt;span class=&quot;code-quote&quot;&gt;&quot;\t&quot;&lt;/span&gt;);
			}
		} &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
			reader.close();
		}
	}
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;User comments:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi,&lt;br/&gt;
27&lt;br/&gt;
20&lt;br/&gt;
31&lt;br/&gt;
Dante Hicks	&lt;br/&gt;
Exception in thread &quot;main&quot; org.apache.avro.AvroRuntimeException: java.io.EOFException&lt;br/&gt;
	at org.apache.avro.file.DataFileStream.next(DataFileStream.java:184)&lt;br/&gt;
	at cn.znest.test.avro.AddressBook.browseName(AddressBook.java:91)&lt;br/&gt;
	at cn.znest.test.avro.AddressBook.main(AddressBook.java:43)&lt;br/&gt;
Caused by: java.io.EOFException&lt;br/&gt;
	at org.apache.avro.io.BinaryDecoder.readInt(BinaryDecoder.java:163)&lt;br/&gt;
	at org.apache.avro.io.BinaryDecoder.readString(BinaryDecoder.java:262)&lt;br/&gt;
	at org.apache.avro.io.ValidatingDecoder.readString(ValidatingDecoder.java:93)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumReader.readString(GenericDatumReader.java:277)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumReader.readString(GenericDatumReader.java:271)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:83)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumReader.readRecord(GenericDatumReader.java:105)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:77)&lt;br/&gt;
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:70)&lt;br/&gt;
	at org.apache.avro.file.DataFileStream.next(DataFileStream.java:195)&lt;br/&gt;
	at org.apache.avro.file.DataFileStream.next(DataFileStream.java:182)&lt;br/&gt;
	... 2 more&lt;/p&gt;

&lt;p&gt;My code is below. In this example, I create three record: person(3 fileds: First Last Age), age(Age), extract(First Last). The record &quot;age&quot; has the last filed of &quot;Person&quot;, so AddressBook.browseAge() will be executed successfully. But the record &quot;extract&quot; does not have the last filed of &quot;Person&quot;, so executing AddressBook.browseName() will cause an exception.  &lt;br/&gt;
In avro/c, read_record (datum_read.c) loops every write_schema fileds. &lt;br/&gt;
In avro/java, GenericDatumReader.readRecord  loops every read_schema fileds. I think that&apos;s the point.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The above may be correct, the loop is over the read schema (expected) rather than actual.  However, it works fine if the read schema is at the &quot;end&quot; of the writer schema.&lt;/p&gt;

&lt;p&gt;I am not familiar enough with the resolving decoder internals yet to and locate the bug quickly.  It is cleanly reproducible.&lt;/p&gt;</comment>
                            <comment id="12857765" author="thiru_mg" created="Fri, 16 Apr 2010 09:55:56 +0000"  >&lt;p&gt;The trouble is that the ResolvingDecoder does not take care of the trailing field in the underlying BinaryDecoder. So part of the data belonging to the current object is left in the BinaryDecoder. GenericDatumReader constructs a new ResolvingDecoder for the next object. So the leftover integer field is read as a string of the next object.&lt;/p&gt;

&lt;p&gt;This problem will not occur if the same ResolvingDecoder is used for all the objects. But that approach requires quite a bit of changes to GenericDatumReader. So I added a new method drain() in ResolvingDecoder, which,if called after reading the entire record as per reader&apos;s schema, drains the remaining unused portions.&lt;/p&gt;</comment>
                            <comment id="12857766" author="thiru_mg" created="Fri, 16 Apr 2010 09:57:04 +0000"  >&lt;p&gt;Thanks Scott for catching this intricate bug.&lt;/p&gt;</comment>
                            <comment id="12857920" author="scott_carey" created="Fri, 16 Apr 2010 18:20:31 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;This patch looks good to me. &lt;/p&gt;
</comment>
                            <comment id="12858456" author="thiru_mg" created="Mon, 19 Apr 2010 11:12:37 +0000"  >&lt;p&gt;Committed revision 935526.&lt;/p&gt;

&lt;p&gt;Thanks Scott for reporting the issue and reviewing the fix.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12441952" name="ASF.LICENSE.NOT.GRANTED--AVRO-517.patch" size="3311" author="thiru_mg" created="Fri, 16 Apr 2010 09:55:56 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 16 Apr 2010 09:55:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94829</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 41 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e0tj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79895</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-518] make check in c++ is broken because of typo &amp; missing boost_filesystem library</title>
                <link>https://issues.apache.org/jira/browse/AVRO-518</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;&quot;make check&quot; in c++ is broken because of typo &amp;amp; missing boost_filesystem library.&lt;/p&gt;

&lt;p&gt;The typo is inverting BOOST and HAVE in api/buffer/detail/BufferDetailIterator.hh &lt;/p&gt;

&lt;p&gt;-#ifdef BOOST_HAVE_ASIO&lt;br/&gt;
+#ifdef HAVE_BOOST_ASIO&lt;/p&gt;

&lt;p&gt;The missing library requires adding a new m4 macro.&lt;/p&gt;

&lt;p&gt;I will include a patch.&lt;/p&gt;</description>
                <environment>&lt;p&gt;linux w/boost 1.42&lt;/p&gt;</environment>
        <key id="12462164">AVRO-518</key>
            <summary>make check in c++ is broken because of typo &amp; missing boost_filesystem library</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jplevyak">John Plevyak</assignee>
                                    <reporter username="jplevyak">John Plevyak</reporter>
                        <labels>
                    </labels>
                <created>Thu, 15 Apr 2010 17:10:46 +0000</created>
                <updated>Wed, 8 Sep 2010 21:10:11 +0000</updated>
                            <resolved>Sat, 17 Apr 2010 16:34:35 +0000</resolved>
                                                    <fixVersion>1.4.0</fixVersion>
                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12857418" author="jplevyak" created="Thu, 15 Apr 2010 17:11:41 +0000"  >&lt;p&gt;minimal patch to get &quot;make check&quot; to work on trunk&lt;/p&gt;</comment>
                            <comment id="12858166" author="sbanacho" created="Sat, 17 Apr 2010 16:34:35 +0000"  >&lt;p&gt;Thanks John!&lt;br/&gt;
Committed revision 935204.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12441852" name="ASF.LICENSE.NOT.GRANTED--avro-cpp-buffer-jp-v1.patch" size="6311" author="jplevyak" created="Thu, 15 Apr 2010 17:11:41 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 17 Apr 2010 16:34:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94830</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 41 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e0tr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79896</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-519] Efficient sparse optional fields support</title>
                <link>https://issues.apache.org/jira/browse/AVRO-519</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;One of the nice features of protobuf is efficient support for very sparse optional fields,&lt;br/&gt;
for example large number of tags potentially associated with a document the vast&lt;br/&gt;
majority of which are empty.&lt;/p&gt;

&lt;p&gt;Avro does support optional fields as part of differing specifications, but not on a per-record&lt;br/&gt;
level after a protocol has been agreed upon.  Avro does have support for arrays and maps&lt;br/&gt;
however both of these require homogeneous types.&lt;/p&gt;

&lt;p&gt;I would suggest adding an additional field attribute:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&quot;optional&quot; - with values &quot;true&quot;/&quot;false&quot; (where &quot;false&quot; is assumed)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the encoding I would suggest that that any record which includes optional fields&lt;br/&gt;
would be prefixed by an presence map which would be a sequence of int8 x* where:&lt;/p&gt;

&lt;p&gt;  x &amp;gt; 0 : the lower 7 bits are presence bits for the next 7 optional fields (low bit first)&lt;br/&gt;
  -128 &amp;lt; x &amp;lt; 0 : the next present field is position x + 135 (as x runs from 0 to -127 and the first 7&lt;br/&gt;
              must be empty otherwise we would use the x &amp;gt; 0 encoding) &lt;br/&gt;
  x == -128: no optional fields present in the next 134 optional fields&lt;br/&gt;
  x = 0 : end of sequence&lt;br/&gt;
  further, if the map has covered all the options, the end-of-sequence marker can be&lt;br/&gt;
  elided.  For example, a type with 3 optional fields would require only a single byte. &lt;/p&gt;

&lt;p&gt;This will permit encoding at 8/7 of a bit per present entry (worst case) and at a cost of&lt;br/&gt;
8/134 (0.06) bits/entry per all but last not-present (7.5 bytes / 1000 optional fields).&lt;/p&gt;

&lt;p&gt;This encoding is backward compatible as well as schema&apos;s which do not contain optional&lt;br/&gt;
elements do not have the presence map and the encoding is therefore identical.  Backward&lt;br/&gt;
compatibility can be maintained by simply using the default value for not-present fields.&lt;/p&gt;

&lt;p&gt;Language APIs:&lt;/p&gt;

&lt;p&gt;Efficient support could include either an explicit presence test or a function which returns the value&lt;br/&gt;
or default value (if the field is not present).&lt;/p&gt;



</description>
                <environment></environment>
        <key id="12462328">AVRO-519</key>
            <summary>Efficient sparse optional fields support</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jplevyak">John Plevyak</reporter>
                        <labels>
                    </labels>
                <created>Sat, 17 Apr 2010 18:17:23 +0000</created>
                <updated>Fri, 22 Dec 2017 07:49:20 +0000</updated>
                                                                            <component>spec</component>
                        <due></due>
                            <votes>4</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="12859566" author="cutting" created="Wed, 21 Apr 2010 22:41:27 +0000"  >&lt;p&gt;In general, I am hesitant to add new fundamental types, as they break bi-directional compatibility.&lt;/p&gt;

&lt;p&gt;&amp;gt; Avro does have support for arrays and maps however both of these require homogeneous types.&lt;/p&gt;

&lt;p&gt;The type of an array or map can be a union.&lt;/p&gt;

&lt;p&gt;A map would meet your needs, although it would be a bit larger, since field names would be repeated.&lt;/p&gt;

&lt;p&gt;An array of a union could be used, with a record in the union for each field.  Then the overhead per item present would be the union&apos;s integer dispatch tag, i.e., one byte for up to 255 fields.  This has similar overhead to the approach you propose when random subsets of fields are used.  One could annotate the schema of such arrays with a metadata property that suggests they be represented in memory as a sparse record, but they&apos;d still be compatible with implementations that know nothing of sparse records.&lt;/p&gt;</comment>
                            <comment id="12859586" author="jplevyak" created="Wed, 21 Apr 2010 23:44:57 +0000"  >&lt;p&gt;Such an scheme would have overhead similar to protobuf (and indeed have a similar wire encoding).&lt;/p&gt;

&lt;p&gt;What about extending genavro  with the &quot;optional&quot; keyword and the ability to do the transformation&lt;br/&gt;
and add the annotation?&lt;/p&gt;

&lt;p&gt;What do you suggest for such an annotation?  &quot;representation&quot;: &quot;optionals&quot;&lt;/p&gt;

&lt;p&gt;The idea being that despite the fact that it is an array of union each option can only appear&lt;br/&gt;
once and the memory representation could reflect that.&lt;/p&gt;

</comment>
                            <comment id="12859878" author="jplevyak" created="Thu, 22 Apr 2010 16:41:16 +0000"  >&lt;p&gt;Doug,  your proposed solution is made somewhat more complex by the fact that it is not possible to associate a name&lt;br/&gt;
with types other than records, fixed and enum within a union.  One might want to do:&lt;/p&gt;

&lt;p&gt;{&lt;br/&gt;
    &quot;type&quot; : &quot;array&quot;,&lt;br/&gt;
    &quot;name&quot; : &quot;optionals&quot;,&lt;br/&gt;
    &quot;items&quot; : [&lt;br/&gt;
       &lt;/p&gt;
{ &quot;name&quot; : &quot;a&quot;, &quot;type&quot; : &quot;bytes&quot; }
&lt;p&gt;,&lt;/p&gt;
       { &quot;name&quot; : &quot;b&quot;, &quot;type&quot; : &quot;bytes&quot; }
&lt;p&gt;    ]&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;which the C++ translator accepts but for which it nevertheless generates incorrect code (I will file a bug).&lt;/p&gt;

&lt;p&gt;As it stands, one would have to do:&lt;/p&gt;

&lt;p&gt;{&lt;br/&gt;
    &quot;type&quot; : &quot;array&quot;,&lt;br/&gt;
    &quot;name&quot; : &quot;optionals&quot;,&lt;br/&gt;
    &quot;items&quot; : [&lt;br/&gt;
       { &quot;name&quot; : &quot;l&quot;, &quot;type&quot; : &quot;record&quot;, &quot;fields&quot; : [ &lt;/p&gt;
{ &quot;name&quot; : &quot;l&quot;, &quot;type&quot;: &quot;long&quot;}
&lt;p&gt; ] },&lt;br/&gt;
       { &quot;name&quot; : &quot;r&quot;, &quot;type&quot; : &quot;record&quot;, &quot;fields&quot; : [ &lt;/p&gt;
{ &quot;name&quot; : &quot;r&quot;, &quot;type&quot;: &quot;long&quot;}
&lt;p&gt; ] }&lt;br/&gt;
    ]&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;which is workable, albeit more complicated than one might want.  What is the rational for not permitting a name&lt;br/&gt;
to be associated with other types in a union?&lt;/p&gt;</comment>
                            <comment id="12859897" author="cutting" created="Thu, 22 Apr 2010 16:58:39 +0000"  >&lt;p&gt;&amp;gt; What is the rational for not permitting a name to be associated with other types in a union?&lt;/p&gt;

&lt;p&gt;This is discussed in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-248&quot; title=&quot;make unions a named type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-248&quot;&gt;AVRO-248&lt;/a&gt;.  One rationale is simply that it would be an incompatible change.  Existing implementations should ignore the name, but they should also generate an error if a union has two &quot;bytes&quot; branches.&lt;/p&gt;

&lt;p&gt;A dynamic language needs a way at runtime to distinguish whether &quot;a&quot; or &quot;b&quot; is used.  So one would need to wrap the bytes in something to indicate this.  Like a record.  Records can add a name to any type, with no serialized overhead.&lt;/p&gt;</comment>
                            <comment id="12862251" author="jplevyak" created="Thu, 29 Apr 2010 16:37:45 +0000"  >&lt;p&gt;Perhaps for avro 2.0 we might consider more direct support for optional elements at the schema level, language mapping level and also perhaps in the encoding.  The vector of union approach works, but could be improved upon by delta encoding the tags or by using the presence map as above.  An advantage of the presence map is that it permits very fast checking for presence without having to parse through the portion of the object preceding the field in question for the important case of a select from a row containing a large number of top level optional fields. &lt;/p&gt;

&lt;p&gt;Is there a place where 2.0 proposals are collected?  Maybe a wiki page?&lt;/p&gt;</comment>
                            <comment id="12862322" author="cutting" created="Thu, 29 Apr 2010 18:24:19 +0000"  >&lt;p&gt;&amp;gt; Is there a place where 2.0 proposals are collected? Maybe a wiki page?&lt;/p&gt;

&lt;p&gt;Not yet.  Feel free to start one.  It would be good to have.&lt;/p&gt;</comment>
                            <comment id="16301076" author="gurudatt" created="Fri, 22 Dec 2017 07:49:20 +0000"  >&lt;p&gt;Will this feature be worked upon for 2.0, since there is no activity on this issue since 2010&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 21 Apr 2010 22:41:27 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94831</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e0tz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79897</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-520] Refactor validation code</title>
                <link>https://issues.apache.org/jira/browse/AVRO-520</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;This patch reorganizes some of the code around the validator.  &lt;/p&gt;

&lt;p&gt;The previous version uses different classes for Writer and ValidatingWriter, and Reader and ValidatingReader.&lt;/p&gt;

&lt;p&gt;These types have been redefined respectively as WriterImpl&amp;lt;NullValidator&amp;gt; and WriterImpl&amp;lt;Validator&amp;gt;, and ReaderImpl&amp;lt;NullValidator&amp;gt; and ReaderImpl&amp;lt;Validator&amp;gt;.  The compiler generates 4 types, but the NullValidator compiles away as no-ops, creating essentially the same classes as before.  This allows logic to exist in single class definitions instead of duplicates.  &lt;/p&gt;

&lt;p&gt;Also, in the Validator some special logic was removed for records, now instead sharing code with the other compound types.&lt;/p&gt;

</description>
                <environment></environment>
        <key id="12462338">AVRO-520</key>
            <summary>Refactor validation code</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="sbanacho">Scott Banachowski</reporter>
                        <labels>
                    </labels>
                <created>Sat, 17 Apr 2010 23:05:08 +0000</created>
                <updated>Tue, 11 May 2010 14:54:51 +0000</updated>
                            <resolved>Sun, 18 Apr 2010 17:19:53 +0000</resolved>
                                                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12858314" author="sbanacho" created="Sun, 18 Apr 2010 17:19:53 +0000"  >&lt;p&gt;Committed revision 935366.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12442113" name="ASF.LICENSE.NOT.GRANTED--AVRO-520.patch" size="36871" author="sbanacho" created="Sun, 18 Apr 2010 15:38:38 +0000"/>
                            <attachment id="12442114" name="ASF.LICENSE.NOT.GRANTED--applypatch520.sh" size="189" author="sbanacho" created="Sun, 18 Apr 2010 15:38:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94832</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 41 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e0u7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79898</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-521] Out of memory and other issues with Junit tests for mapreduce</title>
                <link>https://issues.apache.org/jira/browse/AVRO-521</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The forthcoming patch fixed the out of memory problem we encounter while running JUnit tests for mapreduce.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12462417">AVRO-521</key>
            <summary>Out of memory and other issues with Junit tests for mapreduce</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thiru_mg">Thiruvalluvan M. G.</assignee>
                                    <reporter username="thiru_mg">Thiruvalluvan M. G.</reporter>
                        <labels>
                    </labels>
                <created>Mon, 19 Apr 2010 11:16:24 +0000</created>
                <updated>Wed, 8 Sep 2010 21:07:46 +0000</updated>
                            <resolved>Fri, 23 Apr 2010 14:04:50 +0000</resolved>
                                    <version>1.4.0</version>
                                    <fixVersion>1.4.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12858458" author="thiru_mg" created="Mon, 19 Apr 2010 11:24:04 +0000"  >&lt;p&gt;Increasing the max memory to 128 MB (from the default 64 MB) fixes the out of memory problem.&lt;/p&gt;

&lt;p&gt;But there is one more issue. TestWordCountGeneric leaves behind the (empty) output directory and the following test TestWordCountSpecific fails to run complaining that the output directory already exists.&lt;/p&gt;

&lt;p&gt;I fixed that problem by removing the output directory after completing each of these tests. Since I was at it, I moved the JUnit tests toJUnit4 style from JUnit3 style. All other tests are in JUnit4. Also added a couple of @Override annotations.&lt;/p&gt;

&lt;p&gt;There are quite a few warnings because we use mapreduce&apos;s JobConf. What is the new way to submit jobs? The documentation says we should use Configuration. I&apos;m not sure how to do that. Can anybody help us with correct usage? Thanks.&lt;/p&gt;</comment>
                            <comment id="12859526" author="cutting" created="Wed, 21 Apr 2010 21:09:53 +0000"  >&lt;p&gt;Thanks for updating these tests.  I started with a Hadoop JUnit3-style test and neglected to update them.&lt;/p&gt;

&lt;p&gt;We should suppress these deprecation warnings.  This uses the Hadoop 0.20 APIs, which, while deprecated in 0.20, have now since been declared the long-term stable Hadoop APIs.  There are new APIs, but they&apos;re not yet stable, and also are not present in older releases.  I believe this code should work in 0.18 and 0.19, and the forthcoming 0.21, but have not tested these yet.&lt;/p&gt;</comment>
                            <comment id="12860252" author="thiru_mg" created="Fri, 23 Apr 2010 14:04:50 +0000"  >&lt;p&gt;Committed revision 937307 after adding @SuppressWarnings annotation for JobConf deprecation. Thanks Doug for the help.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12442158" name="AVRO-521.patch" size="6112" author="thiru_mg" created="Mon, 19 Apr 2010 11:24:04 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 21 Apr 2010 21:09:53 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94833</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 40 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e0uf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79899</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
