<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:20:35 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2014-7-16+AND+created+%3C%3D+2014-7-23+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="4" total="4"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1546] Make GenericData.Record.toString consistent</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1546</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Currently, if you have a GenericData.Record and call toString on it, it provides a JSON representation of this record type. However, if the record contains a string that contains a literal forward slash, the forward slash gets escaped by the writeEscapedString function which means that the string representation is not equivalent after round-tripping the value.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;ECMA standard for JSON&lt;/a&gt;, forward slash can be escaped; however, the values &lt;tt&gt;&quot;\u002F&quot;&lt;/tt&gt;, &lt;tt&gt;&quot;\u002f&quot;&lt;/tt&gt;, &lt;tt&gt;&quot;\/&quot;&lt;/tt&gt;, and &lt;tt&gt;&quot;/&quot;&lt;/tt&gt; are all the same. Thus, it seems preferable to produce the shortest version. This is the way that Jackson works as well:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;JsonMapper mapper = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; JsonMapper();
JsonFactory factory = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; JsonFactory();
JsonNode node = mapper.readTree(factory.createJsonParser(&lt;span class=&quot;code-quote&quot;&gt;&quot;\&quot;&lt;/span&gt;/path/\&quot;&quot;));
mapper.readValue(node, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.class); &lt;span class=&quot;code-comment&quot;&gt;// =&amp;gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;/path/&quot;&lt;/span&gt;
&lt;/span&gt;
node = mapper.readTree(factory.createJsonParser(&lt;span class=&quot;code-quote&quot;&gt;&quot;\&quot;&lt;/span&gt;\/path\/\&quot;&quot;);
mapper.readValue(node, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.class); &lt;span class=&quot;code-comment&quot;&gt;// =&amp;gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;/path/&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This shows that whether or not the input is escaped that the JSON output produced in both cases is the unescaped forward slash.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12728055">AVRO-1546</key>
            <summary>Make GenericData.Record.toString consistent</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="b4hand">Brandon Forehand</assignee>
                                    <reporter username="b4hand">Brandon Forehand</reporter>
                        <labels>
                    </labels>
                <created>Thu, 17 Jul 2014 21:43:06 +0000</created>
                <updated>Thu, 24 Jul 2014 20:16:15 +0000</updated>
                            <resolved>Fri, 18 Jul 2014 19:15:08 +0000</resolved>
                                    <version>1.7.6</version>
                                    <fixVersion>1.7.7</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="14066680" author="cutting" created="Fri, 18 Jul 2014 18:22:25 +0000"  >&lt;p&gt;The test you provide succeeds without the change to GenericData.java.&lt;/p&gt;</comment>
                            <comment id="14066708" author="b4hand" created="Fri, 18 Jul 2014 18:36:00 +0000"  >&lt;p&gt;I guess that&apos;s what I get for trying to consolidate my test into an existing one. I&apos;ll resend an updated patch.&lt;/p&gt;</comment>
                            <comment id="14066718" author="b4hand" created="Fri, 18 Jul 2014 18:43:59 +0000"  >&lt;p&gt;The problem with the previous test was actually using Jackson to do the JSON parsing normalizes the string output automatically.&lt;/p&gt;

&lt;p&gt;This test is more like what I originally wrote, but it doesn&apos;t explain &lt;em&gt;why&lt;/em&gt; the change is desirable.&lt;/p&gt;</comment>
                            <comment id="14066733" author="cutting" created="Fri, 18 Jul 2014 18:53:58 +0000"  >&lt;p&gt;Adding the other test too then is perhaps a good idea?&lt;/p&gt;</comment>
                            <comment id="14066740" author="b4hand" created="Fri, 18 Jul 2014 19:02:31 +0000"  >&lt;p&gt;Well, as you pointed out, the other test, doesn&apos;t really test the problem since Jackson normalizes the strings for us. The intent is correct, but it is flawed, and unless I want to extract out the portion of the JSON string corresponding to just the single field, it would continue to have the same problem. The only correct way to do that would be to write a mini-JSON parser that &lt;b&gt;doesn&apos;t&lt;/b&gt; do normalization and then do the string comparison. That seems overkill for a single unit test, so unless you object, the single test seems fine to me.&lt;/p&gt;</comment>
                            <comment id="14066756" author="cutting" created="Fri, 18 Jul 2014 19:15:08 +0000"  >&lt;p&gt;I committed this.  Thanks, Brandon!&lt;/p&gt;</comment>
                            <comment id="14066774" author="hudson" created="Fri, 18 Jul 2014 19:37:28 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #468 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/468/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/468/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1546&quot; title=&quot;Make GenericData.Record.toString consistent&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1546&quot;&gt;&lt;del&gt;AVRO-1546&lt;/del&gt;&lt;/a&gt;. Java: Change GenericData.Record#toString() to not escape forward slashes.  Contributed by Brandon Forehand. (cutting: rev 1611772)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericData.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12656359" name="unescape_slash.patch" size="2501" author="b4hand" created="Thu, 17 Jul 2014 21:45:23 +0000"/>
                            <attachment id="12656552" name="unescape_slash2.patch" size="1534" author="b4hand" created="Fri, 18 Jul 2014 18:42:11 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 18 Jul 2014 18:22:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>406160</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 27 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1xw7j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>406180</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1547] AvroApp Schema Tool</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1547</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Over in Gora, I have been thinking for a while that the process of writing JSON data beans is rather time consuming when beans are LARGE.&lt;br/&gt;
I wanted to open this ticket for a while and now only get around to. I proposed to have the following&lt;/p&gt;

&lt;p&gt;A simple HTML webpage that defines a form of sorts, the form will enable users to create JSON schemas and will be driven by enabling users to enter Object values based on the current Avro specification document e.g. ti will be restrictive in scope.&lt;/p&gt;

&lt;p&gt;On top of this I propose to then use simple JQuery to send a request to the JSONBlob API &lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;, obtain a JSON representation of the data and then pretty print write this information to a file within the browser. The users can then save this file focally and do with it what they wish.&lt;/p&gt;

&lt;p&gt;I think that this page can easily be hosted alongside the current static Avro website and that there is no need to write a web application for this yet.&lt;/p&gt;

&lt;p&gt;I&apos;ll try to work on it sooner rather than later as this would also lower the barrier for users of Gora (as I am sure it would Users of other technologies requiring definition of Objects via JSOn schemas).&lt;/p&gt;

&lt;p&gt;I&apos;ve not assigned this against any component as there is none which I feel appropriate.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12728330">AVRO-1547</key>
            <summary>AvroApp Schema Tool</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="lewismc">Lewis John McGibbney</assignee>
                                    <reporter username="lewismc">Lewis John McGibbney</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Jul 2014 23:22:49 +0000</created>
                <updated>Sun, 30 Dec 2018 04:17:17 +0000</updated>
                                                            <fixVersion>1.9.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="15858338" author="chengas123" created="Wed, 8 Feb 2017 18:12:00 +0000"  >&lt;p&gt;Can we remove the &quot;Fix Version/s: 1.7.8&quot;? It seems like this would be better targeted towards master than the 1.7 branch&lt;/p&gt;</comment>
                            <comment id="15859961" author="lewismc" created="Thu, 9 Feb 2017 18:35:25 +0000"  >&lt;p&gt;I think that this would be a nice little GSoC project! wdyt &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=chengas123&quot; class=&quot;user-hover&quot; rel=&quot;chengas123&quot;&gt;Ben McCann&lt;/a&gt; ?&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 8 Feb 2017 18:12:00 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>406406</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 49 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1xxpb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>406426</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1548] Cannot read aliased instance in union</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1548</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I created an Avro file using unqualified record names (no namespace) and I want to read them back into another JVM with qualified names.  In the second JVM, I supply a schema with the qualified names and an alias to accept the unqualified name.  This works as expected if the record is not part of a union, but it fails with an exception if it is part of a union.&lt;/p&gt;

&lt;p&gt;Here is an example that reproduces the bug.  In a Scala REPL with avro-1.7.6.jar on the classpath,&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.file.DataFileWriter
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericData
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Schema

val parser = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser
val schema = parser.parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;record&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Unqualified1&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;fields&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;x&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;, {&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;record&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Unqualified2&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;fields&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;y&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;string&lt;span class=&quot;code-quote&quot;&gt;&quot;}]}]}]}}&quot;&lt;/span&gt;&quot;&quot;)
val unqualified2schema = schema.getField(&lt;span class=&quot;code-quote&quot;&gt;&quot;x&quot;&lt;/span&gt;).schema.getTypes.get(1)

val unqualified2instance = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Record(unqualified2schema)
unqualified2instance.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;y&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;hello&quot;&lt;/span&gt;)
val unqualified1instance = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Record(schema)
unqualified1instance.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;x&quot;&lt;/span&gt;, unqualified2instance)

val datumWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumWriter[GenericData.Record](schema)
val dataFileWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileWriter[GenericData.Record](datumWriter)
dataFileWriter.create(schema, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;tmp.avro&quot;&lt;/span&gt;))
dataFileWriter.append(unqualified1instance)
dataFileWriter.close()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;creates a file that looks like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;hexdump -C tmp.avro
00000000  4f 62 6a 01 02 16 61 76  72 6f 2e 73 63 68 65 6d  |Obj...avro.schem|
00000010  61 be 02 7b 22 74 79 70  65 22 3a 22 72 65 63 6f  |a..{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&quot;reco|
00000020  72 64 22 2c 22 6e 61 6d  65 22 3a 22 55 6e 71 75  |rd&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;Unqu|
00000030  61 6c 69 66 69 65 64 31  22 2c 22 66 69 65 6c 64  |alified1&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;field|
00000040  73 22 3a 5b 7b 22 6e 61  6d 65 22 3a 22 78 22 2c  |s&lt;span class=&quot;code-quote&quot;&gt;&quot;:[{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;x&quot;,|
00000050  22 74 79 70 65 22 3a 5b  22 6e 75 6c 6c 22 2c 7b  |&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:[&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;,{|
00000060  22 74 79 70 65 22 3a 22  72 65 63 6f 72 64 22 2c  |&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,|
00000070  22 6e 61 6d 65 22 3a 22  55 6e 71 75 61 6c 69 66  |&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&quot;Unqualif|
00000080  69 65 64 32 22 2c 22 66  69 65 6c 64 73 22 3a 5b  |ied2&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;fields&quot;:[|
00000090  7b 22 6e 61 6d 65 22 3a  22 79 22 2c 22 74 79 70  |{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;y&quot;&lt;/span&gt;,&quot;typ|
000000a0  65 22 3a 22 73 74 72 69  6e 67 22 7d 5d 7d 5d 7d  |e&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;string&quot;}]}]}|
000000b0  5d 7d 00 3d 57 38 9b 8c  5a 9a 86 3d b8 18 60 63  |]}.=W8..Z..=..`c|
000000c0  5c bb c5 02 0e 02 0a 68  65 6c 6c 6f 3d 57 38 9b  |\......hello=W8.|
000000d0  8c 5a 9a 86 3d b8 18 60  63 5c bb c5              |.Z..=..`c\..|
000000dc
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now in a new JVM, I try to load it like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.file.DataFileReader
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericData
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Schema

val parser = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser
val schema = parser.parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;record&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;namespace&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;com.mycompany&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Qualified1&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;Unqualified1&lt;span class=&quot;code-quote&quot;&gt;&quot;], &quot;&lt;/span&gt;fields&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;x&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;, {&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;record&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;namespace&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;com.mycompany&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Qualified2&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;Unqualified2&lt;span class=&quot;code-quote&quot;&gt;&quot;], &quot;&lt;/span&gt;fields&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;y&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;string&lt;span class=&quot;code-quote&quot;&gt;&quot;}]}]}]}}&quot;&lt;/span&gt;&quot;&quot;)

val datumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.Record](schema)
val dataFileReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.Record](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;tmp.avro&quot;&lt;/span&gt;), datumReader)
println(dataFileReader.hasNext)   &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;println(dataFileReader.next())
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and get the following exception:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;org.apache.avro.AvroTypeException: Found Unqualified2, expecting union
        at org.apache.avro.io.ResolvingDecoder.doAction(ResolvingDecoder.java:231)
        at org.apache.avro.io.parsing.Parser.advance(Parser.java:88)
        at org.apache.avro.io.ResolvingDecoder.readIndex(ResolvingDecoder.java:206)
        at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader.read(GenericDatumReader.java:155)
        at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader.readField(GenericDatumReader.java:193)
        at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader.readRecord(GenericDatumReader.java:183)
        at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader.read(GenericDatumReader.java:151)
        at org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader.read(GenericDatumReader.java:142)
        at org.apache.avro.file.DataFileStream.next(DataFileStream.java:233)
        at org.apache.avro.file.DataFileStream.next(DataFileStream.java:220)
        at .&amp;lt;init&amp;gt;(&amp;lt;console&amp;gt;:17)
        at .&amp;lt;clinit&amp;gt;(&amp;lt;console&amp;gt;)
        at .&amp;lt;init&amp;gt;(&amp;lt;console&amp;gt;:7)
        at .&amp;lt;clinit&amp;gt;(&amp;lt;console&amp;gt;)
        at $print(&amp;lt;console&amp;gt;)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at scala.tools.nsc.interpreter.IMain$ReadEvalPrint.call(IMain.scala:734)
        at scala.tools.nsc.interpreter.IMain$Request.loadAndRun(IMain.scala:983)
        at scala.tools.nsc.interpreter.IMain.loadAndRunReq$1(IMain.scala:573)
        at scala.tools.nsc.interpreter.IMain.interpret(IMain.scala:604)
        at scala.tools.nsc.interpreter.IMain.interpret(IMain.scala:568)
        at scala.tools.nsc.interpreter.ILoop.reallyInterpret$1(ILoop.scala:756)
        at scala.tools.nsc.interpreter.ILoop.interpretStartingWith(ILoop.scala:801)
        at scala.tools.nsc.interpreter.ILoop.command(ILoop.scala:713)
        at scala.tools.nsc.interpreter.ILoop.processLine$1(ILoop.scala:577)
        at scala.tools.nsc.interpreter.ILoop.innerLoop$1(ILoop.scala:584)
        at scala.tools.nsc.interpreter.ILoop.loop(ILoop.scala:587)
        at scala.tools.nsc.interpreter.ILoop$$anonfun$process$1.apply$mcZ$sp(ILoop.scala:878)
        at scala.tools.nsc.interpreter.ILoop$$anonfun$process$1.apply(ILoop.scala:833)
        at scala.tools.nsc.interpreter.ILoop$$anonfun$process$1.apply(ILoop.scala:833)
        at scala.tools.nsc.util.ScalaClassLoader$.savingContextLoader(ScalaClassLoader.scala:135)
        at scala.tools.nsc.interpreter.ILoop.process(ILoop.scala:833)
        at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:83)
        at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:96)
        at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:105)
        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I do exactly the same thing without a union type, I can read back the original record.  Even though this example uses GenericData for simplicity, I first observed the bug using SpecificData.&lt;/p&gt;

&lt;p&gt;(Motivation: I created unqualified record names in one process and then wanted to read it back in another, where I had auto-generated specific classes.  I couldn&apos;t pollute the parent namespace with the auto-generated classes, and that&apos;s why I qualified their names.  The union is because sometimes the inner record is legitimately null.)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12728911">AVRO-1548</key>
            <summary>Cannot read aliased instance in union</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jpivarski">Jim Pivarski</reporter>
                        <labels>
                            <label>alias</label>
                            <label>uniontype</label>
                    </labels>
                <created>Tue, 22 Jul 2014 17:38:00 +0000</created>
                <updated>Wed, 23 Jul 2014 15:10:05 +0000</updated>
                                            <version>1.7.6</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="14070990" author="cutting" created="Tue, 22 Jul 2014 21:56:23 +0000"  >&lt;p&gt;Could this be a case of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1535&quot; title=&quot;permit aliases to null namespace&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1535&quot;&gt;&lt;del&gt;AVRO-1535&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="14071017" author="jpivarski" created="Tue, 22 Jul 2014 22:14:23 +0000"  >&lt;p&gt;It could be.  In my case, I intend the aliases to be interpreted without a namespace, but the record has a namespace, so the schema would be interpreting the aliases with namespaces.  This follows the specification (now that I re-read it).  But just like &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1535&quot; title=&quot;permit aliases to null namespace&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1535&quot;&gt;&lt;del&gt;AVRO-1535&lt;/del&gt;&lt;/a&gt;, the specification doesn&apos;t allow for no-namespace aliases.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1535&quot; title=&quot;permit aliases to null namespace&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1535&quot;&gt;&lt;del&gt;AVRO-1535&lt;/del&gt;&lt;/a&gt; says that a leading dot (.) can be used to specify no-namespace in an alias.  I tried that, using avro-1-7-6.jar, and the leading dot seems to have been ignored: same error message (and no error message about the dot).  Is that a new feature added to Avro 1.7.7 (or 1.8)?&lt;/p&gt;

&lt;p&gt;Also, it&apos;s odd that it works without a union, which is different from &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1535&quot; title=&quot;permit aliases to null namespace&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1535&quot;&gt;&lt;del&gt;AVRO-1535&lt;/del&gt;&lt;/a&gt;.  For example, you can do this in the writer:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.file.DataFileWriter
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericData
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumWriter
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Schema

val parser = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser
val schema = parser.parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;record&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Unqualified1&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;fields&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;x&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: {&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;record&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Unqualified2&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;fields&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;y&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;string&lt;span class=&quot;code-quote&quot;&gt;&quot;}]}}]}}&quot;&lt;/span&gt;&quot;&quot;)
val unqualified2schema = schema.getField(&lt;span class=&quot;code-quote&quot;&gt;&quot;x&quot;&lt;/span&gt;).schema

val unqualified2instance = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Record(unqualified2schema)
unqualified2instance.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;y&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;hello&quot;&lt;/span&gt;)
val unqualified1instance = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Record(schema)
unqualified1instance.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;x&quot;&lt;/span&gt;, unqualified2instance)

val datumWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumWriter[GenericData.Record](schema)
val dataFileWriter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileWriter[GenericData.Record](datumWriter)
dataFileWriter.create(schema, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;tmp.avro&quot;&lt;/span&gt;))
dataFileWriter.append(unqualified1instance)
dataFileWriter.close()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and this in the reader:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.file.DataFileReader
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericData
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Schema

val parser = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser
val schema = parser.parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;record&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;namespace&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;com.mycompany&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Qualified1&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;Unqualified1&lt;span class=&quot;code-quote&quot;&gt;&quot;], &quot;&lt;/span&gt;fields&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;x&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: {&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;record&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;namespace&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;com.mycompany&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;Qualified2&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;Unqualified2&lt;span class=&quot;code-quote&quot;&gt;&quot;], &quot;&lt;/span&gt;fields&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;y&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;string&lt;span class=&quot;code-quote&quot;&gt;&quot;}]}}]}}&quot;&lt;/span&gt;&quot;&quot;)

val datumReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[GenericData.Record](schema)
val dataFileReader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader[GenericData.Record](&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;code-quote&quot;&gt;&quot;tmp.avro&quot;&lt;/span&gt;), datumReader)
println(dataFileReader.hasNext)   &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;println(dataFileReader.next())
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and it works.  The only difference is that field &quot;x&quot; has type &quot;Qualified2&quot;, rather than a union of null and &quot;Qualified2&quot;.  Considering that I now know that the aliases are supposed to be relative to the record&apos;s namespace, &lt;em&gt;this&lt;/em&gt; behavior should be considered wrong, shouldn&apos;t it?&lt;/p&gt;</comment>
                            <comment id="14071069" author="cutting" created="Tue, 22 Jul 2014 22:49:47 +0000"  >&lt;p&gt;&amp;gt; Is that a new feature added to Avro 1.7.7 [ ... ]&lt;/p&gt;

&lt;p&gt;Yes.  1.7.7 should be available in a few days.&lt;/p&gt;

&lt;p&gt;&amp;gt; this behavior should be considered wrong, shouldn&apos;t it?&lt;/p&gt;

&lt;p&gt;The Java implementation is forgiving in some places about changes to record names, but not so much about field names or the overall shape of the data structure.&lt;/p&gt;</comment>
                            <comment id="14071839" author="jpivarski" created="Wed, 23 Jul 2014 15:10:05 +0000"  >&lt;p&gt;Since it will just be a few days, I&apos;ll wait for 1.7.7 to come out and then test my example with the &quot;.&quot; prefix notation.  Thanks!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 22 Jul 2014 21:56:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>406985</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 26 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1y193:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>407004</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1549] Overlapping protocol names result in overwritten classes.</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1549</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;If two .avdl files have the same &apos;protocol&apos; name specified at the top, Java code generation will only produce one of them, and ignore the other (or, I would speculate, generates one, then overwrites it with the second one).&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;test1.avdl:&lt;/p&gt;

&lt;p&gt;@namespace(&quot;my.example&quot;)&lt;br/&gt;
protocol example&lt;br/&gt;
{&lt;br/&gt;
    void test();&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;test2.avdl:&lt;/p&gt;

&lt;p&gt;@namespace(&quot;my.example&quot;)&lt;br/&gt;
protocol example&lt;br/&gt;
{&lt;br/&gt;
    void testOverwrite();&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;Generates a Java class example.java:&lt;/p&gt;

&lt;p&gt;package my.example;&lt;/p&gt;

&lt;p&gt;@SuppressWarnings(&quot;all&quot;)&lt;br/&gt;
@org.apache.avro.specific.AvroGenerated&lt;br/&gt;
public interface example {&lt;br/&gt;
  public static final org.apache.avro.Protocol PROTOCOL = org.apache.avro.Protocol.parse(&quot;{\&quot;protocol\&quot;:\&quot;example\&quot;,\&quot;namespace\&quot;:\&quot;my.example\&quot;,\&quot;types\&quot;:[],\&quot;messages\&quot;:{\&quot;testOverwrite\&quot;:&lt;/p&gt;
{\&quot;request\&quot;:[],\&quot;response\&quot;:\&quot;null\&quot;}
&lt;p&gt;}}&quot;);&lt;br/&gt;
  java.lang.Void testOverwrite() throws org.apache.avro.AvroRemoteException;&lt;/p&gt;

&lt;p&gt;  @SuppressWarnings(&quot;all&quot;)&lt;br/&gt;
  public interface Callback extends example &lt;/p&gt;
{
    public static final org.apache.avro.Protocol PROTOCOL = my.example.example.PROTOCOL;
    void testOverwrite(org.apache.avro.ipc.Callback&amp;lt;java.lang.Void&amp;gt; callback) throws java.io.IOException;
  }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;While the error may be clear here, I ran into an issue on my project born out of this. We had an avdl file populated with methods that was importing another avdl that was populated with common objects used by a number of other avdl files. The included file had the same protocol name as the file that was including it. This resulted in a Java class with no methods in it. &lt;/p&gt;

&lt;p&gt;Being new to Avro, it took me quite a while to narrow down the cause, though now it seems obvious. It would have been helpful if the code generation had noticed the duplicate protocol name and thrown an error or least a warning.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12728978">AVRO-1549</key>
            <summary>Overlapping protocol names result in overwritten classes.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jimux">James Smyth</reporter>
                        <labels>
                    </labels>
                <created>Tue, 22 Jul 2014 21:32:26 +0000</created>
                <updated>Tue, 22 Jul 2014 21:32:26 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>407052</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 26 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1y1nj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>407069</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>
