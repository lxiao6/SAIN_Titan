<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:26:23 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2018-3-21+AND+created+%3C%3D+2018-3-28+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="3" total="3"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-2162] Add Zstandard compression to avro file format</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2162</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I&apos;d like to add Zstandard compression for Avro.&#160;&lt;/p&gt;

&lt;p&gt;At compression level 1 It is almost as fast as Snappy at compression, with compression ratios more like gzip.&#160; At higher levels of compression, it is more compact than gzip -9 with much lower CPU when compressing and roughly 3x faster decompression.&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;Adding it to Java is fairly easy.&#160; We&apos;ll need to say something about it in the spec however, as an &apos;optinal&apos; codec.&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;</description>
                <environment></environment>
        <key id="13147068">AVRO-2162</key>
            <summary>Add Zstandard compression to avro file format</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="scott_carey">Scott Carey</reporter>
                        <labels>
                    </labels>
                <created>Thu, 22 Mar 2018 07:38:21 +0000</created>
                <updated>Thu, 6 Dec 2018 10:04:39 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="16409699" author="busbey" created="Thu, 22 Mar 2018 15:15:19 +0000"  >&lt;p&gt;this would be great!&lt;/p&gt;</comment>
                            <comment id="16410190" author="githubbot" created="Thu, 22 Mar 2018 19:58:38 +0000"  >&lt;p&gt;scottcarey opened a new pull request #303: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2162&quot; title=&quot;Add Zstandard compression to avro file format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2162&quot;&gt;AVRO-2162&lt;/a&gt; Adds Zstandard compression to the Avro File Format (Java)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/303&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/303&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;         Adds TestCodecs to cover all file compression Codecs.&lt;br/&gt;
         Consolidates common code in Codecs into OutputStreamCodec&lt;br/&gt;
         and OutputInputStreamCodec abstractions.&lt;br/&gt;
         Fixes DataFileStream so that Codecs can return DirectByteBuffers&lt;br/&gt;
         or Heap ByteBuffers with non-zero offset.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16410193" author="githubbot" created="Thu, 22 Mar 2018 20:01:36 +0000"  >&lt;p&gt;scottcarey commented on issue #303: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2162&quot; title=&quot;Add Zstandard compression to avro file format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2162&quot;&gt;AVRO-2162&lt;/a&gt; Adds Zstandard compression to the Avro File Format (Java)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/303#issuecomment-375438762&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/303#issuecomment-375438762&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   While writing this and adding test coverage, I ended up making a few other clean-ups. &lt;/p&gt;

&lt;p&gt;   Do we need to add anything in the spec about this?  &lt;/p&gt;

&lt;p&gt;   I also targetted the 1.8 branch because I assume that many people on older branches might be interested.  I&apos;m still stuck on a 1.7.x branch in (hadoop) production myself &amp;#8211; though that should change in a few months.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16410195" author="githubbot" created="Thu, 22 Mar 2018 20:03:22 +0000"  >&lt;p&gt;scottcarey commented on a change in pull request #303: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2162&quot; title=&quot;Add Zstandard compression to avro file format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2162&quot;&gt;AVRO-2162&lt;/a&gt; Adds Zstandard compression to the Avro File Format (Java)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/303#discussion_r176555302&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/303#discussion_r176555302&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/pom.xml&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -198,6 +198,11 @@&lt;br/&gt;
       &amp;lt;artifactId&amp;gt;joda-time&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
       &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;&lt;br/&gt;
     &amp;lt;/dependency&amp;gt;&lt;br/&gt;
+    &amp;lt;dependency&amp;gt;&lt;br/&gt;
+      &amp;lt;groupId&amp;gt;com.github.luben&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+      &amp;lt;artifactId&amp;gt;zstd-jni&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+      &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   I think that most of the compression dependencies should be &amp;lt;optional&amp;gt;.  Its extra baggage that is not useful in any case where we aren&apos;t writing out or reading files.  It would be more consistent with the other codecs to remove this.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16410198" author="githubbot" created="Thu, 22 Mar 2018 20:04:56 +0000"  >&lt;p&gt;scottcarey commented on a change in pull request #303: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2162&quot; title=&quot;Add Zstandard compression to avro file format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2162&quot;&gt;AVRO-2162&lt;/a&gt; Adds Zstandard compression to the Avro File Format (Java)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/303#discussion_r176555679&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/303#discussion_r176555679&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/file/BZip2Codec.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -42,64 +40,20 @@ protected Codec createInstance() {&lt;br/&gt;
   public String getName() &lt;/p&gt;
{ return DataFileConstants.BZIP2_CODEC; }

&lt;p&gt;   @Override&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public ByteBuffer compress(ByteBuffer uncompressedData) throws IOException {&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;ByteArrayOutputStream baos = getOutputBuffer(uncompressedData.remaining());&lt;/li&gt;
	&lt;li&gt;BZip2CompressorOutputStream outputStream = new BZip2CompressorOutputStream(baos);&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;try 
{
-      outputStream.write(uncompressedData.array(),
-                         uncompressedData.position(),
-                         uncompressedData.remaining());
-    }
&lt;p&gt; finally &lt;/p&gt;
{
-      outputStream.close();
-    }
&lt;p&gt;-&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;ByteBuffer result = ByteBuffer.wrap(baos.toByteArray());&lt;/li&gt;
	&lt;li&gt;return result;&lt;br/&gt;
+  protected OutputStream compressedStream(OutputStream output)&lt;br/&gt;
+      throws IOException 
{
+    return new BZip2CompressorOutputStream(output);
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   @Override&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public ByteBuffer decompress(ByteBuffer compressedData) throws IOException {&lt;/li&gt;
	&lt;li&gt;ByteArrayInputStream bais = new ByteArrayInputStream(compressedData.array());&lt;/li&gt;
	&lt;li&gt;BZip2CompressorInputStream inputStream = new BZip2CompressorInputStream(bais);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   Most of the Codecs are internally based on InputStreams and OutputStreams.  I refactored the commonalities out into two abstract classes (these would be better as &apos;mix-in&apos; interfaces in Java 8+).&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16410199" author="githubbot" created="Thu, 22 Mar 2018 20:05:46 +0000"  >&lt;p&gt;scottcarey commented on a change in pull request #303: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2162&quot; title=&quot;Add Zstandard compression to avro file format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2162&quot;&gt;AVRO-2162&lt;/a&gt; Adds Zstandard compression to the Avro File Format (Java)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/303#discussion_r176555870&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/303#discussion_r176555870&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/file/CodecFactory.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -40,7 +42,9 @@&lt;br/&gt;
 public abstract class CodecFactory {&lt;br/&gt;
   /** Null codec, for no compression. */&lt;br/&gt;
   public static CodecFactory nullCodec() {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return NullCodec.OPTION;&lt;br/&gt;
+    // we can not reference NullCodec.OPTION because the static&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   The unit test uncovered the fact that accessing this field here results in &apos;null&apos; since we have a circular dependency in static initialization.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16410202" author="githubbot" created="Thu, 22 Mar 2018 20:07:46 +0000"  >&lt;p&gt;scottcarey commented on a change in pull request #303: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2162&quot; title=&quot;Add Zstandard compression to avro file format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2162&quot;&gt;AVRO-2162&lt;/a&gt; Adds Zstandard compression to the Avro File Format (Java)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/303#discussion_r176556430&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/303#discussion_r176556430&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -351,16 +349,27 @@ ByteBuffer getAsByteBuffer() &lt;/p&gt;
{
       return ByteBuffer.wrap(data, offset, blockSize);
     }

&lt;p&gt;+    void setBytes(ByteBuffer block) {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   this now supports Codecs that return Direct ByteBuffers.  Earlier versions of the ZstandardCodec were using APIs that returned direct buffers, which exploded here. &lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16410214" author="githubbot" created="Thu, 22 Mar 2018 20:12:30 +0000"  >&lt;p&gt;scottcarey commented on a change in pull request #303: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2162&quot; title=&quot;Add Zstandard compression to avro file format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2162&quot;&gt;AVRO-2162&lt;/a&gt; Adds Zstandard compression to the Avro File Format (Java)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/303#discussion_r176557719&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/303#discussion_r176557719&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/file/SnappyCodec.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -34,50 +35,63 @@ protected Codec createInstance() {&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private SnappyCodec() {}&lt;br/&gt;
+  SnappyCodec() {}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   @Override public String getName() &lt;/p&gt;
{ return DataFileConstants.SNAPPY_CODEC; }

&lt;p&gt;   @Override&lt;br/&gt;
   public ByteBuffer compress(ByteBuffer in) throws IOException {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Tests were failing on only Snappy when I made some overly strict assumptions on the returned buffer. &lt;/p&gt;

&lt;p&gt;   In the process of debugging I fixed at least one bug (not setting ByteOrder.LITTLE_ENDIAN and letting the file format depend on the CPU of the writer).&lt;/p&gt;

&lt;p&gt;   The code also was not properly accounting for arrayOffset in many cases.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16410219" author="githubbot" created="Thu, 22 Mar 2018 20:14:27 +0000"  >&lt;p&gt;scottcarey commented on a change in pull request #303: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2162&quot; title=&quot;Add Zstandard compression to avro file format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2162&quot;&gt;AVRO-2162&lt;/a&gt; Adds Zstandard compression to the Avro File Format (Java)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/303#discussion_r176558252&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/303#discussion_r176558252&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/file/XZCodec.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -57,62 +52,22 @@ public String getName() {&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   @Override&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public ByteBuffer compress(ByteBuffer data) throws IOException {&lt;/li&gt;
	&lt;li&gt;ByteArrayOutputStream baos = getOutputBuffer(data.remaining());&lt;/li&gt;
	&lt;li&gt;OutputStream ios = new XZCompressorOutputStream(baos, compressionLevel);&lt;/li&gt;
	&lt;li&gt;writeAndClose(data, ios);&lt;/li&gt;
	&lt;li&gt;return ByteBuffer.wrap(baos.toByteArray());&lt;br/&gt;
+  protected OutputStream compressedStream(OutputStream output)&lt;br/&gt;
+      throws IOException 
{
+    return new XZCompressorOutputStream(output, compressionLevel);
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   @Override&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public ByteBuffer decompress(ByteBuffer data) throws IOException {&lt;/li&gt;
	&lt;li&gt;ByteArrayOutputStream baos = getOutputBuffer(data.remaining());&lt;/li&gt;
	&lt;li&gt;InputStream bytesIn = new ByteArrayInputStream(&lt;/li&gt;
	&lt;li&gt;data.array(),&lt;/li&gt;
	&lt;li&gt;data.arrayOffset() + data.position(),&lt;/li&gt;
	&lt;li&gt;data.remaining());&lt;/li&gt;
	&lt;li&gt;InputStream ios = new XZCompressorInputStream(bytesIn);&lt;/li&gt;
	&lt;li&gt;try 
{
-      IOUtils.copy(ios, baos);
-    }
&lt;p&gt; finally &lt;/p&gt;
{
-      ios.close();
-    }&lt;/li&gt;
	&lt;li&gt;return ByteBuffer.wrap(baos.toByteArray());&lt;br/&gt;
+  protected InputStream uncompressedStream(InputStream input)&lt;br/&gt;
+      throws IOException 
{
+    return new XZCompressorInputStream(input);
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private void writeAndClose(ByteBuffer data, OutputStream to) throws IOException {&lt;/li&gt;
	&lt;li&gt;byte[] input = data.array();&lt;/li&gt;
	&lt;li&gt;int offset = data.arrayOffset() + data.position();&lt;/li&gt;
	&lt;li&gt;int length = data.remaining();&lt;/li&gt;
	&lt;li&gt;try 
{
-      to.write(input, offset, length);
-    }
&lt;p&gt; finally &lt;/p&gt;
{
-      to.close();
-    }&lt;/li&gt;
	&lt;li&gt;}&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;// get and initialize the output buffer for use.&lt;/li&gt;
	&lt;li&gt;private ByteArrayOutputStream getOutputBuffer(int suggestedLength) {&lt;/li&gt;
	&lt;li&gt;if (null == outputBuffer) 
{
-      outputBuffer = new ByteArrayOutputStream(suggestedLength);
-    }&lt;/li&gt;
	&lt;li&gt;outputBuffer.reset();&lt;/li&gt;
	&lt;li&gt;return outputBuffer;&lt;/li&gt;
	&lt;li&gt;}&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;@Override&lt;/li&gt;
	&lt;li&gt;public int hashCode() 
{
-    return compressionLevel;
-  }
&lt;p&gt;+  @Override public int hashCode() &lt;/p&gt;
{ return getName().hashCode(); }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   @Override&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public boolean equals(Object obj) {&lt;/li&gt;
	&lt;li&gt;if (this == obj)&lt;/li&gt;
	&lt;li&gt;return true;&lt;/li&gt;
	&lt;li&gt;if (getClass() != obj.getClass())&lt;/li&gt;
	&lt;li&gt;return false;&lt;/li&gt;
	&lt;li&gt;XZCodec other = (XZCodec)obj;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   The equals method for the XZ codec was wrong &amp;#8211; according to the specification of Codec, it should equal if it is mutually decompressible.  The compression level is used for the compressor but does not affect decompressibility.&lt;/p&gt;

&lt;p&gt;   I made the implementation of hashCode and equals consistent across the codecs when appropriate.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16410223" author="githubbot" created="Thu, 22 Mar 2018 20:15:53 +0000"  >&lt;p&gt;scottcarey commented on a change in pull request #303: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2162&quot; title=&quot;Add Zstandard compression to avro file format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2162&quot;&gt;AVRO-2162&lt;/a&gt; Adds Zstandard compression to the Avro File Format (Java)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/303#discussion_r176558658&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/303#discussion_r176558658&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/test/java/org/apache/avro/file/TestCodecs.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -0,0 +1,82 @@&lt;br/&gt;
+/**&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements. See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership. The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License. You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ * &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.file;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import java.nio.ByteBuffer;&lt;br/&gt;
+import java.util.Arrays;&lt;br/&gt;
+import java.util.Collection;&lt;br/&gt;
+import java.util.Random;&lt;br/&gt;
+&lt;br/&gt;
+import org.junit.Assert;&lt;br/&gt;
+import org.junit.Test;&lt;br/&gt;
+import org.junit.runner.RunWith;&lt;br/&gt;
+import org.junit.runners.Parameterized;&lt;br/&gt;
+import org.junit.runners.Parameterized.Parameters;&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+@RunWith(Parameterized.class)&lt;br/&gt;
+public class TestCodecs {&lt;br/&gt;
+&lt;br/&gt;
+  @Parameters(name = &quot;Codec: &lt;/p&gt;
{0}
&lt;p&gt;&quot;)&lt;br/&gt;
+  public static Collection&amp;lt;Object[]&amp;gt; data() {&lt;br/&gt;
+    return Arrays.asList(new Object[][] {&lt;br/&gt;
+      &lt;/p&gt;
{ new NullCodec() }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ new DeflateCodec(3) }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ new BZip2Codec() }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ new SnappyCodec() }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ new XZCodec(3) }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ new ZstandardCodec(3) }
&lt;p&gt;+    });&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private final Codec codec;&lt;br/&gt;
+  private final byte[] zeroes = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;1024*1024&amp;#93;&lt;/span&gt;;&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   all zeroes tends to compress massively &amp;#8211; which can uncover bugs in buffer sizing when decompressing.&lt;/p&gt;

&lt;p&gt;   pure random tends to be &lt;em&gt;larger&lt;/em&gt; when compressed than uncompressed and may find bugs in buffer sizing when compressing.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16420324" author="githubbot" created="Fri, 30 Mar 2018 09:30:51 +0000"  >&lt;p&gt;scottcarey commented on issue #303: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2162&quot; title=&quot;Add Zstandard compression to avro file format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2162&quot;&gt;AVRO-2162&lt;/a&gt; Adds Zstandard compression to the Avro File Format (Java)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/303#issuecomment-377488012&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/303#issuecomment-377488012&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thinking about this a bit more.... I think I&apos;ll make three pull requests.  One to the 1.7.x branch, one to the 1.8.x branch, and one to master.&lt;/p&gt;

&lt;p&gt;   The two for the older branches will be as minimal as possible, only adding the new compression type.&lt;/p&gt;

&lt;p&gt;   The one for master will include refactoring to reduce code duplication.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16710363" author="githubbot" created="Wed, 5 Dec 2018 17:18:55 +0000"  >&lt;p&gt;iemejia commented on issue #303: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2162&quot; title=&quot;Add Zstandard compression to avro file format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2162&quot;&gt;AVRO-2162&lt;/a&gt; Adds Zstandard compression to the Avro File Format (Java)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/303#issuecomment-444567917&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/303#issuecomment-444567917&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Is there something considerable being missing to get this one merged? I think it would be great to have it for the 1.9.0 release. Backporting this looks like a lot of extra work, and can be done if someone really really needs/want to, otherwise we should encourage moving upwards.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16710433" author="githubbot" created="Wed, 5 Dec 2018 18:07:35 +0000"  >&lt;p&gt;nandorKollar commented on issue #303: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2162&quot; title=&quot;Add Zstandard compression to avro file format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2162&quot;&gt;AVRO-2162&lt;/a&gt; Adds Zstandard compression to the Avro File Format (Java)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/303#issuecomment-444584524&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/303#issuecomment-444584524&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I believe a Zstandard codec was already merged: &lt;a href=&quot;https://github.com/apache/avro/commit/cf2f30336efe0ecc3debc7bede86fde6d23f7c79&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/commit/cf2f30336efe0ecc3debc7bede86fde6d23f7c79&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;   I think this is a duplicate.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16711223" author="githubbot" created="Thu, 6 Dec 2018 10:04:39 +0000"  >&lt;p&gt;Fokko commented on issue #303: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2162&quot; title=&quot;Add Zstandard compression to avro file format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2162&quot;&gt;AVRO-2162&lt;/a&gt; Adds Zstandard compression to the Avro File Format (Java)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/303#issuecomment-444817733&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/303#issuecomment-444817733&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @scottcarey &lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 22 Mar 2018 15:15:19 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3rmuv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2163] Release 1.8.3</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2163</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Please link to any issues that should be considered blockers for the 1.8.3 release.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13147241">AVRO-2163</key>
            <summary>Release 1.8.3</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21148&amp;avatarType=issuetype">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="sacharya">Suraj Acharya</assignee>
                                    <reporter username="busbey">Sean Busbey</reporter>
                        <labels>
                    </labels>
                <created>Thu, 22 Mar 2018 18:10:17 +0000</created>
                <updated>Thu, 13 Sep 2018 15:18:31 +0000</updated>
                                            <version>1.8.3</version>
                                    <fixVersion>1.8.3</fixVersion>
                                    <component>community</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="16613638" author="rocketraman" created="Thu, 13 Sep 2018 15:18:31 +0000"  >&lt;p&gt;Not that it appears like 1.8.3 is gonna happen any time soon, BUT that being said, I&apos;d like to submit&#160;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt; for consideration. There is a pull request here:&#160;&lt;a href=&quot;https://github.com/apache/avro/pull/309&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12994181">AVRO-1891</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="13094383">AVRO-2065</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 13 Sep 2018 15:18:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            18 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3rnx3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2164] Make Decimal a first class type.</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2164</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I&apos;d be interested to hear the communities thoughts on making decimal a first class type.&#160;&lt;/p&gt;

&lt;p&gt;The current logical type encodes a decimal into&#160;a &lt;em&gt;bytes&lt;/em&gt;&#160;or &lt;em&gt;fixed&lt;/em&gt;. This encoding does not include any information about the scale, i.e. this encoding is lossy.&#160;&lt;/p&gt;

&lt;p&gt;There&#160;are open issues around the compatibility / evolvability of schemas containing decimal logical types, (e.g.&#160;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2078&quot; title=&quot;Avro does not enforce schema resolution rules for Decimal type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2078&quot;&gt;AVRO-2078&lt;/a&gt;&#160;&amp;amp;&#160;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1721&quot; title=&quot;Should LogicalTypes introduce schema (in)compatibility and canonical parsing form changes?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1721&quot;&gt;AVRO-1721&lt;/a&gt;), that mean reading data that was previously written with a different scale&#160;will result in data corruption.&lt;/p&gt;

&lt;p&gt;If these issues were fixed, with suitable compatibility checks put in place,&#160;this would then make it impossible to evolve an Avro schema where the scale needs to be changed. This inability to&#160;evolve the scale is very restrictive, and can result in high overhead for organizations that &lt;em&gt;need&lt;/em&gt; to change the scale, i.e. they may potentially need to copy their entire data set,&#160;deserializing with the old scale and re-serializing with the new.&lt;/p&gt;

&lt;p&gt;If &lt;em&gt;decimal&lt;/em&gt; were promoted to a first class type, this would allow&#160;the scale to be captured in the serialized form, allow for schema evolution support.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13147467">AVRO-2164</key>
            <summary>Make Decimal a first class type.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="BigAndy">Andy Coates</reporter>
                        <labels>
                    </labels>
                <created>Fri, 23 Mar 2018 13:13:13 +0000</created>
                <updated>Sat, 29 Dec 2018 13:30:18 +0000</updated>
                                            <version>1.8.2</version>
                                                    <component>logical types</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="16411572" author="rdblue" created="Fri, 23 Mar 2018 15:32:25 +0000"  >&lt;p&gt;I disagree that the current format is lossy. The decimal scale is stored in the logical type and should be uniform.&#160;I think there may be a problem where Avro doesn&apos;t reject values with the wrong scale, but that&apos;s a simple bug and not a problem.&lt;/p&gt;

&lt;p&gt;If you want a type that&#160;stores the scale of each value with the value itself, then that&apos;s a new type of decimal that we can think about adding. But I think it should be a logical type, or else this would require an incompatible change to the format.&lt;/p&gt;</comment>
                            <comment id="16411595" author="hp9000" created="Fri, 23 Mar 2018 15:47:24 +0000"  >&lt;p&gt;It is kind of lossy since you cannot use a BigDecimal in a union with null. In this case you have to use a ByteBuffer and do the conversion yourself, which means that you have to ask the schema yourself which not very convenient (not to speak about schema evolution).&lt;/p&gt;</comment>
                            <comment id="16411615" author="rdblue" created="Fri, 23 Mar 2018 15:59:29 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hp9000&quot; class=&quot;user-hover&quot; rel=&quot;hp9000&quot;&gt;Hans-Peter Werner&lt;/a&gt;, I don&apos;t follow. How is it lossy? What is &quot;kind of&quot; lossy?&lt;/p&gt;</comment>
                            <comment id="16411673" author="hp9000" created="Fri, 23 Mar 2018 16:36:42 +0000"  >&lt;p&gt;&quot;Lossy&quot; in that you dont have the scale stored with the data AND you dont get it provided by AVRO out of the box. It didnt want stress the term too much &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;The idea of decimal being a first class member came to my mind also some days ago, when I wrote a workaround for nullable decimals (as a POC). But I think it just hides the problem.&lt;/p&gt;</comment>
                            <comment id="16411698" author="rdblue" created="Fri, 23 Mar 2018 16:51:43 +0000"  >&lt;p&gt;The current decimal type is a fixed scale, so you use the same scale for an entire file. This matches the behavior of decimal columns in SQL. I&apos;m not sure what you mean by &quot;provided by Avro out of the box&quot;. When you read decimals, the BigDecimal instances have the column&apos;s scale. Avro should also verify that all of the decimals passed in have the correct scale and reject them.&lt;/p&gt;</comment>
                            <comment id="16411737" author="hp9000" created="Fri, 23 Mar 2018 17:16:08 +0000"  >&lt;p&gt;We use AVRO when we write data to kafka topics with separate producer and consumer schemas. The Java classes are created from IDL. When we declare a field as union { null, decimal... } it ist correctly represented as a BigDecimal, but it cannot be serlialized because of the missing conversion (see &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1891&quot; title=&quot;Generated Java code fails with union containing logical type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1891&quot;&gt;AVRO-1891&lt;/a&gt;). Hence we have to skip&#160;the decimal-support, have ByteBuffers in our classes instead and handle the ByteBuffer-BigDecimal-conversion (and scale checking) ourselfs.&#160;&lt;/p&gt;</comment>
                            <comment id="16523603" author="bigandy" created="Tue, 26 Jun 2018 11:41:42 +0000"  >&lt;p&gt;I guess the main issue that I see is that the current decimal implementations in Avro doesn&apos;t allow for schema evolution where the scale changes. Consider a use-case where a schema has a decimal field with scale 4. Then at some point later it comes to light that 4 is too little, and a scale of 5 is needed, (or it&apos;s too much and is wasting space and only 3 is needed). With the current implementation, if the scale is changed, then reading the a record serialised with the old schema using the new schema as a read-schema will result in the wrong value. This, IMHO, is a big issue. This is data corruption.&lt;/p&gt;

&lt;p&gt;Possible ways to solve this:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;don&apos;t allow scale changes, i.e. read/write schemas with different scale should be considered incompatible.&lt;/li&gt;
	&lt;li&gt;covert values on the fly, i.e. deserialize the decimal using the old scale and attempt to set the new scale. Where the new scale is larger this will always work. Where the new scale is smaller this may through an exception.  (It may also make sense to allow the user to define rounding behaviour in the case where the scale has reduced).&lt;/li&gt;
	&lt;li&gt;encode the scale in the serialised form, i.e. create a new type, (either first class or logical), where the serialised form is prefixed with the scale.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Of these, maybe the best is to convert on the fly?&lt;/p&gt;</comment>
                            <comment id="16523943" author="rdblue" created="Tue, 26 Jun 2018 16:33:12 +0000"  >&lt;p&gt;First class types are difficult to add because they break the format&apos;s forward-compatibility (old readers can&apos;t read newer data). I don&apos;t think there&apos;s a compelling argument to add decimal as a primitive anyway. We can make it work with logical types. Similarly, I don&apos;t see a benefit to including this in the serialized form. There&apos;s nothing that would achieve that we can&apos;t do with the scale encoded in the schema, other than storing values with different scales, which is beyond the scope of the type (because no SQL system supports it).&lt;/p&gt;

&lt;p&gt;Part of the problem is that we don&apos;t have well-defined rules for decimal evolution. Because changing the scale of a value changes the value itself (4.00 is NOT equal to 4.000), I think that at a minimum, decimals should always be returned in the scale they were written with. That would solve many of these problems, right? I&apos;d like to hear ideas for clearly defined rules about what happens when you evolve a decimal. (In Iceberg, we don&apos;t allow scale changes at all because of the problems here.) Without a clear set of rules first, I don&apos;t think we can confidently make changes.&lt;/p&gt;</comment>
                            <comment id="16524997" author="bigandy" created="Wed, 27 Jun 2018 12:46:26 +0000"  >&lt;p&gt;Hey &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, thanks for your time on this subject.&lt;/p&gt;

&lt;p&gt;Maybe&#160;always reading a decimal at the same scale as it was written would be a good first step.&#160;&lt;/p&gt;

&lt;p&gt;It will mean some systems need to coerce decimals to the scale of the read-schema as a secondary step, but that does at least then mean they have full control over rounding / error handling.&#160;&lt;/p&gt;

&lt;p&gt;This will necessitate a lot of people writing very similar code, which we may want to bring in to the avro libraries at some point.&lt;/p&gt;</comment>
                            <comment id="16525022" author="nkollar" created="Wed, 27 Jun 2018 13:01:17 +0000"  >&lt;p&gt;As of schema evolution, Avro &lt;a href=&quot;https://avro.apache.org/docs/1.8.2/spec.html#Decimal&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;spec&lt;/a&gt; has a rule for decimal evolution: the scale and precision should not change. Like Ryan mentioned this can result in wrong interpretation of data, therefore in my opinion the code should enforce this rule (see &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2078&quot; title=&quot;Avro does not enforce schema resolution rules for Decimal type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2078&quot;&gt;AVRO-2078&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;However spec doesn&apos;t have any evolution rule for other types. What happens if the millisecond precision timestamp is promoted to microsecond precision? Should Avro care about it? What happens to the other way? What happens if reader tries to read a time field as date?&lt;/p&gt;</comment>
                            <comment id="16540405" author="bigandy" created="Wed, 11 Jul 2018 17:16:42 +0000"  >&lt;p&gt;I&apos;m not sure that simply going with &apos;you can&apos;t change the scale or precision&apos; is a viable option. It&apos;s overly restrictive and makes decimal fields pretty useless IMHO.&#160;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkollar&quot; class=&quot;user-hover&quot; rel=&quot;nkollar&quot;&gt;Nandor Kollar&lt;/a&gt; the link to the spec you give above doesn&apos;t cover evolution of decimal, unless I&apos;m mistaken. It&apos;s to the second of the doc that covers decimal logical type definition and comparison rules.&#160; Do you mean to link to something else?&lt;/p&gt;</comment>
                            <comment id="16540421" author="bigandy" created="Wed, 11 Jul 2018 17:25:04 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, if we go with always deserializing using the write schema&apos;s scale then we&apos;ll avoid data corruption. How would it work if read/write schema&apos;s had mix of logical and non-logical types?&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;
&lt;div class=&apos;table-wrap&apos;&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Write Schema&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Read Schema&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Logical&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Logical with same scale&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Read with specified scale&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Logical&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Logical with different scale&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Read with scale specified in write schema&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Logical&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Not logical&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Read a bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Not logical&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Logical&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Read as decimal using read schema scale???&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;


&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;</comment>
                            <comment id="16540490" author="rdblue" created="Wed, 11 Jul 2018 18:25:46 +0000"  >&lt;p&gt;That sounds reasonable to me.&lt;/p&gt;</comment>
                            <comment id="16550713" author="nkollar" created="Fri, 20 Jul 2018 12:09:06 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=BigAndy&quot; class=&quot;user-hover&quot; rel=&quot;BigAndy&quot;&gt;Andy Coates&lt;/a&gt; I wanted to refer to this in the Decimal section of the spec: &quot;For the purposes of schema resolution, two schemas that are&#160;decimal&#160;logical types&#160;&lt;em&gt;match&lt;/em&gt;&#160;if their scales and precisions match.&quot; This sounds like a rule for schema evolution, and scale and precision should match (the current doesn&apos;t check for this).&lt;/p&gt;</comment>
                            <comment id="16568212" author="bigandy" created="Fri, 3 Aug 2018 13:32:23 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkollar&quot; class=&quot;user-hover&quot; rel=&quot;nkollar&quot;&gt;Nandor Kollar&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;This is what the docs currently say, but this isn&apos;t really workable. If the implementation was changes to enforce this, then it would be impossible to change the scale or precision of a decimal. Doing some would result in incompatible schemas. IMHO no evolution is not a good thing.&lt;/p&gt;

&lt;p&gt;Hence, I think we should change the docs and the implementation.&lt;/p&gt;</comment>
                            <comment id="16675887" author="zolyfarkas" created="Mon, 5 Nov 2018 23:38:37 +0000"  >&lt;p&gt;I am in favor of making decimal a first class type. &lt;/p&gt;

&lt;p&gt;One extra benefit is that we would be able to properly serialize the decimals in the json format. (Number instead of binary)&lt;/p&gt;

&lt;p&gt;Regarding evolution, we should allow for increases of precision and scale. &lt;/p&gt;

&lt;p&gt;why can&apos;t this be part of avro 2.0?&lt;/p&gt;

&lt;p&gt;Side note:&lt;/p&gt;

&lt;p&gt;In my own decimal logical type implementation, I serialize the scale along with the unscaled value.  So if I have a decimal ( 16, 8) and I serialize a decimal value with a scale &amp;lt;= 8, the value will be serialized with its original scale, for everything with a larger scale, I either error or round depending if a rounding mode is specified via a type attribute... &lt;/p&gt;

</comment>
                            <comment id="16730697" author="zolyfarkas" created="Sat, 29 Dec 2018 13:30:18 +0000"  >&lt;p&gt;One more thing I stumbled upon, Currently in org.apache.data.Json.avsc we have:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Json&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;namespace&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.data&quot;&lt;/span&gt;,
 &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
     {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;value&quot;&lt;/span&gt;,
      &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: [
          &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&quot;&lt;/span&gt;,
          &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;&quot;&lt;/span&gt;,
          &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;,
          &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;&quot;&lt;/span&gt;,
          &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;,
          {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;array&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;items&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Json&quot;&lt;/span&gt;},
          {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;map&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;values&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Json&quot;&lt;/span&gt;}
      ]
     }
 ]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this avro representation is lossy when covering numbers... (&quot;long&quot;,&quot;double&quot;,) having a decimal type would resolve this...&lt;/p&gt;

</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="13103040">AVRO-2078</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12858422">AVRO-1721</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 23 Mar 2018 15:32:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3rpbb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>
