<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:25:09 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2017-6-7+AND+created+%3C%3D+2017-6-14+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="3" total="3"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-2039] Ruby encoding performance improvement</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2039</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;For a use case with a few levels of nesting and unions in several places within the schema we saw a 5x improvement in encoding performance with these changes to encoding using Ruby.&lt;/p&gt;

&lt;p&gt;1. Avoid the exhaustive validation of schemas in a union&lt;/p&gt;

&lt;p&gt;2. Avoid the repeated validation of nested schemas&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apache/avro/pull/230&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/230&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="13079263">AVRO-2039</key>
            <summary>Ruby encoding performance improvement</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.svg">Critical</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tjwp">Tim Perkins</assignee>
                                    <reporter username="tjwp">Tim Perkins</reporter>
                        <labels>
                    </labels>
                <created>Mon, 12 Jun 2017 17:14:09 +0000</created>
                <updated>Tue, 20 Nov 2018 09:32:10 +0000</updated>
                            <resolved>Tue, 20 Nov 2018 09:32:10 +0000</resolved>
                                                    <fixVersion>1.9.0</fixVersion>
                                    <component>ruby</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="16046799" author="tjwp" created="Mon, 12 Jun 2017 17:16:56 +0000"  >&lt;p&gt;&lt;a href=&quot;https://github.com/apache/avro/pull/230&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/230&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This PR is against master which includes the Avro::SchemaValidator class. I believe that a similar approach could also be applied the current code on the 1.8 branch.&lt;/p&gt;</comment>
                            <comment id="16680343" author="githubbot" created="Thu, 8 Nov 2018 20:20:42 +0000"  >&lt;p&gt;tjwp commented on issue #230: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2039&quot; title=&quot;Ruby encoding performance improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2039&quot;&gt;&lt;del&gt;AVRO-2039&lt;/del&gt;&lt;/a&gt;: Ruby encoding performance improvements&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/230#issuecomment-437141937&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/230#issuecomment-437141937&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I&apos;ve rebased this on master&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16690966" author="githubbot" created="Sun, 18 Nov 2018 17:06:05 +0000"  >&lt;p&gt;Fokko commented on issue #230: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2039&quot; title=&quot;Ruby encoding performance improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2039&quot;&gt;&lt;del&gt;AVRO-2039&lt;/del&gt;&lt;/a&gt;: Ruby encoding performance improvements&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/230#issuecomment-439708333&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/230#issuecomment-439708333&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @tjwp Can you rebase this one? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16691784" author="githubbot" created="Mon, 19 Nov 2018 14:43:49 +0000"  >&lt;p&gt;tjwp commented on issue #230: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2039&quot; title=&quot;Ruby encoding performance improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2039&quot;&gt;&lt;del&gt;AVRO-2039&lt;/del&gt;&lt;/a&gt;: Ruby encoding performance improvements&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/230#issuecomment-439915908&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/230#issuecomment-439915908&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @Fokko this has been rebased again. Thanks!&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16692931" author="githubbot" created="Tue, 20 Nov 2018 09:31:49 +0000"  >&lt;p&gt;Fokko closed pull request #230: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2039&quot; title=&quot;Ruby encoding performance improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2039&quot;&gt;&lt;del&gt;AVRO-2039&lt;/del&gt;&lt;/a&gt;: Ruby encoding performance improvements&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/230&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/230&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/ruby/lib/avro/io.rb b/lang/ruby/lib/avro/io.rb&lt;br/&gt;
index 26bda973a..958159c79 100644&lt;br/&gt;
&amp;#8212; a/lang/ruby/lib/avro/io.rb&lt;br/&gt;
+++ b/lang/ruby/lib/avro/io.rb&lt;br/&gt;
@@ -5,9 +5,9 @@&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;to you under the Apache License, Version 2.0 (the&lt;/li&gt;
	&lt;li&gt;&quot;License&quot;); you may not use this file except in compliance&lt;/li&gt;
	&lt;li&gt;with the License.  You may obtain a copy of the License at
	&lt;ol&gt;
		&lt;li&gt;&lt;p&gt;+#&lt;/p&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;
	&lt;ol&gt;
		&lt;li&gt;&lt;p&gt;+#&lt;/p&gt;&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
	&lt;li&gt;Unless required by applicable law or agreed to in writing, software&lt;/li&gt;
	&lt;li&gt;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;/li&gt;
	&lt;li&gt;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
@@ -45,7 +45,7 @@ def initialize(reader)&lt;br/&gt;
       def byte!&lt;br/&gt;
         @reader.read(1).unpack(&apos;C&apos;).first&lt;br/&gt;
       end&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;p&gt;+&lt;br/&gt;
       def read_null&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
	&lt;li&gt;null is written as zero byte&apos;s&lt;br/&gt;
         nil&lt;br/&gt;
@@ -159,7 +159,7 @@ def write_null(datum)&lt;br/&gt;
         nil&lt;br/&gt;
       end&lt;/li&gt;
&lt;/ol&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;# a boolean is written as a single byte&lt;br/&gt;
+      # a boolean is written as a single byte&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
	&lt;li&gt;whose value is either 0 (false) or 1 (true).&lt;br/&gt;
       def write_boolean(datum)&lt;br/&gt;
         on_disk = datum ? 1.chr : 0.chr&lt;br/&gt;
@@ -504,7 +504,7 @@ def write(datum, encoder)&lt;br/&gt;
       def write_data(writers_schema, logical_datum, encoder)&lt;br/&gt;
         datum = writers_schema.type_adapter.encode(logical_datum)&lt;/li&gt;
&lt;/ol&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;unless Schema.validate(writers_schema, datum, encoded = true)&lt;br/&gt;
+        unless Schema.validate(writers_schema, datum, 
{ recursive: false, encoded: true }
&lt;p&gt;)&lt;br/&gt;
           raise AvroTypeError.new(writers_schema, datum)&lt;br/&gt;
         end&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@@ -539,6 +539,7 @@ def write_enum(writers_schema, datum, encoder)&lt;br/&gt;
       end&lt;/p&gt;

&lt;p&gt;       def write_array(writers_schema, datum, encoder)&lt;br/&gt;
+        raise AvroTypeError.new(writers_schema, datum) unless datum.is_a?(Array)&lt;br/&gt;
         if datum.size &amp;gt; 0&lt;br/&gt;
           encoder.write_long(datum.size)&lt;br/&gt;
           datum.each do |item|&lt;br/&gt;
@@ -549,6 +550,7 @@ def write_array(writers_schema, datum, encoder)&lt;br/&gt;
       end&lt;/p&gt;

&lt;p&gt;       def write_map(writers_schema, datum, encoder)&lt;br/&gt;
+        raise AvroTypeError.new(writers_schema, datum) unless datum.is_a?(Hash)&lt;br/&gt;
         if datum.size &amp;gt; 0&lt;br/&gt;
           encoder.write_long(datum.size)&lt;br/&gt;
           datum.each do |k,v|&lt;br/&gt;
@@ -571,6 +573,7 @@ def write_union(writers_schema, datum, encoder)&lt;br/&gt;
       end&lt;/p&gt;

&lt;p&gt;       def write_record(writers_schema, datum, encoder)&lt;br/&gt;
+        raise AvroTypeError.new(writers_schema, datum) unless datum.is_a?(Hash)&lt;br/&gt;
         writers_schema.fields.each do |field|&lt;br/&gt;
           write_data(field.type, datum&lt;span class=&quot;error&quot;&gt;&amp;#91;field.name&amp;#93;&lt;/span&gt;, encoder)&lt;br/&gt;
         end&lt;br/&gt;
diff --git a/lang/ruby/lib/avro/schema.rb b/lang/ruby/lib/avro/schema.rb&lt;br/&gt;
index 3acd07b7f..c1b150ead 100644&lt;br/&gt;
&amp;#8212; a/lang/ruby/lib/avro/schema.rb&lt;br/&gt;
+++ b/lang/ruby/lib/avro/schema.rb&lt;br/&gt;
@@ -96,8 +96,8 @@ def self.real_parse(json_obj, names=nil, default_namespace=nil)&lt;br/&gt;
     end&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Determine if a ruby datum is an instance of a schema&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;def self.validate(expected_schema, logical_datum, encoded = false)&lt;/li&gt;
	&lt;li&gt;SchemaValidator.validate!(expected_schema, logical_datum, encoded)&lt;br/&gt;
+    def self.validate(expected_schema, logical_datum, options = 
{ recursive: true, encoded: false }
&lt;p&gt;)&lt;br/&gt;
+      SchemaValidator.validate!(expected_schema, logical_datum, options)&lt;br/&gt;
       true&lt;br/&gt;
     rescue SchemaValidator::ValidationError&lt;br/&gt;
       false&lt;br/&gt;
diff --git a/lang/ruby/lib/avro/schema_validator.rb b/lang/ruby/lib/avro/schema_validator.rb&lt;br/&gt;
index 2117e92d4..28022a8c6 100644&lt;/p&gt;
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/ruby/lib/avro/schema_validator.rb&lt;br/&gt;
+++ b/lang/ruby/lib/avro/schema_validator.rb&lt;br/&gt;
@@ -20,7 +20,8 @@ class SchemaValidator&lt;br/&gt;
     PATH_SEPARATOR = &apos;.&apos;.freeze&lt;br/&gt;
     INT_RANGE = Schema::INT_MIN_VALUE..Schema::INT_MAX_VALUE&lt;br/&gt;
     LONG_RANGE = Schema::LONG_MIN_VALUE..Schema::LONG_MAX_VALUE&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;COMPLEX_TYPES = &lt;span class=&quot;error&quot;&gt;&amp;#91;:array, :error, :map, :record, :request&amp;#93;&lt;/span&gt;&lt;br/&gt;
+    COMPLEX_TYPES = &lt;span class=&quot;error&quot;&gt;&amp;#91;:array, :error, :map, :record, :request&amp;#93;&lt;/span&gt;.freeze&lt;br/&gt;
+    BOOLEAN_VALUES = &lt;span class=&quot;error&quot;&gt;&amp;#91;true, false&amp;#93;&lt;/span&gt;.freeze&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     class Result&lt;br/&gt;
       attr_reader :errors&lt;br/&gt;
@@ -62,27 +63,54 @@ def to_s&lt;br/&gt;
     TypeMismatchError = Class.new(ValidationError)&lt;/p&gt;

&lt;p&gt;     class &amp;lt;&amp;lt; self&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;def validate!(expected_schema, logical_datum, encoded = false)&lt;br/&gt;
+      def validate!(expected_schema, logical_datum, options = 
{ recursive: true, encoded: false }
&lt;p&gt;)&lt;br/&gt;
+        options ||= {}&lt;br/&gt;
+        options&lt;span class=&quot;error&quot;&gt;&amp;#91;:recursive&amp;#93;&lt;/span&gt; = true unless options.key?(:recursive)&lt;br/&gt;
+&lt;br/&gt;
         result = Result.new&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;validate_recursive(expected_schema, logical_datum, ROOT_IDENTIFIER, result, encoded)&lt;br/&gt;
+        if options&lt;span class=&quot;error&quot;&gt;&amp;#91;:recursive&amp;#93;&lt;/span&gt;&lt;br/&gt;
+          validate_recursive(expected_schema, logical_datum, ROOT_IDENTIFIER, result, options)&lt;br/&gt;
+        else&lt;br/&gt;
+          validate_simple(expected_schema, logical_datum, ROOT_IDENTIFIER, result, options)&lt;br/&gt;
+        end&lt;br/&gt;
         fail ValidationError, result if result.failure?&lt;br/&gt;
         result&lt;br/&gt;
       end&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;       private&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;def validate_recursive(expected_schema, logical_datum, path, result, encoded = false)&lt;/li&gt;
	&lt;li&gt;datum = if encoded&lt;/li&gt;
	&lt;li&gt;logical_datum&lt;/li&gt;
	&lt;li&gt;else&lt;/li&gt;
	&lt;li&gt;expected_schema.type_adapter.encode(logical_datum) rescue nil&lt;/li&gt;
	&lt;li&gt;end&lt;br/&gt;
+      def validate_recursive(expected_schema, logical_datum, path, result, options = {})&lt;br/&gt;
+        datum = resolve_datum(expected_schema, logical_datum, options&lt;span class=&quot;error&quot;&gt;&amp;#91;:encoded&amp;#93;&lt;/span&gt;)&lt;br/&gt;
+&lt;br/&gt;
+        validate_simple(expected_schema, datum, path, result, encoded: true)&lt;br/&gt;
+&lt;br/&gt;
+        case expected_schema.type_sym&lt;br/&gt;
+        when :array&lt;br/&gt;
+          validate_array(expected_schema, datum, path, result)&lt;br/&gt;
+        when :map&lt;br/&gt;
+          validate_map(expected_schema, datum, path, result)&lt;br/&gt;
+        when :union&lt;br/&gt;
+          validate_union(expected_schema, datum, path, result)&lt;br/&gt;
+        when :record, :error, :request&lt;br/&gt;
+          fail TypeMismatchError unless datum.is_a?(Hash)&lt;br/&gt;
+          expected_schema.fields.each do |field|&lt;br/&gt;
+            deeper_path = deeper_path_for_hash(field.name, path)&lt;br/&gt;
+            validate_recursive(field.type, datum&lt;span class=&quot;error&quot;&gt;&amp;#91;field.name&amp;#93;&lt;/span&gt;, deeper_path, result)&lt;br/&gt;
+          end&lt;br/&gt;
+        end&lt;br/&gt;
+      rescue TypeMismatchError&lt;br/&gt;
+        result.add_error(path, &quot;expected type #
{expected_schema.type_sym}, got #{actual_value_message(datum)}&quot;)&lt;br/&gt;
+      end&lt;br/&gt;
+&lt;br/&gt;
+      def validate_simple(expected_schema, logical_datum, path, result, options = {})&lt;br/&gt;
+        datum = resolve_datum(expected_schema, logical_datum, options&lt;span class=&quot;error&quot;&gt;&amp;#91;:encoded&amp;#93;&lt;/span&gt;)&lt;br/&gt;
+        validate_type(expected_schema)&lt;br/&gt;
 &lt;br/&gt;
         case expected_schema.type_sym&lt;br/&gt;
         when :null&lt;br/&gt;
           fail TypeMismatchError unless datum.nil?&lt;br/&gt;
         when :boolean&lt;br/&gt;
-          fail TypeMismatchError unless &lt;span class=&quot;error&quot;&gt;&amp;#91;true, false&amp;#93;&lt;/span&gt;.include?(datum)&lt;br/&gt;
+          fail TypeMismatchError unless BOOLEAN_VALUES.include?(datum)&lt;br/&gt;
         when :string, :bytes&lt;br/&gt;
           fail TypeMismatchError unless datum.is_a?(String)&lt;br/&gt;
         when :int&lt;br/&gt;
@@ -92,36 +120,42 @@ def validate_recursive(expected_schema, logical_datum, path, result, encoded = f&lt;br/&gt;
           fail TypeMismatchError unless datum.is_a?(Integer)&lt;br/&gt;
           result.add_error(path, &quot;out of bound value #{datum}&quot;) unless LONG_RANGE.cover?(datum)&lt;br/&gt;
         when :float, :double&lt;br/&gt;
-          fail TypeMismatchError unless &lt;span class=&quot;error&quot;&gt;&amp;#91;Float, Integer&amp;#93;&lt;/span&gt;.any?(&amp;amp;datum.method(:is_a?))&lt;br/&gt;
+          fail TypeMismatchError unless datum.is_a?(Float) || datum.is_a?(Integer)&lt;br/&gt;
         when :fixed&lt;br/&gt;
           if datum.is_a? String&lt;br/&gt;
-            message = &quot;expected fixed with size #{expected_schema.size}, got \&quot;#{datum}\&quot; with size #{datum.size}&quot;&lt;br/&gt;
-            result.add_error(path, message) unless datum.bytesize == expected_schema.size&lt;br/&gt;
+            result.add_error(path, fixed_string_message(expected_schema.size, datum)) unless datum.bytesize == expected_schema.size&lt;br/&gt;
           else&lt;br/&gt;
             result.add_error(path, &quot;expected fixed with size #{expected_schema.size}, got #{actual_value_message(datum)}&quot;)&lt;br/&gt;
           end&lt;br/&gt;
         when :enum&lt;br/&gt;
-          message = &quot;expected enum with values #{expected_schema.symbols}, got #{actual_value_message(datum)}&quot;&lt;br/&gt;
-          result.add_error(path, message) unless expected_schema.symbols.include?(datum)&lt;br/&gt;
-        when :array&lt;br/&gt;
-          validate_array(expected_schema, datum, path, result)&lt;br/&gt;
-        when :map&lt;br/&gt;
-          validate_map(expected_schema, datum, path, result)&lt;br/&gt;
-        when :union&lt;br/&gt;
-          validate_union(expected_schema, datum, path, result)&lt;br/&gt;
-        when :record, :error, :request&lt;br/&gt;
-          fail TypeMismatchError unless datum.is_a?(Hash)&lt;br/&gt;
-          expected_schema.fields.each do |field|&lt;br/&gt;
-            deeper_path = deeper_path_for_hash(field.name, path)&lt;br/&gt;
-            validate_recursive(field.type, datum&lt;span class=&quot;error&quot;&gt;&amp;#91;field.name&amp;#93;&lt;/span&gt;, deeper_path, result)&lt;br/&gt;
-          end&lt;br/&gt;
-        else&lt;br/&gt;
-          fail &quot;Unexpected schema type #{expected_schema.type_sym}
&lt;p&gt; #&lt;/p&gt;
{expected_schema.inspect}&quot;&lt;br/&gt;
+          result.add_error(path, enum_message(expected_schema.symbols, datum)) unless expected_schema.symbols.include?(datum)&lt;br/&gt;
         end&lt;br/&gt;
       rescue TypeMismatchError&lt;br/&gt;
         result.add_error(path, &quot;expected type #{expected_schema.type_sym}, got #{actual_value_message(datum)}&quot;)&lt;br/&gt;
       end&lt;br/&gt;
 &lt;br/&gt;
+      def resolve_datum(expected_schema, logical_datum, encoded)&lt;br/&gt;
+        if encoded&lt;br/&gt;
+          logical_datum&lt;br/&gt;
+        else&lt;br/&gt;
+          expected_schema.type_adapter.encode(logical_datum) rescue nil&lt;br/&gt;
+        end&lt;br/&gt;
+      end&lt;br/&gt;
+&lt;br/&gt;
+      def validate_type(expected_schema)&lt;br/&gt;
+        unless Avro::Schema::VALID_TYPES_SYM.include?(expected_schema.type_sym)&lt;br/&gt;
+          fail &quot;Unexpected schema type #{expected_schema.type_sym} #{expected_schema.inspect}
&lt;p&gt;&quot;&lt;br/&gt;
+        end&lt;br/&gt;
+      end&lt;br/&gt;
+&lt;br/&gt;
+      def fixed_string_message(size, datum)&lt;br/&gt;
+        &quot;expected fixed with size #&lt;/p&gt;
{size}
&lt;p&gt;, got \&quot;#&lt;/p&gt;
{datum}
&lt;p&gt;\&quot; with size #&lt;/p&gt;
{datum.size}
&lt;p&gt;&quot;&lt;br/&gt;
+      end&lt;br/&gt;
+&lt;br/&gt;
+      def enum_message(symbols, datum)&lt;br/&gt;
+        &quot;expected enum with values #&lt;/p&gt;
{symbols}
&lt;p&gt;, got #&lt;/p&gt;
{actual_value_message(datum)}
&lt;p&gt;&quot;&lt;br/&gt;
+      end&lt;br/&gt;
+&lt;br/&gt;
       def validate_array(expected_schema, datum, path, result)&lt;br/&gt;
         fail TypeMismatchError unless datum.is_a?(Array)&lt;br/&gt;
         datum.each_with_index do |d, i|&lt;br/&gt;
@@ -145,9 +179,10 @@ def validate_union(expected_schema, datum, path, result)&lt;br/&gt;
           validate_recursive(expected_schema.schemas.first, datum, path, result)&lt;br/&gt;
           return&lt;br/&gt;
         end&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;types_and_results = validate_possible_types(datum, expected_schema, path)&lt;/li&gt;
	&lt;li&gt;failures, successes = types_and_results.partition 
{ |r| r[:result].failure? }&lt;/li&gt;
	&lt;li&gt;return if successes.any?&lt;br/&gt;
+        failures = []&lt;br/&gt;
+        compatible_type = first_compatible_type(datum, expected_schema, path, failures)&lt;br/&gt;
+        return unless compatible_type.nil?&lt;br/&gt;
+&lt;br/&gt;
         complex_type_failed = failures.detect 
{ |r| COMPLEX_TYPES.include?(r[:type]) }
&lt;p&gt;         if complex_type_failed&lt;br/&gt;
           complex_type_failed&lt;span class=&quot;error&quot;&gt;&amp;#91;:result&amp;#93;&lt;/span&gt;.errors.each &lt;/p&gt;
{ |error| result &amp;lt;&amp;lt; error }
&lt;p&gt;@@ -157,11 +192,12 @@ def validate_union(expected_schema, datum, path, result)&lt;br/&gt;
         end&lt;br/&gt;
       end&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;def validate_possible_types(datum, expected_schema, path)&lt;/li&gt;
	&lt;li&gt;expected_schema.schemas.map do |schema|&lt;br/&gt;
+      def first_compatible_type(datum, expected_schema, path, failures)&lt;br/&gt;
+        expected_schema.schemas.find do |schema|&lt;br/&gt;
           result = Result.new&lt;br/&gt;
           validate_recursive(schema, datum, path, result)&lt;/li&gt;
	&lt;li&gt;{ type: schema.type_sym, result: result }
&lt;p&gt;+          failures &amp;lt;&amp;lt; &lt;/p&gt;
{ type: schema.type_sym, result: result }
&lt;p&gt; if result.failure?&lt;br/&gt;
+          !result.failure?&lt;br/&gt;
         end&lt;br/&gt;
       end&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@@ -169,8 +205,6 @@ def deeper_path_for_hash(sub_key, path)&lt;br/&gt;
         &quot;#&lt;/p&gt;
{path}
&lt;p&gt;#&lt;/p&gt;
{PATH_SEPARATOR}
&lt;p&gt;#&lt;/p&gt;
{sub_key}
&lt;p&gt;&quot;.squeeze(PATH_SEPARATOR)&lt;br/&gt;
       end&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private&lt;br/&gt;
-&lt;br/&gt;
       def actual_value_message(value)&lt;br/&gt;
         avro_type = if value.is_a?(Integer)&lt;br/&gt;
                       ruby_integer_to_avro_type(value)&lt;br/&gt;
diff --git a/lang/ruby/test/test_io.rb b/lang/ruby/test/test_io.rb&lt;br/&gt;
index 70bb4d60c..b518708b0 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/ruby/test/test_io.rb&lt;br/&gt;
+++ b/lang/ruby/test/test_io.rb&lt;br/&gt;
@@ -158,6 +158,27 @@ def test_fixed&lt;br/&gt;
     check_default(fixed_schema, &apos;&quot;a&quot;&apos;, &quot;a&quot;)&lt;br/&gt;
   end&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  def test_record_with_nil&lt;br/&gt;
+    schema = Avro::Schema.parse(&apos;{&quot;type&quot;:&quot;record&quot;, &quot;name&quot;:&quot;rec&quot;, &quot;fields&quot;:[&lt;/p&gt;
{&quot;type&quot;:&quot;int&quot;, &quot;name&quot;:&quot;i&quot;}
&lt;p&gt;]}&apos;)&lt;br/&gt;
+    assert_raise(Avro::IO::AvroTypeError) do&lt;br/&gt;
+      write_datum(nil, schema)&lt;br/&gt;
+    end&lt;br/&gt;
+  end&lt;br/&gt;
+&lt;br/&gt;
+  def test_array_with_nil&lt;br/&gt;
+    schema = Avro::Schema.parse(&apos;&lt;/p&gt;
{&quot;type&quot;:&quot;array&quot;, &quot;items&quot;:&quot;int&quot;}
&lt;p&gt;&apos;)&lt;br/&gt;
+    assert_raise(Avro::IO::AvroTypeError) do&lt;br/&gt;
+      write_datum(nil, schema)&lt;br/&gt;
+    end&lt;br/&gt;
+  end&lt;br/&gt;
+&lt;br/&gt;
+  def test_map_with_nil&lt;br/&gt;
+    schema = Avro::Schema.parse(&apos;&lt;/p&gt;
{&quot;type&quot;:&quot;map&quot;, &quot;values&quot;:&quot;long&quot;}
&lt;p&gt;&apos;)&lt;br/&gt;
+    assert_raise(Avro::IO::AvroTypeError) do&lt;br/&gt;
+      write_datum(nil, schema)&lt;br/&gt;
+    end&lt;br/&gt;
+  end&lt;br/&gt;
+&lt;br/&gt;
   def test_enum_with_duplicate&lt;br/&gt;
     str = &apos;&lt;/p&gt;
{&quot;type&quot;: &quot;enum&quot;, &quot;name&quot;: &quot;Test&quot;,&quot;symbols&quot; : [&quot;AA&quot;, &quot;AA&quot;]}
&lt;p&gt;&apos;&lt;br/&gt;
     assert_raises(Avro::SchemaParseError) do&lt;br/&gt;
diff --git a/lang/ruby/test/test_schema_validator.rb b/lang/ruby/test/test_schema_validator.rb&lt;br/&gt;
index e77569a31..c4759da7b 100644&lt;br/&gt;
&amp;#8212; a/lang/ruby/test/test_schema_validator.rb&lt;br/&gt;
+++ b/lang/ruby/test/test_schema_validator.rb&lt;br/&gt;
@@ -21,6 +21,10 @@ def validate!(schema, value)&lt;br/&gt;
     Avro::SchemaValidator.validate!(schema, value)&lt;br/&gt;
   end&lt;/p&gt;

&lt;p&gt;+  def validate_simple!(schema, value)&lt;br/&gt;
+    Avro::SchemaValidator.validate!(schema, value, recursive: false)&lt;br/&gt;
+  end&lt;br/&gt;
+&lt;br/&gt;
   def hash_to_schema(hash)&lt;br/&gt;
     Avro::Schema.parse(hash.to_json)&lt;br/&gt;
   end&lt;br/&gt;
@@ -36,13 +40,16 @@ def assert_failed_validation(messages)&lt;br/&gt;
     assert_equal(assert_messages.size, result_errors.size)&lt;br/&gt;
   end&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;def assert_valid_schema(schema, valid, invalid)&lt;br/&gt;
+  def assert_valid_schema(schema, valid, invalid, simple = false)&lt;br/&gt;
     valid.each do |value|&lt;br/&gt;
       assert_nothing_raised 
{ Avro::SchemaValidator.validate!(schema, value) }
&lt;p&gt;+      assert_nothing_raised &lt;/p&gt;
{ Avro::SchemaValidator.validate!(schema, value, recursive: false) }
&lt;p&gt; if simple&lt;br/&gt;
     end&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     invalid.each do |value|&lt;br/&gt;
       assert_raise &lt;/p&gt;
{ Avro::SchemaValidator.validate!(schema, value) }
&lt;p&gt;+      assert_raise &lt;/p&gt;
{ Avro::SchemaValidator.validate!(schema, value, recursive: false) }
&lt;p&gt; if simple&lt;br/&gt;
+      assert_nothing_raised &lt;/p&gt;
{ Avro::SchemaValidator.validate!(schema, value, recursive: false) }
&lt;p&gt; unless simple&lt;br/&gt;
     end&lt;br/&gt;
   end&lt;/p&gt;

&lt;p&gt;@@ -50,10 +57,15 @@ def test_validate_nil&lt;br/&gt;
     schema = hash_to_schema(type: &apos;null&apos;, name: &apos;name&apos;)&lt;/p&gt;

&lt;p&gt;     assert_nothing_raised &lt;/p&gt;
{ validate!(schema, nil) }
&lt;p&gt;+    assert_nothing_raised &lt;/p&gt;
{ validate_simple!(schema, nil) }&lt;br/&gt;
 &lt;br/&gt;
     assert_failed_validation(&apos;at . expected type null, got int with value 1&apos;) do&lt;br/&gt;
       validate!(schema, 1)&lt;br/&gt;
     end&lt;br/&gt;
+&lt;br/&gt;
+    assert_failed_validation(&apos;at . expected type null, got int with value 1&apos;) do&lt;br/&gt;
+      validate_simple!(schema, 1)&lt;br/&gt;
+    end&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_validate_boolean&lt;br/&gt;
@@ -61,52 +73,67 @@ def test_validate_boolean&lt;br/&gt;
 &lt;br/&gt;
     assert_nothing_raised { validate!(schema, true) }&lt;br/&gt;
     assert_nothing_raised { validate!(schema, false) }&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, true) }&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, false) }&lt;br/&gt;
 &lt;br/&gt;
     assert_failed_validation(&apos;at . expected type boolean, got int with value 1&apos;) do&lt;br/&gt;
       validate!(schema, 1)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_failed_validation(&apos;at . expected type boolean, got int with value 1&apos;) do&lt;br/&gt;
+      validate_simple!(schema, 1)&lt;br/&gt;
+    end&lt;br/&gt;
 &lt;br/&gt;
     assert_failed_validation(&apos;at . expected type boolean, got null&apos;) do&lt;br/&gt;
       validate!(schema, nil)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_failed_validation(&apos;at . expected type boolean, got null&apos;) do&lt;br/&gt;
+      validate_simple!(schema, nil)&lt;br/&gt;
+    end&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_fixed_size_string&lt;br/&gt;
     schema = hash_to_schema(type: &apos;fixed&apos;, name: &apos;some&apos;, size: 3)&lt;br/&gt;
 &lt;br/&gt;
     assert_nothing_raised { validate!(schema, &apos;baf&apos;) }&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, &apos;baf&apos;) }&lt;br/&gt;
 &lt;br/&gt;
     assert_failed_validation(&apos;at . expected fixed with size 3, got &quot;some&quot; with size 4&apos;) do&lt;br/&gt;
       validate!(schema, &apos;some&apos;)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_failed_validation(&apos;at . expected fixed with size 3, got &quot;some&quot; with size 4&apos;) do&lt;br/&gt;
+      validate_simple!(schema, &apos;some&apos;)&lt;br/&gt;
+    end&lt;br/&gt;
 &lt;br/&gt;
     assert_failed_validation(&apos;at . expected fixed with size 3, got null&apos;) do&lt;br/&gt;
       validate!(schema, nil)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_failed_validation(&apos;at . expected fixed with size 3, got null&apos;) do&lt;br/&gt;
+      validate_simple!(schema, nil)&lt;br/&gt;
+    end&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_original_validate_nil&lt;br/&gt;
     schema = hash_to_schema(type: &apos;null&apos;, name: &apos;name&apos;)&lt;br/&gt;
 &lt;br/&gt;
-    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;nil&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;something&amp;#39;&amp;#93;&lt;/span&gt;)&lt;br/&gt;
+    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;nil&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;something&amp;#39;&amp;#93;&lt;/span&gt;, true)&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_original_validate_boolean&lt;br/&gt;
     schema = hash_to_schema(type: &apos;boolean&apos;, name: &apos;name&apos;)&lt;br/&gt;
 &lt;br/&gt;
-    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;true, false&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;nil, 1&amp;#93;&lt;/span&gt;)&lt;br/&gt;
+    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;true, false&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;nil, 1&amp;#93;&lt;/span&gt;, true)&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_validate_string&lt;br/&gt;
     schema = hash_to_schema(type: &apos;string&apos;, name: &apos;name&apos;)&lt;br/&gt;
 &lt;br/&gt;
-    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;string&amp;#39;&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;nil, 1&amp;#93;&lt;/span&gt;)&lt;br/&gt;
+    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;string&amp;#39;&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;nil, 1&amp;#93;&lt;/span&gt;, true)&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_validate_bytes&lt;br/&gt;
     schema = hash_to_schema(type: &apos;bytes&apos;, name: &apos;name&apos;)&lt;br/&gt;
 &lt;br/&gt;
-    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;string&amp;#39;&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;nil, 1&amp;#93;&lt;/span&gt;)&lt;br/&gt;
+    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;string&amp;#39;&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;nil, 1&amp;#93;&lt;/span&gt;, true)&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_validate_int&lt;br/&gt;
@@ -115,41 +142,45 @@ def test_validate_int&lt;br/&gt;
     assert_valid_schema(&lt;br/&gt;
       schema,&lt;br/&gt;
       &lt;span class=&quot;error&quot;&gt;&amp;#91;Avro::Schema::INT_MIN_VALUE, Avro::Schema::INT_MAX_VALUE, 1&amp;#93;&lt;/span&gt;,&lt;br/&gt;
-      &lt;span class=&quot;error&quot;&gt;&amp;#91;Avro::Schema::LONG_MIN_VALUE, Avro::Schema::LONG_MAX_VALUE, &amp;#39;string&amp;#39;&amp;#93;&lt;/span&gt;&lt;br/&gt;
+      &lt;span class=&quot;error&quot;&gt;&amp;#91;Avro::Schema::LONG_MIN_VALUE, Avro::Schema::LONG_MAX_VALUE, &amp;#39;string&amp;#39;&amp;#93;&lt;/span&gt;,&lt;br/&gt;
+      true&lt;br/&gt;
     )&lt;br/&gt;
     assert_failed_validation(&apos;at . out of bound value 9223372036854775807&apos;) do&lt;br/&gt;
       validate!(schema, Avro::Schema::LONG_MAX_VALUE)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_failed_validation(&apos;at . out of bound value 9223372036854775807&apos;) do&lt;br/&gt;
+      validate_simple!(schema, Avro::Schema::LONG_MAX_VALUE)&lt;br/&gt;
+    end&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_validate_long&lt;br/&gt;
     schema = hash_to_schema(type: &apos;long&apos;, name: &apos;name&apos;)&lt;br/&gt;
 &lt;br/&gt;
-    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;Avro::Schema::LONG_MIN_VALUE, Avro::Schema::LONG_MAX_VALUE, 1&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;1.1, &amp;#39;string&amp;#39;&amp;#93;&lt;/span&gt;)&lt;br/&gt;
+    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;Avro::Schema::LONG_MIN_VALUE, Avro::Schema::LONG_MAX_VALUE, 1&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;1.1, &amp;#39;string&amp;#39;&amp;#93;&lt;/span&gt;, true)&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_validate_float&lt;br/&gt;
     schema = hash_to_schema(type: &apos;float&apos;, name: &apos;name&apos;)&lt;br/&gt;
 &lt;br/&gt;
-    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;1.1, 1, Avro::Schema::LONG_MAX_VALUE&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;string&amp;#39;&amp;#93;&lt;/span&gt;)&lt;br/&gt;
+    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;1.1, 1, Avro::Schema::LONG_MAX_VALUE&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;string&amp;#39;&amp;#93;&lt;/span&gt;, true)&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_validate_double&lt;br/&gt;
     schema = hash_to_schema(type: &apos;double&apos;, name: &apos;name&apos;)&lt;br/&gt;
 &lt;br/&gt;
-    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;1.1, 1, Avro::Schema::LONG_MAX_VALUE&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;string&amp;#39;&amp;#93;&lt;/span&gt;)&lt;br/&gt;
+    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;1.1, 1, Avro::Schema::LONG_MAX_VALUE&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;string&amp;#39;&amp;#93;&lt;/span&gt;, true)&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_validate_fixed&lt;br/&gt;
     schema = hash_to_schema(type: &apos;fixed&apos;, name: &apos;name&apos;, size: 3)&lt;br/&gt;
 &lt;br/&gt;
-    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;abc&amp;#39;&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;ab&amp;#39;, 1, 1.1, true&amp;#93;&lt;/span&gt;)&lt;br/&gt;
+    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;abc&amp;#39;&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;ab&amp;#39;, 1, 1.1, true&amp;#93;&lt;/span&gt;, true)&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_validate_original_num&lt;br/&gt;
     schema = hash_to_schema(type: &apos;enum&apos;, name: &apos;name&apos;, symbols: %w(a b))&lt;br/&gt;
 &lt;br/&gt;
-    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;c&amp;#39;&amp;#93;&lt;/span&gt;)&lt;br/&gt;
+    assert_valid_schema(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;c&amp;#39;&amp;#93;&lt;/span&gt;, true)&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_validate_record&lt;br/&gt;
@@ -164,22 +195,22 @@ def test_validate_shallow_record&lt;br/&gt;
     )&lt;br/&gt;
 &lt;br/&gt;
     assert_nothing_raised { validate!(schema, &apos;sub&apos; =&amp;gt; 1) }&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, &apos;sub&apos; =&amp;gt; 1) }&lt;br/&gt;
 &lt;br/&gt;
     assert_failed_validation(&apos;at .sub expected type int, got null&apos;) do&lt;br/&gt;
       validate!(schema, {})&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, {}) }&lt;br/&gt;
 &lt;br/&gt;
     assert_failed_validation(&apos;at . expected type record, got float with value 1.2&apos;) do&lt;br/&gt;
       validate!(schema, 1.2)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, 1.2) }&lt;br/&gt;
 &lt;br/&gt;
     assert_failed_validation(&apos;at .sub expected type int, got float with value 1.2&apos;) do&lt;br/&gt;
       validate!(schema, &apos;sub&apos; =&amp;gt; 1.2)&lt;br/&gt;
     end&lt;br/&gt;
-&lt;br/&gt;
-    assert_failed_validation(&apos;at .sub expected type int, got null&apos;) do&lt;br/&gt;
-      validate!(schema, {})&lt;br/&gt;
-    end&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, &apos;sub&apos; =&amp;gt; 1.2) }&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_validate_array&lt;br/&gt;
@@ -188,18 +219,22 @@ def test_validate_array&lt;br/&gt;
                             items: &lt;span class=&quot;error&quot;&gt;&amp;#91;{ type: &apos;int&apos;, name: &apos;height&apos; }&amp;#93;&lt;/span&gt;)&lt;br/&gt;
 &lt;br/&gt;
     assert_nothing_raised { validate!(schema, []) }&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, []) }&lt;br/&gt;
 &lt;br/&gt;
     assert_failed_validation &apos;at . expected type array, got null&apos; do&lt;br/&gt;
       validate!(schema, nil)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, nil) }

&lt;p&gt;     assert_failed_validation(&apos;at .&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; expected type int, got null&apos;) do&lt;br/&gt;
       validate!(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;nil&amp;#93;&lt;/span&gt;)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised &lt;/p&gt;
{ validate_simple!(schema, [nil]) }

&lt;p&gt;     assert_failed_validation(&apos;at .&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; expected type int, got string with value &quot;so wrong&quot;&apos;) do&lt;br/&gt;
       validate!(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;1, 3, 9, &amp;#39;so wrong&amp;#39;&amp;#93;&lt;/span&gt;)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised &lt;/p&gt;
{ validate_simple!(schema, [1, 3, 9, &apos;so wrong&apos;]) }
&lt;p&gt;   end&lt;/p&gt;

&lt;p&gt;   def test_validate_enum&lt;br/&gt;
@@ -208,10 +243,14 @@ def test_validate_enum&lt;br/&gt;
                             symbols: %w(one two three))&lt;/p&gt;

&lt;p&gt;     assert_nothing_raised &lt;/p&gt;
{ validate!(schema, &apos;one&apos;) }
&lt;p&gt;+    assert_nothing_raised &lt;/p&gt;
{ validate_simple!(schema, &apos;one&apos;) }

&lt;p&gt;     assert_failed_validation(&apos;at . expected enum with values &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;&amp;#93;&lt;/span&gt;, got string with value &quot;five&quot;&apos;) do&lt;br/&gt;
       validate!(schema, &apos;five&apos;)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_failed_validation(&apos;at . expected enum with values &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;&amp;#93;&lt;/span&gt;, got string with value &quot;five&quot;&apos;) do&lt;br/&gt;
+      validate_simple!(schema, &apos;five&apos;)&lt;br/&gt;
+    end&lt;br/&gt;
   end&lt;/p&gt;

&lt;p&gt;   def test_validate_union_on_primitive_types&lt;br/&gt;
@@ -226,6 +265,7 @@ def test_validate_union_on_primitive_types&lt;br/&gt;
     assert_failed_validation(&apos;at .what_ever expected union of &lt;span class=&quot;error&quot;&gt;&amp;#91;\&amp;#39;long\&amp;#39;, \&amp;#39;string\&amp;#39;&amp;#93;&lt;/span&gt;, got null&apos;) &lt;/p&gt;
{
       validate!(schema, &apos;what_ever&apos; =&amp;gt; nil)
     }
&lt;p&gt;+    assert_nothing_raised &lt;/p&gt;
{ validate_simple!(schema, &apos;what_ever&apos; =&amp;gt; nil) }
&lt;p&gt;   end&lt;/p&gt;

&lt;p&gt;   def test_validate_union_of_nil_and_record_inside_array&lt;br/&gt;
@@ -267,22 +307,27 @@ def test_validate_union_of_nil_and_record_inside_array&lt;br/&gt;
     assert_failed_validation(&apos;at .person expected type record, got null&apos;) &lt;/p&gt;
{
       validate!(schema, &apos;not at all&apos; =&amp;gt; nil)
     }
&lt;p&gt;+    assert_nothing_raised { validate_simple!(schema, &apos;person&apos; =&amp;gt; {}) }&lt;br/&gt;
+&lt;br/&gt;
     assert_nothing_raised { validate!(schema, &apos;person&apos; =&amp;gt; {}) }&lt;br/&gt;
     assert_nothing_raised { validate!(schema, &apos;person&apos; =&amp;gt; &lt;/p&gt;
{ houses: [] }
&lt;p&gt;) }&lt;br/&gt;
     assert_nothing_raised { validate!(schema, &apos;person&apos; =&amp;gt; { &apos;houses&apos; =&amp;gt; [&lt;/p&gt;
{ &apos;number_of_rooms&apos; =&amp;gt; 1 }] }) }&lt;br/&gt;
 &lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, &apos;person&apos; =&amp;gt; {}) }&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, &apos;person&apos; =&amp;gt; { houses: [] }) }&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, &apos;person&apos; =&amp;gt; { &apos;houses&apos; =&amp;gt; [{ &apos;number_of_rooms&apos; =&amp;gt; 1 }
&lt;p&gt;] }) }&lt;br/&gt;
+&lt;br/&gt;
     message = &apos;at .person.houses&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.number_of_rooms expected type long, got string with value &quot;not valid at all&quot;&apos;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assert_failed_validation(message) do&lt;/li&gt;
	&lt;li&gt;validate!(&lt;/li&gt;
	&lt;li&gt;schema,&lt;/li&gt;
	&lt;li&gt;&apos;person&apos; =&amp;gt; {&lt;/li&gt;
	&lt;li&gt;&apos;houses&apos; =&amp;gt; [&lt;/li&gt;
	&lt;li&gt;{ &apos;number_of_rooms&apos; =&amp;gt; 2 },&lt;br/&gt;
-            { &apos;number_of_rooms&apos; =&amp;gt; &apos;not valid at all&apos; }&lt;br/&gt;
-          ]&lt;br/&gt;
-        }&lt;br/&gt;
-      )&lt;br/&gt;
-    end&lt;br/&gt;
+    datum = {&lt;br/&gt;
+      &apos;person&apos; =&amp;gt; {&lt;br/&gt;
+        &apos;houses&apos; =&amp;gt; [&lt;br/&gt;
+          { &apos;number_of_rooms&apos; =&amp;gt; 2 }
&lt;p&gt;,&lt;br/&gt;
+          &lt;/p&gt;
{ &apos;number_of_rooms&apos; =&amp;gt; &apos;not valid at all&apos; }
&lt;p&gt;+        ]&lt;br/&gt;
+      }&lt;br/&gt;
+    }&lt;br/&gt;
+    assert_failed_validation(message) &lt;/p&gt;
{ validate!(schema, datum) }
&lt;p&gt;+    assert_nothing_raised &lt;/p&gt;
{ validate_simple!(schema, datum) }
&lt;p&gt;   end&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   def test_validate_map&lt;br/&gt;
@@ -293,18 +338,22 @@ def test_validate_map&lt;br/&gt;
                             ])&lt;/p&gt;

&lt;p&gt;     assert_nothing_raised &lt;/p&gt;
{ validate!(schema, &apos;some&apos; =&amp;gt; 1) }
&lt;p&gt;+    assert_nothing_raised &lt;/p&gt;
{ validate_simple!(schema, &apos;some&apos; =&amp;gt; 1) }

&lt;p&gt;     assert_failed_validation(&apos;at .some expected type int, got string with value &quot;nope&quot;&apos;) do&lt;br/&gt;
       validate!(schema, &apos;some&apos; =&amp;gt; &apos;nope&apos;)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised &lt;/p&gt;
{ validate_simple!(schema, &apos;some&apos; =&amp;gt; &apos;nope&apos;)}

&lt;p&gt;     assert_failed_validation(&quot;at . unexpected key type &apos;Symbol&apos; in map&quot;) do&lt;br/&gt;
       validate!(schema, some: 1)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised &lt;/p&gt;
{ validate_simple!(schema, some: 1) }

&lt;p&gt;     assert_failed_validation(&apos;at . expected type map, got null&apos;) do&lt;br/&gt;
       validate!(schema, nil)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised &lt;/p&gt;
{ validate_simple!(schema, nil) }&lt;br/&gt;
   end&lt;br/&gt;
 &lt;br/&gt;
   def test_validate_deep_record&lt;br/&gt;
@@ -336,22 +385,27 @@ def test_validate_deep_record&lt;br/&gt;
                             ])&lt;br/&gt;
 &lt;br/&gt;
     assert_nothing_raised { validate!(schema, &apos;head&apos; =&amp;gt; { &apos;hair&apos; =&amp;gt; { &apos;color&apos; =&amp;gt; &apos;black&apos; } }) }&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, &apos;head&apos; =&amp;gt; { &apos;hair&apos; =&amp;gt; { &apos;color&apos; =&amp;gt; &apos;black&apos; } }) }&lt;br/&gt;
 &lt;br/&gt;
     assert_failed_validation(&apos;at .head.hair.color expected type string, got null&apos;) do&lt;br/&gt;
       validate!(schema, &apos;head&apos; =&amp;gt; { &apos;hair&apos; =&amp;gt; { &apos;color&apos; =&amp;gt; nil } })&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, &apos;head&apos; =&amp;gt; { &apos;hair&apos; =&amp;gt; { &apos;color&apos; =&amp;gt; nil } }) }&lt;br/&gt;
 &lt;br/&gt;
     assert_failed_validation(&apos;at .head.hair.color expected type string, got null&apos;) do&lt;br/&gt;
       validate!(schema, &apos;head&apos; =&amp;gt; { &apos;hair&apos; =&amp;gt; {} })&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, &apos;head&apos; =&amp;gt; { &apos;hair&apos; =&amp;gt; {} }) }&lt;br/&gt;
 &lt;br/&gt;
     assert_failed_validation(&apos;at .head.hair expected type record, got null&apos;) do&lt;br/&gt;
       validate!(schema, &apos;head&apos; =&amp;gt; {})&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, &apos;head&apos; =&amp;gt; {}) }&lt;br/&gt;
 &lt;br/&gt;
     assert_failed_validation(&apos;at . expected type record, got null&apos;) do&lt;br/&gt;
       validate!(schema, nil)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, nil) }
&lt;p&gt;   end&lt;/p&gt;

&lt;p&gt;   def test_validate_deep_record_with_array&lt;br/&gt;
@@ -377,14 +431,17 @@ def test_validate_deep_record_with_array&lt;br/&gt;
                               }&lt;br/&gt;
                             ])&lt;br/&gt;
     assert_nothing_raised { validate!(schema, &apos;fruits&apos; =&amp;gt; [&lt;/p&gt;
{ &apos;name&apos; =&amp;gt; &apos;apple&apos;, &apos;weight&apos; =&amp;gt; 30.2 }]) }&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, &apos;fruits&apos; =&amp;gt; [{ &apos;name&apos; =&amp;gt; &apos;apple&apos;, &apos;weight&apos; =&amp;gt; 30.2 }
&lt;p&gt;]) }&lt;/p&gt;

&lt;p&gt;     assert_failed_validation(&apos;at .fruits&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.name expected type string, got null&apos;) do&lt;br/&gt;
       validate!(schema, &apos;fruits&apos; =&amp;gt; [&lt;/p&gt;
{ &apos;name&apos; =&amp;gt; nil, &apos;weight&apos; =&amp;gt; 30.2 }])&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised { validate_simple!(schema, &apos;fruits&apos; =&amp;gt; [{ &apos;name&apos; =&amp;gt; nil, &apos;weight&apos; =&amp;gt; 30.2 }
&lt;p&gt;]) }&lt;/p&gt;

&lt;p&gt;     assert_failed_validation(&apos;at .fruits expected type array, got int with value 1&apos;) do&lt;br/&gt;
       validate!(schema, &apos;fruits&apos; =&amp;gt; 1)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised &lt;/p&gt;
{ validate_simple!(schema, &apos;fruits&apos; =&amp;gt; 1) }
&lt;p&gt;   end&lt;/p&gt;

&lt;p&gt;   def test_validate_multiple_errors&lt;br/&gt;
@@ -397,6 +454,7 @@ def test_validate_multiple_errors&lt;br/&gt;
     exception = assert_raise(Avro::SchemaValidator::ValidationError) do&lt;br/&gt;
       validate!(schema, &lt;span class=&quot;error&quot;&gt;&amp;#91;nil, &amp;#39;e&amp;#39;&amp;#93;&lt;/span&gt;)&lt;br/&gt;
     end&lt;br/&gt;
+    assert_nothing_raised &lt;/p&gt;
{ validate_simple!(schema, [nil, &apos;e&apos;]) }
&lt;p&gt;     assert_equal 2, exception.result.errors.size&lt;br/&gt;
     assert_equal(&lt;br/&gt;
       &quot;at .&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; expected type int, got null\nat .&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; expected type int, got string with value \&quot;e\&quot;&quot;,&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16692932" author="jira-bot" created="Tue, 20 Nov 2018 09:31:53 +0000"  >&lt;p&gt;Commit 39500088491512aeccf3e9dc7b76d99b91a82436 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=timperkins&quot; class=&quot;user-hover&quot; rel=&quot;timperkins&quot;&gt;Tim Perkins&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=3950008&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=3950008&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2039&quot; title=&quot;Ruby encoding performance improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2039&quot;&gt;&lt;del&gt;AVRO-2039&lt;/del&gt;&lt;/a&gt;: Ruby encoding performance improvements (#230)&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 8 Nov 2018 20:20:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3g6dj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Ruby encoding performance improvements</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2040] Fix Ruby 2.4 deprecation notices </title>
                <link>https://issues.apache.org/jira/browse/AVRO-2040</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;&lt;a href=&quot;https://github.com/apache/avro/pull/231&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/231&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="13079284">AVRO-2040</key>
            <summary>Fix Ruby 2.4 deprecation notices </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tjwp">Tim Perkins</assignee>
                                    <reporter username="tjwp">Tim Perkins</reporter>
                        <labels>
                    </labels>
                <created>Mon, 12 Jun 2017 18:48:10 +0000</created>
                <updated>Fri, 21 Jul 2017 21:48:19 +0000</updated>
                            <resolved>Fri, 21 Jul 2017 21:48:19 +0000</resolved>
                                                    <fixVersion>1.9.0</fixVersion>
                                        <due></due>
                            <votes>2</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="16046932" author="tjwp" created="Mon, 12 Jun 2017 18:48:24 +0000"  >&lt;p&gt;&lt;a href=&quot;https://github.com/apache/avro/pull/231&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/231&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16095804" author="sacharya" created="Fri, 21 Jul 2017 05:31:50 +0000"  >&lt;p&gt;Looks good to me.&lt;/p&gt;

&lt;p&gt;/cc &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt; if it is okay with you I will merge this in.&lt;/p&gt;</comment>
                            <comment id="16096555" author="busbey" created="Fri, 21 Jul 2017 17:21:02 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="16096911" author="jira-bot" created="Fri, 21 Jul 2017 21:47:06 +0000"  >&lt;p&gt;Commit b1233fd6468d4de546891cc12d19f905c55604cc in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=timperkins&quot; class=&quot;user-hover&quot; rel=&quot;timperkins&quot;&gt;Tim Perkins&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=b1233fd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=b1233fd&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2040&quot; title=&quot;Fix Ruby 2.4 deprecation notices &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2040&quot;&gt;&lt;del&gt;AVRO-2040&lt;/del&gt;&lt;/a&gt;: Ruby 2.4 deprecation fixes&lt;/p&gt;

&lt;p&gt;This closes #231&lt;/p&gt;

&lt;p&gt;Signed-off-by: sacharya &amp;lt;suraj@apache.org&amp;gt;&lt;/p&gt;</comment>
                            <comment id="16096912" author="githubbot" created="Fri, 21 Jul 2017 21:47:27 +0000"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/231&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/231&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16096914" author="sacharya" created="Fri, 21 Jul 2017 21:48:19 +0000"  >&lt;p&gt;Thanks for the patch &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=timperkins&quot; class=&quot;user-hover&quot; rel=&quot;timperkins&quot;&gt;Tim Perkins&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 21 Jul 2017 05:31:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 26 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3g6i7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fix Ruby 2.4 deprecation notices</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2041] set up gitbox integration</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2041</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;We got consensus back in may about &lt;a href=&quot;https://lists.apache.org/thread.html/cdd8ba14c1bf8aca2d71d09862e9780f2dc46af414ed78b1e3fd9c56@%3Cdev.avro.apache.org%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;turning on gitbox integration&lt;/a&gt; so do it.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13079531">AVRO-2041</key>
            <summary>set up gitbox integration</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21148&amp;avatarType=issuetype">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="nielsbasjes">Niels Basjes</assignee>
                                    <reporter username="busbey">Sean Busbey</reporter>
                        <labels>
                    </labels>
                <created>Tue, 13 Jun 2017 16:28:51 +0000</created>
                <updated>Wed, 21 Feb 2018 22:10:49 +0000</updated>
                            <resolved>Wed, 21 Feb 2018 22:10:49 +0000</resolved>
                                                                    <component>community</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="16064801" author="cthistle" created="Tue, 27 Jun 2017 13:06:33 +0000"  >&lt;p&gt;Sean,&lt;/p&gt;

&lt;p&gt;Just digging through GitBox tickets for INFRA and came across yours. When you&apos;re ready, please submit a ticket through &lt;a href=&quot;https://issues.apache.org/jira/servicedesk/customer/portal/1/create/65&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/servicedesk/customer/portal/1/create/65&lt;/a&gt; and we&apos;ll get you setup.&lt;/p&gt;</comment>
                            <comment id="16095794" author="sacharya" created="Fri, 21 Jul 2017 05:16:34 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt; lets start with the simple feature of pull requests.&lt;br/&gt;
We can always expand to others.&lt;br/&gt;
If everything looks good to you, I would recommend that we file the ticket with Infra as Chris mentioned.&lt;/p&gt;</comment>
                            <comment id="16096395" author="rdblue" created="Fri, 21 Jul 2017 15:45:23 +0000"  >&lt;p&gt;Done: &lt;a href=&quot;https://issues.apache.org/jira/servicedesk/customer/portal/1/INFRA-14667&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/servicedesk/customer/portal/1/INFRA-14667&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16278331" author="nielsbasjes" created="Tue, 5 Dec 2017 10:01:19 +0000"  >&lt;p&gt;I setup the gitbox permissions for my account today and got the message:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;According to LDAP, you will have access to the following repositories:&lt;br/&gt;
avro:&lt;br/&gt;
       No repositories for the avro project served from gitbox yet...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt; What is the current status of this gitbox integration?&lt;br/&gt;
I do not have permission to look at &lt;a href=&quot;https://issues.apache.org/jira/servicedesk/customer/portal/1/INFRA-14667&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/servicedesk/customer/portal/1/INFRA-14667&lt;/a&gt; .&lt;/p&gt;</comment>
                            <comment id="16337589" author="nielsbasjes" created="Wed, 24 Jan 2018 13:36:44 +0000"  >&lt;p&gt;Seems the correct URL for the ticket is&#160;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/INFRA-14667&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/INFRA-14667&lt;/a&gt;&lt;br/&gt;
It was closed as &quot;Invalid&quot; months ago stating that Avro is not a gitbox project.&lt;br/&gt;
I thought this ticket was to convert Avro into gitbox ?!?!?&lt;/p&gt;</comment>
                            <comment id="16339107" author="nielsbasjes" created="Thu, 25 Jan 2018 11:28:47 +0000"  >&lt;p&gt;Vote:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lists.apache.org/thread.html/03d761432d99fd0cb9c7c935e45177cf3d8e4efec3066f45bb1f4f43@%3Cdev.avro.apache.org%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://lists.apache.org/thread.html/03d761432d99fd0cb9c7c935e45177cf3d8e4efec3066f45bb1f4f43@%3Cdev.avro.apache.org%3E&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lists.apache.org/thread.html/e332c49cd25b3659f3820455974f0e6fad66edb47fed3a0be905cb22@%3Cdev.avro.apache.org%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://lists.apache.org/thread.html/e332c49cd25b3659f3820455974f0e6fad66edb47fed3a0be905cb22@%3Cdev.avro.apache.org%3E&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;</comment>
                            <comment id="16340890" author="nielsbasjes" created="Fri, 26 Jan 2018 10:34:10 +0000"  >&lt;p&gt;I put in the request with the Apache Infra team via ticket &lt;a href=&quot;https://issues.apache.org/jira/browse/INFRA-15913&quot; title=&quot;Convert Apache Avro git repo to gitbox&quot; class=&quot;issue-link&quot; data-issue-key=&quot;INFRA-15913&quot;&gt;&lt;del&gt;INFRA-15913&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16361208" author="nielsbasjes" created="Mon, 12 Feb 2018 18:13:49 +0000"  >&lt;p&gt;Seems like the transition was already done.&lt;/p&gt;

&lt;p&gt;TODO: Update &lt;a href=&quot;http://avro.apache.org/version_control.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/version_control.html&lt;/a&gt;&#160;and other places (if any) where we mention the git repo for developers.&lt;/p&gt;</comment>
                            <comment id="16364168" author="busbey" created="Wed, 14 Feb 2018 14:48:06 +0000"  >&lt;p&gt;thanks for taking this over Niels!&lt;/p&gt;</comment>
                            <comment id="16371215" author="nielsbasjes" created="Wed, 21 Feb 2018 10:46:28 +0000"  >&lt;p&gt;The site is in subversion and uses ant/forrest to be generated.&lt;/p&gt;

&lt;p&gt;I tried to use the docker image we have to generate it but ran into a lot of errors like these&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[exec] /usr/local/apache-forrest/main/webapp/resources/schema/relaxng/sitemap-v06.rng:781:29: error: datatype library &lt;span class=&quot;code-quote&quot;&gt;&quot;http:&lt;span class=&quot;code-comment&quot;&gt;//www.w3.org/2001/XMLSchema-datatypes&quot;&lt;/span&gt; not recognized&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I do not know too much about Forrest so I tried if updating it works and it does. So I updated forrest in the docker image from 0.8 to 0.9 (the latest).&lt;/p&gt;

&lt;p&gt;Should I commit this update to 0.9 or is there a better way to solve this?&lt;/p&gt;</comment>
                            <comment id="16371944" author="githubbot" created="Wed, 21 Feb 2018 20:14:58 +0000"  >&lt;p&gt;nielsbasjes opened a new pull request #285: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2041&quot; title=&quot;set up gitbox integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2041&quot;&gt;&lt;del&gt;AVRO-2041&lt;/del&gt;&lt;/a&gt;: Upgrade Apache Forrest in docker image to v0.9&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/285&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/285&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   This is needed to generate the avro website.&lt;br/&gt;
   Signed-off-by: Niels Basjes &amp;lt;nbasjes@bol.com&amp;gt;&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16372037" author="githubbot" created="Wed, 21 Feb 2018 21:26:56 +0000"  >&lt;p&gt;nielsbasjes closed pull request #285: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2041&quot; title=&quot;set up gitbox integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2041&quot;&gt;&lt;del&gt;AVRO-2041&lt;/del&gt;&lt;/a&gt;: Upgrade Apache Forrest in docker image to v0.9&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/285&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/285&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/share/docker/Dockerfile b/share/docker/Dockerfile&lt;br/&gt;
index f97416749..535ae318f 100644&lt;br/&gt;
&amp;#8212; a/share/docker/Dockerfile&lt;br/&gt;
+++ b/share/docker/Dockerfile&lt;br/&gt;
@@ -37,13 +37,24 @@ RUN apt-get update &amp;amp;&amp;amp; apt-get install --no-install-recommends -y \&lt;br/&gt;
   ruby ruby-dev rake \&lt;br/&gt;
   libsnappy1 libsnappy-dev&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;
	&lt;ol&gt;
		&lt;li&gt;Install Forrest&lt;br/&gt;
-RUN mkdir -p /usr/local/apache-forrest&lt;br/&gt;
-RUN curl -O &lt;a href=&quot;http://archive.apache.org/dist/forrest/0.8/apache-forrest-0.8.tar.gz&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://archive.apache.org/dist/forrest/0.8/apache-forrest-0.8.tar.gz&lt;/a&gt;&lt;br/&gt;
-RUN tar xzf &lt;b&gt;forrest&lt;/b&gt; --strip-components 1 -C /usr/local/apache-forrest&lt;br/&gt;
+# Install Forrest in /usr/local/apache-forrest&lt;br/&gt;
+# Download&lt;br/&gt;
+RUN cd /usr/local/ &amp;amp;&amp;amp; wget &quot;http://www.apache.org/dyn/closer.lua?action=download&amp;amp;filename=/forrest/apache-forrest-0.9-sources.tar.gz&quot;      -O &quot;apache-forrest-0.9-sources.tar.gz&quot;&lt;br/&gt;
+RUN cd /usr/local/ &amp;amp;&amp;amp; wget &quot;http://www.apache.org/dyn/closer.lua?action=download&amp;amp;filename=/forrest/apache-forrest-0.9-dependencies.tar.gz&quot; -O &quot;apache-forrest-0.9-dependencies.tar.gz&quot;&lt;br/&gt;
+&lt;br/&gt;
+# Unpack Apache Forrest&lt;br/&gt;
+RUN cd /usr/local/ &amp;amp;&amp;amp; \&lt;br/&gt;
+    tar xzf apache-forrest-0.9-sources.tar.gz &amp;amp;&amp;amp; \&lt;br/&gt;
+    tar xzf apache-forrest-0.9-dependencies.tar.gz &amp;amp;&amp;amp; \&lt;br/&gt;
+    mv apache-forrest-0.9 apache-forrest&lt;br/&gt;
+RUN cd /usr/local/apache-forrest/main &amp;amp;&amp;amp; ./build.sh&lt;br/&gt;
+&lt;br/&gt;
+# The solution for &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-3906&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-3906&lt;/a&gt;&lt;br/&gt;
+RUN mkdir -p /usr/local/apache-forrest/plugins       &amp;amp;&amp;amp; chmod a+rwX -R /usr/local/apache-forrest/plugins&lt;br/&gt;
+RUN mkdir -p /usr/local/apache-forrest/build/plugins &amp;amp;&amp;amp; chmod a+rwX -R /usr/local/apache-forrest/build/plugins&lt;br/&gt;
+&lt;br/&gt;
+# Configure where forrest can be found&lt;br/&gt;
 RUN echo &apos;forrest.home=/usr/local/apache-forrest&apos; &amp;gt; build.properties&lt;br/&gt;
-RUN chmod -R 0777 /usr/local/apache-forrest/build /usr/local/apache-forrest/main \&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
	&lt;li&gt;/usr/local/apache-forrest/plugins&lt;br/&gt;
 ENV FORREST_HOME /usr/local/apache-forrest&lt;/li&gt;
&lt;/ul&gt;


&lt;ol&gt;
	&lt;li&gt;Install Perl modules&lt;/li&gt;
&lt;/ol&gt;





&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16372096" author="nielsbasjes" created="Wed, 21 Feb 2018 22:08:12 +0000"  >&lt;p&gt;I updated&#160;&lt;a href=&quot;http://avro.apache.org/version_control.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/version_control.html&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="13133977">INFRA-15913</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 27 Jun 2017 13:06:33 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            47 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3g813:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
