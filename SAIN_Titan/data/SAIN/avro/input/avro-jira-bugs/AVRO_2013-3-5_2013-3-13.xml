<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:18:24 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2013-3-5+AND+created+%3C%3D+2013-3-13+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="4" total="4"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1271] Hadoop Streaming mangles Python-produced Avro</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1271</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I&apos;ve got a rather simple script that takes Twitter data in JSON and turns it into an Avro file.&lt;/p&gt;

&lt;p&gt;from avro import schema, datafile, io&lt;br/&gt;
import json, sys&lt;br/&gt;
from types import *&lt;/p&gt;

&lt;p&gt;def main():&lt;br/&gt;
    if len(sys.argv) &amp;lt; 2:&lt;br/&gt;
        print &quot;Usage: cat input.json | python2.7 JSONtoAvro.py output&quot;&lt;br/&gt;
        return&lt;/p&gt;

&lt;p&gt;    s = schema.parse(open(&quot;tweet.avsc&quot;).read())&lt;br/&gt;
    f = open(sys.argv&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, &apos;wb&apos;)&lt;/p&gt;

&lt;p&gt;    writer = datafile.DataFileWriter(f, io.DatumWriter(), s, codec = &apos;deflate&apos;)&lt;/p&gt;

&lt;p&gt;    failed = 0&lt;/p&gt;

&lt;p&gt;    for line in sys.stdin:&lt;br/&gt;
        line = line.strip()&lt;/p&gt;

&lt;p&gt;    try:&lt;br/&gt;
        data = json.loads(line)&lt;br/&gt;
    except ValueError as detail:&lt;br/&gt;
        continue&lt;/p&gt;

&lt;p&gt;    try:&lt;br/&gt;
        writer.append(data)&lt;br/&gt;
    except io.AvroTypeException as detail:&lt;br/&gt;
        print line&lt;br/&gt;
        failed += 1&lt;/p&gt;

&lt;p&gt;writer.close()&lt;/p&gt;

&lt;p&gt;print str(failed) + &quot; failed in schema&quot;&lt;/p&gt;

&lt;p&gt;if _&lt;em&gt;name&lt;/em&gt;_ == &apos;_&lt;em&gt;main&lt;/em&gt;_&apos;:&lt;br/&gt;
    main()&lt;/p&gt;

&lt;p&gt;From there, I use this to feed a basic Hadoop Streaming script (also in Python) which just pulls out certain elements of the tweets. However, when I do this, it appears that the input for the script is mangled JSON. Usually the JSON fails with some errant \u in the middle of the tweet body or user-defined description.&lt;/p&gt;

&lt;p&gt;The Streaming script is rather basic &amp;#8211; it reads from sys.stdin and attempts to parse the JSON string using the json package.&lt;/p&gt;

&lt;p&gt;Here is the bash script I use to invoke Hadoop Streaming:&lt;/p&gt;

&lt;p&gt;jars=/usr/lib/hadoop/lib/avro-1.7.1.cloudera.2.jar,/usr/lib/hive/lib/avro-mapred-1.7.1.cloudera.2.jar&lt;/p&gt;

&lt;p&gt;hadoop jar /usr/lib/hadoop-mapreduce/hadoop-streaming.jar \&lt;br/&gt;
    -files $jars,$HOME/sandbox/hadoop/streaming/map/tweetMapper.py,$HOME/sandbox/hadoop/streaming/data/keywords.txt,$HOME/sandbox/hadoop/streaming/data/follow-r3.txt \&lt;br/&gt;
     -libjars $jars \&lt;br/&gt;
     -input /user/ahanna/avrotest/avrotest.json.avro \&lt;br/&gt;
     -output output \&lt;br/&gt;
     -mapper &quot;tweetMapper.py -a&quot; \&lt;br/&gt;
     -reducer org.apache.hadoop.mapred.lib.IdentityReducer \&lt;br/&gt;
     -inputformat org.apache.avro.mapred.AvroAsTextInputFormat \&lt;br/&gt;
     -numReduceTasks 1&lt;/p&gt;

&lt;p&gt;I&apos;m starting to think this is a bug with org.apache.avro.mapred.AvroAsTextInputFormat?&lt;/p&gt;</description>
                <environment>&lt;p&gt;Linux&lt;/p&gt;</environment>
        <key id="12635606">AVRO-1271</key>
            <summary>Hadoop Streaming mangles Python-produced Avro</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="7">Later</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="ahanna">Alex Hanna</reporter>
                        <labels>
                    </labels>
                <created>Wed, 6 Mar 2013 16:47:27 +0000</created>
                <updated>Wed, 6 Mar 2013 18:55:05 +0000</updated>
                            <resolved>Wed, 6 Mar 2013 18:55:05 +0000</resolved>
                                    <version>1.7.4</version>
                                                    <component>java</component>
                    <component>python</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13594973" author="ahanna" created="Wed, 6 Mar 2013 18:55:05 +0000"  >&lt;p&gt;Moving this to avro-users.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>316099</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 46 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ijn3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>316442</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1272] Ruby implementation does not handle namespaces correctly</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1272</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The Ruby implementation of schema and protocol parsing violates the following statement in the Avro spec, with respect to name resolution: &lt;b&gt;&quot;the namespace is taken from the most tightly enclosing schema or protocol&quot;&lt;/b&gt;. Currently, any nested named types without explicit namespace property are taken as being in the default namespace, not in the enclosing schema/protocol&apos;s namespace.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12636254">AVRO-1272</key>
            <summary>Ruby implementation does not handle namespaces correctly</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="martinkl">Martin Kleppmann</assignee>
                                    <reporter username="martinkl">Martin Kleppmann</reporter>
                        <labels>
                    </labels>
                <created>Sun, 10 Mar 2013 17:28:54 +0000</created>
                <updated>Tue, 20 Aug 2013 17:46:05 +0000</updated>
                            <resolved>Tue, 19 Mar 2013 15:45:15 +0000</resolved>
                                    <version>1.7.4</version>
                                    <fixVersion>1.7.5</fixVersion>
                                    <component>ruby</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13598328" author="martinkl" created="Sun, 10 Mar 2013 17:31:27 +0000"  >&lt;p&gt;Attached a suite of test cases that reproduces the problem, and a patch that fixes it. I have had to add method parameters in various places, but I have made them optional, so this is a backwards-compatible API change.&lt;/p&gt;</comment>
                            <comment id="13605911" author="martinkl" created="Tue, 19 Mar 2013 01:20:55 +0000"  >&lt;p&gt;Hi Doug, any chance you could take a look at this patch? Thanks!&lt;/p&gt;</comment>
                            <comment id="13606415" author="cutting" created="Tue, 19 Mar 2013 15:45:15 +0000"  >&lt;p&gt;I committed this.  Thanks, Martin!&lt;/p&gt;</comment>
                            <comment id="13606531" author="hudson" created="Tue, 19 Mar 2013 17:15:50 +0000"  >&lt;p&gt;Integrated in AvroJava #359 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/359/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/359/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1272&quot; title=&quot;Ruby implementation does not handle namespaces correctly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1272&quot;&gt;&lt;del&gt;AVRO-1272&lt;/del&gt;&lt;/a&gt;. Ruby: Improve schema namespace handling.  Contributed by Martin Kleppmann. (Revision 1458349)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
cutting : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/ruby/lib/avro/protocol.rb&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/ruby/lib/avro/schema.rb&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/ruby/test/test_protocol.rb&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/ruby/test/test_schema.rb&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12572978" name="AVRO-1272.patch" size="19620" author="martinkl" created="Sun, 10 Mar 2013 17:31:27 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 19 Mar 2013 15:45:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>316746</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 44 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1inmn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>317088</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1273] JavaScript dynamic generation of constructor funcs for Avro records</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1273</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Per &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-485&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-485&lt;/a&gt;, I have extended Avro&apos;s JavaScript support to dynamically generate constructors for Avro records.&lt;/p&gt;

&lt;p&gt;Validation of JS objects against Avro schemas is still supported, but the API is different: Avro.validate(schema, obj) instead of Validator.validate(schema, obj). This is a breaking change but may be worth it because there are now several Avro.* funcs.&lt;/p&gt;

&lt;p&gt;Code is at &lt;a href=&quot;https://github.com/sqs/avro/tree/lang-js/lang/js&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sqs/avro/tree/lang-js/lang/js&lt;/a&gt;. I will attach a diff.&lt;/p&gt;

&lt;p&gt;Here is sample usage. We compile a ManyFieldsRecord constructor function using the Avro schema as input. The constructor function accepts a JS object, which it validates against the Avro schema and then uses to populate the new object&apos;s fields. Then ManyFieldRecords objects use Object.defineProperty setters to ensure that the object remains valid Avro.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-javascript&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; manyFieldsRecordSchema = {
  type: &lt;span class=&quot;code-quote&quot;&gt;&apos;record&apos;&lt;/span&gt;, name: &lt;span class=&quot;code-quote&quot;&gt;&apos;ManyFieldsRecord&apos;&lt;/span&gt;, fields: [
    {name: &lt;span class=&quot;code-quote&quot;&gt;&apos;nullField&apos;&lt;/span&gt;, type: &lt;span class=&quot;code-quote&quot;&gt;&apos;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&apos;&lt;/span&gt;},
    {name: &lt;span class=&quot;code-quote&quot;&gt;&apos;booleanField&apos;&lt;/span&gt;, type: &lt;span class=&quot;code-quote&quot;&gt;&apos;&lt;span class=&quot;code-keyword&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&apos;&lt;/span&gt;},
    {name: &lt;span class=&quot;code-quote&quot;&gt;&apos;intField&apos;&lt;/span&gt;, type: &lt;span class=&quot;code-quote&quot;&gt;&apos;&lt;span class=&quot;code-keyword&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&apos;&lt;/span&gt;},
    {name: &lt;span class=&quot;code-quote&quot;&gt;&apos;longField&apos;&lt;/span&gt;, type: &lt;span class=&quot;code-quote&quot;&gt;&apos;&lt;span class=&quot;code-keyword&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&lt;/span&gt;&apos;&lt;/span&gt;},
    {name: &lt;span class=&quot;code-quote&quot;&gt;&apos;floatField&apos;&lt;/span&gt;, type: &lt;span class=&quot;code-quote&quot;&gt;&apos;&lt;span class=&quot;code-keyword&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt;&lt;/span&gt;&apos;&lt;/span&gt;},
    {name: &lt;span class=&quot;code-quote&quot;&gt;&apos;doubleField&apos;&lt;/span&gt;, type: &lt;span class=&quot;code-quote&quot;&gt;&apos;&lt;span class=&quot;code-keyword&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;&lt;/span&gt;&apos;&lt;/span&gt;},
    {name: &lt;span class=&quot;code-quote&quot;&gt;&apos;stringField&apos;&lt;/span&gt;, type: &lt;span class=&quot;code-quote&quot;&gt;&apos;string&apos;&lt;/span&gt;},
    {name: &lt;span class=&quot;code-quote&quot;&gt;&apos;bytesField&apos;&lt;/span&gt;, type: &lt;span class=&quot;code-quote&quot;&gt;&apos;bytes&apos;&lt;/span&gt;}
  ]
};

&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; compiledTypes = Avro.compile(manyFieldsRecordSchema)
  ManyFieldsRecord = compiledTypes.ManyFieldsRecord,
  mfr = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ManyFieldsRecord();

test.&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;function&lt;/span&gt;() { mfr.nullField = undefined; });
test.&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;function&lt;/span&gt;() { mfr.nullField = 1; });
test.&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;function&lt;/span&gt;() { mfr.booleanField = &lt;span class=&quot;code-quote&quot;&gt;&apos;a&apos;&lt;/span&gt;; });
test.&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;function&lt;/span&gt;() { mfr.intField = &lt;span class=&quot;code-quote&quot;&gt;&apos;a&apos;&lt;/span&gt;; }); &lt;span class=&quot;code-comment&quot;&gt;// TODO: warn &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; setting &lt;span class=&quot;code-keyword&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&lt;/span&gt;/&lt;span class=&quot;code-keyword&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&lt;/span&gt; field to a non-integer
&lt;/span&gt;test.&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;function&lt;/span&gt;() { mfr.longField = &lt;span class=&quot;code-quote&quot;&gt;&apos;a&apos;&lt;/span&gt;; });
test.&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;function&lt;/span&gt;() { mfr.floatField = &lt;span class=&quot;code-quote&quot;&gt;&apos;a&apos;&lt;/span&gt;; });
test.&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;function&lt;/span&gt;() { mfr.doubleField = &lt;span class=&quot;code-quote&quot;&gt;&apos;a&apos;&lt;/span&gt;; });
test.&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;function&lt;/span&gt;() { mfr.stringField = 3; });

mfr.nullField = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
mfr.booleanField = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
mfr.intField = 1;
mfr.longField = 2;
mfr.floatField = 3.5;
mfr.doubleField = 4.5;
mfr.stringField = &lt;span class=&quot;code-quote&quot;&gt;&apos;a&apos;&lt;/span&gt;;
test.equal(mfr.nullField, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
test.equal(mfr.booleanField, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
test.equal(mfr.intField, 1);
test.equal(mfr.longField, 2);
test.equal(mfr.floatField, 3.5);
test.equal(mfr.doubleField, 4.5);
test.equal(mfr.stringField, &lt;span class=&quot;code-quote&quot;&gt;&apos;a&apos;&lt;/span&gt;);

&lt;span class=&quot;code-comment&quot;&gt;// Standard JavaScript JSON API &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt;:
&lt;/span&gt;mgr.toJSON(); &lt;span class=&quot;code-comment&quot;&gt;// --&amp;gt; returns plain JS object (without Avro-validating setters)
&lt;/span&gt;JSON.stringify(mfr); &lt;span class=&quot;code-comment&quot;&gt;// --&amp;gt; returns Avro JSON&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;More examples are in the test dir: &lt;a href=&quot;https://github.com/sqs/avro/tree/lang-js/lang/js/test&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sqs/avro/tree/lang-js/lang/js/test&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is still rough and I am very interested in getting feedback. Thanks!&lt;/p&gt;</description>
                <environment></environment>
        <key id="12636490">AVRO-1273</key>
            <summary>JavaScript dynamic generation of constructor funcs for Avro records</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="sqs">Quinn Slack</reporter>
                        <labels>
                            <label>javascript</label>
                    </labels>
                <created>Tue, 12 Mar 2013 01:12:40 +0000</created>
                <updated>Sun, 30 Dec 2018 04:32:44 +0000</updated>
                                                                            <component>javascript</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13599551" author="sqs" created="Tue, 12 Mar 2013 01:15:21 +0000"  >&lt;p&gt;v1&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Nested records are not cleanly supported. You must use `new RecA({recBField: (new RecB(
{...}
&lt;p&gt;)).toJSON())` to get a plain JS object for the nested record.&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;Fixed fields are not supported&lt;/li&gt;
	&lt;li&gt;Long fields do not warn about overflow.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Available on Github at &lt;a href=&quot;https://github.com/sqs/avro/tree/23332020cab27fe35b1823b34ccb89cebb1fd979&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sqs/avro/tree/23332020cab27fe35b1823b34ccb89cebb1fd979&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12573224" name="AVRO-1273.patch" size="94143" author="sqs" created="Tue, 12 Mar 2013 01:15:21 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>316982</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 45 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ip2v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>317323</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1274] Add a schema builder API</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1274</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;It would be nice to have a fluent API that made it easier to construct record schemas.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12636588">AVRO-1274</key>
            <summary>Add a schema builder API</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tomwhite">Tom White</assignee>
                                    <reporter username="tomwhite">Tom White</reporter>
                        <labels>
                    </labels>
                <created>Tue, 12 Mar 2013 15:20:04 +0000</created>
                <updated>Tue, 20 Aug 2013 17:46:09 +0000</updated>
                            <resolved>Mon, 29 Apr 2013 11:38:50 +0000</resolved>
                                                    <fixVersion>1.7.5</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13600097" author="tomwhite" created="Tue, 12 Mar 2013 15:29:20 +0000"  >&lt;p&gt;Here&apos;s a start. An example of the API:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Schema schema = SchemaBuilder
  .recordType().name(&quot;myrecord&quot;).aliases(&quot;oldrecord&quot;)
    .field().name(&quot;f0&quot;).type(SchemaBuilder.STRING)
    .field().name(&quot;f1&quot;).type(SchemaBuilder.LONG)
    .field().name(&quot;f2&quot;).type(SchemaBuilder.BOOLEAN).optional()
  .build();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
	&lt;li&gt;I called the class SchemaBuilder, but perhaps it should be Schema.Builder by analogy with Schema.Parser.&lt;/li&gt;
	&lt;li&gt;There&apos;s no support for default values for fields. I had a cursory look but couldn&apos;t see a way to convert from Java objects to JsonNodes in the current code - is there a way to do that?&lt;/li&gt;
	&lt;li&gt;I still have to add javadoc and a few more tests.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13600838" author="jwills" created="Wed, 13 Mar 2013 05:20:49 +0000"  >&lt;p&gt;Hey Tom-- I wrote something along these lines way back in the day:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jwills/avroplay/blob/master/src/com/randomgraphs/avro/RecordSchemaBuilder.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/jwills/avroplay/blob/master/src/com/randomgraphs/avro/RecordSchemaBuilder.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The general orientation is towards supporting the union &lt;/p&gt;
{ null, T }
&lt;p&gt; pattern for optional fields w/default values, and it ends up looking like:&lt;/p&gt;

&lt;p&gt;Schema schema = new RecordSchemaBuilder(&quot;myrecord&quot;)&lt;br/&gt;
    .requiredString(&quot;foo&quot;)&lt;br/&gt;
    .optionalFloat(&quot;bar&quot;, 17.29f)&lt;br/&gt;
    .array(&quot;baz&quot;, Schema.create(Schema.Type.STRING))&lt;br/&gt;
    .build();&lt;/p&gt;

&lt;p&gt;It has support for default values for primitive types and just wraps them in JsonNodes as need be, and is smart about checking to see if your record is named or anonymous. I&apos;m happy to re-format it as a patch if you think it&apos;s worthwhile. My main feeling was that the name, type, and required/optional nature of the field are the three things you really always have to know, and whether/not you have a doc string or sort order info should be hidden away as rarely-used options in this context.&lt;/p&gt;</comment>
                            <comment id="13601319" author="cutting" created="Wed, 13 Mar 2013 16:30:31 +0000"  >&lt;p&gt;This looks great, Tom, and has long been needed.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The downside of calling this Schema.Builder is that it makes the Schema class even bigger.  The upside is that if you &apos;import Schema.Builder&apos; then the code is sleeker.  But perhaps the preferred import should instead be &apos;import static SchemaBuilder.*&apos;?  The static methods have unique-enough names that this might work well.  What do you think?&lt;/li&gt;
	&lt;li&gt;We can convert from Java object to JsonNode by parsing the output of GenericData.toString(Object).&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13601396" author="tomwhite" created="Wed, 13 Mar 2013 17:29:45 +0000"  >&lt;p&gt;Thanks a lot for sharing that, Josh! I like the idea of making sure that things that should be specified should be passed as method parameters in one go, rather than through chaining, which makes it a lot harder to see what is required. So I took the liberty of updating the patch to use requiredX/optionalX methods like in your code. It&apos;s not quite finished, but this shows the idea:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Schema schema = SchemaBuilder
  .recordType(&lt;span class=&quot;code-quote&quot;&gt;&quot;myrecord&quot;&lt;/span&gt;).aliases(&lt;span class=&quot;code-quote&quot;&gt;&quot;oldrecord&quot;&lt;/span&gt;)
  .requiredString(&lt;span class=&quot;code-quote&quot;&gt;&quot;f0&quot;&lt;/span&gt;)
  .requiredLong(&lt;span class=&quot;code-quote&quot;&gt;&quot;f1&quot;&lt;/span&gt;).doc(&lt;span class=&quot;code-quote&quot;&gt;&quot;This is f1&quot;&lt;/span&gt;)
  .optionalBoolean(&lt;span class=&quot;code-quote&quot;&gt;&quot;f2&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;)
  .build();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As this example shows, it is still possible to set things like doc and aliases - it&apos;s just that you can ignore them if you like.&lt;/p&gt;

&lt;p&gt;Regarding Doug&apos;s points...&lt;/p&gt;

&lt;p&gt;&amp;gt; But perhaps the preferred import should instead be &apos;import static SchemaBuilder.*&apos;? The static methods have unique-enough names that this might work well. What do you think?&lt;/p&gt;

&lt;p&gt;Sounds good.&lt;/p&gt;

&lt;p&gt;&amp;gt; We can convert from Java object to JsonNode by parsing the output of GenericData.toString(Object).&lt;/p&gt;

&lt;p&gt;Thanks. I&apos;ve updated the patch to do this, but it still needs tests for this part.&lt;/p&gt;</comment>
                            <comment id="13602445" author="tomwhite" created="Thu, 14 Mar 2013 17:14:30 +0000"  >
&lt;p&gt;New patch with more tests for all the required/optional methods.&lt;/p&gt;

&lt;p&gt;I have a couple of questions too.&lt;/p&gt;

&lt;p&gt;Default values for bytes are encoded as &lt;tt&gt;&quot;bytes&quot; : &quot;A&quot;&lt;/tt&gt;, e.g.:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;{
    &quot;name&quot; : &quot;optionalBytesWithDefault&quot;,
    &quot;type&quot; : [ &quot;null&quot;, &quot;bytes&quot; ],
    &quot;default&quot; : {
      &quot;bytes&quot; : &quot;A&quot;
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I couldn&apos;t find where this is covered in the spec, since the section on default values says &quot;Default values for bytes and fixed fields are JSON strings, where Unicode code points 0-255 are mapped to unsigned 8-bit byte values 0-255.&quot; and doesn&apos;t mention the &quot;bytes&quot; part (&lt;a href=&quot;http://avro.apache.org/docs/current/spec.html#schema_record&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/docs/current/spec.html#schema_record&lt;/a&gt;). If this is correct, should the fixed default value have &quot;bytes&quot; too?&lt;/p&gt;

&lt;p&gt;I&apos;m also confused about how default values work at read time. If I write a record with a default optional field without specifying the field value, then read it back the value is always null, even though the default is not null. E.g. for &lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;{
  &quot;type&quot; : &quot;record&quot;,
  &quot;name&quot; : &quot;r&quot;,
  &quot;fields&quot; : [ {
    &quot;name&quot; : &quot;a&quot;,
    &quot;type&quot; : [ &quot;string&quot;, &quot;null&quot; ],
    &quot;default&quot; : &quot;cat&quot;
  } ]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the value read back is &lt;/p&gt;
{&quot;a&quot;:null}
&lt;p&gt; not &lt;/p&gt;
{&quot;a&quot;:&quot;cat&quot;}
&lt;p&gt; &lt;/p&gt;

&lt;p&gt;What am I missing?&lt;/p&gt;</comment>
                            <comment id="13602459" author="jwills" created="Thu, 14 Mar 2013 17:26:36 +0000"  >&lt;p&gt;Hey Tom-- I am of no help on the bytes default values problem, I just wanted to say that I love the new API. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13602567" author="cutting" created="Thu, 14 Mar 2013 18:55:13 +0000"  >&lt;p&gt;This should look like:&lt;/p&gt;

{&quot;name&quot;:&quot;optionalBytesWithDefault&quot;, &quot;type&quot;:[&quot;null&quot;, &quot;bytes&quot;], &quot;default&quot;:null}

&lt;p&gt;If a field&apos;s type is a union, then the type of the default is the type of the first element in the union.  So the only valid default value for a union of the form &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;null&amp;quot;, ...&amp;#93;&lt;/span&gt; is null.  Some other valid examples of unions with defaults are:&lt;/p&gt;

{&quot;name&quot;:&quot;f1&quot;, &quot;type&quot;:[&quot;string&quot;, &quot;int&quot;], &quot;default&quot;:&quot;&quot;}
{&quot;name&quot;:&quot;f2&quot;, &quot;type&quot;:[&quot;int&quot;, &quot;string&quot;], &quot;default&quot;:0}

&lt;p&gt;Default values are different than what JsonEncoder would produce.  It will qualify values of a union with their type, rendering &lt;/p&gt;
{&quot;bytes&quot;:&quot;foo&quot;}
&lt;p&gt; rather than just &quot;foo&quot; for a value whose schema is &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;bytes&amp;quot;, ...&amp;#93;&lt;/span&gt;.  But default values are not so qualified.&lt;/p&gt;

&lt;p&gt;Does that help?&lt;/p&gt;</comment>
                            <comment id="13602613" author="cutting" created="Thu, 14 Mar 2013 19:35:59 +0000"  >&lt;p&gt;Sorry, I wrote the above before looking at your patch and the sources.  That &lt;/p&gt;
{&quot;bytes&quot;:&quot;foo&quot;}
&lt;p&gt; thing is indeed coming from GenericData#toString.  (It dates back to the pre-history of Avro.  I must have had some good intention when I added it, but it sure looks evil now.)  We should probably remove it, but that would be an incompatible change.  Perhaps the next release should be 1.8.0 instead of 1.7.5.  There are a few other minor incompatible changes queued that would be nice to get out.  Or we can work around this, specially handling binary default values.&lt;/p&gt;</comment>
                            <comment id="13602774" author="tomwhite" created="Thu, 14 Mar 2013 21:21:29 +0000"  >&lt;p&gt;Thanks for the explanations, Doug. I&apos;m still struggling to see when defaults kick in though (see attached test). E.g. at write time if I have a field&lt;/p&gt;

{&quot;name&quot;:&quot;f1&quot;, &quot;type&quot;:[&quot;string&quot;, &quot;int&quot;], &quot;default&quot;:&quot;cat&quot;}

&lt;p&gt;and I don&apos;t set f1, then the write fails, complaining that f1 has not been set (even though there&apos;s a default).&lt;/p&gt;

&lt;p&gt;Similarly, if I write a null field, then read it back using&lt;/p&gt;

{&quot;name&quot;:&quot;f1&quot;, &quot;type&quot;:[&quot;string&quot;, &quot;null&quot;], &quot;default&quot;:&quot;cat&quot;}

&lt;p&gt;for the reader schema the read returns f1 as null, perhaps unsurprisingly, since it was written as a null.&lt;/p&gt;

&lt;p&gt;If I use the first field schema (union of string and int), then the read fails with &quot;Not in union &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;string&amp;quot;,&amp;quot;int&amp;quot;&amp;#93;&lt;/span&gt;: null&quot;.&lt;/p&gt;

&lt;p&gt;How are defaults meant to be used (this is with generic readers/writers)?&lt;/p&gt;</comment>
                            <comment id="13602789" author="cutting" created="Thu, 14 Mar 2013 21:33:16 +0000"  >&lt;p&gt;Defaults are primarily used at read time to supply values for fields missing from the writer&apos;s schema.&lt;/p&gt;

&lt;p&gt;The builder API will also fill in default values at object creation time (i.e., prior to write, typically).  To build generic instances with defaults use GenericRecordBuilder.  For example:&lt;/p&gt;

&lt;p&gt;with the schema:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;r&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;f&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt;:0}]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then you should see:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericRecordBuilder(schema).build().toString() -&amp;gt; {&lt;span class=&quot;code-quote&quot;&gt;&quot;f&quot;&lt;/span&gt;, 0}

&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericRecordBuilder(schema).set(&lt;span class=&quot;code-quote&quot;&gt;&quot;f&quot;&lt;/span&gt;,1).build().toString() -&amp;gt; {&lt;span class=&quot;code-quote&quot;&gt;&quot;f&quot;&lt;/span&gt;, 1}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="13603277" author="tomwhite" created="Fri, 15 Mar 2013 10:23:02 +0000"  >&lt;p&gt;Doug - I didn&apos;t know about GenericRecordBuilder - that clears up the write side. I&apos;ve added some Javadoc to GenericData to make this clearer.&lt;/p&gt;

&lt;p&gt;As for the read side, of course the point is that defaults are only used for &lt;b&gt;new&lt;/b&gt; fields in the reader schema, and my example failed because I was trying to modify an &lt;b&gt;existing&lt;/b&gt; field, which you can&apos;t do. The spec is actually pretty clear on this: &lt;a href=&quot;http://avro.apache.org/docs/current/spec.html#Schema+Resolution&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/docs/current/spec.html#Schema+Resolution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The latest patch should be ready for commit. I&apos;ve added Javadoc to the whole API, fixed the encoding of &apos;bytes&apos; and &apos;fixed&apos; default values (in a backwards compatible way), and fixed the order of types in optional unions to &lt;span class=&quot;error&quot;&gt;&amp;#91;T, null&amp;#93;&lt;/span&gt; so the default can be of type T. I also improved the API for specifying field ordering so you don&apos;t need to know about Schema.Type.Order.&lt;/p&gt;

&lt;p&gt;Josh - thanks!&lt;/p&gt;</comment>
                            <comment id="13603315" author="tomwhite" created="Fri, 15 Mar 2013 11:50:43 +0000"  >&lt;p&gt;I&apos;m wondering if the correct way to do this is actually to have &lt;span class=&quot;error&quot;&gt;&amp;#91;null, T&amp;#93;&lt;/span&gt; for optional fields with no default:&lt;/p&gt;

{&quot;name&quot;: &quot;optionalBoolean&quot;, &quot;type&quot;: [ &quot;null&quot;, &quot;boolean&quot; ], &quot;default&quot;: null}

&lt;p&gt;and &lt;span class=&quot;error&quot;&gt;&amp;#91;T, null&amp;#93;&lt;/span&gt; when there is a non-null default:&lt;/p&gt;

{&quot;name&quot;: &quot;optionalBooleanWithDefault&quot;, &quot;type&quot;: [ &quot;boolean&quot;, &quot;null&quot; ], &quot;default&quot; : true}</comment>
                            <comment id="13603636" author="cutting" created="Fri, 15 Mar 2013 18:23:40 +0000"  >&lt;p&gt;&amp;gt; I&apos;m wondering if the correct way to do this is actually to have &lt;span class=&quot;error&quot;&gt;&amp;#91;null, T&amp;#93;&lt;/span&gt; for optional fields with no default [ ... ] and and &lt;span class=&quot;error&quot;&gt;&amp;#91;T, null&amp;#93;&lt;/span&gt; when there is a non-null default.&lt;/p&gt;

&lt;p&gt;The latter is certainly required when there is a non-null default.&lt;/p&gt;

&lt;p&gt;The former is subtly different.  A reader with a &lt;span class=&quot;error&quot;&gt;&amp;#91;null, T&amp;#93;&lt;/span&gt; union with no default value specified still requires that the field be present in the writer&apos;s schema.  So it&apos;s a required nullable field as opposed to an entirely optional field.  This subtlety is confusing, so glossing over it in the builder API by always generating a default value of null for nullable fields with no other default value specified is probably best.&lt;/p&gt;</comment>
                            <comment id="13603884" author="cutting" created="Fri, 15 Mar 2013 21:37:45 +0000"  >&lt;p&gt;Some nits:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If a default value has a nested bytes then it will fail.  For example, a field whose type is a record with a field named &apos;a&apos; of type bytes can have a default value of 
{&quot;a&quot;:&quot;asdf&quot;}
&lt;p&gt;, but GenericData.toString() won&apos;t generate this correctly.  I think this can just remain a &quot;known issue&quot; until we fix GenericData.toString(), but we should probably add a comment noting that.&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;Is SchemaParseException the right exception here?  AvroRuntimeException or perhaps some new exception like SchemaBuilderError or somesuch.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Other than that, this looks great!  +1&lt;/p&gt;</comment>
                            <comment id="13605086" author="tomwhite" created="Mon, 18 Mar 2013 13:09:17 +0000"  >&lt;p&gt;&amp;gt; This subtlety is confusing, so glossing over it in the builder API by always generating a default value of null for nullable fields with no other default value specified is probably best.&lt;/p&gt;

&lt;p&gt;I agree - fixed in latest patch. I also added some tests for the different behaviour of defaults at read and write time.&lt;/p&gt;

&lt;p&gt;I addressed the nits too.&lt;/p&gt;</comment>
                            <comment id="13605151" author="tomwhite" created="Mon, 18 Mar 2013 14:21:29 +0000"  >&lt;p&gt;I opened &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1275&quot; title=&quot;GenericData&amp;#39;s toString() method generates the wrong JSON encoding for the bytes type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1275&quot;&gt;AVRO-1275&lt;/a&gt; for the GenericData.toString() issue.&lt;/p&gt;</comment>
                            <comment id="13606406" author="cutting" created="Tue, 19 Mar 2013 15:30:14 +0000"  >&lt;p&gt;+1 This looks great to me.&lt;/p&gt;</comment>
                            <comment id="13607159" author="scott_carey" created="Wed, 20 Mar 2013 01:27:39 +0000"  >&lt;p&gt;I have not had time to review thoroughly, but I have some thoughts on this as I had planned on taking this on sometime this year:&lt;/p&gt;

&lt;p&gt;Schema has a few warts that cause problems:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Schamas are mutable (ok, Record schemas are).  This has many down-stream effects on performance when used as keys or transofrming them or traversing them.&lt;/li&gt;
	&lt;li&gt;Defaults are defined using Jackson JSON objects, there are many placed where having a canonical data form for defaults would be beneficial, and we would not leak our  our use of Jackson through the API (which makes upgrading to Jackson 2.x an API breaking change).  This causes performance problems in decoding and complications elsewhere.&lt;/li&gt;
	&lt;li&gt;Field, Schema, and Protocol do not share a common parent, so writing generic transformation / traversal code is not possible (Visitor Pattern, or a &apos;shaped like a schma&apos; monad-like data structure).&lt;/li&gt;
	&lt;li&gt;There is no builder.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Builders are awesome for helping hide implementation details from the user, so my hope is that this API could work with both the current Schema code and what it evolves into.  A Builder API maps very cleanly into the spec, which is also quite handy and changes more slowly than APIs in general.&lt;/p&gt;


&lt;p&gt;On a quick review, I noticed that there are triplets of methods for each type.  One for a required field, and two for an optional one &amp;#8211; with a null default value and one with a specified default value.  We are missing the required field with a default value, that is important if you want to read data with a schema that is missing that field.  The union builder may also work better if you can add schemas one at a time, and if it enforced that a default for a union must be the same type as the first schema in the union as the spec requires.&lt;/p&gt;</comment>
                            <comment id="13607768" author="cutting" created="Wed, 20 Mar 2013 16:01:52 +0000"  >&lt;p&gt;Schema, Field, Protocol and Message do actually have a common base class:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://avro.apache.org/docs/current/api/java/org/apache/avro/JsonProperties.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/docs/current/api/java/org/apache/avro/JsonProperties.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;m not sure how much this can be exploited to simplify generic traversal.  It would be nice to have a generic traversal API.  I&apos;ve started to write one several times but given up since it was far easier in each case to write another recursive walker with a switch statement.&lt;/p&gt;

&lt;p&gt;I believe that Tom&apos;s API is sufficiently independent of the underlying Schema API that it can survive changes to that.  I&apos;d hate to see the addition of this much-needed builder API held back for a re-design of the Schema API.&lt;/p&gt;</comment>
                            <comment id="13607846" author="scott_carey" created="Wed, 20 Mar 2013 16:54:37 +0000"  >&lt;p&gt;I agree, don&apos;t hold this up.&lt;/p&gt;

&lt;p&gt;It appears to be the proper abstraction for the job:  it does not leak implementation details and is more a Java definition of the Schema spec.  For example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; FieldBuilder optionalInt(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; name, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; defaultValue) {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; FieldBuilder(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, name, INT, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;, toJsonNode(defaultValue));
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;does not leak the JsonNode stuff out to the api, and requires that the default value is the proper type.   There may be some more work to do to reach all parts of the spec or aid ease of use (perhaps in another ticket), but if all uses are spec-compatible and type-safe, then it is extremely unlikely we&apos;ll need an API change to this at any point in the future unless it involves a corresponding spec change.&lt;/p&gt;
</comment>
                            <comment id="13607952" author="tomwhite" created="Wed, 20 Mar 2013 18:22:18 +0000"  >&lt;p&gt;Thanks for taking a look Scott. I agree that over time the builder API can be used as a replacement to hide the problems with the existing Schema API from users.&lt;/p&gt;

&lt;p&gt;Regarding the required field with default value - I&apos;ll add that. Also, we could check the union&apos;s first type is consistent with any default, but I can&apos;t see a way of getting it to be a compile-time check - we&apos;d have to do it when the schema is built. I can make these changes in this JIRA or another one - either way works for me. &lt;/p&gt;</comment>
                            <comment id="13608218" author="scott_carey" created="Wed, 20 Mar 2013 21:11:21 +0000"  >&lt;p&gt;Another type of schema that the builder cannot create (easily) is an optional field with no default.  Such a schema is brittle when used to read, but in some cases that is desired &amp;#8211; you may want to fail if the data being read does not contain a field or matching value at the source.&lt;/p&gt;

&lt;p&gt;&quot;optional&quot; and &quot;required&quot; don&apos;t feel like the right names &amp;#8211; the latter is not required, if it has a default value, and the former may be required if it does not have a default value.  &quot;nullable&quot; is a more exact description for the former.&lt;/p&gt;

&lt;p&gt;This means there are 5 methods per type if we keep the builder similar  &amp;#8211; nullable with null default, nullable with no default, nullable with a value default, non-nullable with a default, and non-null without a default.&lt;/p&gt;

&lt;p&gt;A different way to handle this is to move the default handling to a specialized field builder per type (type-builder?) rather than have the method count be combinatorial (5 + N methods rather than 5 * N methods, for N types and 5 default options).  This is the same code that would be required to make union defaults type-safe (When building a union, the first type would have to be added explicitly and return the appropriate default builder, then other types could be added to the union).&lt;/p&gt;

&lt;p&gt;We could split it into enough types to make it more composable.  Below are some ideas that I haven&apos;t thought through completely, and I might take a stab at it in 4 weeks:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  nullableInt(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;).&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;(1); &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; nullable &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; (a union of &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; and &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, which is ordered properly based on whether it has a non-&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;)
&lt;/span&gt;  nullableInt(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;).defaultNull(); &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; missing on read the field is &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
&lt;/span&gt;  nullableInt(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;).required(); &lt;span class=&quot;code-comment&quot;&gt;// no &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; value, the field is required
&lt;/span&gt;
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;).&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;(-1); &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; non-nullable &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; with &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; -1;
&lt;/span&gt;  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;).required();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or completely chained syntax for each step (which requires several more builder types but can be perfectly type safe):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  name(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;).nullable().&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;().&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;(1);  &lt;span class=&quot;code-comment&quot;&gt;// capture name separately, since we want to build types without names elsewhere and those have the same API otherwise
&lt;/span&gt;  name(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;).nullable().&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;().nullDefault();
  name(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;).nullable().&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;().required();
  name(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;).&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;().&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;(-1);
  name(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;).&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;().required();
  name(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;).arrayOf().&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;().nullable().&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] {0}); &lt;span class=&quot;code-comment&quot;&gt;// re-use type building &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; fields &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; array &lt;span class=&quot;code-keyword&quot;&gt;inner&lt;/span&gt; type
&lt;/span&gt;  name(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;).unionOf().fixed(4).&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] {127, 0, 0, 1}).and().fixed(16); &lt;span class=&quot;code-comment&quot;&gt;// re-use type building again, and also only allow the first one to be a type builder that supports defaults, the type builder after add() does not support defaults.  We cant prevent unions from adding the same type twice at &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; point without making a type &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; every combinational subset of unnamed types, due to limitations with Java&apos;s type system.
&lt;/span&gt;
  &lt;span class=&quot;code-comment&quot;&gt;// complex example 
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RecordTypeBuilder(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.example.Tree&quot;&lt;/span&gt;)
   .field(&lt;span class=&quot;code-quote&quot;&gt;&quot;left&quot;&lt;/span&gt;).nullable().recordReference(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.example.Tree&quot;&lt;/span&gt;).defaultNull()
   .field(&lt;span class=&quot;code-quote&quot;&gt;&quot;data&quot;&lt;/span&gt;).string().required()
   .field(&lt;span class=&quot;code-quote&quot;&gt;&quot;right&quot;&lt;/span&gt;).nullable().recordReference(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.example.Tree&quot;&lt;/span&gt;).defaultNull()
   .build();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&quot;nullable()&quot; is a special case union&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  field(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;).nullable().&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;().defaultNull() &lt;span class=&quot;code-comment&quot;&gt;// a special &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; binary union of &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; and a single other type
&lt;/span&gt;
  field(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;).unionOf().&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;().and().&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;().defaultNull(); &lt;span class=&quot;code-comment&quot;&gt;// same, but allows &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; adding more than one additional type to the union and does not support rearranging the order of the two &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; purposes&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="13609230" author="tomwhite" created="Thu, 21 Mar 2013 18:06:49 +0000"  >&lt;p&gt;&amp;gt; nullable with null default, nullable with no default, nullable with a value default, non-nullable with a default, and non-null without a default&lt;/p&gt;

&lt;p&gt;This could be confusing! I think we need to make the common cases accessible and easy to understand. Required, optional, and optional with a default are all common cases. The other two (nullable with no default, and to a lesser extent non-nullable with a default) are not, so we need to work out a way of exposing them (if we expose them at all at the moment) that makes sense in the context of IDE autocomplete, which is how I think this API will be experienced.&lt;/p&gt;

&lt;p&gt;One renaming might be the following, but I&apos;m not sure what I think about it.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;intType(name)
intType(name, default)
nullableIntType(name)
nullableIntType(name, default)
nullableIntTypeNoDefault(name)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another way would be to leave the naming we have, and offer an escape hatch for advanced users, &lt;tt&gt;SchemaBuilder.recordType(&quot;r&quot;).field(&quot;f0&quot;)...&lt;/tt&gt; with the advanced methods.&lt;/p&gt;

&lt;p&gt;One thing I do want to avoid is excessive chaining, since if you have something like &lt;tt&gt;name(&quot;foo&quot;).nullable().int()&lt;/tt&gt; then it&apos;s not clear to users what parts of the field definition are optional (e.g. nullable is but the type isn&apos;t). This is why I prefer the overloaded variants of requiredX/optionalX.&lt;/p&gt;

&lt;p&gt;Regarding enforcing the default in union types, the following change to the API should do it: &lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Schema schema = SchemaBuilder.recordType(&quot;r&quot;)
 .unionLong(&quot;myunion&quot;).withType(SchemaBuilder.NULL).build();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Schema schema = SchemaBuilder.recordType(&quot;r&quot;)
 .unionLong(&quot;myunion&quot;, 7L).withType(SchemaBuilder.INT).build();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;ll create a patch for that while we decide what to do about the optional/nullable API.&lt;/p&gt;</comment>
                            <comment id="13610963" author="tomwhite" created="Fri, 22 Mar 2013 17:29:45 +0000"  >&lt;p&gt;Here&apos;s a new patch which hopefully will address all of Scott&apos;s points.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Add required/optional{Record,Enum,Array,Map,Fixed) methods that enforce type safety for defaults. (Previously the method  was just called optionalType and took an Object).&lt;/li&gt;
	&lt;li&gt;Add unionX methods for all types X to enforce type safety for defaults. To build a field that is a union of a long (default 1) and an int you would say &lt;tt&gt;unionLong(&quot;unionLongWithDefault&quot;, 1L, SchemaBuilder.INT)&lt;/tt&gt;&lt;/li&gt;
	&lt;li&gt;To build union fields without defaults, you would use the unionType method. This covers the &quot;nullable with no default&quot; case above.&lt;/li&gt;
	&lt;li&gt;To cover the remaining &quot;non-nullable with a default&quot; case, I&apos;ve added an &quot;expert&quot; defaultValue() method to the builder, so you can say &lt;tt&gt;requiredBoolean(&quot;requiredBooleanWithDefault&quot;).defaultValue(true)&lt;/tt&gt; and in this way it&apos;s possible to define a field like this, while not making it something most users will stumble across inadvertantly.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13639516" author="scott_carey" created="Tue, 23 Apr 2013 20:01:27 +0000"  >&lt;p&gt;This looks good.  &lt;/p&gt;

&lt;p&gt;Minor nit:  perhaps change defaultValue( val) to default(val) for brevity and alignment with the name of the property in json.&lt;/p&gt;

&lt;p&gt;Minor concern:  How does this API deal with names that are the full name?  &lt;/p&gt;

&lt;p&gt;For example, the two below should be the same:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;SchemaBuilder.recordType(&lt;span class=&quot;code-quote&quot;&gt;&quot;myrecord&quot;&lt;/span&gt;).namespace(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.example&quot;&lt;/span&gt;).build();
SchemaBuilder.recordType(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.example.myrecord&quot;&lt;/span&gt;).build()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But we should document the behavior when mixing the two:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;SchemaBuilder.recordType(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.example1.myrecord&quot;&lt;/span&gt;).namespace(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.example2&quot;&lt;/span&gt;).build();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It would be nice if the builder API behaved consistent with the schema parser when provided similar information:&lt;/p&gt;
{&quot;type&quot;: &quot;record&quot;, &quot;name&quot;:&quot;org.example1.myrecord&quot;, &quot;namespace&quot;:&quot;org.example2&quot;}

&lt;p&gt;In part because if the builder API was in sync with the parser, we could use it in the parser, simplifying the parser and making behavior consistent.&lt;/p&gt;</comment>
                            <comment id="13639554" author="cutting" created="Tue, 23 Apr 2013 20:12:06 +0000"  >&lt;p&gt;&apos;default&apos; is a reserved word in Java and cannot be used as a method name.&lt;/p&gt;</comment>
                            <comment id="13639637" author="tomwhite" created="Tue, 23 Apr 2013 21:10:24 +0000"  >&lt;p&gt;Thanks Scott.&lt;/p&gt;

&lt;p&gt;I added a test for the namespace behaviour. The namespace specified as a part of the name has precedence over any namespace specified by the namespace() call. So your example would have &quot;org.example1&quot; as the namespace, not &quot;org.example2&quot;. I added some javadoc to cover this case.&lt;/p&gt;

&lt;p&gt;I tried the same thing with the schema parser and its behaviour is consistent.&lt;/p&gt;</comment>
                            <comment id="13640961" author="tomwhite" created="Wed, 24 Apr 2013 21:17:06 +0000"  >&lt;p&gt;Scott, are you OK for this to be committed now?&lt;/p&gt;</comment>
                            <comment id="13642247" author="scott_carey" created="Thu, 25 Apr 2013 21:33:04 +0000"  >&lt;p&gt;+1 Yes, looks good!&lt;/p&gt;</comment>
                            <comment id="13644436" author="tomwhite" created="Mon, 29 Apr 2013 11:38:50 +0000"  >&lt;p&gt;I just committed this.&lt;/p&gt;</comment>
                            <comment id="13644503" author="hudson" created="Mon, 29 Apr 2013 14:08:38 +0000"  >&lt;p&gt;Integrated in AvroJava #367 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/367/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/367/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1274&quot; title=&quot;Add a schema builder API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1274&quot;&gt;&lt;del&gt;AVRO-1274&lt;/del&gt;&lt;/a&gt;. Java: Add a schema builder API. (Revision 1476973)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
tomwhite : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilderException.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/test/resources/SchemaBuilder.avsc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13647196" author="scott_carey" created="Thu, 2 May 2013 02:10:43 +0000"  >&lt;p&gt;We may have more work to do here. &lt;/p&gt;

&lt;p&gt;How would you use the builder to do the equivalent of:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; org.apache.avro.Schema SCHEMA$ = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; org.apache.avro.Schema.Parser().parse(
  &lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;record\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;HandshakeRequest\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;namespace\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;org.apache.avro.ipc\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;fields\&quot;:[
    {\&lt;span class=&quot;code-quote&quot;&gt;&quot;name\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;clientHash\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:{\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;fixed\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;name\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;MD5\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;size\&quot;&lt;/span&gt;:16}},
    {\&lt;span class=&quot;code-quote&quot;&gt;&quot;name\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;clientProtocol\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:[\&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;\&quot;&lt;/span&gt;,{\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;string\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;avro.java.string\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;\&quot;&lt;/span&gt;}]},
    {\&lt;span class=&quot;code-quote&quot;&gt;&quot;name\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;serverHash\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;MD5\&quot;&lt;/span&gt;},
    {\&lt;span class=&quot;code-quote&quot;&gt;&quot;name\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;meta\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:[\&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;\&quot;&lt;/span&gt;,{\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;map\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;values\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;bytes\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;avro.java.string\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;\&quot;&lt;/span&gt;}]}
  ]}&quot;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;?&lt;/p&gt;

&lt;p&gt;I am trying to suggest that we replace literal strings with the builder in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1316&quot; title=&quot;IDL code-generation generates too-long literals for very large schemas&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1316&quot;&gt;&lt;del&gt;AVRO-1316&lt;/del&gt;&lt;/a&gt; but cannot seem to repliate the above with the builder.&lt;/p&gt;

&lt;p&gt;The &quot;clientProtocol&quot; and &quot;meta&quot; fields are the problem.  It does not seem possible to create a union of null and &apos;more&apos; without a default.&lt;/p&gt;

&lt;p&gt;Additionally, &quot;unionType&quot; is confusing.  Is this how it would be done?  If so, I do not see how to add types to the union if I start with:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;unionType(&lt;span class=&quot;code-quote&quot;&gt;&quot;clientProtocol&quot;&lt;/span&gt;, SchemaBuilder.NULL)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then how do I add extra types?  Or is the type passed in expected to &lt;em&gt;be&lt;/em&gt; a union?  if so the field should be named unionSchema and the javadoc needs to be clear.&lt;/p&gt;

&lt;p&gt;This builder API makes it hard to create union fields without defaults.  Perhaps it is simply a documentation issue and the doc for unionType() needs an example.  &lt;/p&gt;

&lt;p&gt;Should we open a new ticket for these concerns or re-open this one?  I suspect it is largely documentation but am not sure.&lt;/p&gt;</comment>
                            <comment id="13647221" author="scott_carey" created="Thu, 2 May 2013 02:57:57 +0000"  >&lt;p&gt;I think the answer to my question would be:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; org.apache.avro.Schema SCHEMA$;
  &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; {
    SCHEMA$ = SchemaBuilder
      .recordType(&lt;span class=&quot;code-quote&quot;&gt;&quot;HandshakeRequest&quot;&lt;/span&gt;)
      .namespace(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.ipc&quot;&lt;/span&gt;)
      .requiredFixed(&lt;span class=&quot;code-quote&quot;&gt;&quot;clientHash&quot;&lt;/span&gt;, MD5.SCHEMA$)
      .unionType(&lt;span class=&quot;code-quote&quot;&gt;&quot;clientProtocol&quot;&lt;/span&gt;, SchemaBuilder.unionType(
          SchemaBuilder.NULL,
          SchemaBuilder.STRING)
          .build())
          .addFieldProp(&lt;span class=&quot;code-quote&quot;&gt;&quot;avro.java.string&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&quot;&lt;/span&gt;)
      .requiredFixed(&lt;span class=&quot;code-quote&quot;&gt;&quot;serverHash&quot;&lt;/span&gt;, MD5.SCHEMA$)
      .unionType(&lt;span class=&quot;code-quote&quot;&gt;&quot;meta&quot;&lt;/span&gt;, SchemaBuilder.unionType(
          SchemaBuilder.NULL,
          SchemaBuilder.mapType(SchemaBuilder.BYTES)
            .addFieldProp(&lt;span class=&quot;code-quote&quot;&gt;&quot;avro.java.string&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&quot;&lt;/span&gt;)
            .build())
          .build())
      .build();
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but I am not sure.  Also &quot;addFieldProp()&quot; does not exist.&lt;/p&gt;

&lt;p&gt;What is odd is that there are two unionType() methods, one takes varargs and the other does not.  I suspect that the intention was for both to use varargs so that the nested union building is not required by the user.&lt;/p&gt;

&lt;p&gt;It would be much simpler if unions without defaults had a shortcut:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; org.apache.avro.Schema SCHEMA$;
  &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; {
    SCHEMA$ = SchemaBuilder
      .recordType(&lt;span class=&quot;code-quote&quot;&gt;&quot;HandshakeRequest&quot;&lt;/span&gt;)
      .namespace(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.ipc&quot;&lt;/span&gt;)
      .requiredFixed(&lt;span class=&quot;code-quote&quot;&gt;&quot;clientHash&quot;&lt;/span&gt;, MD5.SCHEMA$)
      .nullableString(&lt;span class=&quot;code-quote&quot;&gt;&quot;clientProtocol&quot;&lt;/span&gt;)
         .addFieldProp(&lt;span class=&quot;code-quote&quot;&gt;&quot;avro.java.string&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&quot;&lt;/span&gt;)
      .requiredFixed(&lt;span class=&quot;code-quote&quot;&gt;&quot;serverHash&quot;&lt;/span&gt;, MD5.SCHEMA$)
      .nullableMap(SchemaBuilder.BYTES)
        .addFieldProp(&lt;span class=&quot;code-quote&quot;&gt;&quot;avro.java.string&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&quot;&lt;/span&gt;)
      .build()
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Building unions in general feels clunky as well since you have to break chaining and use SchemaBuilder again.  Instead of taking a varargs list of schemas in the union, the type returned could be a UnionBuilder.  So instead of:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; org.apache.avro.Schema SCHEMA$;
  &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; {
    SCHEMA$ = SchemaBuilder
      .recordType(&lt;span class=&quot;code-quote&quot;&gt;&quot;Test&quot;&lt;/span&gt;)
      .namespace(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro&quot;&lt;/span&gt;)
      .unionString(&lt;span class=&quot;code-quote&quot;&gt;&quot;stringField&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;defaultVal&quot;&lt;/span&gt;, 
         SchemaBuilder.INT,
         SchemaBuilder.arrayType(SchemaBuilder.INT).build()
         SchemaBuilder.mapType(SchemaBuilder.unionType(
           SchemaBuilder.INT, SchemaBuilderLONG)
           )
        )
      .build()
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we could write something more like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; org.apache.avro.Schema SCHEMA$;
  &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; {
    SCHEMA$ = SchemaBuilder
      .recordType(&lt;span class=&quot;code-quote&quot;&gt;&quot;Test&quot;&lt;/span&gt;)
      .namespace(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro&quot;&lt;/span&gt;)
      .unionString(&lt;span class=&quot;code-quote&quot;&gt;&quot;stringFieldName&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;defaultVal&quot;&lt;/span&gt;)
         .andInt()
         .andArrayOf().&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;()
         .andMapOf().unionInt().andLong()
      .build()
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13647237" author="mhuff" created="Thu, 2 May 2013 03:29:57 +0000"  >&lt;p&gt;1316 may require the use of the SchemaBuilder class in order to resolve the issue of &apos;string constant too long&apos;&lt;/p&gt;</comment>
                            <comment id="13647360" author="scott_carey" created="Thu, 2 May 2013 07:14:12 +0000"  >&lt;p&gt;I am working on a modification to the builder that would make its use look like a json schema.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; org.apache.avro.Schema SCHEMA$ = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; org.apache.avro.Schema.Parser().parse(
  &lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;record\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;HandshakeRequest\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;namespace\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;org.apache.avro.ipc\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;fields\&quot;:[
    {\&lt;span class=&quot;code-quote&quot;&gt;&quot;name\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;clientHash\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:{\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;fixed\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;name\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;MD5\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;size\&quot;&lt;/span&gt;:16}},
    {\&lt;span class=&quot;code-quote&quot;&gt;&quot;name\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;clientProtocol\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:[\&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;\&quot;&lt;/span&gt;,{\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;string\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;avro.java.string\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;\&quot;&lt;/span&gt;}]},
    {\&lt;span class=&quot;code-quote&quot;&gt;&quot;name\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;serverHash\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;MD5\&quot;&lt;/span&gt;},
    {\&lt;span class=&quot;code-quote&quot;&gt;&quot;name\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;meta\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:[\&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;\&quot;&lt;/span&gt;,{\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;map\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;values\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;bytes\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;avro.java.string\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;\&quot;&lt;/span&gt;}]}
  ]}&quot;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;becomes similar to:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; org.apache.avro.Schema SCHEMA$ = SchemaBuilder
    .typeRecord(&lt;span class=&quot;code-quote&quot;&gt;&quot;HandshakeRequest&quot;&lt;/span&gt;).namespaceInherited(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.ipc&quot;&lt;/span&gt;).fields()&lt;span class=&quot;code-comment&quot;&gt;// optional namespace inheritance
&lt;/span&gt;      .typeFixed(&lt;span class=&quot;code-quote&quot;&gt;&quot;clientHash&quot;&lt;/span&gt;, MD5.SCHEMA$).field()   &lt;span class=&quot;code-comment&quot;&gt;// or typeFixed(&lt;span class=&quot;code-quote&quot;&gt;&quot;clientHash&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;MD5&quot;&lt;/span&gt;, 16)
&lt;/span&gt;      .typeUnion(&lt;span class=&quot;code-quote&quot;&gt;&quot;clientProtocol&quot;&lt;/span&gt;).ofNull().andString().withProp(&lt;span class=&quot;code-quote&quot;&gt;&quot;avro.java.string&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&quot;&lt;/span&gt;).field()
      .typeFixed(&lt;span class=&quot;code-quote&quot;&gt;&quot;serverHash&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;MD5&quot;&lt;/span&gt;).field() &lt;span class=&quot;code-comment&quot;&gt;// uses reference to already defined MD5
&lt;/span&gt;      .typeUnion(&lt;span class=&quot;code-quote&quot;&gt;&quot;meta&quot;&lt;/span&gt;).ofNull().andMap().withProp(&lt;span class=&quot;code-quote&quot;&gt;&quot;avro.java.string&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&quot;&lt;/span&gt;).valuesBytes().field()
    .record();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we can also have shortcuts as before, for example&lt;br/&gt;
optionalInt(&quot;x&quot;, -1) as a shortcut for typeUnion(&quot;x&quot;).ofInt(-1).andNull()&lt;/p&gt;

&lt;p&gt;nullableInt(&quot;maybe&quot;) as a shortcut for typeUnion(&quot;maybe&quot;).ofNull(null).andInt()&lt;/p&gt;

&lt;p&gt;requiredInt(&quot;yes&quot;) may not be necessary, its shortcut would be typeInt(&quot;yes&quot;).field();&lt;/p&gt;

&lt;p&gt;It should be straightforward to implement the whole Schema.Parser with the above (and simplify the parser), which makes it easy to test very thoroughly; there is an intentional 1:1 mapping between the parser, spec, and the builder.&lt;/p&gt;</comment>
                            <comment id="13647629" author="tomwhite" created="Thu, 2 May 2013 15:31:49 +0000"  >&lt;p&gt;I&apos;m slightly reluctant to add lots of overloaded methods (as I mentioned above), since it makes the builder much harder to use in an IDE with autocompletion. Will the user be able to see the difference between optionalInt and nullableInt? Or requiredInt and typeInt?&lt;/p&gt;

&lt;p&gt;A way to specify properties is missing so we should add that. Let&apos;s discuss this and other changes in new JIRAs.&lt;/p&gt;</comment>
                            <comment id="13648048" author="scott_carey" created="Fri, 3 May 2013 00:15:46 +0000"  >&lt;p&gt;I am planning on constraining the lexical scope via many cascaded builders / assemblers so that the list to auto-complete at any time is small.&lt;/p&gt;

&lt;p&gt;I&apos;ll make a new JIRA for my proposed changes.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12637541">AVRO-1275</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12645723">AVRO-1316</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12580135" name="AVRO-1274.patch" size="63500" author="tomwhite" created="Tue, 23 Apr 2013 21:10:24 +0000"/>
                            <attachment id="12575046" name="AVRO-1274.patch" size="62198" author="tomwhite" created="Fri, 22 Mar 2013 17:29:45 +0000"/>
                            <attachment id="12574140" name="AVRO-1274.patch" size="46040" author="tomwhite" created="Mon, 18 Mar 2013 13:09:17 +0000"/>
                            <attachment id="12573856" name="AVRO-1274.patch" size="40905" author="tomwhite" created="Fri, 15 Mar 2013 10:23:02 +0000"/>
                            <attachment id="12573735" name="AVRO-1274.patch" size="30089" author="tomwhite" created="Thu, 14 Mar 2013 17:14:30 +0000"/>
                            <attachment id="12573537" name="AVRO-1274.patch" size="19917" author="tomwhite" created="Wed, 13 Mar 2013 17:29:45 +0000"/>
                            <attachment id="12573348" name="AVRO-1274.patch" size="15397" author="tomwhite" created="Tue, 12 Mar 2013 15:29:20 +0000"/>
                            <attachment id="12573774" name="TestDefaults.patch" size="3441" author="tomwhite" created="Thu, 14 Mar 2013 21:21:29 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 13 Mar 2013 05:20:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>317080</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 38 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ipof:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>317421</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
