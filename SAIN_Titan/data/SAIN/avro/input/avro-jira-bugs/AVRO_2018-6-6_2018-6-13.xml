<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:26:48 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2018-6-6+AND+created+%3C%3D+2018-6-13+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="2" total="2"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-2187] Add RPC Streaming constructs/keywords to Avro IDL or schema</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2187</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Motivation:&lt;/p&gt;

&lt;p&gt;We recently added support for transporting Avro serialization and IDL over gRPC for Java. In order to use the streaming features of gRPC or any other transport that supports streaming we need to be able to specify them IDL and schema.&lt;/p&gt;

&lt;p&gt;Details:&lt;/p&gt;

&lt;p&gt;Currently, gRPC supports 3 types of streaming calls:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;server streaming (server can send multiple responses for a single request)&lt;/li&gt;
	&lt;li&gt;client streaming (client can multiple requests and server sends a single response)&lt;/li&gt;
	&lt;li&gt;bi-directional streaming call (on going rpc with multiple requests&#160;and responses)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;We would want a way to represent these types on calls in Avro&apos;s IDL similar to one-way calls using a keywords. Usually in gRPC with other IDLs a streaming request or response is repeated payload of same type. For client streaming and bi-directional streaming it would be simpler to have a single request argument when representing&#160;their type in callbacks.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13164830">AVRO-2187</key>
            <summary>Add RPC Streaming constructs/keywords to Avro IDL or schema</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="srujann">Srujan Narkedamalli</reporter>
                        <labels>
                    </labels>
                <created>Fri, 8 Jun 2018 00:58:56 +0000</created>
                <updated>Sun, 30 Dec 2018 05:23:36 +0000</updated>
                                                                            <component>spec</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="16505579" author="srujann" created="Fri, 8 Jun 2018 01:03:41 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; Could you please share your thoughts on this?&lt;/p&gt;</comment>
                            <comment id="16506406" author="cutting" created="Fri, 8 Jun 2018 18:19:23 +0000"  >&lt;p&gt;There&apos;s already some streaming support.&#160; Messages can be declared&#160;one-way and Java&#160;supports an asynchronous calling API.&#160; I think this&#160;mostly supports what you&apos;re calling client streaming.&#160; Server &amp;amp; bi-directional streaming can be done with two protocols, one client-&amp;gt;server and a second server-&amp;gt;client (e.g., e.g.,&#160;&lt;a href=&quot;https://github.com/apache/avro/tree/master/share/schemas/org/apache/avro/mapred/tether&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/tree/master/share/schemas/org/apache/avro/mapred/tether&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;How&#160;do you specifically propose we improve this?&#160; What additional keywords&#160;should be added?&#160; Can&#160;this be done back-compatibly?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="16530314" author="srujann" created="Mon, 2 Jul 2018 19:06:20 +0000"  >&lt;p&gt;Thanks for your response and very sorry for the delay in getting back.&lt;/p&gt;

&lt;p&gt;Avro&apos;s one-way is quite useful and unique, but the streaming that I was referring for to is a bit different and more in line with what gRPC offers.&lt;/p&gt;

&lt;p&gt;What I mentioned as server streaming rpc is a single rpc request by client that yeilds a repeated response from server (of defined type). An example of this be a request by client for fetching a list of files from a storage like s3 and each of file is sent as response of for rpc request. Similarly for client-streaming rpc, multiple requests (of defined type) can be sent for single requests and sever sends back a single response. In bi-directional streaming both multiple requests and responses can be sent but all in context of single RPC. The difference/improvement from one-way calls is being able to receive multiple responses or send multiple requests in context of a single RPC.&lt;/p&gt;

&lt;p&gt;In order to use such streaming calls provided by gRPC in Avro&apos;s IDL, we are currently annotating the calls with our custom annotations and modified the velocity templates for stub code generation for these. Instead of these annotations we would prefer to have this information specified as a Avro keyword to make sure its compatible for different languages and info is in the schema.&lt;/p&gt;

&lt;p&gt;One way I see for this change to be backward compatible is, every rpc marked as streaming yeilds two rpcs: regular rpc call and in addition a streaming call with call name appended streaming probably and has the property streaming. Generating the additional streaming rpc could be an option.&lt;/p&gt;

&lt;p&gt;Our avro avdl file for a server streaming RPC looks like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@(io.grpc.ServerStreaming)
File searchByNameAndStreamFiles(string name);

&lt;span class=&quot;code-comment&quot;&gt;//our custom modified generated code is as below, (StreamObserver is gRPC API):
&lt;/span&gt;void searchByNameAndStreamFiles(string name, StreamObserver&amp;lt;File&amp;gt; name); &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;We would prefer to have the above schema be represented as:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
File searchByNameAndStreamFiles(string name) serverstreaming;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For comparison: gRPC&apos;s preferred IDL- Protobuf, represent a similar server streaming call as:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
rpc searchByNameAndStreamFiles (SearchRequest) returns (stream File) {}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="16549756" author="srujann" created="Thu, 19 Jul 2018 19:49:28 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; do you think the&#160;proposal in&#160;previous comment is feasible?&lt;/p&gt;</comment>
                            <comment id="16551197" author="cutting" created="Fri, 20 Jul 2018 20:04:39 +0000"  >&lt;p&gt;Overall this sounds reasonable.&lt;/p&gt;

&lt;p&gt;We might use an @stream annotation in IDL instead?&lt;/p&gt;

&lt;p&gt;Also, shouldn&apos;t the non-streaming API generated return a list of the full results?&lt;/p&gt;

&lt;p&gt;So, if the IDL is something like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@stream File search(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; query);&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then the generated Java APIs might be something like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
List&amp;lt;File&amp;gt; search(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; query); &lt;span class=&quot;code-comment&quot;&gt;// synchronous
&lt;/span&gt;void search(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; query, StreamObserver&amp;lt;File&amp;gt;);  &lt;span class=&quot;code-comment&quot;&gt;// streaming&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This&#160;is to keep them semantically equivalent.&#160; Does that make sense, or am I missing something?&lt;/p&gt;</comment>
                            <comment id="16551438" author="srujann" created="Fri, 20 Jul 2018 23:51:52 +0000"  >&lt;p&gt;Returning full list of results for non streaming API looks correct. &lt;/p&gt;

&lt;p&gt;Regarding @stream annotation, is it possible to do code generation using it in languages other than Java in Avro? &lt;/p&gt;

&lt;p&gt;Also, there was a mistake in the example IDL of how we use it today. The annotation is wrapped as @javaAnnotation(&quot;io.grpc.ServerStreaming&quot;) field for easily working with current compiler. Due to this we were concerned about extending streaming stubs/generated with avro in other languages. &lt;/p&gt;

&lt;p&gt;With @stream annotation, would the IDL for a client streaming request look as below? &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; upload(@stream File file);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="16553246" author="cutting" created="Mon, 23 Jul 2018 18:39:22 +0000"  >&lt;p&gt;The IDL compiler generates an Avro protocol as json, so one&#160;can generate code for other languages from that.&#160; Avro&apos;s protocol-to-java compiler uses templates which&#160;can theoretically be replaced with&#160;templates for a non-Java language.&lt;/p&gt;

&lt;p&gt;I imagined that the&#160;@stream IDL annotation would become a boolean-valued json property on the message.&#160; We could also parse this annotation on parameters and add a similar property to protocol requests.&lt;/p&gt;</comment>
                            <comment id="16553553" author="srujann" created="Mon, 23 Jul 2018 23:31:51 +0000"  >&lt;p&gt;If we are using boolean property on the message, it is actually indicating only whether the response is streaming type. So we could have this property as &quot;reponseStreaming&quot;. The info regarding whether request is streaming type should also be a message level boolean property (&quot;requestStreaming&quot;) rather than field in protocol request to avoid confusion .&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 8 Jun 2018 18:19:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            25 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3un73:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-2188] SpecificDatumReader Corrupts Bytes Field When Using Next(R)</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2188</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I am loading large sets of data into Avro files and cataloging them for quick access. My code for the load looks a bit like this.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
DataFileWriter&amp;lt;MyData&amp;gt; writer;
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; offset = writer.sync();
writer.append(data);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;When I am ready to read the data, that was the code that I initially used.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
SpecificDatumReader&amp;lt;MyDat&amp;gt; reader;
reader.sync(offset);

&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (reader.hasNext()) {
  MyData data = reader.next();
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (matchesId(data)) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; data;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;This worked for the majority of cases. But a few of them had a problem with the call to sync. In these cases a call to &quot;reader.tell()&quot; indicated that the sync was actually PAST the offset. This meant that I would never retrieve the file that I wanted.&lt;/p&gt;

&lt;p&gt;In order to work around this issue, I implemented a simple reversal algorithm which works roughly like this.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
SpecificDatumReader&amp;lt;MyDat&amp;gt; reader;
reader.sync(offset);

&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; reversal = 10;
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (reader.tell() &amp;gt;= offset) {
&#160; reader.sync(offset - reversal);
&#160; reversal *= 2;
}

&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (reader.hasNext()) {
&#160; MyData data = reader.next();
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (matchesId(data)) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; data;
}&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;This works correctly in, what I believe, are all cases. Now I am SURE that I am doing something wrong, since this process seems like an extremely convoluted way to retrieve data. However, the issue is what happened next.&lt;/p&gt;

&lt;p&gt;To see if performance could be improved, I changed my last loop to this.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
MyData data;
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (reader.hasNext()) {
&#160; data = reader.next(data);
&#160; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (matchesId(data)) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; data;
}&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;My schema has several string fields and a contents field which is bytes. It looks something like this.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
{
&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;the title&quot;&lt;/span&gt;,
&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;contents&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;[base 64 file contents]&quot;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;Once I made the change for performance, I started seeing data returned like this.&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
{
&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;the title&quot;&lt;/span&gt;,
&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;contents&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;[file contents][fragment of contents from previous file]&quot;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;I&apos;m thinking that this is because the byte array is being reused. Any ideas on this?&lt;/p&gt;</description>
                <environment></environment>
        <key id="13165631">AVRO-2188</key>
            <summary>SpecificDatumReader Corrupts Bytes Field When Using Next(R)</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="dgrahn">Dan Grahn</reporter>
                        <labels>
                    </labels>
                <created>Tue, 12 Jun 2018 17:32:59 +0000</created>
                <updated>Tue, 12 Jun 2018 17:32:59 +0000</updated>
                                            <version>1.8.2</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            31 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3us4v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>
