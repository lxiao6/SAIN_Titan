<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:25:34 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2017-9-20+AND+created+%3C%3D+2017-9-27+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="4" total="4"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-2079] Add ability to use Java 8 date/time types instead of Joda time.</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2079</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Currently, for the date/time related logical types, we are generating Joda date/time objects. Since we&apos;ve moved to Java-8 (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2043&quot; title=&quot;Move to java8&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2043&quot;&gt;&lt;del&gt;AVRO-2043&lt;/del&gt;&lt;/a&gt;) it seems logical to also provide the possibility to generate &lt;tt&gt;java.time.*&lt;/tt&gt; date/time objects instead of the Joda time variants.&lt;/p&gt;

&lt;p&gt;I propose to make this is a switch in &lt;tt&gt;SpecificCompiler.java&lt;/tt&gt; which will default to Joda (I think), but can be set to generate the Java 8 versions.&lt;/p&gt;

&lt;p&gt;(I&apos;m currently trying to run through the code to see if I can make it work.)&lt;/p&gt;</description>
                <environment></environment>
        <key id="13103577">AVRO-2079</key>
            <summary>Add ability to use Java 8 date/time types instead of Joda time.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="pvorb">Paul Vorbach</assignee>
                                    <reporter username="aukevanleeuwen">Auke van Leeuwen</reporter>
                        <labels>
                            <label>patch-available</label>
                    </labels>
                <created>Wed, 20 Sep 2017 11:40:32 +0000</created>
                <updated>Tue, 2 Oct 2018 21:22:37 +0000</updated>
                            <resolved>Tue, 2 Oct 2018 21:22:37 +0000</resolved>
                                    <version>1.8.2</version>
                                    <fixVersion>1.9.0</fixVersion>
                                    <component>java</component>
                    <component>logical types</component>
                        <due></due>
                            <votes>8</votes>
                                    <watches>15</watches>
                                                                <comments>
                            <comment id="16176469" author="githubbot" created="Fri, 22 Sep 2017 14:04:38 +0000"  >&lt;p&gt;GitHub user aukevanleeuwen opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/248&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/248&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes&lt;/p&gt;

&lt;p&gt;    Some remarks:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;I&apos;ve added the type (either Joda or Java8) to the constructor of the `SpecificCompiler`. This mainly because it affects the state of the compiler (i.e. it would add/remove converters based on this attribute) and I would rather not do this in a setter.&lt;/li&gt;
	&lt;li&gt;I have renamed the original class `TimeConversions` to `JodaTimeConversions` for clarity, but it clutters the changeset a bit. I can revert that If needed.&lt;/li&gt;
	&lt;li&gt;I&apos;ve generated `lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithJava8LogicalTypes.java` with the new compiler switch `-dateTimeLogicalType java8` and created tests for compatibility witgh the already existing generated classes based on the Joda time.&lt;/li&gt;
	&lt;li&gt;I&apos;m defaulting to Joda time for compatibility reasons. In both Maven and the command line generation tool you have the ability to override that default.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    Let me know if there&apos;s something I&apos;m missing or am overlooking functionally.&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/aukevanleeuwen/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/aukevanleeuwen/avro&lt;/a&gt; use-java8-time&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/248.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/248.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #248&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit 78aae1395cc17e47d73f7595611622535ccc90d3&lt;br/&gt;
Author: Auke van Leeuwen &amp;lt;avanleeuwen@schubergphilis.com&amp;gt;&lt;br/&gt;
Date:   2017-09-21T08:01:48Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="16205344" author="howellbridger" created="Sun, 15 Oct 2017 23:10:17 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=aukevanleeuwen&quot; class=&quot;user-hover&quot; rel=&quot;aukevanleeuwen&quot;&gt;Auke van Leeuwen&lt;/a&gt;: I&apos;ve looked over your PR and left a few nits a bit ago (under the username &quot;Kuroshii&quot;).&lt;/p&gt;

&lt;p&gt;Upon revisiting, I have some higher-level thoughts:&lt;br/&gt;
1. It seems weird how, after this PR, the configuration for &lt;tt&gt;SpecificCompiler&lt;/tt&gt; would be mixed between a constructor parameter and setters. If we&apos;re going to take this approach, my preference would be to isolate all the compiler configuration into it&apos;s own immutable &lt;tt&gt;SpecificCompilerOptions&lt;/tt&gt; class (and associated builder) that&apos;s set once in the constructor. Not that you should refactor everything now, but if you&apos;re lobbying for switching to a different convention, we should create a separate ticket and deal with it there.&lt;/p&gt;

&lt;p&gt;2. It&apos;s nice that you have a lot of tests to be sure that these time conversions won&apos;t break later, but I dislike how we&apos;re expanding the amount that we have to check that the compiler output precisely matches predetermined files. This is brittle and makes much harder to change &lt;tt&gt;SpecificCompiler&lt;/tt&gt; for unrelated changes. Worst case, when we add new options, we start considering every combination of compiler flags and eventually end up with an explosion of brittle test cases. I&apos;m not sure of a great solution to this yet, but just something I&apos;d like to keep in mind.&lt;/p&gt;

&lt;p&gt;3. I would have liked this to handle this situation in a more general way.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Set a particular compiler option&lt;/li&gt;
	&lt;li&gt;Setting that option adds those conversions to the &lt;tt&gt;SpecificCompiler&lt;/tt&gt; class which in turn makes those conversions generally available to the generated code&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This last point might seem minor, but I think it would do a lot enable future configuration (e.g. users being able to add their own third-party conversions to generated classes without needing the &lt;tt&gt;SpecificCompiler&lt;/tt&gt; to have already been prepared for those cases).&lt;/p&gt;

&lt;p&gt;Also, I&apos;d appreciate it if a committer could have a look at these changes soon. This topic is very significant to the way I use avro, and I&apos;m not very familiar with all the particular usages of &lt;tt&gt;SpecificCompiler&lt;/tt&gt;. &lt;/p&gt;</comment>
                            <comment id="16261981" author="abatkin" created="Wed, 22 Nov 2017 05:11:48 +0000"  >&lt;p&gt;This isn&apos;t a &quot;me too&quot; but I think that this work should be considered a high-priority, and here&apos;s why: Currently, if you use any logical types, all (Specific) generated classes will contain ALL of the built-in conversions, which include DATE_CONVERSION, TIME_CONVERSION and TIMESTAMP_CONVERSION. This means you MUST include JodaTime on your classpath or you will fail with a ClassNotFoundException (org.jora.time.ReadablePartial).&lt;/p&gt;

&lt;p&gt;Users of the Decimal logical type are out of luck, unless they want to include Joda Time.&lt;/p&gt;

&lt;p&gt;I can open a separate Jira, but that isn&apos;t needed, if we will see this work in the next release. Plus, any fix would likely conflict with this issue, and I&apos;d rather not cause confusion if that isn&apos;t necessary.&lt;/p&gt;</comment>
                            <comment id="16401600" author="githubbot" created="Fri, 16 Mar 2018 08:38:27 +0000"  >&lt;p&gt;jorgecara commented on issue #248: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/248#issuecomment-373641745&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/248#issuecomment-373641745&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   This request seems like a good contribution to the library. Any news on when could this be released?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16402111" author="cutting" created="Fri, 16 Mar 2018 16:13:09 +0000"  >&lt;p&gt;There still seems to be some debate on the best way to implement this.&#160; We can commit something once there&apos;s consensus.&lt;/p&gt;

&lt;p&gt;The more back-compatible this is, the easier it will be to include in releases.&#160; Currently this renames an existing class, which is not back-compatible.&#160; As such, it thus&#160;could not be included in a minor, bugfix release.&#160; The patch is also out of date too.&lt;/p&gt;</comment>
                            <comment id="16435248" author="githubbot" created="Thu, 12 Apr 2018 09:37:09 +0000"  >&lt;p&gt;antonomoon commented on issue #248: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/248#issuecomment-380741202&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/248#issuecomment-380741202&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Bump!&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16435263" author="githubbot" created="Thu, 12 Apr 2018 09:46:32 +0000"  >&lt;p&gt;atlantech commented on issue #248: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/248#issuecomment-380743833&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/248#issuecomment-380743833&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Good improvement. Why still not merged?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16463788" author="githubbot" created="Fri, 4 May 2018 12:07:20 +0000"  >&lt;p&gt;pvorb opened a new pull request #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   As there was no progress on #248 for the past few months, I went ahead and resolved the merge conflicts of that PR and also fixed the remarks from @Kuroshii.&lt;/p&gt;

&lt;p&gt;   Here&apos;s a brief overview of what I&apos;ve changed:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Reorder imports in TestJava8TimeConversions.java&lt;/li&gt;
	&lt;li&gt;Directly cast epochDays to int&lt;/li&gt;
	&lt;li&gt;Directly cast millis to int&lt;/li&gt;
	&lt;li&gt;Explicitly format java8 and joda time dates in test&lt;/li&gt;
	&lt;li&gt;Rename DateTimeLogicalTypeType to DateTimeLogicalTypeImplementation&lt;/li&gt;
	&lt;li&gt;Refactor registration of conversions&lt;/li&gt;
	&lt;li&gt;Make DateTimeLigicalTypeImplementation field final&lt;/li&gt;
	&lt;li&gt;Use parent POM version in Maven plugin tests&lt;/li&gt;
	&lt;li&gt;Log warning message about unknown parameter values&lt;/li&gt;
	&lt;li&gt;Remove unused imports&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   I would also suggest to rename the enum value `JAVA8` and all of its uses to `JSR310` because that&apos;s more specific to the `java.time.*` APIs introduced in Java 8 (see &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=310&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://jcp.org/en/jsr/detail?id=310&lt;/a&gt;). I can add that change if you agree.&lt;/p&gt;

&lt;p&gt;   @Kuroshii I would appreciate if you could review this PR again, so maybe we&apos;ll have JSR-310 support in the next Avro release. Thanks!&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16466663" author="githubbot" created="Tue, 8 May 2018 00:21:38 +0000"  >&lt;p&gt;lukejackson commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-387245804&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-387245804&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Awesome, thanks @pvorb. I was not far off doing the same, as I am also very keen to see this feature added.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16466666" author="githubbot" created="Tue, 8 May 2018 00:23:33 +0000"  >&lt;p&gt;lukejackson commented on a change in pull request #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#discussion_r186588233&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#discussion_r186588233&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/data/JodaTimeConversions.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -28,7 +28,7 @@&lt;br/&gt;
 import org.joda.time.LocalDate;&lt;br/&gt;
 import org.joda.time.LocalTime;&lt;/p&gt;

&lt;p&gt;-public class TimeConversions {&lt;br/&gt;
+public class JodaTimeConversions {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   I think it makes sense to rename this class, however in &lt;span class=&quot;error&quot;&gt;&amp;#91;this comment&amp;#93;&lt;/span&gt;(&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079?focusedCommentId=16402111&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16402111&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-2079?focusedCommentId=16402111&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16402111&lt;/a&gt;) Doug Cutting states:&lt;/p&gt;

&lt;p&gt;   &amp;gt; The more back-compatible this is, the easier it will be to include in releases.  Currently this renames an existing class, which is not back-compatible.  As such, it thus could not be included in a minor, bugfix release.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16466668" author="githubbot" created="Tue, 8 May 2018 00:27:02 +0000"  >&lt;p&gt;lukejackson commented on a change in pull request #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#discussion_r186588681&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#discussion_r186588681&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -225,6 +268,14 @@ public void setEnableDecimalLogicalType(boolean enableDecimalLogicalType) &lt;/p&gt;
{
     this.enableDecimalLogicalType = enableDecimalLogicalType;
   }

&lt;p&gt;+  public boolean useJodaForDateTimeLogicalTypes() {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   any reason not to expose the enum here? the two getters are not independent, and the interface essentially exposes four possible states when there are only two.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16466669" author="githubbot" created="Tue, 8 May 2018 00:29:32 +0000"  >&lt;p&gt;lukejackson commented on a change in pull request #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#discussion_r186588984&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#discussion_r186588984&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/maven-plugin/src/test/resources/unit/idl/pom-java8.xml&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -0,0 +1,69 @@&lt;br/&gt;
+&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
+&amp;lt;!--&lt;br/&gt;
+   Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
+   contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
+   this work for additional information regarding copyright ownership.&lt;br/&gt;
+   The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
+   (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
+   the License.  You may obtain a copy of the License at&lt;br/&gt;
+&lt;br/&gt;
+       &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+&lt;br/&gt;
+   Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+   See the License for the specific language governing permissions and&lt;br/&gt;
+   limitations under the License.&lt;br/&gt;
+--&amp;gt;&lt;br/&gt;
+&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br/&gt;
+         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 &lt;a href=&quot;http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/xsd/maven-4.0.0.xsd&lt;/a&gt;&quot;&amp;gt;&lt;br/&gt;
+  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;parent&amp;gt;&lt;br/&gt;
+    &amp;lt;artifactId&amp;gt;avro-parent&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+    &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+    &amp;lt;version&amp;gt;1.9.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;relativePath&amp;gt;../../../../../../../../../&amp;lt;/relativePath&amp;gt;&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   relativePath should point to a specific pom.xml file, rather than a directory, here and in other pom.xml files touched by this change.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16466670" author="githubbot" created="Tue, 8 May 2018 00:30:06 +0000"  >&lt;p&gt;lukejackson commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-387247072&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-387247072&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   +1 on renaming to JSR310. (Note I am not an Avro committer).&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16466671" author="githubbot" created="Tue, 8 May 2018 00:30:35 +0000"  >&lt;p&gt;lukejackson commented on a change in pull request #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#discussion_r186588233&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#discussion_r186588233&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/data/JodaTimeConversions.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -28,7 +28,7 @@&lt;br/&gt;
 import org.joda.time.LocalDate;&lt;br/&gt;
 import org.joda.time.LocalTime;&lt;/p&gt;

&lt;p&gt;-public class TimeConversions {&lt;br/&gt;
+public class JodaTimeConversions {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   I think it makes sense to rename this class, however in &lt;span class=&quot;error&quot;&gt;&amp;#91;this comment&amp;#93;&lt;/span&gt;(&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079?focusedCommentId=16402111&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16402111&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-2079?focusedCommentId=16402111&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16402111&lt;/a&gt;) Doug Cutting states:&lt;/p&gt;

&lt;p&gt;   &amp;gt; The more back-compatible this is, the easier it will be to include in releases.  Currently this renames an existing class, which is not back-compatible.  As such, it thus could not be included in a minor, bugfix release.&lt;/p&gt;

&lt;p&gt;   I assume he is referring to this class when he says this.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16467362" author="githubbot" created="Tue, 8 May 2018 12:37:46 +0000"  >&lt;p&gt;lukejackson commented on a change in pull request #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#discussion_r186711907&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#discussion_r186711907&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -163,9 +163,9 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
 #if ($this.hasLogicalTypeField($schema))&lt;br/&gt;
   protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();&lt;br/&gt;
 #if ($this.useJodaForDateTimeLogicalTypes())&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   i think this needs to be refactored to use the new getDateTimeLogicalTypeImplementation() method&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16467658" author="githubbot" created="Tue, 8 May 2018 16:35:44 +0000"  >&lt;p&gt;pvorb commented on a change in pull request #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#discussion_r186790457&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#discussion_r186790457&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -163,9 +163,9 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
 #if ($this.hasLogicalTypeField($schema))&lt;br/&gt;
   protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();&lt;br/&gt;
 #if ($this.useJodaForDateTimeLogicalTypes())&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Good spot!&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16477752" author="githubbot" created="Wed, 16 May 2018 17:14:15 +0000"  >&lt;p&gt;jcustenborder commented on issue #248: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/248#issuecomment-389596598&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/248#issuecomment-389596598&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @aukevanleeuwen @lukejackson @Kuroshii Is this pull request dead? Do you need someone to pick it up?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16477759" author="githubbot" created="Wed, 16 May 2018 17:17:02 +0000"  >&lt;p&gt;jcustenborder commented on issue #248: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/248#issuecomment-389597424&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/248#issuecomment-389597424&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   It looks like there is another pull as well. Check out #248 &lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16478632" author="githubbot" created="Thu, 17 May 2018 06:59:34 +0000"  >&lt;p&gt;pvorb commented on issue #248: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/248#issuecomment-389765161&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/248#issuecomment-389765161&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @jcustenborder Did you mean #309?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16478726" author="githubbot" created="Thu, 17 May 2018 08:22:33 +0000"  >&lt;p&gt;lukejackson commented on issue #248: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/248#issuecomment-389785650&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/248#issuecomment-389785650&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @jcustenborder @pvorb has picked up this change in #309, which has addressed the remaining comments in this PR. We just need an Avro committer to review and merge it...&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16478730" author="lukejackson" created="Thu, 17 May 2018 08:26:37 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; the latest PR appears to address the concerns you raised above. Is there anything else blocking this change being reviewed and merged? The change appears to me to be of good quality and has associated unit tests.&lt;/p&gt;</comment>
                            <comment id="16479207" author="githubbot" created="Thu, 17 May 2018 15:30:01 +0000"  >&lt;p&gt;DolgopolovOleg commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-389908078&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-389908078&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Sorry guys, it&apos;s really crucial feature for us. What do you think how long will it take to approve it?&lt;br/&gt;
   Many thanks =)&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16479258" author="githubbot" created="Thu, 17 May 2018 15:55:18 +0000"  >&lt;p&gt;nandorKollar commented on a change in pull request #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#discussion_r189011365&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#discussion_r189011365&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -164,7 +181,7 @@ public String getShortDescription() &lt;/p&gt;
{
       System.err.println(&quot;No input files found.&quot;);
     }

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return fileSet.toArray((new File&lt;span class=&quot;error&quot;&gt;&amp;#91;fileSet.size()&amp;#93;&lt;/span&gt;));&lt;br/&gt;
+    return fileSet.toArray(new File&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   Why did you change this? Since we know the size of the result array, the original code (allocating one before toArray, and passing it) is still fine isn&apos;t it?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16479266" author="mkw" created="Thu, 17 May 2018 16:00:08 +0000"  >&lt;p&gt;The conventional wisdom of using a pre-sized array to prevent throwing out the original one is&#160;wrong for modern VMs. &#160;See the following for exhaustive performance testing:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://shipilev.net/blog/2016/arrays-wisdom-ancients/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://shipilev.net/blog/2016/arrays-wisdom-ancients/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16479293" author="githubbot" created="Thu, 17 May 2018 16:11:04 +0000"  >&lt;p&gt;pvorb commented on a change in pull request #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#discussion_r189016664&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#discussion_r189016664&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -164,7 +181,7 @@ public String getShortDescription() &lt;/p&gt;
{
       System.err.println(&quot;No input files found.&quot;);
     }

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return fileSet.toArray((new File&lt;span class=&quot;error&quot;&gt;&amp;#91;fileSet.size()&amp;#93;&lt;/span&gt;));&lt;br/&gt;
+    return fileSet.toArray(new File&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;Here is an excellent article&amp;#93;&lt;/span&gt;(&lt;a href=&quot;https://shipilev.net/blog/2016/arrays-wisdom-ancients/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://shipilev.net/blog/2016/arrays-wisdom-ancients/&lt;/a&gt;) that explains why nowadays it&apos;s better (despite counter intuitive) to use `toArray(new File&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;)` in favor of `toArray(new File&lt;span class=&quot;error&quot;&gt;&amp;#91;fileSet.size()&amp;#93;&lt;/span&gt;)`. The old code was not wrong, but I wanted to remove those redundant parentheses and switched to `new File&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;` because I was already editing that line. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16479614" author="githubbot" created="Thu, 17 May 2018 19:51:41 +0000"  >&lt;p&gt;pvorb commented on a change in pull request #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#discussion_r189080338&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#discussion_r189080338&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -164,7 +181,7 @@ public String getShortDescription() &lt;/p&gt;
{
       System.err.println(&quot;No input files found.&quot;);
     }

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return fileSet.toArray((new File&lt;span class=&quot;error&quot;&gt;&amp;#91;fileSet.size()&amp;#93;&lt;/span&gt;));&lt;br/&gt;
+    return fileSet.toArray(new File&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   @nandorKollar If you prefer `toArray(new File&lt;span class=&quot;error&quot;&gt;&amp;#91;fileSet.size()&amp;#93;&lt;/span&gt;)`, I can revert it of course.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16484642" author="githubbot" created="Tue, 22 May 2018 21:53:32 +0000"  >&lt;p&gt;pvorb commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-391153063&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-391153063&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Recent changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added a commit that replaces `JAVA8` by `JSR310` as suggested by me earlier in this thread. If anybody from the Avro project disagrees with that change, I will remove it.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;removed the runtime dependency on Guava&apos;s `Strings` class from the `AbstractAvroMojo`, which caused the archetype modules to fail.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added a new entry in the `CHANGES.txt` describing the feature&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   @nandorKollar Is there anything else I can do?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16486963" author="githubbot" created="Wed, 23 May 2018 09:21:08 +0000"  >&lt;p&gt;pvorb commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-391280602&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-391280602&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @nandorKollar Just saw that you want to remove `CHANGES.txt` in #310, so I removed the new entry in order to prevent a merge conflict.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16497993" author="githubbot" created="Fri, 1 Jun 2018 13:37:26 +0000"  >&lt;p&gt;pvorb commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-391153063&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-391153063&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Recent changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added a commit that replaces `JAVA8` by `JSR310` as suggested by me earlier in this thread. If anybody from the Avro project disagrees with that change, I will remove it.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;removed the runtime dependency on Guava&apos;s `Strings` class from the `AbstractAvroMojo`, which caused the archetype modules to fail.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added a new entry in the `CHANGES.txt` describing the feature&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16497994" author="githubbot" created="Fri, 1 Jun 2018 13:37:33 +0000"  >&lt;p&gt;pvorb commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-393883006&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-393883006&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @nandorKollar Is there anything else I can do?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16524963" author="githubbot" created="Wed, 27 Jun 2018 12:04:14 +0000"  >&lt;p&gt;pvorb commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-400647814&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-400647814&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @cutting Can you please have a look? Is there anything that needs to be changed before merging this request? It would be nice to get some feedback given the time me and others invested into it.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16599639" author="githubbot" created="Sat, 1 Sep 2018 14:04:45 +0000"  >&lt;p&gt;pvorb commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-417861922&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-417861922&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   This PR and &lt;span class=&quot;error&quot;&gt;&amp;#91;its precursor&amp;#93;&lt;/span&gt;(#248) are by far the most upvoted pull requests for this project. Probably it&#8217;s worth considering to merge it?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16599644" author="githubbot" created="Sat, 1 Sep 2018 14:26:58 +0000"  >&lt;p&gt;pvorb edited a comment on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-417861922&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-417861922&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   This PR and &lt;span class=&quot;error&quot;&gt;&amp;#91;its precursor&amp;#93;&lt;/span&gt;(248) are by far the most upvoted pull requests for this project. Probably it&#8217;s worth considering to merge it?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16611907" author="githubbot" created="Wed, 12 Sep 2018 10:54:26 +0000"  >&lt;p&gt;malcolmrobbins commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-420605247&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-420605247&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Hi pvorb,&lt;br/&gt;
   we&apos;re really keen to get hold of Java8 time support within AVRO, even if this means creating our own fork for a while as we&apos;re about to undertake a significant project...  What would it take for me to do this ?  i.e. can I pull the changes and apply this to my own fork of the code?  Alternatively is there an AVRO release imminent to save me the trouble?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16613139" author="githubbot" created="Thu, 13 Sep 2018 07:39:38 +0000"  >&lt;p&gt;malcolmrobbins commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-420913712&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-420913712&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   i.e. can I get hold of vorb:use-java8-time for our &quot;private use&quot; until it becomes generally available&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16613628" author="githubbot" created="Thu, 13 Sep 2018 15:16:29 +0000"  >&lt;p&gt;rocketraman commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-421044443&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-421044443&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   LOL: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2210&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-2210&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16613764" author="githubbot" created="Thu, 13 Sep 2018 16:50:11 +0000"  >&lt;p&gt;pvorb commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-421075273&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-421075273&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @malcolmrobbins Feel free to do this. Don&apos;t expect an official release with this change anytime soon.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16614337" author="githubbot" created="Fri, 14 Sep 2018 04:17:48 +0000"  >&lt;p&gt;malcolmrobbins commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-421226180&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-421226180&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thanks for that - I took a copy of your branch and tried a mvn test install and the build failed on Apache Avro Tools with an error that indicates a dependency on avro-mapred:jar:tests could not be satisfied.  The actual error is:&lt;/p&gt;

&lt;p&gt;   &lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; Failed to execute goal on project avro-tools: Could not resolve dependencies for project org.apache.avro:avro-tools:jar:1.9.0-SNAPSHOT: Could not find artifact org.apache.avro:avro-mapred:jar:tests:1.9.0-SNAPSHOT -&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;Help 1&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;   Do have any pointers as to how I can overcome this?  Thanks in advance.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16614370" author="githubbot" created="Fri, 14 Sep 2018 05:05:05 +0000"  >&lt;p&gt;malcolmrobbins edited a comment on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-421226180&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-421226180&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thanks for that - I took a copy of your branch and tried a mvn test install and the build failed on Apache Avro Tools with an error that indicates a dependency on avro-mapred:jar:tests could not be satisfied.  &lt;br/&gt;
   Note that building mapred worked fine but unlike the other modules it didn&apos;t build a tests jar and this seems to be the root cause of the dependency error.&lt;br/&gt;
   The actual error was:&lt;/p&gt;

&lt;p&gt;   &lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; Failed to execute goal on project avro-tools: Could not resolve dependencies for project org.apache.avro:avro-tools:jar:1.9.0-SNAPSHOT: Could not find artifact org.apache.avro:avro-mapred:jar:tests:1.9.0-SNAPSHOT -&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;Help 1&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;   Do have any pointers as to how I can overcome this?  Thanks in advance.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16616971" author="githubbot" created="Mon, 17 Sep 2018 01:33:00 +0000"  >&lt;p&gt;malcolmrobbins commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-421868660&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-421868660&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   FYI I overcame this problem.  To do this I simply needed to run the build.sh script in the lang/java folder rather than following the more explicit mvn instructions in the How To Contribute guide.  Now I just need to figure out how to get the avro-maven-plugin to generate Java sources that use Java 8 datetime rather than Joda&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16619632" author="githubbot" created="Tue, 18 Sep 2018 19:54:52 +0000"  >&lt;p&gt;kgalieva commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-422528812&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-422528812&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @malcolmrobbins You need to add `&amp;lt;dateTimeLogicalTypeImplementation&amp;gt;jsr310&amp;lt;/dateTimeLogicalTypeImplementation&amp;gt;` into `configuration` section.&lt;/p&gt;

&lt;p&gt;   @pvorb thank you! This patch works fine on our schemas!&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16625939" author="githubbot" created="Mon, 24 Sep 2018 15:02:46 +0000"  >&lt;p&gt;Fokko commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-424006938&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-424006938&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I&apos;ve ran some tests against &lt;span class=&quot;error&quot;&gt;&amp;#91;Divolte&amp;#93;&lt;/span&gt;(&lt;a href=&quot;https://github.com/divolte/divolte-collector&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/divolte/divolte-collector&lt;/a&gt;) and it looks great. Can we get this merged?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16627422" author="githubbot" created="Tue, 25 Sep 2018 14:11:24 +0000"  >&lt;p&gt;nandorKollar commented on a change in pull request #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#discussion_r220208860&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#discussion_r220208860&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/data/Jsr310TimeConversions.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -0,0 +1,158 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+package org.apache.avro.data;&lt;br/&gt;
+&lt;br/&gt;
+import org.apache.avro.Conversion;&lt;br/&gt;
+import org.apache.avro.LogicalType;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+&lt;br/&gt;
+import java.time.Instant;&lt;br/&gt;
+import java.time.LocalDate;&lt;br/&gt;
+import java.time.LocalTime;&lt;br/&gt;
+import java.util.concurrent.TimeUnit;&lt;br/&gt;
+&lt;br/&gt;
+public class Jsr310TimeConversions {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   It would be nice to override getRecommendedSchema methods for each conversion similar as in the Joda time conversion class (TimeConversions)&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16627424" author="githubbot" created="Tue, 25 Sep 2018 14:11:39 +0000"  >&lt;p&gt;nandorKollar commented on a change in pull request #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#discussion_r220208975&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#discussion_r220208975&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -153,16 +174,38 @@ public SpecificCompiler(Protocol protocol) {&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   public SpecificCompiler(Schema schema) &lt;/p&gt;
{
-    this();
+    this(schema, DateTimeLogicalTypeImplementation.JODA);
+  }
&lt;p&gt;+&lt;br/&gt;
+  public SpecificCompiler(Schema schema, DateTimeLogicalTypeImplementation dateTimeLogicalTypeImplementation) &lt;/p&gt;
{
+    this(dateTimeLogicalTypeImplementation);
     enqueue(schema);
     this.protocol = null;
   }

&lt;p&gt;+  /**&lt;br/&gt;
+   * Creates a specific compler with the default (Joda) type for date/time related logical types.&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   nit: compler -&amp;gt; compiler&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16627475" author="githubbot" created="Tue, 25 Sep 2018 15:02:37 +0000"  >&lt;p&gt;pvorb commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-424380475&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-424380475&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @nandorKollar I changed the code according to your requests. Good spot about overriding the `getRecommendedSchema()` methods in each conversion!&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16633796" author="githubbot" created="Mon, 1 Oct 2018 10:05:00 +0000"  >&lt;p&gt;nandorKollar closed pull request #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/data/Jsr310TimeConversions.java b/lang/java/avro/src/main/java/org/apache/avro/data/Jsr310TimeConversions.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..a717bbc9f&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/data/Jsr310TimeConversions.java&lt;br/&gt;
@@ -0,0 +1,184 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+package org.apache.avro.data;&lt;br/&gt;
+&lt;br/&gt;
+import org.apache.avro.Conversion;&lt;br/&gt;
+import org.apache.avro.LogicalType;&lt;br/&gt;
+import org.apache.avro.LogicalTypes;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+&lt;br/&gt;
+import java.time.Instant;&lt;br/&gt;
+import java.time.LocalDate;&lt;br/&gt;
+import java.time.LocalTime;&lt;br/&gt;
+import java.util.concurrent.TimeUnit;&lt;br/&gt;
+&lt;br/&gt;
+public class Jsr310TimeConversions {&lt;br/&gt;
+  public static class DateConversion extends Conversion&amp;lt;LocalDate&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Class&amp;lt;LocalDate&amp;gt; getConvertedType() &lt;/p&gt;
{
+      return LocalDate.class;
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public String getLogicalTypeName() &lt;/p&gt;
{
+      return &quot;date&quot;;
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public LocalDate fromInt(Integer daysFromEpoch, Schema schema, LogicalType type) &lt;/p&gt;
{
+      return LocalDate.ofEpochDay(daysFromEpoch);
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Integer toInt(LocalDate date, Schema schema, LogicalType type) &lt;/p&gt;
{
+      long epochDays = date.toEpochDay();
+
+      return (int) epochDays;
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Schema getRecommendedSchema() &lt;/p&gt;
{
+      return LogicalTypes.date().addToSchema(Schema.create(Schema.Type.INT));
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
+  public static class TimeMillisConversion extends Conversion&amp;lt;LocalTime&amp;gt; {&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Class&amp;lt;LocalTime&amp;gt; getConvertedType() &lt;/p&gt;
{
+      return LocalTime.class;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public String getLogicalTypeName() {
+      return &quot;time-millis&quot;;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public LocalTime fromInt(Integer millisFromMidnight, Schema schema, LogicalType type) {
+      return LocalTime.ofNanoOfDay(TimeUnit.MILLISECONDS.toNanos(millisFromMidnight));
+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Integer toInt(LocalTime time, Schema schema, LogicalType type) {
+      return (int) TimeUnit.NANOSECONDS.toMillis(time.toNanoOfDay());
+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Schema getRecommendedSchema() {
+      return LogicalTypes.timeMillis().addToSchema(Schema.create(Schema.Type.INT));
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  public static class TimeMicrosConversion extends Conversion&amp;lt;LocalTime&amp;gt; {&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Class&amp;lt;LocalTime&amp;gt; getConvertedType() {+      return LocalTime.class;+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public String getLogicalTypeName() &lt;/p&gt;
{
+      return &quot;time-micros&quot;;
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public LocalTime fromLong(Long microsFromMidnight, Schema schema, LogicalType type) &lt;/p&gt;
{
+      return LocalTime.ofNanoOfDay(TimeUnit.MICROSECONDS.toNanos(microsFromMidnight));
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Long toLong(LocalTime time, Schema schema, LogicalType type) &lt;/p&gt;
{
+      return TimeUnit.NANOSECONDS.toMicros(time.toNanoOfDay());
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Schema getRecommendedSchema() &lt;/p&gt;
{
+      return LogicalTypes.timeMicros().addToSchema(Schema.create(Schema.Type.LONG));
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
+  public static class TimestampMillisConversion extends Conversion&amp;lt;Instant&amp;gt; {&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Class&amp;lt;Instant&amp;gt; getConvertedType() &lt;/p&gt;
{
+      return Instant.class;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public String getLogicalTypeName() {
+      return &quot;timestamp-millis&quot;;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Instant fromLong(Long millisFromEpoch, Schema schema, LogicalType type) {
+      return Instant.ofEpochMilli(millisFromEpoch);
+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Long toLong(Instant timestamp, Schema schema, LogicalType type) {
+      return timestamp.toEpochMilli();
+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Schema getRecommendedSchema() {
+      return LogicalTypes.timestampMillis().addToSchema(Schema.create(Schema.Type.LONG));
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  public static class TimestampMicrosConversion extends Conversion&amp;lt;Instant&amp;gt; {&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Class&amp;lt;Instant&amp;gt; getConvertedType() {+      return Instant.class;+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public String getLogicalTypeName() &lt;/p&gt;
{
+      return &quot;timestamp-micros&quot;;
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Instant fromLong(Long microsFromEpoch, Schema schema, LogicalType type) &lt;/p&gt;
{
+      long epochSeconds = microsFromEpoch / (1_000_000);
+      long nanoAdjustment = (microsFromEpoch % (1_000_000)) * 1_000;
+
+      return Instant.ofEpochSecond(epochSeconds, nanoAdjustment);
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Long toLong(Instant instant, Schema schema, LogicalType type) {&lt;br/&gt;
+      long seconds = instant.getEpochSecond();&lt;br/&gt;
+      int nanos = instant.getNano();&lt;br/&gt;
+&lt;br/&gt;
+      if (seconds &amp;lt; 0 &amp;amp;&amp;amp; nanos &amp;gt; 0) &lt;/p&gt;
{
+        long micros = Math.multiplyExact(seconds + 1, 1_000_000);
+        long adjustment = (nanos / 1_000L) - 1_000_000;
+
+        return Math.addExact(micros, adjustment);
+      }
&lt;p&gt; else &lt;/p&gt;
{
+        long micros = Math.multiplyExact(seconds, 1_000_000);
+
+        return Math.addExact(micros, nanos / 1_000);
+      }
&lt;p&gt;+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Schema getRecommendedSchema() &lt;/p&gt;
{
+      return LogicalTypes.timestampMicros().addToSchema(Schema.create(Schema.Type.LONG));
+    }
&lt;p&gt;+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/data/TestJsr310TimeConversions.java b/lang/java/avro/src/test/java/org/apache/avro/data/TestJsr310TimeConversions.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..caf699e7d&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/data/TestJsr310TimeConversions.java&lt;br/&gt;
@@ -0,0 +1,241 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+package org.apache.avro.data;&lt;br/&gt;
+&lt;br/&gt;
+import org.apache.avro.LogicalTypes;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.data.Jsr310TimeConversions.DateConversion;&lt;br/&gt;
+import org.apache.avro.data.Jsr310TimeConversions.TimeMillisConversion;&lt;br/&gt;
+import org.apache.avro.data.Jsr310TimeConversions.TimeMicrosConversion;&lt;br/&gt;
+import org.apache.avro.data.Jsr310TimeConversions.TimestampMicrosConversion;&lt;br/&gt;
+import org.apache.avro.data.Jsr310TimeConversions.TimestampMillisConversion;&lt;br/&gt;
+import org.junit.Assert;&lt;br/&gt;
+import org.junit.BeforeClass;&lt;br/&gt;
+import org.junit.Test;&lt;br/&gt;
+&lt;br/&gt;
+import java.time.Instant;&lt;br/&gt;
+import java.time.LocalDate;&lt;br/&gt;
+import java.time.LocalTime;&lt;br/&gt;
+import java.time.ZonedDateTime;&lt;br/&gt;
+import java.time.ZoneOffset;&lt;br/&gt;
+&lt;br/&gt;
+public class TestJsr310TimeConversions {&lt;br/&gt;
+&lt;br/&gt;
+  public static Schema DATE_SCHEMA;&lt;br/&gt;
+  public static Schema TIME_MILLIS_SCHEMA;&lt;br/&gt;
+  public static Schema TIME_MICROS_SCHEMA;&lt;br/&gt;
+  public static Schema TIMESTAMP_MILLIS_SCHEMA;&lt;br/&gt;
+  public static Schema TIMESTAMP_MICROS_SCHEMA;&lt;br/&gt;
+&lt;br/&gt;
+  @BeforeClass&lt;br/&gt;
+  public static void createSchemas() &lt;/p&gt;
{
+    TestJsr310TimeConversions.DATE_SCHEMA = LogicalTypes.date()
+        .addToSchema(Schema.create(Schema.Type.INT));
+    TestJsr310TimeConversions.TIME_MILLIS_SCHEMA = LogicalTypes.timeMillis()
+        .addToSchema(Schema.create(Schema.Type.INT));
+    TestJsr310TimeConversions.TIME_MICROS_SCHEMA = LogicalTypes.timeMicros()
+        .addToSchema(Schema.create(Schema.Type.LONG));
+    TestJsr310TimeConversions.TIMESTAMP_MILLIS_SCHEMA = LogicalTypes.timestampMillis()
+        .addToSchema(Schema.create(Schema.Type.LONG));
+    TestJsr310TimeConversions.TIMESTAMP_MICROS_SCHEMA = LogicalTypes.timestampMicros()
+        .addToSchema(Schema.create(Schema.Type.LONG));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testDateConversion() throws Exception &lt;/p&gt;
{
+    DateConversion conversion = new DateConversion();
+    LocalDate Jan_6_1970 = LocalDate.of(1970, 1, 6);    //  5
+    LocalDate Jan_1_1970 = LocalDate.of(1970, 1, 1);    //  0
+    LocalDate Dec_27_1969 = LocalDate.of(1969, 12, 27); // -5
+
+    Assert.assertEquals(&quot;6 Jan 1970 should be 5&quot;, 5,
+        (int) conversion.toInt(Jan_6_1970, DATE_SCHEMA, LogicalTypes.date()));
+    Assert.assertEquals(&quot;1 Jan 1970 should be 0&quot;, 0,
+        (int) conversion.toInt(Jan_1_1970, DATE_SCHEMA, LogicalTypes.date()));
+    Assert.assertEquals(&quot;27 Dec 1969 should be -5&quot;, -5,
+        (int) conversion.toInt(Dec_27_1969, DATE_SCHEMA, LogicalTypes.date()));
+
+    Assert.assertEquals(&quot;6 Jan 1970 should be 5&quot;,
+        conversion.fromInt(5, DATE_SCHEMA, LogicalTypes.date()), Jan_6_1970);
+    Assert.assertEquals(&quot;1 Jan 1970 should be 0&quot;,
+        conversion.fromInt(0, DATE_SCHEMA, LogicalTypes.date()), Jan_1_1970);
+    Assert.assertEquals(&quot;27 Dec 1969 should be -5&quot;,
+        conversion.fromInt(-5, DATE_SCHEMA, LogicalTypes.date()), Dec_27_1969);
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testTimeMillisConversion() throws Exception &lt;/p&gt;
{
+    TimeMillisConversion conversion = new TimeMillisConversion();
+    LocalTime oneAM = LocalTime.of(1, 0);
+    LocalTime afternoon = LocalTime.of(15, 14, 15, 926_000_000);
+    int afternoonMillis = ((15 * 60 + 14) * 60 + 15) * 1000 + 926;
+
+    Assert.assertEquals(&quot;Midnight should be 0&quot;, 0,
+        (int) conversion.toInt(
+            LocalTime.MIDNIGHT, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()));
+    Assert.assertEquals(&quot;01:00 should be 3,600,000&quot;, 3_600_000,
+        (int) conversion.toInt(
+            oneAM, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()));
+    Assert.assertEquals(&quot;15:14:15.926 should be &quot; + afternoonMillis,
+        afternoonMillis,
+        (int) conversion.toInt(
+            afternoon, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()));
+
+    Assert.assertEquals(&quot;Midnight should be 0&quot;,
+        LocalTime.MIDNIGHT,
+        conversion.fromInt(0, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()));
+    Assert.assertEquals(&quot;01:00 should be 3,600,000&quot;,
+        oneAM,
+        conversion.fromInt(
+            3600000, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()));
+    Assert.assertEquals(&quot;15:14:15.926 should be &quot; + afternoonMillis,
+        afternoon,
+        conversion.fromInt(
+            afternoonMillis, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testTimeMicrosConversion() throws Exception &lt;/p&gt;
{
+    TimeMicrosConversion conversion = new TimeMicrosConversion();
+    LocalTime oneAM = LocalTime.of(1, 0);
+    LocalTime afternoon = LocalTime.of(15, 14, 15, 926_551_000);
+    long afternoonMicros = ((long) (15 * 60 + 14) * 60 + 15) * 1_000_000 + 926_551;
+
+    Assert.assertEquals(&quot;Midnight should be 0&quot;,
+        LocalTime.MIDNIGHT,
+        conversion.fromLong(0L, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()));
+    Assert.assertEquals(&quot;01:00 should be 3,600,000,000&quot;,
+        oneAM,
+        conversion.fromLong(
+            3_600_000_000L, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()));
+    Assert.assertEquals(&quot;15:14:15.926551 should be &quot; + afternoonMicros,
+        afternoon,
+        conversion.fromLong(
+            afternoonMicros, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()));
+
+    Assert.assertEquals(&quot;Midnight should be 0&quot;, 0,
+        (long) conversion.toLong(
+            LocalTime.MIDNIGHT, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()));
+    Assert.assertEquals(&quot;01:00 should be 3,600,000,000&quot;, 3_600_000_000L,
+        (long) conversion.toLong(
+            oneAM, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()));
+    Assert.assertEquals(&quot;15:14:15.926551 should be &quot; + afternoonMicros,
+        afternoonMicros,
+        (long) conversion.toLong(
+            afternoon, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testTimestampMillisConversion() throws Exception &lt;/p&gt;
{
+    TimestampMillisConversion conversion = new TimestampMillisConversion();
+    long nowInstant = Instant.now().toEpochMilli(); // ms precision
+
+    // round trip
+    Instant now = conversion.fromLong(
+        nowInstant, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis());
+    long roundTrip = conversion.toLong(
+        now, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis());
+    Assert.assertEquals(&quot;Round-trip conversion should work&quot;,
+        nowInstant, roundTrip);
+
+    long May_28_2015_21_46_53_221_instant = 1432849613221L;
+    Instant May_28_2015_21_46_53_221 =
+        ZonedDateTime.of(2015, 5, 28, 21, 46, 53, 221_000_000, ZoneOffset.UTC).toInstant();
+
+    // known dates from https://www.epochconverter.com/
+    // &amp;gt; Epoch
+    Assert.assertEquals(&quot;Known date should be correct&quot;,
+        May_28_2015_21_46_53_221,
+        conversion.fromLong(May_28_2015_21_46_53_221_instant,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+    Assert.assertEquals(&quot;Known date should be correct&quot;,
+        May_28_2015_21_46_53_221_instant,
+        (long) conversion.toLong(May_28_2015_21_46_53_221,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+
+    // Epoch
+    Assert.assertEquals(&quot;1970-01-01 should be 0&quot;,
+        Instant.EPOCH,
+        conversion.fromLong(0L,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+    Assert.assertEquals(&quot;1970-01-01 should be 0&quot;,
+        0L,
+        (long) conversion.toLong(ZonedDateTime.ofInstant(Instant.EPOCH, ZoneOffset.UTC).toInstant(),
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+
+    // &amp;lt; Epoch
+    long Jul_01_1969_12_00_00_123_instant = -15854400000L + 123;
+    Instant Jul_01_1969_12_00_00_123 =
+        ZonedDateTime.of(1969, 7, 1, 12, 0, 0, 123_000_000, ZoneOffset.UTC).toInstant();
+
+    Assert.assertEquals(&quot;Pre 1970 date should be correct&quot;,
+        Jul_01_1969_12_00_00_123,
+        conversion.fromLong(Jul_01_1969_12_00_00_123_instant,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+    Assert.assertEquals(&quot;Pre 1970 date should be correct&quot;,
+        Jul_01_1969_12_00_00_123_instant,
+        (long) conversion.toLong(Jul_01_1969_12_00_00_123,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testTimestampMicrosConversion() throws Exception &lt;/p&gt;
{
+    TimestampMicrosConversion conversion = new TimestampMicrosConversion();
+
+    // known dates from https://www.epochconverter.com/
+    // &amp;gt; Epoch
+    long May_28_2015_21_46_53_221_843_instant = 1432849613221L * 1000 + 843;
+    Instant May_28_2015_21_46_53_221_843 =
+        ZonedDateTime.of(2015, 5, 28, 21, 46, 53, 221_843_000, ZoneOffset.UTC).toInstant();
+
+    Assert.assertEquals(&quot;Known date should be correct&quot;,
+        May_28_2015_21_46_53_221_843,
+        conversion.fromLong(May_28_2015_21_46_53_221_843_instant,
+            TIMESTAMP_MICROS_SCHEMA, LogicalTypes.timestampMicros()));
+
+    Assert.assertEquals(&quot;Known date should be correct&quot;,
+        May_28_2015_21_46_53_221_843_instant,
+        (long) conversion.toLong(May_28_2015_21_46_53_221_843,
+            TIMESTAMP_MICROS_SCHEMA, LogicalTypes.timestampMillis()));
+
+    // Epoch
+    Assert.assertEquals(&quot;1970-01-01 should be 0&quot;,
+        Instant.EPOCH,
+        conversion.fromLong(0L,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+    Assert.assertEquals(&quot;1970-01-01 should be 0&quot;,
+        0L,
+        (long) conversion.toLong(ZonedDateTime.ofInstant(Instant.EPOCH, ZoneOffset.UTC).toInstant(),
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+
+    // &amp;lt; Epoch
+    long Jul_01_1969_12_00_00_000_123_instant = -15854400000L * 1000 + 123;
+    Instant Jul_01_1969_12_00_00_000_123 =
+        ZonedDateTime.of(1969, 7, 1, 12, 0, 0, 123_000, ZoneOffset.UTC).toInstant();
+
+    Assert.assertEquals(&quot;Pre 1970 date should be correct&quot;,
+        Jul_01_1969_12_00_00_000_123,
+        conversion.fromLong(Jul_01_1969_12_00_00_000_123_instant,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+    Assert.assertEquals(&quot;Pre 1970 date should be correct&quot;,
+        Jul_01_1969_12_00_00_000_123_instant,
+        (long) conversion.toLong(Jul_01_1969_12_00_00_000_123,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+  }
&lt;p&gt;+}&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithJsr310LogicalTypes.java b/lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithJsr310LogicalTypes.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..c42b3ca0d&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithJsr310LogicalTypes.java&lt;br/&gt;
@@ -0,0 +1,892 @@&lt;br/&gt;
+/**&lt;br/&gt;
+ * Autogenerated by Avro&lt;br/&gt;
+ *&lt;br/&gt;
+ * DO NOT EDIT DIRECTLY&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.specific;&lt;br/&gt;
+&lt;br/&gt;
+import org.apache.avro.message.BinaryMessageEncoder;&lt;br/&gt;
+import org.apache.avro.message.BinaryMessageDecoder;&lt;br/&gt;
+import org.apache.avro.message.SchemaStore;&lt;br/&gt;
+&lt;br/&gt;
+@SuppressWarnings(&quot;all&quot;)&lt;br/&gt;
+@org.apache.avro.specific.AvroGenerated&lt;br/&gt;
+public class TestRecordWithJsr310LogicalTypes extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {&lt;br/&gt;
+  private static final long serialVersionUID = 3313339903648295220L;&lt;br/&gt;
+  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(&quot;{\&quot;type\&quot;:\&quot;record\&quot;,\&quot;name\&quot;:\&quot;TestRecordWithJsr310LogicalTypes\&quot;,\&quot;namespace\&quot;:\&quot;org.apache.avro.specific\&quot;,\&quot;fields\&quot;:[&lt;/p&gt;
{\&quot;name\&quot;:\&quot;b\&quot;,\&quot;type\&quot;:\&quot;boolean\&quot;}
&lt;p&gt;,&lt;/p&gt;
{\&quot;name\&quot;:\&quot;i32\&quot;,\&quot;type\&quot;:\&quot;int\&quot;}
&lt;p&gt;,&lt;/p&gt;
{\&quot;name\&quot;:\&quot;i64\&quot;,\&quot;type\&quot;:\&quot;long\&quot;}
&lt;p&gt;,&lt;/p&gt;
{\&quot;name\&quot;:\&quot;f32\&quot;,\&quot;type\&quot;:\&quot;float\&quot;}
&lt;p&gt;,&lt;/p&gt;
{\&quot;name\&quot;:\&quot;f64\&quot;,\&quot;type\&quot;:\&quot;double\&quot;}
&lt;p&gt;,&lt;/p&gt;
{\&quot;name\&quot;:\&quot;s\&quot;,\&quot;type\&quot;:[\&quot;null\&quot;,\&quot;string\&quot;],\&quot;default\&quot;:null}
&lt;p&gt;,{\&quot;name\&quot;:\&quot;d\&quot;,\&quot;type\&quot;:{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;logicalType\&quot;:\&quot;date\&quot;}},{\&quot;name\&quot;:\&quot;t\&quot;,\&quot;type\&quot;:{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;logicalType\&quot;:\&quot;time-millis\&quot;}},{\&quot;name\&quot;:\&quot;ts\&quot;,\&quot;type\&quot;:{\&quot;type\&quot;:\&quot;long\&quot;,\&quot;logicalType\&quot;:\&quot;timestamp-millis\&quot;}},{\&quot;name\&quot;:\&quot;dec\&quot;,\&quot;type\&quot;:{\&quot;type\&quot;:\&quot;bytes\&quot;,\&quot;logicalType\&quot;:\&quot;decimal\&quot;,\&quot;precision\&quot;:9,\&quot;scale\&quot;:2}}]}&quot;);&lt;br/&gt;
+  public static org.apache.avro.Schema getClassSchema() &lt;/p&gt;
{ return SCHEMA$; }&lt;br/&gt;
+&lt;br/&gt;
+  private static SpecificData MODEL$ = new SpecificData();&lt;br/&gt;
+&lt;br/&gt;
+  private static final BinaryMessageEncoder&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt; ENCODER =&lt;br/&gt;
+      new BinaryMessageEncoder&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt;(MODEL$, SCHEMA$);&lt;br/&gt;
+&lt;br/&gt;
+  private static final BinaryMessageDecoder&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt; DECODER =&lt;br/&gt;
+      new BinaryMessageDecoder&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt;(MODEL$, SCHEMA$);&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Return the BinaryMessageDecoder instance used by this class.&lt;br/&gt;
+   */&lt;br/&gt;
+  public static BinaryMessageDecoder&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt; getDecoder() {
+    return DECODER;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.&lt;br/&gt;
+   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint&lt;br/&gt;
+   */&lt;br/&gt;
+  public static BinaryMessageDecoder&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt; createDecoder(SchemaStore resolver) {
+    return new BinaryMessageDecoder&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt;(MODEL$, SCHEMA$, resolver);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  /** Serializes this TestRecordWithJsr310LogicalTypes to a ByteBuffer. */&lt;br/&gt;
+  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
+    return ENCODER.encode(this);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  /** Deserializes a TestRecordWithJsr310LogicalTypes from a ByteBuffer. */&lt;br/&gt;
+  public static TestRecordWithJsr310LogicalTypes fromByteBuffer(&lt;br/&gt;
+      java.nio.ByteBuffer b) throws java.io.IOException {
+    return DECODER.decode(b);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Deprecated public boolean b;&lt;br/&gt;
+  @Deprecated public int i32;&lt;br/&gt;
+  @Deprecated public long i64;&lt;br/&gt;
+  @Deprecated public float f32;&lt;br/&gt;
+  @Deprecated public double f64;&lt;br/&gt;
+  @Deprecated public java.lang.CharSequence s;&lt;br/&gt;
+  @Deprecated public java.time.LocalDate d;&lt;br/&gt;
+  @Deprecated public java.time.LocalTime t;&lt;br/&gt;
+  @Deprecated public java.time.Instant ts;&lt;br/&gt;
+  @Deprecated public java.math.BigDecimal dec;&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Default constructor.  Note that this does not initialize fields&lt;br/&gt;
+   * to their default values from the schema.  If that is desired then&lt;br/&gt;
+   * one should use &amp;lt;code&amp;gt;newBuilder()&amp;lt;/code&amp;gt;.&lt;br/&gt;
+   */&lt;br/&gt;
+  public TestRecordWithJsr310LogicalTypes() {}&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * All-args constructor.&lt;br/&gt;
+   * @param b The new value for b&lt;br/&gt;
+   * @param i32 The new value for i32&lt;br/&gt;
+   * @param i64 The new value for i64&lt;br/&gt;
+   * @param f32 The new value for f32&lt;br/&gt;
+   * @param f64 The new value for f64&lt;br/&gt;
+   * @param s The new value for s&lt;br/&gt;
+   * @param d The new value for d&lt;br/&gt;
+   * @param t The new value for t&lt;br/&gt;
+   * @param ts The new value for ts&lt;br/&gt;
+   * @param dec The new value for dec&lt;br/&gt;
+   */&lt;br/&gt;
+  public TestRecordWithJsr310LogicalTypes(java.lang.Boolean b, java.lang.Integer i32, java.lang.Long i64, java.lang.Float f32, java.lang.Double f64, java.lang.CharSequence s, java.time.LocalDate d, java.time.LocalTime t, java.time.Instant ts, java.math.BigDecimal dec) {
+    this.b = b;
+    this.i32 = i32;
+    this.i64 = i64;
+    this.f32 = f32;
+    this.f64 = f64;
+    this.s = s;
+    this.d = d;
+    this.t = t;
+    this.ts = ts;
+    this.dec = dec;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
&lt;p&gt;+  // Used by DatumWriter.  Applications should not call.&lt;br/&gt;
+  public java.lang.Object get(int field$) {&lt;br/&gt;
+    switch (field$) &lt;/p&gt;
{
+    case 0: return b;
+    case 1: return i32;
+    case 2: return i64;
+    case 3: return f32;
+    case 4: return f64;
+    case 5: return s;
+    case 6: return d;
+    case 7: return t;
+    case 8: return ts;
+    case 9: return dec;
+    default: throw new org.apache.avro.AvroRuntimeException(&quot;Bad index&quot;);
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
+  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.Jsr310TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.Jsr310TimeConversions.DateConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.Jsr310TimeConversions.TimeMillisConversion TIME_CONVERSION = new org.apache.avro.data.Jsr310TimeConversions.TimeMillisConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.Jsr310TimeConversions.TimestampMillisConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.Jsr310TimeConversions.TimestampMillisConversion();&lt;br/&gt;
+&lt;br/&gt;
+  private static final org.apache.avro.Conversion&amp;lt;?&amp;gt;[] conversions =&lt;br/&gt;
+      new org.apache.avro.Conversion&amp;lt;?&amp;gt;[] &lt;/p&gt;
{
+      null,
+      null,
+      null,
+      null,
+      null,
+      null,
+      DATE_CONVERSION,
+      TIME_CONVERSION,
+      TIMESTAMP_CONVERSION,
+      DECIMAL_CONVERSION,
+      null
+  }
&lt;p&gt;;&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public org.apache.avro.Conversion&amp;lt;?&amp;gt; getConversion(int field) &lt;/p&gt;
{
+    return conversions[field];
+  }
&lt;p&gt;+&lt;br/&gt;
+  // Used by DatumReader.  Applications should not call.&lt;br/&gt;
+  @SuppressWarnings(value=&quot;unchecked&quot;)&lt;br/&gt;
+  public void put(int field$, java.lang.Object value$) {&lt;br/&gt;
+    switch (field$) &lt;/p&gt;
{
+    case 0: b = (java.lang.Boolean)value$; break;
+    case 1: i32 = (java.lang.Integer)value$; break;
+    case 2: i64 = (java.lang.Long)value$; break;
+    case 3: f32 = (java.lang.Float)value$; break;
+    case 4: f64 = (java.lang.Double)value$; break;
+    case 5: s = (java.lang.CharSequence)value$; break;
+    case 6: d = (java.time.LocalDate)value$; break;
+    case 7: t = (java.time.LocalTime)value$; break;
+    case 8: ts = (java.time.Instant)value$; break;
+    case 9: dec = (java.math.BigDecimal)value$; break;
+    default: throw new org.apache.avro.AvroRuntimeException(&quot;Bad index&quot;);
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;b&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;b&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.lang.Boolean getB() &lt;/p&gt;
{
+    return b;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;b&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setB(java.lang.Boolean value) &lt;/p&gt;
{
+    this.b = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;i32&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;i32&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.lang.Integer getI32() &lt;/p&gt;
{
+    return i32;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;i32&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setI32(java.lang.Integer value) &lt;/p&gt;
{
+    this.i32 = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;i64&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;i64&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.lang.Long getI64() &lt;/p&gt;
{
+    return i64;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;i64&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setI64(java.lang.Long value) &lt;/p&gt;
{
+    this.i64 = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;f32&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;f32&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.lang.Float getF32() &lt;/p&gt;
{
+    return f32;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;f32&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setF32(java.lang.Float value) &lt;/p&gt;
{
+    this.f32 = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;f64&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;f64&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.lang.Double getF64() &lt;/p&gt;
{
+    return f64;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;f64&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setF64(java.lang.Double value) &lt;/p&gt;
{
+    this.f64 = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;s&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;s&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.lang.CharSequence getS() &lt;/p&gt;
{
+    return s;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;s&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setS(java.lang.CharSequence value) &lt;/p&gt;
{
+    this.s = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;d&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;d&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.time.LocalDate getD() &lt;/p&gt;
{
+    return d;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;d&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setD(java.time.LocalDate value) &lt;/p&gt;
{
+    this.d = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;t&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;t&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.time.LocalTime getT() &lt;/p&gt;
{
+    return t;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;t&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setT(java.time.LocalTime value) &lt;/p&gt;
{
+    this.t = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;ts&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;ts&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.time.Instant getTs() &lt;/p&gt;
{
+    return ts;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;ts&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setTs(java.time.Instant value) &lt;/p&gt;
{
+    this.ts = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;dec&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;dec&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.math.BigDecimal getDec() &lt;/p&gt;
{
+    return dec;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;dec&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setDec(java.math.BigDecimal value) &lt;/p&gt;
{
+    this.dec = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Creates a new TestRecordWithJsr310LogicalTypes RecordBuilder.&lt;br/&gt;
+   * @return A new TestRecordWithJsr310LogicalTypes RecordBuilder&lt;br/&gt;
+   */&lt;br/&gt;
+  public static TestRecordWithJsr310LogicalTypes.Builder newBuilder() &lt;/p&gt;
{
+    return new TestRecordWithJsr310LogicalTypes.Builder();
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Creates a new TestRecordWithJsr310LogicalTypes RecordBuilder by copying an existing Builder.&lt;br/&gt;
+   * @param other The existing builder to copy.&lt;br/&gt;
+   * @return A new TestRecordWithJsr310LogicalTypes RecordBuilder&lt;br/&gt;
+   */&lt;br/&gt;
+  public static TestRecordWithJsr310LogicalTypes.Builder newBuilder(TestRecordWithJsr310LogicalTypes.Builder other) {&lt;br/&gt;
+    if (other == null) &lt;/p&gt;
{
+      return new TestRecordWithJsr310LogicalTypes.Builder();
+    } else {
+      return new TestRecordWithJsr310LogicalTypes.Builder(other);
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Creates a new TestRecordWithJsr310LogicalTypes RecordBuilder by copying an existing TestRecordWithJsr310LogicalTypes instance.&lt;br/&gt;
+   * @param other The existing instance to copy.&lt;br/&gt;
+   * @return A new TestRecordWithJsr310LogicalTypes RecordBuilder&lt;br/&gt;
+   */&lt;br/&gt;
+  public static TestRecordWithJsr310LogicalTypes.Builder newBuilder(TestRecordWithJsr310LogicalTypes other) {&lt;br/&gt;
+    if (other == null) {+      return new TestRecordWithJsr310LogicalTypes.Builder();+    }
&lt;p&gt; else &lt;/p&gt;
{
+      return new TestRecordWithJsr310LogicalTypes.Builder(other);
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * RecordBuilder for TestRecordWithJsr310LogicalTypes instances.&lt;br/&gt;
+   */&lt;br/&gt;
+  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt;&lt;br/&gt;
+    implements org.apache.avro.data.RecordBuilder&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+    private boolean b;&lt;br/&gt;
+    private int i32;&lt;br/&gt;
+    private long i64;&lt;br/&gt;
+    private float f32;&lt;br/&gt;
+    private double f64;&lt;br/&gt;
+    private java.lang.CharSequence s;&lt;br/&gt;
+    private java.time.LocalDate d;&lt;br/&gt;
+    private java.time.LocalTime t;&lt;br/&gt;
+    private java.time.Instant ts;&lt;br/&gt;
+    private java.math.BigDecimal dec;&lt;br/&gt;
+&lt;br/&gt;
+    /** Creates a new Builder */&lt;br/&gt;
+    private Builder() &lt;/p&gt;
{
+      super(SCHEMA$);
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+     * Creates a Builder by copying an existing Builder.&lt;br/&gt;
+     * @param other The existing Builder to copy.&lt;br/&gt;
+     */&lt;br/&gt;
+    private Builder(TestRecordWithJsr310LogicalTypes.Builder other) {&lt;br/&gt;
+      super(other);&lt;br/&gt;
+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;, other.b)) &lt;/p&gt;
{
+        this.b = data().deepCopy(fields()[0].schema(), other.b);
+        fieldSetFlags()[0] = other.fieldSetFlags()[0];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, other.i32)) &lt;/p&gt;
{
+        this.i32 = data().deepCopy(fields()[1].schema(), other.i32);
+        fieldSetFlags()[1] = other.fieldSetFlags()[1];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;, other.i64)) &lt;/p&gt;
{
+        this.i64 = data().deepCopy(fields()[2].schema(), other.i64);
+        fieldSetFlags()[2] = other.fieldSetFlags()[2];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt;, other.f32)) &lt;/p&gt;
{
+        this.f32 = data().deepCopy(fields()[3].schema(), other.f32);
+        fieldSetFlags()[3] = other.fieldSetFlags()[3];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt;, other.f64)) &lt;/p&gt;
{
+        this.f64 = data().deepCopy(fields()[4].schema(), other.f64);
+        fieldSetFlags()[4] = other.fieldSetFlags()[4];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt;, other.s)) &lt;/p&gt;
{
+        this.s = data().deepCopy(fields()[5].schema(), other.s);
+        fieldSetFlags()[5] = other.fieldSetFlags()[5];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;6&amp;#93;&lt;/span&gt;, other.d)) &lt;/p&gt;
{
+        this.d = data().deepCopy(fields()[6].schema(), other.d);
+        fieldSetFlags()[6] = other.fieldSetFlags()[6];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;7&amp;#93;&lt;/span&gt;, other.t)) &lt;/p&gt;
{
+        this.t = data().deepCopy(fields()[7].schema(), other.t);
+        fieldSetFlags()[7] = other.fieldSetFlags()[7];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;8&amp;#93;&lt;/span&gt;, other.ts)) &lt;/p&gt;
{
+        this.ts = data().deepCopy(fields()[8].schema(), other.ts);
+        fieldSetFlags()[8] = other.fieldSetFlags()[8];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;9&amp;#93;&lt;/span&gt;, other.dec)) &lt;/p&gt;
{
+        this.dec = data().deepCopy(fields()[9].schema(), other.dec);
+        fieldSetFlags()[9] = other.fieldSetFlags()[9];
+      }
&lt;p&gt;+    }&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+     * Creates a Builder by copying an existing TestRecordWithJsr310LogicalTypes instance&lt;br/&gt;
+     * @param other The existing instance to copy.&lt;br/&gt;
+     */&lt;br/&gt;
+    private Builder(TestRecordWithJsr310LogicalTypes other) {&lt;br/&gt;
+      super(SCHEMA$);&lt;br/&gt;
+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;, other.b)) &lt;/p&gt;
{
+        this.b = data().deepCopy(fields()[0].schema(), other.b);
+        fieldSetFlags()[0] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, other.i32)) &lt;/p&gt;
{
+        this.i32 = data().deepCopy(fields()[1].schema(), other.i32);
+        fieldSetFlags()[1] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;, other.i64)) &lt;/p&gt;
{
+        this.i64 = data().deepCopy(fields()[2].schema(), other.i64);
+        fieldSetFlags()[2] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt;, other.f32)) &lt;/p&gt;
{
+        this.f32 = data().deepCopy(fields()[3].schema(), other.f32);
+        fieldSetFlags()[3] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt;, other.f64)) &lt;/p&gt;
{
+        this.f64 = data().deepCopy(fields()[4].schema(), other.f64);
+        fieldSetFlags()[4] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt;, other.s)) &lt;/p&gt;
{
+        this.s = data().deepCopy(fields()[5].schema(), other.s);
+        fieldSetFlags()[5] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;6&amp;#93;&lt;/span&gt;, other.d)) &lt;/p&gt;
{
+        this.d = data().deepCopy(fields()[6].schema(), other.d);
+        fieldSetFlags()[6] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;7&amp;#93;&lt;/span&gt;, other.t)) &lt;/p&gt;
{
+        this.t = data().deepCopy(fields()[7].schema(), other.t);
+        fieldSetFlags()[7] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;8&amp;#93;&lt;/span&gt;, other.ts)) &lt;/p&gt;
{
+        this.ts = data().deepCopy(fields()[8].schema(), other.ts);
+        fieldSetFlags()[8] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;9&amp;#93;&lt;/span&gt;, other.dec)) &lt;/p&gt;
{
+        this.dec = data().deepCopy(fields()[9].schema(), other.dec);
+        fieldSetFlags()[9] = true;
+      }
&lt;p&gt;+    }&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;b&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.lang.Boolean getB() &lt;/p&gt;
{
+      return b;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;b&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;b&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder setB(boolean value) &lt;/p&gt;
{
+      validate(fields()[0], value);
+      this.b = value;
+      fieldSetFlags()[0] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;b&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;b&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasB() &lt;/p&gt;
{
+      return fieldSetFlags()[0];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;b&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder clearB() &lt;/p&gt;
{
+      fieldSetFlags()[0] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;i32&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.lang.Integer getI32() &lt;/p&gt;
{
+      return i32;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;i32&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;i32&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder setI32(int value) &lt;/p&gt;
{
+      validate(fields()[1], value);
+      this.i32 = value;
+      fieldSetFlags()[1] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;i32&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;i32&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasI32() &lt;/p&gt;
{
+      return fieldSetFlags()[1];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;i32&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder clearI32() &lt;/p&gt;
{
+      fieldSetFlags()[1] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;i64&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.lang.Long getI64() &lt;/p&gt;
{
+      return i64;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;i64&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;i64&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder setI64(long value) &lt;/p&gt;
{
+      validate(fields()[2], value);
+      this.i64 = value;
+      fieldSetFlags()[2] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;i64&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;i64&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasI64() &lt;/p&gt;
{
+      return fieldSetFlags()[2];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;i64&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder clearI64() &lt;/p&gt;
{
+      fieldSetFlags()[2] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;f32&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.lang.Float getF32() &lt;/p&gt;
{
+      return f32;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;f32&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;f32&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder setF32(float value) &lt;/p&gt;
{
+      validate(fields()[3], value);
+      this.f32 = value;
+      fieldSetFlags()[3] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;f32&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;f32&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasF32() &lt;/p&gt;
{
+      return fieldSetFlags()[3];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;f32&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder clearF32() &lt;/p&gt;
{
+      fieldSetFlags()[3] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;f64&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.lang.Double getF64() &lt;/p&gt;
{
+      return f64;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;f64&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;f64&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder setF64(double value) &lt;/p&gt;
{
+      validate(fields()[4], value);
+      this.f64 = value;
+      fieldSetFlags()[4] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;f64&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;f64&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasF64() &lt;/p&gt;
{
+      return fieldSetFlags()[4];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;f64&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder clearF64() &lt;/p&gt;
{
+      fieldSetFlags()[4] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;s&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.lang.CharSequence getS() &lt;/p&gt;
{
+      return s;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;s&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;s&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder setS(java.lang.CharSequence value) &lt;/p&gt;
{
+      validate(fields()[5], value);
+      this.s = value;
+      fieldSetFlags()[5] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;s&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;s&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasS() &lt;/p&gt;
{
+      return fieldSetFlags()[5];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;s&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder clearS() &lt;/p&gt;
{
+      s = null;
+      fieldSetFlags()[5] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;d&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.time.LocalDate getD() &lt;/p&gt;
{
+      return d;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;d&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;d&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder setD(java.time.LocalDate value) &lt;/p&gt;
{
+      validate(fields()[6], value);
+      this.d = value;
+      fieldSetFlags()[6] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;d&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;d&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasD() &lt;/p&gt;
{
+      return fieldSetFlags()[6];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;d&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder clearD() &lt;/p&gt;
{
+      fieldSetFlags()[6] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;t&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.time.LocalTime getT() &lt;/p&gt;
{
+      return t;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;t&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;t&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder setT(java.time.LocalTime value) &lt;/p&gt;
{
+      validate(fields()[7], value);
+      this.t = value;
+      fieldSetFlags()[7] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;t&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;t&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasT() &lt;/p&gt;
{
+      return fieldSetFlags()[7];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;t&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder clearT() &lt;/p&gt;
{
+      fieldSetFlags()[7] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;ts&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.time.Instant getTs() &lt;/p&gt;
{
+      return ts;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;ts&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;ts&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder setTs(java.time.Instant value) &lt;/p&gt;
{
+      validate(fields()[8], value);
+      this.ts = value;
+      fieldSetFlags()[8] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;ts&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;ts&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasTs() &lt;/p&gt;
{
+      return fieldSetFlags()[8];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;ts&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder clearTs() &lt;/p&gt;
{
+      fieldSetFlags()[8] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;dec&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.math.BigDecimal getDec() &lt;/p&gt;
{
+      return dec;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;dec&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;dec&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder setDec(java.math.BigDecimal value) &lt;/p&gt;
{
+      validate(fields()[9], value);
+      this.dec = value;
+      fieldSetFlags()[9] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;dec&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;dec&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasDec() &lt;/p&gt;
{
+      return fieldSetFlags()[9];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;dec&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes.Builder clearDec() &lt;/p&gt;
{
+      dec = null;
+      fieldSetFlags()[9] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+    public TestRecordWithJsr310LogicalTypes build() {&lt;br/&gt;
+      try &lt;/p&gt;
{
+        TestRecordWithJsr310LogicalTypes record = new TestRecordWithJsr310LogicalTypes();
+        record.b = fieldSetFlags()[0] ? this.b : (java.lang.Boolean) defaultValue(fields()[0], record.getConversion(0));
+        record.i32 = fieldSetFlags()[1] ? this.i32 : (java.lang.Integer) defaultValue(fields()[1], record.getConversion(1));
+        record.i64 = fieldSetFlags()[2] ? this.i64 : (java.lang.Long) defaultValue(fields()[2], record.getConversion(2));
+        record.f32 = fieldSetFlags()[3] ? this.f32 : (java.lang.Float) defaultValue(fields()[3], record.getConversion(3));
+        record.f64 = fieldSetFlags()[4] ? this.f64 : (java.lang.Double) defaultValue(fields()[4], record.getConversion(4));
+        record.s = fieldSetFlags()[5] ? this.s : (java.lang.CharSequence) defaultValue(fields()[5], record.getConversion(5));
+        record.d = fieldSetFlags()[6] ? this.d : (java.time.LocalDate) defaultValue(fields()[6], record.getConversion(6));
+        record.t = fieldSetFlags()[7] ? this.t : (java.time.LocalTime) defaultValue(fields()[7], record.getConversion(7));
+        record.ts = fieldSetFlags()[8] ? this.ts : (java.time.Instant) defaultValue(fields()[8], record.getConversion(8));
+        record.dec = fieldSetFlags()[9] ? this.dec : (java.math.BigDecimal) defaultValue(fields()[9], record.getConversion(9));
+        return record;
+      }
&lt;p&gt; catch (java.lang.Exception e) &lt;/p&gt;
{
+        throw new org.apache.avro.AvroRuntimeException(e);
+      }
&lt;p&gt;+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+  private static final org.apache.avro.io.DatumWriter&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt;&lt;br/&gt;
+    WRITER$ = (org.apache.avro.io.DatumWriter&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt;)MODEL$.createDatumWriter(SCHEMA$);&lt;br/&gt;
+&lt;br/&gt;
+  @Override public void writeExternal(java.io.ObjectOutput out)&lt;br/&gt;
+    throws java.io.IOException &lt;/p&gt;
{
+    WRITER$.write(this, SpecificData.getEncoder(out));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+  private static final org.apache.avro.io.DatumReader&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt;&lt;br/&gt;
+    READER$ = (org.apache.avro.io.DatumReader&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt;)MODEL$.createDatumReader(SCHEMA$);&lt;br/&gt;
+&lt;br/&gt;
+  @Override public void readExternal(java.io.ObjectInput in)&lt;br/&gt;
+    throws java.io.IOException &lt;/p&gt;
{
+    READER$.read(this, SpecificData.getDecoder(in));
+  }
&lt;p&gt;+&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithLogicalTypes.java b/lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithLogicalTypes.java&lt;br/&gt;
index 493a8e67c..17e74ae2f 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithLogicalTypes.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithLogicalTypes.java&lt;br/&gt;
@@ -5,6 +5,7 @@&lt;br/&gt;
  */&lt;br/&gt;
 package org.apache.avro.specific;&lt;/p&gt;

&lt;p&gt;+import org.apache.avro.data.TimeConversions;&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageDecoder;&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageEncoder;&lt;/p&gt;

&lt;p&gt;@@ -264,9 +265,9 @@ public void setTs(org.joda.time.DateTime value) &lt;/p&gt;
{
     this.ts = value;
   }

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();&lt;/li&gt;
	&lt;li&gt;protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();&lt;/li&gt;
	&lt;li&gt;protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();&lt;br/&gt;
+  protected static final TimeConversions.DateConversion DATE_CONVERSION = new TimeConversions.DateConversion();&lt;br/&gt;
+  protected static final TimeConversions.TimeConversion TIME_CONVERSION = new TimeConversions.TimeConversion();&lt;br/&gt;
+  protected static final TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new TimeConversions.TimestampConversion();&lt;br/&gt;
   protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();&lt;br/&gt;
   private final org.apache.avro.Conversion&amp;lt;?&amp;gt;[] conversions =&lt;br/&gt;
       new org.apache.avro.Conversion&amp;lt;?&amp;gt;[] {&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java b/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java&lt;br/&gt;
index 933cd8189..a07dec5c8 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java&lt;br/&gt;
@@ -32,6 +32,7 @@&lt;br/&gt;
 import org.joda.time.DateTimeZone;&lt;br/&gt;
 import org.joda.time.LocalDate;&lt;br/&gt;
 import org.joda.time.LocalTime;&lt;br/&gt;
+import org.joda.time.format.ISODateTimeFormat;&lt;br/&gt;
 import org.junit.Assert;&lt;br/&gt;
 import org.junit.Rule;&lt;br/&gt;
 import org.junit.Test;&lt;br/&gt;
@@ -42,6 +43,14 @@&lt;br/&gt;
 import java.util.ArrayList;&lt;br/&gt;
 import java.util.List;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+import static java.time.format.DateTimeFormatter.ISO_INSTANT;&lt;br/&gt;
+import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;&lt;br/&gt;
+import static java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;&lt;br/&gt;
+import static org.hamcrest.Matchers.comparesEqualTo;&lt;br/&gt;
+import static org.hamcrest.Matchers.empty;&lt;br/&gt;
+import static org.hamcrest.Matchers.is;&lt;br/&gt;
+import static org.hamcrest.Matchers.not;&lt;br/&gt;
+&lt;br/&gt;
 /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;This tests compatibility between classes generated before and after&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1684&quot; title=&quot;Add date, time, and timestamp to specific object model classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1684&quot;&gt;&lt;del&gt;AVRO-1684&lt;/del&gt;&lt;/a&gt;. TestRecordWithoutLogicalTypes and TestRecordWithLogicalTypes were&lt;br/&gt;
@@ -53,6 +62,10 @@&lt;/li&gt;
	&lt;li&gt;Avro with existing Avro-generated sources. When using classes generated&lt;/li&gt;
	&lt;li&gt;before &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1684&quot; title=&quot;Add date, time, and timestamp to specific object model classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1684&quot;&gt;&lt;del&gt;AVRO-1684&lt;/del&gt;&lt;/a&gt;, logical types should not be applied by the read or write&lt;/li&gt;
	&lt;li&gt;paths. Those files should behave as they did before.&lt;br/&gt;
+ *&lt;br/&gt;
+ * For &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt; 
{@link TestRecordWithJsr310LogicalTypes}
&lt;p&gt; was generated from&lt;br/&gt;
+ * the same schema and tests were added to test compatibility between the&lt;br/&gt;
+ * two versions.&lt;br/&gt;
  */&lt;br/&gt;
 public class TestSpecificLogicalTypes {&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@@ -80,6 +93,97 @@ public void testRecordWithLogicalTypes() throws IOException &lt;/p&gt;
{
 
     Assert.assertEquals(&quot;Should match written record&quot;, record, actual.get(0));
   }
&lt;p&gt;+  @Test&lt;br/&gt;
+  public void testRecordWithJsr310LogicalTypes() throws IOException &lt;/p&gt;
{
+    TestRecordWithJsr310LogicalTypes record = new TestRecordWithJsr310LogicalTypes(
+        true,
+        34,
+        35L,
+        3.14F,
+        3019.34,
+        null,
+        java.time.LocalDate.now(),
+        java.time.LocalTime.now(),
+        java.time.Instant.now(),
+        new BigDecimal(123.45f).setScale(2, BigDecimal.ROUND_HALF_DOWN)
+    );
+
+    File data = write(TestRecordWithJsr310LogicalTypes.getClassSchema(), record);
+    List&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt; actual = read(
+        TestRecordWithJsr310LogicalTypes.getClassSchema(), data);
+
+    Assert.assertEquals(&quot;Should match written record&quot;, record, actual.get(0));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testAbilityToReadJsr310RecordWrittenAsJodaRecord() throws IOException &lt;/p&gt;
{
+    TestRecordWithLogicalTypes withJoda = new TestRecordWithLogicalTypes(
+            true,
+            34,
+            35L,
+            3.14F,
+            3019.34,
+            null,
+            LocalDate.now(),
+            LocalTime.now(),
+            DateTime.now().withZone(DateTimeZone.UTC),
+            new BigDecimal(123.45f).setScale(2, BigDecimal.ROUND_HALF_DOWN)
+    );
+
+    File data = write(TestRecordWithLogicalTypes.getClassSchema(), withJoda);
+    List&amp;lt;TestRecordWithJsr310LogicalTypes&amp;gt; actual = read(
+        TestRecordWithJsr310LogicalTypes.getClassSchema(), data);
+
+    Assert.assertThat(actual, is(not(empty())));
+    TestRecordWithJsr310LogicalTypes withJsr310 = actual.get(0);
+
+    Assert.assertThat(withJsr310.getB(), is(withJoda.getB()));
+    Assert.assertThat(withJsr310.getI32(), is(withJoda.getI32()));
+    Assert.assertThat(withJsr310.getI64(), is(withJoda.getI64()));
+    Assert.assertThat(withJsr310.getF32(), is(withJoda.getF32()));
+    Assert.assertThat(withJsr310.getF64(), is(withJoda.getF64()));
+    Assert.assertThat(withJsr310.getS(), is(withJoda.getS()));
+
+    Assert.assertThat(ISO_LOCAL_DATE.format(withJsr310.getD()), is(ISODateTimeFormat.date().print(withJoda.getD())));
+    Assert.assertThat(ISO_LOCAL_TIME.format(withJsr310.getT()), is(ISODateTimeFormat.time().print(withJoda.getT())));
+    Assert.assertThat(ISO_INSTANT.format(withJsr310.getTs()), is(ISODateTimeFormat.dateTime().print(withJoda.getTs())));
+    Assert.assertThat(withJsr310.getDec(), comparesEqualTo(withJoda.getDec()));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testAbilityToReadJodaRecordWrittenAsJsr310Record() throws IOException &lt;/p&gt;
{
+    TestRecordWithJsr310LogicalTypes withJsr310 = new TestRecordWithJsr310LogicalTypes(
+            true,
+            34,
+            35L,
+            3.14F,
+            3019.34,
+            null,
+            java.time.LocalDate.now(),
+            java.time.LocalTime.now(),
+            java.time.Instant.now(),
+            new BigDecimal(123.45f).setScale(2, BigDecimal.ROUND_HALF_DOWN)
+    );
+
+    File data = write(TestRecordWithJsr310LogicalTypes.getClassSchema(), withJsr310);
+    List&amp;lt;TestRecordWithLogicalTypes&amp;gt; actual = read(
+        TestRecordWithLogicalTypes.getClassSchema(), data);
+
+    Assert.assertThat(actual, is(not(empty())));
+    TestRecordWithLogicalTypes withJoda = actual.get(0);
+
+    Assert.assertThat(withJoda.getB(), is(withJsr310.getB()));
+    Assert.assertThat(withJoda.getI32(), is(withJsr310.getI32()));
+    Assert.assertThat(withJoda.getI64(), is(withJsr310.getI64()));
+    Assert.assertThat(withJoda.getF32(), is(withJsr310.getF32()));
+    Assert.assertThat(withJoda.getF64(), is(withJsr310.getF64()));
+    Assert.assertThat(withJoda.getS(), is(withJsr310.getS()));
+    // all of these print in the ISO-8601 format
+    Assert.assertThat(withJoda.getD().toString(), is(withJsr310.getD().toString()));
+    Assert.assertThat(withJoda.getT().toString(), is(withJsr310.getT().toString()));
+    Assert.assertThat(withJoda.getTs().toString(), is(withJsr310.getTs().toString()));
+    Assert.assertThat(withJoda.getDec(), comparesEqualTo(withJsr310.getDec()));
+  }

&lt;p&gt;   @Test&lt;br/&gt;
   public void testRecordWithoutLogicalTypes() throws IOException {&lt;br/&gt;
@@ -198,17 +302,11 @@ public void testRecordWriteLogicalTypesReadPrimitives() throws IOException {&lt;br/&gt;
       throws IOException {&lt;br/&gt;
     DatumReader&amp;lt;D&amp;gt; reader = newReader(schema);&lt;br/&gt;
     List&amp;lt;D&amp;gt; data = new ArrayList&amp;lt;&amp;gt;();&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;FileReader&amp;lt;D&amp;gt; fileReader = null;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;try {&lt;/li&gt;
	&lt;li&gt;fileReader = new DataFileReader&amp;lt;&amp;gt;(file, reader);&lt;br/&gt;
+    try (FileReader&amp;lt;D&amp;gt; fileReader = new DataFileReader&amp;lt;&amp;gt;(file, reader)) {&lt;br/&gt;
       for (D datum : fileReader) 
{
         data.add(datum);
       }&lt;/li&gt;
	&lt;li&gt;} finally {&lt;/li&gt;
	&lt;li&gt;if (fileReader != null) 
{
-        fileReader.close();
-      }
&lt;p&gt;     }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     return data;&lt;br/&gt;
@@ -224,15 +322,12 @@ public void testRecordWriteLogicalTypesReadPrimitives() throws IOException {&lt;br/&gt;
       throws IOException {&lt;br/&gt;
     File file = temp.newFile();&lt;br/&gt;
     DatumWriter&amp;lt;D&amp;gt; writer = SpecificData.get().createDatumWriter(schema);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;DataFileWriter&amp;lt;D&amp;gt; fileWriter = new DataFileWriter&amp;lt;&amp;gt;(writer);&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;try {&lt;br/&gt;
+    try (DataFileWriter&amp;lt;D&amp;gt; fileWriter = new DataFileWriter&amp;lt;&amp;gt;(writer)) {&lt;br/&gt;
       fileWriter.create(schema, file);&lt;br/&gt;
       for (D datum : data) 
{
         fileWriter.append(datum);
       }&lt;/li&gt;
	&lt;li&gt;} finally 
{
-      fileWriter.close();
     }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     return file;&lt;br/&gt;
diff --git a/lang/java/avro/src/test/resources/record_with_logical_types.avsc b/lang/java/avro/src/test/resources/record_with_logical_types.avsc&lt;br/&gt;
index 9932f9505..f5d212917 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/resources/record_with_logical_types.avsc&lt;br/&gt;
+++ b/lang/java/avro/src/test/resources/record_with_logical_types.avsc&lt;br/&gt;
@@ -1,7 +1,7 @@&lt;br/&gt;
 {&lt;br/&gt;
   &quot;type&quot; : &quot;record&quot;,&lt;br/&gt;
   &quot;name&quot; : &quot;TestRecordWithLogicalTypes&quot;,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;doc&quot; : &quot;Schema for TestRecordWithLogicalTypes and TestRecordWithoutLogicalTypes, see TestSpecificLogicalTypes&quot;&lt;br/&gt;
+  &quot;doc&quot; : &quot;Schema for TestRecordWithLogicalTypes and TestRecordWithoutLogicalTypes, see TestSpecificLogicalTypes&quot;,&lt;br/&gt;
   &quot;namespace&quot; : &quot;org.apache.avro.specific&quot;,&lt;br/&gt;
   &quot;fields&quot; : [ {&lt;br/&gt;
     &quot;name&quot; : &quot;b&quot;,&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/ProtocolTask.java b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/ProtocolTask.java&lt;br/&gt;
index b7f943838..02a1af083 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/ProtocolTask.java&lt;br/&gt;
+++ b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/ProtocolTask.java&lt;br/&gt;
@@ -23,6 +23,7 @@&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; import org.apache.avro.AvroRuntimeException;&lt;br/&gt;
 import org.apache.avro.Protocol;&lt;br/&gt;
+import org.apache.avro.compiler.specific.SpecificCompiler.DateTimeLogicalTypeImplementation;&lt;br/&gt;
 import org.apache.avro.generic.GenericData.StringType;&lt;/p&gt;

&lt;p&gt; import org.apache.tools.ant.BuildException;&lt;br/&gt;
@@ -36,6 +37,7 @@&lt;br/&gt;
   private File src;&lt;br/&gt;
   private File dest = new File(&quot;.&quot;);&lt;br/&gt;
   private StringType stringType = StringType.CharSequence;&lt;br/&gt;
+  private DateTimeLogicalTypeImplementation dateTimeLogicalTypeImplementation = DateTimeLogicalTypeImplementation.JODA;&lt;/p&gt;

&lt;p&gt;   private final ArrayList&amp;lt;FileSet&amp;gt; filesets = new ArrayList&amp;lt;&amp;gt;();&lt;/p&gt;

&lt;p&gt;@@ -51,6 +53,16 @@&lt;br/&gt;
   /** Get the string type. */&lt;br/&gt;
   public StringType getStringType() &lt;/p&gt;
{ return this.stringType; }

&lt;p&gt;+  /** Sets the date/time logical type type (either JODA or JSR310) */&lt;br/&gt;
+  public void setDateTimeLogicalTypeImplementation(DateTimeLogicalTypeImplementation dateTimeLogicalTypeImplementation) &lt;/p&gt;
{
+    this.dateTimeLogicalTypeImplementation = dateTimeLogicalTypeImplementation;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /** Get the date/time logical type type (either JODA or JSR310) */&lt;br/&gt;
+  public DateTimeLogicalTypeImplementation getDateTimeLogicalTypeImplementation() &lt;/p&gt;
{
+    return dateTimeLogicalTypeImplementation;
+  }&lt;br/&gt;
+&lt;br/&gt;
   /** Add a fileset. */&lt;br/&gt;
   public void addFileset(FileSet set) { filesets.add(set); }&lt;br/&gt;
 &lt;br/&gt;
@@ -77,7 +89,7 @@ public void execute() {&lt;br/&gt;
 &lt;br/&gt;
   protected void doCompile(File src, File dir) throws IOException {
     Protocol protocol = Protocol.parse(src);
-    SpecificCompiler compiler = new SpecificCompiler(protocol);
+    SpecificCompiler compiler = new SpecificCompiler(protocol, getDateTimeLogicalTypeImplementation());
     compiler.setStringType(getStringType());
     compiler.compileToDestination(src, dest);
   }&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SchemaTask.java b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SchemaTask.java&lt;br/&gt;
index 306aff00e..9d2c244d3 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SchemaTask.java&lt;br/&gt;
+++ b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SchemaTask.java&lt;br/&gt;
@@ -28,7 +28,7 @@&lt;br/&gt;
   protected void doCompile(File src, File dest) throws IOException {
     Schema.Parser parser = new Schema.Parser();
     Schema schema = parser.parse(src);
-    SpecificCompiler compiler = new SpecificCompiler(schema);
+    SpecificCompiler compiler = new SpecificCompiler(schema, getDateTimeLogicalTypeImplementation());
     compiler.setStringType(getStringType());
     compiler.compileToDestination(src, dest);
   }&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
index d2fe6cc46..575462e73 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
+++ b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
@@ -37,9 +37,8 @@&lt;br/&gt;
 import org.apache.avro.Conversion;&lt;br/&gt;
 import org.apache.avro.Conversions;&lt;br/&gt;
 import org.apache.avro.LogicalTypes;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.DateConversion;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.TimeConversion;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.TimestampConversion;&lt;br/&gt;
+import org.apache.avro.data.Jsr310TimeConversions;&lt;br/&gt;
+import org.apache.avro.data.TimeConversions;&lt;br/&gt;
 import org.apache.avro.specific.SpecificData;&lt;br/&gt;
 import org.codehaus.jackson.JsonNode;&lt;br/&gt;
 &lt;br/&gt;
@@ -88,18 +87,35 @@&lt;br/&gt;
    */&lt;br/&gt;
   protected static final int MAX_FIELD_PARAMETER_UNIT_COUNT = JVM_METHOD_ARG_LIMIT - 1;&lt;br/&gt;
 &lt;br/&gt;
-  public static enum FieldVisibility {&lt;br/&gt;
+  public enum FieldVisibility {
     PUBLIC, PUBLIC_DEPRECATED, PRIVATE
   }&lt;br/&gt;
 &lt;br/&gt;
-  private static final SpecificData SPECIFIC = new SpecificData();&lt;br/&gt;
-  static {&lt;br/&gt;
-    SPECIFIC.addLogicalTypeConversion(new DateConversion());&lt;br/&gt;
-    SPECIFIC.addLogicalTypeConversion(new TimeConversion());&lt;br/&gt;
-    SPECIFIC.addLogicalTypeConversion(new TimestampConversion());&lt;br/&gt;
-    SPECIFIC.addLogicalTypeConversion(new Conversions.DecimalConversion());&lt;br/&gt;
+  public enum DateTimeLogicalTypeImplementation {&lt;br/&gt;
+    JODA {&lt;br/&gt;
+      @Override&lt;br/&gt;
+      void addLogicalTypeConversions(SpecificData specificData) {
+        specificData.addLogicalTypeConversion(new TimeConversions.DateConversion());
+        specificData.addLogicalTypeConversion(new TimeConversions.TimeConversion());
+        specificData.addLogicalTypeConversion(new TimeConversions.TimestampConversion());
+      }&lt;br/&gt;
+    },&lt;br/&gt;
+    JSR310 {&lt;br/&gt;
+      @Override&lt;br/&gt;
+      void addLogicalTypeConversions(SpecificData specificData) {
+        specificData.addLogicalTypeConversion(new Jsr310TimeConversions.DateConversion());
+        specificData.addLogicalTypeConversion(new Jsr310TimeConversions.TimeMillisConversion());
+        specificData.addLogicalTypeConversion(new Jsr310TimeConversions.TimestampMillisConversion());
+      }&lt;br/&gt;
+    };&lt;br/&gt;
+&lt;br/&gt;
+    public static final DateTimeLogicalTypeImplementation DEFAULT = JODA;&lt;br/&gt;
+&lt;br/&gt;
+    abstract void addLogicalTypeConversions(SpecificData specificData);&lt;br/&gt;
   }&lt;br/&gt;
 &lt;br/&gt;
+  private final SpecificData specificData = new SpecificData();&lt;br/&gt;
+&lt;br/&gt;
   private final Set&amp;lt;Schema&amp;gt; queue = new HashSet&amp;lt;&amp;gt;();&lt;br/&gt;
   private Protocol protocol;&lt;br/&gt;
   private VelocityEngine velocityEngine;&lt;br/&gt;
@@ -109,6 +125,7 @@&lt;br/&gt;
   private boolean createAllArgsConstructor = true;&lt;br/&gt;
   private String outputCharacterEncoding;&lt;br/&gt;
   private boolean enableDecimalLogicalType = false;&lt;br/&gt;
+  private final DateTimeLogicalTypeImplementation dateTimeLogicalTypeImplementation;&lt;br/&gt;
   private String suffix = &quot;.java&quot;;&lt;br/&gt;
 &lt;br/&gt;
   /*&lt;br/&gt;
@@ -144,7 +161,11 @@ public boolean isCreateAllArgsConstructor() {&lt;br/&gt;
       &quot; */\n&quot;;&lt;br/&gt;
 &lt;br/&gt;
   public SpecificCompiler(Protocol protocol) {
-    this();
+    this(protocol, DateTimeLogicalTypeImplementation.JODA);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  public SpecificCompiler(Protocol protocol, DateTimeLogicalTypeImplementation dateTimeLogicalTypeImplementation) {&lt;br/&gt;
+    this(dateTimeLogicalTypeImplementation);&lt;br/&gt;
     // enqueue all types&lt;br/&gt;
     for (Schema s : protocol.getTypes()) {&lt;br/&gt;
       enqueue(s);&lt;br/&gt;
@@ -153,16 +174,38 @@ public SpecificCompiler(Protocol protocol) {&lt;br/&gt;
   }&lt;br/&gt;
 &lt;br/&gt;
   public SpecificCompiler(Schema schema) {
-    this();
+    this(schema, DateTimeLogicalTypeImplementation.JODA);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  public SpecificCompiler(Schema schema, DateTimeLogicalTypeImplementation dateTimeLogicalTypeImplementation) {
+    this(dateTimeLogicalTypeImplementation);
     enqueue(schema);
     this.protocol = null;
   }&lt;br/&gt;
 &lt;br/&gt;
+  /**&lt;br/&gt;
+   * Creates a specific compiler with the default (Joda) type for date/time related logical types.&lt;br/&gt;
+   *&lt;br/&gt;
+   * @see #SpecificCompiler(DateTimeLogicalTypeImplementation)&lt;br/&gt;
+   */&lt;br/&gt;
   SpecificCompiler() {
+    this(DateTimeLogicalTypeImplementation.JODA);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Creates a specific compiler with the given type to use for date/time related logical types.&lt;br/&gt;
+   * Use {@link DateTimeLogicalTypeImplementation#JODA} to generate Joda Time classes, use {@link DateTimeLogicalTypeImplementation#JSR310}&lt;br/&gt;
+   * to generate {@code java.time.*} classes for the date/time local types.&lt;br/&gt;
+   *&lt;br/&gt;
+   * @param dateTimeLogicalTypeImplementation the types used for date/time related logical types&lt;br/&gt;
+   */&lt;br/&gt;
+  SpecificCompiler(DateTimeLogicalTypeImplementation dateTimeLogicalTypeImplementation) {
+    this.dateTimeLogicalTypeImplementation = dateTimeLogicalTypeImplementation;
     this.templateDir =
       System.getProperty(&quot;org.apache.avro.specific.templates&quot;,
                          &quot;/org/apache/avro/compiler/specific/templates/java/classic/&quot;);
     initializeVelocity();
+    initializeSpecificData();
   }&lt;br/&gt;
 &lt;br/&gt;
   /** Set the resource directory where templates reside. First, the compiler checks&lt;br/&gt;
@@ -225,6 +268,10 @@ public void setEnableDecimalLogicalType(boolean enableDecimalLogicalType) {
     this.enableDecimalLogicalType = enableDecimalLogicalType;
   }&lt;br/&gt;
 &lt;br/&gt;
+  public DateTimeLogicalTypeImplementation getDateTimeLogicalTypeImplementation() {+    return dateTimeLogicalTypeImplementation;+  }
&lt;p&gt;+&lt;br/&gt;
   private static String logChuteName = null;&lt;/p&gt;

&lt;p&gt;   private void initializeVelocity() {&lt;br/&gt;
@@ -253,6 +300,11 @@ private void initializeVelocity() &lt;/p&gt;
{
     velocityEngine.setProperty(&quot;runtime.log.logsystem.class&quot;, logChuteName);
   }

&lt;p&gt;+  private void initializeSpecificData() &lt;/p&gt;
{
+    dateTimeLogicalTypeImplementation.addLogicalTypeConversions(specificData);
+    specificData.addLogicalTypeConversion(new Conversions.DecimalConversion());
+  }
&lt;p&gt;+&lt;br/&gt;
   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Captures output file path and contents.&lt;br/&gt;
    */&lt;br/&gt;
@@ -324,7 +376,7 @@ public static void compileSchema(File[] srcFiles, File dest) throws IOException&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     for (File src : srcFiles) &lt;/p&gt;
{
       Schema schema = parser.parse(src);
-      SpecificCompiler compiler = new SpecificCompiler(schema);
+      SpecificCompiler compiler = new SpecificCompiler(schema, DateTimeLogicalTypeImplementation.JODA);
       compiler.compileToDestination(src, dest);
     }
&lt;p&gt;   }&lt;br/&gt;
@@ -630,7 +682,7 @@ private String javaType(Schema schema, boolean checkConvertedLogicalType) {&lt;br/&gt;
   private String getConvertedLogicalType(Schema schema) {&lt;br/&gt;
     if (enableDecimalLogicalType&lt;/p&gt;
&lt;div class=&apos;table-wrap&apos;&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; !(schema.getLogicalType() instanceof LogicalTypes.Decimal)) {
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Conversion&amp;lt;?&amp;gt; conversion = SPECIFIC&lt;br/&gt;
+      Conversion&amp;lt;?&amp;gt; conversion = specificData&lt;br/&gt;
           .getConversionFor(schema.getLogicalType());&lt;br/&gt;
       if (conversion != null) {&lt;br/&gt;
         return conversion.getConvertedType().getName();&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
index de7fd1c33..045c7e1ef 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
+++ b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
@@ -161,10 +161,16 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
   }&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;


&lt;p&gt; #if ($this.hasLogicalTypeField($schema))&lt;br/&gt;
+  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();&lt;br/&gt;
+#if ($this.getDateTimeLogicalTypeImplementation().name() == &quot;JODA&quot;)&lt;br/&gt;
   protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();&lt;br/&gt;
   protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();&lt;br/&gt;
   protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();&lt;br/&gt;
+#elseif ($this.getDateTimeLogicalTypeImplementation().name() == &quot;JSR310&quot;)&lt;br/&gt;
+  protected static final org.apache.avro.data.Jsr310TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.Jsr310TimeConversions.DateConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.Jsr310TimeConversions.TimeMillisConversion TIME_CONVERSION = new org.apache.avro.data.Jsr310TimeConversions.TimeMillisConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.Jsr310TimeConversions.TimestampMillisConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.Jsr310TimeConversions.TimestampMillisConversion();&lt;br/&gt;
+#end&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   private static final org.apache.avro.Conversion&amp;lt;?&amp;gt;[] conversions =&lt;br/&gt;
       new org.apache.avro.Conversion&amp;lt;?&amp;gt;[] &lt;/p&gt;
{
diff --git a/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java b/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java
index 3b4e35880..b5b3a0ab2 100644
--- a/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java
+++ b/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java
@@ -17,6 +17,8 @@
  */
 package org.apache.avro.compiler.specific;
 
+import static org.apache.avro.compiler.specific.SpecificCompiler.DateTimeLogicalTypeImplementation.JODA;
+import static org.apache.avro.compiler.specific.SpecificCompiler.DateTimeLogicalTypeImplementation.JSR310;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -142,9 +144,13 @@ private static Schema createSampleRecordSchema(int numStringFields, int numDoubl
   }

&lt;p&gt;   private SpecificCompiler createCompiler() throws IOException &lt;/p&gt;
{
+    return createCompiler(JODA);
+  }
&lt;p&gt;+&lt;br/&gt;
+  private SpecificCompiler createCompiler(SpecificCompiler.DateTimeLogicalTypeImplementation dateTimeLogicalTypeImplementation) throws IOException {&lt;br/&gt;
     Schema.Parser parser = new Schema.Parser();&lt;br/&gt;
     Schema schema = parser.parse(this.src);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SpecificCompiler compiler = new SpecificCompiler(schema);&lt;br/&gt;
+    SpecificCompiler compiler = new SpecificCompiler(schema, dateTimeLogicalTypeImplementation);&lt;br/&gt;
     compiler.setTemplateDir(this.velocityTemplateDir);&lt;br/&gt;
     compiler.setStringType(StringType.CharSequence);&lt;br/&gt;
     return compiler;&lt;br/&gt;
@@ -407,6 +413,26 @@ public void testJavaTypeWithDecimalLogicalTypeDisabled() throws Exception 
{
         &quot;java.lang.CharSequence&quot;, compiler.javaType(uuidSchema));
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  @Test&lt;br/&gt;
+  public void testJavaTypeWithJsr310DateTimeTypes() throws Exception &lt;/p&gt;
{
+    SpecificCompiler compiler = createCompiler(JSR310);
+
+    Schema dateSchema = LogicalTypes.date()
+        .addToSchema(Schema.create(Schema.Type.INT));
+    Schema timeSchema = LogicalTypes.timeMillis()
+        .addToSchema(Schema.create(Schema.Type.INT));
+    Schema timestampSchema = LogicalTypes.timestampMillis()
+        .addToSchema(Schema.create(Schema.Type.LONG));
+
+    // Date/time types should always use upper level java classes
+    Assert.assertEquals(&quot;Should use java.time.LocalDate for date type&quot;,
+        &quot;java.time.LocalDate&quot;, compiler.javaType(dateSchema));
+    Assert.assertEquals(&quot;Should use java.time.LocalTime for time-millis type&quot;,
+        &quot;java.time.LocalTime&quot;, compiler.javaType(timeSchema));
+    Assert.assertEquals(&quot;Should use java.time.Instant for timestamp-millis type&quot;,
+        &quot;java.time.Instant&quot;, compiler.javaType(timestampSchema));
+  }
&lt;p&gt;+&lt;br/&gt;
   @Test&lt;br/&gt;
   public void testJavaUnbox() throws Exception {&lt;br/&gt;
     SpecificCompiler compiler = createCompiler();&lt;br/&gt;
@@ -442,7 +468,26 @@ public void testJavaUnbox() throws Exception &lt;/p&gt;
{
         &quot;org.joda.time.LocalTime&quot;, compiler.javaUnbox(timeSchema));
     Assert.assertEquals(&quot;Should use Joda DateTime for timestamp-millis type&quot;,
         &quot;org.joda.time.DateTime&quot;, compiler.javaUnbox(timestampSchema));
+  }

&lt;p&gt;+  @Test&lt;br/&gt;
+  public void testJavaUnboxJsr310DateTime() throws Exception &lt;/p&gt;
{
+    SpecificCompiler compiler = createCompiler(JSR310);
+
+    Schema dateSchema = LogicalTypes.date()
+        .addToSchema(Schema.create(Schema.Type.INT));
+    Schema timeSchema = LogicalTypes.timeMillis()
+        .addToSchema(Schema.create(Schema.Type.INT));
+    Schema timestampSchema = LogicalTypes.timestampMillis()
+        .addToSchema(Schema.create(Schema.Type.LONG));
+    // Date/time types should always use upper level java classes, even though
+    // their underlying representations are primitive types
+    Assert.assertEquals(&quot;Should use java.time.LocalDate for date type&quot;,
+        &quot;java.time.LocalDate&quot;, compiler.javaUnbox(dateSchema));
+    Assert.assertEquals(&quot;Should use java.time.LocalTime for time-millis type&quot;,
+        &quot;java.time.LocalTime&quot;, compiler.javaUnbox(timeSchema));
+    Assert.assertEquals(&quot;Should use java.time.Instant for timestamp-millis type&quot;,
+        &quot;java.time.Instant&quot;, compiler.javaUnbox(timestampSchema));
   }

&lt;p&gt;   @Test&lt;br/&gt;
@@ -513,6 +558,14 @@ public void testUnionAndFixedFields() throws Exception &lt;/p&gt;
{
         new SpecificCompiler(unionTypesWithMultipleFields).compile());
   }

&lt;p&gt;+  @Test&lt;br/&gt;
+  public void testLogicalTypesWithMultipleFieldsJsr310DateTime() throws Exception &lt;/p&gt;
{
+    Schema logicalTypesWithMultipleFields = new Schema.Parser().parse(
+        new File(&quot;src/test/resources/logical_types_with_multiple_fields.avsc&quot;));
+    assertCompilesWithJavaCompiler(
+        new SpecificCompiler(logicalTypesWithMultipleFields, JSR310).compile());
+  }
&lt;p&gt;+&lt;br/&gt;
   @Test&lt;br/&gt;
   public void testConversionInstanceWithDecimalLogicalTypeDisabled() throws Exception &lt;/p&gt;
{
     SpecificCompiler compiler = createCompiler();
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java
index eb51f7675..3ddb0629b 100644
--- a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java
@@ -23,7 +23,7 @@
 import java.util.Arrays;
 
 import org.apache.avro.compiler.specific.SpecificCompiler;
-
+import org.apache.avro.compiler.specific.SpecificCompiler.DateTimeLogicalTypeImplementation;
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.project.MavenProject;
@@ -129,6 +129,14 @@
    */
   protected boolean enableDecimalLogicalType;
 
+  /**
+   * Determines which type of classes to generate for date/time related logical types. Either &apos;joda&apos; or &apos;jsr310&apos;.
+   * Defaults to joda for backwards compatibility reasons.
+   *
+   * @parameter default-value=&quot;joda&quot;
+   */
+  protected String dateTimeLogicalTypeImplementation = DateTimeLogicalTypeImplementation.JODA.name().toLowerCase();
+
   /**
    * The current Maven project.
    *
@@ -237,6 +245,22 @@ private void compileFiles(String[] files, File sourceDir, File outDir) throws Mo
     }
&lt;p&gt;   }&lt;/p&gt;

&lt;p&gt;+  protected DateTimeLogicalTypeImplementation getDateTimeLogicalTypeImplementation() {&lt;br/&gt;
+    try {&lt;br/&gt;
+      if (this.dateTimeLogicalTypeImplementation == null || this.dateTimeLogicalTypeImplementation.isEmpty()) &lt;/p&gt;
{
+        return DateTimeLogicalTypeImplementation.DEFAULT;
+      }
&lt;p&gt; else &lt;/p&gt;
{
+        String upper = String.valueOf(this.dateTimeLogicalTypeImplementation).trim().toUpperCase();
+        return DateTimeLogicalTypeImplementation.valueOf(upper);
+      }
&lt;p&gt;+    } catch (IllegalArgumentException e) &lt;/p&gt;
{
+      getLog().warn(&quot;Unknown value &apos;&quot; + this.dateTimeLogicalTypeImplementation
+        + &quot;&apos; for property dateTimeLogicalTypeImplementation; using &apos;&quot;
+        + DateTimeLogicalTypeImplementation.DEFAULT.name().toLowerCase() + &quot;&apos; instead&quot;);
+      return DateTimeLogicalTypeImplementation.DEFAULT;
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
   protected abstract void doCompile(String filename, File sourceDirectory, File outputDirectory) throws IOException;&lt;/p&gt;

&lt;p&gt;   protected abstract String[] getIncludes();&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java&lt;br/&gt;
index 3c9542e3a..3ee7fcb00 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java&lt;br/&gt;
@@ -88,7 +88,7 @@ protected void doCompile(String filename, File sourceDirectory, File outputDirec&lt;br/&gt;
       Protocol p = parser.CompilationUnit();&lt;br/&gt;
       String json = p.toString(true);&lt;br/&gt;
       Protocol protocol = Protocol.parse(json);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SpecificCompiler compiler = new SpecificCompiler(protocol);&lt;br/&gt;
+      SpecificCompiler compiler = new SpecificCompiler(protocol, getDateTimeLogicalTypeImplementation());&lt;br/&gt;
       compiler.setStringType(GenericData.StringType.valueOf(stringType));&lt;br/&gt;
       compiler.setTemplateDir(templateDirectory);&lt;br/&gt;
       compiler.setFieldVisibility(getFieldVisibility());&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java&lt;br/&gt;
index a4dbe65af..25ee56ba1 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java&lt;br/&gt;
@@ -56,7 +56,7 @@&lt;br/&gt;
   protected void doCompile(String filename, File sourceDirectory, File outputDirectory) throws IOException 
{
     File src = new File(sourceDirectory, filename);
     Protocol protocol = Protocol.parse(src);
-    SpecificCompiler compiler = new SpecificCompiler(protocol);
+    SpecificCompiler compiler = new SpecificCompiler(protocol, getDateTimeLogicalTypeImplementation());
     compiler.setTemplateDir(templateDirectory);
     compiler.setStringType(StringType.valueOf(stringType));
     compiler.setFieldVisibility(getFieldVisibility());
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java
index 2d6671f6b..ab9d0eb29 100644
--- a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java
@@ -73,7 +73,7 @@ protected void doCompile(String filename, File sourceDirectory, File outputDirec
       schema = schemaParser.parse(src);
     }&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SpecificCompiler compiler = new SpecificCompiler(schema);&lt;br/&gt;
+    SpecificCompiler compiler = new SpecificCompiler(schema, getDateTimeLogicalTypeImplementation());&lt;br/&gt;
     compiler.setTemplateDir(templateDirectory);&lt;br/&gt;
     compiler.setStringType(StringType.valueOf(stringType));&lt;br/&gt;
     compiler.setFieldVisibility(getFieldVisibility());&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/avro/User.avdl b/lang/java/maven-plugin/src/test/avro/User.avdl&lt;br/&gt;
index 4d4fa5a9a..cb63ee528 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/test/avro/User.avdl&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/avro/User.avdl&lt;br/&gt;
@@ -25,6 +25,7 @@ protocol IdlTest {&lt;br/&gt;
     record IdlUser 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {       union { null, string } id;       union { null, long } createdOn;+      timestamp_ms modifiedOn;       union { null, IdlPrivacy } privacy;     }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;diff --git a/lang/java/maven-plugin/src/test/avro/User.avpr b/lang/java/maven-plugin/src/test/avro/User.avpr&lt;br/&gt;
index 9d8a10958..6dd8b9b89 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/test/avro/User.avpr&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/avro/User.avpr&lt;br/&gt;
@@ -27,6 +27,13 @@&lt;br/&gt;
           &quot;name&quot;: &quot;privacy&quot;, &lt;br/&gt;
           &quot;type&quot;: &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;null&amp;quot;, &amp;quot;ProtocolPrivacy&amp;quot;&amp;#93;&lt;/span&gt;,&lt;br/&gt;
           &quot;default&quot;: null&lt;br/&gt;
+        },&lt;br/&gt;
+        {&lt;br/&gt;
+          &quot;name&quot;: &quot;modifiedOn&quot;,&lt;br/&gt;
+          &quot;type&quot;: &lt;/p&gt;
{
+            &quot;type&quot;: &quot;long&quot;,
+            &quot;logicalType&quot;: &quot;timestamp-millis&quot;
+          }
&lt;p&gt;         }&lt;br/&gt;
       ]&lt;br/&gt;
     } &lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/avro/User.avsc b/lang/java/maven-plugin/src/test/avro/User.avsc&lt;br/&gt;
index 0eb5e096e..a93e0d13f 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/test/avro/User.avsc&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/avro/User.avsc&lt;br/&gt;
@@ -33,6 +33,13 @@&lt;br/&gt;
             &quot;name&quot;: &quot;privacyDirectImport&quot;, &lt;br/&gt;
             &quot;type&quot;: &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;null&amp;quot;, &amp;quot;test.PrivacyDirectImport&amp;quot;&amp;#93;&lt;/span&gt;,&lt;br/&gt;
             &quot;default&quot;: null&lt;br/&gt;
+        },&lt;br/&gt;
+        {&lt;br/&gt;
+            &quot;name&quot;: &quot;time&quot;,&lt;br/&gt;
+            &quot;type&quot;: &lt;/p&gt;
{
+                &quot;type&quot;: &quot;long&quot;,
+                &quot;logicalType&quot;: &quot;timestamp-millis&quot;
+            }
&lt;p&gt;         }&lt;br/&gt;
     ]&lt;br/&gt;
 }&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/AbstractAvroMojoTest.java b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/AbstractAvroMojoTest.java&lt;br/&gt;
index 94a58703e..3a75a68d9 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/AbstractAvroMojoTest.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/AbstractAvroMojoTest.java&lt;br/&gt;
@@ -20,6 +20,7 @@&lt;br/&gt;
 import java.io.File;&lt;br/&gt;
 import java.util.Arrays;&lt;br/&gt;
 import java.util.List;&lt;br/&gt;
+&lt;br/&gt;
 import org.apache.maven.plugin.testing.AbstractMojoTestCase;&lt;/p&gt;

&lt;p&gt; /**&lt;br/&gt;
@@ -27,7 +28,7 @@&lt;br/&gt;
  *&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@author saden&lt;br/&gt;
  */&lt;br/&gt;
-public class AbstractAvroMojoTest extends AbstractMojoTestCase {&lt;br/&gt;
+public abstract class AbstractAvroMojoTest extends AbstractMojoTestCase {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   @Override&lt;br/&gt;
   protected void setUp() throws Exception {&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestIDLProtocolMojo.java b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestIDLProtocolMojo.java&lt;br/&gt;
index bdd41384b..e686fda63 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestIDLProtocolMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestIDLProtocolMojo.java&lt;br/&gt;
@@ -17,6 +17,8 @@&lt;br/&gt;
  */&lt;br/&gt;
 package org.apache.avro.mojo;&lt;/p&gt;

&lt;p&gt;+import org.codehaus.plexus.util.FileUtils;&lt;br/&gt;
+&lt;br/&gt;
 import java.io.File;&lt;/p&gt;

&lt;p&gt; /**&lt;br/&gt;
@@ -26,19 +28,36 @@&lt;br/&gt;
  */&lt;br/&gt;
 public class TestIDLProtocolMojo extends AbstractAvroMojoTest {&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;protected File testPom = new File(getBasedir(),&lt;/li&gt;
	&lt;li&gt;&quot;src/test/resources/unit/idl/pom.xml&quot;);&lt;br/&gt;
+  protected File jodaTestPom = new File(getBasedir(),&lt;br/&gt;
+          &quot;src/test/resources/unit/idl/pom-joda.xml&quot;);&lt;br/&gt;
+  protected File jsr310TestPom = new File(getBasedir(),&lt;br/&gt;
+          &quot;src/test/resources/unit/idl/pom-jsr310.xml&quot;);&lt;br/&gt;
+&lt;br/&gt;
+  public void testIdlProtocolMojoJoda() throws Exception 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    IDLProtocolMojo mojo = (IDLProtocolMojo) lookupMojo(&amp;quot;idl-protocol&amp;quot;, jodaTestPom);++    assertNotNull(mojo);+    mojo.execute();++    File outputDir = new File(getBasedir(), &amp;quot;target/test-harness/idl-joda/test&amp;quot;);+    String[] generatedFileNames = new String[]{&quot;IdlPrivacy.java&quot;,
+      &quot;IdlTest.java&quot;, &quot;IdlUser.java&quot;, &quot;IdlUserWrapper.java&quot;};++    String idlUserContent = FileUtils.fileRead(new File(outputDir, &amp;quot;IdlUser.java&amp;quot;));+    assertTrue(idlUserContent.contains(&amp;quot;org.joda.time.DateTime&amp;quot;));+  }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public void testIdlProtocolMojo() throws Exception {&lt;/li&gt;
	&lt;li&gt;IDLProtocolMojo mojo = (IDLProtocolMojo) lookupMojo(&quot;idl-protocol&quot;, testPom);&lt;br/&gt;
+  public void testIdlProtocolMojoJsr310() throws Exception {&lt;br/&gt;
+    IDLProtocolMojo mojo = (IDLProtocolMojo) lookupMojo(&quot;idl-protocol&quot;, jsr310TestPom);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     assertNotNull(mojo);&lt;br/&gt;
     mojo.execute();&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;File outputDir = new File(getBasedir(), &quot;target/test-harness/idl/test&quot;);&lt;/li&gt;
	&lt;li&gt;String[] generatedFiles = new String[]{&quot;IdlPrivacy.java&quot;,&lt;br/&gt;
+    File outputDir = new File(getBasedir(), &quot;target/test-harness/idl-jsr310/test&quot;);&lt;br/&gt;
+    String[] generatedFileNames = new String[]
{&quot;IdlPrivacy.java&quot;,
       &quot;IdlTest.java&quot;, &quot;IdlUser.java&quot;, &quot;IdlUserWrapper.java&quot;}
&lt;p&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertFilesExist(outputDir, generatedFiles);&lt;br/&gt;
+    String idlUserContent = FileUtils.fileRead(new File(outputDir, &quot;IdlUser.java&quot;));&lt;br/&gt;
+    assertTrue(idlUserContent.contains(&quot;java.time.Instant&quot;));&lt;br/&gt;
   }&lt;br/&gt;
 }&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestProtocolMojo.java b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestProtocolMojo.java&lt;br/&gt;
index 9618a9d41..be7fcd20e 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestProtocolMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestProtocolMojo.java&lt;br/&gt;
@@ -17,6 +17,8 @@&lt;br/&gt;
  */&lt;br/&gt;
 package org.apache.avro.mojo;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+import org.codehaus.plexus.util.FileUtils;&lt;br/&gt;
+&lt;br/&gt;
 import java.io.File;&lt;/p&gt;

&lt;p&gt; /**&lt;br/&gt;
@@ -26,19 +28,40 @@&lt;br/&gt;
  */&lt;br/&gt;
 public class TestProtocolMojo extends AbstractAvroMojoTest {&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;protected File testPom = new File(getBasedir(),&lt;/li&gt;
	&lt;li&gt;&quot;src/test/resources/unit/protocol/pom.xml&quot;);&lt;br/&gt;
+  protected File jodaTestPom = new File(getBasedir(),&lt;br/&gt;
+          &quot;src/test/resources/unit/protocol/pom-joda.xml&quot;);&lt;br/&gt;
+  protected File jsr310TestPom = new File(getBasedir(),&lt;br/&gt;
+          &quot;src/test/resources/unit/protocol/pom-jsr310.xml&quot;);&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public void testProtocolMojo() throws Exception {&lt;/li&gt;
	&lt;li&gt;ProtocolMojo mojo = (ProtocolMojo) lookupMojo(&quot;protocol&quot;, testPom);&lt;br/&gt;
+  public void testProtocolMojoJoda() throws Exception {&lt;br/&gt;
+    ProtocolMojo mojo = (ProtocolMojo) lookupMojo(&quot;protocol&quot;, jodaTestPom);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     assertNotNull(mojo);&lt;br/&gt;
     mojo.execute();&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;File outputDir = new File(getBasedir(), &quot;target/test-harness/protocol/test&quot;);&lt;br/&gt;
+    File outputDir = new File(getBasedir(), &quot;target/test-harness/protocol-joda/test&quot;);&lt;br/&gt;
     String[] generatedFiles = new String[]
{&quot;ProtocolPrivacy.java&quot;,
       &quot;ProtocolTest.java&quot;, &quot;ProtocolUser.java&quot;}
&lt;p&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     assertFilesExist(outputDir, generatedFiles);&lt;br/&gt;
+&lt;br/&gt;
+    String protocolUserContent = FileUtils.fileRead(new File(outputDir, &quot;ProtocolUser.java&quot;));&lt;br/&gt;
+    assertTrue(protocolUserContent.contains(&quot;org.joda.time.DateTime&quot;));&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  public void testProtocolMojoJsr310() throws Exception {&lt;br/&gt;
+    ProtocolMojo mojo = (ProtocolMojo) lookupMojo(&quot;protocol&quot;, jsr310TestPom);&lt;br/&gt;
+&lt;br/&gt;
+    assertNotNull(mojo);&lt;br/&gt;
+    mojo.execute();&lt;br/&gt;
+&lt;br/&gt;
+    File outputDir = new File(getBasedir(), &quot;target/test-harness/protocol-jsr310/test&quot;);&lt;br/&gt;
+    String[] generatedFiles = new String[]&lt;/p&gt;
{&quot;ProtocolPrivacy.java&quot;,
+            &quot;ProtocolTest.java&quot;, &quot;ProtocolUser.java&quot;}
&lt;p&gt;;&lt;br/&gt;
+&lt;br/&gt;
+    assertFilesExist(outputDir, generatedFiles);&lt;br/&gt;
+&lt;br/&gt;
+    String protocolUserContent = FileUtils.fileRead(new File(outputDir, &quot;ProtocolUser.java&quot;));&lt;br/&gt;
+    assertTrue(protocolUserContent.contains(&quot;java.time.Instant&quot;));&lt;br/&gt;
   }&lt;br/&gt;
 }&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestSchemaMojo.java b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestSchemaMojo.java&lt;br/&gt;
index 08d58715d..40ed5f69d 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestSchemaMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestSchemaMojo.java&lt;br/&gt;
@@ -17,6 +17,8 @@&lt;br/&gt;
  */&lt;br/&gt;
 package org.apache.avro.mojo;&lt;/p&gt;

&lt;p&gt;+import org.codehaus.plexus.util.FileUtils;&lt;br/&gt;
+&lt;br/&gt;
 import java.io.File;&lt;/p&gt;

&lt;p&gt; /**&lt;br/&gt;
@@ -26,19 +28,40 @@&lt;br/&gt;
  */&lt;br/&gt;
 public class TestSchemaMojo extends AbstractAvroMojoTest {&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;protected File testPom = new File(getBasedir(),&lt;/li&gt;
	&lt;li&gt;&quot;src/test/resources/unit/schema/pom.xml&quot;);&lt;br/&gt;
+  protected File jodaTestPom = new File(getBasedir(),&lt;br/&gt;
+          &quot;src/test/resources/unit/schema/pom-joda.xml&quot;);&lt;br/&gt;
+  protected File jsr310TestPom = new File(getBasedir(),&lt;br/&gt;
+          &quot;src/test/resources/unit/schema/pom-jsr310.xml&quot;);&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public void testSchemaMojo() throws Exception {&lt;/li&gt;
	&lt;li&gt;SchemaMojo mojo = (SchemaMojo) lookupMojo(&quot;schema&quot;, testPom);&lt;br/&gt;
+  public void testSchemaMojoJoda() throws Exception {&lt;br/&gt;
+    SchemaMojo mojo = (SchemaMojo) lookupMojo(&quot;schema&quot;, jodaTestPom);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     assertNotNull(mojo);&lt;br/&gt;
     mojo.execute();&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;File outputDir = new File(getBasedir(), &quot;target/test-harness/schema/test&quot;);&lt;br/&gt;
+    File outputDir = new File(getBasedir(), &quot;target/test-harness/schema-joda/test&quot;);&lt;br/&gt;
     String[] generatedFiles = new String[]
{&quot;PrivacyDirectImport.java&quot;,
       &quot;PrivacyImport.java&quot;, &quot;SchemaPrivacy.java&quot;, &quot;SchemaUser.java&quot;}
&lt;p&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     assertFilesExist(outputDir, generatedFiles);&lt;br/&gt;
+&lt;br/&gt;
+    String schemaUserContent = FileUtils.fileRead(new File(outputDir, &quot;SchemaUser.java&quot;));&lt;br/&gt;
+    assertTrue(schemaUserContent.contains(&quot;org.joda.time.DateTime&quot;));&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  public void testSchemaMojoJsr310() throws Exception {&lt;br/&gt;
+    SchemaMojo mojo = (SchemaMojo) lookupMojo(&quot;schema&quot;, jsr310TestPom);&lt;br/&gt;
+&lt;br/&gt;
+    assertNotNull(mojo);&lt;br/&gt;
+    mojo.execute();&lt;br/&gt;
+&lt;br/&gt;
+    File outputDir = new File(getBasedir(), &quot;target/test-harness/schema-jsr310/test&quot;);&lt;br/&gt;
+    String[] generatedFiles = new String[]&lt;/p&gt;
{&quot;PrivacyDirectImport.java&quot;,
+            &quot;PrivacyImport.java&quot;, &quot;SchemaPrivacy.java&quot;, &quot;SchemaUser.java&quot;}
&lt;p&gt;;&lt;br/&gt;
+&lt;br/&gt;
+    assertFilesExist(outputDir, generatedFiles);&lt;br/&gt;
+&lt;br/&gt;
+    String schemaUserContent = FileUtils.fileRead(new File(outputDir, &quot;SchemaUser.java&quot;));&lt;br/&gt;
+    assertTrue(schemaUserContent.contains(&quot;java.time.Instant&quot;));&lt;br/&gt;
   }&lt;br/&gt;
 }&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/resources/unit/idl/pom.xml b/lang/java/maven-plugin/src/test/resources/unit/idl/pom-joda.xml&lt;br/&gt;
similarity index 85%&lt;br/&gt;
rename from lang/java/maven-plugin/src/test/resources/unit/idl/pom.xml&lt;br/&gt;
rename to lang/java/maven-plugin/src/test/resources/unit/idl/pom-joda.xml&lt;br/&gt;
index 69c504bb3..92c761d2f 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/test/resources/unit/idl/pom.xml&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/resources/unit/idl/pom-joda.xml&lt;br/&gt;
@@ -18,12 +18,14 @@&lt;br/&gt;
 &amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br/&gt;
          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 &lt;a href=&quot;http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/xsd/maven-4.0.0.xsd&lt;/a&gt;&quot;&amp;gt;&lt;br/&gt;
   &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
   &amp;lt;parent&amp;gt;&lt;br/&gt;
     &amp;lt;artifactId&amp;gt;avro-parent&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
     &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&amp;lt;version&amp;gt;1.7.3-SNAPSHOT&amp;lt;/version&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;relativePath&amp;gt;../../../../../../../../../&amp;lt;/relativePath&amp;gt;&lt;br/&gt;
+    &amp;lt;version&amp;gt;1.9.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;relativePath&amp;gt;../../../../../../../../../pom.xml&amp;lt;/relativePath&amp;gt;&lt;br/&gt;
   &amp;lt;/parent&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
   &amp;lt;artifactId&amp;gt;avro-maven-plugin-test&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
   &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@@ -43,7 +45,9 @@&lt;br/&gt;
         &amp;lt;/executions&amp;gt;&lt;br/&gt;
         &amp;lt;configuration&amp;gt;&lt;br/&gt;
           &amp;lt;sourceDirectory&amp;gt;${basedir}/src/test&amp;lt;/sourceDirectory&amp;gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/idl&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/idl-joda&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;stringType&amp;gt;String&amp;lt;/stringType&amp;gt;&lt;br/&gt;
+          &amp;lt;dateTimeLogicalTypeImplementation&amp;gt;joda&amp;lt;/dateTimeLogicalTypeImplementation&amp;gt;&lt;br/&gt;
           &amp;lt;project implementation=&quot;org.apache.maven.plugin.testing.stubs.MavenProjectStub&quot;/&amp;gt;&lt;br/&gt;
         &amp;lt;/configuration&amp;gt;&lt;br/&gt;
       &amp;lt;/plugin&amp;gt;&lt;br/&gt;
@@ -53,7 +57,7 @@&lt;br/&gt;
     &amp;lt;dependency&amp;gt;&lt;br/&gt;
       &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
       &amp;lt;artifactId&amp;gt;avro&amp;lt;/artifactId&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;version&amp;gt;1.7.3-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;${parent.version}&amp;lt;/version&amp;gt;&lt;br/&gt;
     &amp;lt;/dependency&amp;gt;&lt;br/&gt;
     &amp;lt;dependency&amp;gt;&lt;br/&gt;
       &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/resources/unit/idl/pom-jsr310.xml b/lang/java/maven-plugin/src/test/resources/unit/idl/pom-jsr310.xml&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..5709945d3
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/resources/unit/idl/pom-jsr310.xml&lt;br/&gt;
@@ -0,0 +1,69 @@&lt;br/&gt;
+&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
+&amp;lt;!--&lt;br/&gt;
+   Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
+   contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
+   this work for additional information regarding copyright ownership.&lt;br/&gt;
+   The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
+   (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
+   the License.  You may obtain a copy of the License at&lt;br/&gt;
+&lt;br/&gt;
+       &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+&lt;br/&gt;
+   Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+   See the License for the specific language governing permissions and&lt;br/&gt;
+   limitations under the License.&lt;br/&gt;
+--&amp;gt;&lt;br/&gt;
+&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br/&gt;
+         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 &lt;a href=&quot;http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/xsd/maven-4.0.0.xsd&lt;/a&gt;&quot;&amp;gt;&lt;br/&gt;
+  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;parent&amp;gt;&lt;br/&gt;
+    &amp;lt;artifactId&amp;gt;avro-parent&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+    &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+    &amp;lt;version&amp;gt;1.9.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;relativePath&amp;gt;../../../../../../../../../pom.xml&amp;lt;/relativePath&amp;gt;&lt;br/&gt;
+  &amp;lt;/parent&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;artifactId&amp;gt;avro-maven-plugin-test&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+  &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;name&amp;gt;testproject&amp;lt;/name&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;build&amp;gt;&lt;br/&gt;
+    &amp;lt;plugins&amp;gt;&lt;br/&gt;
+      &amp;lt;plugin&amp;gt;&lt;br/&gt;
+        &amp;lt;artifactId&amp;gt;avro-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+        &amp;lt;executions&amp;gt;&lt;br/&gt;
+          &amp;lt;execution&amp;gt;&lt;br/&gt;
+            &amp;lt;id&amp;gt;idl&amp;lt;/id&amp;gt;&lt;br/&gt;
+            &amp;lt;goals&amp;gt;&lt;br/&gt;
+              &amp;lt;goal&amp;gt;idl-protocol&amp;lt;/goal&amp;gt;&lt;br/&gt;
+            &amp;lt;/goals&amp;gt;&lt;br/&gt;
+          &amp;lt;/execution&amp;gt;&lt;br/&gt;
+        &amp;lt;/executions&amp;gt;&lt;br/&gt;
+        &amp;lt;configuration&amp;gt;&lt;br/&gt;
+          &amp;lt;sourceDirectory&amp;gt;${basedir}/src/test&amp;lt;/sourceDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/idl-jsr310&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;stringType&amp;gt;String&amp;lt;/stringType&amp;gt;&lt;br/&gt;
+          &amp;lt;dateTimeLogicalTypeImplementation&amp;gt;jsr310&amp;lt;/dateTimeLogicalTypeImplementation&amp;gt;&lt;br/&gt;
+          &amp;lt;project implementation=&quot;org.apache.maven.plugin.testing.stubs.MavenProjectStub&quot;/&amp;gt;&lt;br/&gt;
+        &amp;lt;/configuration&amp;gt;&lt;br/&gt;
+      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
+    &amp;lt;/plugins&amp;gt;&lt;br/&gt;
+  &amp;lt;/build&amp;gt;&lt;br/&gt;
+  &amp;lt;dependencies&amp;gt;&lt;br/&gt;
+    &amp;lt;dependency&amp;gt;&lt;br/&gt;
+      &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+      &amp;lt;artifactId&amp;gt;avro&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;${parent.version}&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;/dependency&amp;gt;&lt;br/&gt;
+    &amp;lt;dependency&amp;gt;&lt;br/&gt;
+      &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+      &amp;lt;artifactId&amp;gt;jackson-mapper-asl&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;1.9.10&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;/dependency&amp;gt;&lt;br/&gt;
+  &amp;lt;/dependencies&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;/project&amp;gt;&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/resources/unit/protocol/pom.xml b/lang/java/maven-plugin/src/test/resources/unit/protocol/pom-joda.xml&lt;br/&gt;
similarity index 92%&lt;br/&gt;
rename from lang/java/maven-plugin/src/test/resources/unit/protocol/pom.xml&lt;br/&gt;
rename to lang/java/maven-plugin/src/test/resources/unit/protocol/pom-joda.xml&lt;br/&gt;
index b484e3dd4..68ddcdcd2 100644&lt;/li&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/test/resources/unit/protocol/pom.xml&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/resources/unit/protocol/pom-joda.xml&lt;br/&gt;
@@ -18,12 +18,14 @@&lt;br/&gt;
 &amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br/&gt;
          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 &lt;a href=&quot;http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/xsd/maven-4.0.0.xsd&lt;/a&gt;&quot;&amp;gt;&lt;br/&gt;
   &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
   &amp;lt;parent&amp;gt;&lt;br/&gt;
     &amp;lt;artifactId&amp;gt;avro-parent&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
     &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;&amp;lt;version&amp;gt;1.7.3-SNAPSHOT&amp;lt;/version&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;relativePath&amp;gt;../../../../../../../../../&amp;lt;/relativePath&amp;gt;&lt;br/&gt;
+    &amp;lt;version&amp;gt;1.9.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;relativePath&amp;gt;../../../../../../../../../pom.xml&amp;lt;/relativePath&amp;gt;&lt;br/&gt;
   &amp;lt;/parent&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
   &amp;lt;artifactId&amp;gt;avro-maven-plugin-test&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
   &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@@ -43,7 +45,7 @@&lt;br/&gt;
         &amp;lt;/executions&amp;gt;&lt;br/&gt;
         &amp;lt;configuration&amp;gt;&lt;br/&gt;
           &amp;lt;sourceDirectory&amp;gt;${basedir}/src/test/avro&amp;lt;/sourceDirectory&amp;gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/protocol&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/protocol-joda&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
           &amp;lt;project implementation=&quot;org.apache.maven.plugin.testing.stubs.MavenProjectStub&quot;/&amp;gt;&lt;br/&gt;
         &amp;lt;/configuration&amp;gt;&lt;br/&gt;
       &amp;lt;/plugin&amp;gt;&lt;br/&gt;
@@ -53,7 +55,7 @@&lt;br/&gt;
     &amp;lt;dependency&amp;gt;&lt;br/&gt;
       &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
       &amp;lt;artifactId&amp;gt;avro&amp;lt;/artifactId&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;version&amp;gt;1.7.3-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;${parent.version}&amp;lt;/version&amp;gt;&lt;br/&gt;
     &amp;lt;/dependency&amp;gt;&lt;br/&gt;
     &amp;lt;dependency&amp;gt;&lt;br/&gt;
       &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/resources/unit/protocol/pom-jsr310.xml b/lang/java/maven-plugin/src/test/resources/unit/protocol/pom-jsr310.xml&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..5ad5bba9f
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/resources/unit/protocol/pom-jsr310.xml&lt;br/&gt;
@@ -0,0 +1,68 @@&lt;br/&gt;
+&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
+&amp;lt;!--&lt;br/&gt;
+   Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
+   contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
+   this work for additional information regarding copyright ownership.&lt;br/&gt;
+   The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
+   (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
+   the License.  You may obtain a copy of the License at&lt;br/&gt;
+&lt;br/&gt;
+       &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+&lt;br/&gt;
+   Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+   See the License for the specific language governing permissions and&lt;br/&gt;
+   limitations under the License.&lt;br/&gt;
+--&amp;gt;&lt;br/&gt;
+&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br/&gt;
+         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 &lt;a href=&quot;http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/xsd/maven-4.0.0.xsd&lt;/a&gt;&quot;&amp;gt;&lt;br/&gt;
+  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;parent&amp;gt;&lt;br/&gt;
+    &amp;lt;artifactId&amp;gt;avro-parent&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+    &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+    &amp;lt;version&amp;gt;1.9.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;relativePath&amp;gt;../../../../../../../../../pom.xml&amp;lt;/relativePath&amp;gt;&lt;br/&gt;
+  &amp;lt;/parent&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;artifactId&amp;gt;avro-maven-plugin-test&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+  &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;name&amp;gt;testproject&amp;lt;/name&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;build&amp;gt;&lt;br/&gt;
+    &amp;lt;plugins&amp;gt;&lt;br/&gt;
+      &amp;lt;plugin&amp;gt;&lt;br/&gt;
+        &amp;lt;artifactId&amp;gt;avro-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+        &amp;lt;executions&amp;gt;&lt;br/&gt;
+          &amp;lt;execution&amp;gt;&lt;br/&gt;
+            &amp;lt;id&amp;gt;protocol&amp;lt;/id&amp;gt;&lt;br/&gt;
+            &amp;lt;goals&amp;gt;&lt;br/&gt;
+              &amp;lt;goal&amp;gt;protocol&amp;lt;/goal&amp;gt;&lt;br/&gt;
+            &amp;lt;/goals&amp;gt;&lt;br/&gt;
+          &amp;lt;/execution&amp;gt;&lt;br/&gt;
+        &amp;lt;/executions&amp;gt;&lt;br/&gt;
+        &amp;lt;configuration&amp;gt;&lt;br/&gt;
+          &amp;lt;sourceDirectory&amp;gt;${basedir}/src/test/avro&amp;lt;/sourceDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/protocol-jsr310&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;dateTimeLogicalTypeImplementation&amp;gt;jsr310&amp;lt;/dateTimeLogicalTypeImplementation&amp;gt;&lt;br/&gt;
+          &amp;lt;project implementation=&quot;org.apache.maven.plugin.testing.stubs.MavenProjectStub&quot;/&amp;gt;&lt;br/&gt;
+        &amp;lt;/configuration&amp;gt;&lt;br/&gt;
+      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
+    &amp;lt;/plugins&amp;gt;&lt;br/&gt;
+  &amp;lt;/build&amp;gt;&lt;br/&gt;
+  &amp;lt;dependencies&amp;gt;&lt;br/&gt;
+    &amp;lt;dependency&amp;gt;&lt;br/&gt;
+      &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+      &amp;lt;artifactId&amp;gt;avro&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;${parent.version}&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;/dependency&amp;gt;&lt;br/&gt;
+    &amp;lt;dependency&amp;gt;&lt;br/&gt;
+      &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+      &amp;lt;artifactId&amp;gt;jackson-mapper-asl&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;1.9.10&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;/dependency&amp;gt;&lt;br/&gt;
+  &amp;lt;/dependencies&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;/project&amp;gt;&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/resources/unit/schema/pom.xml b/lang/java/maven-plugin/src/test/resources/unit/schema/pom-joda.xml&lt;br/&gt;
similarity index 89%&lt;br/&gt;
rename from lang/java/maven-plugin/src/test/resources/unit/schema/pom.xml&lt;br/&gt;
rename to lang/java/maven-plugin/src/test/resources/unit/schema/pom-joda.xml&lt;br/&gt;
index cc000df05..f31692b0d 100644&lt;/li&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/test/resources/unit/schema/pom.xml&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/resources/unit/schema/pom-joda.xml&lt;br/&gt;
@@ -19,6 +19,13 @@&lt;br/&gt;
          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 &lt;a href=&quot;http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/xsd/maven-4.0.0.xsd&lt;/a&gt;&quot;&amp;gt;&lt;br/&gt;
   &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  &amp;lt;parent&amp;gt;&lt;br/&gt;
+    &amp;lt;artifactId&amp;gt;avro-parent&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+    &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+    &amp;lt;version&amp;gt;1.9.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;relativePath&amp;gt;../../../../../../../../../pom.xml&amp;lt;/relativePath&amp;gt;&lt;br/&gt;
+  &amp;lt;/parent&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
   &amp;lt;artifactId&amp;gt;avro-maven-plugin-test&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
   &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;/p&gt;

&lt;p&gt;@@ -38,7 +45,7 @@&lt;br/&gt;
         &amp;lt;/executions&amp;gt;&lt;br/&gt;
         &amp;lt;configuration&amp;gt;&lt;br/&gt;
           &amp;lt;sourceDirectory&amp;gt;${basedir}/src/test/avro&amp;lt;/sourceDirectory&amp;gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/schema&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/schema-joda&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
           &amp;lt;imports&amp;gt;&lt;br/&gt;
             &amp;lt;import&amp;gt;${basedir}/src/test/avro/imports&amp;lt;/import&amp;gt;&lt;br/&gt;
             &amp;lt;import&amp;gt;${basedir}/src/test/avro/directImport/PrivacyDirectImport.avsc&amp;lt;/import&amp;gt;&lt;br/&gt;
@@ -52,7 +59,7 @@&lt;br/&gt;
     &amp;lt;dependency&amp;gt;&lt;br/&gt;
       &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
       &amp;lt;artifactId&amp;gt;avro&amp;lt;/artifactId&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;version&amp;gt;1.7.3-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;${parent.version}&amp;lt;/version&amp;gt;&lt;br/&gt;
     &amp;lt;/dependency&amp;gt;&lt;br/&gt;
     &amp;lt;dependency&amp;gt;&lt;br/&gt;
       &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/resources/unit/schema/pom-jsr310.xml b/lang/java/maven-plugin/src/test/resources/unit/schema/pom-jsr310.xml&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..a43936317
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/resources/unit/schema/pom-jsr310.xml&lt;br/&gt;
@@ -0,0 +1,72 @@&lt;br/&gt;
+&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
+&amp;lt;!--&lt;br/&gt;
+   Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
+   contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
+   this work for additional information regarding copyright ownership.&lt;br/&gt;
+   The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
+   (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
+   the License.  You may obtain a copy of the License at&lt;br/&gt;
+&lt;br/&gt;
+       &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+&lt;br/&gt;
+   Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+   See the License for the specific language governing permissions and&lt;br/&gt;
+   limitations under the License.&lt;br/&gt;
+--&amp;gt;&lt;br/&gt;
+&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br/&gt;
+         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 &lt;a href=&quot;http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/xsd/maven-4.0.0.xsd&lt;/a&gt;&quot;&amp;gt;&lt;br/&gt;
+  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;parent&amp;gt;&lt;br/&gt;
+    &amp;lt;artifactId&amp;gt;avro-parent&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+    &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+    &amp;lt;version&amp;gt;1.9.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;relativePath&amp;gt;../../../../../../../../../pom.xml&amp;lt;/relativePath&amp;gt;&lt;br/&gt;
+  &amp;lt;/parent&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;artifactId&amp;gt;avro-maven-plugin-test&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+  &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;name&amp;gt;testproject&amp;lt;/name&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;build&amp;gt;&lt;br/&gt;
+    &amp;lt;plugins&amp;gt;&lt;br/&gt;
+      &amp;lt;plugin&amp;gt;&lt;br/&gt;
+        &amp;lt;artifactId&amp;gt;avro-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+        &amp;lt;executions&amp;gt;&lt;br/&gt;
+          &amp;lt;execution&amp;gt;&lt;br/&gt;
+            &amp;lt;id&amp;gt;schema&amp;lt;/id&amp;gt;&lt;br/&gt;
+            &amp;lt;goals&amp;gt;&lt;br/&gt;
+              &amp;lt;goal&amp;gt;schema&amp;lt;/goal&amp;gt;&lt;br/&gt;
+            &amp;lt;/goals&amp;gt;&lt;br/&gt;
+          &amp;lt;/execution&amp;gt;&lt;br/&gt;
+        &amp;lt;/executions&amp;gt;&lt;br/&gt;
+        &amp;lt;configuration&amp;gt;&lt;br/&gt;
+          &amp;lt;sourceDirectory&amp;gt;${basedir}/src/test/avro&amp;lt;/sourceDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/schema-jsr310&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;dateTimeLogicalTypeImplementation&amp;gt;jsr310&amp;lt;/dateTimeLogicalTypeImplementation&amp;gt;&lt;br/&gt;
+          &amp;lt;imports&amp;gt;&lt;br/&gt;
+            &amp;lt;import&amp;gt;${basedir}/src/test/avro/imports&amp;lt;/import&amp;gt;&lt;br/&gt;
+            &amp;lt;import&amp;gt;${basedir}/src/test/avro/directImport/PrivacyDirectImport.avsc&amp;lt;/import&amp;gt;&lt;br/&gt;
+          &amp;lt;/imports&amp;gt;&lt;br/&gt;
+          &amp;lt;project implementation=&quot;org.apache.maven.plugin.testing.stubs.MavenProjectStub&quot;/&amp;gt;&lt;br/&gt;
+        &amp;lt;/configuration&amp;gt;&lt;br/&gt;
+      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
+    &amp;lt;/plugins&amp;gt;&lt;br/&gt;
+  &amp;lt;/build&amp;gt;&lt;br/&gt;
+  &amp;lt;dependencies&amp;gt;&lt;br/&gt;
+    &amp;lt;dependency&amp;gt;&lt;br/&gt;
+      &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+      &amp;lt;artifactId&amp;gt;avro&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;${parent.version}&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;/dependency&amp;gt;&lt;br/&gt;
+    &amp;lt;dependency&amp;gt;&lt;br/&gt;
+      &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+      &amp;lt;artifactId&amp;gt;jackson-mapper-asl&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;1.9.10&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;/dependency&amp;gt;&lt;br/&gt;
+  &amp;lt;/dependencies&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;/project&amp;gt;&lt;br/&gt;
diff --git a/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java b/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java&lt;br/&gt;
index fc7df846d..b64038856 100644&lt;/li&gt;
			&lt;li&gt;a/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java&lt;br/&gt;
+++ b/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java&lt;br/&gt;
@@ -23,12 +23,16 @@&lt;br/&gt;
 import java.io.InputStream;&lt;br/&gt;
 import java.io.PrintStream;&lt;br/&gt;
 import java.util.ArrayList;&lt;br/&gt;
+import java.util.Arrays;&lt;br/&gt;
+import java.util.Collections;&lt;br/&gt;
+import java.util.Optional;&lt;br/&gt;
 import java.util.Set;&lt;br/&gt;
 import java.util.LinkedHashSet;&lt;br/&gt;
 import java.util.List;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; import org.apache.avro.Protocol;&lt;br/&gt;
 import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.compiler.specific.SpecificCompiler.DateTimeLogicalTypeImplementation;&lt;br/&gt;
 import org.apache.avro.generic.GenericData.StringType;&lt;br/&gt;
 import org.apache.avro.compiler.specific.SpecificCompiler;&lt;/p&gt;

&lt;p&gt;@@ -43,7 +47,7 @@ public int run(InputStream in, PrintStream out, PrintStream err,&lt;br/&gt;
       List&amp;lt;String&amp;gt; args) throws Exception {&lt;br/&gt;
     if (args.size() &amp;lt; 3) &lt;/p&gt;
{
       System.err
-          .println(&quot;Usage: [-encoding &amp;lt;outputencoding&amp;gt;] [-string] [-bigDecimal] (schema|protocol) input... outputdir&quot;);
+          .println(&quot;Usage: [-encoding &amp;lt;outputencoding&amp;gt;] [-string] [-bigDecimal] [-dateTimeLogicalTypeImpl &amp;lt;dateTimeType&amp;gt;] (schema|protocol) input... outputdir&quot;);
       System.err
           .println(&quot; input - input files or directories&quot;);
       System.err
@@ -53,18 +57,21 @@ public int run(InputStream in, PrintStream out, PrintStream err,
       System.err.println(&quot; -string - use java.lang.String instead of Utf8&quot;);
       System.err.println(&quot; -bigDecimal - use java.math.BigDecimal for &quot; +
           &quot;decimal type instead of java.nio.ByteBuffer&quot;);
+      System.err.println(&quot; -dateTimeLogicalTypeImpl [joda|jsr310] - use either &quot; +
+          &quot;Joda time classes (default) or Java 8 native date/time classes (JSR 310)&quot;);
       return 1;
     }

&lt;p&gt;     StringType stringType = StringType.CharSequence;&lt;br/&gt;
     boolean useLogicalDecimal = false;&lt;br/&gt;
+    Optional&amp;lt;DateTimeLogicalTypeImplementation&amp;gt; dateTimeLogicalTypeImplementation = Optional.empty();&lt;br/&gt;
+    Optional&amp;lt;String&amp;gt; encoding = Optional.empty();&lt;/p&gt;

&lt;p&gt;     int arg = 0;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;String encoding = null;&lt;br/&gt;
     if (&quot;-encoding&quot;.equals(args.get(arg))) 
{
       arg++;
-      encoding = args.get(arg);
+      encoding = Optional.of(args.get(arg));
       arg++;
     }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@@ -78,6 +85,17 @@ public int run(InputStream in, PrintStream out, PrintStream err,&lt;br/&gt;
       arg++;&lt;br/&gt;
     }&lt;/p&gt;

&lt;p&gt;+    if (&quot;-dateTimeLogicalTypeImpl&quot;.equalsIgnoreCase(args.get(arg))) {&lt;br/&gt;
+      arg++;&lt;br/&gt;
+      try &lt;/p&gt;
{
+        dateTimeLogicalTypeImplementation = Optional.of(DateTimeLogicalTypeImplementation.valueOf(args.get(arg).toUpperCase()));
+      }
&lt;p&gt; catch (IllegalArgumentException | IndexOutOfBoundsException e) &lt;/p&gt;
{
+        System.err.println(&quot;Expected one of &quot; + Arrays.toString(DateTimeLogicalTypeImplementation.values()));
+        return 1;
+      }
&lt;p&gt;+      arg++;&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
     String method = args.get(arg);&lt;br/&gt;
     List&amp;lt;File&amp;gt; inputs = new ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;
     File output = new File(args.get(args.size() - 1));&lt;br/&gt;
@@ -90,13 +108,15 @@ public int run(InputStream in, PrintStream out, PrintStream err,&lt;br/&gt;
       Schema.Parser parser = new Schema.Parser();&lt;br/&gt;
       for (File src : determineInputs(inputs, SCHEMA_FILTER)) &lt;/p&gt;
{
         Schema schema = parser.parse(src);
-        SpecificCompiler compiler = new SpecificCompiler(schema);
+        SpecificCompiler compiler = new SpecificCompiler(schema,
+          dateTimeLogicalTypeImplementation.orElse(DateTimeLogicalTypeImplementation.JODA));
         executeCompiler(compiler, encoding, stringType, useLogicalDecimal, src, output);
       }
&lt;p&gt;     } else if (&quot;protocol&quot;.equals(method)) {&lt;br/&gt;
       for (File src : determineInputs(inputs, PROTOCOL_FILTER)) &lt;/p&gt;
{
         Protocol protocol = Protocol.parse(src);
-        SpecificCompiler compiler = new SpecificCompiler(protocol);
+        SpecificCompiler compiler = new SpecificCompiler(protocol,
+          dateTimeLogicalTypeImplementation.orElse(DateTimeLogicalTypeImplementation.JODA));
         executeCompiler(compiler, encoding, stringType, useLogicalDecimal, src, output);
       }
&lt;p&gt;     } else &lt;/p&gt;
{
@@ -107,16 +127,14 @@ public int run(InputStream in, PrintStream out, PrintStream err,
   }

&lt;p&gt;   private void executeCompiler(SpecificCompiler compiler,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;String encoding,&lt;br/&gt;
+                               Optional&amp;lt;String&amp;gt; encoding,&lt;br/&gt;
                                StringType stringType,&lt;br/&gt;
                                boolean enableDecimalLogicalType,&lt;br/&gt;
                                File src,&lt;br/&gt;
                                File output) throws IOException {&lt;br/&gt;
     compiler.setStringType(stringType);&lt;br/&gt;
     compiler.setEnableDecimalLogicalType(enableDecimalLogicalType);&lt;/li&gt;
	&lt;li&gt;if (encoding != null) 
{
-      compiler.setOutputCharacterEncoding(encoding);
-    }
&lt;p&gt;+    encoding.ifPresent(compiler::setOutputCharacterEncoding);&lt;br/&gt;
     compiler.compileToDestination(src, output);&lt;br/&gt;
   }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@@ -144,9 +162,8 @@ public String getShortDescription() {&lt;br/&gt;
     for (File file : inputs) {&lt;br/&gt;
       // if directory, look at contents to see what files match extension&lt;br/&gt;
       if (file.isDirectory()) {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;for (File f : file.listFiles(filter)) 
{
-          fileSet.add(f);
-        }
&lt;p&gt;+        File[] files = file.listFiles(filter);&lt;br/&gt;
+        Collections.addAll(fileSet, files != null ? files : new File&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;);&lt;br/&gt;
       }&lt;br/&gt;
       // otherwise, just add the file.&lt;br/&gt;
       else {&lt;br/&gt;
@@ -164,7 +181,7 @@ public String getShortDescription() &lt;/p&gt;
{
       System.err.println(&quot;No input files found.&quot;);
     }&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return fileSet.toArray((new File&lt;span class=&quot;error&quot;&gt;&amp;#91;fileSet.size()&amp;#93;&lt;/span&gt;));&lt;br/&gt;
+    return fileSet.toArray(new File&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;);&lt;br/&gt;
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   private static final FileExtensionFilter SCHEMA_FILTER =&lt;br/&gt;
diff --git a/pom.xml b/pom.xml&lt;br/&gt;
index f497ba424..23d06c5ba 100644&lt;br/&gt;
&amp;#8212; a/pom.xml&lt;br/&gt;
+++ b/pom.xml&lt;br/&gt;
@@ -250,6 +250,7 @@&lt;br/&gt;
                 &amp;lt;exclude&amp;gt;lang/ruby/.gem/**&amp;lt;/exclude&amp;gt;&lt;br/&gt;
                 &amp;lt;exclude&amp;gt;lang/ruby/pkg/**&amp;lt;/exclude&amp;gt;&lt;br/&gt;
                 &amp;lt;exclude&amp;gt;lang/ruby/.bundle/**&amp;lt;/exclude&amp;gt;&lt;br/&gt;
+                &amp;lt;exclude&amp;gt;lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithJsr310LogicalTypes.java&amp;lt;/exclude&amp;gt;&lt;br/&gt;
                 &amp;lt;exclude&amp;gt;lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithLogicalTypes.java&amp;lt;/exclude&amp;gt;&lt;br/&gt;
                 &amp;lt;exclude&amp;gt;lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithoutLogicalTypes.java&amp;lt;/exclude&amp;gt;&lt;br/&gt;
                 &amp;lt;exclude&amp;gt;lang/java/tools/src/test/compiler/output-string/avro/examples/baseball/Player.java&amp;lt;/exclude&amp;gt;&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16633797" author="jira-bot" created="Mon, 1 Oct 2018 10:05:10 +0000"  >&lt;p&gt;Commit b814cd0b76b63b08cd7772f43c3cb904a1dcbff5 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=pvorb&quot; class=&quot;user-hover&quot; rel=&quot;pvorb&quot;&gt;Paul Vorbach&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=b814cd0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=b814cd0&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new) (#309)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to use Java 8 date/time types instead of Joda time.&lt;/p&gt;

&lt;p&gt;Add compiler option to allow generating Java 8 date/time classes instead of Joda time. This commit adds a new optional compiler option -dateTimeLogicalTypeImpl to specify which date/time implementation to use. It could be joda or jsr310, if not specified by, then the default is joda.&lt;/p&gt;</comment>
                            <comment id="16633798" author="jira-bot" created="Mon, 1 Oct 2018 10:05:12 +0000"  >&lt;p&gt;Commit b814cd0b76b63b08cd7772f43c3cb904a1dcbff5 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=pvorb&quot; class=&quot;user-hover&quot; rel=&quot;pvorb&quot;&gt;Paul Vorbach&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=b814cd0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=b814cd0&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new) (#309)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to use Java 8 date/time types instead of Joda time.&lt;/p&gt;

&lt;p&gt;Add compiler option to allow generating Java 8 date/time classes instead of Joda time. This commit adds a new optional compiler option -dateTimeLogicalTypeImpl to specify which date/time implementation to use. It could be joda or jsr310, if not specified by, then the default is joda.&lt;/p&gt;</comment>
                            <comment id="16633802" author="githubbot" created="Mon, 1 Oct 2018 10:08:14 +0000"  >&lt;p&gt;nandorKollar commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-425855240&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-425855240&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Merged to master, thanks @aukevanleeuwen and @pvorb for working on this!&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16634562" author="dkulp" created="Mon, 1 Oct 2018 20:13:07 +0000"  >&lt;p&gt;Note:  I&apos;m getting a random failure in one of the tests:&lt;/p&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Failed tests:
  TestSpecificLogicalTypes.testAbilityToReadJsr310RecordWrittenAsJodaRecord:148
Expected: is &lt;span class=&quot;code-quote&quot;&gt;&quot;16:10:08.420&quot;&lt;/span&gt;
     but: was &lt;span class=&quot;code-quote&quot;&gt;&quot;16:10:08.42&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="16635439" author="githubbot" created="Tue, 2 Oct 2018 12:59:15 +0000"  >&lt;p&gt;pvorb commented on issue #309: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes (new)&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/309#issuecomment-426263732&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/309#issuecomment-426263732&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thanks, @nandorKollar!&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16635442" author="githubbot" created="Tue, 2 Oct 2018 13:00:54 +0000"  >&lt;p&gt;pvorb commented on issue #248: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/248#issuecomment-426264250&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/248#issuecomment-426264250&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @nandorKollar Since you merged #309, could you close this old pull request?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16635514" author="githubbot" created="Tue, 2 Oct 2018 13:48:52 +0000"  >&lt;p&gt;nandorKollar commented on issue #248: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/248#issuecomment-426280537&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/248#issuecomment-426280537&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Sure I&apos;ll. @pvorb could you please assign &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt; to yourself, if you have an Apache Jira account?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16635515" author="githubbot" created="Tue, 2 Oct 2018 13:48:59 +0000"  >&lt;p&gt;nandorKollar closed pull request #248: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/248&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/248&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/data/Java8TimeConversions.java b/lang/java/avro/src/main/java/org/apache/avro/data/Java8TimeConversions.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..b172bd887&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/data/Java8TimeConversions.java&lt;br/&gt;
@@ -0,0 +1,158 @@&lt;br/&gt;
+/**&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+package org.apache.avro.data;&lt;br/&gt;
+&lt;br/&gt;
+import org.apache.avro.Conversion;&lt;br/&gt;
+import org.apache.avro.LogicalType;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+&lt;br/&gt;
+import java.time.Instant;&lt;br/&gt;
+import java.time.LocalDate;&lt;br/&gt;
+import java.time.LocalTime;&lt;br/&gt;
+import java.util.concurrent.TimeUnit;&lt;br/&gt;
+&lt;br/&gt;
+public class Java8TimeConversions {&lt;br/&gt;
+  public static class DateConversion extends Conversion&amp;lt;LocalDate&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Class&amp;lt;LocalDate&amp;gt; getConvertedType() &lt;/p&gt;
{
+      return LocalDate.class;
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public String getLogicalTypeName() &lt;/p&gt;
{
+      return &quot;date&quot;;
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public LocalDate fromInt(Integer daysFromEpoch, Schema schema, LogicalType type) &lt;/p&gt;
{
+      return LocalDate.ofEpochDay(daysFromEpoch);
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Integer toInt(LocalDate date, Schema schema, LogicalType type) &lt;/p&gt;
{
+      long epochDays = date.toEpochDay();
+
+      return Math.toIntExact(epochDays);
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
+  public static class TimeMillisConversion extends Conversion&amp;lt;LocalTime&amp;gt; {&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Class&amp;lt;LocalTime&amp;gt; getConvertedType() &lt;/p&gt;
{
+      return LocalTime.class;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public String getLogicalTypeName() {
+      return &quot;time-millis&quot;;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public LocalTime fromInt(Integer millisFromMidnight, Schema schema, LogicalType type) {
+      return LocalTime.ofNanoOfDay(TimeUnit.MILLISECONDS.toNanos(millisFromMidnight));
+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Integer toInt(LocalTime time, Schema schema, LogicalType type) {
+      return Math.toIntExact(TimeUnit.NANOSECONDS.toMillis(time.toNanoOfDay()));
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  public static class TimeMicrosConversion extends Conversion&amp;lt;LocalTime&amp;gt; {&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Class&amp;lt;LocalTime&amp;gt; getConvertedType() {+      return LocalTime.class;+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public String getLogicalTypeName() &lt;/p&gt;
{
+      return &quot;time-micros&quot;;
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public LocalTime fromLong(Long microsFromMidnight, Schema schema, LogicalType type) &lt;/p&gt;
{
+      return LocalTime.ofNanoOfDay(TimeUnit.MICROSECONDS.toNanos(microsFromMidnight));
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Long toLong(LocalTime time, Schema schema, LogicalType type) &lt;/p&gt;
{
+      return TimeUnit.NANOSECONDS.toMicros(time.toNanoOfDay());
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
+  public static class TimestampMillisConversion extends Conversion&amp;lt;Instant&amp;gt; {&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Class&amp;lt;Instant&amp;gt; getConvertedType() &lt;/p&gt;
{
+      return Instant.class;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public String getLogicalTypeName() {
+      return &quot;timestamp-millis&quot;;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Instant fromLong(Long millisFromEpoch, Schema schema, LogicalType type) {
+      return Instant.ofEpochMilli(millisFromEpoch);
+    }&lt;br/&gt;
+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Long toLong(Instant timestamp, Schema schema, LogicalType type) {
+      return timestamp.toEpochMilli();
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  public static class TimestampMicrosConversion extends Conversion&amp;lt;Instant&amp;gt; {&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Class&amp;lt;Instant&amp;gt; getConvertedType() {+      return Instant.class;+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public String getLogicalTypeName() &lt;/p&gt;
{
+      return &quot;timestamp-micros&quot;;
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Instant fromLong(Long microsFromEpoch, Schema schema, LogicalType type) &lt;/p&gt;
{
+      long epochSeconds = microsFromEpoch / (1_000_000);
+      long nanoAdjustment = (microsFromEpoch % (1_000_000)) * 1_000;
+
+      return Instant.ofEpochSecond(epochSeconds, nanoAdjustment);
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    public Long toLong(Instant instant, Schema schema, LogicalType type) {&lt;br/&gt;
+      long seconds = instant.getEpochSecond();&lt;br/&gt;
+      int nanos = instant.getNano();&lt;br/&gt;
+&lt;br/&gt;
+      if (seconds &amp;lt; 0 &amp;amp;&amp;amp; nanos &amp;gt; 0) &lt;/p&gt;
{
+        long micros = Math.multiplyExact(seconds + 1, 1_000_000);
+        long adjustment = (nanos / 1_000L) - 1_000_000;
+
+        return Math.addExact(micros, adjustment);
+      }
&lt;p&gt; else &lt;/p&gt;
{
+        long micros = Math.multiplyExact(seconds, 1_000_000);
+
+        return Math.addExact(micros, nanos / 1_000);
+      }
&lt;p&gt;+    }&lt;br/&gt;
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/data/TimeConversions.java b/lang/java/avro/src/main/java/org/apache/avro/data/JodaTimeConversions.java&lt;br/&gt;
similarity index 99%&lt;br/&gt;
rename from lang/java/avro/src/main/java/org/apache/avro/data/TimeConversions.java&lt;br/&gt;
rename to lang/java/avro/src/main/java/org/apache/avro/data/JodaTimeConversions.java&lt;br/&gt;
index b53bb1f69..769ebdd66 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/data/TimeConversions.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/data/JodaTimeConversions.java&lt;br/&gt;
@@ -27,7 +27,7 @@&lt;br/&gt;
 import org.joda.time.LocalDate;&lt;br/&gt;
 import org.joda.time.LocalTime;&lt;/p&gt;

&lt;p&gt;-public class TimeConversions {&lt;br/&gt;
+public class JodaTimeConversions {&lt;br/&gt;
   public static class DateConversion extends Conversion&amp;lt;LocalDate&amp;gt; {&lt;br/&gt;
     private static final LocalDate EPOCH_DATE = new LocalDate(1970, 1, 1);&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/src/test/java/org/apache/avro/data/TestJava8TimeConversions.java b/lang/java/avro/src/test/java/org/apache/avro/data/TestJava8TimeConversions.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..5583308ae&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/data/TestJava8TimeConversions.java&lt;br/&gt;
@@ -0,0 +1,243 @@&lt;br/&gt;
+/**&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+package org.apache.avro.data;&lt;br/&gt;
+&lt;br/&gt;
+import org.apache.avro.LogicalTypes;&lt;br/&gt;
+import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.data.Java8TimeConversions.DateConversion;&lt;br/&gt;
+import org.apache.avro.data.Java8TimeConversions.TimeMillisConversion;&lt;br/&gt;
+import org.apache.avro.data.Java8TimeConversions.TimeMicrosConversion;&lt;br/&gt;
+import org.apache.avro.data.Java8TimeConversions.TimestampMicrosConversion;&lt;br/&gt;
+import org.apache.avro.data.Java8TimeConversions.TimestampMillisConversion;&lt;br/&gt;
+&lt;br/&gt;
+import java.time.Instant;&lt;br/&gt;
+import java.time.ZoneOffset;&lt;br/&gt;
+import java.time.LocalDate;&lt;br/&gt;
+import java.time.LocalTime;&lt;br/&gt;
+import org.junit.Assert;&lt;br/&gt;
+import org.junit.BeforeClass;&lt;br/&gt;
+import org.junit.Test;&lt;br/&gt;
+&lt;br/&gt;
+import java.time.ZonedDateTime;&lt;br/&gt;
+import java.util.Date;&lt;br/&gt;
+&lt;br/&gt;
+public class TestJava8TimeConversions {&lt;br/&gt;
+&lt;br/&gt;
+  public static Schema DATE_SCHEMA;&lt;br/&gt;
+  public static Schema TIME_MILLIS_SCHEMA;&lt;br/&gt;
+  public static Schema TIME_MICROS_SCHEMA;&lt;br/&gt;
+  public static Schema TIMESTAMP_MILLIS_SCHEMA;&lt;br/&gt;
+  public static Schema TIMESTAMP_MICROS_SCHEMA;&lt;br/&gt;
+&lt;br/&gt;
+  @BeforeClass&lt;br/&gt;
+  public static void createSchemas() &lt;/p&gt;
{
+    TestJava8TimeConversions.DATE_SCHEMA = LogicalTypes.date()
+        .addToSchema(Schema.create(Schema.Type.INT));
+    TestJava8TimeConversions.TIME_MILLIS_SCHEMA = LogicalTypes.timeMillis()
+        .addToSchema(Schema.create(Schema.Type.INT));
+    TestJava8TimeConversions.TIME_MICROS_SCHEMA = LogicalTypes.timeMicros()
+        .addToSchema(Schema.create(Schema.Type.LONG));
+    TestJava8TimeConversions.TIMESTAMP_MILLIS_SCHEMA = LogicalTypes.timestampMillis()
+        .addToSchema(Schema.create(Schema.Type.LONG));
+    TestJava8TimeConversions.TIMESTAMP_MICROS_SCHEMA = LogicalTypes.timestampMicros()
+        .addToSchema(Schema.create(Schema.Type.LONG));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testDateConversion() throws Exception &lt;/p&gt;
{
+    DateConversion conversion = new DateConversion();
+    LocalDate Jan_6_1970 = LocalDate.of(1970, 1, 6);    //  5
+    LocalDate Jan_1_1970 = LocalDate.of(1970, 1, 1);    //  0
+    LocalDate Dec_27_1969 = LocalDate.of(1969, 12, 27); // -5
+
+    Assert.assertEquals(&quot;6 Jan 1970 should be 5&quot;, 5,
+        (int) conversion.toInt(Jan_6_1970, DATE_SCHEMA, LogicalTypes.date()));
+    Assert.assertEquals(&quot;1 Jan 1970 should be 0&quot;, 0,
+        (int) conversion.toInt(Jan_1_1970, DATE_SCHEMA, LogicalTypes.date()));
+    Assert.assertEquals(&quot;27 Dec 1969 should be -5&quot;, -5,
+        (int) conversion.toInt(Dec_27_1969, DATE_SCHEMA, LogicalTypes.date()));
+
+    Assert.assertEquals(&quot;6 Jan 1970 should be 5&quot;,
+        conversion.fromInt(5, DATE_SCHEMA, LogicalTypes.date()), Jan_6_1970);
+    Assert.assertEquals(&quot;1 Jan 1970 should be 0&quot;,
+        conversion.fromInt(0, DATE_SCHEMA, LogicalTypes.date()), Jan_1_1970);
+    Assert.assertEquals(&quot;27 Dec 1969 should be -5&quot;,
+        conversion.fromInt(-5, DATE_SCHEMA, LogicalTypes.date()), Dec_27_1969);
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testTimeMillisConversion() throws Exception &lt;/p&gt;
{
+    TimeMillisConversion conversion = new TimeMillisConversion();
+    LocalTime oneAM = LocalTime.of(1, 0);
+    LocalTime afternoon = LocalTime.of(15, 14, 15, 926_000_000);
+    int afternoonMillis = ((15 * 60 + 14) * 60 + 15) * 1000 + 926;
+
+    Assert.assertEquals(&quot;Midnight should be 0&quot;, 0,
+        (int) conversion.toInt(
+            LocalTime.MIDNIGHT, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()));
+    Assert.assertEquals(&quot;01:00 should be 3,600,000&quot;, 3_600_000,
+        (int) conversion.toInt(
+            oneAM, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()));
+    Assert.assertEquals(&quot;15:14:15.926 should be &quot; + afternoonMillis,
+        afternoonMillis,
+        (int) conversion.toInt(
+            afternoon, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()));
+
+    Assert.assertEquals(&quot;Midnight should be 0&quot;,
+        LocalTime.MIDNIGHT,
+        conversion.fromInt(0, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()));
+    Assert.assertEquals(&quot;01:00 should be 3,600,000&quot;,
+        oneAM,
+        conversion.fromInt(
+            3600000, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()));
+    Assert.assertEquals(&quot;15:14:15.926 should be &quot; + afternoonMillis,
+        afternoon,
+        conversion.fromInt(
+            afternoonMillis, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testTimeMicrosConversion() throws Exception &lt;/p&gt;
{
+    TimeMicrosConversion conversion = new TimeMicrosConversion();
+    LocalTime oneAM = LocalTime.of(1, 0);
+    LocalTime afternoon = LocalTime.of(15, 14, 15, 926_551_000);
+    long afternoonMicros = ((long) (15 * 60 + 14) * 60 + 15) * 1_000_000 + 926_551;
+
+    Assert.assertEquals(&quot;Midnight should be 0&quot;,
+        LocalTime.MIDNIGHT,
+        conversion.fromLong(0L, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()));
+    Assert.assertEquals(&quot;01:00 should be 3,600,000,000&quot;,
+        oneAM,
+        conversion.fromLong(
+            3_600_000_000L, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()));
+    Assert.assertEquals(&quot;15:14:15.926551 should be &quot; + afternoonMicros,
+        afternoon,
+        conversion.fromLong(
+            afternoonMicros, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()));
+
+    Assert.assertEquals(&quot;Midnight should be 0&quot;, 0,
+        (long) conversion.toLong(
+            LocalTime.MIDNIGHT, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()));
+    Assert.assertEquals(&quot;01:00 should be 3,600,000,000&quot;, 3_600_000_000L,
+        (long) conversion.toLong(
+            oneAM, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()));
+    Assert.assertEquals(&quot;15:14:15.926551 should be &quot; + afternoonMicros,
+        afternoonMicros,
+        (long) conversion.toLong(
+            afternoon, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testTimestampMillisConversion() throws Exception &lt;/p&gt;
{
+    TimestampMillisConversion conversion = new TimestampMillisConversion();
+    long nowInstant = new Date().getTime(); // ms precision
+
+    // round trip
+    Instant now = conversion.fromLong(
+        nowInstant, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis());
+    long roundTrip = conversion.toLong(
+        now, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis());
+    Assert.assertEquals(&quot;Round-trip conversion should work&quot;,
+        nowInstant, roundTrip);
+
+    long May_28_2015_21_46_53_221_instant = 1432849613221L;
+    Instant May_28_2015_21_46_53_221 =
+        ZonedDateTime.of(2015, 5, 28, 21, 46, 53, 221_000_000, ZoneOffset.UTC).toInstant();
+
+    // known dates from https://www.epochconverter.com/
+    // &amp;gt; Epoch
+    Assert.assertEquals(&quot;Known date should be correct&quot;,
+        May_28_2015_21_46_53_221,
+        conversion.fromLong(May_28_2015_21_46_53_221_instant,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+    Assert.assertEquals(&quot;Known date should be correct&quot;,
+        May_28_2015_21_46_53_221_instant,
+        (long) conversion.toLong(May_28_2015_21_46_53_221,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+
+    // Epoch
+    Assert.assertEquals(&quot;1970-01-01 should be 0&quot;,
+        Instant.EPOCH,
+        conversion.fromLong(0L,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+    Assert.assertEquals(&quot;1970-01-01 should be 0&quot;,
+        0L,
+        (long) conversion.toLong(ZonedDateTime.ofInstant(Instant.EPOCH, ZoneOffset.UTC).toInstant(),
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+
+    // &amp;lt; Epoch
+    long Jul_01_1969_12_00_00_123_instant = -15854400000L + 123;
+    Instant Jul_01_1969_12_00_00_123 =
+        ZonedDateTime.of(1969, 7, 1, 12, 0, 0, 123_000_000, ZoneOffset.UTC).toInstant();
+
+    Assert.assertEquals(&quot;Pre 1970 date should be correct&quot;,
+        Jul_01_1969_12_00_00_123,
+        conversion.fromLong(Jul_01_1969_12_00_00_123_instant,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+    Assert.assertEquals(&quot;Pre 1970 date should be correct&quot;,
+        Jul_01_1969_12_00_00_123_instant,
+        (long) conversion.toLong(Jul_01_1969_12_00_00_123,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testTimestampMicrosConversion() throws Exception &lt;/p&gt;
{
+    TimestampMicrosConversion conversion = new TimestampMicrosConversion();
+
+    // known dates from https://www.epochconverter.com/
+    // &amp;gt; Epoch
+    long May_28_2015_21_46_53_221_843_instant = 1432849613221L * 1000 + 843;
+    Instant May_28_2015_21_46_53_221_843 =
+        ZonedDateTime.of(2015, 5, 28, 21, 46, 53, 221_843_000, ZoneOffset.UTC).toInstant();
+
+    Assert.assertEquals(&quot;Known date should be correct&quot;,
+        May_28_2015_21_46_53_221_843,
+        conversion.fromLong(May_28_2015_21_46_53_221_843_instant,
+            TIMESTAMP_MICROS_SCHEMA, LogicalTypes.timestampMicros()));
+
+    Assert.assertEquals(&quot;Known date should be correct&quot;,
+        May_28_2015_21_46_53_221_843_instant,
+        (long) conversion.toLong(May_28_2015_21_46_53_221_843,
+            TIMESTAMP_MICROS_SCHEMA, LogicalTypes.timestampMillis()));
+
+    // Epoch
+    Assert.assertEquals(&quot;1970-01-01 should be 0&quot;,
+        Instant.EPOCH,
+        conversion.fromLong(0L,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+    Assert.assertEquals(&quot;1970-01-01 should be 0&quot;,
+        0L,
+        (long) conversion.toLong(ZonedDateTime.ofInstant(Instant.EPOCH, ZoneOffset.UTC).toInstant(),
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+
+    // &amp;lt; Epoch
+    long Jul_01_1969_12_00_00_000_123_instant = -15854400000L * 1000 + 123;
+    Instant Jul_01_1969_12_00_00_000_123 =
+        ZonedDateTime.of(1969, 7, 1, 12, 0, 0, 123_000, ZoneOffset.UTC).toInstant();
+
+    Assert.assertEquals(&quot;Pre 1970 date should be correct&quot;,
+        Jul_01_1969_12_00_00_000_123,
+        conversion.fromLong(Jul_01_1969_12_00_00_000_123_instant,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+    Assert.assertEquals(&quot;Pre 1970 date should be correct&quot;,
+        Jul_01_1969_12_00_00_000_123_instant,
+        (long) conversion.toLong(Jul_01_1969_12_00_00_000_123,
+            TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()));
+  }
&lt;p&gt;+}&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java b/lang/java/avro/src/test/java/org/apache/avro/data/TestJodaTimeConversions.java&lt;br/&gt;
similarity index 91%&lt;br/&gt;
rename from lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java&lt;br/&gt;
rename to lang/java/avro/src/test/java/org/apache/avro/data/TestJodaTimeConversions.java&lt;br/&gt;
index 5e315cd1e..ca2bb5042 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/data/TestJodaTimeConversions.java&lt;br/&gt;
@@ -20,13 +20,13 @@&lt;/p&gt;

&lt;p&gt; import org.apache.avro.LogicalTypes;&lt;br/&gt;
 import org.apache.avro.Schema;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.DateConversion;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.LossyTimeMicrosConversion;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.LossyTimestampMicrosConversion;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.TimeMicrosConversion;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.TimestampMicrosConversion;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.TimeConversion;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.TimestampConversion;&lt;br/&gt;
+import org.apache.avro.data.JodaTimeConversions.DateConversion;&lt;br/&gt;
+import org.apache.avro.data.JodaTimeConversions.LossyTimeMicrosConversion;&lt;br/&gt;
+import org.apache.avro.data.JodaTimeConversions.LossyTimestampMicrosConversion;&lt;br/&gt;
+import org.apache.avro.data.JodaTimeConversions.TimeMicrosConversion;&lt;br/&gt;
+import org.apache.avro.data.JodaTimeConversions.TimestampMicrosConversion;&lt;br/&gt;
+import org.apache.avro.data.JodaTimeConversions.TimeConversion;&lt;br/&gt;
+import org.apache.avro.data.JodaTimeConversions.TimestampConversion;&lt;br/&gt;
 import org.joda.time.DateTime;&lt;br/&gt;
 import org.joda.time.DateTimeZone;&lt;br/&gt;
 import org.joda.time.LocalDate;&lt;br/&gt;
@@ -36,7 +36,7 @@&lt;br/&gt;
 import org.junit.Test;&lt;br/&gt;
 import java.util.Date;&lt;/p&gt;

&lt;p&gt;-public class TestTimeConversions {&lt;br/&gt;
+public class TestJodaTimeConversions {&lt;/p&gt;

&lt;p&gt;   public static Schema DATE_SCHEMA;&lt;br/&gt;
   public static Schema TIME_MILLIS_SCHEMA;&lt;br/&gt;
@@ -46,15 +46,15 @@&lt;/p&gt;

&lt;p&gt;   @BeforeClass&lt;br/&gt;
   public static void createSchemas() &lt;/p&gt;
{
-    TestTimeConversions.DATE_SCHEMA = LogicalTypes.date()
+    TestJodaTimeConversions.DATE_SCHEMA = LogicalTypes.date()
         .addToSchema(Schema.create(Schema.Type.INT));
-    TestTimeConversions.TIME_MILLIS_SCHEMA = LogicalTypes.timeMillis()
+    TestJodaTimeConversions.TIME_MILLIS_SCHEMA = LogicalTypes.timeMillis()
         .addToSchema(Schema.create(Schema.Type.INT));
-    TestTimeConversions.TIME_MICROS_SCHEMA = LogicalTypes.timeMicros()
+    TestJodaTimeConversions.TIME_MICROS_SCHEMA = LogicalTypes.timeMicros()
         .addToSchema(Schema.create(Schema.Type.LONG));
-    TestTimeConversions.TIMESTAMP_MILLIS_SCHEMA = LogicalTypes.timestampMillis()
+    TestJodaTimeConversions.TIMESTAMP_MILLIS_SCHEMA = LogicalTypes.timestampMillis()
         .addToSchema(Schema.create(Schema.Type.LONG));
-    TestTimeConversions.TIMESTAMP_MICROS_SCHEMA = LogicalTypes.timestampMicros()
+    TestJodaTimeConversions.TIMESTAMP_MICROS_SCHEMA = LogicalTypes.timestampMicros()
         .addToSchema(Schema.create(Schema.Type.LONG));
   }

&lt;p&gt;diff --git a/lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithJava8LogicalTypes.java b/lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithJava8LogicalTypes.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..522a2c025&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithJava8LogicalTypes.java&lt;br/&gt;
@@ -0,0 +1,893 @@&lt;br/&gt;
+/**&lt;br/&gt;
+ * Autogenerated by Avro&lt;br/&gt;
+ *&lt;br/&gt;
+ * DO NOT EDIT DIRECTLY&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro.specific;&lt;br/&gt;
+&lt;br/&gt;
+import org.apache.avro.specific.SpecificData;&lt;br/&gt;
+import org.apache.avro.message.BinaryMessageEncoder;&lt;br/&gt;
+import org.apache.avro.message.BinaryMessageDecoder;&lt;br/&gt;
+import org.apache.avro.message.SchemaStore;&lt;br/&gt;
+&lt;br/&gt;
+@SuppressWarnings(&quot;all&quot;)&lt;br/&gt;
+@org.apache.avro.specific.AvroGenerated&lt;br/&gt;
+public class TestRecordWithJava8LogicalTypes extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {&lt;br/&gt;
+  private static final long serialVersionUID = 3313339903648295220L;&lt;br/&gt;
+  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(&quot;{\&quot;type\&quot;:\&quot;record\&quot;,\&quot;name\&quot;:\&quot;TestRecordWithJava8LogicalTypes\&quot;,\&quot;namespace\&quot;:\&quot;org.apache.avro.specific\&quot;,\&quot;fields\&quot;:[&lt;/p&gt;
{\&quot;name\&quot;:\&quot;b\&quot;,\&quot;type\&quot;:\&quot;boolean\&quot;}
&lt;p&gt;,&lt;/p&gt;
{\&quot;name\&quot;:\&quot;i32\&quot;,\&quot;type\&quot;:\&quot;int\&quot;}
&lt;p&gt;,&lt;/p&gt;
{\&quot;name\&quot;:\&quot;i64\&quot;,\&quot;type\&quot;:\&quot;long\&quot;}
&lt;p&gt;,&lt;/p&gt;
{\&quot;name\&quot;:\&quot;f32\&quot;,\&quot;type\&quot;:\&quot;float\&quot;}
&lt;p&gt;,&lt;/p&gt;
{\&quot;name\&quot;:\&quot;f64\&quot;,\&quot;type\&quot;:\&quot;double\&quot;}
&lt;p&gt;,&lt;/p&gt;
{\&quot;name\&quot;:\&quot;s\&quot;,\&quot;type\&quot;:[\&quot;null\&quot;,\&quot;string\&quot;],\&quot;default\&quot;:null}
&lt;p&gt;,{\&quot;name\&quot;:\&quot;d\&quot;,\&quot;type\&quot;:{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;logicalType\&quot;:\&quot;date\&quot;}},{\&quot;name\&quot;:\&quot;t\&quot;,\&quot;type\&quot;:{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;logicalType\&quot;:\&quot;time-millis\&quot;}},{\&quot;name\&quot;:\&quot;ts\&quot;,\&quot;type\&quot;:{\&quot;type\&quot;:\&quot;long\&quot;,\&quot;logicalType\&quot;:\&quot;timestamp-millis\&quot;}},{\&quot;name\&quot;:\&quot;dec\&quot;,\&quot;type\&quot;:{\&quot;type\&quot;:\&quot;bytes\&quot;,\&quot;logicalType\&quot;:\&quot;decimal\&quot;,\&quot;precision\&quot;:9,\&quot;scale\&quot;:2}}]}&quot;);&lt;br/&gt;
+  public static org.apache.avro.Schema getClassSchema() &lt;/p&gt;
{ return SCHEMA$; }&lt;br/&gt;
+&lt;br/&gt;
+  private static SpecificData MODEL$ = new SpecificData();&lt;br/&gt;
+&lt;br/&gt;
+  private static final BinaryMessageEncoder&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt; ENCODER =&lt;br/&gt;
+      new BinaryMessageEncoder&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt;(MODEL$, SCHEMA$);&lt;br/&gt;
+&lt;br/&gt;
+  private static final BinaryMessageDecoder&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt; DECODER =&lt;br/&gt;
+      new BinaryMessageDecoder&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt;(MODEL$, SCHEMA$);&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Return the BinaryMessageDecoder instance used by this class.&lt;br/&gt;
+   */&lt;br/&gt;
+  public static BinaryMessageDecoder&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt; getDecoder() {
+    return DECODER;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.&lt;br/&gt;
+   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint&lt;br/&gt;
+   */&lt;br/&gt;
+  public static BinaryMessageDecoder&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt; createDecoder(SchemaStore resolver) {
+    return new BinaryMessageDecoder&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt;(MODEL$, SCHEMA$, resolver);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  /** Serializes this TestRecordWithJava8LogicalTypes to a ByteBuffer. */&lt;br/&gt;
+  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
+    return ENCODER.encode(this);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  /** Deserializes a TestRecordWithJava8LogicalTypes from a ByteBuffer. */&lt;br/&gt;
+  public static TestRecordWithJava8LogicalTypes fromByteBuffer(&lt;br/&gt;
+      java.nio.ByteBuffer b) throws java.io.IOException {
+    return DECODER.decode(b);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Deprecated public boolean b;&lt;br/&gt;
+  @Deprecated public int i32;&lt;br/&gt;
+  @Deprecated public long i64;&lt;br/&gt;
+  @Deprecated public float f32;&lt;br/&gt;
+  @Deprecated public double f64;&lt;br/&gt;
+  @Deprecated public java.lang.CharSequence s;&lt;br/&gt;
+  @Deprecated public java.time.LocalDate d;&lt;br/&gt;
+  @Deprecated public java.time.LocalTime t;&lt;br/&gt;
+  @Deprecated public java.time.Instant ts;&lt;br/&gt;
+  @Deprecated public java.math.BigDecimal dec;&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Default constructor.  Note that this does not initialize fields&lt;br/&gt;
+   * to their default values from the schema.  If that is desired then&lt;br/&gt;
+   * one should use &amp;lt;code&amp;gt;newBuilder()&amp;lt;/code&amp;gt;.&lt;br/&gt;
+   */&lt;br/&gt;
+  public TestRecordWithJava8LogicalTypes() {}&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * All-args constructor.&lt;br/&gt;
+   * @param b The new value for b&lt;br/&gt;
+   * @param i32 The new value for i32&lt;br/&gt;
+   * @param i64 The new value for i64&lt;br/&gt;
+   * @param f32 The new value for f32&lt;br/&gt;
+   * @param f64 The new value for f64&lt;br/&gt;
+   * @param s The new value for s&lt;br/&gt;
+   * @param d The new value for d&lt;br/&gt;
+   * @param t The new value for t&lt;br/&gt;
+   * @param ts The new value for ts&lt;br/&gt;
+   * @param dec The new value for dec&lt;br/&gt;
+   */&lt;br/&gt;
+  public TestRecordWithJava8LogicalTypes(java.lang.Boolean b, java.lang.Integer i32, java.lang.Long i64, java.lang.Float f32, java.lang.Double f64, java.lang.CharSequence s, java.time.LocalDate d, java.time.LocalTime t, java.time.Instant ts, java.math.BigDecimal dec) {
+    this.b = b;
+    this.i32 = i32;
+    this.i64 = i64;
+    this.f32 = f32;
+    this.f64 = f64;
+    this.s = s;
+    this.d = d;
+    this.t = t;
+    this.ts = ts;
+    this.dec = dec;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
&lt;p&gt;+  // Used by DatumWriter.  Applications should not call.&lt;br/&gt;
+  public java.lang.Object get(int field$) {&lt;br/&gt;
+    switch (field$) &lt;/p&gt;
{
+    case 0: return b;
+    case 1: return i32;
+    case 2: return i64;
+    case 3: return f32;
+    case 4: return f64;
+    case 5: return s;
+    case 6: return d;
+    case 7: return t;
+    case 8: return ts;
+    case 9: return dec;
+    default: throw new org.apache.avro.AvroRuntimeException(&quot;Bad index&quot;);
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
+  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.Java8TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.Java8TimeConversions.DateConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.Java8TimeConversions.TimeMillisConversion TIME_CONVERSION = new org.apache.avro.data.Java8TimeConversions.TimeMillisConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.Java8TimeConversions.TimestampMillisConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.Java8TimeConversions.TimestampMillisConversion();&lt;br/&gt;
+&lt;br/&gt;
+  private static final org.apache.avro.Conversion&amp;lt;?&amp;gt;[] conversions =&lt;br/&gt;
+      new org.apache.avro.Conversion&amp;lt;?&amp;gt;[] &lt;/p&gt;
{
+      null,
+      null,
+      null,
+      null,
+      null,
+      null,
+      DATE_CONVERSION,
+      TIME_CONVERSION,
+      TIMESTAMP_CONVERSION,
+      DECIMAL_CONVERSION,
+      null
+  }
&lt;p&gt;;&lt;br/&gt;
+&lt;br/&gt;
+  @Override&lt;br/&gt;
+  public org.apache.avro.Conversion&amp;lt;?&amp;gt; getConversion(int field) &lt;/p&gt;
{
+    return conversions[field];
+  }
&lt;p&gt;+&lt;br/&gt;
+  // Used by DatumReader.  Applications should not call.&lt;br/&gt;
+  @SuppressWarnings(value=&quot;unchecked&quot;)&lt;br/&gt;
+  public void put(int field$, java.lang.Object value$) {&lt;br/&gt;
+    switch (field$) &lt;/p&gt;
{
+    case 0: b = (java.lang.Boolean)value$; break;
+    case 1: i32 = (java.lang.Integer)value$; break;
+    case 2: i64 = (java.lang.Long)value$; break;
+    case 3: f32 = (java.lang.Float)value$; break;
+    case 4: f64 = (java.lang.Double)value$; break;
+    case 5: s = (java.lang.CharSequence)value$; break;
+    case 6: d = (java.time.LocalDate)value$; break;
+    case 7: t = (java.time.LocalTime)value$; break;
+    case 8: ts = (java.time.Instant)value$; break;
+    case 9: dec = (java.math.BigDecimal)value$; break;
+    default: throw new org.apache.avro.AvroRuntimeException(&quot;Bad index&quot;);
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;b&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;b&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.lang.Boolean getB() &lt;/p&gt;
{
+    return b;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;b&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setB(java.lang.Boolean value) &lt;/p&gt;
{
+    this.b = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;i32&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;i32&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.lang.Integer getI32() &lt;/p&gt;
{
+    return i32;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;i32&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setI32(java.lang.Integer value) &lt;/p&gt;
{
+    this.i32 = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;i64&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;i64&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.lang.Long getI64() &lt;/p&gt;
{
+    return i64;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;i64&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setI64(java.lang.Long value) &lt;/p&gt;
{
+    this.i64 = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;f32&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;f32&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.lang.Float getF32() &lt;/p&gt;
{
+    return f32;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;f32&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setF32(java.lang.Float value) &lt;/p&gt;
{
+    this.f32 = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;f64&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;f64&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.lang.Double getF64() &lt;/p&gt;
{
+    return f64;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;f64&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setF64(java.lang.Double value) &lt;/p&gt;
{
+    this.f64 = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;s&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;s&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.lang.CharSequence getS() &lt;/p&gt;
{
+    return s;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;s&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setS(java.lang.CharSequence value) &lt;/p&gt;
{
+    this.s = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;d&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;d&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.time.LocalDate getD() &lt;/p&gt;
{
+    return d;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;d&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setD(java.time.LocalDate value) &lt;/p&gt;
{
+    this.d = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;t&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;t&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.time.LocalTime getT() &lt;/p&gt;
{
+    return t;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;t&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setT(java.time.LocalTime value) &lt;/p&gt;
{
+    this.t = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;ts&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;ts&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.time.Instant getTs() &lt;/p&gt;
{
+    return ts;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;ts&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setTs(java.time.Instant value) &lt;/p&gt;
{
+    this.ts = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;dec&apos; field.&lt;br/&gt;
+   * @return The value of the &apos;dec&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public java.math.BigDecimal getDec() &lt;/p&gt;
{
+    return dec;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Sets the value of the &apos;dec&apos; field.&lt;br/&gt;
+   * @param value the value to set.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setDec(java.math.BigDecimal value) &lt;/p&gt;
{
+    this.dec = value;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Creates a new TestRecordWithJava8LogicalTypes RecordBuilder.&lt;br/&gt;
+   * @return A new TestRecordWithJava8LogicalTypes RecordBuilder&lt;br/&gt;
+   */&lt;br/&gt;
+  public static org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder newBuilder() &lt;/p&gt;
{
+    return new org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder();
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Creates a new TestRecordWithJava8LogicalTypes RecordBuilder by copying an existing Builder.&lt;br/&gt;
+   * @param other The existing builder to copy.&lt;br/&gt;
+   * @return A new TestRecordWithJava8LogicalTypes RecordBuilder&lt;br/&gt;
+   */&lt;br/&gt;
+  public static org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder newBuilder(org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder other) {&lt;br/&gt;
+    if (other == null) &lt;/p&gt;
{
+      return new org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder();
+    } else {
+      return new org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder(other);
+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Creates a new TestRecordWithJava8LogicalTypes RecordBuilder by copying an existing TestRecordWithJava8LogicalTypes instance.&lt;br/&gt;
+   * @param other The existing instance to copy.&lt;br/&gt;
+   * @return A new TestRecordWithJava8LogicalTypes RecordBuilder&lt;br/&gt;
+   */&lt;br/&gt;
+  public static org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder newBuilder(org.apache.avro.specific.TestRecordWithJava8LogicalTypes other) {&lt;br/&gt;
+    if (other == null) {+      return new org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder();+    }
&lt;p&gt; else &lt;/p&gt;
{
+      return new org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder(other);
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * RecordBuilder for TestRecordWithJava8LogicalTypes instances.&lt;br/&gt;
+   */&lt;br/&gt;
+  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt;&lt;br/&gt;
+    implements org.apache.avro.data.RecordBuilder&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt; {&lt;br/&gt;
+&lt;br/&gt;
+    private boolean b;&lt;br/&gt;
+    private int i32;&lt;br/&gt;
+    private long i64;&lt;br/&gt;
+    private float f32;&lt;br/&gt;
+    private double f64;&lt;br/&gt;
+    private java.lang.CharSequence s;&lt;br/&gt;
+    private java.time.LocalDate d;&lt;br/&gt;
+    private java.time.LocalTime t;&lt;br/&gt;
+    private java.time.Instant ts;&lt;br/&gt;
+    private java.math.BigDecimal dec;&lt;br/&gt;
+&lt;br/&gt;
+    /** Creates a new Builder */&lt;br/&gt;
+    private Builder() &lt;/p&gt;
{
+      super(SCHEMA$);
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+     * Creates a Builder by copying an existing Builder.&lt;br/&gt;
+     * @param other The existing Builder to copy.&lt;br/&gt;
+     */&lt;br/&gt;
+    private Builder(org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder other) {&lt;br/&gt;
+      super(other);&lt;br/&gt;
+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;, other.b)) &lt;/p&gt;
{
+        this.b = data().deepCopy(fields()[0].schema(), other.b);
+        fieldSetFlags()[0] = other.fieldSetFlags()[0];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, other.i32)) &lt;/p&gt;
{
+        this.i32 = data().deepCopy(fields()[1].schema(), other.i32);
+        fieldSetFlags()[1] = other.fieldSetFlags()[1];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;, other.i64)) &lt;/p&gt;
{
+        this.i64 = data().deepCopy(fields()[2].schema(), other.i64);
+        fieldSetFlags()[2] = other.fieldSetFlags()[2];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt;, other.f32)) &lt;/p&gt;
{
+        this.f32 = data().deepCopy(fields()[3].schema(), other.f32);
+        fieldSetFlags()[3] = other.fieldSetFlags()[3];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt;, other.f64)) &lt;/p&gt;
{
+        this.f64 = data().deepCopy(fields()[4].schema(), other.f64);
+        fieldSetFlags()[4] = other.fieldSetFlags()[4];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt;, other.s)) &lt;/p&gt;
{
+        this.s = data().deepCopy(fields()[5].schema(), other.s);
+        fieldSetFlags()[5] = other.fieldSetFlags()[5];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;6&amp;#93;&lt;/span&gt;, other.d)) &lt;/p&gt;
{
+        this.d = data().deepCopy(fields()[6].schema(), other.d);
+        fieldSetFlags()[6] = other.fieldSetFlags()[6];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;7&amp;#93;&lt;/span&gt;, other.t)) &lt;/p&gt;
{
+        this.t = data().deepCopy(fields()[7].schema(), other.t);
+        fieldSetFlags()[7] = other.fieldSetFlags()[7];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;8&amp;#93;&lt;/span&gt;, other.ts)) &lt;/p&gt;
{
+        this.ts = data().deepCopy(fields()[8].schema(), other.ts);
+        fieldSetFlags()[8] = other.fieldSetFlags()[8];
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;9&amp;#93;&lt;/span&gt;, other.dec)) &lt;/p&gt;
{
+        this.dec = data().deepCopy(fields()[9].schema(), other.dec);
+        fieldSetFlags()[9] = other.fieldSetFlags()[9];
+      }
&lt;p&gt;+    }&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+     * Creates a Builder by copying an existing TestRecordWithJava8LogicalTypes instance&lt;br/&gt;
+     * @param other The existing instance to copy.&lt;br/&gt;
+     */&lt;br/&gt;
+    private Builder(org.apache.avro.specific.TestRecordWithJava8LogicalTypes other) {&lt;br/&gt;
+      super(SCHEMA$);&lt;br/&gt;
+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;, other.b)) &lt;/p&gt;
{
+        this.b = data().deepCopy(fields()[0].schema(), other.b);
+        fieldSetFlags()[0] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, other.i32)) &lt;/p&gt;
{
+        this.i32 = data().deepCopy(fields()[1].schema(), other.i32);
+        fieldSetFlags()[1] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;, other.i64)) &lt;/p&gt;
{
+        this.i64 = data().deepCopy(fields()[2].schema(), other.i64);
+        fieldSetFlags()[2] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt;, other.f32)) &lt;/p&gt;
{
+        this.f32 = data().deepCopy(fields()[3].schema(), other.f32);
+        fieldSetFlags()[3] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt;, other.f64)) &lt;/p&gt;
{
+        this.f64 = data().deepCopy(fields()[4].schema(), other.f64);
+        fieldSetFlags()[4] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt;, other.s)) &lt;/p&gt;
{
+        this.s = data().deepCopy(fields()[5].schema(), other.s);
+        fieldSetFlags()[5] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;6&amp;#93;&lt;/span&gt;, other.d)) &lt;/p&gt;
{
+        this.d = data().deepCopy(fields()[6].schema(), other.d);
+        fieldSetFlags()[6] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;7&amp;#93;&lt;/span&gt;, other.t)) &lt;/p&gt;
{
+        this.t = data().deepCopy(fields()[7].schema(), other.t);
+        fieldSetFlags()[7] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;8&amp;#93;&lt;/span&gt;, other.ts)) &lt;/p&gt;
{
+        this.ts = data().deepCopy(fields()[8].schema(), other.ts);
+        fieldSetFlags()[8] = true;
+      }
&lt;p&gt;+      if (isValidValue(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;9&amp;#93;&lt;/span&gt;, other.dec)) &lt;/p&gt;
{
+        this.dec = data().deepCopy(fields()[9].schema(), other.dec);
+        fieldSetFlags()[9] = true;
+      }
&lt;p&gt;+    }&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;b&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.lang.Boolean getB() &lt;/p&gt;
{
+      return b;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;b&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;b&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder setB(boolean value) &lt;/p&gt;
{
+      validate(fields()[0], value);
+      this.b = value;
+      fieldSetFlags()[0] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;b&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;b&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasB() &lt;/p&gt;
{
+      return fieldSetFlags()[0];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;b&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder clearB() &lt;/p&gt;
{
+      fieldSetFlags()[0] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;i32&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.lang.Integer getI32() &lt;/p&gt;
{
+      return i32;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;i32&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;i32&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder setI32(int value) &lt;/p&gt;
{
+      validate(fields()[1], value);
+      this.i32 = value;
+      fieldSetFlags()[1] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;i32&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;i32&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasI32() &lt;/p&gt;
{
+      return fieldSetFlags()[1];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;i32&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder clearI32() &lt;/p&gt;
{
+      fieldSetFlags()[1] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;i64&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.lang.Long getI64() &lt;/p&gt;
{
+      return i64;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;i64&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;i64&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder setI64(long value) &lt;/p&gt;
{
+      validate(fields()[2], value);
+      this.i64 = value;
+      fieldSetFlags()[2] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;i64&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;i64&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasI64() &lt;/p&gt;
{
+      return fieldSetFlags()[2];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;i64&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder clearI64() &lt;/p&gt;
{
+      fieldSetFlags()[2] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;f32&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.lang.Float getF32() &lt;/p&gt;
{
+      return f32;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;f32&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;f32&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder setF32(float value) &lt;/p&gt;
{
+      validate(fields()[3], value);
+      this.f32 = value;
+      fieldSetFlags()[3] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;f32&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;f32&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasF32() &lt;/p&gt;
{
+      return fieldSetFlags()[3];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;f32&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder clearF32() &lt;/p&gt;
{
+      fieldSetFlags()[3] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;f64&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.lang.Double getF64() &lt;/p&gt;
{
+      return f64;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;f64&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;f64&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder setF64(double value) &lt;/p&gt;
{
+      validate(fields()[4], value);
+      this.f64 = value;
+      fieldSetFlags()[4] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;f64&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;f64&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasF64() &lt;/p&gt;
{
+      return fieldSetFlags()[4];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;f64&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder clearF64() &lt;/p&gt;
{
+      fieldSetFlags()[4] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;s&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.lang.CharSequence getS() &lt;/p&gt;
{
+      return s;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;s&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;s&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder setS(java.lang.CharSequence value) &lt;/p&gt;
{
+      validate(fields()[5], value);
+      this.s = value;
+      fieldSetFlags()[5] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;s&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;s&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasS() &lt;/p&gt;
{
+      return fieldSetFlags()[5];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;s&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder clearS() &lt;/p&gt;
{
+      s = null;
+      fieldSetFlags()[5] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;d&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.time.LocalDate getD() &lt;/p&gt;
{
+      return d;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;d&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;d&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder setD(java.time.LocalDate value) &lt;/p&gt;
{
+      validate(fields()[6], value);
+      this.d = value;
+      fieldSetFlags()[6] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;d&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;d&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasD() &lt;/p&gt;
{
+      return fieldSetFlags()[6];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;d&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder clearD() &lt;/p&gt;
{
+      fieldSetFlags()[6] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;t&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.time.LocalTime getT() &lt;/p&gt;
{
+      return t;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;t&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;t&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder setT(java.time.LocalTime value) &lt;/p&gt;
{
+      validate(fields()[7], value);
+      this.t = value;
+      fieldSetFlags()[7] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;t&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;t&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasT() &lt;/p&gt;
{
+      return fieldSetFlags()[7];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;t&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder clearT() &lt;/p&gt;
{
+      fieldSetFlags()[7] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;ts&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.time.Instant getTs() &lt;/p&gt;
{
+      return ts;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;ts&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;ts&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder setTs(java.time.Instant value) &lt;/p&gt;
{
+      validate(fields()[8], value);
+      this.ts = value;
+      fieldSetFlags()[8] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;ts&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;ts&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasTs() &lt;/p&gt;
{
+      return fieldSetFlags()[8];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;ts&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder clearTs() &lt;/p&gt;
{
+      fieldSetFlags()[8] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;dec&apos; field.&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public java.math.BigDecimal getDec() &lt;/p&gt;
{
+      return dec;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the &apos;dec&apos; field.&lt;br/&gt;
+      * @param value The value of &apos;dec&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder setDec(java.math.BigDecimal value) &lt;/p&gt;
{
+      validate(fields()[9], value);
+      this.dec = value;
+      fieldSetFlags()[9] = true;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Checks whether the &apos;dec&apos; field has been set.&lt;br/&gt;
+      * @return True if the &apos;dec&apos; field has been set, false otherwise.&lt;br/&gt;
+      */&lt;br/&gt;
+    public boolean hasDec() &lt;/p&gt;
{
+      return fieldSetFlags()[9];
+    }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Clears the value of the &apos;dec&apos; field.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public org.apache.avro.specific.TestRecordWithJava8LogicalTypes.Builder clearDec() &lt;/p&gt;
{
+      dec = null;
+      fieldSetFlags()[9] = false;
+      return this;
+    }
&lt;p&gt;+&lt;br/&gt;
+    @Override&lt;br/&gt;
+    @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+    public TestRecordWithJava8LogicalTypes build() {&lt;br/&gt;
+      try &lt;/p&gt;
{
+        TestRecordWithJava8LogicalTypes record = new TestRecordWithJava8LogicalTypes();
+        record.b = fieldSetFlags()[0] ? this.b : (java.lang.Boolean) defaultValue(fields()[0], record.getConversion(0));
+        record.i32 = fieldSetFlags()[1] ? this.i32 : (java.lang.Integer) defaultValue(fields()[1], record.getConversion(1));
+        record.i64 = fieldSetFlags()[2] ? this.i64 : (java.lang.Long) defaultValue(fields()[2], record.getConversion(2));
+        record.f32 = fieldSetFlags()[3] ? this.f32 : (java.lang.Float) defaultValue(fields()[3], record.getConversion(3));
+        record.f64 = fieldSetFlags()[4] ? this.f64 : (java.lang.Double) defaultValue(fields()[4], record.getConversion(4));
+        record.s = fieldSetFlags()[5] ? this.s : (java.lang.CharSequence) defaultValue(fields()[5], record.getConversion(5));
+        record.d = fieldSetFlags()[6] ? this.d : (java.time.LocalDate) defaultValue(fields()[6], record.getConversion(6));
+        record.t = fieldSetFlags()[7] ? this.t : (java.time.LocalTime) defaultValue(fields()[7], record.getConversion(7));
+        record.ts = fieldSetFlags()[8] ? this.ts : (java.time.Instant) defaultValue(fields()[8], record.getConversion(8));
+        record.dec = fieldSetFlags()[9] ? this.dec : (java.math.BigDecimal) defaultValue(fields()[9], record.getConversion(9));
+        return record;
+      }
&lt;p&gt; catch (java.lang.Exception e) &lt;/p&gt;
{
+        throw new org.apache.avro.AvroRuntimeException(e);
+      }
&lt;p&gt;+    }&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+  private static final org.apache.avro.io.DatumWriter&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt;&lt;br/&gt;
+    WRITER$ = (org.apache.avro.io.DatumWriter&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt;)MODEL$.createDatumWriter(SCHEMA$);&lt;br/&gt;
+&lt;br/&gt;
+  @Override public void writeExternal(java.io.ObjectOutput out)&lt;br/&gt;
+    throws java.io.IOException &lt;/p&gt;
{
+    WRITER$.write(this, SpecificData.getEncoder(out));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
+  private static final org.apache.avro.io.DatumReader&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt;&lt;br/&gt;
+    READER$ = (org.apache.avro.io.DatumReader&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt;)MODEL$.createDatumReader(SCHEMA$);&lt;br/&gt;
+&lt;br/&gt;
+  @Override public void readExternal(java.io.ObjectInput in)&lt;br/&gt;
+    throws java.io.IOException &lt;/p&gt;
{
+    READER$.read(this, SpecificData.getDecoder(in));
+  }
&lt;p&gt;+&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithLogicalTypes.java b/lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithLogicalTypes.java&lt;br/&gt;
index da3f878bd..e4853d312 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithLogicalTypes.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/specific/TestRecordWithLogicalTypes.java&lt;br/&gt;
@@ -264,9 +264,9 @@ public void setTs(org.joda.time.DateTime value) &lt;/p&gt;
{
     this.ts = value;
   }

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();&lt;/li&gt;
	&lt;li&gt;protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();&lt;/li&gt;
	&lt;li&gt;protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.JodaTimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.JodaTimeConversions.DateConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.JodaTimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.JodaTimeConversions.TimeConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.JodaTimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.JodaTimeConversions.TimestampConversion();&lt;br/&gt;
   protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();&lt;br/&gt;
   private final org.apache.avro.Conversion&amp;lt;?&amp;gt;[] conversions =&lt;br/&gt;
       new org.apache.avro.Conversion&amp;lt;?&amp;gt;[] {&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java b/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java&lt;br/&gt;
index 64d45cb5e..ccaec55e1 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java&lt;br/&gt;
@@ -20,9 +20,9 @@&lt;br/&gt;
 import org.apache.avro.Conversions;&lt;br/&gt;
 import org.apache.avro.LogicalTypes;&lt;br/&gt;
 import org.apache.avro.Schema;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.DateConversion;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.TimeConversion;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.TimestampConversion;&lt;br/&gt;
+import org.apache.avro.data.JodaTimeConversions.DateConversion;&lt;br/&gt;
+import org.apache.avro.data.JodaTimeConversions.TimeConversion;&lt;br/&gt;
+import org.apache.avro.data.JodaTimeConversions.TimestampConversion;&lt;br/&gt;
 import org.apache.avro.file.DataFileReader;&lt;br/&gt;
 import org.apache.avro.file.DataFileWriter;&lt;br/&gt;
 import org.apache.avro.file.FileReader;&lt;br/&gt;
@@ -39,9 +39,15 @@&lt;br/&gt;
 import java.io.File;&lt;br/&gt;
 import java.io.IOException;&lt;br/&gt;
 import java.math.BigDecimal;&lt;br/&gt;
+import java.time.ZoneOffset;&lt;br/&gt;
 import java.util.ArrayList;&lt;br/&gt;
 import java.util.List;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+import static org.hamcrest.Matchers.comparesEqualTo;&lt;br/&gt;
+import static org.hamcrest.Matchers.empty;&lt;br/&gt;
+import static org.hamcrest.Matchers.is;&lt;br/&gt;
+import static org.hamcrest.Matchers.not;&lt;br/&gt;
+&lt;br/&gt;
 /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;This tests compatibility between classes generated before and after&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1684&quot; title=&quot;Add date, time, and timestamp to specific object model classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1684&quot;&gt;&lt;del&gt;AVRO-1684&lt;/del&gt;&lt;/a&gt;. TestRecordWithoutLogicalTypes and TestRecordWithLogicalTypes were&lt;br/&gt;
@@ -53,6 +59,10 @@&lt;/li&gt;
	&lt;li&gt;Avro with existing Avro-generated sources. When using classes generated&lt;/li&gt;
	&lt;li&gt;before &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1684&quot; title=&quot;Add date, time, and timestamp to specific object model classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1684&quot;&gt;&lt;del&gt;AVRO-1684&lt;/del&gt;&lt;/a&gt;, logical types should not be applied by the read or write&lt;/li&gt;
	&lt;li&gt;paths. Those files should behave as they did before.&lt;br/&gt;
+ *&lt;br/&gt;
+ * For &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt; 
{@link TestRecordWithJava8LogicalTypes}
&lt;p&gt; was generated from&lt;br/&gt;
+ * the same schema and tests were added to test compatibility between the&lt;br/&gt;
+ * two versions.&lt;br/&gt;
  */&lt;br/&gt;
 public class TestSpecificLogicalTypes {&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@@ -80,6 +90,97 @@ public void testRecordWithLogicalTypes() throws IOException &lt;/p&gt;
{
 
     Assert.assertEquals(&quot;Should match written record&quot;, record, actual.get(0));
   }
&lt;p&gt;+  @Test&lt;br/&gt;
+  public void testRecordWithJava8LogicalTypes() throws IOException &lt;/p&gt;
{
+    TestRecordWithJava8LogicalTypes record = new TestRecordWithJava8LogicalTypes(
+        true,
+        34,
+        35L,
+        3.14F,
+        3019.34,
+        null,
+        java.time.LocalDate.now(),
+        java.time.LocalTime.now(),
+        java.time.Instant.now(),
+        new BigDecimal(123.45f).setScale(2, BigDecimal.ROUND_HALF_DOWN)
+    );
+
+    File data = write(TestRecordWithJava8LogicalTypes.getClassSchema(), record);
+    List&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt; actual = read(
+        TestRecordWithJava8LogicalTypes.getClassSchema(), data);
+
+    Assert.assertEquals(&quot;Should match written record&quot;, record, actual.get(0));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testAbilityToReadJava8RecordWrittenAsJodaRecord() throws IOException &lt;/p&gt;
{
+    TestRecordWithLogicalTypes withJoda = new TestRecordWithLogicalTypes(
+            true,
+            34,
+            35L,
+            3.14F,
+            3019.34,
+            null,
+            LocalDate.now(),
+            LocalTime.now(),
+            DateTime.now().withZone(DateTimeZone.UTC),
+            new BigDecimal(123.45f).setScale(2, BigDecimal.ROUND_HALF_DOWN)
+    );
+
+    File data = write(TestRecordWithLogicalTypes.getClassSchema(), withJoda);
+    List&amp;lt;TestRecordWithJava8LogicalTypes&amp;gt; actual = read(
+        TestRecordWithJava8LogicalTypes.getClassSchema(), data);
+
+    Assert.assertThat(actual, is(not(empty())));
+    TestRecordWithJava8LogicalTypes withJava8 = actual.get(0);
+
+    Assert.assertThat(withJava8.getB(), is(withJoda.getB()));
+    Assert.assertThat(withJava8.getI32(), is(withJoda.getI32()));
+    Assert.assertThat(withJava8.getI64(), is(withJoda.getI64()));
+    Assert.assertThat(withJava8.getF32(), is(withJoda.getF32()));
+    Assert.assertThat(withJava8.getF64(), is(withJoda.getF64()));
+    Assert.assertThat(withJava8.getS(), is(withJoda.getS()));
+    // all of these print in the ISO-8601 format
+    Assert.assertThat(withJava8.getD().toString(), is(withJoda.getD().toString()));
+    Assert.assertThat(withJava8.getT().toString(), is(withJoda.getT().toString()));
+    Assert.assertThat(withJava8.getTs().toString(), is(withJoda.getTs().toString()));
+    Assert.assertThat(withJava8.getDec(), comparesEqualTo(withJoda.getDec()));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testAbilityToReadJodaRecordWrittenAsJava8Record() throws IOException &lt;/p&gt;
{
+    TestRecordWithJava8LogicalTypes withJava8 = new TestRecordWithJava8LogicalTypes(
+            true,
+            34,
+            35L,
+            3.14F,
+            3019.34,
+            null,
+            java.time.LocalDate.now(),
+            java.time.LocalTime.now(),
+            java.time.Instant.now(),
+            new BigDecimal(123.45f).setScale(2, BigDecimal.ROUND_HALF_DOWN)
+    );
+
+    File data = write(TestRecordWithJava8LogicalTypes.getClassSchema(), withJava8);
+    List&amp;lt;TestRecordWithLogicalTypes&amp;gt; actual = read(
+        TestRecordWithLogicalTypes.getClassSchema(), data);
+
+    Assert.assertThat(actual, is(not(empty())));
+    TestRecordWithLogicalTypes withJoda = actual.get(0);
+
+    Assert.assertThat(withJoda.getB(), is(withJava8.getB()));
+    Assert.assertThat(withJoda.getI32(), is(withJava8.getI32()));
+    Assert.assertThat(withJoda.getI64(), is(withJava8.getI64()));
+    Assert.assertThat(withJoda.getF32(), is(withJava8.getF32()));
+    Assert.assertThat(withJoda.getF64(), is(withJava8.getF64()));
+    Assert.assertThat(withJoda.getS(), is(withJava8.getS()));
+    // all of these print in the ISO-8601 format
+    Assert.assertThat(withJoda.getD().toString(), is(withJava8.getD().toString()));
+    Assert.assertThat(withJoda.getT().toString(), is(withJava8.getT().toString()));
+    Assert.assertThat(withJoda.getTs().toString(), is(withJava8.getTs().toString()));
+    Assert.assertThat(withJoda.getDec(), comparesEqualTo(withJava8.getDec()));
+  }

&lt;p&gt;   @Test&lt;br/&gt;
   public void testRecordWithoutLogicalTypes() throws IOException {&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificToFromByteArray.java b/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificToFromByteArray.java&lt;br/&gt;
index d3a81c315..8773cdbdc 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificToFromByteArray.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificToFromByteArray.java&lt;br/&gt;
@@ -19,7 +19,7 @@&lt;/p&gt;

&lt;p&gt; import org.apache.avro.Conversions;&lt;br/&gt;
 import org.apache.avro.LogicalTypes;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions;&lt;br/&gt;
+import org.apache.avro.data.JodaTimeConversions;&lt;br/&gt;
 import org.apache.avro.message.MissingSchemaException;&lt;br/&gt;
 import org.joda.time.DateTime;&lt;br/&gt;
 import org.joda.time.DateTimeZone;&lt;br/&gt;
@@ -63,9 +63,9 @@ public void testSpecificToFromByteBufferWithoutLogicalTypes() throws IOException&lt;br/&gt;
         3.14F,&lt;br/&gt;
         3019.34,&lt;br/&gt;
         null,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;new TimeConversions.DateConversion().toInt(LocalDate.now(), null, null),&lt;/li&gt;
	&lt;li&gt;new TimeConversions.TimeConversion().toInt(LocalTime.now(), null, null),&lt;/li&gt;
	&lt;li&gt;new TimeConversions.TimestampConversion().toLong(&lt;br/&gt;
+        new JodaTimeConversions.DateConversion().toInt(LocalDate.now(), null, null),&lt;br/&gt;
+        new JodaTimeConversions.TimeConversion().toInt(LocalTime.now(), null, null),&lt;br/&gt;
+        new JodaTimeConversions.TimestampConversion().toLong(&lt;br/&gt;
             DateTime.now().withZone(DateTimeZone.UTC), null, null),&lt;br/&gt;
         new Conversions.DecimalConversion().toBytes(&lt;br/&gt;
             new BigDecimal(&quot;123.45&quot;), null, LogicalTypes.decimal(9, 2))&lt;br/&gt;
@@ -86,9 +86,9 @@ public void testSpecificByteArrayIncompatibleWithLogicalTypes() throws IOExcepti&lt;br/&gt;
         3.14F,&lt;br/&gt;
         3019.34,&lt;br/&gt;
         null,&lt;/li&gt;
	&lt;li&gt;new TimeConversions.DateConversion().toInt(LocalDate.now(), null, null),&lt;/li&gt;
	&lt;li&gt;new TimeConversions.TimeConversion().toInt(LocalTime.now(), null, null),&lt;/li&gt;
	&lt;li&gt;new TimeConversions.TimestampConversion().toLong(&lt;br/&gt;
+        new JodaTimeConversions.DateConversion().toInt(LocalDate.now(), null, null),&lt;br/&gt;
+        new JodaTimeConversions.TimeConversion().toInt(LocalTime.now(), null, null),&lt;br/&gt;
+        new JodaTimeConversions.TimestampConversion().toLong(&lt;br/&gt;
             DateTime.now().withZone(DateTimeZone.UTC), null, null),&lt;br/&gt;
         new Conversions.DecimalConversion().toBytes(&lt;br/&gt;
             new BigDecimal(&quot;123.45&quot;), null, LogicalTypes.decimal(9, 2))&lt;br/&gt;
diff --git a/lang/java/avro/src/test/resources/record_with_logical_types.avsc b/lang/java/avro/src/test/resources/record_with_logical_types.avsc&lt;br/&gt;
index 9932f9505..f5d212917 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/avro/src/test/resources/record_with_logical_types.avsc&lt;br/&gt;
+++ b/lang/java/avro/src/test/resources/record_with_logical_types.avsc&lt;br/&gt;
@@ -1,7 +1,7 @@&lt;br/&gt;
 {&lt;br/&gt;
   &quot;type&quot; : &quot;record&quot;,&lt;br/&gt;
   &quot;name&quot; : &quot;TestRecordWithLogicalTypes&quot;,&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;&quot;doc&quot; : &quot;Schema for TestRecordWithLogicalTypes and TestRecordWithoutLogicalTypes, see TestSpecificLogicalTypes&quot;&lt;br/&gt;
+  &quot;doc&quot; : &quot;Schema for TestRecordWithLogicalTypes and TestRecordWithoutLogicalTypes, see TestSpecificLogicalTypes&quot;,&lt;br/&gt;
   &quot;namespace&quot; : &quot;org.apache.avro.specific&quot;,&lt;br/&gt;
   &quot;fields&quot; : [ {&lt;br/&gt;
     &quot;name&quot; : &quot;b&quot;,&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/ProtocolTask.java b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/ProtocolTask.java&lt;br/&gt;
index 36bf67b51..71762434b 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/ProtocolTask.java&lt;br/&gt;
+++ b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/ProtocolTask.java&lt;br/&gt;
@@ -23,6 +23,7 @@&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; import org.apache.avro.AvroRuntimeException;&lt;br/&gt;
 import org.apache.avro.Protocol;&lt;br/&gt;
+import org.apache.avro.compiler.specific.SpecificCompiler.DateTimeLogicalTypeType;&lt;br/&gt;
 import org.apache.avro.generic.GenericData.StringType;&lt;/p&gt;

&lt;p&gt; import org.apache.tools.ant.BuildException;&lt;br/&gt;
@@ -36,6 +37,7 @@&lt;br/&gt;
   private File src;&lt;br/&gt;
   private File dest = new File(&quot;.&quot;);&lt;br/&gt;
   private StringType stringType = StringType.CharSequence;&lt;br/&gt;
+  private DateTimeLogicalTypeType dateTimeLogicalTypeType = DateTimeLogicalTypeType.JODA;&lt;/p&gt;

&lt;p&gt;   private final ArrayList&amp;lt;FileSet&amp;gt; filesets = new ArrayList&amp;lt;FileSet&amp;gt;();&lt;/p&gt;

&lt;p&gt;@@ -51,6 +53,16 @@&lt;br/&gt;
   /** Get the string type. */&lt;br/&gt;
   public StringType getStringType() &lt;/p&gt;
{ return this.stringType; }

&lt;p&gt;+  /** Sets the date/time logical type type (either JODA or JAVA8) */&lt;br/&gt;
+  public void setDateTimeLogicalTypeType(DateTimeLogicalTypeType dateTimeLogicalTypeType) &lt;/p&gt;
{
+    this.dateTimeLogicalTypeType = dateTimeLogicalTypeType;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /** Get the date/time logical type type (either JODA or JAVA8) */&lt;br/&gt;
+  public DateTimeLogicalTypeType getDateTimeLogicalTypeType() &lt;/p&gt;
{
+    return dateTimeLogicalTypeType;
+  }
&lt;p&gt;+&lt;br/&gt;
   /** Add a fileset. */&lt;br/&gt;
   public void addFileset(FileSet set) &lt;/p&gt;
{ filesets.add(set); }

&lt;p&gt;@@ -77,7 +89,7 @@ public void execute() {&lt;/p&gt;

&lt;p&gt;   protected void doCompile(File src, File dir) throws IOException &lt;/p&gt;
{
     Protocol protocol = Protocol.parse(src);
-    SpecificCompiler compiler = new SpecificCompiler(protocol);
+    SpecificCompiler compiler = new SpecificCompiler(protocol, getDateTimeLogicalTypeType());
     compiler.setStringType(getStringType());
     compiler.compileToDestination(src, dest);
   }
&lt;p&gt;diff --git a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SchemaTask.java b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SchemaTask.java&lt;br/&gt;
index 9c5c12aa4..a48a8aa45 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SchemaTask.java&lt;br/&gt;
+++ b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SchemaTask.java&lt;br/&gt;
@@ -28,7 +28,7 @@&lt;br/&gt;
   protected void doCompile(File src, File dest) throws IOException &lt;/p&gt;
{
     Schema.Parser parser = new Schema.Parser();
     Schema schema = parser.parse(src);
-    SpecificCompiler compiler = new SpecificCompiler(schema);
+    SpecificCompiler compiler = new SpecificCompiler(schema, getDateTimeLogicalTypeType());
     compiler.setStringType(getStringType());
     compiler.compileToDestination(src, dest);
   }
&lt;p&gt;diff --git a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
index 7a6f5f1cc..e7c41f202 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
+++ b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
@@ -37,9 +37,8 @@&lt;br/&gt;
 import org.apache.avro.Conversion;&lt;br/&gt;
 import org.apache.avro.Conversions;&lt;br/&gt;
 import org.apache.avro.LogicalTypes;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.DateConversion;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.TimeConversion;&lt;br/&gt;
-import org.apache.avro.data.TimeConversions.TimestampConversion;&lt;br/&gt;
+import org.apache.avro.data.Java8TimeConversions;&lt;br/&gt;
+import org.apache.avro.data.JodaTimeConversions;&lt;br/&gt;
 import org.apache.avro.specific.SpecificData;&lt;br/&gt;
 import org.codehaus.jackson.JsonNode;&lt;/p&gt;

&lt;p&gt;@@ -88,18 +87,16 @@&lt;br/&gt;
    */&lt;br/&gt;
   protected static final int MAX_FIELD_PARAMETER_UNIT_COUNT = JVM_METHOD_ARG_LIMIT - 1;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public static enum FieldVisibility {&lt;br/&gt;
+  public enum FieldVisibility 
{
     PUBLIC, PUBLIC_DEPRECATED, PRIVATE
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private static final SpecificData SPECIFIC = new SpecificData();&lt;/li&gt;
	&lt;li&gt;static {&lt;/li&gt;
	&lt;li&gt;SPECIFIC.addLogicalTypeConversion(new DateConversion());&lt;/li&gt;
	&lt;li&gt;SPECIFIC.addLogicalTypeConversion(new TimeConversion());&lt;/li&gt;
	&lt;li&gt;SPECIFIC.addLogicalTypeConversion(new TimestampConversion());&lt;/li&gt;
	&lt;li&gt;SPECIFIC.addLogicalTypeConversion(new Conversions.DecimalConversion());&lt;br/&gt;
+  public enum DateTimeLogicalTypeType 
{
+    JODA, JAVA8
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  private final SpecificData specificData = new SpecificData();&lt;br/&gt;
+&lt;br/&gt;
   private final Set&amp;lt;Schema&amp;gt; queue = new HashSet&amp;lt;Schema&amp;gt;();&lt;br/&gt;
   private Protocol protocol;&lt;br/&gt;
   private VelocityEngine velocityEngine;&lt;br/&gt;
@@ -109,6 +106,7 @@&lt;br/&gt;
   private boolean createAllArgsConstructor = true;&lt;br/&gt;
   private String outputCharacterEncoding;&lt;br/&gt;
   private boolean enableDecimalLogicalType = false;&lt;br/&gt;
+  private DateTimeLogicalTypeType dateTimeLogicalTypeType = DateTimeLogicalTypeType.JODA;&lt;br/&gt;
   private String suffix = &quot;.java&quot;;&lt;/p&gt;

&lt;p&gt;   /*&lt;br/&gt;
@@ -144,7 +142,11 @@ public boolean isCreateAllArgsConstructor() {&lt;br/&gt;
       &quot; */\n&quot;;&lt;/p&gt;

&lt;p&gt;   public SpecificCompiler(Protocol protocol) &lt;/p&gt;
{
-    this();
+    this(protocol, DateTimeLogicalTypeType.JODA);
+  }
&lt;p&gt;+&lt;br/&gt;
+  public SpecificCompiler(Protocol protocol, DateTimeLogicalTypeType dateTimeLogicalTypeType) {&lt;br/&gt;
+    this(dateTimeLogicalTypeType);&lt;br/&gt;
     // enqueue all types&lt;br/&gt;
     for (Schema s : protocol.getTypes()) {&lt;br/&gt;
       enqueue(s);&lt;br/&gt;
@@ -153,16 +155,38 @@ public SpecificCompiler(Protocol protocol) {&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   public SpecificCompiler(Schema schema) &lt;/p&gt;
{
-    this();
+    this(schema, DateTimeLogicalTypeType.JODA);
+  }
&lt;p&gt;+&lt;br/&gt;
+  public SpecificCompiler(Schema schema, DateTimeLogicalTypeType dateTimeLogicalTypeType) &lt;/p&gt;
{
+    this(dateTimeLogicalTypeType);
     enqueue(schema);
     this.protocol = null;
   }

&lt;p&gt;+  /**&lt;br/&gt;
+   * Creates a specific compler with the default (Joda) type for date/time related logical types.&lt;br/&gt;
+   *&lt;br/&gt;
+   * @see #SpecificCompiler(DateTimeLogicalTypeType)&lt;br/&gt;
+   */&lt;br/&gt;
   SpecificCompiler() &lt;/p&gt;
{
+    this(DateTimeLogicalTypeType.JODA);
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Creates a specific compiler with the given type to use for date/time related logical types.&lt;br/&gt;
+   * Use &lt;/p&gt;
{@link DateTimeLogicalTypeType#JODA}
&lt;p&gt; to generate Joda Time classes, use &lt;/p&gt;
{@link DateTimeLogicalTypeType#JAVA8}
&lt;p&gt;+   * to generate &lt;/p&gt;
{@code java.time.*}
&lt;p&gt; classes for the date/time local types.&lt;br/&gt;
+   *&lt;br/&gt;
+   * @param dateTimeLogicalTypeType the types used for date/time related logical types&lt;br/&gt;
+   */&lt;br/&gt;
+  SpecificCompiler(DateTimeLogicalTypeType dateTimeLogicalTypeType) &lt;/p&gt;
{
+    this.dateTimeLogicalTypeType = dateTimeLogicalTypeType;
     this.templateDir =
       System.getProperty(&quot;org.apache.avro.specific.templates&quot;,
                          &quot;/org/apache/avro/compiler/specific/templates/java/classic/&quot;);
     initializeVelocity();
+    initializeSpecificData();
   }

&lt;p&gt;   /** Set the resource directory where templates reside. First, the compiler checks&lt;br/&gt;
@@ -225,6 +249,14 @@ public void setEnableDecimalLogicalType(boolean enableDecimalLogicalType) &lt;/p&gt;
{
     this.enableDecimalLogicalType = enableDecimalLogicalType;
   }

&lt;p&gt;+  public boolean useJodaForDateTimeLogicalTypes() &lt;/p&gt;
{
+    return dateTimeLogicalTypeType == DateTimeLogicalTypeType.JODA;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public boolean useJava8ForDateTimeLogicalTypes() &lt;/p&gt;
{
+    return dateTimeLogicalTypeType == DateTimeLogicalTypeType.JAVA8;
+  }
&lt;p&gt;+&lt;br/&gt;
   private static String logChuteName = null;&lt;/p&gt;

&lt;p&gt;   private void initializeVelocity() {&lt;br/&gt;
@@ -253,6 +285,20 @@ private void initializeVelocity() &lt;/p&gt;
{
     velocityEngine.setProperty(&quot;runtime.log.logsystem.class&quot;, logChuteName);
   }

&lt;p&gt;+  private void initializeSpecificData() {&lt;br/&gt;
+    if(dateTimeLogicalTypeType == DateTimeLogicalTypeType.JODA) &lt;/p&gt;
{
+      specificData.addLogicalTypeConversion(new JodaTimeConversions.DateConversion());
+      specificData.addLogicalTypeConversion(new JodaTimeConversions.TimeConversion());
+      specificData.addLogicalTypeConversion(new JodaTimeConversions.TimestampConversion());
+    }
&lt;p&gt; else if (dateTimeLogicalTypeType == DateTimeLogicalTypeType.JAVA8) &lt;/p&gt;
{
+      specificData.addLogicalTypeConversion(new Java8TimeConversions.DateConversion());
+      specificData.addLogicalTypeConversion(new Java8TimeConversions.TimeMillisConversion());
+      specificData.addLogicalTypeConversion(new Java8TimeConversions.TimestampMillisConversion());
+    }
&lt;p&gt;+&lt;br/&gt;
+    specificData.addLogicalTypeConversion(new Conversions.DecimalConversion());&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Captures output file path and contents.&lt;br/&gt;
    */&lt;br/&gt;
@@ -324,7 +370,7 @@ public static void compileSchema(File[] srcFiles, File dest) throws IOException&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     for (File src : srcFiles) &lt;/p&gt;
{
       Schema schema = parser.parse(src);
-      SpecificCompiler compiler = new SpecificCompiler(schema);
+      SpecificCompiler compiler = new SpecificCompiler(schema, DateTimeLogicalTypeType.JODA);
       compiler.compileToDestination(src, dest);
     }
&lt;p&gt;   }&lt;br/&gt;
@@ -630,7 +676,7 @@ private String javaType(Schema schema, boolean checkConvertedLogicalType) {&lt;br/&gt;
   private String getConvertedLogicalType(Schema schema) {&lt;br/&gt;
     if (enableDecimalLogicalType&lt;/p&gt;
&lt;div class=&apos;table-wrap&apos;&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; !(schema.getLogicalType() instanceof LogicalTypes.Decimal)) {
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Conversion&amp;lt;?&amp;gt; conversion = SPECIFIC&lt;br/&gt;
+      Conversion&amp;lt;?&amp;gt; conversion = specificData&lt;br/&gt;
           .getConversionFor(schema.getLogicalType());&lt;br/&gt;
       if (conversion != null) {&lt;br/&gt;
         return conversion.getConvertedType().getName();&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
index ccec4b60c..aa566486e 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
+++ b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
@@ -151,10 +151,16 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
   }&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;


&lt;p&gt; #if ($this.hasLogicalTypeField($schema))&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();&lt;/li&gt;
	&lt;li&gt;protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();&lt;/li&gt;
	&lt;li&gt;protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();&lt;br/&gt;
   protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();&lt;br/&gt;
+#if ($this.useJodaForDateTimeLogicalTypes())&lt;br/&gt;
+  protected static final org.apache.avro.data.JodaTimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.JodaTimeConversions.DateConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.JodaTimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.JodaTimeConversions.TimeConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.JodaTimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.JodaTimeConversions.TimestampConversion();&lt;br/&gt;
+#elseif ($this.useJava8ForDateTimeLogicalTypes())&lt;br/&gt;
+  protected static final org.apache.avro.data.Java8TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.Java8TimeConversions.DateConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.Java8TimeConversions.TimeMillisConversion TIME_CONVERSION = new org.apache.avro.data.Java8TimeConversions.TimeMillisConversion();&lt;br/&gt;
+  protected static final org.apache.avro.data.Java8TimeConversions.TimestampMillisConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.Java8TimeConversions.TimestampMillisConversion();&lt;br/&gt;
+#end&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   private static final org.apache.avro.Conversion&amp;lt;?&amp;gt;[] conversions =&lt;br/&gt;
       new org.apache.avro.Conversion&amp;lt;?&amp;gt;[] &lt;/p&gt;
{
diff --git a/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java b/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java
index 35d53b524..08fd55c5b 100644
--- a/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java
+++ b/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java
@@ -17,6 +17,8 @@
  */
 package org.apache.avro.compiler.specific;
 
+import static org.apache.avro.compiler.specific.SpecificCompiler.DateTimeLogicalTypeType.JODA;
+import static org.apache.avro.compiler.specific.SpecificCompiler.DateTimeLogicalTypeType.JAVA8;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -39,6 +41,7 @@
 import org.apache.avro.LogicalTypes;
 import org.apache.avro.Schema;
 import org.apache.avro.SchemaBuilder;
+import org.apache.avro.compiler.specific.SpecificCompiler.DateTimeLogicalTypeType;
 import org.apache.avro.generic.GenericData.StringType;
 import org.junit.After;
 import org.junit.Assert;
@@ -112,9 +115,13 @@ private static Schema createSampleRecordSchema(int numStringFields, int numDoubl
   }

&lt;p&gt;   private SpecificCompiler createCompiler() throws IOException &lt;/p&gt;
{
+    return createCompiler(JODA);
+  }
&lt;p&gt;+&lt;br/&gt;
+  private SpecificCompiler createCompiler(DateTimeLogicalTypeType dateTimeLogicalTypeType) throws IOException {&lt;br/&gt;
     Schema.Parser parser = new Schema.Parser();&lt;br/&gt;
     Schema schema = parser.parse(this.src);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SpecificCompiler compiler = new SpecificCompiler(schema);&lt;br/&gt;
+    SpecificCompiler compiler = new SpecificCompiler(schema, dateTimeLogicalTypeType);&lt;br/&gt;
     compiler.setTemplateDir(this.velocityTemplateDir);&lt;br/&gt;
     compiler.setStringType(StringType.CharSequence);&lt;br/&gt;
     return compiler;&lt;br/&gt;
@@ -377,6 +384,26 @@ public void testJavaTypeWithDecimalLogicalTypeDisabled() throws Exception 
{
         &quot;java.lang.CharSequence&quot;, compiler.javaType(uuidSchema));
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  @Test&lt;br/&gt;
+  public void testJavaTypeWithJava8DateTimeTypes() throws Exception &lt;/p&gt;
{
+    SpecificCompiler compiler = createCompiler(JAVA8);
+
+    Schema dateSchema = LogicalTypes.date()
+        .addToSchema(Schema.create(Schema.Type.INT));
+    Schema timeSchema = LogicalTypes.timeMillis()
+        .addToSchema(Schema.create(Schema.Type.INT));
+    Schema timestampSchema = LogicalTypes.timestampMillis()
+        .addToSchema(Schema.create(Schema.Type.LONG));
+
+    // Date/time types should always use upper level java classes
+    Assert.assertEquals(&quot;Should use java.time.LocalDate for date type&quot;,
+        &quot;java.time.LocalDate&quot;, compiler.javaType(dateSchema));
+    Assert.assertEquals(&quot;Should use java.time.LocalTime for time-millis type&quot;,
+        &quot;java.time.LocalTime&quot;, compiler.javaType(timeSchema));
+    Assert.assertEquals(&quot;Should use java.time.Instant for timestamp-millis type&quot;,
+        &quot;java.time.Instant&quot;, compiler.javaType(timestampSchema));
+  }
&lt;p&gt;+&lt;br/&gt;
   @Test&lt;br/&gt;
   public void testJavaUnbox() throws Exception {&lt;br/&gt;
     SpecificCompiler compiler = createCompiler();&lt;br/&gt;
@@ -412,7 +439,26 @@ public void testJavaUnbox() throws Exception &lt;/p&gt;
{
         &quot;org.joda.time.LocalTime&quot;, compiler.javaUnbox(timeSchema));
     Assert.assertEquals(&quot;Should use Joda DateTime for timestamp-millis type&quot;,
         &quot;org.joda.time.DateTime&quot;, compiler.javaUnbox(timestampSchema));
+  }

&lt;p&gt;+  @Test&lt;br/&gt;
+  public void testJavaUnboxJava8DateTime() throws Exception &lt;/p&gt;
{
+    SpecificCompiler compiler = createCompiler(JAVA8);
+
+    Schema dateSchema = LogicalTypes.date()
+        .addToSchema(Schema.create(Schema.Type.INT));
+    Schema timeSchema = LogicalTypes.timeMillis()
+        .addToSchema(Schema.create(Schema.Type.INT));
+    Schema timestampSchema = LogicalTypes.timestampMillis()
+        .addToSchema(Schema.create(Schema.Type.LONG));
+    // Date/time types should always use upper level java classes, even though
+    // their underlying representations are primitive types
+    Assert.assertEquals(&quot;Should use java.time.LocalDate for date type&quot;,
+        &quot;java.time.LocalDate&quot;, compiler.javaUnbox(dateSchema));
+    Assert.assertEquals(&quot;Should use java.time.LocalTime for time-millis type&quot;,
+        &quot;java.time.LocalTime&quot;, compiler.javaUnbox(timeSchema));
+    Assert.assertEquals(&quot;Should use java.time.Instant for timestamp-millis type&quot;,
+        &quot;java.time.Instant&quot;, compiler.javaUnbox(timestampSchema));
   }

&lt;p&gt;   @Test&lt;br/&gt;
@@ -475,6 +521,14 @@ public void testLogicalTypesWithMultipleFields() throws Exception &lt;/p&gt;
{
         new SpecificCompiler(logicalTypesWithMultipleFields).compile());
   }

&lt;p&gt;+  @Test&lt;br/&gt;
+  public void testLogicalTypesWithMultipleFieldsJava8DateTime() throws Exception &lt;/p&gt;
{
+    Schema logicalTypesWithMultipleFields = new Schema.Parser().parse(
+        new File(&quot;src/test/resources/logical_types_with_multiple_fields.avsc&quot;));
+    assertCompilesWithJavaCompiler(
+        new SpecificCompiler(logicalTypesWithMultipleFields, JAVA8).compile());
+  }
&lt;p&gt;+&lt;br/&gt;
   @Test&lt;br/&gt;
   public void testConversionInstanceWithDecimalLogicalTypeDisabled() throws Exception &lt;/p&gt;
{
     SpecificCompiler compiler = createCompiler();
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java
index 9d78ede91..69edf3c09 100644
--- a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java
@@ -129,6 +129,14 @@
    */
   protected boolean enableDecimalLogicalType;
 
+  /**
+   * Determines which type of classes to generate for date/time related logical types. Either &apos;joda&apos; or &apos;java8&apos;.
+   * Defaults to joda for backwards compatibility reasons.
+   *
+   * @parameter default-value=&quot;joda&quot;
+   */
+  protected String dateTimeLogicalTypeType = SpecificCompiler.DateTimeLogicalTypeType.JODA.name().toLowerCase();
+
   /**
    * The current Maven project.
    *
@@ -237,6 +245,15 @@ private void compileFiles(String[] files, File sourceDir, File outDir) throws Mo
     }
&lt;p&gt;   }&lt;/p&gt;

&lt;p&gt;+  protected SpecificCompiler.DateTimeLogicalTypeType getDateTimeLocalTypeType() {&lt;br/&gt;
+    try &lt;/p&gt;
{
+      String upper = String.valueOf(this.dateTimeLogicalTypeType).trim().toUpperCase();
+      return SpecificCompiler.DateTimeLogicalTypeType.valueOf(upper);
+    }
&lt;p&gt; catch (IllegalArgumentException e) &lt;/p&gt;
{
+      return SpecificCompiler.DateTimeLogicalTypeType.JODA;
+    }
&lt;p&gt;+  }&lt;br/&gt;
+&lt;br/&gt;
   protected abstract void doCompile(String filename, File sourceDirectory, File outputDirectory) throws IOException;&lt;/p&gt;

&lt;p&gt;   protected abstract String[] getIncludes();&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java&lt;br/&gt;
index 3f61ac2a2..f82b30ad3 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java&lt;br/&gt;
@@ -88,7 +88,7 @@ protected void doCompile(String filename, File sourceDirectory, File outputDirec&lt;br/&gt;
       Protocol p = parser.CompilationUnit();&lt;br/&gt;
       String json = p.toString(true);&lt;br/&gt;
       Protocol protocol = Protocol.parse(json);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SpecificCompiler compiler = new SpecificCompiler(protocol);&lt;br/&gt;
+      SpecificCompiler compiler = new SpecificCompiler(protocol, getDateTimeLocalTypeType());&lt;br/&gt;
       compiler.setStringType(GenericData.StringType.valueOf(stringType));&lt;br/&gt;
       compiler.setTemplateDir(templateDirectory);&lt;br/&gt;
       compiler.setFieldVisibility(getFieldVisibility());&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java&lt;br/&gt;
index a30a08245..a2f898c98 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java&lt;br/&gt;
@@ -56,7 +56,7 @@&lt;br/&gt;
   protected void doCompile(String filename, File sourceDirectory, File outputDirectory) throws IOException 
{
     File src = new File(sourceDirectory, filename);
     Protocol protocol = Protocol.parse(src);
-    SpecificCompiler compiler = new SpecificCompiler(protocol);
+    SpecificCompiler compiler = new SpecificCompiler(protocol, getDateTimeLocalTypeType());
     compiler.setTemplateDir(templateDirectory);
     compiler.setStringType(StringType.valueOf(stringType));
     compiler.setFieldVisibility(getFieldVisibility());
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java
index 9a849207f..48b73f397 100644
--- a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java
@@ -73,7 +73,7 @@ protected void doCompile(String filename, File sourceDirectory, File outputDirec
       schema = schemaParser.parse(src);
     }&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SpecificCompiler compiler = new SpecificCompiler(schema);&lt;br/&gt;
+    SpecificCompiler compiler = new SpecificCompiler(schema, getDateTimeLocalTypeType());&lt;br/&gt;
     compiler.setTemplateDir(templateDirectory);&lt;br/&gt;
     compiler.setStringType(StringType.valueOf(stringType));&lt;br/&gt;
     compiler.setFieldVisibility(getFieldVisibility());&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/avro/User.avdl b/lang/java/maven-plugin/src/test/avro/User.avdl&lt;br/&gt;
index 4d4fa5a9a..cb63ee528 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/test/avro/User.avdl&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/avro/User.avdl&lt;br/&gt;
@@ -25,6 +25,7 @@ protocol IdlTest {&lt;br/&gt;
     record IdlUser 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {       union { null, string } id;       union { null, long } createdOn;+      timestamp_ms modifiedOn;       union { null, IdlPrivacy } privacy;     }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;diff --git a/lang/java/maven-plugin/src/test/avro/User.avpr b/lang/java/maven-plugin/src/test/avro/User.avpr&lt;br/&gt;
index 9d8a10958..6dd8b9b89 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/test/avro/User.avpr&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/avro/User.avpr&lt;br/&gt;
@@ -27,6 +27,13 @@&lt;br/&gt;
           &quot;name&quot;: &quot;privacy&quot;, &lt;br/&gt;
           &quot;type&quot;: &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;null&amp;quot;, &amp;quot;ProtocolPrivacy&amp;quot;&amp;#93;&lt;/span&gt;,&lt;br/&gt;
           &quot;default&quot;: null&lt;br/&gt;
+        },&lt;br/&gt;
+        {&lt;br/&gt;
+          &quot;name&quot;: &quot;modifiedOn&quot;,&lt;br/&gt;
+          &quot;type&quot;: &lt;/p&gt;
{
+            &quot;type&quot;: &quot;long&quot;,
+            &quot;logicalType&quot;: &quot;timestamp-millis&quot;
+          }
&lt;p&gt;         }&lt;br/&gt;
       ]&lt;br/&gt;
     } &lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/avro/User.avsc b/lang/java/maven-plugin/src/test/avro/User.avsc&lt;br/&gt;
index 0eb5e096e..a93e0d13f 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/test/avro/User.avsc&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/avro/User.avsc&lt;br/&gt;
@@ -33,6 +33,13 @@&lt;br/&gt;
             &quot;name&quot;: &quot;privacyDirectImport&quot;, &lt;br/&gt;
             &quot;type&quot;: &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;null&amp;quot;, &amp;quot;test.PrivacyDirectImport&amp;quot;&amp;#93;&lt;/span&gt;,&lt;br/&gt;
             &quot;default&quot;: null&lt;br/&gt;
+        },&lt;br/&gt;
+        {&lt;br/&gt;
+            &quot;name&quot;: &quot;time&quot;,&lt;br/&gt;
+            &quot;type&quot;: &lt;/p&gt;
{
+                &quot;type&quot;: &quot;long&quot;,
+                &quot;logicalType&quot;: &quot;timestamp-millis&quot;
+            }
&lt;p&gt;         }&lt;br/&gt;
     ]&lt;br/&gt;
 }&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/AbstractAvroMojoTest.java b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/AbstractAvroMojoTest.java&lt;br/&gt;
index 23487814e..24e79c064 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/AbstractAvroMojoTest.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/AbstractAvroMojoTest.java&lt;br/&gt;
@@ -20,14 +20,18 @@&lt;br/&gt;
 import java.io.File;&lt;br/&gt;
 import java.util.Arrays;&lt;br/&gt;
 import java.util.List;&lt;br/&gt;
+&lt;br/&gt;
 import org.apache.maven.plugin.testing.AbstractMojoTestCase;&lt;/p&gt;

&lt;p&gt;+import static java.util.Arrays.stream;&lt;br/&gt;
+import static java.util.stream.Collectors.toList;&lt;br/&gt;
+&lt;br/&gt;
 /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Base class for all Arvo mojo test classes.&lt;br/&gt;
  *&lt;/li&gt;
	&lt;li&gt;@author saden&lt;br/&gt;
  */&lt;br/&gt;
-public class AbstractAvroMojoTest extends AbstractMojoTestCase {&lt;br/&gt;
+public abstract class AbstractAvroMojoTest extends AbstractMojoTestCase {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   @Override&lt;br/&gt;
   protected void setUp() throws Exception {&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestIDLProtocolMojo.java b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestIDLProtocolMojo.java&lt;br/&gt;
index 931687284..20cb36011 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestIDLProtocolMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestIDLProtocolMojo.java&lt;br/&gt;
@@ -17,7 +17,13 @@&lt;br/&gt;
  */&lt;br/&gt;
 package org.apache.avro.mojo;&lt;/p&gt;

&lt;p&gt;+import org.codehaus.plexus.util.FileUtils;&lt;br/&gt;
+&lt;br/&gt;
 import java.io.File;&lt;br/&gt;
+import java.io.FileReader;&lt;br/&gt;
+import java.nio.file.Files;&lt;br/&gt;
+import java.nio.file.Paths;&lt;br/&gt;
+import java.util.List;&lt;/p&gt;

&lt;p&gt; /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Test the IDL Protocol Mojo.&lt;br/&gt;
@@ -26,19 +32,36 @@&lt;br/&gt;
  */&lt;br/&gt;
 public class TestIDLProtocolMojo extends AbstractAvroMojoTest {&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;protected File testPom = new File(getBasedir(),&lt;/li&gt;
	&lt;li&gt;&quot;src/test/resources/unit/idl/pom.xml&quot;);&lt;br/&gt;
+  protected File jodaTestPom = new File(getBasedir(),&lt;br/&gt;
+          &quot;src/test/resources/unit/idl/pom-joda.xml&quot;);&lt;br/&gt;
+  protected File java8TestPom = new File(getBasedir(),&lt;br/&gt;
+          &quot;src/test/resources/unit/idl/pom-java8.xml&quot;);&lt;br/&gt;
+&lt;br/&gt;
+  public void testIdlProtocolMojoJoda() throws Exception 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+    IDLProtocolMojo mojo = (IDLProtocolMojo) lookupMojo(&amp;quot;idl-protocol&amp;quot;, jodaTestPom);++    assertNotNull(mojo);+    mojo.execute();++    File outputDir = new File(getBasedir(), &amp;quot;target/test-harness/idl-joda/test&amp;quot;);+    String[] generatedFileNames = new String[]{&quot;IdlPrivacy.java&quot;,
+      &quot;IdlTest.java&quot;, &quot;IdlUser.java&quot;, &quot;IdlUserWrapper.java&quot;};++    String idlUserContent = FileUtils.fileRead(new File(outputDir, &amp;quot;IdlUser.java&amp;quot;));+    assertTrue(idlUserContent.contains(&amp;quot;org.joda.time.DateTime&amp;quot;));+  }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public void testIdlProtocolMojo() throws Exception {&lt;/li&gt;
	&lt;li&gt;IDLProtocolMojo mojo = (IDLProtocolMojo) lookupMojo(&quot;idl-protocol&quot;, testPom);&lt;br/&gt;
+  public void testIdlProtocolMojoJava8() throws Exception {&lt;br/&gt;
+    IDLProtocolMojo mojo = (IDLProtocolMojo) lookupMojo(&quot;idl-protocol&quot;, java8TestPom);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     assertNotNull(mojo);&lt;br/&gt;
     mojo.execute();&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;File outputDir = new File(getBasedir(), &quot;target/test-harness/idl/test&quot;);&lt;/li&gt;
	&lt;li&gt;String[] generatedFiles = new String[]{&quot;IdlPrivacy.java&quot;,&lt;br/&gt;
+    File outputDir = new File(getBasedir(), &quot;target/test-harness/idl-java8/test&quot;);&lt;br/&gt;
+    String[] generatedFileNames = new String[]
{&quot;IdlPrivacy.java&quot;,
       &quot;IdlTest.java&quot;, &quot;IdlUser.java&quot;, &quot;IdlUserWrapper.java&quot;}
&lt;p&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertFilesExist(outputDir, generatedFiles);&lt;br/&gt;
+    String idlUserContent = FileUtils.fileRead(new File(outputDir, &quot;IdlUser.java&quot;));&lt;br/&gt;
+    assertTrue(idlUserContent.contains(&quot;java.time.Instant&quot;));&lt;br/&gt;
   }&lt;br/&gt;
 }&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestProtocolMojo.java b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestProtocolMojo.java&lt;br/&gt;
index 342c155f4..7f5890d02 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestProtocolMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestProtocolMojo.java&lt;br/&gt;
@@ -17,6 +17,8 @@&lt;br/&gt;
  */&lt;br/&gt;
 package org.apache.avro.mojo;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+import org.codehaus.plexus.util.FileUtils;&lt;br/&gt;
+&lt;br/&gt;
 import java.io.File;&lt;/p&gt;

&lt;p&gt; /**&lt;br/&gt;
@@ -26,19 +28,40 @@&lt;br/&gt;
  */&lt;br/&gt;
 public class TestProtocolMojo extends AbstractAvroMojoTest {&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;protected File testPom = new File(getBasedir(),&lt;/li&gt;
	&lt;li&gt;&quot;src/test/resources/unit/protocol/pom.xml&quot;);&lt;br/&gt;
+  protected File jodaTestPom = new File(getBasedir(),&lt;br/&gt;
+          &quot;src/test/resources/unit/protocol/pom-joda.xml&quot;);&lt;br/&gt;
+  protected File java8TestPom = new File(getBasedir(),&lt;br/&gt;
+          &quot;src/test/resources/unit/protocol/pom-java8.xml&quot;);&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public void testProtocolMojo() throws Exception {&lt;/li&gt;
	&lt;li&gt;ProtocolMojo mojo = (ProtocolMojo) lookupMojo(&quot;protocol&quot;, testPom);&lt;br/&gt;
+  public void testProtocolMojoJoda() throws Exception {&lt;br/&gt;
+    ProtocolMojo mojo = (ProtocolMojo) lookupMojo(&quot;protocol&quot;, jodaTestPom);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     assertNotNull(mojo);&lt;br/&gt;
     mojo.execute();&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;File outputDir = new File(getBasedir(), &quot;target/test-harness/protocol/test&quot;);&lt;br/&gt;
+    File outputDir = new File(getBasedir(), &quot;target/test-harness/protocol-joda/test&quot;);&lt;br/&gt;
     String[] generatedFiles = new String[]
{&quot;ProtocolPrivacy.java&quot;,
       &quot;ProtocolTest.java&quot;, &quot;ProtocolUser.java&quot;}
&lt;p&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     assertFilesExist(outputDir, generatedFiles);&lt;br/&gt;
+&lt;br/&gt;
+    String protocolUserContent = FileUtils.fileRead(new File(outputDir, &quot;ProtocolUser.java&quot;));&lt;br/&gt;
+    assertTrue(protocolUserContent.contains(&quot;org.joda.time.DateTime&quot;));&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  public void testProtocolMojoJava8() throws Exception {&lt;br/&gt;
+    ProtocolMojo mojo = (ProtocolMojo) lookupMojo(&quot;protocol&quot;, java8TestPom);&lt;br/&gt;
+&lt;br/&gt;
+    assertNotNull(mojo);&lt;br/&gt;
+    mojo.execute();&lt;br/&gt;
+&lt;br/&gt;
+    File outputDir = new File(getBasedir(), &quot;target/test-harness/protocol-java8/test&quot;);&lt;br/&gt;
+    String[] generatedFiles = new String[]&lt;/p&gt;
{&quot;ProtocolPrivacy.java&quot;,
+            &quot;ProtocolTest.java&quot;, &quot;ProtocolUser.java&quot;}
&lt;p&gt;;&lt;br/&gt;
+&lt;br/&gt;
+    assertFilesExist(outputDir, generatedFiles);&lt;br/&gt;
+&lt;br/&gt;
+    String protocolUserContent = FileUtils.fileRead(new File(outputDir, &quot;ProtocolUser.java&quot;));&lt;br/&gt;
+    assertTrue(protocolUserContent.contains(&quot;java.time.Instant&quot;));&lt;br/&gt;
   }&lt;br/&gt;
 }&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestSchemaMojo.java b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestSchemaMojo.java&lt;br/&gt;
index 3e7fe7454..fb2ab9103 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestSchemaMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestSchemaMojo.java&lt;br/&gt;
@@ -17,6 +17,8 @@&lt;br/&gt;
  */&lt;br/&gt;
 package org.apache.avro.mojo;&lt;/p&gt;

&lt;p&gt;+import org.codehaus.plexus.util.FileUtils;&lt;br/&gt;
+&lt;br/&gt;
 import java.io.File;&lt;/p&gt;

&lt;p&gt; /**&lt;br/&gt;
@@ -26,19 +28,40 @@&lt;br/&gt;
  */&lt;br/&gt;
 public class TestSchemaMojo extends AbstractAvroMojoTest {&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;protected File testPom = new File(getBasedir(),&lt;/li&gt;
	&lt;li&gt;&quot;src/test/resources/unit/schema/pom.xml&quot;);&lt;br/&gt;
+  protected File jodaTestPom = new File(getBasedir(),&lt;br/&gt;
+          &quot;src/test/resources/unit/schema/pom-joda.xml&quot;);&lt;br/&gt;
+  protected File java8TestPom = new File(getBasedir(),&lt;br/&gt;
+          &quot;src/test/resources/unit/schema/pom-java8.xml&quot;);&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public void testSchemaMojo() throws Exception {&lt;/li&gt;
	&lt;li&gt;SchemaMojo mojo = (SchemaMojo) lookupMojo(&quot;schema&quot;, testPom);&lt;br/&gt;
+  public void testSchemaMojoJoda() throws Exception {&lt;br/&gt;
+    SchemaMojo mojo = (SchemaMojo) lookupMojo(&quot;schema&quot;, jodaTestPom);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     assertNotNull(mojo);&lt;br/&gt;
     mojo.execute();&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;File outputDir = new File(getBasedir(), &quot;target/test-harness/schema/test&quot;);&lt;br/&gt;
+    File outputDir = new File(getBasedir(), &quot;target/test-harness/schema-joda/test&quot;);&lt;br/&gt;
     String[] generatedFiles = new String[]
{&quot;PrivacyDirectImport.java&quot;,
       &quot;PrivacyImport.java&quot;, &quot;SchemaPrivacy.java&quot;, &quot;SchemaUser.java&quot;}
&lt;p&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     assertFilesExist(outputDir, generatedFiles);&lt;br/&gt;
+&lt;br/&gt;
+    String schemaUserContent = FileUtils.fileRead(new File(outputDir, &quot;SchemaUser.java&quot;));&lt;br/&gt;
+    assertTrue(schemaUserContent.contains(&quot;org.joda.time.DateTime&quot;));&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  public void testSchemaMojoJava8() throws Exception {&lt;br/&gt;
+    SchemaMojo mojo = (SchemaMojo) lookupMojo(&quot;schema&quot;, java8TestPom);&lt;br/&gt;
+&lt;br/&gt;
+    assertNotNull(mojo);&lt;br/&gt;
+    mojo.execute();&lt;br/&gt;
+&lt;br/&gt;
+    File outputDir = new File(getBasedir(), &quot;target/test-harness/schema-java8/test&quot;);&lt;br/&gt;
+    String[] generatedFiles = new String[]&lt;/p&gt;
{&quot;PrivacyDirectImport.java&quot;,
+            &quot;PrivacyImport.java&quot;, &quot;SchemaPrivacy.java&quot;, &quot;SchemaUser.java&quot;}
&lt;p&gt;;&lt;br/&gt;
+&lt;br/&gt;
+    assertFilesExist(outputDir, generatedFiles);&lt;br/&gt;
+&lt;br/&gt;
+    String schemaUserContent = FileUtils.fileRead(new File(outputDir, &quot;SchemaUser.java&quot;));&lt;br/&gt;
+    assertTrue(schemaUserContent.contains(&quot;java.time.Instant&quot;));&lt;br/&gt;
   }&lt;br/&gt;
 }&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/resources/unit/idl/pom-java8.xml b/lang/java/maven-plugin/src/test/resources/unit/idl/pom-java8.xml&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..099a7e7a7&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/resources/unit/idl/pom-java8.xml&lt;br/&gt;
@@ -0,0 +1,67 @@&lt;br/&gt;
+&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
+&amp;lt;!--&lt;br/&gt;
+   Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
+   contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
+   this work for additional information regarding copyright ownership.&lt;br/&gt;
+   The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
+   (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
+   the License.  You may obtain a copy of the License at&lt;br/&gt;
+&lt;br/&gt;
+       &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+&lt;br/&gt;
+   Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+   See the License for the specific language governing permissions and&lt;br/&gt;
+   limitations under the License.&lt;br/&gt;
+--&amp;gt;&lt;br/&gt;
+&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br/&gt;
+         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 &lt;a href=&quot;http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/xsd/maven-4.0.0.xsd&lt;/a&gt;&quot;&amp;gt;&lt;br/&gt;
+  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br/&gt;
+  &amp;lt;parent&amp;gt;&lt;br/&gt;
+    &amp;lt;artifactId&amp;gt;avro-parent&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+    &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+    &amp;lt;version&amp;gt;1.7.3-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;relativePath&amp;gt;../../../../../../../../../&amp;lt;/relativePath&amp;gt;&lt;br/&gt;
+  &amp;lt;/parent&amp;gt;&lt;br/&gt;
+  &amp;lt;artifactId&amp;gt;avro-maven-plugin-test&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+  &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;name&amp;gt;testproject&amp;lt;/name&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;build&amp;gt;&lt;br/&gt;
+    &amp;lt;plugins&amp;gt;&lt;br/&gt;
+      &amp;lt;plugin&amp;gt;&lt;br/&gt;
+        &amp;lt;artifactId&amp;gt;avro-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+        &amp;lt;executions&amp;gt;&lt;br/&gt;
+          &amp;lt;execution&amp;gt;&lt;br/&gt;
+            &amp;lt;id&amp;gt;idl&amp;lt;/id&amp;gt;&lt;br/&gt;
+            &amp;lt;goals&amp;gt;&lt;br/&gt;
+              &amp;lt;goal&amp;gt;idl-protocol&amp;lt;/goal&amp;gt;&lt;br/&gt;
+            &amp;lt;/goals&amp;gt;&lt;br/&gt;
+          &amp;lt;/execution&amp;gt;&lt;br/&gt;
+        &amp;lt;/executions&amp;gt;&lt;br/&gt;
+        &amp;lt;configuration&amp;gt;&lt;br/&gt;
+          &amp;lt;sourceDirectory&amp;gt;${basedir}/src/test&amp;lt;/sourceDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/idl-java8&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;stringType&amp;gt;String&amp;lt;/stringType&amp;gt;&lt;br/&gt;
+          &amp;lt;dateTimeLogicalTypeType&amp;gt;java8&amp;lt;/dateTimeLogicalTypeType&amp;gt;&lt;br/&gt;
+          &amp;lt;project implementation=&quot;org.apache.maven.plugin.testing.stubs.MavenProjectStub&quot;/&amp;gt;&lt;br/&gt;
+        &amp;lt;/configuration&amp;gt;&lt;br/&gt;
+      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
+    &amp;lt;/plugins&amp;gt;&lt;br/&gt;
+  &amp;lt;/build&amp;gt;&lt;br/&gt;
+  &amp;lt;dependencies&amp;gt;&lt;br/&gt;
+    &amp;lt;dependency&amp;gt;&lt;br/&gt;
+      &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+      &amp;lt;artifactId&amp;gt;avro&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;1.7.3-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;/dependency&amp;gt;&lt;br/&gt;
+    &amp;lt;dependency&amp;gt;&lt;br/&gt;
+      &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+      &amp;lt;artifactId&amp;gt;jackson-mapper-asl&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;1.9.10&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;/dependency&amp;gt;&lt;br/&gt;
+  &amp;lt;/dependencies&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;/project&amp;gt;&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/resources/unit/idl/pom.xml b/lang/java/maven-plugin/src/test/resources/unit/idl/pom-joda.xml&lt;br/&gt;
similarity index 92%&lt;br/&gt;
rename from lang/java/maven-plugin/src/test/resources/unit/idl/pom.xml&lt;br/&gt;
rename to lang/java/maven-plugin/src/test/resources/unit/idl/pom-joda.xml&lt;br/&gt;
index 69c504bb3..f5347a649 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/test/resources/unit/idl/pom.xml&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/resources/unit/idl/pom-joda.xml&lt;br/&gt;
@@ -43,7 +43,9 @@&lt;br/&gt;
         &amp;lt;/executions&amp;gt;&lt;br/&gt;
         &amp;lt;configuration&amp;gt;&lt;br/&gt;
           &amp;lt;sourceDirectory&amp;gt;${basedir}/src/test&amp;lt;/sourceDirectory&amp;gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/idl&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/idl-joda&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;stringType&amp;gt;String&amp;lt;/stringType&amp;gt;&lt;br/&gt;
+          &amp;lt;dateTimeLogicalTypeType&amp;gt;joda&amp;lt;/dateTimeLogicalTypeType&amp;gt;&lt;br/&gt;
           &amp;lt;project implementation=&quot;org.apache.maven.plugin.testing.stubs.MavenProjectStub&quot;/&amp;gt;&lt;br/&gt;
         &amp;lt;/configuration&amp;gt;&lt;br/&gt;
       &amp;lt;/plugin&amp;gt;&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/resources/unit/protocol/pom-java8.xml b/lang/java/maven-plugin/src/test/resources/unit/protocol/pom-java8.xml&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..6f1db51d6
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/resources/unit/protocol/pom-java8.xml&lt;br/&gt;
@@ -0,0 +1,66 @@&lt;br/&gt;
+&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
+&amp;lt;!--&lt;br/&gt;
+   Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
+   contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
+   this work for additional information regarding copyright ownership.&lt;br/&gt;
+   The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
+   (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
+   the License.  You may obtain a copy of the License at&lt;br/&gt;
+&lt;br/&gt;
+       &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+&lt;br/&gt;
+   Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+   See the License for the specific language governing permissions and&lt;br/&gt;
+   limitations under the License.&lt;br/&gt;
+--&amp;gt;&lt;br/&gt;
+&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br/&gt;
+         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 &lt;a href=&quot;http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/xsd/maven-4.0.0.xsd&lt;/a&gt;&quot;&amp;gt;&lt;br/&gt;
+  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br/&gt;
+  &amp;lt;parent&amp;gt;&lt;br/&gt;
+    &amp;lt;artifactId&amp;gt;avro-parent&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+    &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+    &amp;lt;version&amp;gt;1.7.3-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;relativePath&amp;gt;../../../../../../../../../&amp;lt;/relativePath&amp;gt;&lt;br/&gt;
+  &amp;lt;/parent&amp;gt;&lt;br/&gt;
+  &amp;lt;artifactId&amp;gt;avro-maven-plugin-test&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+  &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;name&amp;gt;testproject&amp;lt;/name&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;build&amp;gt;&lt;br/&gt;
+    &amp;lt;plugins&amp;gt;&lt;br/&gt;
+      &amp;lt;plugin&amp;gt;&lt;br/&gt;
+        &amp;lt;artifactId&amp;gt;avro-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+        &amp;lt;executions&amp;gt;&lt;br/&gt;
+          &amp;lt;execution&amp;gt;&lt;br/&gt;
+            &amp;lt;id&amp;gt;protocol&amp;lt;/id&amp;gt;&lt;br/&gt;
+            &amp;lt;goals&amp;gt;&lt;br/&gt;
+              &amp;lt;goal&amp;gt;protocol&amp;lt;/goal&amp;gt;&lt;br/&gt;
+            &amp;lt;/goals&amp;gt;&lt;br/&gt;
+          &amp;lt;/execution&amp;gt;&lt;br/&gt;
+        &amp;lt;/executions&amp;gt;&lt;br/&gt;
+        &amp;lt;configuration&amp;gt;&lt;br/&gt;
+          &amp;lt;sourceDirectory&amp;gt;${basedir}/src/test/avro&amp;lt;/sourceDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/protocol-java8&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;dateTimeLogicalTypeType&amp;gt;java8&amp;lt;/dateTimeLogicalTypeType&amp;gt;&lt;br/&gt;
+          &amp;lt;project implementation=&quot;org.apache.maven.plugin.testing.stubs.MavenProjectStub&quot;/&amp;gt;&lt;br/&gt;
+        &amp;lt;/configuration&amp;gt;&lt;br/&gt;
+      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
+    &amp;lt;/plugins&amp;gt;&lt;br/&gt;
+  &amp;lt;/build&amp;gt;&lt;br/&gt;
+  &amp;lt;dependencies&amp;gt;&lt;br/&gt;
+    &amp;lt;dependency&amp;gt;&lt;br/&gt;
+      &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+      &amp;lt;artifactId&amp;gt;avro&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;1.7.3-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;/dependency&amp;gt;&lt;br/&gt;
+    &amp;lt;dependency&amp;gt;&lt;br/&gt;
+      &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+      &amp;lt;artifactId&amp;gt;jackson-mapper-asl&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;1.9.10&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;/dependency&amp;gt;&lt;br/&gt;
+  &amp;lt;/dependencies&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;/project&amp;gt;&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/resources/unit/protocol/pom.xml b/lang/java/maven-plugin/src/test/resources/unit/protocol/pom-joda.xml&lt;br/&gt;
similarity index 98%&lt;br/&gt;
rename from lang/java/maven-plugin/src/test/resources/unit/protocol/pom.xml&lt;br/&gt;
rename to lang/java/maven-plugin/src/test/resources/unit/protocol/pom-joda.xml&lt;br/&gt;
index b484e3dd4..d01cafa9b 100644&lt;/li&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/test/resources/unit/protocol/pom.xml&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/resources/unit/protocol/pom-joda.xml&lt;br/&gt;
@@ -43,7 +43,7 @@&lt;br/&gt;
         &amp;lt;/executions&amp;gt;&lt;br/&gt;
         &amp;lt;configuration&amp;gt;&lt;br/&gt;
           &amp;lt;sourceDirectory&amp;gt;${basedir}/src/test/avro&amp;lt;/sourceDirectory&amp;gt;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;&amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/protocol&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/protocol-joda&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
           &amp;lt;project implementation=&quot;org.apache.maven.plugin.testing.stubs.MavenProjectStub&quot;/&amp;gt;&lt;br/&gt;
         &amp;lt;/configuration&amp;gt;&lt;br/&gt;
       &amp;lt;/plugin&amp;gt;&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/resources/unit/schema/pom-java8.xml b/lang/java/maven-plugin/src/test/resources/unit/schema/pom-java8.xml&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..a43188382
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;/dev/null&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/resources/unit/schema/pom-java8.xml&lt;br/&gt;
@@ -0,0 +1,65 @@&lt;br/&gt;
+&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
+&amp;lt;!--&lt;br/&gt;
+   Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
+   contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
+   this work for additional information regarding copyright ownership.&lt;br/&gt;
+   The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
+   (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
+   the License.  You may obtain a copy of the License at&lt;br/&gt;
+&lt;br/&gt;
+       &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+&lt;br/&gt;
+   Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+   See the License for the specific language governing permissions and&lt;br/&gt;
+   limitations under the License.&lt;br/&gt;
+--&amp;gt;&lt;br/&gt;
+&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br/&gt;
+         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 &lt;a href=&quot;http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/xsd/maven-4.0.0.xsd&lt;/a&gt;&quot;&amp;gt;&lt;br/&gt;
+  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;artifactId&amp;gt;avro-maven-plugin-test&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+  &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;name&amp;gt;testproject&amp;lt;/name&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+  &amp;lt;build&amp;gt;&lt;br/&gt;
+    &amp;lt;plugins&amp;gt;&lt;br/&gt;
+      &amp;lt;plugin&amp;gt;&lt;br/&gt;
+        &amp;lt;artifactId&amp;gt;avro-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+        &amp;lt;executions&amp;gt;&lt;br/&gt;
+          &amp;lt;execution&amp;gt;&lt;br/&gt;
+            &amp;lt;id&amp;gt;schema&amp;lt;/id&amp;gt;&lt;br/&gt;
+            &amp;lt;goals&amp;gt;&lt;br/&gt;
+              &amp;lt;goal&amp;gt;schema&amp;lt;/goal&amp;gt;&lt;br/&gt;
+            &amp;lt;/goals&amp;gt;&lt;br/&gt;
+          &amp;lt;/execution&amp;gt;&lt;br/&gt;
+        &amp;lt;/executions&amp;gt;&lt;br/&gt;
+        &amp;lt;configuration&amp;gt;&lt;br/&gt;
+          &amp;lt;sourceDirectory&amp;gt;${basedir}/src/test/avro&amp;lt;/sourceDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/schema-java8&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;dateTimeLogicalTypeType&amp;gt;java8&amp;lt;/dateTimeLogicalTypeType&amp;gt;&lt;br/&gt;
+          &amp;lt;imports&amp;gt;&lt;br/&gt;
+            &amp;lt;import&amp;gt;${basedir}/src/test/avro/imports&amp;lt;/import&amp;gt;&lt;br/&gt;
+            &amp;lt;import&amp;gt;${basedir}/src/test/avro/directImport/PrivacyDirectImport.avsc&amp;lt;/import&amp;gt;&lt;br/&gt;
+          &amp;lt;/imports&amp;gt;&lt;br/&gt;
+          &amp;lt;project implementation=&quot;org.apache.maven.plugin.testing.stubs.MavenProjectStub&quot;/&amp;gt;&lt;br/&gt;
+        &amp;lt;/configuration&amp;gt;&lt;br/&gt;
+      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
+    &amp;lt;/plugins&amp;gt;&lt;br/&gt;
+  &amp;lt;/build&amp;gt;&lt;br/&gt;
+  &amp;lt;dependencies&amp;gt;&lt;br/&gt;
+    &amp;lt;dependency&amp;gt;&lt;br/&gt;
+      &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+      &amp;lt;artifactId&amp;gt;avro&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;1.7.3-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;/dependency&amp;gt;&lt;br/&gt;
+    &amp;lt;dependency&amp;gt;&lt;br/&gt;
+      &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+      &amp;lt;artifactId&amp;gt;jackson-mapper-asl&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+      &amp;lt;version&amp;gt;1.9.10&amp;lt;/version&amp;gt;&lt;br/&gt;
+    &amp;lt;/dependency&amp;gt;&lt;br/&gt;
+  &amp;lt;/dependencies&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;/project&amp;gt;&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/test/resources/unit/schema/pom.xml b/lang/java/maven-plugin/src/test/resources/unit/schema/pom-joda.xml&lt;br/&gt;
similarity index 98%&lt;br/&gt;
rename from lang/java/maven-plugin/src/test/resources/unit/schema/pom.xml&lt;br/&gt;
rename to lang/java/maven-plugin/src/test/resources/unit/schema/pom-joda.xml&lt;br/&gt;
index cc000df05..396da470e 100644&lt;/li&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/test/resources/unit/schema/pom.xml&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/test/resources/unit/schema/pom-joda.xml&lt;br/&gt;
@@ -38,7 +38,7 @@&lt;br/&gt;
         &amp;lt;/executions&amp;gt;&lt;br/&gt;
         &amp;lt;configuration&amp;gt;&lt;br/&gt;
           &amp;lt;sourceDirectory&amp;gt;${basedir}/src/test/avro&amp;lt;/sourceDirectory&amp;gt;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;&amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/schema&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
+          &amp;lt;outputDirectory&amp;gt;${basedir}/target/test-harness/schema-joda&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
           &amp;lt;imports&amp;gt;&lt;br/&gt;
             &amp;lt;import&amp;gt;${basedir}/src/test/avro/imports&amp;lt;/import&amp;gt;&lt;br/&gt;
             &amp;lt;import&amp;gt;${basedir}/src/test/avro/directImport/PrivacyDirectImport.avsc&amp;lt;/import&amp;gt;&lt;br/&gt;
diff --git a/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java b/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java&lt;br/&gt;
index 2ba6616e1..b0f335670 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java&lt;br/&gt;
+++ b/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java&lt;br/&gt;
@@ -23,12 +23,15 @@&lt;br/&gt;
 import java.io.InputStream;&lt;br/&gt;
 import java.io.PrintStream;&lt;br/&gt;
 import java.util.ArrayList;&lt;br/&gt;
+import java.util.Arrays;&lt;br/&gt;
+import java.util.Optional;&lt;br/&gt;
 import java.util.Set;&lt;br/&gt;
 import java.util.LinkedHashSet;&lt;br/&gt;
 import java.util.List;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; import org.apache.avro.Protocol;&lt;br/&gt;
 import org.apache.avro.Schema;&lt;br/&gt;
+import org.apache.avro.compiler.specific.SpecificCompiler.DateTimeLogicalTypeType;&lt;br/&gt;
 import org.apache.avro.generic.GenericData.StringType;&lt;br/&gt;
 import org.apache.avro.compiler.specific.SpecificCompiler;&lt;/p&gt;

&lt;p&gt;@@ -43,7 +46,7 @@ public int run(InputStream in, PrintStream out, PrintStream err,&lt;br/&gt;
       List&amp;lt;String&amp;gt; args) throws Exception {&lt;br/&gt;
     if (args.size() &amp;lt; 3) &lt;/p&gt;
{
       System.err
-          .println(&quot;Usage: [-encoding &amp;lt;outputencoding&amp;gt;] [-string] [-bigDecimal] (schema|protocol) input... outputdir&quot;);
+          .println(&quot;Usage: [-encoding &amp;lt;outputencoding&amp;gt;] [-string] [-bigDecimal] [-dateTimeLogicalType &amp;lt;dateTimeType&amp;gt;] (schema|protocol) input... outputdir&quot;);
       System.err
           .println(&quot; input - input files or directories&quot;);
       System.err
@@ -53,18 +56,21 @@ public int run(InputStream in, PrintStream out, PrintStream err,
       System.err.println(&quot; -string - use java.lang.String instead of Utf8&quot;);
       System.err.println(&quot; -bigDecimal - use java.math.BigDecimal for &quot; +
           &quot;decimal type instead of java.nio.ByteBuffer&quot;);
+      System.err.println(&quot; -dateTimeLogicalType [joda|java8] use either &quot; +
+          &quot;Joda time classes (default) or java 8 native date/time classes&quot;);
       return 1;
     }

&lt;p&gt;     StringType stringType = StringType.CharSequence;&lt;br/&gt;
     boolean useLogicalDecimal = false;&lt;br/&gt;
+    Optional&amp;lt;DateTimeLogicalTypeType&amp;gt; dateTimeLogicalTypeType = Optional.empty();&lt;br/&gt;
+    Optional&amp;lt;String&amp;gt; encoding = Optional.empty();&lt;/p&gt;

&lt;p&gt;     int arg = 0;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;String encoding = null;&lt;br/&gt;
     if (&quot;-encoding&quot;.equals(args.get(arg))) 
{
       arg++;
-      encoding = args.get(arg);
+      encoding = Optional.of(args.get(arg));
       arg++;
     }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@@ -78,6 +84,17 @@ public int run(InputStream in, PrintStream out, PrintStream err,&lt;br/&gt;
       arg++;&lt;br/&gt;
     }&lt;/p&gt;

&lt;p&gt;+    if (&quot;-dateTimeLogicalType&quot;.equalsIgnoreCase(args.get(arg))) {&lt;br/&gt;
+      arg++;&lt;br/&gt;
+      try &lt;/p&gt;
{
+        dateTimeLogicalTypeType = Optional.of(DateTimeLogicalTypeType.valueOf(args.get(arg).toUpperCase()));
+      }
&lt;p&gt; catch (IllegalArgumentException | IndexOutOfBoundsException e) &lt;/p&gt;
{
+        System.err.println(&quot;Expected one of &quot; + Arrays.toString(DateTimeLogicalTypeType.values()));
+        return 1;
+      }
&lt;p&gt;+      arg++;&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
     String method = args.get(arg);&lt;br/&gt;
     List&amp;lt;File&amp;gt; inputs = new ArrayList&amp;lt;File&amp;gt;();&lt;br/&gt;
     File output = new File(args.get(args.size() - 1));&lt;br/&gt;
@@ -90,13 +107,13 @@ public int run(InputStream in, PrintStream out, PrintStream err,&lt;br/&gt;
       Schema.Parser parser = new Schema.Parser();&lt;br/&gt;
       for (File src : determineInputs(inputs, SCHEMA_FILTER)) &lt;/p&gt;
{
         Schema schema = parser.parse(src);
-        SpecificCompiler compiler = new SpecificCompiler(schema);
+        SpecificCompiler compiler = new SpecificCompiler(schema, dateTimeLogicalTypeType.orElse(DateTimeLogicalTypeType.JODA));
         executeCompiler(compiler, encoding, stringType, useLogicalDecimal, src, output);
       }
&lt;p&gt;     } else if (&quot;protocol&quot;.equals(method)) {&lt;br/&gt;
       for (File src : determineInputs(inputs, PROTOCOL_FILTER)) &lt;/p&gt;
{
         Protocol protocol = Protocol.parse(src);
-        SpecificCompiler compiler = new SpecificCompiler(protocol);
+        SpecificCompiler compiler = new SpecificCompiler(protocol, dateTimeLogicalTypeType.orElse(DateTimeLogicalTypeType.JODA));
         executeCompiler(compiler, encoding, stringType, useLogicalDecimal, src, output);
       }
&lt;p&gt;     } else &lt;/p&gt;
{
@@ -107,16 +124,14 @@ public int run(InputStream in, PrintStream out, PrintStream err,
   }

&lt;p&gt;   private void executeCompiler(SpecificCompiler compiler,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;String encoding,&lt;br/&gt;
+                               Optional&amp;lt;String&amp;gt; encoding,&lt;br/&gt;
                                StringType stringType,&lt;br/&gt;
                                boolean enableDecimalLogicalType,&lt;br/&gt;
                                File src,&lt;br/&gt;
                                File output) throws IOException {&lt;br/&gt;
     compiler.setStringType(stringType);&lt;br/&gt;
     compiler.setEnableDecimalLogicalType(enableDecimalLogicalType);&lt;/li&gt;
	&lt;li&gt;if (encoding != null) 
{
-      compiler.setOutputCharacterEncoding(encoding);
-    }
&lt;p&gt;+    encoding.ifPresent(compiler::setOutputCharacterEncoding);&lt;br/&gt;
     compiler.compileToDestination(src, output);&lt;br/&gt;
   }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;






&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16635558" author="githubbot" created="Tue, 2 Oct 2018 14:28:14 +0000"  >&lt;p&gt;pvorb commented on issue #248: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2079&quot; title=&quot;Add ability to use Java 8 date/time types instead of Joda time.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2079&quot;&gt;&lt;del&gt;AVRO-2079&lt;/del&gt;&lt;/a&gt;: Add ability to generate Java8 native date/time classes&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/248#issuecomment-426295060&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/248#issuecomment-426295060&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I have an account, my username&apos;s also pvorb over there, but I have no permissions to change the assignee of that ticket. You can assign me if you like.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 22 Sep 2017 14:04:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            15 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3kakn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2080] Fix Javadoc Warnings in Generated Records</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2080</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I&apos;ve been seeing a number of javadoc errors for the generated records using the 1.8.2 version of &lt;tt&gt;SpecificCompiler&lt;/tt&gt;. &lt;/p&gt;

&lt;p&gt;For example, if I generate code from the following schema:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;{
    &quot;type&quot;:&quot;record&quot;,
    &quot;name&quot;:&quot;Test&quot;,
    &quot;namespace&quot;:&quot;foo.bar&quot;,
    &quot;fields&quot;:[
        {&quot;name&quot;:&quot;name&quot;,&quot;type&quot;:&quot;string&quot;}
     ],
    &quot;version&quot;:1
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then run the javadoc tool on it, I get the following javadoc warnings:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;[warn] src_managed/main/Test.java:30: warning: no @return
[warn]   public static BinaryMessageDecoder&amp;lt;Test&amp;gt; getDecoder() {
[warn]                                            ^
[warn] src_managed/main/Test.java:38: warning: no @return
[warn]   public static BinaryMessageDecoder&amp;lt;Test&amp;gt; createDecoder(SchemaStore resolver) {
[warn]                                            ^
[warn] src_managed/main/Test.java:43: warning: no @return
[warn]   public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
[warn]                              ^
[warn] src_managed/main/Test.java:43: warning: no @throws for java.io.IOException
[warn]   public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
[warn]                              ^
[warn] src_managed/main/Test.java:48: warning: no @param for b
[warn]   public static Test fromByteBuffer(
[warn]                      ^
[warn] src_managed/main/Test.java:48: warning: no @return
[warn]   public static Test fromByteBuffer(
[warn]                      ^
[warn] src_managed/main/Test.java:48: warning: no @throws for java.io.IOException
[warn]   public static Test fromByteBuffer(
[warn]                      ^
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since this is a simple enough problem, I&apos;ll see if I can make a quick patch in a bit.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13103604">AVRO-2080</key>
            <summary>Fix Javadoc Warnings in Generated Records</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="howellbridger">Bridger Howell</assignee>
                                    <reporter username="howellbridger">Bridger Howell</reporter>
                        <labels>
                    </labels>
                <created>Wed, 20 Sep 2017 13:46:39 +0000</created>
                <updated>Wed, 13 Dec 2017 09:55:00 +0000</updated>
                            <resolved>Wed, 13 Dec 2017 09:55:00 +0000</resolved>
                                    <version>1.8.2</version>
                                    <fixVersion>1.9.0</fixVersion>
                    <fixVersion>1.8.3</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="16173195" author="howellbridger" created="Wed, 20 Sep 2017 13:48:35 +0000"  >&lt;p&gt;Reference: the generated source for that &lt;tt&gt;Test&lt;/tt&gt; schema.&lt;/p&gt;</comment>
                            <comment id="16189222" author="githubbot" created="Tue, 3 Oct 2017 03:43:54 +0000"  >&lt;p&gt;GitHub user Kuroshii opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/254&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/254&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2080&quot; title=&quot;Fix Javadoc Warnings in Generated Records&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2080&quot;&gt;&lt;del&gt;AVRO-2080&lt;/del&gt;&lt;/a&gt;: Fix Generated Record Javadocs&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;
	&lt;ol&gt;
		&lt;li&gt;
		&lt;ol&gt;
			&lt;li&gt;
			&lt;ol&gt;
				&lt;li&gt;Changes:&lt;/li&gt;
			&lt;/ol&gt;
			&lt;/li&gt;
		&lt;/ol&gt;
		&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Add missing javadoc annotations to the specific record velocity template&lt;/li&gt;
	&lt;li&gt;Update test files for specific compiler tool&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/Kuroshii/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/Kuroshii/avro&lt;/a&gt; fix-generated-record-javadocs&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/254.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/254.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #254&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit a9872fd6e23821db6536a8d21a6271620ca5bd65&lt;br/&gt;
Author: Bridger Howell &amp;lt;howellbridger@gmail.com&amp;gt;&lt;br/&gt;
Date:   2017-10-03T02:57:23Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2080&quot; title=&quot;Fix Javadoc Warnings in Generated Records&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2080&quot;&gt;&lt;del&gt;AVRO-2080&lt;/del&gt;&lt;/a&gt;: Add missing javadoc annotations to record template&lt;/p&gt;

&lt;p&gt;commit 449d8b5e53ed4306edc5c45ce38019517ef9285e&lt;br/&gt;
Author: Bridger Howell &amp;lt;howellbridger@gmail.com&amp;gt;&lt;br/&gt;
Date:   2017-10-03T02:57:30Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2080&quot; title=&quot;Fix Javadoc Warnings in Generated Records&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2080&quot;&gt;&lt;del&gt;AVRO-2080&lt;/del&gt;&lt;/a&gt;: Update SpecificCompilerTool test data&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="16288997" author="jira-bot" created="Wed, 13 Dec 2017 09:53:49 +0000"  >&lt;p&gt;Commit b84f64023c4a8e61d1274fc8a3e9c26acfb15c5b in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=howellbridger&quot; class=&quot;user-hover&quot; rel=&quot;howellbridger&quot;&gt;Bridger Howell&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=b84f640&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=b84f640&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2080&quot; title=&quot;Fix Javadoc Warnings in Generated Records&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2080&quot;&gt;&lt;del&gt;AVRO-2080&lt;/del&gt;&lt;/a&gt;: Fix Javadoc Warnings in Generated Records&lt;br/&gt;
This closes #254&lt;/p&gt;</comment>
                            <comment id="16288999" author="jira-bot" created="Wed, 13 Dec 2017 09:54:06 +0000"  >&lt;p&gt;Commit 786a29234a2540cfffa2b11aea91f0c9667ff372 in avro&apos;s branch refs/heads/branch-1.8 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=howellbridger&quot; class=&quot;user-hover&quot; rel=&quot;howellbridger&quot;&gt;Bridger Howell&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=786a292&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://git-wip-us.apache.org/repos/asf?p=avro.git;h=786a292&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2080&quot; title=&quot;Fix Javadoc Warnings in Generated Records&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2080&quot;&gt;&lt;del&gt;AVRO-2080&lt;/del&gt;&lt;/a&gt;: Fix Javadoc Warnings in Generated Records&lt;br/&gt;
This closes #254&lt;/p&gt;</comment>
                            <comment id="16289000" author="githubbot" created="Wed, 13 Dec 2017 09:54:08 +0000"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/254&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/254&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12888054" name="Test.java" size="7139" author="howellbridger" created="Wed, 20 Sep 2017 13:48:08 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 3 Oct 2017 03:43:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 5 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3kaqn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2081] Compilation fails with clang</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2081</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Building on &lt;tt&gt;clang&lt;/tt&gt;  fails with the error below. This is because of the &lt;tt&gt;vector&amp;lt;bool&amp;gt;&lt;/tt&gt; specialization. We need a &lt;tt&gt;codec_traits&lt;/tt&gt; specialization for &lt;tt&gt;vector&amp;lt;bool&amp;gt;::const_reference&lt;/tt&gt;.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;avro/lang/c++/api/Specific.hh:321:22: error: no member named &lt;span class=&quot;code-quote&quot;&gt;&apos;encode&apos;&lt;/span&gt; in &lt;span class=&quot;code-quote&quot;&gt;&apos;avro::codec_traits&amp;lt;std::__1::__bit_const_reference&amp;lt;std::__1::vector&amp;lt;bool, std::__1::allocator&amp;lt;bool&amp;gt; &amp;gt; &amp;gt; &amp;gt;&apos;&lt;/span&gt;
    codec_traits&amp;lt;T&amp;gt;::encode(e, t);
    ~~~~~~~~~~~~~~~~~^
avro/lang/c++/api/Specific.hh:235:23: note: in instantiation of function template specialization &lt;span class=&quot;code-quote&quot;&gt;&apos;avro::encode&amp;lt;std::__1::__bit_const_reference&amp;lt;std::__1::vector&amp;lt;bool, std::__1::allocator&amp;lt;bool&amp;gt; &amp;gt; &amp;gt; &amp;gt;&apos;&lt;/span&gt; requested here
                avro::encode(e, *it);
                      ^
avro/lang/c++/api/Specific.hh:321:22: note: in instantiation of member function &lt;span class=&quot;code-quote&quot;&gt;&apos;avro::codec_traits&amp;lt;std::__1::vector&amp;lt;bool, std::__1::allocator&amp;lt;bool&amp;gt; &amp;gt; &amp;gt;::encode&apos;&lt;/span&gt; requested here
    codec_traits&amp;lt;T&amp;gt;::encode(e, t);
                     ^
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment>&lt;p&gt;FreeBSD, clang++ (3.8.0)&lt;/p&gt;</environment>
        <key id="13104867">AVRO-2081</key>
            <summary>Compilation fails with clang</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="pnayak">Purushotham Nayak</assignee>
                                    <reporter username="pnayak">Purushotham Nayak</reporter>
                        <labels>
                    </labels>
                <created>Mon, 25 Sep 2017 18:48:28 +0000</created>
                <updated>Sun, 1 Apr 2018 18:10:12 +0000</updated>
                            <resolved>Sun, 1 Apr 2018 18:10:12 +0000</resolved>
                                    <version>1.8.2</version>
                                    <fixVersion>1.8.3</fixVersion>
                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="16179763" author="githubbot" created="Mon, 25 Sep 2017 20:59:59 +0000"  >&lt;p&gt;GitHub user purushnayak opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/249&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/249&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Compilation with clang fails due to missing codec_traits specialization&lt;/p&gt;

&lt;p&gt;    Fixed the error by adding a codec_traits specialization for&lt;br/&gt;
    vector&amp;lt;bool&amp;gt;::const_reference.&lt;/p&gt;

&lt;p&gt;    fixes &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2081&quot; title=&quot;Compilation fails with clang&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2081&quot;&gt;&lt;del&gt;AVRO-2081&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/purushnayak/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/purushnayak/avro&lt;/a&gt; avro-2081&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/249.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/249.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #249&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit 6f640667693e70447eb5b36bb86106f76865c5eb&lt;br/&gt;
Author: Purushotham Nayak &amp;lt;pnayak@corelogiq.com&amp;gt;&lt;br/&gt;
Date:   2017-09-25T20:53:31Z&lt;/p&gt;

&lt;p&gt;    Compilation with clang fails due to missing codec_traits specialization&lt;/p&gt;

&lt;p&gt;    Fixed the error by adding a codec_traits specialization for&lt;br/&gt;
    vector&amp;lt;bool&amp;gt;::const_reference.&lt;/p&gt;

&lt;p&gt;    fixes &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2081&quot; title=&quot;Compilation fails with clang&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2081&quot;&gt;&lt;del&gt;AVRO-2081&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="16200294" author="thiru_mg" created="Wed, 11 Oct 2017 13:49:38 +0000"  >&lt;p&gt;+1 for the patch. Tested on MacOS with both XCode and with gcc.&lt;/p&gt;

&lt;p&gt;I will commit it in a day or two unless there are objections.&lt;/p&gt;</comment>
                            <comment id="16258186" author="pnayak" created="Sat, 18 Nov 2017 20:25:34 +0000"  >&lt;p&gt;Hi Thiru,&lt;/p&gt;

&lt;p&gt;Glad you haven&apos;t merged this yet.&lt;/p&gt;

&lt;p&gt;The patch I submitted fixes the problem with &lt;tt&gt;c++ (clang)&lt;/tt&gt; but creates a duplicate definition when using &lt;tt&gt;g++ (gcc)&lt;/tt&gt;. The reason we didn&apos;t see this problem was because there was no test case that wrote &lt;tt&gt;vector&amp;lt;bool&amp;gt;&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;I&apos;ve update the pull request &lt;a href=&quot;https://github.com/apache/avro/pull/249&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Github Pull Request #249&lt;/a&gt; with new code that optionally defines the &lt;tt&gt;codec_traits&amp;lt;vector&amp;lt;bool&amp;gt;::const_reference&amp;gt;&lt;/tt&gt; specialization only if it doesn&apos;t already exist. I&apos;ve also added a test case to write &lt;tt&gt;vector&amp;lt;bool&amp;gt;&lt;/tt&gt; so we can catch if something breaks in the future. I&apos;ve put all the details into the commit message for your review. Please let me know if this works and/or if you think any more changes are needed (e.g. idk if there is a more elegant way to do this).&lt;/p&gt;</comment>
                            <comment id="16421760" author="jira-bot" created="Sun, 1 Apr 2018 18:09:18 +0000"  >&lt;p&gt;Commit 8466975290773f5e0d19a16d2c36c05d64ea5134 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=pnayak&quot; class=&quot;user-hover&quot; rel=&quot;pnayak&quot;&gt;Purushotham Nayak&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=8466975&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=8466975&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Fix compilation error caused due to vector&amp;lt;bool&amp;gt; specialization.&lt;/p&gt;

&lt;p&gt;The codec_traits&amp;lt;&amp;gt; specialization of vector&amp;lt;T&amp;gt; assumes that there is a&lt;br/&gt;
codec_traits&amp;lt;T&amp;gt; specialization of type T. It dereferences a&lt;br/&gt;
const_iterator pointing to an element in vector&amp;lt;T&amp;gt; to get a&lt;br/&gt;
const_reference and then encodes/decodes that element using the&lt;br/&gt;
codec_traits&amp;lt;T&amp;gt; specialization.&lt;/p&gt;

&lt;p&gt;This works readily with g++ (gcc) where vector&amp;lt;bool&amp;gt;::const_reference is&lt;br/&gt;
same as bool and we have a codec_traits&amp;lt;bool&amp;gt; specialization. However,&lt;br/&gt;
in the case of c++ (clang) this vector&amp;lt;bool&amp;gt;::const_reference != bool.&lt;br/&gt;
So there will be missing specialization for&lt;br/&gt;
codec_traits&amp;lt;vector&amp;lt;bool&amp;gt;::const_reference&amp;gt;.&lt;/p&gt;

&lt;p&gt;Adding the above specialization will fix the clang but will create a&lt;br/&gt;
second definition in case of g++ and violate ODR and hence compilation&lt;br/&gt;
failure.&lt;/p&gt;

&lt;p&gt;This change provides a specialization of&lt;br/&gt;
codec_traits&amp;lt;vector&amp;lt;bool&amp;gt;::const_reference&amp;gt; if it doesn&apos;t already&lt;br/&gt;
exist. This should make it work for both c++ and g++. I&apos;ve also added a&lt;br/&gt;
test case to cover this, so we can catch it if future changes in&lt;br/&gt;
implementation breaks it or for testing with other implementations.&lt;/p&gt;

&lt;p&gt;Fixes &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2081&quot; title=&quot;Compilation fails with clang&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2081&quot;&gt;&lt;del&gt;AVRO-2081&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16421761" author="thiru_mg" created="Sun, 1 Apr 2018 18:10:12 +0000"  >&lt;p&gt;Merged Github pull request&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12888944" name="AVRO-2081.patch" size="731" author="pnayak" created="Mon, 25 Sep 2017 20:20:12 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 25 Sep 2017 20:59:59 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            42 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3kiif:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2082] org.apache.avro.file.DataFileWriter$AppendWriteException: org.apache.avro.UnresolvedUnionException: Not in union [&quot;double&quot;,&quot;null&quot;]:</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2082</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Please find below the procedure we followed to create avro file using spark.&lt;/p&gt;

&lt;p&gt;1.Created JSON file for the schema available in table&lt;br/&gt;
2.Created List with JSON file&lt;br/&gt;
3.Created avro StructField by looping the above list using below code&lt;br/&gt;
  fields.add(DataTypes.createStructField(field.name().toLowerCase(),getDataTypeForAvro(field.schema()), true));&lt;/p&gt;


&lt;p&gt;Issue:&lt;br/&gt;
  If the data type is numeric type(decimal or int) it is not accepting null value&lt;br/&gt;
error message:&lt;br/&gt;
  Caused by: org.apache.avro.file.DataFileWriter$AppendWriteException: org.apache.avro.UnresolvedUnionException: Not in union &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;double&amp;quot;,&amp;quot;null&amp;quot;&amp;#93;&lt;/span&gt;:&lt;/p&gt;</description>
                <environment>&lt;p&gt;Avro , Spark , Eclipse&lt;/p&gt;</environment>
        <key id="13105017">AVRO-2082</key>
            <summary>org.apache.avro.file.DataFileWriter$AppendWriteException: org.apache.avro.UnresolvedUnionException: Not in union [&quot;double&quot;,&quot;null&quot;]:</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="ATUMV002">Atul Gupta</reporter>
                        <labels>
                            <label>Avro</label>
                    </labels>
                <created>Tue, 26 Sep 2017 08:16:26 +0000</created>
                <updated>Tue, 26 Sep 2017 08:16:26 +0000</updated>
                                                                            <component>spec</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                    <timeoriginalestimate seconds="86400">24h</timeoriginalestimate>
                            <timeestimate seconds="86400">24h</timeestimate>
                                                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310250" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10431"><![CDATA[Important]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 16 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3kjfr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>error</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>
