<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:15:49 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2011-7-6+AND+created+%3C%3D+2011-7-13+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="7" total="7"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-851] Unicode issue in JSON encoding from Java</title>
                <link>https://issues.apache.org/jira/browse/AVRO-851</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;There is an issue in Avro&apos;s java code when encoding a GenericData as JSON in GenericData#writeEscapedString().&lt;br/&gt;
In the default clause, it must be the hexadecimal value of the character that must be written and not the string itself, otherwise the built JSON string is not valid. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12512935">AVRO-851</key>
            <summary>Unicode issue in JSON encoding from Java</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jmesnil">Jeff Mesnil</assignee>
                                    <reporter username="jmesnil">Jeff Mesnil</reporter>
                        <labels>
                    </labels>
                <created>Wed, 6 Jul 2011 06:52:20 +0000</created>
                <updated>Tue, 25 Sep 2012 21:16:14 +0000</updated>
                            <resolved>Thu, 13 Sep 2012 20:07:49 +0000</resolved>
                                    <version>1.5.1</version>
                                    <fixVersion>1.7.2</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13060324" author="jmesnil" created="Wed, 6 Jul 2011 06:56:54 +0000"  >&lt;ul&gt;
	&lt;li&gt;fix unicode issue in GenericData#writeEscapedString()&lt;/li&gt;
	&lt;li&gt;add unicode char in TestGenericData#testToStringIsJson() to check that the character is properly encoded in JSON&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13060325" author="jmesnil" created="Wed, 6 Jul 2011 06:57:29 +0000"  >&lt;p&gt;I&apos;ve attached a patch that is ready for code review&lt;/p&gt;</comment>
                            <comment id="13060684" author="scott_carey" created="Wed, 6 Jul 2011 16:55:54 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Test reproduces error and patch fixes it.&lt;/p&gt;</comment>
                            <comment id="13455194" author="cutting" created="Thu, 13 Sep 2012 20:07:49 +0000"  >&lt;p&gt;I committed this.&lt;/p&gt;

&lt;p&gt;It took over a year to get this committed!  I&apos;m not sure how it slipped through the cracks for so long.  Mea culpa.  My apologies.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12514104">AVRO-860</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12485380" name="AVRO-851.patch" size="1683" author="jmesnil" created="Wed, 6 Jul 2011 06:56:54 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 6 Jul 2011 16:55:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>66987</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 years, 19 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2uv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80225</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-852] TetheredProcess - incompatibility between Hadoop-0.20.2 and Cloudera Release 3</title>
                <link>https://issues.apache.org/jira/browse/AVRO-852</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;There seems to be an incompatibility between hadoop-0.20.2 and cloudera release 3.0.&lt;br/&gt;
In particular the call signature for TaskLog.getTaskLogFile differs between the two.&lt;br/&gt;
In CDH3 the signature is &lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;getTaskLogFile(TaskAttemptID taskid, boolean isCleanup, TaskLog.LogName filter) 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;but in Hadoop-0.20.2 it is &lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;getTaskLogFile(TaskAttemptID taskid, boolean isCleanup)   
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;avro.mapred.tether.TetheredProcess invokes getTaskLogFile&lt;/p&gt;

&lt;p&gt;Hadoop 0.20.203.0  is consistent with CDH3. &lt;/p&gt;

&lt;p&gt;Can we use the newer syntax &lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;getTaskLogFile(TaskAttemptID taskid, boolean isCleanup, TaskLog.LogName filter) 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and change the hadoop version in the top level pom to&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&amp;lt;hadoop-version&amp;gt;0.20.203.0&amp;lt;/hadoop-version&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</description>
                <environment></environment>
        <key id="12513028">AVRO-852</key>
            <summary>TetheredProcess - incompatibility between Hadoop-0.20.2 and Cloudera Release 3</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="jeremy@lewi.us">Jeremy Lewi</assignee>
                                    <reporter username="jeremy@lewi.us">Jeremy Lewi</reporter>
                        <labels>
                            <label>hadoop</label>
                    </labels>
                <created>Wed, 6 Jul 2011 19:40:56 +0000</created>
                <updated>Mon, 17 Oct 2011 22:41:56 +0000</updated>
                                            <version>1.5.1</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13129294" author="scott_carey" created="Mon, 17 Oct 2011 22:41:56 +0000"  >&lt;p&gt;use of Hadoop 0.20.20x.y is blocked by this API change&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12527507">AVRO-935</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12466471">AVRO-570</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 17 Oct 2011 22:41:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>68959</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 14 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2v3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80226</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>hadoop, cloudera, tether</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-853] Cache hash codes in Schema and Field</title>
                <link>https://issues.apache.org/jira/browse/AVRO-853</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;We are experiencing a serious performance degradation when trying to store/retrieve fields and schemas in hash-based data structures (eg. HashMap). Since all fields and schemas are immutable (with the exception of RecordSchema allowing deferred setting of Fields) it makes sense to cache the hash code on the object instead of recalculating every time the hashCode method gets called. &lt;/p&gt;

&lt;p&gt;(Are there other mutable Schema sub-types that I&apos;m not thinking about?)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12513041">AVRO-853</key>
            <summary>Cache hash codes in Schema and Field</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="dkaminsky">Douglas Kaminsky</reporter>
                        <labels>
                    </labels>
                <created>Wed, 6 Jul 2011 21:38:05 +0000</created>
                <updated>Tue, 1 Nov 2011 18:36:07 +0000</updated>
                            <resolved>Fri, 12 Aug 2011 21:54:07 +0000</resolved>
                                    <version>1.5.1</version>
                                    <fixVersion>1.6.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13060862" author="dkaminsky" created="Wed, 6 Jul 2011 21:51:16 +0000"  >&lt;p&gt;Simple hashCode caching submitted as a patch - improve upon it if you like. Calling setFields on a RecordSchema forces the cached hash code to reset to 0. If there are other mutable schemas that aren&apos;t handled, please build upon this&lt;/p&gt;</comment>
                            <comment id="13060864" author="dkaminsky" created="Wed, 6 Jul 2011 21:55:55 +0000"  >&lt;p&gt;Also, the thread assumes single-threaded behavior - I believe in the worst case hash code could still be calculated multiple times due to multithreading visibility issues, but since it&apos;s stored as a primitive there should be no chance of having an &quot;invalid state.&quot;&lt;/p&gt;</comment>
                            <comment id="13060865" author="dkaminsky" created="Wed, 6 Jul 2011 21:56:19 +0000"  >&lt;p&gt;*the thread=the patch&lt;/p&gt;</comment>
                            <comment id="13060886" author="cutting" created="Wed, 6 Jul 2011 22:40:45 +0000"  >&lt;p&gt;Another approach to your performance issue might be to use IdentityHashMap.&lt;/p&gt;

&lt;p&gt;Note that Schema properties can be added at any time, so all schemas are mutable from that perspective, and the hashcode incorporates the properties.  So addProp() should also invalidate the cache.&lt;/p&gt;

&lt;p&gt;Instead of having cache logic in many schema subclasses, perhaps the base implementation can be in terms of a new calculateHashcode() method that each of the subclasses implements instead of hashCode.  Then the cache need only be implemented on the base Schema class.&lt;/p&gt;</comment>
                            <comment id="13060895" author="dkaminsky" created="Wed, 6 Jul 2011 22:51:58 +0000"  >&lt;p&gt;I agree I forgot about props, they should also invalidate the cached hash value. You also propose a reasonable optimization.&lt;/p&gt;

&lt;p&gt;This is the only method that I have found so far that shows such a dramatic improvement in performance... for the performance test I&apos;ve been running (writing out 100 records), these are my results:&lt;/p&gt;

&lt;p&gt;Status Quo (HashMap, no caching): 4600ms&lt;br/&gt;
IdentityMap: 2300ms&lt;br/&gt;
HashMap with caching: &amp;lt;100ms&lt;/p&gt;</comment>
                            <comment id="13060916" author="scott_carey" created="Wed, 6 Jul 2011 23:20:27 +0000"  >&lt;p&gt;Both props and aliases are currently mutable.  I&apos;d like the whole thing to be immutable, but that is a fairly significant API change.&lt;/p&gt;

&lt;p&gt;The problem with triggering the change of a hash code based on modifying props or setting fields is that it does not cascade up the reference graph.  For example, if you have a record containing 1 field, that is a record and you modify the props of the nested record, it can reset its own hash code but won&apos;t reset the outer schema hashCode.  Any time we nest a schema in a schema or field this is a problem.&lt;/p&gt;

&lt;p&gt;A truly immutable schema data structure fixes this.&lt;/p&gt;

&lt;p&gt;I&apos;ve been thinking about several ways to change how Schema works to make it truly immutable &amp;#8211; including props and aliases &amp;#8211; other than setting fields to handle recursion.  This morning I was working on an alternate form of Schema because I need a &quot;Schema structured&quot; data structure for another project and require manipulating and composing items associated with schema nodes.  That could be a basis for an immutable Schema data structure.&lt;/p&gt;</comment>
                            <comment id="13060937" author="jbaldassari" created="Thu, 7 Jul 2011 00:05:31 +0000"  >&lt;p&gt;I&apos;ve recently run into this hash code performance issue as well.  Scott, there may be a way to work around the issue of propagating changes up the reference graph.  We would have to calculate hash codes by computing the hash code for any &quot;local&quot; state, which could be cached, and then adding to that local hash code the hash codes of all child objects, which could also be cached independently.  For example, a RecordSchema has &apos;aliases&apos;, &apos;doc&apos;, &apos;name&apos;, &apos;props&apos;, and &apos;isError&apos;, for its local state, and the hash code for those values could be cached.  Then to calculate the rest of the RecordSchema hash code we invoke hashCode() on all Field instances in the RecordSchema.  Each Field instance knows whether it has been modified or not, and so it can either return a cached hash code or recalculate the hash code for its local state, and so on.  So we would still need to traverse the whole schema graph every time the hash code is requested, but we might achieve some performance gains by caching values at each node in the graph.  Does that make sense?&lt;/p&gt;

&lt;p&gt;Also, I took a look at the patch, and I have a couple of comments in addition to Doug&apos;s and Scott&apos;s:&lt;/p&gt;

&lt;p&gt;Is it safe to assume that a calculated hash code will never be 0?  Maybe null would be a safer choice for the default/invalidated value.&lt;/p&gt;

&lt;p&gt;Thread-safety is actually an issue here.  Since addProp() and getProp() are synchronized we have to assume that Schema is intended to be used by multiple threads.  The worst-case scenario for the unsynchronized hash code cache is worse than just having 2 threads calculate the hash code at once.  If one thread is modifying the schema while another is calling hashCode(), it could result in a temporary inconsistency between hashCode() and equals().  This could lead to some confusing problems with hash maps/sets.  If the caching is abstracted up into the Schema base class as Doug suggests, it would be fairly simple to synchronize access to the cache.  This could be done with a synchronized method/block or by using something like a ReadWriteLock, which would probably have better performance characteristics for a read-frequently-write-infrequently use case such as this.  In fact, there may already be a synchronization issue with Schema because the properties map is not accessed in a synchronized way in equals() or hashCode()...&lt;/p&gt;</comment>
                            <comment id="13060952" author="scott_carey" created="Thu, 7 Jul 2011 00:26:13 +0000"  >&lt;p&gt;@James &lt;br/&gt;
Yes, I understand what you are talking about.  Partial caching with graph traversal would still be a big win.&lt;/p&gt;

&lt;p&gt;Ideally immutability with several schema subtypes being referrentially transparent would be great (all &quot;int&quot; schemas with no props can be the same instance (per classloader) for example, so that the == check triggers more often.&lt;/p&gt;

&lt;p&gt;It is not safe to assume the calculated hashCode is 0.  We could use MIN_INT since it is less likely to occur, but must still assume that that may occur on occasion.&lt;/p&gt;

&lt;p&gt;Generally speaking with respect to thread-safety:&lt;br/&gt;
If hashCode or equals is mutating in &lt;em&gt;ANY WAY&lt;/em&gt; it is innapropriate to use the objects as a key in a map or in a set &amp;#8211; hashCode and equals must be stable during the lifetime of use in a map.  So from that perspective, oddities produced by caching the values and mutating the state are user error.  It would be nice to remove user error due to mutability from the equation.   &lt;/p&gt;</comment>
                            <comment id="13060965" author="jbaldassari" created="Thu, 7 Jul 2011 00:44:57 +0000"  >&lt;p&gt;Immutable Schemas would be great, but since they are mutable today, would you say that it&apos;s just not a good idea to use Schema as the key in a hash map?  Maybe a simple workaround for that use case would be to use the Schema&apos;s full name - the namespace + schema name - as the key of the map (assuming that is unique of course).&lt;/p&gt;</comment>
                            <comment id="13060970" author="cutting" created="Thu, 7 Jul 2011 01:03:36 +0000"  >&lt;p&gt;It&apos;s okay to use schemas as Map keys, but it&apos;s an error to change a schema after putting it in a Map.  We don&apos;t detect that error.  If schema&apos;s were immutable that error would be impossible.&lt;/p&gt;

&lt;p&gt;I&apos;m not too worried about using zero to indicate &apos;invalid hash&apos;.  A more random value might be a bit better, but a collision with this value is not fatal, it just makes the cache ineffective for those few schemas whose hashcode is that value.  We could instead have a flag to indicate that the hashcode is unset, or use a boxed Integer, both of which would use more memory without benefit in 2^32-1 cases.  Whatever value we use should probably be a constant.  We can explicitly check when calculateHashCode returns this value and use a different value when it occurs.&lt;/p&gt;

&lt;p&gt;In summary, I think adding a hashcode cache to Schema&apos;s would be a good thing to do.  I think this patch could be improved a bit, but I&apos;m generally in favor of committing something like this soon.&lt;/p&gt;</comment>
                            <comment id="13060984" author="scott_carey" created="Thu, 7 Jul 2011 01:42:06 +0000"  >&lt;p&gt;Something like this is fine for this &apos;version&apos; of the Schema.  A possible future immutable Schema implementation would differ.&lt;/p&gt;

&lt;p&gt;We should add a big javadoc warning around changing Schemas after they have been used in a map or set to the class and setProp.  &lt;/p&gt;

&lt;p&gt;Since it is only valid to call setFields() once on a Record, rather than &apos;reset&apos; the hash, just throw a runtime exception if hashCode is called and the fields are null.  It is an invalid record if it is used prior to setting the fields &amp;#8211; returning a hashCode would be an error.&lt;/p&gt;

&lt;p&gt;We should pick a large random number for the sentinel &apos;unset&apos; hash value rather than 0.  0 is more common than a random int because several simple hash functions can return 0 &amp;#8211; for example String&apos;s hashCode has a bias for 0 on common strings.&lt;/p&gt;</comment>
                            <comment id="13060985" author="scott_carey" created="Thu, 7 Jul 2011 01:43:20 +0000"  >&lt;p&gt;A related question:&lt;/p&gt;

&lt;p&gt;Should a field&apos;s Aliases participate in equals() and hashCode() ?&lt;/p&gt;</comment>
                            <comment id="13061013" author="jbaldassari" created="Thu, 7 Jul 2011 02:48:48 +0000"  >&lt;p&gt;I was just looking for related issues, and I came across &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-261&quot; title=&quot;Allow Schemas to be immutable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-261&quot;&gt;&lt;del&gt;AVRO-261&lt;/del&gt;&lt;/a&gt;, which talks about immutable Schemas and caching of hash codes.  Is there a separate issue for making Schemas completely immutable?&lt;/p&gt;</comment>
                            <comment id="13061025" author="cutting" created="Thu, 7 Jul 2011 03:38:18 +0000"  >&lt;p&gt;&amp;gt; Should a field&apos;s Aliases participate in equals() and hashCode()?&lt;/p&gt;

&lt;p&gt;I think so.  In most cases that isn&apos;t required, but I don&apos;t think it does much harm to have them participating and there are probably cases where they are required.&lt;/p&gt;</comment>
                            <comment id="13061039" author="jbaldassari" created="Thu, 7 Jul 2011 05:27:59 +0000"  >&lt;p&gt;I just hammered out a quick patch that uses the second approach I described earlier, in which we traverse the entire schema graph and cache the local state at each node in the graph.  The local cache is invalidated upon mutation.  I ran a test in which I called hashCode() on a record schema 10,000 times and measured the amount of time required to complete all hashCode() calls.  This patch decreased the run time of the test by a little over 27% (from 537ms down to 389ms).  It isn&apos;t a slam dunk, but I guess it&apos;s an improvement.  I haven&apos;t had a chance yet to test that mutating the schema causes the hash code to be updated.  I also haven&apos;t added the Field aliases to hashCode() and equals(), but if this looks like a good approach I can work on the remaining tasks.&lt;/p&gt;</comment>
                            <comment id="13061040" author="jbaldassari" created="Thu, 7 Jul 2011 05:29:02 +0000"  >&lt;p&gt;Here&apos;s a patch for the graph traversal with local caching approach.&lt;/p&gt;</comment>
                            <comment id="13061285" author="dkaminsky" created="Thu, 7 Jul 2011 13:24:12 +0000"  >&lt;p&gt;FYI, I purposely chose 0 instead of null for thread safety purposes, since primitives have different characteristics than objects in multithreaded context. I&apos;m not certain MIN_INT would be any less likely to be chosen than 0 as a hash in general, but if the Avro classes hash to generally positive numbers, picking any negative number as the &quot;unset&quot; value would be an improvement.&lt;/p&gt;

&lt;p&gt;As pointed out earlier, the worst case is that the &quot;unset&quot; value gets calculated over and over again and loses the benefit of cache&lt;/p&gt;</comment>
                            <comment id="13061292" author="dkaminsky" created="Thu, 7 Jul 2011 13:30:21 +0000"  >&lt;p&gt;Further, I question whether properties actually need to be part of the hash code. Certainly they factor in to the equality check, but what is the real harm if two perfectly identical schemas with slightly different properties end up in the same hash bucket? How often will this actually happen? I can&apos;t imagine this would significantly impact hashing performance.&lt;/p&gt;

&lt;p&gt;Equal objects should have equal hashcodes, but equal hashcodes don&apos;t imply equal objects&lt;/p&gt;</comment>
                            <comment id="13061293" author="dkaminsky" created="Thu, 7 Jul 2011 13:30:22 +0000"  >&lt;p&gt;Further, I question whether properties actually need to be part of the hash code. Certainly they factor in to the equality check, but what is the real harm if two perfectly identical schemas with slightly different properties end up in the same hash bucket? How often will this actually happen? I can&apos;t imagine this would significantly impact hashing performance.&lt;/p&gt;

&lt;p&gt;Equal objects should have equal hashcodes, but equal hashcodes don&apos;t imply equal objects&lt;/p&gt;</comment>
                            <comment id="13061438" author="scott_carey" created="Thu, 7 Jul 2011 16:54:34 +0000"  >&lt;p&gt;@Douglas&lt;/p&gt;

&lt;p&gt;Good point, we can simplify the hash code functions on complicated members like Props and Aliases.   We can either ignore props, or only use a simple to compute portion of it:  the size.&lt;/p&gt;

&lt;p&gt;How should equals with Aliases work?&lt;/p&gt;

&lt;p&gt;Are the three below schemas equivalent?  &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;A: {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;}]}
B: {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;}], &lt;span class=&quot;code-quote&quot;&gt;&quot;aliases&quot;&lt;/span&gt;:[&lt;span class=&quot;code-quote&quot;&gt;&quot;foo2&quot;&lt;/span&gt;]}
C: {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;foo2&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;}], &lt;span class=&quot;code-quote&quot;&gt;&quot;aliases&quot;&lt;/span&gt;:[&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Keep in mind that equals must be transitive, if A == B and B == C implies C == A,  and symmetric C.equals(A) must be true if A.equals(C) is true.&lt;br/&gt;
In the above, aliases allow A == B == C.&lt;/p&gt;

&lt;p&gt;But this represents a problem for other cases:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;A: {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;}]}
B: {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;}], &lt;span class=&quot;code-quote&quot;&gt;&quot;aliases&quot;&lt;/span&gt;:[&lt;span class=&quot;code-quote&quot;&gt;&quot;foo2&quot;&lt;/span&gt;]}
C2: {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;foo2&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;}]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aliases allow A == B, and B == C2, but A != C2.  Therefore, we can use aliases in equality only two ways:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;not at all&lt;/li&gt;
	&lt;li&gt;exact match only&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This means that either &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Ignore aliases: A == B, B != C, A != C&lt;/li&gt;
	&lt;li&gt;Exct match only: A != B, B != C, A != C&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I vote for ignoring Aliases in equality checks as we currently do, and having a different version of equals for checking for the ability to transform one schema to another using aliases  &quot;alias promotion&quot;.&lt;/p&gt;

&lt;p&gt;This is an assymetric process that does not have the transitive property.  A promotesTo B, B promotesTo C2, A !promotesTo C2&lt;/p&gt;


&lt;p&gt;I also suspect that we should remove props from equals().  I think those behave similar to aliases.&lt;/p&gt;

&lt;p&gt;Are the three schemas below different?  Should they differ across languages or do they represent different data?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;A: {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;array&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;items&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;}
B: {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;array&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;items&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;java.typehint&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;java.util.List&quot;&lt;/span&gt;}
C: {&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;array&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;items&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;java.typehint&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;intarray&quot;&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One could argue that these are equal (the serialized form is the same, and the extra properties are only specific to one language implementation).&lt;br/&gt;
The props here are just specialized documentation.&lt;/p&gt;

&lt;p&gt;I think we have two consistent choices:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Schemas are equal only if all aliases, props, and doc fields match exactly &amp;#8211; in other words if toString() prints the same result.&lt;/li&gt;
	&lt;li&gt;Schemas are equal based on name, type, and structure alone.  In other words, they can exchange serialized data without type promotion.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13061446" author="scott_carey" created="Thu, 7 Jul 2011 17:14:03 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I think we have two consistent choices:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Schemas are equal only if all aliases, props, and doc fields match exactly &#8211; in other words if toString() prints the same result.&lt;/li&gt;
	&lt;li&gt;Schemas are equal based on name, type, and structure alone. In other words, they can exchange serialized data without type promotion.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I want to discuss this point a bit more.  These in my mind are the two fundamental use cases for equivalence of schemas:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Does a set of equivalent schemas contain the same information in their JSON form?  (requires equivalent props, aliases, and doc)&lt;br/&gt;
or&lt;/li&gt;
	&lt;li&gt;Can a set of equivalent schemas participate in mutial exchange of serialized information according to the Avro spec? (requires ignoring props, aliases, and doc)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Type promotion in schema resolution cannot be part of equals() because it is asymmetric.  &lt;/p&gt;
{&quot;int&quot;}
&lt;p&gt; promotesTo &lt;/p&gt;
{&quot;long&quot;}
&lt;p&gt; but not vice-versa.&lt;br/&gt;
Alias translation cannot be part of equals() because it is not transitive (but it is pair-symmetric).&lt;br/&gt;
These are separate questions, not one of equivalence.&lt;/p&gt;

&lt;p&gt;There are more equivalence classes that may be useful too, such as:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Can a set of equivalent schemas participate in mutial exchange of serialized information without losing data, ignoring the Avro spec (do not need to match names, just structure and types)&lt;/li&gt;
&lt;/ul&gt;




</comment>
                            <comment id="13061535" author="scott_carey" created="Thu, 7 Jul 2011 19:46:55 +0000"  >&lt;p&gt;Related thoughts (for possible new JIRA tickets):&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Aliases should be part of Name.  Only named types (record, enum, fixed) and fields can have aliases and much of the alias resolution and helper methods can be encapsulated in Name, along with the hashCode/equals complications.&lt;/li&gt;
	&lt;li&gt;&quot;doc&quot; should also go into Name.  Only named types and fields can have &quot;doc&quot;.  The spec seems ambiguous with respect to allowing arbitrary properties named &quot;doc&quot; for unnamed types.&lt;/li&gt;
	&lt;li&gt;Name can be simplified if it did not deal with &apos;anonymous&apos; records (are these used anywhere other than protocols?).  This can be done if RecordSchema is split in two, one for anonymous records and one for named records.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13062220" author="cutting" created="Fri, 8 Jul 2011 22:05:04 +0000"  >&lt;p&gt;As for aliases, two record schemas whose names differ should not be equal via aliases, since they&apos;ll read into records of different types.  So differently-named schemas should not be considered equal via aliases.&lt;/p&gt;

&lt;p&gt;To record schemas whose names match but with a different set of aliases will be able to read different files and be involved in different protocols; they&apos;ll behave differently and thus should not be treated as equal.&lt;/p&gt;

&lt;p&gt;Properties are similar: Java reflection uses a property to determine whether to read an array into some kind of a List or into a raw array.  So two schemas that differ only in properties may read the same data into non-equivalent data structures and thus these schemas should not be considered equal.&lt;/p&gt;

&lt;p&gt;Also, if something is used by equals() then, if possible, it should be incorporated in to hashCode().  We cannot predict when there might be a large number of items that differ only in this aspect.&lt;/p&gt;

&lt;p&gt;I think this patch is basically the right approach for now.  Since mutation after storing in a Map or Set is already an error we cannot detect, perhaps we should not worry about invalidation at all.&lt;/p&gt;</comment>
                            <comment id="13063377" author="dkaminsky" created="Mon, 11 Jul 2011 14:56:00 +0000"  >&lt;p&gt;My only concern is losing hash keys - fixing the hash code the first time hashCode is called would be sufficient to ensure that further retrieval of the same exact object would work, but would prevent the use of hashing to &quot;duck-type&quot; a schema.&lt;/p&gt;

&lt;p&gt;e.g. Supposing you encountered this first schema:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{
  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, 
  &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&quot;&lt;/span&gt;},
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;&quot;&lt;/span&gt;}
  ]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You hash the value, then later encounter this schema:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{
  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, 
  &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&quot;&lt;/span&gt;},
    {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;&quot;&lt;/span&gt;}
  ],
  &lt;span class=&quot;code-quote&quot;&gt;&quot;some.property&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;propvalue&quot;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Your use case may or may not depend on these things being considered equal...&lt;/p&gt;

&lt;p&gt;Should there be a second equality method that favors content over structure without forcing the end user to compare the schema internals? Using schemaA and schemaB for the above, something like:&lt;/p&gt;

&lt;p&gt;schemaA.equals(schemaB); // false&lt;br/&gt;
schemaA.quacksLike(schemaB); // true &amp;#8211; yes, stupid name, please pick something better&lt;/p&gt;

&lt;p&gt;That nicely solves the equality problem by letting the end user decide whether they care about form or substance.&lt;/p&gt;

&lt;p&gt;As to the original issue, I&apos;d just reiterate that although I agree it is ideal for all &quot;equality&quot; components to play a role in hashing, it is not and should not be a requirement, as long as there is no significant performance impact. I feel sufficient documentation (ie. &quot;hey, btw, you will get poor hashing performance if you try to use 50,000 copies of the boolean schema with different properties as hash keys&quot;) would be enough to assuage most developers&apos; concerns.&lt;/p&gt;</comment>
                            <comment id="13063450" author="cutting" created="Mon, 11 Jul 2011 17:45:40 +0000"  >&lt;p&gt;Yes, perhaps another predicate would be useful in addition to &apos;equals&apos;.  Would the subsumes() method in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-816&quot; title=&quot;Schema Comparison Utils&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-816&quot;&gt;AVRO-816&lt;/a&gt; suffice?&lt;/p&gt;</comment>
                            <comment id="13063686" author="dkaminsky" created="Tue, 12 Jul 2011 03:06:37 +0000"  >&lt;p&gt;Depends on your definition of &quot;quacksLike&quot; - if schemaA has &quot;a&quot; and &quot;b&quot; and schemaB has &quot;b&quot; then schemaA could &quot;quack like&quot; schemaB, so subsumes would work. If I wanted to know if schemaA and schemaB are structurally equal (they both have &quot;a&quot; and &quot;b&quot;) I would have to check that schemaA subsumes schemaB AND that schemaB subsumes schemaA, which is an inherently inefficient way to compare structure.&lt;/p&gt;

&lt;p&gt;P.S. quacksLike is a bad name, but I like it better than &quot;subsumes&quot; - will comment on &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-816&quot; title=&quot;Schema Comparison Utils&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-816&quot;&gt;AVRO-816&lt;/a&gt; similarly &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13064043" author="cutting" created="Tue, 12 Jul 2011 18:01:09 +0000"  >&lt;p&gt;What&apos;s the use case for quacksLike()?&lt;/p&gt;</comment>
                            <comment id="13065028" author="dkaminsky" created="Thu, 14 Jul 2011 03:32:27 +0000"  >&lt;p&gt;The purpose of a &quot;quacksLike&quot; method is to determine if two schemas are structurally equal - in the particular example where we encountered the original slowdown, we were defining a custom method for serializing schemas, where we performed certain optimizations if we had encountered the schema before. In our example, we don&apos;t care if we encounter the exact same schema elsewhere in our protocol, nor if the properties or aliases have been modified. For our purposes, structurally equivalent schemas are the same schema...&lt;/p&gt;

&lt;p&gt;Take for example the following schema with corresponding fields (in non-JSON to save typing):&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{
 &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;A&quot;&lt;/span&gt;,
 &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
 &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;},
             {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&quot;&lt;/span&gt;}]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let&apos;s say that at some point another thread (for the purpose of argument) modifies the properties of this schema:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{
 &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;A&quot;&lt;/span&gt;,
 &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
 &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;},
             {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&quot;&lt;/span&gt;}]
 &lt;span class=&quot;code-quote&quot;&gt;&quot;java-type-hint&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;some.type.Here&quot;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;A.equals(B) == false&lt;br/&gt;
A.quacksLike(B) == true&lt;/p&gt;

&lt;p&gt;I almost want to say it&apos;s about congruence, but a true congruence predicate would probably ignore naming, too.&lt;/p&gt;</comment>
                            <comment id="13065029" author="dkaminsky" created="Thu, 14 Jul 2011 03:33:19 +0000"  >&lt;p&gt;Sorry, realize my naming there is confusing - assume:&lt;/p&gt;

&lt;p&gt; A==the first code sample&lt;br/&gt;
 B==the second code sample&lt;/p&gt;</comment>
                            <comment id="13070765" author="cutting" created="Mon, 25 Jul 2011 21:18:41 +0000"  >&lt;p&gt;Here&apos;s a version of the patch that avoids replicating cache logic.  All tests pass.&lt;/p&gt;

&lt;p&gt;Douglas, does this help your performance issues?&lt;/p&gt;

&lt;p&gt;Does anyone object to this change?&lt;/p&gt;</comment>
                            <comment id="13071268" author="scott_carey" created="Tue, 26 Jul 2011 18:38:14 +0000"  >&lt;p&gt;+1, looks good to me. &lt;/p&gt;
</comment>
                            <comment id="13072106" author="cutting" created="Wed, 27 Jul 2011 23:47:03 +0000"  >&lt;p&gt;Here&apos;s a new version of the patch that uses the cached hash codes to help equals() fail faster.  Is this worthwhile?  It won&apos;t help hash tables but would help, e.g. searching a List of schemas for a match.&lt;/p&gt;</comment>
                            <comment id="13073187" author="dkaminsky" created="Sat, 30 Jul 2011 14:47:20 +0000"  >&lt;p&gt;Looks good from my side. &lt;/p&gt;</comment>
                            <comment id="13084407" author="cutting" created="Fri, 12 Aug 2011 21:54:07 +0000"  >&lt;p&gt;I committed this.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12485534" name="AVRO-853-approach2.patch" size="7058" author="jbaldassari" created="Thu, 7 Jul 2011 05:29:02 +0000"/>
                            <attachment id="12488041" name="AVRO-853.patch" size="6798" author="cutting" created="Wed, 27 Jul 2011 23:47:03 +0000"/>
                            <attachment id="12487756" name="AVRO-853.patch" size="5082" author="cutting" created="Mon, 25 Jul 2011 21:18:41 +0000"/>
                            <attachment id="12485491" name="AVRO-853.patch" size="2073" author="dkaminsky" created="Wed, 6 Jul 2011 21:51:16 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 6 Jul 2011 22:40:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>65122</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 24 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2vb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80227</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-854] python DataFileWriter and DataFileReader should implement __enter__ and __exit__</title>
                <link>https://issues.apache.org/jira/browse/AVRO-854</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I think The python classes &lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;avio.datafile.DataFileWriter
avio.datafile.DataFileReader
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;should implement the methods&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;__enter__
__exit__
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So that they can be used in with statements as context managers&lt;/p&gt;

&lt;p&gt;see &lt;a href=&quot;http://docs.python.org/release/2.5.2/lib/typecontextmanager.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.python.org/release/2.5.2/lib/typecontextmanager.html&lt;/a&gt;&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12513043">AVRO-854</key>
            <summary>python DataFileWriter and DataFileReader should implement __enter__ and __exit__</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="qwertymaniac">Harsh J</assignee>
                                    <reporter username="jeremy@lewi.us">Jeremy Lewi</reporter>
                        <labels>
                    </labels>
                <created>Wed, 6 Jul 2011 21:46:20 +0000</created>
                <updated>Wed, 15 Feb 2012 00:46:27 +0000</updated>
                            <resolved>Mon, 23 Jan 2012 23:43:46 +0000</resolved>
                                    <version>1.5.1</version>
                                    <fixVersion>1.6.2</fixVersion>
                                    <component>python</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13179316" author="qwertymaniac" created="Wed, 4 Jan 2012 06:18:51 +0000"  >&lt;p&gt;Implemented a simple context manager (enter provides the instance itself, no frills, and exit closes the file if there was no exception waiting to be rethrown after) and added a test that runs for python &amp;gt; 2.5 (2.5 has with statement as a future import).&lt;/p&gt;

&lt;p&gt;Ran tests with python 2.5 and python 2.6, and both pass (former skips it).&lt;/p&gt;</comment>
                            <comment id="13188916" author="qwertymaniac" created="Thu, 19 Jan 2012 04:37:50 +0000"  >&lt;p&gt;Hi, do let me know if there are any comments on the patch you&apos;d like me to address.&lt;/p&gt;</comment>
                            <comment id="13188929" author="jeremy@lewi.us" created="Thu, 19 Jan 2012 05:21:07 +0000"  >&lt;p&gt;Looks good to me. Thanks for implementing this.&lt;/p&gt;</comment>
                            <comment id="13191634" author="cutting" created="Mon, 23 Jan 2012 23:43:46 +0000"  >&lt;p&gt;I committed this.  Thanks, Harsh!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12509175" name="AVRO-854.patch" size="2335" author="qwertymaniac" created="Tue, 3 Jan 2012 06:37:09 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 4 Jan 2012 06:18:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>68948</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2vj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80228</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>python</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-855] Use boost:variants for union types in C++ code generation</title>
                <link>https://issues.apache.org/jira/browse/AVRO-855</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Current C++ code avrocodegencpp generates union_n (where n = 0 to n numbered) structure with the member boost::any for union schemas.&lt;/p&gt;

&lt;p&gt;Is it possible to use boost::variants instead of &quot;union_n&quot; structures? The advantage of boost::variant is we can define our boost::visitors and apply them to retrieve the actual type in the union.&lt;/p&gt;

&lt;p&gt;Let me know?&lt;br/&gt;
-Ramana&lt;/p&gt;</description>
                <environment></environment>
        <key id="12513045">AVRO-855</key>
            <summary>Use boost:variants for union types in C++ code generation</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="ramanasv">Ramana Suvarapu</reporter>
                        <labels>
                            <label>avro</label>
                            <label>c++</label>
                    </labels>
                <created>Wed, 6 Jul 2011 22:24:18 +0000</created>
                <updated>Mon, 6 Feb 2017 12:40:45 +0000</updated>
                                            <version>1.5.1</version>
                                                    <component>c++</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="15853924" author="da77a" created="Mon, 6 Feb 2017 12:40:45 +0000"  >&lt;p&gt;I&apos;ve had a play with implementing this in a way that doesn&apos;t change the API i.e. the getters setters interface remains, its only the impl that changes to use a variant. You can access the variant itself explicitly (unless I add a set of forwarding templates - which might be practical) to use visitor interface etc. However, until/unless I wrap everything in recursive wrappers (which won&apos;t do good things for the efficiency gains variant should otherwise have offered over any) the recursive union test won&apos;t compile. It would be preferable annotate which types are recursive and need a recursive wrapper (or  maybe use a unique_ptr), while allowing non-recursive types (simple, fast ones) to be simple and fast... But annotations support is something that isn&apos;t there yet in the cpp parser?&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 6 Feb 2017 12:40:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>65154</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 50 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2vr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80229</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-856] update snappy-java version</title>
                <link>https://issues.apache.org/jira/browse/AVRO-856</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;We should update to a more recent version of snappy-java.  In particular, to a version that links in libsnappy.so with visibility=hidden, so that it doesn&apos;t conflict with other Java applications that link to libsnappy.so.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12513193">AVRO-856</key>
            <summary>update snappy-java version</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Thu, 7 Jul 2011 20:34:49 +0000</created>
                <updated>Fri, 12 Aug 2011 20:22:33 +0000</updated>
                            <resolved>Mon, 11 Jul 2011 21:21:23 +0000</resolved>
                                    <version>1.5.1</version>
                                    <fixVersion>1.5.2</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13061577" author="cutting" created="Thu, 7 Jul 2011 20:42:19 +0000"  >&lt;p&gt;Here&apos;s a patch for this.&lt;/p&gt;</comment>
                            <comment id="13061604" author="scott_carey" created="Thu, 7 Jul 2011 21:34:17 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Looks good.&lt;/p&gt;</comment>
                            <comment id="13063548" author="cutting" created="Mon, 11 Jul 2011 21:21:23 +0000"  >&lt;p&gt;I committed this.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12485652" name="AVRO-856.patch" size="3187" author="cutting" created="Thu, 7 Jul 2011 20:42:19 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 7 Jul 2011 21:34:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>65136</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 28 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2vz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80230</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-857] additional maven metadata</title>
                <link>https://issues.apache.org/jira/browse/AVRO-857</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;We can add additional metadata to pom.xml.&lt;/p&gt;

&lt;p&gt;Especially &amp;lt;scm&amp;gt; is handy since it allows simple checkout in ide (like eclipse indigo). It makes it easier for new and occasional contributors.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12513480">AVRO-857</key>
            <summary>additional maven metadata</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jendap">Jan Prach</assignee>
                                    <reporter username="jendap">Jan Prach</reporter>
                        <labels>
                    </labels>
                <created>Sun, 10 Jul 2011 22:53:08 +0000</created>
                <updated>Tue, 13 Dec 2011 19:06:47 +0000</updated>
                            <resolved>Mon, 25 Jul 2011 20:17:14 +0000</resolved>
                                                    <fixVersion>1.6.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13070728" author="cutting" created="Mon, 25 Jul 2011 20:17:14 +0000"  >&lt;p&gt;I committed this.  Thanks, Jan!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12486013" name="AVRO-857.patch" size="2286" author="jendap" created="Sun, 10 Jul 2011 22:58:47 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 25 Jul 2011 20:17:14 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>66982</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 26 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2w7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80231</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
