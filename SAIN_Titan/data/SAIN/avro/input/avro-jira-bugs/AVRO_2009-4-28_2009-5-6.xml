<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:12:06 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2009-4-28+AND+created+%3C%3D+2009-5-6+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="2" total="2"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-25] Blocking for value output (with API change)</title>
                <link>https://issues.apache.org/jira/browse/AVRO-25</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The Avro specification has provisions for decomposing very large arrays and maps into &quot;blocks.&quot;  These provisions allow for streaming implementations that would allow one to, for example, write the contents of a file out as an Avro array w/out knowing in advance how many records are in the file.&lt;/p&gt;

&lt;p&gt;The current Java implementation of Avro does support this provision.  My colleague Thiru will be attaching a patch which implements blocking.  It turns out that the buffering required to do blocking is non-trivial, so it seem beneficial to include a standard implementation of blocking as part of the reference Avro implementation.&lt;/p&gt;

&lt;p&gt;This is an early version of the code.  We are still working on testing and performance tuning.  But we wanted early feedback.&lt;/p&gt;

&lt;p&gt;This patch also includes a new set of classes called ValueInput and ValueOutput, which are meant to replace ValueReader and ValueWriter.  These classes have largely the same API as ValueReader/Writer, but they include a few more methods to &quot;bracket&quot; items that appear inside of arrays and maps.  Shortly, we&apos;ll be posting a separate patch which implements further subclasses of ValueInput/Output that do &quot;validation&quot; of input and output against a schema (and also do automatic schema resolution for readers).&lt;/p&gt;

&lt;p&gt;We&apos;re implementing these classes separate from ValueInput/Output to allow you to kick our tires w/out causing too much disruption to your source trees.  Let&apos;s validate the basic idea behind these patches first, and then determine the details of integrating them into the rest of Avro.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12424197">AVRO-25</key>
            <summary>Blocking for value output (with API change)</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thiru_mg">Thiruvalluvan M. G.</assignee>
                                    <reporter username="raymie">Raymie Stata</reporter>
                        <labels>
                    </labels>
                <created>Wed, 29 Apr 2009 18:34:39 +0000</created>
                <updated>Tue, 14 Jul 2009 22:50:09 +0000</updated>
                            <resolved>Fri, 5 Jun 2009 18:32:17 +0000</resolved>
                                                    <fixVersion>1.0.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12704273" author="thiru_mg" created="Wed, 29 Apr 2009 19:27:31 +0000"  >&lt;p&gt;Here is patch. This has a few new classes and their tests. The existing code is not touched.&lt;/p&gt;

&lt;p&gt;Please start with the abstract classes ValueOutput and ValueInput and then look at their concrete implementations BasicValueOutput, BlockingValueOutput and BasicValueInput. The BasicValueOutput encodes data identical to the existing implementation. BlockingValueOutput encodes additional information to allow readers to skip large arrays and maps faster. The BasicValueInput can read both non-blocking and blocking version of the binary stream.&lt;/p&gt;

&lt;p&gt;There is a single change to the binary format for blocking support. The existing format encodes the number of items for arrays/maps before items themselves are encoded. In the new format we continue to support this method. So binary streams created by writers with no blocking support will still be read by readers with blocking support. To add blocking support, we encode the item count as a negative number instead of usual positive number. If the item count is negative, then it is followed by the number of bytes occupied by the elements themselves. So the reader needs to simply skip the these number of bytes to skip the elements. The reader need not decode the individual entries. If the reader is not sophisticated enough, it can simply read the byte count and ignore it. Of course, it should negate the item count to make it positive. To indicate the end of array/map, the existing format encodes zero item count. There is no change to that in the new format.&lt;/p&gt;

&lt;p&gt;Thus readers with blocking support can read both the binary streams with blocking support. Also, the readers without blocking support can still read the binary stream with blocking support with a small tweak to interpret the negative item count.&lt;/p&gt;</comment>
                            <comment id="12704277" author="thiru_mg" created="Wed, 29 Apr 2009 19:30:43 +0000"  >&lt;p&gt;Patch of blocking support&lt;/p&gt;</comment>
                            <comment id="12712299" author="cutting" created="Fri, 22 May 2009 22:49:05 +0000"  >&lt;p&gt;Finally looking at this.  Overall it looks good.  Some thoughts:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;can we get a version of the patch that integrates this into Avro, changing GenericDatumReader/Writer to bracket arrays and maps, so that we can run unit tests and benchmarks against this?  We might then, e.g., change TestSchema and TestDataFile to test things with the blocked implementations.&lt;/li&gt;
	&lt;li&gt;let&apos;s not rename ValueReader and ValueWriter here, since that will just make this patch harder to maintain.&lt;/li&gt;
	&lt;li&gt;there are now four copies of the zig-zag varint encoding logic, two of the float-writing logic, etc.  it&apos;d be nice to just have one of each.  these are innermost loops, and it&apos;d be best to be able to optimize them in a single place.&lt;/li&gt;
	&lt;li&gt;let&apos;s not maintain a stack in the basic ValueWriter to validate output &amp;#8211; we don&apos;t elsewhere validate things, especially if it adds cost.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Here are some ideas for reducing code duplication: if BlockingValueWriter extends ValueWriter then it can override each writeFoo method with something like &apos;super.writeFoo(foo); check();&apos;, getting rid of one duplication.  it would also override write(byte) to add things to the buffer.  The duplication in writeLongDirect can be avoided by wrapping BlockingValueWriter&apos;s output stream in a ValueWriter.  Similarly, the duplication in encodeLong can be removed by using a ValueWriter that writes to a ByteArrayOutputStream.  We can reuse the same ValueWriter/ByteArrayOutputStream pair, in the style of Hadoop&apos;s DataOutputBuffer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://svn.apache.org/repos/asf/hadoop/core/trunk/src/core/org/apache/hadoop/io/DataOutputBuffer.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/hadoop/core/trunk/src/core/org/apache/hadoop/io/DataOutputBuffer.java&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="12713952" author="thiru_mg" created="Thu, 28 May 2009 11:53:12 +0000"  >&lt;p&gt;Integrated ValueOutput and ValueInput with the rest of Avro. ValueWriter, ValueReader, ByteBufferValueWriter and ByteBufferValueReader are no longer used.&lt;/p&gt;

&lt;p&gt;Removed duplication of encoding logic. Moved the encoding methods as static methods to a new class Encoder.&lt;/p&gt;

&lt;p&gt;I&apos;ve not carried out one suggestion made by Doug. I&apos;ve not eliminated the stack in BasicValueWriter. The stack there performs two functions:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Basic validation of calls such as writeArrayEnd() is called only after a writeArrayStart() etc. We can give up this validation by removing the stack.&lt;/li&gt;
	&lt;li&gt;The stack also enables the following. There are two overloaded methods each for writeArrayStart() and writeMapStart(), One takes the number of elements in the array/map and the other does not. The latter version is useful if the client does not know the exact number of elements in the container. The situation arises, for example, when streaming from a JSON array or map. The BlockingValueWriter can handle this situation because it buffers the contents. The BasicValueWriter handles this by writing single-element block every time startItem() is called. To achieve this, BasicValueWriter should know if the previous call to writeArrayStart()/writeMapStart() supplied the count or not. We need the stack to store that. We can remove the no-arg writeArrayStart()/writeMapStart() and force the client to give the count (it it does not have it, it can supply unit count for each entry). The trouble with this is that we&apos;ll lose performance with BlockingValueWriter as it will not be able to skip multiple entries at once. Another option is to make the BasicValueWriter ignore the initial count supplied with writeArrayStart(int)/writeMapStart(int) and make single entry blocks. This will slightly increase the encoded data length. The third option is to insist that the client always gives the count (even if it is forced to give 1) and then let BlockedValueOutput to optimize item counts; that is it should make larger blocks of entries if the entries are too small for the buffer. This is tricky, but we can make it work. What do you think?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12714054" author="cutting" created="Thu, 28 May 2009 16:52:10 +0000"  >&lt;p&gt;&amp;gt; ByteBufferValueWriter and ByteBufferValueReader are no longer used.&lt;/p&gt;

&lt;p&gt;I think these are still needed.  They implement an optimization, where buffers may be read from the socket and passed to the application without copying.  Unless I am missing something, this optimization appears to be lost in your patch, and it is critical if we want to implement efficient HDFS data access over RPC.&lt;/p&gt;

&lt;p&gt;Again, let&apos;s please not rename ValueReader and ValueWriter in this patch.  It will make it harder to maintain the patch as trunk changes.  It makes the patch much harder to evaluate, since it includes so many changes that are irrelevant to the added functionality.  If we want to argue about naming, we should do it in a separate issue, and not get distracted by that here.&lt;/p&gt;

&lt;p&gt;Also, for similar reasons, I would prefer we continue with ValueReader and ValueWriter as base classes, with BlockingValueWriter overriding methods.  I don&apos;t particularly like the name &quot;Basic&quot;, nor do I see how the abstraction adds enough power to balance the lines of code it changes and adds.&lt;/p&gt;

&lt;p&gt;As for the stacks in BasicValueInput and BasicValueOutput, these may affect performance, and I would prefer not to add such overhead to our simplest, fastest implementation.  If we wish to add such checking, we should address it in a separate issue, where we can benchmark it, etc.  This issue should ideally change the existing writing code as little as possible, so it remains a performance baseline and reference implementation.&lt;/p&gt;

&lt;p&gt;&amp;gt; The latter version is useful if the client does not know the exact number of elements in the container.&lt;/p&gt;

&lt;p&gt;In these cases, clients can either buffer entries and flush them in chunks, or they can knowingly write them as a sequence of length=1 chunks without buffering.  Automatically and silently generating length=1 chunks doesn&apos;t seem like a big favor to clients.  BlockingWriter can then ignore the client-supplied chunk lengths, since it&apos;s buffering.  Could that work?&lt;/p&gt;</comment>
                            <comment id="12715191" author="thiru_mg" created="Mon, 1 Jun 2009 18:30:38 +0000"  >&lt;p&gt;This patch addresses most of the issues raised by Doug.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The names of the classes are Writer and Reader with the new API.&lt;/li&gt;
	&lt;li&gt;I&apos;ve removed the stacks that were used to validation of reading and writing.&lt;/li&gt;
	&lt;li&gt;Changed the API so that the client must give the number of map/array entries before writing the entries themselves. This change was required to get rid of the stack in the writer.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I ran some performance tests to compare the new Reader/Writer API with the old one. After removing the stack, the BasicValueWriter is marginally (2 to 4%) faster the old one. The BlockingValueWriter is about 10% faster (see the note below)&lt;/p&gt;

&lt;p&gt;The read performance with data written by BasicValueWriter are more or less same as the original. There is no significant difference in performance for both full read and projection read (where some fields are absent in reader&apos;s record schema). With the data written by BlockingValueWriter the full read performance is similar to the old code. With projection read the performance is comparable if the field being ignored is not an array or map. If an array or map field is ignored due to projection, as expected, the performance is about three to four times better compared to the original.&lt;/p&gt;

&lt;p&gt;Note: I&apos;ve not implemented one change suggested by Doug. There are still two versions each of encodeLong(), encodeDouble() and encodeFloat(). One version encodes into a stream and the other into a buffer. When I tried to have a single version (that writes to a stream) and use ByteArrayOutputStream and arrayCopy as a substitue for buffer version, the performance of BlockingValueWriter fell by about 40%. With the buffer version, the performance went up by 10%. This is perhaps because, for example, encoding each long will require about 5 calls to OutputStream.write(int). The buffer version does no function calls.&lt;/p&gt;</comment>
                            <comment id="12715859" author="thiru_mg" created="Wed, 3 Jun 2009 08:07:46 +0000"  >&lt;p&gt;Brought back the ByteBuffer optimization where if ByteBufferInputStream or ByteBufferOutputStream are used, the reader and writer and  try to reuse ByteBuffer objects directly instead of extracting the contents.&lt;/p&gt;

&lt;p&gt;To avoid cyclic dependency between avro.io and avro.ipc packages, moved ByteBufferInputStream and ByteBufferOutputStream classes to avro.io package from avro.ipc.&lt;/p&gt;

&lt;p&gt;There is no general performance impact due to this change except when ByteBufferInputStream or ByteBufferOutputStream are used.&lt;/p&gt;</comment>
                            <comment id="12716018" author="cutting" created="Wed, 3 Jun 2009 18:20:32 +0000"  >&lt;p&gt;This is getting really close.  A few more things:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Some of the files use CRLF as EOL instead of just LF, which confuses diff (e.g., ValueReader).  Can you please fix them to all use LF?  Thanks!&lt;/li&gt;
	&lt;li&gt;I&apos;d rather not make ValueReader/Writer abstract in this patch, since it&apos;s not required.  Let&apos;s hold off on that for a later patch which can separately motivate it, and keep this patch focussed on the addition of blocking.&lt;/li&gt;
	&lt;li&gt;If you&apos;re moving files in subversion, it&apos;s best to provide a shell script that should be run before the patch is applied that does the &apos;svn mv&apos;.  And, if you use &apos;svn mv&apos;, the patch should then show changes to moved files.  (FWIW, these files were originally in the io package, but Raymie argued they should go in ipc so I moved them there.)  It might be simplest if we didn&apos;t move these at all in this patch, but rather left that to a separate patch.&lt;/li&gt;
	&lt;li&gt;Finally, you&apos;ve changed GenericDatumReader/Writer&apos;s API so that these no longer permit arbitrary classes to represent strings and bytes.  The idea is that, as with records, one can use arbitrary base classes to represent these by overriding 
{read/write}
{String/Bytes}
&lt;p&gt;, since not all applications may like using Utf8 and ByteBuffer.  The ValueReader/Writer take Utf8 and ByteBuffer, but an application can override these GenericDatumReader/Writer methods to convert between Utf8 and ByteBuffer and an application&apos;s chosen representation.  Is there a reason that the addition of blocking should change this?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks for bearing with me!&lt;/p&gt;</comment>
                            <comment id="12716211" author="thiru_mg" created="Thu, 4 Jun 2009 09:37:03 +0000"  >&lt;p&gt;Taken care of all four issues:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;No more CRLF line endings&lt;/li&gt;
	&lt;li&gt;BasicValueReader(Writer) and now ValueReader(Writer). No more abstract base classes&lt;/li&gt;
	&lt;li&gt;Moved ByteBufferInput(Output)Streams to avro.ipc package. They are now public (from being package-protected) so that they are accessible from avro.io package.&lt;/li&gt;
	&lt;li&gt;Reverted the changes w.r.t Strings and ByteBuffers in GenericDatumReader/Writer.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Again there is no performance impact due to these changes.&lt;/p&gt;</comment>
                            <comment id="12716391" author="cutting" created="Thu, 4 Jun 2009 20:32:52 +0000"  >&lt;p&gt;Thanks!  The patch is much easier to read.  I can now see what&apos;s changed in ValueReader/Writer, etc.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;doRead() might better be named doReadLong()&lt;/li&gt;
	&lt;li&gt;doSkip() might better be named doSkipBytes() &amp;#8211; with no parameters to distinguish it from doSkipBytes(long)&lt;/li&gt;
	&lt;li&gt;ByteReader and readString() duplicate logic &amp;#8211; perhaps we should have a doReadBytes() used by both?&lt;/li&gt;
	&lt;li&gt;ByteReader/ByteWriter use instanceof in an bad way &amp;#8211; maybe they should have two constructors instead?&lt;/li&gt;
	&lt;li&gt;in GenericDatumWriter, still casting to GenericFixed&lt;/li&gt;
	&lt;li&gt;in GenericDatumWriter, why is arraySize now int rather than long?&lt;/li&gt;
	&lt;li&gt;why does GenericArray#size() now return int rather than long?&lt;/li&gt;
	&lt;li&gt;why are array item counts ints rather than longs?  Pig, for example, has containers that are paged to disk which might have more than 2^32 elements.  I don&apos;t see anything that&apos;s gained by using int here.&lt;/li&gt;
	&lt;li&gt;changes to TestFSData and TestSchema seem spurious?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12716489" author="thiru_mg" created="Fri, 5 Jun 2009 03:46:56 +0000"  >&lt;p&gt;As per Doug&apos;s suggestion:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Renamed doRead() as doReadItemCount() as it actually reads item count.&lt;/li&gt;
	&lt;li&gt;Renamed doSkip() as doSkipItems() as it actually skips items in an array/map if it can.&lt;/li&gt;
	&lt;li&gt;Refactored ByteReader to be cleaner and avoided code duplication; there is a doReadBytes() now.&lt;/li&gt;
	&lt;li&gt;Fixed the cast for GenericFixed.&lt;/li&gt;
	&lt;li&gt;Array and map sizes are now long again.&lt;/li&gt;
	&lt;li&gt;Removed some changes (including the ones in TestFSData and TestSchema) that are spurious or irrelevant or to this issue.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Additionally,&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added a new function readEnum()/writeEnum() in ValueReader/Writer to support enumeration. This method was missing because enums got added after this JIRA stared.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12716494" author="thiru_mg" created="Fri, 5 Jun 2009 04:27:51 +0000"  >&lt;p&gt;Removed a couple of variables which are no longer useful in BlockingValueWriter.&lt;/p&gt;</comment>
                            <comment id="12716712" author="cutting" created="Fri, 5 Jun 2009 18:32:17 +0000"  >&lt;p&gt;I just committed this.  Thanks, Thiru!&lt;/p&gt;</comment>
                            <comment id="12716823" author="thiru_mg" created="Sat, 6 Jun 2009 03:44:43 +0000"  >&lt;p&gt;Thanks Doug&lt;/p&gt;

&lt;p&gt;The source files ByteBufferValueReader.java and ByteBufferValueWriter.java (which are empty) have not been removed. My mistake; I should have attached a shell script. Here it is.&lt;/p&gt;</comment>
                            <comment id="12717386" author="cutting" created="Mon, 8 Jun 2009 20:09:46 +0000"  >&lt;p&gt;&amp;gt; The source files ByteBufferValueReader.java and ByteBufferValueWriter.java (which are empty) have not been removed.&lt;/p&gt;

&lt;p&gt;Oops.  I just removed those.  Thanks for noticing!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12409929" name="AVRO-25.patch" size="96842" author="thiru_mg" created="Fri, 5 Jun 2009 04:27:51 +0000"/>
                            <attachment id="12409865" name="AVRO-25.patch" size="99244" author="thiru_mg" created="Thu, 4 Jun 2009 09:37:03 +0000"/>
                            <attachment id="12409756" name="AVRO-25.patch" size="123466" author="thiru_mg" created="Wed, 3 Jun 2009 10:57:59 +0000"/>
                            <attachment id="12409584" name="AVRO-25.patch" size="109850" author="thiru_mg" created="Mon, 1 Jun 2009 18:30:38 +0000"/>
                            <attachment id="12409258" name="AVRO-25.patch" size="107625" author="thiru_mg" created="Thu, 28 May 2009 11:53:12 +0000"/>
                            <attachment id="12406819" name="AVRO-25.patch" size="66243" author="thiru_mg" created="Wed, 29 Apr 2009 19:30:43 +0000"/>
                            <attachment id="12410051" name="AVRO-25.sh" size="126" author="thiru_mg" created="Sat, 6 Jun 2009 03:44:43 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 29 Apr 2009 19:27:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94354</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 33 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxrr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79401</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-26] Converting JUnit tests into TestNG controlled environment</title>
                <link>https://issues.apache.org/jira/browse/AVRO-26</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;TestNG is a powerful test harness, which provides a lot of useful features like parallel test execution, test parametrization, and such.&lt;br/&gt;
Avro uses JUnit environment instead which is more rigid and less efficient.&lt;/p&gt;

&lt;p&gt;I&apos;d suggest to convert Avro&apos;s Junit based test infrastructure into TestNG controller environment, which will allow to achieve higher level of test execution control in the long run&lt;/p&gt;</description>
                <environment></environment>
        <key id="12424413">AVRO-26</key>
            <summary>Converting JUnit tests into TestNG controlled environment</summary>
                <type id="6" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/requirement.png">Test</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cos">Konstantin Boudnik</assignee>
                                    <reporter username="cos">Konstantin Boudnik</reporter>
                        <labels>
                    </labels>
                <created>Fri, 1 May 2009 18:49:03 +0000</created>
                <updated>Wed, 22 Jul 2009 20:09:15 +0000</updated>
                            <resolved>Mon, 18 May 2009 18:37:13 +0000</resolved>
                                                    <fixVersion>1.0.0</fixVersion>
                                    <component>java</component>
                    <component>python</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12705649" author="cos" created="Mon, 4 May 2009 17:15:54 +0000"  >&lt;p&gt;This patch includes the following modifications:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;JUnit tests conversion to be naively executed by TestNG. This involves new annotations and inter tests dependencies introduction&lt;/li&gt;
	&lt;li&gt;some of test files for schemata were renamed and affected Java and Python code has been refactored accordingly&lt;/li&gt;
	&lt;li&gt;build.xml file is modified to accommodate TestNG switch&lt;/li&gt;
	&lt;li&gt;an extra target &apos;reports&apos; has been added to facilitate conversion of the reports produced by testng into junit format&lt;/li&gt;
	&lt;li&gt;import lists are optimized for all test classes for they included too much of unused imports which made tests refactoring difficult&lt;/li&gt;
	&lt;li&gt;new library is added  to lib/testng-5.9-jdk15.jar&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Tests invocation remain the same: it could be executed either through &apos;test&apos; for all languages or through &apos;test-java&apos; for java. Interop test interfaces are remained as before too.&lt;/p&gt;</comment>
                            <comment id="12705651" author="cos" created="Mon, 4 May 2009 17:17:53 +0000"  >&lt;p&gt;Patch has been attached for the review and comments or approval. &lt;br/&gt;
Please let me know if someone has any concerns or suggestions.&lt;/p&gt;</comment>
                            <comment id="12705690" author="cos" created="Mon, 4 May 2009 19:12:20 +0000"  >&lt;p&gt;This patch uses @BeforeMethod/@AfterMethod annotations to replace hardcoded inter-tests dependencies. &lt;/p&gt;

&lt;p&gt;With this technique the overall maintenance would be significantly lower.&lt;/p&gt;

&lt;p&gt;Consider this patch candidate instead of earlier submitted &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-26&quot; title=&quot;Converting JUnit tests into TestNG controlled environment&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-26&quot;&gt;&lt;del&gt;AVRO-26&lt;/del&gt;&lt;/a&gt;.patch&lt;/p&gt;</comment>
                            <comment id="12705704" author="cutting" created="Mon, 4 May 2009 19:36:24 +0000"  >&lt;p&gt;Overall this looks good.  A few comments:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&apos;generated&apos; is not a good name for this.  let&apos;s instead name it something like &quot;hello&quot;, &quot;simple&quot; or &quot;testProtocol&quot;.&lt;/li&gt;
	&lt;li&gt;if testng is in lib/, then we don&apos;t need testng.classpath but can just use the normal classpath.  we could instead put it in src/test/lib or somesuch.  if we do that, build.xml should not contain the full version-laden file name, but rather a version-free directory, so that we can change testng versions without editing build.xml.&lt;/li&gt;
	&lt;li&gt;we should continue to support something like &apos;ant test-java -Dtestcase=TestFoo&apos;, to permit folks to run just a single test.&lt;/li&gt;
	&lt;li&gt;i would not update the ant task descriptions to say &quot;with TestNG&quot;&lt;/li&gt;
	&lt;li&gt;do we need the taskdef in more than one place in build.xml?&lt;/li&gt;
	&lt;li&gt;the &quot;reports&quot; task should probably be named &quot;test-java-reports&quot; or &quot;test-reports&quot;.&lt;/li&gt;
	&lt;li&gt;i must be the only person in the world who likes to use asterisks in imports...&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12705742" author="cos" created="Mon, 4 May 2009 21:03:31 +0000"  >&lt;p&gt;Thanks for the comments, Doug.&lt;/p&gt;

&lt;p&gt;Couple of replies:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;TestProtocol kinda imply that other TestProtocol* classes are in a&lt;br/&gt;
sort of relation with this one, which I believe isn&apos;t true. So I went &lt;br/&gt;
with Simple&lt;/li&gt;
	&lt;li&gt;agree, this is an artifact of my own environment where testng was&lt;br/&gt;
placed separately. Fixed. It sounds like a good idea to move test &lt;br/&gt;
related libs to src/test/lib. And the version part has to be stripped. &lt;br/&gt;
However, if Avro will move toward Ivy it will be changed anyways, right?&lt;br/&gt;
Also, it seems that junit-4.5.jar sits in the lib directory as well &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
	&lt;li&gt;done, sorry I&apos;ve missed this piece of original functionality&lt;/li&gt;
	&lt;li&gt;looks like testdefs are needed in every target in case someone will&lt;br/&gt;
have to run test-interop-data-java. If testng isn&apos;t define within that &lt;br/&gt;
target then the testing will fail&lt;/li&gt;
	&lt;li&gt;test-reports it is&lt;/li&gt;
	&lt;li&gt;do you want me to revert the tests&apos; import lists? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Also, I&apos;d suggest to rename compile-java-test to compile-test-java to be &lt;br/&gt;
in line with other test related names such as test-java and so on. I did &lt;br/&gt;
it as a part of new version of the submitted patch.&lt;/p&gt;

&lt;p&gt;Cos&lt;/p&gt;
</comment>
                            <comment id="12705743" author="cos" created="Mon, 4 May 2009 21:04:02 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;generated.js is renamed to simple.js to avoid confusions&lt;/li&gt;
	&lt;li&gt;testng.classpath is removed from the build file for the jar file is the part of the project&apos;s java.classpath&lt;/li&gt;
	&lt;li&gt;an ability to specify a single testcase is added. Simple set -Dtestcase=&amp;lt;shortname_of_test&amp;gt; and will be executed&lt;/li&gt;
	&lt;li&gt;reports renamed to test-reports&lt;/li&gt;
	&lt;li&gt;compile-java-test is renamed to compile-test-java for the similarity with other test related targets&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12705746" author="cos" created="Mon, 4 May 2009 21:10:07 +0000"  >&lt;p&gt;dumpCommand=&quot;true&quot; is no longer needed in the production version of the build.xml&lt;/p&gt;</comment>
                            <comment id="12706554" author="cutting" created="Wed, 6 May 2009 18:51:18 +0000"  >&lt;p&gt;A few comments on the latest patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;we should remove lib/junit*.jar&lt;/li&gt;
	&lt;li&gt;TestValueReader has not yet been converted to testng&lt;/li&gt;
	&lt;li&gt;please attach a shell script, &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-26&quot; title=&quot;Converting JUnit tests into TestNG controlled environment&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-26&quot;&gt;&lt;del&gt;AVRO-26&lt;/del&gt;&lt;/a&gt;.sh, that can be run before the patch is applied to perform any &apos;svn mv&apos; and &apos;svn rm&apos; operations required&lt;/li&gt;
	&lt;li&gt;please attach the testng jar too.&lt;/li&gt;
	&lt;li&gt;in build.xml, the  taskdef can be moved outside the target to top-level and then need not be repeated.  (we should eventually similarly fix the py-* taskdefs.)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12706607" author="cos" created="Wed, 6 May 2009 21:47:13 +0000"  >&lt;p&gt;All comment&apos;s from Doug last review are taken into account. Namely:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;shell script is created to deal with file/folder modifications (sorry, I keep forgetting that I have no commit rights and someone else has to do this for me)&lt;/li&gt;
	&lt;li&gt;forgotten test is converted into testng format&lt;/li&gt;
	&lt;li&gt;a number of taskdef&apos;s  is reduced through pulling up one of them&lt;/li&gt;
	&lt;li&gt;jar file is attached&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12707123" author="cutting" created="Thu, 7 May 2009 21:20:35 +0000"  >&lt;p&gt;The patch looks good now.&lt;/p&gt;

&lt;p&gt;I miss JUnit&apos;s plain text output that included any print statements.  Perhaps we could add a listener that prints each test run along with its success or failure?&lt;/p&gt;</comment>
                            <comment id="12707214" author="cos" created="Fri, 8 May 2009 02:42:46 +0000"  >&lt;p&gt;Thanks for the reviews, Doug.&lt;/p&gt;

&lt;p&gt;The other day we have a short discussion about this with Nigel and I&apos;ve &lt;br/&gt;
implemented something similar to what you&apos;re asking for in another project I&apos;m &lt;br/&gt;
working on right now. I&apos;ll try to drop that piece of reporting listener to &lt;br/&gt;
Avro&apos;s test base by end of the week and send out another patch.&lt;/p&gt;

&lt;p&gt;Cos&lt;/p&gt;
</comment>
                            <comment id="12708748" author="cos" created="Wed, 13 May 2009 04:11:12 +0000"  >&lt;p&gt;This patch introduces a solution for JUnit like plain test reporting output. In order to use it one needs to modify existing listeners line of build.xml to &lt;br/&gt;
  listeners=&quot;org.apache.avro.MyOutputInterceptor, org.apache.avro.SuiteInterceptor&quot;&lt;/p&gt;

&lt;p&gt;As the result, testng runs will produce something like this (although, properly aligned)&lt;/p&gt;

&lt;p&gt;   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.TestSchema.testString                                Pass (    19 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.TestSchema.testLong                                  Pass (     4 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.TestSchema.testUnion                                 Pass (    10 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.TestSchema.testArray                                 Pass (    11 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.TestSchema.testNull                                  Pass (     1 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.TestSchema.testLisp                                  Pass (    30 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.TestSchema.testRecursive                             Pass (    75 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.TestSchema.testRecord                                Pass (     5 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.TestSchema.testFloat                                 Pass (     2 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.TestSchema.testInt                                   Pass (     1 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.TestSchema.testDouble                                Pass (     3 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.TestSchema.testMap                                   Pass (    16 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.TestSchema.testBytes                                 Pass (     3 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.TestSchema.testBoolean                               Pass (     2 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; org.apache.avro.io.TestValueReader.testEOFHandling                   Pass (     1 ms)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; AvroTestNG&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;testng&amp;#93;&lt;/span&gt; Total tests run: passed 34; failed 0; skipped 0 in 1 s.&lt;/p&gt;</comment>
                            <comment id="12709017" author="cutting" created="Wed, 13 May 2009 17:25:45 +0000"  >&lt;p&gt;This sounds nice.  &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Can you please merge your patches together, so that one need only apply a single patch to test it?&lt;/li&gt;
	&lt;li&gt;Let&apos;s call these TestInvocationReporter and TestOutputInterceptor, and put them in package org.apache.avro.test.&lt;/li&gt;
	&lt;li&gt;Should we print to System.out or System.err?  You&apos;ve done one in some places and the other in others.  We should probably be consistent.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12709028" author="cos" created="Wed, 13 May 2009 17:55:48 +0000"  >&lt;p&gt;Will merge these in a second: I felt like sending them separately in order to&lt;br/&gt;
present them separately. And renaming them totally makes sense.&lt;/p&gt;

&lt;p&gt;Wrt placement of the classes: shall we pull them off avro at all, so other&lt;br/&gt;
projects which will be coming toward testng harness will be able to reuse&lt;br/&gt;
them? Say, org.apache.hadoop.common.test ?&lt;/p&gt;

&lt;p&gt;I&apos;d vote for System.out - these are normal reporting output. System.err is&lt;br/&gt;
left there as a result of some previous experimenting. Will be gone in the&lt;br/&gt;
coming patch.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
  Cos&lt;/p&gt;
</comment>
                            <comment id="12709038" author="cutting" created="Wed, 13 May 2009 18:07:50 +0000"  >&lt;p&gt;&amp;gt; org.apache.hadoop.common.test ?&lt;/p&gt;

&lt;p&gt;Let&apos;s wait until we move them to do that.&lt;/p&gt;</comment>
                            <comment id="12709076" author="cos" created="Wed, 13 May 2009 19:09:50 +0000"  >&lt;p&gt;Output interceptors are moved to org.apache.avro.test package&lt;br/&gt;
Modifications of JSON schema are merged into the test sources&lt;/p&gt;</comment>
                            <comment id="12710439" author="cutting" created="Mon, 18 May 2009 18:37:13 +0000"  >&lt;p&gt;I just committed this.  Thanks, Konstantin.&lt;/p&gt;</comment>
                            <comment id="12732163" author="cos" created="Thu, 16 Jul 2009 21:08:11 +0000"  >&lt;p&gt;Just to give a heads-up on the status of the progress of JUnit tests conversion into TestNG in the Hadoop.&lt;/p&gt;

&lt;p&gt;It seems that Hadoop and ZooKeeper are backing off from the whole TestNG thing, because the transition&apos;s overhead is too big to bear. Please contact me directly if you &lt;/p&gt;

&lt;p&gt;The general approach for the rest of Hadoop is to keep going with JUnit framework and solve our tagging needs with JUnit&apos;s test suite mechanism.&lt;/p&gt;

&lt;p&gt;Considering the future merging of Avro to Hadoop and an obvious requirement of having a single test framework, I&apos;d suggest to think of &apos;reverse&apos; conversion of TestNG tests back to JUnit. I think a mere exclusion of the current patch won&apos;t work.&lt;/p&gt;</comment>
                            <comment id="12734273" author="cutting" created="Wed, 22 Jul 2009 19:40:29 +0000"  >&lt;p&gt;Konstantin,  can you please file a new issue to switch Avro back to JUnit?  Thanks!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12431174">AVRO-81</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12407168" name="AVRO-26.patch.1" size="30115" author="cos" created="Mon, 4 May 2009 19:12:20 +0000"/>
                            <attachment id="12407179" name="AVRO-26.patch.2" size="30944" author="cos" created="Mon, 4 May 2009 21:04:02 +0000"/>
                            <attachment id="12407181" name="AVRO-26.patch.3" size="30880" author="cos" created="Mon, 4 May 2009 21:10:07 +0000"/>
                            <attachment id="12407398" name="AVRO-26.patch.4" size="30886" author="cos" created="Wed, 6 May 2009 21:47:13 +0000"/>
                            <attachment id="12407966" name="AVRO-26.patch.5" size="5746" author="cos" created="Wed, 13 May 2009 04:11:12 +0000"/>
                            <attachment id="12408030" name="AVRO-26.patch.6" size="37919" author="cos" created="Wed, 13 May 2009 19:09:50 +0000"/>
                            <attachment id="12408029" name="AVRO-26.sh" size="649" author="cos" created="Wed, 13 May 2009 19:09:50 +0000"/>
                            <attachment id="12407399" name="testng-5.9-jdk15.jar" size="853236" author="cos" created="Wed, 6 May 2009 21:47:13 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 4 May 2009 19:36:24 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94355</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 27 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxrz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79402</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
