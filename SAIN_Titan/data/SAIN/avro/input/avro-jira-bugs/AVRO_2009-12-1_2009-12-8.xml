<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:13:05 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2009-12-1+AND+created+%3C%3D+2009-12-8+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="6" total="6"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-244] Updating gitignore for ivy jar</title>
                <link>https://issues.apache.org/jira/browse/AVRO-244</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The ivy jar was showing up in &quot;git status&quot;, but it&apos;s an expected build artifiact, so can be .gitignore&apos;d.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12442044">AVRO-244</key>
            <summary>Updating gitignore for ivy jar</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="philip">Philip Zeyliger</assignee>
                                    <reporter username="philip">Philip Zeyliger</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Dec 2009 04:46:54 +0000</created>
                <updated>Tue, 13 Dec 2011 19:06:44 +0000</updated>
                            <resolved>Wed, 10 Mar 2010 18:18:58 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12784052" author="philip" created="Tue, 1 Dec 2009 04:47:48 +0000"  >&lt;p&gt;One-line trivial patch.&lt;/p&gt;</comment>
                            <comment id="12784544" author="cutting" created="Tue, 1 Dec 2009 23:53:48 +0000"  >&lt;p&gt;In subversion this is ignored via a property on lib, rather than on the top-level directory.  We should generally align .gitignore entries and svn:ignore properties.  The command &apos;git-svn create-ignore&apos; is meant to do this.  Does that work for you?&lt;/p&gt;</comment>
                            <comment id="12843676" author="cutting" created="Wed, 10 Mar 2010 18:18:58 +0000"  >&lt;p&gt;This was fixed as a part of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-314&quot; title=&quot;Allow Avro to publish to a local m2 repository&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-314&quot;&gt;&lt;del&gt;AVRO-314&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12426498" name="AVRO-244.patch.txt" size="168" author="philip" created="Tue, 1 Dec 2009 04:47:48 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 1 Dec 2009 23:53:48 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94571</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 46 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dz53:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79623</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-245] Commandline utility for converting to and from Avro&apos;s binary format.</title>
                <link>https://issues.apache.org/jira/browse/AVRO-245</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;A utility for avrotool that can convert between Avro binary data and the JSON textual form.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12442045">AVRO-245</key>
            <summary>Commandline utility for converting to and from Avro&apos;s binary format.</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="philip">Philip Zeyliger</assignee>
                                    <reporter username="philip">Philip Zeyliger</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Dec 2009 04:49:28 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:12 +0000</updated>
                            <resolved>Wed, 30 Dec 2009 23:43:58 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12784059" author="philip" created="Tue, 1 Dec 2009 05:01:00 +0000"  >&lt;p&gt;Attaching a patch.  I put both the &quot;to&quot; and the &quot;from&quot; tools as inner classes of the same outer class.  I could be convinced that they should just be top-level classes.&lt;/p&gt;</comment>
                            <comment id="12784458" author="cutting" created="Tue, 1 Dec 2009 21:54:23 +0000"  >&lt;p&gt;Since there&apos;s no code in the containing class, I see no point to having it.  Rather we should just have JsonToBinaryTool and BinaryToJsonTool.&lt;/p&gt;

&lt;p&gt;Also, these should be more symmetric, both either taking their input from a file, from the command line or from standard input.  My preference would probably be either a named file or standard in/out if that&apos;s not provided.&lt;/p&gt;

&lt;p&gt;You&apos;re not using the container file format, but rather just a file containing a single record.  A tool that takes json lines from standard input and emits an avro data file and vice versa would be useful, no?&lt;/p&gt;

&lt;p&gt;Finally, it doesn&apos;t look like you close the file you open for write.&lt;/p&gt;</comment>
                            <comment id="12784501" author="philip" created="Tue, 1 Dec 2009 23:00:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;Since there&apos;s no code in the containing class, I see no point to having it. Rather we should just have JsonToBinaryTool and BinaryToJsonTool. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Done.  I kept both tests in the same class, because it was convenient to share constants.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also, these should be more symmetric, both either taking their input from a file, from the command line or from standard input. My preference would probably be either a named file or standard in/out if that&apos;s not provided.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Changed so that it uses a named file, and &quot;-&quot; implies stdin.  Agreed that the symmetric form looks better.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You&apos;re not using the container file format, but rather just a file containing a single record. A tool that takes json lines from standard input and emits an avro data file and vice versa would be useful, no?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Absolutely.  I&apos;m just doing these one at a time.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Finally, it doesn&apos;t look like you close the file you open for write.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good catch: I didn&apos;t close the file I opened for &lt;em&gt;read&lt;/em&gt;.  I don&apos;t think one is supposed to close System.out and System.in, so I ended up having to bifurcate the code there.&lt;/p&gt;</comment>
                            <comment id="12784514" author="cutting" created="Tue, 1 Dec 2009 23:17:08 +0000"  >&lt;p&gt;&amp;gt; I&apos;m just doing these one at a time.&lt;/p&gt;

&lt;p&gt;So do you intend to extend this tool or add a new tool for that?  I think we shouldn&apos;t encourage the generation of Avro data files that are not in the Avro data file format, so I&apos;d prefer only one tool.  Since the data file contains the schema, one&apos;s not needed on the command line.  If provided, it should be used for projection.  If reading json input, one datum per line, and no schema is provided on the command line then the first line of the file could be assumed to be the schema.&lt;/p&gt;</comment>
                            <comment id="12784522" author="philip" created="Tue, 1 Dec 2009 23:27:31 +0000"  >&lt;p&gt;I intend to write a separate tool for data files.  (And, yes, that record would only need the schema for projection.)&lt;/p&gt;

&lt;p&gt;I&apos;m mainly interested in exposing this as (a) a way for folks to learn and understand the encoding, in a hands-on fashion, (b) a way to debug a stream of bytes that are typically part of a greater whole (one value in a sequencefile, part of a tcpdump, etc), and (c) as a step in sending arbitrary RPCs around.&lt;/p&gt;</comment>
                            <comment id="12784531" author="cutting" created="Tue, 1 Dec 2009 23:35:36 +0000"  >&lt;p&gt;Hmm.  I don&apos;t see that folks often have independent binary bits of a file or a tcp dump in a file.  And I fear that folks will use this as a generic tool for reading/writing Avro data to files, which it should not be.  Am I too paranoid?&lt;/p&gt;</comment>
                            <comment id="12784539" author="philip" created="Tue, 1 Dec 2009 23:50:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;Am I too paranoid?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes?&lt;/p&gt;

&lt;p&gt;As you&apos;ve said, the essential kernel of Avro is to read/write binary data based on a json schema.  That&apos;s exposed enough in the Java APIs, and there&apos;s little reason not to expose it on the command line.&lt;/p&gt;

&lt;p&gt;I understand that you&apos;re concerned about people leaving schemaless files around.  We can add a warning in the description, perhaps.  Because the tool works on individual records only, I don&apos;t think folks will shoot themselves in the foot too much.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12784549" author="cutting" created="Wed, 2 Dec 2009 00:03:12 +0000"  >&lt;p&gt;My paranoia aside, I have a much harder time time imagining use cases for this than I do for a data file tool.  I am not in the habit of grabbing random binary portions of files or packets and trying to decode them, nor can I imagine that others are.  I am interested in rendering a binary data file as text.  I think the tool named binary_to_json should operate on data files.  Perhaps we might support a binary_data_fragment_to_json, but I&apos;d much rather see the data file utility first.  As you mention, if folks really have a binary fragment, they can use the java or some other API, but I don&apos;t see a command-line shell tool use case for this.&lt;/p&gt;</comment>
                            <comment id="12784558" author="philip" created="Wed, 2 Dec 2009 00:16:06 +0000"  >&lt;p&gt;I&apos;m fine with &quot;binary_fragment_to_json&quot;.  Feel free to do the regexp on the patch.&lt;/p&gt;

&lt;p&gt;Only time will tell, but I&apos;m willing to bet (you know, a milkshake, perhaps) that folks will store avro data in non-condoned file formats.  Like databases (either RDBMS or key-value like BDB) or SequenceFiles, or whatever.  Someone on the user list just asked about this recently, too.&lt;/p&gt;

&lt;p&gt;If you&apos;d prefer to wait for a data file reader/writer to check this in, we could have had one written already &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12784559" author="philip" created="Wed, 2 Dec 2009 00:20:27 +0000"  >&lt;p&gt;BTW, I&apos;m annoyed at talking about it, so I&apos;m writing the &quot;avrocat&quot; tool right now.&lt;/p&gt;</comment>
                            <comment id="12784571" author="cutting" created="Wed, 2 Dec 2009 00:51:01 +0000"  >&lt;p&gt;&amp;gt; BTW, I&apos;m annoyed at talking about it, so I&apos;m writing the &quot;avrocat&quot; tool right now. &lt;/p&gt;

&lt;p&gt;It worked!&lt;/p&gt;</comment>
                            <comment id="12785544" author="philip" created="Thu, 3 Dec 2009 21:37:45 +0000"  >&lt;p&gt;Ok, I&apos;ve added &quot;data_file_read&quot; and &quot;data_file_write&quot;; also &quot;data_file_get_schema&quot;.  I didn&apos;t do the thing where the schema is the first line (in part because I want that to be turn-offable, and we need commandline parsing for that).  I&apos;ve renamed the json_to_binary tool to json_to_binary_fragment.&lt;/p&gt;

&lt;p&gt;I added two classes to hold some utilities, Tool/Util.java, and TestingUtil.java, for tiny things that made sense.  (It&apos;s future work to use them more widely, but I didn&apos;t want to clutter this patch.)  I wanted to name the second one TestUtil, but then junit would run it.  Even so, I had to update build.xml to only include tests for filenames Test&lt;span class=&quot;error&quot;&gt;&amp;#91;A-Z&amp;#93;&lt;/span&gt;* (instead of Test*), but I figure that&apos;s alright.  I&apos;m very open to other naming suggestions.&lt;/p&gt;

&lt;p&gt;If folks prefer, I could break up the data_file and the data_fragment stuff across two JIRAs.&lt;/p&gt;

&lt;p&gt;For now, I&apos;m continuing to do tests both in Java and in the shell script.  That&apos;s getting a bit tiresome, admittedly.&lt;/p&gt;

&lt;p&gt;Here&apos;s what the set of tool commands are with this change:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;$/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bin/java -jar /Users/philip/src/avro/build/avroj-1.2.0-dev.jar 
Available tools:
binary_fragment_to_json  Converts binary data to JSON.
                compile  Generates Java code for the given schema.
   data_file_get_schema  Prints out schema of an Avro data file.
         data_file_read  Dumps the contents of an Avro data file as JSON, one record per line.
        data_file_write  Reads in JSON (one record per line), and writes to an avro data file.
                 induce  Use reflection to induce a schema from a class or a protocol from an interface.
json_to_binary_fragment  Converts text data to an Avro binary fragment.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-160&quot; title=&quot;file format should be friendly to streaming&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-160&quot;&gt;&lt;del&gt;AVRO-160&lt;/del&gt;&lt;/a&gt; was very noticeable when I wrote &quot;data_file_read&quot;, since you can&apos;t read an avro data file from stdin: you need something seekable.&lt;/p&gt;</comment>
                            <comment id="12785652" author="cutting" created="Thu, 3 Dec 2009 23:56:20 +0000"  >&lt;p&gt;I think you attached the old version of the patch.&lt;/p&gt;</comment>
                            <comment id="12785654" author="philip" created="Thu, 3 Dec 2009 23:59:39 +0000"  >&lt;p&gt;Whoops, got my JIRA numbers confused.  Here&apos;s hopefully the updated version.&lt;/p&gt;</comment>
                            <comment id="12787682" author="cutting" created="Tue, 8 Dec 2009 19:25:42 +0000"  >&lt;p&gt;I hacked on this patch some last week.  Changes I made:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the build.xml change you made didn&apos;t work: i think ant uses glob-like patterns, not regex.  instead i just named the file AvroTestUtil.java.&lt;/li&gt;
	&lt;li&gt;i used more generic types for local variables when possible, e.g., Encoder rather than JsonEncoder, etc.&lt;/li&gt;
	&lt;li&gt;the NullDatumReader in GetSchemaTool wasn&apos;t needed. GenericDatumReader could be used.&lt;/li&gt;
	&lt;li&gt;tried hard to not create new json decoder or encoders per line in DataFile read/write tools since these are not lightweight.  in the reader we need a reliable precise way of detecting EOF from an decoder.  perhaps it should be fixed to throw EOFException, or perhaps the tool should keep track of its position in the input and stop when it reaches the end.  in the writer there seems to be a bug in Jackson that emits an extra space.  we should pursue this and figure out what&apos;s going on, since we need these tools to perform reasonably well.  the patch attached passes tests and creates fewer objects, but this area still needs more work i fear.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12790536" author="philip" created="Tue, 15 Dec 2009 02:58:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;i think ant uses glob-like patterns, not regex. instead i just named the file AvroTestUtil.java.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Cool.  I intended &lt;span class=&quot;error&quot;&gt;&amp;#91;A-Z&amp;#93;&lt;/span&gt;* to be glob, not regex, and I thought it worked locally, but perhaps I was deluding myself.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;// FIXME: re-create encoder to avoid extra spaces (Jackson bug?)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this comment isn&apos;t quite enough to figure out what the fix-me is implying.  What&apos;s your TODO/FIXME convention?  (Perhaps that comment was intended for yourself, and intended to never be committed.)&lt;/p&gt;

&lt;p&gt;I wandered into the Jackson code when I ran into this, and it&apos;s reasonably set up to write one JSON object, and we&apos;re writing many.  So I don&apos;t think they&apos;d say it was a bug: I think they&apos;d say we should use a different JsonGenerator for every bit of JSON we write.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;      while (true) {
        try {
          datum = reader.read(null, decoder);
        } catch (AvroRuntimeException e) {            // FIXME: at EOF
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It bugs me that this works.  The example it ought to fail is (json-data) &quot;1 2 3\n&quot; (note: no newlines between records) against schema &quot;int&quot;.  This ought to throw an error.&lt;/p&gt;

&lt;p&gt;The core issue is that we&apos;ve got two different things going on: we&apos;re both line-oriented and JSON-oriented.  We should check that the JSON on every line is well-formed, and the code fails to.  (My original code was broken too: when I wrote the test, it didn&apos;t throw an error for the malformed data; just read one entry and went on; also StringInputStream was from ant, which shouldn&apos;t even be on avroj&apos;s classpath.)&lt;/p&gt;

&lt;p&gt;One way to avoid this mess is to require that the input file be a JSON array.  So &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;1, 2, 3&amp;#93;&lt;/span&gt;&quot; (with arbitrary whitespace).  I think this makes it harder to use line-oriented unix tools with this, but it does solve both problems.  What do you think?  &lt;/p&gt;

&lt;p&gt;It also worries me every time JsonDecoder calls &quot;in.nextToken();&quot; without checking that the value it got was expected (typically &quot;null&quot; or possibly END_ARRAY or END_OBJECT).  It doesn&apos;t seem that using the ValidatingDecoder makes it check that, but i could be wrong.&lt;/p&gt;
</comment>
                            <comment id="12790857" author="cutting" created="Tue, 15 Dec 2009 18:14:04 +0000"  >&lt;p&gt;&amp;gt; What&apos;s your TODO/FIXME convention?&lt;/p&gt;

&lt;p&gt;I don&apos;t have a strong convention.  Do you?&lt;/p&gt;

&lt;p&gt;What I meant here is that creating a new encoder per datum is unacceptable.  A JsonEncoder compiles the schema as a grammar and is meant to be reused.  Jackson&apos;s JsonGenerator is reusable, but unfortunately inserts a space before all but the first item for some unknown reason that is at least a misfeature for our purposes.  Looking at the thrift-protobuf-compare benchmarks, they do create a new JsonGenerator per datum, so they must be lightweight.  But we still need to avoid re-compiling the grammer per datum.&lt;/p&gt;

&lt;p&gt;&amp;gt; The core issue is that we&apos;ve got two different things going on: we&apos;re both line-oriented and JSON-oriented.&lt;/p&gt;

&lt;p&gt;You&apos;re right.  I munged this together.&lt;/p&gt;

&lt;p&gt;So we perhaps should consider lines the container, parsing them first, then parsing json within them, as your patch did.  But we should not create a new Decoder per line, since it also compiles the grammar.&lt;/p&gt;

&lt;p&gt;To address both of these, perhaps we should add methods:&lt;/p&gt;

&lt;p&gt;static Parser JsonEncoder#parse(Schema);&lt;br/&gt;
JsonEncoder(Parser, OutputStream);&lt;br/&gt;
static Parser JsonDecoder#parse(Schema);&lt;br/&gt;
JsonDecoder(Parser, InputStream);&lt;/p&gt;

&lt;p&gt;Then we could create the parser once outside the loop and then re-create lightweight objects within the loop and hope that doesn&apos;t hurt performance much. My first choice would be to make encoders and decoders reusable, but that does not appear possible currently with Jackson.&lt;/p&gt;

&lt;p&gt;&amp;gt; It doesn&apos;t seem that using the ValidatingDecoder makes it check that, but i could be wrong.&lt;/p&gt;

&lt;p&gt;I believe that the Json tokens are actually strictly checked.&lt;/p&gt;</comment>
                            <comment id="12792020" author="cutting" created="Thu, 17 Dec 2009 17:33:56 +0000"  >&lt;p&gt;Here&apos;s a new version that fixes things so that we can catch EOFException rather than AvroTypeException when attempting to read a JsonDecoder past EOF.&lt;/p&gt;</comment>
                            <comment id="12792299" author="philip" created="Fri, 18 Dec 2009 02:18:38 +0000"  >&lt;p&gt;Attaching a new version of the patch.&lt;/p&gt;

&lt;p&gt;The utilities have been given shorter names (see below).  &lt;/p&gt;

&lt;p&gt;The debate about how to deal with newlines actually had an elegant solution: we simply read in JSON records, no matter how they&apos;re delimited.  So &quot;1 2 3&quot; and &quot;1\n2\n3\n&quot; would be read in the same way.  Newline is still standard (and used by the &quot;tojson&quot; tool), but no need to special case it.  Furthermore. parser.init() is called at every record to reset the JsonGenerator, which was causing extra spaces to occur.&lt;/p&gt;

&lt;p&gt;This patch also inserted a bunch of checkEof() methods in JsonParser.  Ideally those wouldn&apos;t need to be at every line, but, practically, it turns out that parser.advance() calls back into JsonParser, which calls in.nextToken().  An alternative is to just ignore partial records at the end of files.  That has fewer ugly lines.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Available tools:
   compile  Generates Java code for the given schema.
fragtojson  Converts binary data to JSON.
  fromjson  Reads in JSON (one record per line), and writes to an avro data file.
 getschema  Prints out schema of an Avro data file.
    induce  Use reflection to induce a schema from a class or a protocol from an interface.
jsontofrag  Converts text data to an Avro binary fragment.
    tojson  Dumps the contents of an Avro data file as JSON, one record per line.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12793388" author="philip" created="Mon, 21 Dec 2009 22:19:09 +0000"  >&lt;p&gt;Ping?&lt;/p&gt;</comment>
                            <comment id="12795400" author="philip" created="Wed, 30 Dec 2009 19:23:23 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-263&quot; title=&quot;avroj tools should return exit codes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-263&quot;&gt;&lt;del&gt;AVRO-263&lt;/del&gt;&lt;/a&gt; required minor modifications (adding return values) to this patch.  Trivial update to the patch.&lt;/p&gt;

&lt;p&gt;(For my own confusion-keeping, this is d6d16d19ab07dbc167797eea05c3b2d09c740a10).&lt;/p&gt;</comment>
                            <comment id="12795486" author="cutting" created="Wed, 30 Dec 2009 23:20:17 +0000"  >&lt;p&gt;Here&apos;s a version of this that, instead of adding a checkEof() call in each method prior to the call to parser.advance(), adds an advance() method that checks for EOF and then calls parser.advance().&lt;/p&gt;</comment>
                            <comment id="12795491" author="philip" created="Wed, 30 Dec 2009 23:27:37 +0000"  >&lt;p&gt;+1.  Works for me.&lt;/p&gt;</comment>
                            <comment id="12795495" author="cutting" created="Wed, 30 Dec 2009 23:43:58 +0000"  >&lt;p&gt;I just committed this.  Thanks, Philip!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12429181" name="AVRO-245.patch" size="35165" author="cutting" created="Wed, 30 Dec 2009 23:20:17 +0000"/>
                            <attachment id="12428310" name="AVRO-245.patch" size="27175" author="cutting" created="Thu, 17 Dec 2009 17:33:56 +0000"/>
                            <attachment id="12427370" name="AVRO-245.patch" size="26457" author="cutting" created="Tue, 8 Dec 2009 19:25:42 +0000"/>
                            <attachment id="12429157" name="AVRO-245.patch.txt" size="35668" author="philip" created="Wed, 30 Dec 2009 19:23:23 +0000"/>
                            <attachment id="12428391" name="AVRO-245.patch.txt" size="35548" author="philip" created="Fri, 18 Dec 2009 02:18:37 +0000"/>
                            <attachment id="12426849" name="AVRO-245.patch.txt" size="27226" author="philip" created="Thu, 3 Dec 2009 23:59:39 +0000"/>
                            <attachment id="12426815" name="AVRO-245.patch.txt" size="10137" author="philip" created="Thu, 3 Dec 2009 21:37:45 +0000"/>
                            <attachment id="12426596" name="AVRO-245.patch.txt" size="10137" author="philip" created="Tue, 1 Dec 2009 23:02:09 +0000"/>
                            <attachment id="12426500" name="AVRO-245.patch.txt" size="8229" author="philip" created="Tue, 1 Dec 2009 05:01:00 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 1 Dec 2009 21:54:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94572</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 4 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dz5b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79624</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-246] Java schema parser should take schema from InputStream in addition to file</title>
                <link>https://issues.apache.org/jira/browse/AVRO-246</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Accepting the schema from an InputStream (in addition to the current File) enables many use-cases like taking schema from a resource in a jar file.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12442090">AVRO-246</key>
            <summary>Java schema parser should take schema from InputStream in addition to file</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thiru_mg">Thiruvalluvan M. G.</assignee>
                                    <reporter username="thiru_mg">Thiruvalluvan M. G.</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Dec 2009 13:26:50 +0000</created>
                <updated>Tue, 13 Dec 2011 19:06:50 +0000</updated>
                            <resolved>Wed, 9 Dec 2009 07:43:59 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12786794" author="thiru_mg" created="Mon, 7 Dec 2009 06:03:21 +0000"  >&lt;p&gt;This patch addresses the problem. Though I could have made Jackson accept java.io.File directly in File version of parse, I decided to delegate to to InputStream version so that there is no duplication of try/catch.&lt;/p&gt;</comment>
                            <comment id="12787145" author="cutting" created="Mon, 7 Dec 2009 21:59:47 +0000"  >&lt;p&gt;The advantage of passing the File directly to Jackson is that Jackson can then generate error messages that include the file name and line number.&lt;/p&gt;</comment>
                            <comment id="12787464" author="thiru_mg" created="Tue, 8 Dec 2009 13:50:48 +0000"  >&lt;p&gt;Good point Doug.  Restored parse(File) to the original.&lt;/p&gt;</comment>
                            <comment id="12787639" author="cutting" created="Tue, 8 Dec 2009 18:43:14 +0000"  >&lt;p&gt;+1 This looks good.  Can you also please add a simple javadoc comment, stating something like, &quot;Construct a Schema from JSON text.&quot;  The parse(File) method also needs similar javadoc.&lt;/p&gt;</comment>
                            <comment id="12787955" author="thiru_mg" created="Wed, 9 Dec 2009 07:43:59 +0000"  >&lt;p&gt;Committed revision 888720 after adding comments and a test.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12427337" name="AVRO-246.patch" size="928" author="thiru_mg" created="Tue, 8 Dec 2009 13:50:48 +0000"/>
                            <attachment id="12427141" name="AVRO-246.patch" size="914" author="thiru_mg" created="Mon, 7 Dec 2009 06:03:21 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 7 Dec 2009 21:59:47 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94573</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 7 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dz5j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79625</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-247] Broken test: org.apache.avro.TestDataFile$InteropTest.testGeneratedReflect()</title>
                <link>https://issues.apache.org/jira/browse/AVRO-247</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The current trunk has a broken java-interop test.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12442130">AVRO-247</key>
            <summary>Broken test: org.apache.avro.TestDataFile$InteropTest.testGeneratedReflect()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="philip">Philip Zeyliger</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Dec 2009 19:19:38 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:12 +0000</updated>
                            <resolved>Tue, 8 Dec 2009 19:39:46 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12784348" author="philip" created="Tue, 1 Dec 2009 19:20:05 +0000"  >&lt;p&gt;&quot;ant test-interop-java&quot; triggers it; here&apos;s the relevant exception:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;$cat build/test/TEST*Interop*
Testsuite: org.apache.avro.TestDataFile$InteropTest
Tests run: 3, Failures: 0, Errors: 1, Time elapsed: 0.461 sec
------------- Standard Output ---------------
Reading test.java.avro
Reading test.py.avro
Reading test.java.avro
Reading test.py.avro
Reading test.java.avro
------------- ---------------- ---------------

Testcase: testGeneratedGeneric took 0.274 sec
Testcase: testGeneratedSpecific took 0.128 sec
Testcase: testGeneratedReflect took 0.03 sec
    Caused an ERROR
Can not set org.apache.avro.util.Utf8 field org.apache.avro.Interop.stringField to java.lang.String
java.lang.IllegalArgumentException: Can not set org.apache.avro.util.Utf8 field org.apache.avro.Interop.stringField to java.lang.String
    at java.lang.reflect.Field.set(Field.java:657)
    at org.apache.avro.reflect.ReflectDatumReader.addField(ReflectDatumReader.java:53)
    at org.apache.avro.generic.GenericDatumReader.readRecord(GenericDatumReader.java:154)
    at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:72)
    at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:61)
    at org.apache.avro.file.DataFileReader.next(DataFileReader.java:143)
    at org.apache.avro.TestDataFile.readFile(TestDataFile.java:133)
    at org.apache.avro.TestDataFile$InteropTest.readFiles(TestDataFile.java:171)
    at org.apache.avro.TestDataFile$InteropTest.testGeneratedReflect(TestDataFile.java:165)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12784377" author="cutting" created="Tue, 1 Dec 2009 19:51:50 +0000"  >&lt;p&gt;This test is using a schema generated via reflection to process data written with a different, incompatible schema.  The reflected schema includes a record named org.apache.avro.util.Utf8 that contains a byte[] field where the schema in the file contains simply &quot;string&quot;.  Perhaps to fix this we should add an @Stringable annotation used by reflection that indicates that a class should be represented by an Avro string. The toString() method can be used to write instances, and its one-String-argument constructor can be used when reading.  Then the specific generator can add this annotation, so specific data can be correctly reflected.  Does this make sense?&lt;/p&gt;

&lt;p&gt;Another alternative would be to abandon Utf8 in specific and reflect, but that would compromise performance, since not only can Java strings not be reused, but they force UTF-8 processing on creation rather than permitting it to be delayed until a Java String is needed.&lt;/p&gt;</comment>
                            <comment id="12784389" author="cutting" created="Tue, 1 Dec 2009 20:12:10 +0000"  >&lt;p&gt;Note that reflection would need &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-242&quot; title=&quot;add support for per-schema metadata&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-242&quot;&gt;&lt;del&gt;AVRO-242&lt;/del&gt;&lt;/a&gt; to annotate the schema with the class that implements the string, so that it knows what to create.&lt;/p&gt;</comment>
                            <comment id="12784395" author="philip" created="Tue, 1 Dec 2009 20:22:17 +0000"  >&lt;p&gt;It seems that the same way that we special case reflection to stop at java.lang.*, we should perhaps special case it to stop at org.apache.avro.util.Utf8?  Alternately, wouldn&apos;t the @Stringable annotation go on the UTF8 class?&lt;/p&gt;

&lt;p&gt;It does seem desirable that generated code is able to work with the reflection API.&lt;/p&gt;</comment>
                            <comment id="12784406" author="cutting" created="Tue, 1 Dec 2009 20:36:32 +0000"  >&lt;p&gt;&amp;gt; wouldn&apos;t the @Stringable annotation go on the UTF8 class?&lt;/p&gt;

&lt;p&gt;Oops.  You&apos;re right.  The specific code generator would not need to be changed.&lt;/p&gt;

&lt;p&gt;&amp;gt; we should perhaps special case it to stop at org.apache.avro.util.Utf8&lt;/p&gt;

&lt;p&gt;The problem with having it stop is that you may not read or write critical fields.  For exceptions in reflected protocols this may be okay, since they have null constructors and mostly don&apos;t contain critical data.  But for, e.g., org.apache.hadoop.io.Path, we currently skip its nested java.lang.URI, which is a bug.  Rather we should annotate Path with @Stringable.&lt;/p&gt;</comment>
                            <comment id="12784416" author="philip" created="Tue, 1 Dec 2009 20:53:57 +0000"  >&lt;p&gt;&amp;gt; Rather we should annotate Path with @Stringable.&lt;/p&gt;

&lt;p&gt;Agreed.  The most general case will be an annotation like @AvroConverter(SomeConverter.class).  Besides String, using something for Fixed(4) is also going to crop up.  (Checksums are fixed64, whereas a lot of other things are varint.)&lt;/p&gt;</comment>
                            <comment id="12787138" author="cutting" created="Mon, 7 Dec 2009 21:49:38 +0000"  >&lt;p&gt;Here&apos;s a patch that defines a Stringable annotation and adds a test for it.&lt;/p&gt;

&lt;p&gt;It also fixes the interop test, but unfortunately not by using the Stringable annotation, but rather by commenting out the failing test case.  This bug was created when specific and reflect diverged in their representation of Avro strings.  Specific uses Utf8 while reflect uses java.lang.String.  The generated specific code has a field whose type is Utf8 that we cannot assign a java.lang.String to.  We could define a version of Interop.java for reflect, but then we&apos;d need to load it with a different class loader.  I don&apos;t think this is worthwhile.  Testing interoperability of specific and generic with python, c, etc. is sufficient.  Thoughts?&lt;/p&gt;</comment>
                            <comment id="12787664" author="philip" created="Tue, 8 Dec 2009 19:06:35 +0000"  >&lt;p&gt;+1.&lt;/p&gt;

&lt;p&gt;In testR10, it would be reasonable to check &apos;assertEquals(&quot;...R10&quot;, r10schema.getProperty(CLASS_PROP))&apos;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;c.isAnnotationPresent(Stringable.class)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For fail-fast, it might be good to check that c has a single string constructor.  Obviously, the class reading might be totally different, but seems like this would catch errors in the common case.  Up to you.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Interop.java&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m ok with having generated code not work with the reflection interface.  You could, again, use annotations to make that work.  (@Utf8able on the Utf8 class, so that Avro reflection understands both String and Utf8 might work.)  But I&apos;m ok with it just not working.&lt;/p&gt;</comment>
                            <comment id="12787698" author="cutting" created="Tue, 8 Dec 2009 19:39:46 +0000"  >&lt;p&gt;I added the test Philip suggested and committed this.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12441720">AVRO-242</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12427239" name="AVRO-247.patch" size="9919" author="cutting" created="Mon, 7 Dec 2009 21:49:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 1 Dec 2009 19:51:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94574</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 7 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dz5r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79626</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-248] make unions a named type</title>
                <link>https://issues.apache.org/jira/browse/AVRO-248</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Unions are currently anonymous.  However it might be convenient if they were named.  In particular:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;when code is generated for a union, a class could be generated that includes an enum indicating which branch of the union is taken, e.g., a union of string and int named Foo might cause a Java class like 
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Foo {
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; Type {STRING, INT};
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Type type;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; datum;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Type getType();
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; getString() { &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (type==STRING) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)datum; &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; ... }
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setString(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; s) { type = STRING;  datum = s; }
  ....
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; Then Java applications can easily use a switch statement to process union values rather than using instanceof.&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;when using reflection, an abstract class with a set of concrete implementations can be represented as a union (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-241&quot; title=&quot;add union annotation to reflect API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-241&quot;&gt;&lt;del&gt;AVRO-241&lt;/del&gt;&lt;/a&gt;).  However, if one wishes to create an array one must know the name of the base class, which is not represented in the Avro schema.  One approach would be to add an annotation to the reflected array schema (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-242&quot; title=&quot;add support for per-schema metadata&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-242&quot;&gt;&lt;del&gt;AVRO-242&lt;/del&gt;&lt;/a&gt;) noting the base class.  But if the union itself were named, that could name the base class.  This would also make reflected protocol interfaces more consise, since the base class name could be used in parameters return types and fields.&lt;/li&gt;
	&lt;li&gt;Generalizing the above: Avro lacks class inheritance, unions are a way to model inheritance, and this model is more useful if the union is named.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This would be an incompatible change to schemas.  If we go this way, we should probably rename 1.3 to 2.0.  Note that &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-160&quot; title=&quot;file format should be friendly to streaming&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-160&quot;&gt;&lt;del&gt;AVRO-160&lt;/del&gt;&lt;/a&gt; proposes an incompatible change to data file formats, which may also force a major release.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12442136">AVRO-248</key>
            <summary>make unions a named type</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Dec 2009 19:35:30 +0000</created>
                <updated>Thu, 16 Sep 2010 00:27:25 +0000</updated>
                                                                            <component>spec</component>
                        <due></due>
                            <votes>3</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="12784376" author="philip" created="Tue, 1 Dec 2009 19:51:20 +0000"  >&lt;p&gt;I like naming unions.  So, +1 to the general idea.&lt;/p&gt;

&lt;p&gt;Should we name the branches of the union?  i.e., a union is pretty much the same as a record, except instead of all the fields being set, exactly one field is set.  Admittedly, the names would often be boring, but that&apos;s true anyway.  FWIW, Thrift unions (&lt;a href=&quot;http://issues.apache.org/jira/browse/THRIFT-409&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/THRIFT-409&lt;/a&gt;) support that syntax.  It would be sensible if unions and records were to have the same syntax, except for the &quot;type&quot;.&lt;/p&gt;

&lt;p&gt;We could easily enough continue supporting anonymous unions (for backwards compatibility), but, yes this would be an incompatible change.&lt;/p&gt;</comment>
                            <comment id="12784380" author="cutting" created="Tue, 1 Dec 2009 19:55:28 +0000"  >&lt;p&gt;Unions are currently only permitted to contain one branch of any unnamed type.  So branch names can be type names.  This permits implementations that don&apos;t use an explicit union representation to easily find the matching branch at runtime.  I don&apos;t see any need to remove this restriction (does it ever make sense to have two, distinct string branches?) so, given that, i don&apos;t see a need to name branches.&lt;/p&gt;</comment>
                            <comment id="12784381" author="cutting" created="Tue, 1 Dec 2009 19:56:44 +0000"  >&lt;p&gt;To be concrete, what I propose as a union syntax is something like:&lt;/p&gt;
  { &quot;type&quot;: &quot;union&quot;, &quot;name&quot;: &quot;Foo&quot;, &quot;branches&quot;: [&quot;string&quot;, &quot;Bar&quot;, ... ] }</comment>
                            <comment id="12784392" author="philip" created="Tue, 1 Dec 2009 20:14:44 +0000"  >&lt;p&gt;I could go both ways.  &lt;/p&gt;

&lt;p&gt;(Yes, names!) Say we had a &quot;host&quot; record. That might be a union of &quot;hostname&quot; (string) or &quot;IP address&quot; (a record).  I would rather see the code say getHostname() rather than getString().  You can get around this by creating a Hostname record, but then it would be getHostname().getHostname(), since records always have field names.  The restriction to contain only one branch of any unnamed type could be relaxed.  Sometimes the &quot;type&quot; of two things is the same, and should be a primitive type, but they&apos;re different.  I&apos;m struggling to come up with a great example, but perhaps a date could be expressed as &quot;days since 1900&quot; (Excel style) or &quot;days since the epoch&quot;.  Both are ints.&lt;/p&gt;

&lt;p&gt;(No names!) In Java, half the time the names of fields are boring.  Fields are called &quot;outputStream&quot; and have type &quot;OutputStream&quot;, and, really, did we need both?&lt;/p&gt;

&lt;p&gt;In Avro&apos;s case, especially because unions are the way to implement nullable fields, name-less is pretty convincing.&lt;/p&gt;</comment>
                            <comment id="12784427" author="cutting" created="Tue, 1 Dec 2009 21:05:57 +0000"  >&lt;p&gt;The nullable field use case for unions makes me want to continue to permit anonymous unions.  An implementation could mostly ignore union names, except in resolving references to them while parsing schemas and protocols.  But an implementation might, if a name is provided for a union, represent it as an explicit type, or not (if it&apos;s anonymous).  So Java&apos;s specific implementation would only generate a class if a union is named, and use runtime typing for anonymous unions.  Does that sound reasonable?&lt;/p&gt;</comment>
                            <comment id="12784475" author="philip" created="Tue, 1 Dec 2009 22:21:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;Does that sound reasonable?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes.&lt;/p&gt;</comment>
                            <comment id="12784604" author="thiru_mg" created="Wed, 2 Dec 2009 03:14:36 +0000"  >&lt;p&gt;Talking about names, the current specification that records, enums and fixed (and now unions) are named seems somewhat arbitrary. Names serve two main purposes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Named entities can be reused elsewhere in the schema&lt;/li&gt;
	&lt;li&gt;Names are used to differentiate branches in unions&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Strictly speaking names are not required if things if these situations do not occur.&lt;/p&gt;

&lt;p&gt;The third use of name is in code generation. If we can somehow handle the code generation part, I&apos;d propose that we make names completely optional.&lt;/p&gt;

&lt;p&gt;Also, one should be able to name the other non-primitive types - arrays and maps. The names for arrays and maps are of not much use for reuse, but very useful in unions. Today, one cannot have a union of int arrays and string arrays. One could argue that the same effect can be achieved by having an array of unions of int and string. But they are not the same. Array of unions is actually an heterogeneous array - some elements can be ints and some other strings.&lt;/p&gt;

&lt;p&gt;In summary, I propose we make all compound types named, but make names optional for all of them.&lt;/p&gt;

&lt;p&gt;I like Doug&apos;s new syntax for unions. The earlier way to implicitly specifying unions by a JSON array was not intuitive. If we make names optional and support both old and new syntax for unions, the change will not break the old schemas. But I suggest we withdraw support for the old syntax to keep the specification clean.&lt;/p&gt;</comment>
                            <comment id="12784972" author="cutting" created="Wed, 2 Dec 2009 19:40:27 +0000"  >&lt;p&gt;&amp;gt; Also, one should be able to name the other non-primitive types - arrays and maps.&lt;/p&gt;

&lt;p&gt;Note that one can name anything by wrapping it in a one-field record.  This adds no storage overhead and permits things to be used in a union.  This technique can be used to name unions too.  However this may not result in the simplest access from programs.&lt;/p&gt;

&lt;p&gt;I&apos;m hesitant to make sweeping incompatible changes to schemas unless they provide clear end-user advantages that cannot be had in other ways.&lt;/p&gt;

&lt;p&gt;Naming unions may not be required.  For example, if we simply change the syntax for unions to:&lt;/p&gt;

 { &quot;type&quot;: &quot;union&quot;, &quot;branches&quot;: [&quot;string&quot;, &quot;Bar&quot;, ... ] }

&lt;p&gt;then &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-214&quot; title=&quot;Add feature matrix to documentation detailing the state of implementation of the spec for each language implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-214&quot;&gt;AVRO-214&lt;/a&gt;&apos;s schema annotations might be sufficient.  For example, one might use an annotation like:&lt;/p&gt;

 { &quot;type&quot;: &quot;union&quot;, &quot;branches&quot;: [&quot;string&quot;, &quot;Bar&quot;, ... ] , &quot;java-class&quot;: &quot;org.foo.FooUnion&quot;}

&lt;p&gt;This would tell Java to use a FooUnion to represent this.&lt;/p&gt;</comment>
                            <comment id="12785041" author="philip" created="Wed, 2 Dec 2009 22:54:05 +0000"  >&lt;p&gt;BTW, I came up with another argument for named union branches while thinking about the python implementation yesterday.  In python, you&apos;re not supposed to ever use instanceof.  Say you have two record types, A, and B, with A having fields a,b, c, and B having fields a,b,c,d.  In pythonic theory, you&apos;re supposed to take the object you&apos;re dealing with, and, to see if it&apos;s an instance of A, just see if it has fields &quot;a&quot;, &quot;b&quot;, and &quot;c&quot; using getattr.  Voila, it&apos;s an instance of A.  Of course, for all we know, it was actually an instance of B.  Because of this, you&apos;d have to annotate every non-primitive with it&apos;s avro type, and, moreover, you&apos;d have to make sure you can always distinguish between primitive types (string, unicode and bytes are the most irksome here).  It&apos;s do-able, but can lead to some confusing situations.&lt;/p&gt;

&lt;p&gt;Just wanted to throw this out there.  I still think both approaches have disadvantages.&lt;/p&gt;</comment>
                            <comment id="12794273" author="tlipcon" created="Wed, 23 Dec 2009 23:28:29 +0000"  >&lt;p&gt;I am strongly pro-naming. &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-266&quot; title=&quot;Union as java.lang.Object prevents object reuse&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-266&quot;&gt;AVRO-266&lt;/a&gt; (object reuse for deserializing unions) is another reason that having names for unions makes sense.&lt;/p&gt;

&lt;p&gt;As for nullability, I agree that we definitely don&apos;t want to force type names on all nullable fields. Anonymous unions are one solution, but special-casing nullability in schemas doesn&apos;t seem entirely wrong to me either...&lt;/p&gt;

&lt;p&gt;As for naming other types, is a typedef construct useful? This would solve the union-of-arrays issue as well as some others. To give a concrete example, imagine an MR job where we want to aggregate over both users and products. Users and products are both represented by their database IDs. I&apos;d want to write:&lt;/p&gt;

&lt;p&gt;{&quot;type&quot;: &quot;union&quot;, &quot;branches&quot;: [&lt;/p&gt;
{&quot;name&quot;: &quot;user_id&quot;, &quot;type&quot;: &quot;int&quot;}
&lt;p&gt;, &lt;/p&gt;
{&quot;name&quot;: &quot;product_id&quot;, &quot;type&quot;: &quot;int&quot;}
&lt;p&gt;]}&lt;/p&gt;

&lt;p&gt;or with typedefs:&lt;/p&gt;
{&quot;type&quot;: &quot;typedef&quot;, &quot;name&quot;: &quot;UserId&quot;, &quot;is_type&quot;: &quot;int&quot;}
&lt;p&gt;,&lt;/p&gt;
{&quot;type&quot;: &quot;typedef&quot;, &quot;name&quot;: &quot;ProductId&quot;, &quot;is_type&quot;: &quot;int&quot;}
&lt;p&gt;and then use &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;UserId&amp;quot;, &amp;quot;ProductId&amp;quot;&amp;#93;&lt;/span&gt; with some way to distinguish between the two.&lt;/p&gt;</comment>
                            <comment id="12795200" author="cutting" created="Tue, 29 Dec 2009 23:56:52 +0000"  >&lt;p&gt;Todd&amp;gt; and then use &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;UserId&amp;quot;, &amp;quot;ProductId&amp;quot;&amp;#93;&lt;/span&gt; with some way to distinguish between the two.&lt;/p&gt;

&lt;p&gt;In Avro a record with a single integer field is the same size as an integer, and then you can use multiple records in a union.  This seems nearly isomorphic, since at runtime you&apos;d need a wrapper to distinguish the two branches anyway, no?&lt;/p&gt;

&lt;p&gt;Hypothetically, we could permit only records in unions.  That would name branches, but be inconvenient.  It might also be non-pythonic.  At the other extreme, to be pythonic, we could name nothing, and instead wrap things in named tags when we want to use them in a union.  What we currently have is something in the middle: some things are permitted in unions without wrappers (e.g., importantly, null) while other distinctions require an explicit record-based wrapper.  Adding another layer of naming seems perhaps excessive.&lt;/p&gt;</comment>
                            <comment id="12909605" author="erikfrey" created="Wed, 15 Sep 2010 06:15:06 +0000"  >&lt;p&gt;Just to chime in with a concrete use case:  it would be very useful if Avro allowed me pass around arbitrary-depth arrays of arrays.  In Python I use this to represent n-ary trees.  Right now I&apos;m forced to do something like:&lt;/p&gt;

&lt;p&gt;{ &quot;type&quot;: &quot;record&quot;, name: &quot;NestedArray&quot;, &quot;fields&quot;: &lt;/p&gt;
{&quot;name&quot;: &quot;value&quot;, &quot;type&quot;: [&quot;string&quot;, &quot;NestedArray&quot;] }
&lt;p&gt; }&lt;/p&gt;

&lt;p&gt;But the following would be simpler, easier to conceptualize, and easier to integrate into my current stack:&lt;/p&gt;

{ &quot;type&quot;: &quot;array&quot;, name: &quot;NestedArray&quot;, &quot;items&quot;: [&quot;string&quot;, &quot;NestedArray&quot;] }

&lt;p&gt;Would allow x&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; instead of x&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;value&amp;#39;&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;value&amp;#39;&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="12909796" author="cutting" created="Wed, 15 Sep 2010 16:51:49 +0000"  >&lt;p&gt;Erik, your example schema above has arrays as a named type.  If unions were named, this might look like:&lt;/p&gt;

{&quot;type&quot;:&quot;union&quot;, &quot;name&quot;:&quot;NestedArray&quot;, &quot;branches&quot;:[&quot;string&quot;, &quot;NestedArray&quot;]}

&lt;p&gt;But, if named, unions might need a runtime representation, so your code might still look like:&lt;/p&gt;

&lt;p&gt;nestedArray.value()&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.value()&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Currently things work best if non-union types can be distinguished at runtime.  (Although this is not true in all implementations.  See &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-656&quot; title=&quot;writing unions with multiple records, fixed or enums can choose wrong branch &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-656&quot;&gt;&lt;del&gt;AVRO-656&lt;/del&gt;&lt;/a&gt;.)  This facilitates unions that have no runtime representation.  An alternative might be to have instances of a union be represented by a &amp;lt;type,value&amp;gt; pair, so that they could be written as the intended branch.  If unions were named, this might become a tuple of &amp;lt;union,branch,value&amp;gt;.&lt;/p&gt;</comment>
                            <comment id="12909847" author="erikfrey" created="Wed, 15 Sep 2010 18:58:44 +0000"  >&lt;p&gt;That would certainly work.  The branches would be string and array of the NestedArray union.  Then I&apos;d have to wrap the union in another array so that the top level cannot resolve to a string alone.&lt;/p&gt;

&lt;p&gt;Much to the chagrin of my team-mates, I ended up implementing my requirement of this feature in the schema like this:&lt;/p&gt;

&lt;p&gt;          { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: [&quot;string&quot;,&lt;br/&gt;
            { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: [&quot;string&quot;,&lt;br/&gt;
              { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: [&quot;string&quot;,&lt;br/&gt;
                { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: [&quot;string&quot;,&lt;br/&gt;
                  { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: [&quot;string&quot;,&lt;br/&gt;
                    { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: [&quot;string&quot;,&lt;br/&gt;
                      { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: [&quot;string&quot;,&lt;br/&gt;
                        { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: [&quot;string&quot;,&lt;br/&gt;
                          &lt;/p&gt;
{ &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: [&quot;string&quot;
          ]}
&lt;p&gt;]}]}]}]}]}]}]}]}]}&lt;/p&gt;</comment>
                            <comment id="12909969" author="hammer" created="Thu, 16 Sep 2010 00:27:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;Erik, your example schema above has arrays as a named type. If unions were named, this might look like: {&quot;type&quot;:&quot;union&quot;, &quot;name&quot;:&quot;NestedArray&quot;, &quot;branches&quot;:[&quot;string&quot;, &quot;NestedArray&quot;]} &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s my fault. I pointed Erik to this ticket, as it was the only place I could recall discussing making all types named (see Todd&apos;s comment above).&lt;/p&gt;

&lt;p&gt;In any case, it&apos;s good to have an explicit use case for this feature.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12473272">AVRO-656</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12444143">AVRO-266</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 1 Dec 2009 19:51:20 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94575</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10342"><![CDATA[Incompatible change]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 19 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dz5z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79627</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-249] in reflection, represent Java short as fixed data</title>
                <link>https://issues.apache.org/jira/browse/AVRO-249</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Currently the Java reflect API treats shorts as ints.  This fails however to naturally handle shorts in arrays and other containers.  It would be better if we used a distinct type for reflected Java short values.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12442410">AVRO-249</key>
            <summary>in reflection, represent Java short as fixed data</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Dec 2009 00:02:15 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:12 +0000</updated>
                            <resolved>Sat, 5 Dec 2009 00:05:44 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12785661" author="cutting" created="Fri, 4 Dec 2009 00:10:41 +0000"  >&lt;p&gt;With this patch, reflection maps short values to the schema:&lt;/p&gt;

{&quot;type&quot;: &quot;fixed&quot;, &quot;name&quot;: &quot;java.lang.Short&quot;, &quot;size&quot;: 2}
&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;Tests are added for arrays of shorts.&lt;/p&gt;</comment>
                            <comment id="12785707" author="scott_carey" created="Fri, 4 Dec 2009 01:44:09 +0000"  >&lt;p&gt;BigEndian, it appears.  Does that fact belong in documentation for the Reflect API?&lt;/p&gt;

&lt;p&gt;On reading, it will be a bit faster if you avoid the array allocation &amp;#8211; at least until scalar replacement or stack allocation works well in the JVM.&lt;br/&gt;
This will not show up in microbenchmarks, but can be rather significant in more complicated high throughput systems with enough other objects of &apos;medium&apos; lifetimes. (The same is true of autoboxing and creating objects members instead of intrinsic members.)&lt;br/&gt;
If you can avoid an allocation and not affect performance or functionality, its a good idea to do so.   This could be done with two one byte reads or by adding a ByteBuffer - like &quot;readShort()&quot; method to Decoder.&lt;/p&gt;

&lt;p&gt;Just to confirm, the &quot;fixed&quot; type doesn&apos;t store a length byte, so there is no extra overhead.  &lt;/p&gt;

&lt;p&gt;What about char?  Its just an unsigned short.&lt;/p&gt;</comment>
                            <comment id="12786084" author="philip" created="Fri, 4 Dec 2009 19:10:08 +0000"  >&lt;p&gt;Using &quot;java.lang.Short&quot; in a name seems suboptimal.  Could you just call it &quot;Short&quot;?  It seems like the schemas induced by reflection should ideally be language-neutral.&lt;/p&gt;

&lt;p&gt;It also seems pretty arbitrary that integers, longs, and floats are represented with zigzag varint encoding, but shorts are always two bytes.&lt;/p&gt;

&lt;p&gt;Have you considered using an approach similar to the annotation approach in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-242&quot; title=&quot;add support for per-schema metadata&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-242&quot;&gt;&lt;del&gt;AVRO-242&lt;/del&gt;&lt;/a&gt; for this?  Even for something like longs, you&apos;re sometimes going to want to hint about what encoding to use (fixed vs. varint).&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12786097" author="cutting" created="Fri, 4 Dec 2009 19:33:48 +0000"  >&lt;p&gt;&amp;gt; Could you just call it &quot;Short&quot;?&lt;/p&gt;

&lt;p&gt;I&apos;m hesitant to do this now.  It  seems tantamount to extending the specification with a new type.  We could perhaps add it to a standard &quot;lib&quot; namespace or somesuch.  But, until we&apos;ve established that, an application that needs a two-byte quantity should define its schema to use an application-specific fixed type in its schemas.&lt;/p&gt;

&lt;p&gt;The use of java.lang.Short highlights a place where folks are using a java-specific type.  A mechanism for mapping arbitrary application-specific Avro types to unboxed Java types is not straightforward today.  I don&apos;t want to solve that problem today.  Today I want to make applications that use shorts work using reflection.  And I don&apos;t mind that appearing as a wart on that application until we solve these harder problems.&lt;/p&gt;

&lt;p&gt;&amp;gt; It also seems pretty arbitrary that integers, longs, and floats are represented with zigzag varint encoding, but shorts are always two bytes.&lt;/p&gt;

&lt;p&gt;Yes, it is arbitrary.  We could instead model shorts as a one-field int record.  That would not restrict its range, and might use more space in some cases.  Six of one.&lt;/p&gt;

&lt;p&gt;&amp;gt; Have you considered using an approach similar to the annotation approach in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-242&quot; title=&quot;add support for per-schema metadata&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-242&quot;&gt;&lt;del&gt;AVRO-242&lt;/del&gt;&lt;/a&gt; for this?&lt;/p&gt;

&lt;p&gt;Yes.  What type would you annotate?  Would you annotate each field that&apos;s a short?  Would we implement mixin annotations?&lt;/p&gt;</comment>
                            <comment id="12786110" author="philip" created="Fri, 4 Dec 2009 19:48:23 +0000"  >&lt;p&gt;It wouldn&apos;t surprise me if Avro evolved to have int8, int16, int32, int64 and fixed8, fixed,16, fixed32, fixed64 &quot;types&quot; (all implemented using varint and fixed, but with the APIs responsible for bounds checking) eventually.  But that&apos;s neither here nor there.&lt;/p&gt;

&lt;p&gt;Not sure what you mean by mix-ins, but, yes, you could annotate the field in the class whose schema is being induced.&lt;/p&gt;

&lt;p&gt;I understand the expedience of modelling shorts this way.  I worry that it will make the reflection API harder to evolve.  It&apos;s saying that from now on, all Java shorts shall be 2-byte fixeds, and that&apos;s going to be the default forever more.&lt;/p&gt;

&lt;p&gt;I haven&apos;t thought about the evolution required of the reflect API.  Is it possible to change, later, how the same Java class is serialized?&lt;/p&gt;</comment>
                            <comment id="12786114" author="cutting" created="Fri, 4 Dec 2009 19:53:54 +0000"  >&lt;p&gt;&amp;gt; BigEndian, it appears. Does that fact belong in documentation for the Reflect API?&lt;/p&gt;

&lt;p&gt;Yes.  I added this to ReflectData, along with the documentation of other mappings.&lt;/p&gt;

&lt;p&gt;&amp;gt; On reading, it will be a bit faster if you avoid the array allocation&lt;/p&gt;

&lt;p&gt;At this point I am not concerned about performance here.  The reflect API already suffers from known performance problems.  The correct handling of shorts is required for reflection to support existing Hadoop RPC protocols, a primary target for the reflect API.  If this does show up as a performance bottleneck in benchmarks then we should address it.&lt;/p&gt;

&lt;p&gt;&amp;gt; Just to confirm, the &quot;fixed&quot; type doesn&apos;t store a length byte, so there is no extra overhead.&lt;/p&gt;

&lt;p&gt;That&apos;s correct.&lt;/p&gt;

&lt;p&gt;&amp;gt; What about char? Its just an unsigned short.&lt;/p&gt;

&lt;p&gt;If we need, we could add support for that in a separate issue.&lt;/p&gt;</comment>
                            <comment id="12786169" author="cutting" created="Fri, 4 Dec 2009 21:10:49 +0000"  >&lt;p&gt;Offline Philip suggested it might be better to map short to:&lt;/p&gt;

{&quot;type&quot;: &quot;int&quot;, &quot;java-class&quot;: &quot;java.lang.Short&quot;}

&lt;p&gt;I like this approach better.  Here&apos;s a version of the patch that implements it.&lt;/p&gt;</comment>
                            <comment id="12786173" author="philip" created="Fri, 4 Dec 2009 21:19:10 +0000"  >&lt;p&gt;I like the new patch.  +1.&lt;/p&gt;</comment>
                            <comment id="12786194" author="scott_carey" created="Fri, 4 Dec 2009 22:05:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;It also seems pretty arbitrary that integers, longs, and floats are represented with zigzag varint encoding, but shorts are always two bytes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Floats aren&apos;t encoded varint, are they?  I can&apos;t see the advantage there, the high bits will be set too frequently.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;At this point I am not concerned about performance here.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Thats fair.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It wouldn&apos;t surprise me if Avro evolved to have int8, int16, int32, int64 and fixed8, fixed,16, fixed32, fixed64 &quot;types&quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Maybe, but if this happens, it sounds like Avro 2.0 not Avro 1.x.  &lt;br/&gt;
Also,, there would be no benefit to varint of one byte, and for the int16 case there may be very little or no benefit.  Its easy to speculate that a int32 is very often less than 2^20 in size.  Its hard to speculate that shorts are mostly less than 2^6 and not frequently more than 2^13.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;Not sure what you mean by mix-ins, but, yes, you could annotate the field in the class whose schema is being induced.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Basically if you don&apos;t want, or can&apos;t change class A, you can write MixIn class B that has annotations that &quot;target&quot; the methods and members of class A.  See:&lt;br/&gt;
&lt;a href=&quot;http://wiki.fasterxml.com/JacksonMixInAnnotations&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.fasterxml.com/JacksonMixInAnnotations&lt;/a&gt;&lt;br/&gt;
The goal, is to allow annotating a class you can&apos;t change the source code for.&lt;/p&gt;

&lt;p&gt;Ok, if we&apos;re talking about the long term Reflect API, I will add this:&lt;/p&gt;

&lt;p&gt;I have been starting to dig in to using Avro myself, and thinking about schema evolution.  I don&apos;t particularly like the Specific API and its code generation, I&apos;d generally rather direct a schema at my own classes for most use cases.  I don&apos;t want to use Reflection either, with its restrictions and performance pitfalls (my requirements differ from those Doug is working on for Hadoop RPC significantly).&lt;/p&gt;

&lt;p&gt;I think that these two APIs can be combined in one annotations based API.  Sure, we can still have code generation from avro schemas with basic defaults to create classes, but that step can be optional, even for inter-language use cases.&lt;/p&gt;

&lt;p&gt;Imagine something like this.   &lt;br/&gt;
You have a pre-existing class, Stuff, and you want to define how it is serialized.  You make an Avro schema for it, to share with other languages/tools.   Now, you want to map the two together.  Using Specific, you have to write wrapper code to read the Avro generated class into your current class (that has a little bit of logic in it, maybe a custom hashCode() and equals(), a few other constructors for test cases , and some setters and getters that aren&apos;t just &quot;return foo&quot; and &quot;this.foo = foo&quot;.  If this class is an already long lived class with lots of unit tests, there aren&apos;t a lot of nice ways to do this without refactoring more than just the class.  More importantly, if you have 40 or so such classes &amp;#8212; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Reflect can somewhat get around this, but then if you want to share the data with other languages and tools you&apos;ve just exposed your Java implementation of your object to the world... I&apos;d rather not have a schema change just because I changed some internal data structure already encapsulated with getters/setters.&lt;/p&gt;

&lt;p&gt;Ideally, I would like to just annotate the class with something that says &quot;this is serializeable with Avro with an avro type named org.something.X&quot;.&lt;br/&gt;
Then map the getters/setters or the fields to avro fields, and build any custom logic there if needed to deal with versions.  Being able to map to a constructor would be cool too (like Jackson), but less important at the start.&lt;br/&gt;
We could even set it up to map projected schemas &amp;#8211;  &quot;this class can be serialized as  org.something.X, or the projection  org.something.minimalX if method &apos;isMinimal()&apos; returns true&quot;&quot;&lt;br/&gt;
This same mapping can be done with an annotation MixIn if the class can&apos;t be modified at this time.&lt;br/&gt;
Now, when decoding anything where an avro tye of X is encountered, it just builds the object as instructed by the annotations.  Of course, this can all be optimized early on at class loading time rather than with runtime reflection with something like ASM.&lt;/p&gt;

&lt;p&gt;It may even be possible to just &apos;borrow&apos; Jackson&apos;s annotations entirely, and be nearly or completely compatible with those.  &lt;/p&gt;

&lt;p&gt;The reason why I say that a &apos;complete&apos; annotation style API can replace both reflection and specific, is that the rules for specific can be one set of defaults &amp;#8211; what to construct when a type does not map to a known class, and the reflection default rules the other (how to serialize when a class is not annotated).  The need to generate classes at compile time might go away (It can be defined when first encountered with ASM).  The default behavior for both cases can be defined as some sort of Mix-In default:   When reflecting, if you find a short, serialize it as an avro fixed 2 byte quantity.  When generating an object from a type that is not declared, create org.apache.commons.MutableInteger for avro ints.&lt;/p&gt;

&lt;p&gt;I had intended to create a ticket for something like the above after learning more and exploring &amp;#8211; I should have more time over the next couple months to do more than observe and comment.&lt;/p&gt;</comment>
                            <comment id="12786230" author="philip" created="Fri, 4 Dec 2009 23:14:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;Floats aren&apos;t encoded varint, are they? I can&apos;t see the advantage there, the high bits will be set too frequently.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, they&apos;re not encoded varint.  Totally bogus statement on my part.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Thoughts on a unified API&amp;#93;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Scott, I totally see where you&apos;re going.  I think an &quot;annotation-based&quot; API would be a great addition.  Even though it&apos;s possible to unify &quot;specific&quot; and &quot;reflection&quot; APIs under that one roof, I really like the simplicity of the &quot;specific&quot; API.  This comes in part from some experience with Protocol Buffers.  Yes, it sucks to wrap each of your data classes with another class, but, in practice, this is often easier to follow than stuff that does some magic behind your back.&lt;/p&gt;

&lt;p&gt;In terms of examples, ORMs solve the same sorts of problems.  Hiberate and friends deserve a look too, though I agree Jackson is more similar.&lt;/p&gt;</comment>
                            <comment id="12786251" author="cutting" created="Sat, 5 Dec 2009 00:05:44 +0000"  >&lt;p&gt;I just committed this.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12426965" name="AVRO-249.patch" size="7352" author="cutting" created="Fri, 4 Dec 2009 21:10:49 +0000"/>
                            <attachment id="12426953" name="AVRO-249.patch" size="6211" author="cutting" created="Fri, 4 Dec 2009 19:53:54 +0000"/>
                            <attachment id="12426850" name="AVRO-249.patch" size="5339" author="cutting" created="Fri, 4 Dec 2009 00:10:41 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 4 Dec 2009 01:44:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94576</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 8 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dz67:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79628</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
