<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:21:42 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2015-4-1+AND+created+%3C%3D+2015-4-8+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="4" total="4"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1657] Namespaced reader schema w/field aliases can not read non-namespaced writer schema</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1657</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The writer uses a non-namespaced schema as follows:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;{ 
    &quot;type&quot;:&quot;record&quot;,
    &quot;name&quot;: &quot;MyRecord&quot;,
    &quot;fields&quot;:[
        {
            &quot;type&quot;:&quot;string&quot;,
            &quot;name&quot;:&quot;Name&quot;
        },
        {
            &quot;type&quot;:&quot;double&quot;,
            &quot;name&quot;:&quot;Temperature&quot;
        }
     ]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The reader uses a namespaced schema with a field alias.&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;{ 
    &quot;type&quot;:&quot;record&quot;,
    &quot;name&quot;: &quot;MyRecord&quot;,
    &quot;namespace&quot;: &quot;com.example&quot;,
    &quot;aliases&quot;: [&quot;.MyRecord&quot;],
    &quot;fields&quot;:[
        {
            &quot;type&quot;:&quot;string&quot;,
            &quot;name&quot;:&quot;Name&quot;
        },
        {
            &quot;type&quot;:&quot;double&quot;,
            &quot;name&quot;:&quot;TemperatureC&quot;,
            &quot;aliases&quot;: [&quot;Temperature&quot;]
        }
     ]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The following reading code will fail.&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;DatumReader&amp;lt;MyRecord&amp;gt; datumReader = new SpecificDatumReader&amp;lt;&amp;gt;(MyRecord.class);
FileReader&amp;lt;MyRecord&amp;gt; fileReader = DataFileReader.openReader(file, datumReader);
        
MyRecord record = null;
while (fileReader.hasNext()) {
    record = fileReader.next(record);
    CharSequence name = record.getName();
    Double temp = record.getTemperatureC();
    System.out.println(name + &quot; &quot; + temp);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The reader&apos;s alias is not found.&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Exception in thread &quot;main&quot; org.apache.avro.AvroTypeException: Found MyRecord, expecting com.example.MyRecord, missing required field TemperatureC
	at org.apache.avro.io.ResolvingDecoder.doAction(ResolvingDecoder.java:292)
	at org.apache.avro.io.parsing.Parser.advance(Parser.java:88)
	at org.apache.avro.io.ResolvingDecoder.readFieldOrder(ResolvingDecoder.java:130)
	at org.apache.avro.generic.GenericDatumReader.readRecord(GenericDatumReader.java:176)
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:151)
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:142)
	at org.apache.avro.file.DataFileStream.next(DataFileStream.java:233)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12787855">AVRO-1657</key>
            <summary>Namespaced reader schema w/field aliases can not read non-namespaced writer schema</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="dkorz">David Korz</reporter>
                        <labels>
                    </labels>
                <created>Fri, 3 Apr 2015 00:05:40 +0000</created>
                <updated>Fri, 3 Apr 2015 00:58:10 +0000</updated>
                                            <version>1.7.7</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="14393782" author="dkorz" created="Fri, 3 Apr 2015 00:12:24 +0000"  >&lt;p&gt;The problem is that in org.apache.avro.Schema.applyAliases(Schema,Map,Map,Map) the call to getFieldAlias() passes the Name of the writer schema and the fieldAliases map has an entry keyed with the reader&apos;s namespaced Name so no alias is found for the field TemperatureC.&lt;/p&gt;</comment>
                            <comment id="14393848" author="dkorz" created="Fri, 3 Apr 2015 00:58:10 +0000"  >&lt;p&gt;&lt;a href=&quot;https://github.com/dkorz/avro-1657&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/dkorz/avro-1657&lt;/a&gt; contains a full project to show the problem.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 42 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i27qdr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1658] Add avroDoc on reflect</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1658</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Looks like @AvroMeta can&apos;t add reserved fields, like @AvroMeta(&quot;doc&quot;, &quot;some doc&quot;) will have exceptions.&lt;br/&gt;
I would be greate if we have a @AvroDoc(&quot;some documentations&quot;) in org.apache.avro.reflect&lt;/p&gt;</description>
                <environment></environment>
        <key id="12788054">AVRO-1658</key>
            <summary>Add avroDoc on reflect</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="4" iconUrl="https://issues.apache.org/jira/images/icons/statuses/reopened.png" description="This issue was once resolved, but the resolution was deemed incorrect. From here issues are either marked assigned or resolved.">Reopened</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="raymie">Raymie Stata</assignee>
                                    <reporter username="sunzhaonan">Zhaonan Sun</reporter>
                        <labels>
                            <label>reflection</label>
                    </labels>
                <created>Fri, 3 Apr 2015 17:59:22 +0000</created>
                <updated>Wed, 21 Nov 2018 01:03:10 +0000</updated>
                                            <version>1.7.7</version>
                                    <fixVersion>1.9.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>6</votes>
                                    <watches>15</watches>
                                                                <comments>
                            <comment id="14395191" author="rdblue" created="Fri, 3 Apr 2015 22:38:30 +0000"  >&lt;p&gt;Thanks for opening this &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sunzhaonan&quot; class=&quot;user-hover&quot; rel=&quot;sunzhaonan&quot;&gt;Zhaonan Sun&lt;/a&gt;! If you&apos;re also interested in working on it, let me know if you need help.&lt;/p&gt;</comment>
                            <comment id="15107147" author="aeroevan" created="Tue, 19 Jan 2016 18:33:41 +0000"  >&lt;p&gt;Fairly straight forward patch&lt;/p&gt;</comment>
                            <comment id="15107181" author="rdblue" created="Tue, 19 Jan 2016 18:50:44 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=aeroevan&quot; class=&quot;user-hover&quot; rel=&quot;aeroevan&quot;&gt;Evan McClain&lt;/a&gt;, thanks for picking this up! The patch looks like a good start and I&apos;m happy to see there&apos;s a test in there. It looks like it only supports doc strings on fields, but Records, Enums, and Fixed can all have doc strings as well. What do you think about updating your patch to allow AvroDoc to be used with Java classes and enums?&lt;/p&gt;</comment>
                            <comment id="15107242" author="aeroevan" created="Tue, 19 Jan 2016 19:20:58 +0000"  >&lt;p&gt;Let me know if I missed anything.&lt;/p&gt;</comment>
                            <comment id="15107255" author="aeroevan" created="Tue, 19 Jan 2016 19:26:56 +0000"  >&lt;p&gt;Some cleanup&lt;/p&gt;</comment>
                            <comment id="15418190" author="aeroevan" created="Fri, 12 Aug 2016 00:50:10 +0000"  >&lt;p&gt;Patch that applies cleanly to master:&lt;br/&gt;
&lt;a href=&quot;https://github.com/aeroevan/avro/commit/324aac7304fd41d21c79c602ae55f6a51120b2d5&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/aeroevan/avro/commit/324aac7304fd41d21c79c602ae55f6a51120b2d5&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15843796" author="githubbot" created="Sat, 28 Jan 2017 03:16:34 +0000"  >&lt;p&gt;GitHub user aeroevan opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/189&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/189&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;: Java: Add reflection annotation @AvroDoc.&lt;/p&gt;

&lt;p&gt;    @AvroMeta can be used for other keys, but doc is passed into the field&apos;s&lt;br/&gt;
    constructor.&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/aeroevan/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/aeroevan/avro&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/189.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/189.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #189&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit c0f1aa0ec738efcde4f48d48929f1c3d24451acf&lt;br/&gt;
Author: Evan McClain &amp;lt;aeroevan@gmail.com&amp;gt;&lt;br/&gt;
Date:   2016-07-30T23:47:50Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;: Java: Add reflection annotation @AvroDoc.&lt;/p&gt;

&lt;p&gt;    @AvroMeta can be used for other keys, but doc is passed into the field&apos;s&lt;br/&gt;
    constructor.&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="15954514" author="sacharya" created="Tue, 4 Apr 2017 03:28:02 +0000"  >&lt;p&gt;Tests on merging with master are failing.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Tests run: 4, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 0.993 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! - in org.apache.avro.tool.TestSpecificCompilerTool
testCompileSchemaTwoFiles(org.apache.avro.tool.TestSpecificCompilerTool)  Time elapsed: 0.706 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!
org.junit.ComparisonFailure: Found file: target/compiler/output/avro/examples/baseball/Player.java does not match expected file: src/test/compiler/output/Player.java expected:&amp;lt;...Builder other) {    [&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (other == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder();    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);    }  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder by copying an existing Player instance.   * @param other The existing instance to copy.   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; A &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (other == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder();    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);    }  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * RecordBuilder &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Player instances.   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Builder &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; org.apache.avro.specific.SpecificRecordBuilderBase&amp;lt;Player&amp;gt;    &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; org.apache.avro.data.RecordBuilder&amp;lt;Player&amp;gt; {    &lt;span class=&quot;code-comment&quot;&gt;/** The number of the player */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; number;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence first_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence last_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; position;    &lt;span class=&quot;code-comment&quot;&gt;/** Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Builder */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder() {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$);    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Builder.     * @param other The existing Builder to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player.Builder other) {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(other);      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[0], other.number)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.number = data().deepCopy(fields()[0].schema(), other.number);        fieldSetFlags()[0] = other.fieldSetFlags()[0];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[1], other.first_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.first_name = data().deepCopy(fields()[1].schema(), other.first_name);        fieldSetFlags()[1] = other.fieldSetFlags()[1];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[2], other.last_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.last_name = data().deepCopy(fields()[2].schema(), other.last_name);        fieldSetFlags()[2] = other.fieldSetFlags()[2];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[3], other.position)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.position = data().deepCopy(fields()[3].schema(), other.position);        fieldSetFlags()[3] = other.fieldSetFlags()[3];      }    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Player instance     * @param other The existing instance to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player other) {]      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$)...&amp;gt; but was:&amp;lt;...Builder other) {    [&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder by copying an existing Player instance.   * @param other The existing instance to copy.   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; A &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * RecordBuilder &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Player instances.   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Builder &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; org.apache.avro.specific.SpecificRecordBuilderBase&amp;lt;Player&amp;gt;    &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; org.apache.avro.data.RecordBuilder&amp;lt;Player&amp;gt; {    &lt;span class=&quot;code-comment&quot;&gt;/** The number of the player */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; number;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence first_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence last_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; position;    &lt;span class=&quot;code-comment&quot;&gt;/** Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Builder */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder() {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$);    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Builder.     * @param other The existing Builder to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player.Builder other) {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(other);      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[0], other.number)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.number = data().deepCopy(fields()[0].schema(), other.number);        fieldSetFlags()[0] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[1], other.first_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.first_name = data().deepCopy(fields()[1].schema(), other.first_name);        fieldSetFlags()[1] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[2], other.last_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.last_name = data().deepCopy(fields()[2].schema(), other.last_name);        fieldSetFlags()[2] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[3], other.position)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.position = data().deepCopy(fields()[3].schema(), other.position);        fieldSetFlags()[3] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Player instance     * @param other The existing instance to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player other) {      ]      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$)...&amp;gt;
	at org.apache.avro.tool.TestSpecificCompilerTool.assertFileMatch(TestSpecificCompilerTool.java:140)
	at org.apache.avro.tool.TestSpecificCompilerTool.testCompileSchemaTwoFiles(TestSpecificCompilerTool.java:98)

testCompileSchemasUsingString(org.apache.avro.tool.TestSpecificCompilerTool)  Time elapsed: 0.11 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!
org.junit.ComparisonFailure: Found file: target/compiler/output-string/avro/examples/baseball/Player.java does not match expected file: src/test/compiler/output-string/avro/examples/baseball/Player.java expected:&amp;lt;...Builder other) {    [&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (other == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder();    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);    }  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder by copying an existing Player instance.   * @param other The existing instance to copy.   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; A &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (other == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder();    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);    }  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * RecordBuilder &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Player instances.   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Builder &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; org.apache.avro.specific.SpecificRecordBuilderBase&amp;lt;Player&amp;gt;    &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; org.apache.avro.data.RecordBuilder&amp;lt;Player&amp;gt; {    &lt;span class=&quot;code-comment&quot;&gt;/** The number of the player */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; number;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; first_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; last_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; position;    &lt;span class=&quot;code-comment&quot;&gt;/** Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Builder */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder() {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$);    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Builder.     * @param other The existing Builder to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player.Builder other) {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(other);      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[0], other.number)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.number = data().deepCopy(fields()[0].schema(), other.number);        fieldSetFlags()[0] = other.fieldSetFlags()[0];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[1], other.first_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.first_name = data().deepCopy(fields()[1].schema(), other.first_name);        fieldSetFlags()[1] = other.fieldSetFlags()[1];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[2], other.last_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.last_name = data().deepCopy(fields()[2].schema(), other.last_name);        fieldSetFlags()[2] = other.fieldSetFlags()[2];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[3], other.position)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.position = data().deepCopy(fields()[3].schema(), other.position);        fieldSetFlags()[3] = other.fieldSetFlags()[3];      }    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Player instance     * @param other The existing instance to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player other) {]      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$)...&amp;gt; but was:&amp;lt;...Builder other) {    [&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder by copying an existing Player instance.   * @param other The existing instance to copy.   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; A &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * RecordBuilder &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Player instances.   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Builder &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; org.apache.avro.specific.SpecificRecordBuilderBase&amp;lt;Player&amp;gt;    &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; org.apache.avro.data.RecordBuilder&amp;lt;Player&amp;gt; {    &lt;span class=&quot;code-comment&quot;&gt;/** The number of the player */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; number;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; first_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; last_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; position;    &lt;span class=&quot;code-comment&quot;&gt;/** Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Builder */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder() {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$);    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Builder.     * @param other The existing Builder to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player.Builder other) {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(other);      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[0], other.number)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.number = data().deepCopy(fields()[0].schema(), other.number);        fieldSetFlags()[0] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[1], other.first_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.first_name = data().deepCopy(fields()[1].schema(), other.first_name);        fieldSetFlags()[1] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[2], other.last_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.last_name = data().deepCopy(fields()[2].schema(), other.last_name);        fieldSetFlags()[2] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[3], other.position)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.position = data().deepCopy(fields()[3].schema(), other.position);        fieldSetFlags()[3] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Player instance     * @param other The existing instance to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player other) {      ]      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$)...&amp;gt;
	at org.apache.avro.tool.TestSpecificCompilerTool.assertFileMatch(TestSpecificCompilerTool.java:140)
	at org.apache.avro.tool.TestSpecificCompilerTool.testCompileSchemasUsingString(TestSpecificCompilerTool.java:121)

testCompileSchemaFileAndDirectory(org.apache.avro.tool.TestSpecificCompilerTool)  Time elapsed: 0.064 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!
org.junit.ComparisonFailure: Found file: target/compiler/output/avro/examples/baseball/Player.java does not match expected file: src/test/compiler/output/Player.java expected:&amp;lt;...Builder other) {    [&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (other == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder();    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);    }  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder by copying an existing Player instance.   * @param other The existing instance to copy.   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; A &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (other == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder();    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);    }  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * RecordBuilder &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Player instances.   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Builder &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; org.apache.avro.specific.SpecificRecordBuilderBase&amp;lt;Player&amp;gt;    &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; org.apache.avro.data.RecordBuilder&amp;lt;Player&amp;gt; {    &lt;span class=&quot;code-comment&quot;&gt;/** The number of the player */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; number;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence first_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence last_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; position;    &lt;span class=&quot;code-comment&quot;&gt;/** Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Builder */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder() {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$);    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Builder.     * @param other The existing Builder to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player.Builder other) {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(other);      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[0], other.number)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.number = data().deepCopy(fields()[0].schema(), other.number);        fieldSetFlags()[0] = other.fieldSetFlags()[0];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[1], other.first_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.first_name = data().deepCopy(fields()[1].schema(), other.first_name);        fieldSetFlags()[1] = other.fieldSetFlags()[1];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[2], other.last_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.last_name = data().deepCopy(fields()[2].schema(), other.last_name);        fieldSetFlags()[2] = other.fieldSetFlags()[2];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[3], other.position)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.position = data().deepCopy(fields()[3].schema(), other.position);        fieldSetFlags()[3] = other.fieldSetFlags()[3];      }    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Player instance     * @param other The existing instance to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player other) {]      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$)...&amp;gt; but was:&amp;lt;...Builder other) {    [&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder by copying an existing Player instance.   * @param other The existing instance to copy.   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; A &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * RecordBuilder &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Player instances.   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Builder &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; org.apache.avro.specific.SpecificRecordBuilderBase&amp;lt;Player&amp;gt;    &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; org.apache.avro.data.RecordBuilder&amp;lt;Player&amp;gt; {    &lt;span class=&quot;code-comment&quot;&gt;/** The number of the player */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; number;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence first_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence last_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; position;    &lt;span class=&quot;code-comment&quot;&gt;/** Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Builder */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder() {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$);    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Builder.     * @param other The existing Builder to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player.Builder other) {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(other);      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[0], other.number)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.number = data().deepCopy(fields()[0].schema(), other.number);        fieldSetFlags()[0] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[1], other.first_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.first_name = data().deepCopy(fields()[1].schema(), other.first_name);        fieldSetFlags()[1] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[2], other.last_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.last_name = data().deepCopy(fields()[2].schema(), other.last_name);        fieldSetFlags()[2] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[3], other.position)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.position = data().deepCopy(fields()[3].schema(), other.position);        fieldSetFlags()[3] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Player instance     * @param other The existing instance to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player other) {      ]      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$)...&amp;gt;
	at org.apache.avro.tool.TestSpecificCompilerTool.assertFileMatch(TestSpecificCompilerTool.java:140)
	at org.apache.avro.tool.TestSpecificCompilerTool.testCompileSchemaFileAndDirectory(TestSpecificCompilerTool.java:109)

Running org.apache.avro.tool.TestToTrevniTool
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.414 sec - in org.apache.avro.tool.TestToTrevniTool
Running org.apache.avro.tool.TestCatTool
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.313 sec - in org.apache.avro.tool.TestCatTool
Running org.apache.avro.tool.TestDataFileTools
Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.473 sec - in org.apache.avro.tool.TestDataFileTools

Results :

Failed tests:
  TestSpecificCompilerTool.testCompileSchemaFileAndDirectory:109-&amp;gt;assertFileMatch:140 Found file: target/compiler/output/avro/examples/baseball/Player.java does not match expected file: src/test/compiler/output/Player.java expected:&amp;lt;...Builder other) {    [&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (other == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder();    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);    }  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder by copying an existing Player instance.   * @param other The existing instance to copy.   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; A &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (other == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder();    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);    }  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * RecordBuilder &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Player instances.   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Builder &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; org.apache.avro.specific.SpecificRecordBuilderBase&amp;lt;Player&amp;gt;    &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; org.apache.avro.data.RecordBuilder&amp;lt;Player&amp;gt; {    &lt;span class=&quot;code-comment&quot;&gt;/** The number of the player */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; number;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence first_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence last_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; position;    &lt;span class=&quot;code-comment&quot;&gt;/** Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Builder */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder() {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$);    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Builder.     * @param other The existing Builder to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player.Builder other) {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(other);      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[0], other.number)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.number = data().deepCopy(fields()[0].schema(), other.number);        fieldSetFlags()[0] = other.fieldSetFlags()[0];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[1], other.first_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.first_name = data().deepCopy(fields()[1].schema(), other.first_name);        fieldSetFlags()[1] = other.fieldSetFlags()[1];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[2], other.last_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.last_name = data().deepCopy(fields()[2].schema(), other.last_name);        fieldSetFlags()[2] = other.fieldSetFlags()[2];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[3], other.position)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.position = data().deepCopy(fields()[3].schema(), other.position);        fieldSetFlags()[3] = other.fieldSetFlags()[3];      }    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Player instance     * @param other The existing instance to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player other) {]      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$)...&amp;gt; but was:&amp;lt;...Builder other) {    [&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder by copying an existing Player instance.   * @param other The existing instance to copy.   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; A &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * RecordBuilder &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Player instances.   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Builder &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; org.apache.avro.specific.SpecificRecordBuilderBase&amp;lt;Player&amp;gt;    &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; org.apache.avro.data.RecordBuilder&amp;lt;Player&amp;gt; {    &lt;span class=&quot;code-comment&quot;&gt;/** The number of the player */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; number;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence first_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence last_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; position;    &lt;span class=&quot;code-comment&quot;&gt;/** Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Builder */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder() {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$);    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Builder.     * @param other The existing Builder to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player.Builder other) {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(other);      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[0], other.number)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.number = data().deepCopy(fields()[0].schema(), other.number);        fieldSetFlags()[0] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[1], other.first_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.first_name = data().deepCopy(fields()[1].schema(), other.first_name);        fieldSetFlags()[1] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[2], other.last_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.last_name = data().deepCopy(fields()[2].schema(), other.last_name);        fieldSetFlags()[2] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[3], other.position)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.position = data().deepCopy(fields()[3].schema(), other.position);        fieldSetFlags()[3] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Player instance     * @param other The existing instance to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player other) {      ]      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$)...&amp;gt;
  TestSpecificCompilerTool.testCompileSchemaTwoFiles:98-&amp;gt;assertFileMatch:140 Found file: target/compiler/output/avro/examples/baseball/Player.java does not match expected file: src/test/compiler/output/Player.java expected:&amp;lt;...Builder other) {    [&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (other == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder();    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);    }  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder by copying an existing Player instance.   * @param other The existing instance to copy.   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; A &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (other == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder();    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);    }  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * RecordBuilder &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Player instances.   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Builder &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; org.apache.avro.specific.SpecificRecordBuilderBase&amp;lt;Player&amp;gt;    &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; org.apache.avro.data.RecordBuilder&amp;lt;Player&amp;gt; {    &lt;span class=&quot;code-comment&quot;&gt;/** The number of the player */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; number;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence first_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence last_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; position;    &lt;span class=&quot;code-comment&quot;&gt;/** Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Builder */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder() {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$);    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Builder.     * @param other The existing Builder to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player.Builder other) {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(other);      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[0], other.number)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.number = data().deepCopy(fields()[0].schema(), other.number);        fieldSetFlags()[0] = other.fieldSetFlags()[0];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[1], other.first_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.first_name = data().deepCopy(fields()[1].schema(), other.first_name);        fieldSetFlags()[1] = other.fieldSetFlags()[1];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[2], other.last_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.last_name = data().deepCopy(fields()[2].schema(), other.last_name);        fieldSetFlags()[2] = other.fieldSetFlags()[2];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[3], other.position)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.position = data().deepCopy(fields()[3].schema(), other.position);        fieldSetFlags()[3] = other.fieldSetFlags()[3];      }    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Player instance     * @param other The existing instance to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player other) {]      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$)...&amp;gt; but was:&amp;lt;...Builder other) {    [&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder by copying an existing Player instance.   * @param other The existing instance to copy.   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; A &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * RecordBuilder &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Player instances.   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Builder &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; org.apache.avro.specific.SpecificRecordBuilderBase&amp;lt;Player&amp;gt;    &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; org.apache.avro.data.RecordBuilder&amp;lt;Player&amp;gt; {    &lt;span class=&quot;code-comment&quot;&gt;/** The number of the player */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; number;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence first_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.CharSequence last_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; position;    &lt;span class=&quot;code-comment&quot;&gt;/** Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Builder */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder() {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$);    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Builder.     * @param other The existing Builder to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player.Builder other) {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(other);      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[0], other.number)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.number = data().deepCopy(fields()[0].schema(), other.number);        fieldSetFlags()[0] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[1], other.first_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.first_name = data().deepCopy(fields()[1].schema(), other.first_name);        fieldSetFlags()[1] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[2], other.last_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.last_name = data().deepCopy(fields()[2].schema(), other.last_name);        fieldSetFlags()[2] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[3], other.position)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.position = data().deepCopy(fields()[3].schema(), other.position);        fieldSetFlags()[3] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Player instance     * @param other The existing instance to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player other) {      ]      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$)...&amp;gt;
  TestSpecificCompilerTool.testCompileSchemasUsingString:121-&amp;gt;assertFileMatch:140 Found file: target/compiler/output-string/avro/examples/baseball/Player.java does not match expected file: src/test/compiler/output-string/avro/examples/baseball/Player.java expected:&amp;lt;...Builder other) {    [&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (other == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder();    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);    }  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder by copying an existing Player instance.   * @param other The existing instance to copy.   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; A &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (other == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder();    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);    }  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * RecordBuilder &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Player instances.   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Builder &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; org.apache.avro.specific.SpecificRecordBuilderBase&amp;lt;Player&amp;gt;    &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; org.apache.avro.data.RecordBuilder&amp;lt;Player&amp;gt; {    &lt;span class=&quot;code-comment&quot;&gt;/** The number of the player */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; number;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; first_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; last_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; position;    &lt;span class=&quot;code-comment&quot;&gt;/** Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Builder */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder() {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$);    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Builder.     * @param other The existing Builder to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player.Builder other) {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(other);      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[0], other.number)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.number = data().deepCopy(fields()[0].schema(), other.number);        fieldSetFlags()[0] = other.fieldSetFlags()[0];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[1], other.first_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.first_name = data().deepCopy(fields()[1].schema(), other.first_name);        fieldSetFlags()[1] = other.fieldSetFlags()[1];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[2], other.last_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.last_name = data().deepCopy(fields()[2].schema(), other.last_name);        fieldSetFlags()[2] = other.fieldSetFlags()[2];      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[3], other.position)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.position = data().deepCopy(fields()[3].schema(), other.position);        fieldSetFlags()[3] = other.fieldSetFlags()[3];      }    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Player instance     * @param other The existing instance to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player other) {]      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$)...&amp;gt; but was:&amp;lt;...Builder other) {    [&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder by copying an existing Player instance.   * @param other The existing instance to copy.   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; A &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Player RecordBuilder   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; avro.examples.baseball.Player.Builder newBuilder(avro.examples.baseball.Player other) {    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; avro.examples.baseball.Player.Builder(other);  }  &lt;span class=&quot;code-comment&quot;&gt;/**   * RecordBuilder &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Player instances.   */&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Builder &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; org.apache.avro.specific.SpecificRecordBuilderBase&amp;lt;Player&amp;gt;    &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; org.apache.avro.data.RecordBuilder&amp;lt;Player&amp;gt; {    &lt;span class=&quot;code-comment&quot;&gt;/** The number of the player */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; number;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; first_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; last_name;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; java.util.List&amp;lt;avro.examples.baseball.Position&amp;gt; position;    &lt;span class=&quot;code-comment&quot;&gt;/** Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Builder */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder() {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$);    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Builder.     * @param other The existing Builder to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player.Builder other) {      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(other);      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[0], other.number)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.number = data().deepCopy(fields()[0].schema(), other.number);        fieldSetFlags()[0] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[1], other.first_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.first_name = data().deepCopy(fields()[1].schema(), other.first_name);        fieldSetFlags()[1] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[2], other.last_name)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.last_name = data().deepCopy(fields()[2].schema(), other.last_name);        fieldSetFlags()[2] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isValidValue(fields()[3], other.position)) {        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.position = data().deepCopy(fields()[3].schema(), other.position);        fieldSetFlags()[3] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;      }    }    &lt;span class=&quot;code-comment&quot;&gt;/**     * Creates a Builder by copying an existing Player instance     * @param other The existing instance to copy.     */&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Builder(avro.examples.baseball.Player other) {      ]      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(SCHEMA$)...&amp;gt;

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO]
[INFO] Apache Avro Java .................................. SUCCESS [2.489s]
[INFO] Apache Avro Guava Dependencies .................... SUCCESS [1.763s]
[INFO] Apache Avro ....................................... SUCCESS [1:15.980s]
[INFO] Apache Avro &lt;span class=&quot;code-object&quot;&gt;Compiler&lt;/span&gt; .............................. SUCCESS [8.408s]
[INFO] Apache Avro Maven Plugin .......................... SUCCESS [7.611s]
[INFO] Apache Avro IPC ................................... SUCCESS [1:12.651s]
[INFO] Trevni Java ....................................... SUCCESS [0.297s]
[INFO] Trevni Java Core .................................. SUCCESS [6.115s]
[INFO] Apache Avro Mapred API ............................ SUCCESS [1:55.159s]
[INFO] Trevni Java Avro .................................. SUCCESS [19.769s]
[INFO] Trevni Specification .............................. SUCCESS [0.513s]
[INFO] Apache Avro Tools ................................. FAILURE [34.268s]
[INFO] Apache Avro Protobuf Compatibility ................ SKIPPED
[INFO] Apache Avro Thrift Compatibility .................. SKIPPED
[INFO] Apache Avro Maven Archetypes ...................... SKIPPED
[INFO] Apache Avro Maven Service Archetype ............... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="15956228" author="aeroevan" created="Wed, 5 Apr 2017 03:06:23 +0000"  >&lt;p&gt;Just merged in master into my PR, and the unit tests pass for me. It also doesn&apos;t look like that test failure is related to this change.&lt;/p&gt;</comment>
                            <comment id="16123468" author="nkollar" created="Fri, 11 Aug 2017 15:05:14 +0000"  >&lt;p&gt;I didn&apos;t see any test failure after merging Evan&apos;s PR, all unit test passed. I just had to resolve a merge conflict in the test class, the patch looks good to me.&lt;/p&gt;</comment>
                            <comment id="16130109" author="githubbot" created="Thu, 17 Aug 2017 08:48:17 +0000"  >&lt;p&gt;GitHub user przeemek opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/240&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/240&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;: Java: Add reflection annotation @AvroDoc.&lt;/p&gt;

&lt;p&gt;    This is a follow up of Pull-Request &lt;a href=&quot;https://github.com/apache/avro/pull/189&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/189&lt;/a&gt;,&lt;br/&gt;
    where all merge conflicts are resolved and the feature is ready for review/merge&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/przeemek/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/przeemek/avro&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/240.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/240.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #240&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit c0f1aa0ec738efcde4f48d48929f1c3d24451acf&lt;br/&gt;
Author: Evan McClain &amp;lt;aeroevan@gmail.com&amp;gt;&lt;br/&gt;
Date:   2016-07-30T23:47:50Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;: Java: Add reflection annotation @AvroDoc.&lt;/p&gt;

&lt;p&gt;    @AvroMeta can be used for other keys, but doc is passed into the field&apos;s&lt;br/&gt;
    constructor.&lt;/p&gt;

&lt;p&gt;commit e86c002947f3b6463d238e10de85d259a4a52c54&lt;br/&gt;
Author: Evan McClain &amp;lt;aeroevan@gmail.com&amp;gt;&lt;br/&gt;
Date:   2017-04-05T02:54:23Z&lt;/p&gt;

&lt;p&gt;    Merge remote-tracking branch &apos;origin/master&apos; into &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;commit deade58297827c4cb467d5be441607cfa1d76c69&lt;br/&gt;
Author: Evan McClain &amp;lt;aeroevan@gmail.com&amp;gt;&lt;br/&gt;
Date:   2016-07-30T23:47:50Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;: Java: Add reflection annotation @AvroDoc.&lt;/p&gt;

&lt;p&gt;    @AvroMeta can be used for other keys, but doc is passed into the field&apos;s&lt;br/&gt;
    constructor.&lt;/p&gt;

&lt;p&gt;commit f672635fce9ee8f68fe0da90e61c9b65f70c1fde&lt;br/&gt;
Author: przwik &amp;lt;przemyslaw.wiktor@kambi.com&amp;gt;&lt;br/&gt;
Date:   2017-08-17T08:40:29Z&lt;/p&gt;

&lt;p&gt;    Merge remote-tracking branch &apos;origin/&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;&apos; into &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;-c&lt;/p&gt;

&lt;p&gt;    Conflicts:&lt;br/&gt;
    	lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflect.java&lt;/p&gt;

&lt;p&gt;commit 1c597512eb2fedc25059349f6d4cc3748299edd1&lt;br/&gt;
Author: przwik &amp;lt;przemyslaw.wiktor@kambi.com&amp;gt;&lt;br/&gt;
Date:   2017-08-17T08:43:24Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt; - resolve merge conflicts&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="16130329" author="githubbot" created="Thu, 17 Aug 2017 12:33:56 +0000"  >&lt;p&gt;Github user przeemek closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/240&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/240&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16130729" author="cutting" created="Thu, 17 Aug 2017 15:59:52 +0000"  >&lt;p&gt;Shouldn&apos;t the unit test also check class-level documentation?  At present it looks like it only tests field-level documentation.&lt;/p&gt;</comment>
                            <comment id="16169187" author="aeroevan" created="Sun, 17 Sep 2017 04:24:05 +0000"  >&lt;p&gt;Updated the annotation target and unit test in my PR.&lt;/p&gt;</comment>
                            <comment id="16321101" author="dsebastien" created="Wed, 10 Jan 2018 21:00:08 +0000"  >&lt;p&gt;Any idea when this could be released?&lt;/p&gt;</comment>
                            <comment id="16637656" author="githubbot" created="Thu, 4 Oct 2018 00:35:04 +0000"  >&lt;p&gt;erhwenkuo commented on issue #240: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;: Java: Add reflection annotation @AvroDoc.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/240#issuecomment-426847421&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/240#issuecomment-426847421&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Is &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt; merged yet? Still can&apos;t see in 1.8 version.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16641871" author="githubbot" created="Mon, 8 Oct 2018 14:02:56 +0000"  >&lt;p&gt;Hillkorn commented on issue #189: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;: Java: Add reflection annotation @AvroDoc.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/189#issuecomment-427846348&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/189#issuecomment-427846348&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   In Jira &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658?focusedCommentId=16130729&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16130729&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1658?focusedCommentId=16130729&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16130729&lt;/a&gt;&lt;br/&gt;
   he wants to have unit tests for class level avro doc tests and as I see in the changes he covers them&lt;br/&gt;
   See &lt;a href=&quot;https://github.com/apache/avro/pull/189/files#diff-f12fe0e1e72a3f7235da43f8c631bafcR1110&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/189/files#diff-f12fe0e1e72a3f7235da43f8c631bafcR1110&lt;/a&gt; for the test&lt;br/&gt;
   and&lt;br/&gt;
   &lt;a href=&quot;https://github.com/apache/avro/pull/189/files#diff-f12fe0e1e72a3f7235da43f8c631bafcR1126&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/189/files#diff-f12fe0e1e72a3f7235da43f8c631bafcR1126&lt;/a&gt; where it is checked.&lt;br/&gt;
   Is still something missing?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16641872" author="githubbot" created="Mon, 8 Oct 2018 14:03:16 +0000"  >&lt;p&gt;Hillkorn edited a comment on issue #189: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;: Java: Add reflection annotation @AvroDoc.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/189#issuecomment-427846348&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/189#issuecomment-427846348&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   In Jira &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658?focusedCommentId=16130729&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16130729&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1658?focusedCommentId=16130729&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16130729&lt;/a&gt;&lt;br/&gt;
   he wants to have unit tests for class level avro doc and as I see in the changes he covers them&lt;br/&gt;
   See &lt;a href=&quot;https://github.com/apache/avro/pull/189/files#diff-f12fe0e1e72a3f7235da43f8c631bafcR1110&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/189/files#diff-f12fe0e1e72a3f7235da43f8c631bafcR1110&lt;/a&gt; for the test&lt;br/&gt;
   and&lt;br/&gt;
   &lt;a href=&quot;https://github.com/apache/avro/pull/189/files#diff-f12fe0e1e72a3f7235da43f8c631bafcR1126&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/189/files#diff-f12fe0e1e72a3f7235da43f8c631bafcR1126&lt;/a&gt; where it is checked.&lt;br/&gt;
   Is still something missing?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16693753" author="jira-bot" created="Tue, 20 Nov 2018 20:28:40 +0000"  >&lt;p&gt;Commit 01a347e996a20406b0bf13026dd375725c4efb7f in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=aeroevan&quot; class=&quot;user-hover&quot; rel=&quot;aeroevan&quot;&gt;Evan McClain&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=01a347e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=01a347e&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;: Java: Add reflection annotation @AvroDoc.&lt;/p&gt;

&lt;p&gt;@AvroMeta can be used for other keys, but doc is passed into the field&apos;s&lt;br/&gt;
constructor.&lt;/p&gt;

&lt;p&gt;Patch 2: @AvroDoc should work for class-level documentation too.&lt;/p&gt;

&lt;p&gt;Closes #189&lt;/p&gt;</comment>
                            <comment id="16693754" author="githubbot" created="Tue, 20 Nov 2018 20:28:47 +0000"  >&lt;p&gt;dkulp closed pull request #189: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt;: Java: Add reflection annotation @AvroDoc.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/189&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/189&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/reflect/AvroDoc.java b/lang/java/avro/src/main/java/org/apache/avro/reflect/AvroDoc.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..7b46a476b&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/reflect/AvroDoc.java&lt;br/&gt;
@@ -0,0 +1,17 @@&lt;br/&gt;
+package org.apache.avro.reflect;&lt;br/&gt;
+&lt;br/&gt;
+import java.lang.annotation.ElementType;&lt;br/&gt;
+import java.lang.annotation.Retention;&lt;br/&gt;
+import java.lang.annotation.RetentionPolicy;&lt;br/&gt;
+import java.lang.annotation.Target;&lt;br/&gt;
+&lt;br/&gt;
+/**&lt;br/&gt;
+ * Sets the avrodoc for this java field.&lt;br/&gt;
+ * When reading into this class, a reflectdatumreader&lt;br/&gt;
+ * looks for a schema field with the avrodoc.&lt;br/&gt;
+ */&lt;br/&gt;
+@Retention(RetentionPolicy.RUNTIME)&lt;br/&gt;
+@Target(&lt;/p&gt;
{ElementType.TYPE, ElementType.FIELD}
&lt;p&gt;)&lt;br/&gt;
+public @interface AvroDoc &lt;/p&gt;
{
+  String value();
+}
&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java b/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java&lt;br/&gt;
index eb9f5fb0f..29f2acf71 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java&lt;br/&gt;
@@ -572,6 +572,8 @@ protected Schema createSchema(Type type, Map&amp;lt;String,Schema&amp;gt; names) {&lt;br/&gt;
       String fullName = c.getName();&lt;br/&gt;
       Schema schema = names.get(fullName);&lt;br/&gt;
       if (schema == null) {&lt;br/&gt;
+        AvroDoc annotatedDoc = c.getAnnotation(AvroDoc.class);    // Docstring&lt;br/&gt;
+        String doc = (annotatedDoc != null) ? annotatedDoc.value() : null;&lt;br/&gt;
         String name = c.getSimpleName();&lt;br/&gt;
         String space = c.getPackage() == null ? &quot;&quot; : c.getPackage().getName();&lt;br/&gt;
         if (c.getEnclosingClass() != null)                   // nested class&lt;br/&gt;
@@ -588,18 +590,18 @@ protected Schema createSchema(Type type, Map&amp;lt;String,Schema&amp;gt; names) &lt;/p&gt;
{
           Enum[] constants = (Enum[])c.getEnumConstants();
           for (int i = 0; i &amp;lt; constants.length; i++)
             symbols.add(constants[i].name());
-          schema = Schema.createEnum(name, null /* doc */, space, symbols);
+          schema = Schema.createEnum(name, doc, space, symbols);
           consumeAvroAliasAnnotation(c, schema);
         }
&lt;p&gt; else if (GenericFixed.class.isAssignableFrom(c)) &lt;/p&gt;
{ // fixed
           int size = c.getAnnotation(FixedSize.class).value();
-          schema = Schema.createFixed(name, null /* doc */, space, size);
+          schema = Schema.createFixed(name, doc, space, size);
           consumeAvroAliasAnnotation(c, schema);
         }
&lt;p&gt; else if (IndexedRecord.class.isAssignableFrom(c)) &lt;/p&gt;
{ // specific
           return super.createSchema(type, names);
         }
&lt;p&gt; else {                                             // record&lt;br/&gt;
           List&amp;lt;Schema.Field&amp;gt; fields = new ArrayList&amp;lt;Schema.Field&amp;gt;();&lt;br/&gt;
           boolean error = Throwable.class.isAssignableFrom(c);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;schema = Schema.createRecord(name, null /* doc */, space, error);&lt;br/&gt;
+          schema = Schema.createRecord(name, doc, space, error);&lt;br/&gt;
           consumeAvroAliasAnnotation(c, schema);&lt;br/&gt;
           names.put(c.getName(), schema);&lt;br/&gt;
           for (Field field : getCachedFields(c))&lt;br/&gt;
@@ -611,6 +613,8 @@ protected Schema createSchema(Type type, Map&amp;lt;String,Schema&amp;gt; names) {&lt;br/&gt;
               JsonNode defaultValue = (defaultAnnotation == null)&lt;br/&gt;
                 ? null&lt;br/&gt;
                 : Schema.parseJson(defaultAnnotation.value());&lt;br/&gt;
+              annotatedDoc = field.getAnnotation(AvroDoc.class);    // Docstring&lt;br/&gt;
+              doc = (annotatedDoc != null) ? annotatedDoc.value() : null;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;               if (defaultValue == null&lt;br/&gt;
                   &amp;amp;&amp;amp; fieldSchema.getType() == Schema.Type.UNION) {&lt;br/&gt;
@@ -624,7 +628,7 @@ protected Schema createSchema(Type type, Map&amp;lt;String,Schema&amp;gt; names) {&lt;br/&gt;
                 ? annotatedName.value()&lt;br/&gt;
                 : field.getName();&lt;br/&gt;
               Schema.Field recordField&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;= new Schema.Field(fieldName, fieldSchema, null, defaultValue);&lt;br/&gt;
+                = new Schema.Field(fieldName, fieldSchema, doc, defaultValue);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;               AvroMeta meta = field.getAnnotation(AvroMeta.class);              // add metadata&lt;br/&gt;
               if (meta != null)&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflect.java b/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflect.java&lt;br/&gt;
index afe7f08ae..ddca2f9bb 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflect.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflect.java&lt;br/&gt;
@@ -1101,4 +1101,34 @@ public void testNullableByteArrayNotNullValue() throws Exception {&lt;br/&gt;
   public void testNullableByteArrayNullValue() throws Exception &lt;/p&gt;
{
     checkReadWrite(new NullableBytesTest());
   }
&lt;p&gt;+&lt;br/&gt;
+  private enum DocTestEnum &lt;/p&gt;
{
+    ENUM_1,
+    ENUM_2
+  }
&lt;p&gt;+&lt;br/&gt;
+  @AvroDoc(&quot;DocTest class docs&quot;)&lt;br/&gt;
+  private static class DocTest &lt;/p&gt;
{
+    @AvroDoc(&quot;Some Documentation&quot;)
+    int foo;
+
+    @AvroDoc(&quot;Some other Documentation&quot;)
+    DocTestEnum enums;
+
+    @AvroDoc(&quot;And again&quot;)
+    DefaultTest defaultTest;
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testAvroDoc() {&lt;br/&gt;
+    check(DocTest.class,&lt;br/&gt;
+            &quot;{\&quot;type\&quot;:\&quot;record\&quot;,\&quot;name\&quot;:\&quot;DocTest\&quot;,\&quot;namespace\&quot;:\&quot;org.apache.avro.reflect.TestReflect$\&quot;,&quot;&lt;br/&gt;
+                    + &quot;\&quot;doc\&quot;:\&quot;DocTest class docs\&quot;,&quot;&lt;br/&gt;
+                    + &quot;\&quot;fields\&quot;:[&lt;/p&gt;
{\&quot;name\&quot;:\&quot;foo\&quot;,\&quot;type\&quot;:\&quot;int\&quot;,\&quot;doc\&quot;:\&quot;Some Documentation\&quot;}
&lt;p&gt;,&quot;&lt;br/&gt;
+                    + &quot;{\&quot;name\&quot;:\&quot;enums\&quot;,\&quot;type\&quot;:&lt;/p&gt;
{\&quot;type\&quot;:\&quot;enum\&quot;,\&quot;name\&quot;:\&quot;DocTestEnum\&quot;,&quot;
+                    + &quot;\&quot;symbols\&quot;:[\&quot;ENUM_1\&quot;,\&quot;ENUM_2\&quot;]}
&lt;p&gt;,\&quot;doc\&quot;:\&quot;Some other Documentation\&quot;},&quot;&lt;br/&gt;
+                    + &quot;{\&quot;name\&quot;:\&quot;defaultTest\&quot;,\&quot;type\&quot;:{\&quot;type\&quot;:\&quot;record\&quot;,\&quot;name\&quot;:\&quot;DefaultTest\&quot;,&quot;&lt;br/&gt;
+                    + &quot;\&quot;fields\&quot;:[&lt;/p&gt;
{\&quot;name\&quot;:\&quot;foo\&quot;,\&quot;type\&quot;:\&quot;int\&quot;,\&quot;default\&quot;:1}
&lt;p&gt;]},\&quot;doc\&quot;:\&quot;And again\&quot;}]}&quot;);&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
 }&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16693941" author="raymie" created="Wed, 21 Nov 2018 00:26:51 +0000"  >&lt;p&gt;The file &lt;tt&gt;AvroDoc.java&lt;/tt&gt; doesn&apos;t have a license, cause the build to break (grumble).  Will send a patch for this shortly.&lt;/p&gt;</comment>
                            <comment id="16693948" author="githubbot" created="Wed, 21 Nov 2018 00:31:20 +0000"  >&lt;p&gt;rstata opened a new pull request #388: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt; Added license to AvroDoc.java&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/388&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/388&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   License file for org.apache.avro.reflect.AvroDoc was missing a license, breaking the build.  This patch adds the standard lic header.&lt;/p&gt;


&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16693972" author="githubbot" created="Wed, 21 Nov 2018 01:03:07 +0000"  >&lt;p&gt;dkulp closed pull request #388: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt; Added license to AvroDoc.java&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/388&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/388&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/reflect/AvroDoc.java b/lang/java/avro/src/main/java/org/apache/avro/reflect/AvroDoc.java&lt;br/&gt;
index 7b46a476b..7226a02cc 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/reflect/AvroDoc.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/reflect/AvroDoc.java&lt;br/&gt;
@@ -1,3 +1,20 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
 package org.apache.avro.reflect;&lt;/p&gt;

&lt;p&gt; import java.lang.annotation.ElementType;&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16693973" author="jira-bot" created="Wed, 21 Nov 2018 01:03:10 +0000"  >&lt;p&gt;Commit 619c6c0bf5b3440cfe80fff8b1c399b91d1d69db in avro&apos;s branch refs/heads/master from rstata&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=619c6c0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=619c6c0&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1658&quot; title=&quot;Add avroDoc on reflect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1658&quot;&gt;AVRO-1658&lt;/a&gt; Added Javadoc to AvroDoc.java, which was missing on initial commit.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12649704">AVRO-1341</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12783163" name="0001-AVRO-1658-Java-Add-reflection-annotation-AvroDoc.patch" size="6027" author="aeroevan" created="Tue, 19 Jan 2016 19:26:56 +0000"/>
                            <attachment id="12783161" name="0001-AVRO-1658-Java-Add-reflection-annotation-AvroDoc.patch" size="5975" author="aeroevan" created="Tue, 19 Jan 2016 19:20:58 +0000"/>
                            <attachment id="12783157" name="0001-AVRO-1658-Java-Add-reflection-annotation-AvroDoc.patch" size="3498" author="aeroevan" created="Tue, 19 Jan 2016 18:35:30 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 3 Apr 2015 22:38:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i27rlj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Support @AvroDoc reflection</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                </customfields>
    </item>


<item>
            <title>[AVRO-1659] Add Snappy support for Ruby</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1659</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;This uses the snappy rubygem for the SnappyCodec.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12818617">AVRO-1659</key>
            <summary>Add Snappy support for Ruby</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="10002" iconUrl="https://issues.apache.org/jira/images/icons/statuses/document.png" description="A patch for this issue has been uploaded to JIRA by a contributor.">Patch Available</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="JohnnyT">JohnnyT</reporter>
                        <labels>
                    </labels>
                <created>Mon, 6 Apr 2015 15:13:52 +0000</created>
                <updated>Mon, 6 Apr 2015 15:33:15 +0000</updated>
                                                                            <component>ruby</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                        <attachments>
                            <attachment id="12723362" name="AVRO-1659.patch" size="1933" author="JohnnyT" created="Mon, 6 Apr 2015 15:27:54 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 42 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2cutz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Adds Snappy support for Ruby</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                </customfields>
    </item>


<item>
            <title>[AVRO-1660] case sensitivity affects schema to java file generation</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1660</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;On a linux box, creating 2 schemas with com.example.organization and com.example.Organization will compile fine. 2 files (organization.java and Organization.java) would get generated. On a mac however, both files would be treated the same. This could be caught while generating the file(s).&lt;/p&gt;</description>
                <environment>&lt;p&gt;mac OS X&lt;/p&gt;</environment>
        <key id="12818762">AVRO-1660</key>
            <summary>case sensitivity affects schema to java file generation</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="6">Invalid</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="brajkumar">Balaji Ambresh</reporter>
                        <labels>
                    </labels>
                <created>Tue, 7 Apr 2015 00:19:25 +0000</created>
                <updated>Wed, 8 Apr 2015 18:24:19 +0000</updated>
                            <resolved>Wed, 8 Apr 2015 18:24:18 +0000</resolved>
                                    <version>1.7.7</version>
                                    <fixVersion>1.7.7</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="14482273" author="brajkumar" created="Tue, 7 Apr 2015 00:21:25 +0000"  >&lt;p&gt;&lt;a href=&quot;https://discussions.apple.com/thread/2180580&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://discussions.apple.com/thread/2180580&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14482277" author="brajkumar" created="Tue, 7 Apr 2015 00:24:00 +0000"  >&lt;p&gt;&lt;a href=&quot;https://discussions.apple.com/thread/2180580&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://discussions.apple.com/thread/2180580&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14482324" author="rdblue" created="Tue, 7 Apr 2015 00:46:45 +0000"  >&lt;p&gt;If I&apos;m reading this patch correctly, it throws an exception if there would be a name collision on case insensitive file systems. I don&apos;t think that&apos;s the correct behavior because it should work for case sensitive file systems. I think the right thing to do would be to detect the case where the file already exists and fail, which would be consistent because files would never be accidentally overwritten.&lt;/p&gt;

&lt;p&gt;But the current overwrite behavior is the current expectation and I think it&apos;s more likely that it is a part of workflows using the tool &amp;#8211; to overwrite the result of previous runs &amp;#8211; than it is that people have schema name collisions from case insensitivity. So I think the right thing to do is to not make these changes. Does that sound reasonable?&lt;/p&gt;</comment>
                            <comment id="14483987" author="brajkumar" created="Tue, 7 Apr 2015 20:25:20 +0000"  >&lt;p&gt;To me, it sounds reasonable to check for duplicates within a batch. That said, if the tool works as expected, let&apos;s close this issue.&lt;br/&gt;
Thank you for the feedback, Ryan.&lt;/p&gt;</comment>
                            <comment id="14483993" author="rdblue" created="Tue, 7 Apr 2015 20:29:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;To me, it sounds reasonable to check for duplicates within a batch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree with that, but we don&apos;t know that they are duplicates without checking the file system. But we also can&apos;t distinguish between duplicates within a batch from files that would be overwritten... unless we checked before creating any files and then failing an overwrite after that point. But that sounds needlessly complicated to avoid a FS problem.&lt;/p&gt;</comment>
                            <comment id="14485736" author="brajkumar" created="Wed, 8 Apr 2015 18:24:07 +0000"  >&lt;p&gt;You&apos;re right. It&apos;s possible to do that only when we remove all the output files before writing them out which might not be the common case. Closing this. Thx again.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12723497" name="delta.diff" size="2747" author="brajkumar" created="Tue, 7 Apr 2015 00:24:00 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 7 Apr 2015 00:46:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 41 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2cvpj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
