<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:21:25 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2015-1-27+AND+created+%3C%3D+2015-2-3+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="2" total="2"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1636] C++ JsonDecoder expects json object to be ordered</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1636</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I am using  Shafquat Rahman&apos;s original post for this problem reported in Avro user mailing list in last May for the description - ( Thiru provided a fix for the exact problem for Java in Oct. 2011 with Avro-895.)&lt;/p&gt;

&lt;p&gt;I have been experimenting with avro in C++ (version 1.7.5) and ran into an issue with the json decoder which expects ordered json objects. The problem I am seeing appears similar to this post I found for an older avro java library:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://search-hadoop.com/m/7WG37aVaBd/v=plain&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://search-hadoop.com/m/7WG37aVaBd/v=plain&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have a simple record:&lt;/p&gt;

&lt;p&gt;{&lt;br/&gt;
    &quot;name&quot; : &quot;SimpleRecord&quot;,&lt;br/&gt;
    &quot;type&quot; : &quot;record&quot;,&lt;br/&gt;
    &quot;fields&quot; :[ &lt;br/&gt;
        &lt;/p&gt;
{ &quot;name&quot; : &quot;A&quot;, &quot;type&quot; : &quot;int&quot;}
&lt;p&gt;,&lt;/p&gt;
        { &quot;name&quot; : &quot;B&quot;, &quot;type&quot; : &quot;int&quot;}
&lt;p&gt;    ]&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;I generate the C++ header using avrogencpp. The generated  code has codec_traits specialization for SimpleRecord that fixes the order for the JsonEncoder and JsonDecoder.&lt;/p&gt;

&lt;p&gt;...snip...&lt;br/&gt;
namespace avro {&lt;br/&gt;
template&amp;lt;&amp;gt; struct codec_traits&amp;lt;SimpleRecord&amp;gt; {&lt;br/&gt;
    static void encode(Encoder&amp;amp; e, const SimpleRecord&amp;amp; v) &lt;/p&gt;
{
        avro::encode(e, v.A);
        avro::encode(e, v.B);
    }
&lt;p&gt;    static void decode(Decoder&amp;amp; d, SimpleRecord&amp;amp; v) &lt;/p&gt;
{
        avro::decode(d, v.A);
        avro::decode(d, v.B);
    }
&lt;p&gt;};&lt;br/&gt;
...snip...&lt;/p&gt;

&lt;p&gt;The JsonDecoder successfully decodes json objects of the form&lt;/p&gt;
{&quot;A&quot; : 1, &quot;B&quot; : 2}
&lt;p&gt; into SimpleRecord. But if I try to decode &lt;/p&gt;
{&quot;B&quot; : 2, &quot;A&quot; : 1}
&lt;p&gt; it throws &apos;avro::Exception&apos; with &quot;Incorrect field&quot; from impl/parsing/JsonCodec.cc:182 in the following method:&lt;/p&gt;

&lt;p&gt;JsonDecoderHandler(JsonParser&amp;amp; p) : in_(p) { }&lt;br/&gt;
    size_t handle(const Symbol&amp;amp; s) {&lt;br/&gt;
        switch (s.kind()) {&lt;br/&gt;
        case Symbol::sRecordStart:&lt;br/&gt;
            expectToken(in_, JsonParser::tkObjectStart);&lt;br/&gt;
            break;&lt;br/&gt;
        case Symbol::sRecordEnd:&lt;br/&gt;
            expectToken(in_, JsonParser::tkObjectEnd);&lt;br/&gt;
            break;&lt;br/&gt;
        case Symbol::sField:&lt;br/&gt;
            expectToken(in_, JsonParser::tkString);&lt;br/&gt;
            if (s.extra&amp;lt;string&amp;gt;() != in_.stringValue()) &lt;/p&gt;
{
                throw Exception(&quot;Incorrect field&quot;);
            }
&lt;p&gt;            break;&lt;br/&gt;
        default:&lt;br/&gt;
            break;&lt;br/&gt;
        }&lt;br/&gt;
        return 0;&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;The stack shows that avro::decode(d, v.A) is  the call the eventually causes the exception.&lt;/p&gt;

&lt;p&gt;According to the json spec the fields in a json object are unordered. ...&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12770904">AVRO-1636</key>
            <summary>C++ JsonDecoder expects json object to be ordered</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="Mann Du">Mann Du</reporter>
                        <labels>
                    </labels>
                <created>Thu, 29 Jan 2015 04:07:56 +0000</created>
                <updated>Mon, 19 Nov 2018 04:22:15 +0000</updated>
                            <resolved>Mon, 19 Nov 2018 04:22:15 +0000</resolved>
                                    <version>1.7.7</version>
                                                    <component>c++</component>
                        <due></due>
                            <votes>3</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="14297206" author="mann du" created="Thu, 29 Jan 2015 17:40:28 +0000"  >&lt;p&gt;Did I mention that I confirmed the same behavior in Avro c++ 1.7.7? Thanks.  -Mann&lt;/p&gt;</comment>
                            <comment id="15027660" author="minhlongdo" created="Wed, 25 Nov 2015 21:48:15 +0000"  >&lt;p&gt;Can you provide the code to reproduce the bug? Thanks. -Minh&lt;/p&gt;</comment>
                            <comment id="15027733" author="thiru_mg" created="Wed, 25 Nov 2015 22:42:33 +0000"  >&lt;p&gt;Avro C++ streams in JSON objects. That is it reads the next token only when the client is ready to consume it. The consequence is that the order of fields in the JSON object should exactly match than in the schema. An alternative approach could have been to read the entire JSON object into memory and then interpret it. The flip side of this approach is that if the object is large, it will take up a lot of memory.&lt;/p&gt;

&lt;p&gt;We made a trade off in favor of conserving memory. Avro decoder will be able to read JSON streams written using Avro encoder, but if the order of fields is altered afterwards, it may fail. &lt;/p&gt;

&lt;p&gt;The limitation is common at least to C++ and Java implementations. As mentioned in the &lt;a href=&quot;https://avro.apache.org/docs/1.7.7/spec.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Avro Specification&lt;/a&gt;, the JSON encoding exists as an aid to developers to help debug issues and not meant to be used in production.&lt;/p&gt;</comment>
                            <comment id="16691244" author="thiru_mg" created="Mon, 19 Nov 2018 04:22:15 +0000"  >&lt;p&gt;The issue is not specific to C++ implementation and rare. As mentioned earlier, the could would read JSON produced by Avro. If the JSON comes from elsewhere, it might fail. Since JSON format exists primarily for debugging purpose and not for storing production data, I&apos;m resolving this issue as &quot;won&apos;t fix&quot;.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 25 Nov 2015 21:48:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i24xpz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1637] Handling multibyte UTF-8 characters in Ruby</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1637</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;It looks like the Ruby implementation of Avro doesn&apos;t successfully round-trip UTF-8 encoded strings containing multibyte characters.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;require &lt;span class=&quot;code-quote&quot;&gt;&apos;avro&apos;&lt;/span&gt;

def serialize(obj, schema)
  buffer = StringIO.&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt;
  encoder = Avro::IO::BinaryEncoder.&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt;(buffer)
  datum_writer = Avro::IO::DatumWriter.&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt;(schema)
  datum_writer.write(obj, encoder)
  buffer.seek(0)
  buffer.read
end

def deserialize(avro_obj, schema)
  reader = StringIO.&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt;(avro_obj)
  decoder = Avro::IO::BinaryDecoder.&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt;(reader)
  datum_reader = Avro::IO::DatumReader.&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt;(schema)
  datum_reader.read(decoder)
end
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&amp;gt; schema = Avro::Schema.parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;record\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;Example\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;fields\&lt;span class=&quot;code-quote&quot;&gt;&quot;:[{\&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;example_field\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;string\&lt;span class=&quot;code-quote&quot;&gt;&quot;}, {\&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;other_field\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;string\&lt;span class=&quot;code-quote&quot;&gt;&quot;}]}&quot;&lt;/span&gt;)

&amp;gt; deserialize(serialize({&lt;span class=&quot;code-quote&quot;&gt;&apos;example_field&apos;&lt;/span&gt;=&amp;gt; &lt;span class=&quot;code-quote&quot;&gt;&apos;h&#233;ll&#246; world&apos;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&apos;other_field&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;code-quote&quot;&gt;&apos;goodbye world&apos;&lt;/span&gt;}, schema), schema)

{&lt;span class=&quot;code-quote&quot;&gt;&quot;example_field&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;h\xC3\xA9ll\xC3\xB6 wor&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;other_field&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;d\x1Agoodbye world&quot;&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that it looks like it&apos;s computing the length of the first field incorrectly (length of string in characters rather than in bytes?), and the end of the first field spills into the second field.&lt;/p&gt;

&lt;p&gt;Also, if the bytes happen to be especially unlucky in how they line up, we can get an &lt;tt&gt;ArgumentError&lt;/tt&gt;&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&amp;gt; deserialize(serialize({&lt;span class=&quot;code-quote&quot;&gt;&apos;example_field&apos;&lt;/span&gt;=&amp;gt; &lt;span class=&quot;code-quote&quot;&gt;&apos;&#8216;hello&#8217; world&apos;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&apos;other_field&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;code-quote&quot;&gt;&apos;goodbye world&apos;&lt;/span&gt;}, schema), schema)
ArgumentError: negative length -56 given
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This looks similar to a previous issue with the Perl implementation in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1517&quot; title=&quot;Unicode strings are accepted as bytes and fixed type by perl API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1517&quot;&gt;AVRO-1517&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12771767">AVRO-1637</key>
            <summary>Handling multibyte UTF-8 characters in Ruby</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="6">Invalid</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jamur2">Jackie Murphy</reporter>
                        <labels>
                    </labels>
                <created>Mon, 2 Feb 2015 17:02:35 +0000</created>
                <updated>Tue, 7 Apr 2015 21:13:06 +0000</updated>
                            <resolved>Tue, 7 Apr 2015 21:13:06 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="14484055" author="jamur2" created="Tue, 7 Apr 2015 21:13:06 +0000"  >&lt;p&gt;Closing as invalid, I can only reproduce on avro 1.6.x, but not 1.7.x.  Our internal gem server apparently was not mirroring rubygems and I didn&apos;t see that we were several versions behind the latest and greatest.  Apologies.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 41 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i252xz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
