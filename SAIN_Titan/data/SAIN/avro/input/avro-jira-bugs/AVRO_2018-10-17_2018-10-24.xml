<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:27:24 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2018-10-17+AND+created+%3C%3D+2018-10-24+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="3" total="3"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-2244] Problems with TestSpecificLogicalTypes.testAbilityToReadJsr310RecordWrittenAsJodaRecord:148</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2244</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I&apos;ve seen an intermittent test failure that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;Failed tests:&lt;/tt&gt;&lt;br/&gt;
&lt;tt&gt;&#160; TestSpecificLogicalTypes.testAbilityToReadJsr310RecordWrittenAsJodaRecord:148&lt;/tt&gt;&lt;br/&gt;
&lt;tt&gt;Expected: is &quot;20:35:18.720&quot;&lt;/tt&gt;&lt;br/&gt;
&lt;tt&gt;&#160;&#160;&#160;&#160; but: was &quot;20:35:18.72&quot;&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;When I see this failure, it&apos;s always the case that the trailing digit is zero.&#160; I suspect that it&apos;s a bug where the trailing zero is not printed.&#160; Since the test cases use the current time, then most of the time the trailing digit isn&apos;t zero and the bug isn&apos;t tickled.&#160; But once-in-a-while the current time has a trailing zero, which tickles the bug.&lt;/p&gt;

&lt;p&gt;If this diagnosis is correct, then in addition to fixing the bug, it might be a good idea to add tests with hard-wired, static times that cover corner cases like this one.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13192113">AVRO-2244</key>
            <summary>Problems with TestSpecificLogicalTypes.testAbilityToReadJsr310RecordWrittenAsJodaRecord:148</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thiru_mg">Thiruvalluvan M. G.</assignee>
                                    <reporter username="raymie">Raymie Stata</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Oct 2018 03:42:22 +0000</created>
                <updated>Tue, 20 Nov 2018 10:59:00 +0000</updated>
                            <resolved>Tue, 20 Nov 2018 10:58:29 +0000</resolved>
                                                    <fixVersion>1.9.0</fixVersion>
                                    <component>logical types</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="16656687" author="raymie" created="Fri, 19 Oct 2018 11:35:17 +0000"  >&lt;p&gt;The spec for &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_TIME&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;ISO_LOCAL_TIME&lt;/a&gt;: &quot;One to nine digits for the nano-of-second. As many digits will be output as required.&quot;&#160; So it&apos;s going to drop the trailing zeros.&lt;/p&gt;

&lt;p&gt;The spec for the &lt;a href=&quot;https://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#time--&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;JODA formatter&lt;/a&gt; that&apos;s being used here says: &quot;Returns a formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, three digit fraction of second, and time zone offset (HH:mm:ss.SSSZZ).&quot;, i.e., it will pad with trailing zeros.&lt;/p&gt;

&lt;p&gt;So the test code in this case is buggy.&lt;/p&gt;</comment>
                            <comment id="16661123" author="raymie" created="Tue, 23 Oct 2018 18:58:31 +0000"  >&lt;p&gt;I don&apos;t believe the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2241&quot; title=&quot;Fix Jsr310/Joda tests when comparing datetimes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2241&quot;&gt;&lt;del&gt;AVRO-2241&lt;/del&gt;&lt;/a&gt; addresses the problem in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2244&quot; title=&quot;Problems with TestSpecificLogicalTypes.testAbilityToReadJsr310RecordWrittenAsJodaRecord:148&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2244&quot;&gt;&lt;del&gt;AVRO-2244&lt;/del&gt;&lt;/a&gt;: 2244 seems to be related to the &lt;em&gt;formatting&lt;/em&gt; of times, rather than the truncation of them.  However, I think the reverse is true: A fix to &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2244&quot; title=&quot;Problems with TestSpecificLogicalTypes.testAbilityToReadJsr310RecordWrittenAsJodaRecord:148&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2244&quot;&gt;&lt;del&gt;AVRO-2244&lt;/del&gt;&lt;/a&gt; would (have) addressed the problem seen in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2241&quot; title=&quot;Fix Jsr310/Joda tests when comparing datetimes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2241&quot;&gt;&lt;del&gt;AVRO-2241&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="16661817" author="raymie" created="Wed, 24 Oct 2018 06:50:02 +0000"  >&lt;p&gt;If there&apos;s any doubt about this issue being resolved, I just got the following error:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;testAbilityToReadJsr310RecordWrittenAsJodaRecord(org.apache.avro.specific.TestSpecificLogicalTypes) Time elapsed: 0.085 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!
java.lang.AssertionError:
Expected: is &quot;23:43:30.800&quot;
&#160;&#160;&#160;&#160; but: was &quot;23:43:30.8&quot;}}
&#160;&#160;&#160;&#160; at org.apache.avro.specific.TestSpecificLogicalTypes.testAbilityToReadJsr310RecordWrittenAsJodaRecord(TestSpecificLogicalTypes.java:150)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Personally, I would revert &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2241&quot; title=&quot;Fix Jsr310/Joda tests when comparing datetimes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2241&quot;&gt;&lt;del&gt;AVRO-2241&lt;/del&gt;&lt;/a&gt; and figure out how to get &lt;tt&gt;TestSpecificLogicalTypes.testAbilityToReadJsr310RecordWrittenAsJodaRecord&lt;/tt&gt; to output zero-padded, three-digit time stamps for the Jsr310 case.&lt;/p&gt;</comment>
                            <comment id="16691177" author="thiru_mg" created="Mon, 19 Nov 2018 02:18:29 +0000"  >&lt;p&gt;The solution for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2241&quot; title=&quot;Fix Jsr310/Joda tests when comparing datetimes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2241&quot;&gt;&lt;del&gt;AVRO-2241&lt;/del&gt;&lt;/a&gt; reduces the problem frequency from 1 in 10 to 1 in 1000.&lt;br/&gt;
I showed how to deterministically reproduce the problem&#160;&lt;a href=&quot;https://github.com/thiru-apache/avro/commit/7c4160553f4337c0ded0b40ac2833cebf24e2a07&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16691229" author="githubbot" created="Mon, 19 Nov 2018 04:05:19 +0000"  >&lt;p&gt;thiru-apache opened a new pull request #386: Test and fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2244&quot; title=&quot;Problems with TestSpecificLogicalTypes.testAbilityToReadJsr310RecordWrittenAsJodaRecord:148&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2244&quot;&gt;&lt;del&gt;AVRO-2244&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/386&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/386&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16693045" author="fokko" created="Tue, 20 Nov 2018 10:56:54 +0000"  >&lt;p&gt;I fixed this over here: &lt;a href=&quot;https://github.com/apache/avro/commit/25032e10a86851bdabfa29b99885ccfc03c6667e#diff-a2bcc0c4e92dfb4332f75a9d56cdb4daR73&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/commit/25032e10a86851bdabfa29b99885ccfc03c6667e#diff-a2bcc0c4e92dfb4332f75a9d56cdb4daR73&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16693047" author="githubbot" created="Tue, 20 Nov 2018 10:58:12 +0000"  >&lt;p&gt;Fokko commented on issue #386: Test and fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2244&quot; title=&quot;Problems with TestSpecificLogicalTypes.testAbilityToReadJsr310RecordWrittenAsJodaRecord:148&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2244&quot;&gt;&lt;del&gt;AVRO-2244&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/386#issuecomment-440232578&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/386#issuecomment-440232578&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   This looks good. Thanks @thiru-apache for fixing this!&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16693050" author="githubbot" created="Tue, 20 Nov 2018 10:58:56 +0000"  >&lt;p&gt;Fokko closed pull request #386: Test and fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2244&quot; title=&quot;Problems with TestSpecificLogicalTypes.testAbilityToReadJsr310RecordWrittenAsJodaRecord:148&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2244&quot;&gt;&lt;del&gt;AVRO-2244&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/386&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/386&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java b/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java&lt;br/&gt;
index ba8923980..02bea73bd 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java&lt;br/&gt;
@@ -27,7 +27,6 @@&lt;br/&gt;
 import java.time.format.DateTimeFormatter;&lt;br/&gt;
 import java.time.format.DateTimeFormatterBuilder;&lt;br/&gt;
 import java.time.temporal.ChronoField;&lt;br/&gt;
-import java.time.temporal.ChronoUnit;&lt;br/&gt;
 import java.util.ArrayList;&lt;br/&gt;
 import java.util.List;&lt;/p&gt;

&lt;p&gt;@@ -46,6 +45,7 @@&lt;br/&gt;
 import org.joda.time.DateTimeZone;&lt;br/&gt;
 import org.joda.time.LocalDate;&lt;br/&gt;
 import org.joda.time.LocalTime;&lt;br/&gt;
+import org.joda.time.chrono.ISOChronology;&lt;br/&gt;
 import org.joda.time.format.ISODateTimeFormat;&lt;br/&gt;
 import org.junit.Assert;&lt;br/&gt;
 import org.junit.Rule;&lt;br/&gt;
@@ -119,8 +119,8 @@ public void testRecordWithJsr310LogicalTypes() throws IOException {&lt;br/&gt;
         3019.34,&lt;br/&gt;
         null,&lt;br/&gt;
         java.time.LocalDate.now(),&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java.time.LocalTime.now().truncatedTo(ChronoUnit.MILLIS),&lt;/li&gt;
	&lt;li&gt;java.time.Instant.now().truncatedTo(ChronoUnit.MILLIS),&lt;br/&gt;
+        java.time.LocalTime.now(),&lt;br/&gt;
+        java.time.Instant.now(),&lt;br/&gt;
         new BigDecimal(123.45f).setScale(2, BigDecimal.ROUND_HALF_DOWN)&lt;br/&gt;
     );&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@@ -133,6 +133,7 @@ public void testRecordWithJsr310LogicalTypes() throws IOException {&lt;/p&gt;

&lt;p&gt;   @Test&lt;br/&gt;
   public void testAbilityToReadJsr310RecordWrittenAsJodaRecord() throws IOException &lt;/p&gt;
{
+
     TestRecordWithLogicalTypes withJoda = new TestRecordWithLogicalTypes(
             true,
             34,
@@ -142,7 +143,10 @@ public void testAbilityToReadJsr310RecordWrittenAsJodaRecord() throws IOExceptio
             null,
             LocalDate.now(),
             LocalTime.now(),
-            DateTime.now().withZone(DateTimeZone.UTC),
+            // There is no reliable way to get fixed width string from ISO_INSTANT below
+            // for granularity less than one second second.
+            new DateTime((System.currentTimeMillis() / 1000) * 1000,
+                    ISOChronology.getInstance()).withZone(DateTimeZone.UTC),
             new BigDecimal(123.45f).setScale(2, BigDecimal.ROUND_HALF_DOWN)
     );
 
@@ -162,7 +166,7 @@ public void testAbilityToReadJsr310RecordWrittenAsJodaRecord() throws IOExceptio
 
     Assert.assertThat(ISO_LOCAL_DATE.format(withJsr310.getD()), is(ISODateTimeFormat.date().print(withJoda.getD())));
     Assert.assertThat(ISO_LOCAL_TIME.format(withJsr310.getT()), is(ISODateTimeFormat.time().print(withJoda.getT())));
-    Assert.assertThat(ISO_INSTANT.format(withJsr310.getTs()), is(ISODateTimeFormat.dateTime().print(withJoda.getTs())));
+    Assert.assertThat(ISO_INSTANT.format(withJsr310.getTs()), is(ISODateTimeFormat.dateTimeNoMillis().print(withJoda.getTs())));
     Assert.assertThat(withJsr310.getDec(), comparesEqualTo(withJoda.getDec()));
   }

&lt;p&gt;@@ -176,8 +180,8 @@ public void testAbilityToReadJodaRecordWrittenAsJsr310Record() throws IOExceptio&lt;br/&gt;
             3019.34,&lt;br/&gt;
             null,&lt;br/&gt;
             java.time.LocalDate.now(),&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java.time.LocalTime.now().truncatedTo(ChronoUnit.MILLIS),&lt;/li&gt;
	&lt;li&gt;java.time.Instant.now().truncatedTo(ChronoUnit.MILLIS),&lt;br/&gt;
+            java.time.LocalTime.now(),&lt;br/&gt;
+            java.time.Instant.now(),&lt;br/&gt;
             new BigDecimal(123.45f).setScale(2, BigDecimal.ROUND_HALF_DOWN)&lt;br/&gt;
     );&lt;/li&gt;
&lt;/ul&gt;






&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16693051" author="jira-bot" created="Tue, 20 Nov 2018 10:59:00 +0000"  >&lt;p&gt;Commit e04c2c291395339b8eb488a5e045500d366553b6 in avro&apos;s branch refs/heads/master from Thiruvalluvan M G&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=e04c2c2&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=e04c2c2&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2244&quot; title=&quot;Problems with TestSpecificLogicalTypes.testAbilityToReadJsr310RecordWrittenAsJodaRecord:148&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2244&quot;&gt;&lt;del&gt;AVRO-2244&lt;/del&gt;&lt;/a&gt; Fix flaky datetime test (#386)&lt;/p&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310560">
                    <name>Problem/Incident</name>
                                            <outwardlinks description="causes">
                                        <issuelink>
            <issuekey id="13190974">AVRO-2241</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 19 Nov 2018 02:18:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3zadb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2245] Java codec testing improvements</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2245</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;In&#160;the Avro Java implementation,&#160;TestBZip2Codec and&#160;TestZstandardCodec are&#160;both laughably wrong.&lt;/p&gt;

&lt;p&gt;For example, the last&#160;lines of TestBZip2Codec:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] outputByteArray = decompressedBuffer.array();
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; inputByteSize; i++) {
  inputByteArray[i] = outputByteArray[i];
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There should be an assertEquals in there not an assignment statement. (And if you put assertEquals there, the test actually fails...).&lt;/p&gt;

&lt;p&gt;I will send a PR that replaces these tests with a correct parametrized test for all codecs.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13192611">AVRO-2245</key>
            <summary>Java codec testing improvements</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jtolar">Jacob Tolar</assignee>
                                    <reporter username="jtolar">Jacob Tolar</reporter>
                        <labels>
                    </labels>
                <created>Thu, 18 Oct 2018 16:45:35 +0000</created>
                <updated>Thu, 8 Nov 2018 16:12:44 +0000</updated>
                            <resolved>Thu, 8 Nov 2018 16:12:44 +0000</resolved>
                                                    <fixVersion>1.9.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="16655576" author="githubbot" created="Thu, 18 Oct 2018 16:52:39 +0000"  >&lt;p&gt;jacobtolar opened a new pull request #351: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2245&quot; title=&quot;Java codec testing improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2245&quot;&gt;&lt;del&gt;AVRO-2245&lt;/del&gt;&lt;/a&gt; Improve java tests for compression codecs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/351&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/351&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Remove `TestBZip2Codec.java` and `TestZstandardCodec.java`, which were implemented incorrectly, and add a new parametrized test that validates all codecs correctly.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16667630" author="githubbot" created="Mon, 29 Oct 2018 19:22:50 +0000"  >&lt;p&gt;nandorKollar commented on a change in pull request #351: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2245&quot; title=&quot;Java codec testing improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2245&quot;&gt;&lt;del&gt;AVRO-2245&lt;/del&gt;&lt;/a&gt; Improve java tests for compression codecs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/351#discussion_r229065081&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/351#discussion_r229065081&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/test/java/org/apache/avro/file/TestAllCodecs.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -0,0 +1,96 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+package org.apache.avro.file;&lt;br/&gt;
+&lt;br/&gt;
+import org.junit.Assert;&lt;br/&gt;
+import org.junit.Test;&lt;br/&gt;
+import org.junit.runner.RunWith;&lt;br/&gt;
+import org.junit.runners.Parameterized;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import java.nio.ByteBuffer;&lt;br/&gt;
+import java.util.Arrays;&lt;br/&gt;
+import java.util.Collection;&lt;br/&gt;
+&lt;br/&gt;
+import static org.junit.Assert.assertTrue;&lt;br/&gt;
+&lt;br/&gt;
+@RunWith(Parameterized.class)&lt;br/&gt;
+public class TestAllCodecs {&lt;br/&gt;
+&lt;br/&gt;
+  @Parameterized.Parameters(name = &quot;&lt;/p&gt;
{index}
&lt;p&gt;: codec=&lt;/p&gt;
{0}
&lt;p&gt;&quot;)&lt;br/&gt;
+  public static Collection&amp;lt;Object[]&amp;gt; data() {&lt;br/&gt;
+    return Arrays.asList(new Object[][] {&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;bzip2&quot;, BZip2Codec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;zstandard&quot;, ZstandardCodec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;null&quot;, NullCodec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;xz&quot;, XZCodec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;snappy&quot;, SnappyCodec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;deflate&quot;, DeflateCodec.class }
&lt;p&gt;,&lt;br/&gt;
+    });&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Parameterized.Parameter(0)&lt;br/&gt;
+  public String codec;&lt;br/&gt;
+&lt;br/&gt;
+  @Parameterized.Parameter(1)&lt;br/&gt;
+  public Class&amp;lt;? extends Codec&amp;gt; codecClass;&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testCodec() throws IOException {&lt;br/&gt;
+    int inputSize = 500_000;&lt;br/&gt;
+&lt;br/&gt;
+    byte[] input = generateTestData(inputSize);&lt;br/&gt;
+&lt;br/&gt;
+    Codec codecInstance = CodecFactory.fromString(codec).createInstance();&lt;br/&gt;
+    assertTrue(codecClass.isInstance(codecInstance));&lt;br/&gt;
+    assertTrue(codecInstance.getName().equals(codec));&lt;br/&gt;
+&lt;br/&gt;
+    ByteBuffer inputByteBuffer = ByteBuffer.wrap(input);&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Here, the original tests allocated a 2 times bigger buffer than the original input, which was supposed to test &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1326&quot; title=&quot;Files written with bzip2 codec cannot be read&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1326&quot;&gt;&lt;del&gt;AVRO-1326&lt;/del&gt;&lt;/a&gt; is fixed. If i&apos;m not mistaken, with refactor this test like you did, we lose this verification.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16667635" author="githubbot" created="Mon, 29 Oct 2018 19:25:35 +0000"  >&lt;p&gt;nandorKollar commented on issue #351: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2245&quot; title=&quot;Java codec testing improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2245&quot;&gt;&lt;del&gt;AVRO-2245&lt;/del&gt;&lt;/a&gt; Improve java tests for compression codecs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/351#issuecomment-434046221&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/351#issuecomment-434046221&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Thanks for spotting this problem! I support refactoring these to parametrized tests. Could you please address my only concern? Also (despite probably not very often used part of Avro) Trevni has similar meaningless tests (with the same name as these), if it requires only low effort, could you please fix those too?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16674268" author="githubbot" created="Sun, 4 Nov 2018 02:39:44 +0000"  >&lt;p&gt;jacobtolar commented on a change in pull request #351: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2245&quot; title=&quot;Java codec testing improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2245&quot;&gt;&lt;del&gt;AVRO-2245&lt;/del&gt;&lt;/a&gt; Improve java tests for compression codecs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/351#discussion_r230573786&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/351#discussion_r230573786&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/test/java/org/apache/avro/file/TestAllCodecs.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -0,0 +1,96 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+package org.apache.avro.file;&lt;br/&gt;
+&lt;br/&gt;
+import org.junit.Assert;&lt;br/&gt;
+import org.junit.Test;&lt;br/&gt;
+import org.junit.runner.RunWith;&lt;br/&gt;
+import org.junit.runners.Parameterized;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import java.nio.ByteBuffer;&lt;br/&gt;
+import java.util.Arrays;&lt;br/&gt;
+import java.util.Collection;&lt;br/&gt;
+&lt;br/&gt;
+import static org.junit.Assert.assertTrue;&lt;br/&gt;
+&lt;br/&gt;
+@RunWith(Parameterized.class)&lt;br/&gt;
+public class TestAllCodecs {&lt;br/&gt;
+&lt;br/&gt;
+  @Parameterized.Parameters(name = &quot;&lt;/p&gt;
{index}
&lt;p&gt;: codec=&lt;/p&gt;
{0}
&lt;p&gt;&quot;)&lt;br/&gt;
+  public static Collection&amp;lt;Object[]&amp;gt; data() {&lt;br/&gt;
+    return Arrays.asList(new Object[][] {&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;bzip2&quot;, BZip2Codec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;zstandard&quot;, ZstandardCodec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;null&quot;, NullCodec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;xz&quot;, XZCodec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;snappy&quot;, SnappyCodec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;deflate&quot;, DeflateCodec.class }
&lt;p&gt;,&lt;br/&gt;
+    });&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Parameterized.Parameter(0)&lt;br/&gt;
+  public String codec;&lt;br/&gt;
+&lt;br/&gt;
+  @Parameterized.Parameter(1)&lt;br/&gt;
+  public Class&amp;lt;? extends Codec&amp;gt; codecClass;&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testCodec() throws IOException {&lt;br/&gt;
+    int inputSize = 500_000;&lt;br/&gt;
+&lt;br/&gt;
+    byte[] input = generateTestData(inputSize);&lt;br/&gt;
+&lt;br/&gt;
+    Codec codecInstance = CodecFactory.fromString(codec).createInstance();&lt;br/&gt;
+    assertTrue(codecClass.isInstance(codecInstance));&lt;br/&gt;
+    assertTrue(codecInstance.getName().equals(codec));&lt;br/&gt;
+&lt;br/&gt;
+    ByteBuffer inputByteBuffer = ByteBuffer.wrap(input);&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Yes, that&apos;s true. Although I&apos;d argue that this test wasn&apos;t really successfully testing &lt;b&gt;anything&lt;/b&gt; before. (The test doesn&apos;t even clearly verify &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1326&quot; title=&quot;Files written with bzip2 codec cannot be read&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1326&quot;&gt;&lt;del&gt;AVRO-1326&lt;/del&gt;&lt;/a&gt;, although it sort of does...it would be much more straightforward to allocate a larger buffer and call `rewind` and `limit`. Instead it&apos;s actually compressing the second (empty) half of the ByteBuffer. If we allocated `inputSize * 2 + 1` the `assert(inputSize == outputSize)` check would fail.) I honestly can&apos;t tell if that assertion passes out of lucky coincidence or if the test was written to be confusing. I think the first. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;   Anyways: there&apos;s actually still a couple little bugs in that code similar to what &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1326&quot; title=&quot;Files written with bzip2 codec cannot be read&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1326&quot;&gt;&lt;del&gt;AVRO-1326&lt;/del&gt;&lt;/a&gt; fixes. (With how the compression code is called currently, I don&apos;t think these bugs would ever get exercised, but still...they should probably get fixed). There&apos;s another PR here: &lt;a href=&quot;https://github.com/apache/avro/pull/352&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/352&lt;/a&gt; to fix those.&lt;/p&gt;

&lt;p&gt;   As part of that PR I was going to add another test in `TestAllCodecs` to verify the changes. Without the changes in #352 the test fails, so, not adding it here; I&apos;ll add it there once this is merged. (Basically, this tests that we do the right thing for both compression and decompression, even if we start out in somewhere in the middle of the input bytebuffer). &lt;/p&gt;

&lt;p&gt;   ```java&lt;br/&gt;
     @Test&lt;br/&gt;
     public void testCodecSlice() throws IOException &lt;/p&gt;
{
       int inputSize = 500_000;
       byte[] input = generateTestData(inputSize);
   
       Codec codecInstance = CodecFactory.fromString(codec).createInstance();
   
       ByteBuffer partialBuffer = ByteBuffer.wrap(input);
       partialBuffer.position(17);
   
       ByteBuffer inputByteBuffer = partialBuffer.slice();
       ByteBuffer compressedBuffer = codecInstance.compress(inputByteBuffer);
   
       int compressedSize = compressedBuffer.remaining();
   
       // Make sure something returned
       assertTrue(compressedSize &amp;gt; 0);
   
       // Create a slice from the compressed buffer
       ByteBuffer sliceBuffer = ByteBuffer.allocate(compressedSize + 100);
       sliceBuffer.position(50);
       sliceBuffer.put(compressedBuffer);
       sliceBuffer.limit(compressedSize + 50);
       sliceBuffer.position(50);
   
       // Decompress the data
       ByteBuffer decompressedBuffer = codecInstance.decompress(sliceBuffer.slice());
   
       // Validate the the input and output are equal.
       inputByteBuffer.rewind();
       Assert.assertEquals(decompressedBuffer, inputByteBuffer);
     }
&lt;p&gt;   ```&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16674269" author="githubbot" created="Sun, 4 Nov 2018 02:41:10 +0000"  >&lt;p&gt;jacobtolar commented on issue #351: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2245&quot; title=&quot;Java codec testing improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2245&quot;&gt;&lt;del&gt;AVRO-2245&lt;/del&gt;&lt;/a&gt; Improve java tests for compression codecs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/351#issuecomment-435637311&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/351#issuecomment-435637311&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I can make the changes in Trevni in a separate PR if that&apos;s ok.&lt;/p&gt;

&lt;p&gt;   &lt;a href=&quot;https://github.com/apache/avro/blob/master/lang/java/trevni/core/src/test/java/org/apache/trevni/TestBZip2Codec.java#L63-L66&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/blob/master/lang/java/trevni/core/src/test/java/org/apache/trevni/TestBZip2Codec.java#L63-L66&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16674270" author="githubbot" created="Sun, 4 Nov 2018 02:41:39 +0000"  >&lt;p&gt;jacobtolar edited a comment on issue #351: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2245&quot; title=&quot;Java codec testing improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2245&quot;&gt;&lt;del&gt;AVRO-2245&lt;/del&gt;&lt;/a&gt; Improve java tests for compression codecs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/351#issuecomment-435637311&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/351#issuecomment-435637311&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   I can make the changes in Trevni in a separate PR if that&apos;s ok. Yes, they also don&apos;t make much sense:&lt;/p&gt;

&lt;p&gt;   &lt;a href=&quot;https://github.com/apache/avro/blob/d799e1829a39ca0379f3e12d2e8cfdf5fcd26151/lang/java/trevni/core/src/test/java/org/apache/trevni/TestBZip2Codec.java#L63-L66&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/blob/d799e1829a39ca0379f3e12d2e8cfdf5fcd26151/lang/java/trevni/core/src/test/java/org/apache/trevni/TestBZip2Codec.java#L63-L66&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16678348" author="githubbot" created="Wed, 7 Nov 2018 15:03:21 +0000"  >&lt;p&gt;Fokko commented on issue #351: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2245&quot; title=&quot;Java codec testing improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2245&quot;&gt;&lt;del&gt;AVRO-2245&lt;/del&gt;&lt;/a&gt; Improve java tests for compression codecs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/351#issuecomment-436652895&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/351#issuecomment-436652895&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @jacobtolar Can you rebase onto master as well?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16678871" author="githubbot" created="Wed, 7 Nov 2018 22:20:13 +0000"  >&lt;p&gt;Fokko commented on issue #351: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2245&quot; title=&quot;Java codec testing improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2245&quot;&gt;&lt;del&gt;AVRO-2245&lt;/del&gt;&lt;/a&gt; Improve java tests for compression codecs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/351#issuecomment-436798946&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/351#issuecomment-436798946&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @nandorKollar Final thoughts?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16679948" author="githubbot" created="Thu, 8 Nov 2018 16:09:38 +0000"  >&lt;p&gt;nandorKollar closed pull request #351: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2245&quot; title=&quot;Java codec testing improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2245&quot;&gt;&lt;del&gt;AVRO-2245&lt;/del&gt;&lt;/a&gt; Improve java tests for compression codecs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/351&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/351&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/src/test/java/org/apache/avro/file/TestAllCodecs.java b/lang/java/avro/src/test/java/org/apache/avro/file/TestAllCodecs.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..0e531b7a5&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/file/TestAllCodecs.java&lt;br/&gt;
@@ -0,0 +1,96 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+&lt;br/&gt;
+package org.apache.avro.file;&lt;br/&gt;
+&lt;br/&gt;
+import org.junit.Assert;&lt;br/&gt;
+import org.junit.Test;&lt;br/&gt;
+import org.junit.runner.RunWith;&lt;br/&gt;
+import org.junit.runners.Parameterized;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.IOException;&lt;br/&gt;
+import java.nio.ByteBuffer;&lt;br/&gt;
+import java.util.Arrays;&lt;br/&gt;
+import java.util.Collection;&lt;br/&gt;
+&lt;br/&gt;
+import static org.junit.Assert.assertTrue;&lt;br/&gt;
+&lt;br/&gt;
+@RunWith(Parameterized.class)&lt;br/&gt;
+public class TestAllCodecs {&lt;br/&gt;
+&lt;br/&gt;
+  @Parameterized.Parameters(name = &quot;&lt;/p&gt;
{index}
&lt;p&gt;: codec=&lt;/p&gt;
{0}
&lt;p&gt;&quot;)&lt;br/&gt;
+  public static Collection&amp;lt;Object[]&amp;gt; data() {&lt;br/&gt;
+    return Arrays.asList(new Object[][] {&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;bzip2&quot;, BZip2Codec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;zstandard&quot;, ZstandardCodec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;null&quot;, NullCodec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;xz&quot;, XZCodec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;snappy&quot;, SnappyCodec.class }
&lt;p&gt;,&lt;br/&gt;
+      &lt;/p&gt;
{ &quot;deflate&quot;, DeflateCodec.class }
&lt;p&gt;,&lt;br/&gt;
+    });&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Parameterized.Parameter(0)&lt;br/&gt;
+  public String codec;&lt;br/&gt;
+&lt;br/&gt;
+  @Parameterized.Parameter(1)&lt;br/&gt;
+  public Class&amp;lt;? extends Codec&amp;gt; codecClass;&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testCodec() throws IOException &lt;/p&gt;
{
+    int inputSize = 500_000;
+
+    byte[] input = generateTestData(inputSize);
+
+    Codec codecInstance = CodecFactory.fromString(codec).createInstance();
+    assertTrue(codecClass.isInstance(codecInstance));
+    assertTrue(codecInstance.getName().equals(codec));
+
+    ByteBuffer inputByteBuffer = ByteBuffer.wrap(input);
+    ByteBuffer compressedBuffer = codecInstance.compress(inputByteBuffer);
+
+    int compressedSize = compressedBuffer.remaining();
+
+    // Make sure something returned
+    assertTrue(compressedSize &amp;gt; 0);
+
+    // While the compressed size could in many real cases
+    // *increase* compared to the input size, our input data
+    // is extremely easy to compress and all Avro&apos;s compression algorithms
+    // should have a compression ratio greater than 1 (except &apos;null&apos;).
+    assertTrue(compressedSize &amp;lt; inputSize || codec.equals(&quot;null&quot;));
+
+    // Decompress the data
+    ByteBuffer decompressedBuffer = codecInstance.decompress(compressedBuffer);
+
+    // Validate the the input and output are equal.
+    inputByteBuffer.rewind();
+    Assert.assertEquals(decompressedBuffer, inputByteBuffer);
+  }
&lt;p&gt;+&lt;br/&gt;
+  // Generate some test data that will compress easily&lt;br/&gt;
+  public static byte[] generateTestData(int inputSize) {&lt;br/&gt;
+    byte[] arr = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;inputSize&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+    for (int i = 0; i &amp;lt; arr.length; i++) &lt;/p&gt;
{
+      arr[i] = (byte) (65 + i % 10);
+    }
&lt;p&gt;+&lt;br/&gt;
+    return arr;&lt;br/&gt;
+  }&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/file/TestBZip2Codec.java b/lang/java/avro/src/test/java/org/apache/avro/file/TestBZip2Codec.java&lt;br/&gt;
deleted file mode 100644&lt;br/&gt;
index dfa95afa1..000000000&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/file/TestBZip2Codec.java&lt;br/&gt;
+++ /dev/null&lt;br/&gt;
@@ -1,66 +0,0 @@&lt;br/&gt;
-/*&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;* Licensed to the Apache Software Foundation (ASF) under one&lt;/li&gt;
	&lt;li&gt;* or more contributor license agreements.  See the NOTICE file&lt;/li&gt;
	&lt;li&gt;* distributed with this work for additional information&lt;/li&gt;
	&lt;li&gt;* regarding copyright ownership.  The ASF licenses this file&lt;/li&gt;
	&lt;li&gt;* to you under the Apache License, Version 2.0 (the&lt;/li&gt;
	&lt;li&gt;* &quot;License&quot;); you may not use this file except in compliance&lt;/li&gt;
	&lt;li&gt;* with the License.  You may obtain a copy of the License at&lt;/li&gt;
	&lt;li&gt;*&lt;/li&gt;
	&lt;li&gt;*     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;*&lt;/li&gt;
	&lt;li&gt;* Unless required by applicable law or agreed to in writing, software&lt;/li&gt;
	&lt;li&gt;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;/li&gt;
	&lt;li&gt;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/li&gt;
	&lt;li&gt;* See the License for the specific language governing permissions and&lt;/li&gt;
	&lt;li&gt;* limitations under the License.&lt;/li&gt;
	&lt;li&gt;*/&lt;br/&gt;
-package org.apache.avro.file;&lt;br/&gt;
-&lt;br/&gt;
-import static org.junit.Assert.assertTrue;&lt;br/&gt;
-&lt;br/&gt;
-import java.io.IOException;&lt;br/&gt;
-import java.nio.ByteBuffer;&lt;br/&gt;
-&lt;br/&gt;
-import org.junit.Test;&lt;br/&gt;
-&lt;br/&gt;
-public class TestBZip2Codec {&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;@Test&lt;/li&gt;
	&lt;li&gt;public void testBZip2CompressionAndDecompression() throws IOException {&lt;/li&gt;
	&lt;li&gt;Codec codec = CodecFactory.fromString(&quot;bzip2&quot;).createInstance();&lt;/li&gt;
	&lt;li&gt;assertTrue(codec instanceof BZip2Codec);&lt;/li&gt;
	&lt;li&gt;assertTrue(codec.getName().equals(&quot;bzip2&quot;));&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;//This is 3 times the byte buffer on the BZip2 decompress plus some extra&lt;/li&gt;
	&lt;li&gt;final int inputByteSize = BZip2Codec.DEFAULT_BUFFER_SIZE * 3 + 42;&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;byte[] inputByteArray = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;inputByteSize&amp;#93;&lt;/span&gt;;&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;//Generate something that will compress well&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt; inputByteSize; i++) 
{
-      inputByteArray[i] = (byte)(65 + i % 10);
-    }
&lt;p&gt;-&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;ByteBuffer inputByteBuffer = ByteBuffer.allocate(inputByteSize * 2);&lt;/li&gt;
	&lt;li&gt;inputByteBuffer.put(inputByteArray);&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;ByteBuffer compressedBuffer = codec.compress(inputByteBuffer);&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;//Make sure something returned&lt;/li&gt;
	&lt;li&gt;assertTrue(compressedBuffer.array().length &amp;gt; 0);&lt;/li&gt;
	&lt;li&gt;//Make sure the compressed output is smaller then the original&lt;/li&gt;
	&lt;li&gt;assertTrue(compressedBuffer.array().length &amp;lt; inputByteArray.length);&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;ByteBuffer decompressedBuffer = codec.decompress(compressedBuffer);&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;//The original array should be the same length as the decompressed array&lt;/li&gt;
	&lt;li&gt;assertTrue(decompressedBuffer.array().length == inputByteArray.length);&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;//Every byte in the outputByteArray should equal every byte in the input array&lt;/li&gt;
	&lt;li&gt;byte[] outputByteArray = decompressedBuffer.array();&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt; inputByteSize; i++) 
{
-      inputByteArray[i] = outputByteArray[i];
-    }&lt;/li&gt;
	&lt;li&gt;}&lt;br/&gt;
-}&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/file/TestZstandardCodec.java b/lang/java/avro/src/test/java/org/apache/avro/file/TestZstandardCodec.java&lt;br/&gt;
deleted file mode 100644&lt;br/&gt;
index 62726f748..000000000
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/avro/src/test/java/org/apache/avro/file/TestZstandardCodec.java&lt;br/&gt;
+++ /dev/null&lt;br/&gt;
@@ -1,62 +0,0 @@&lt;br/&gt;
-/*&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;* Licensed to the Apache Software Foundation (ASF) under one&lt;/li&gt;
	&lt;li&gt;* or more contributor license agreements.  See the NOTICE file&lt;/li&gt;
	&lt;li&gt;* distributed with this work for additional information&lt;/li&gt;
	&lt;li&gt;* regarding copyright ownership.  The ASF licenses this file&lt;/li&gt;
	&lt;li&gt;* to you under the Apache License, Version 2.0 (the&lt;/li&gt;
	&lt;li&gt;* &quot;License&quot;); you may not use this file except in compliance&lt;/li&gt;
	&lt;li&gt;* with the License.  You may obtain a copy of the License at&lt;/li&gt;
	&lt;li&gt;*&lt;/li&gt;
	&lt;li&gt;*     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;*&lt;/li&gt;
	&lt;li&gt;* Unless required by applicable law or agreed to in writing, software&lt;/li&gt;
	&lt;li&gt;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;/li&gt;
	&lt;li&gt;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/li&gt;
	&lt;li&gt;* See the License for the specific language governing permissions and&lt;/li&gt;
	&lt;li&gt;* limitations under the License.&lt;/li&gt;
	&lt;li&gt;*/&lt;br/&gt;
-package org.apache.avro.file;&lt;br/&gt;
-&lt;br/&gt;
-import static org.junit.Assert.assertTrue;&lt;br/&gt;
-&lt;br/&gt;
-import java.io.IOException;&lt;br/&gt;
-import java.nio.ByteBuffer;&lt;br/&gt;
-&lt;br/&gt;
-import org.junit.Test;&lt;br/&gt;
-&lt;br/&gt;
-public class TestZstandardCodec {&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;@Test&lt;/li&gt;
	&lt;li&gt;public void testZstandardCompressionAndDecompression() throws IOException {&lt;/li&gt;
	&lt;li&gt;Codec codec = CodecFactory.zstandardCodec().createInstance();&lt;/li&gt;
	&lt;li&gt;assertTrue(codec instanceof ZstandardCodec);&lt;/li&gt;
	&lt;li&gt;assertTrue(codec.getName().equals(&quot;zstandard&quot;));&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;// Generate some random input.&lt;/li&gt;
	&lt;li&gt;final int inputByteSize = 64 * 1024;&lt;/li&gt;
	&lt;li&gt;byte[] inputByteArray = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;inputByteSize&amp;#93;&lt;/span&gt;;&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt; inputByteSize; i++) 
{
-	      inputByteArray[i] = (byte)(65 + i % 10);
-	    }
&lt;p&gt;-&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;ByteBuffer inputByteBuffer = ByteBuffer.allocate(inputByteSize * 2);&lt;/li&gt;
	&lt;li&gt;inputByteBuffer.put(inputByteArray);&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;ByteBuffer compressedBuffer = codec.compress(inputByteBuffer);&lt;/li&gt;
	&lt;li&gt;//Make sure something returned&lt;/li&gt;
	&lt;li&gt;assertTrue(compressedBuffer.array().length &amp;gt; 0);&lt;/li&gt;
	&lt;li&gt;//Make sure the compressed output is smaller then the original&lt;/li&gt;
	&lt;li&gt;assertTrue(compressedBuffer.array().length &amp;lt; inputByteArray.length);&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;ByteBuffer decompressedBuffer = codec.decompress(compressedBuffer);&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;//The original array should be the same length as the decompressed array&lt;/li&gt;
	&lt;li&gt;assertTrue(decompressedBuffer.array().length == inputByteArray.length);&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;//Every byte in the outputByteArray should equal every byte in the input array&lt;/li&gt;
	&lt;li&gt;byte[] outputByteArray = decompressedBuffer.array();&lt;/li&gt;
	&lt;li&gt;for (int i = 0; i &amp;lt; inputByteSize; i++) 
{
-	      inputByteArray[i] = outputByteArray[i];
-	    }&lt;/li&gt;
	&lt;li&gt;}&lt;br/&gt;
-}&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16679949" author="jira-bot" created="Thu, 8 Nov 2018 16:09:42 +0000"  >&lt;p&gt;Commit 409dac80e9e042f308d097f64b496df122c58dd2 in avro&apos;s branch refs/heads/master from jacobtolar&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=409dac8&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=409dac8&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2245&quot; title=&quot;Java codec testing improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2245&quot;&gt;&lt;del&gt;AVRO-2245&lt;/del&gt;&lt;/a&gt; Improve java tests for compression codecs&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 18 Oct 2018 16:52:39 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            10 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3zdfj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-2246] Enable Travis-CI for Apache Avro</title>
                <link>https://issues.apache.org/jira/browse/AVRO-2246</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;We would like to enable Travis CI for Apache Avro to run tests on each commit and PR&apos;s. Thanks!&lt;/p&gt;</description>
                <environment></environment>
        <key id="13193038">AVRO-2246</key>
            <summary>Enable Travis-CI for Apache Avro</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21148&amp;avatarType=issuetype">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="Fokko">Fokko Driesprong</reporter>
                        <labels>
                    </labels>
                <created>Sat, 20 Oct 2018 13:36:48 +0000</created>
                <updated>Tue, 23 Oct 2018 12:48:18 +0000</updated>
                            <resolved>Tue, 23 Oct 2018 12:48:18 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            13 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3zg2f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
