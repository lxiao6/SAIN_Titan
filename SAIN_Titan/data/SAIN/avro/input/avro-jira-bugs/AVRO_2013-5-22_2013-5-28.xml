<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:18:45 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2013-5-22+AND+created+%3C%3D+2013-5-28+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="3" total="3"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1338] Rewrite records with a reader schema different from the writer schema without losing fields from writer schema.</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1338</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Record R is written using schema S1:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;S1&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;record Record {
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I read R using a my own reader schema S2:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;S2&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;record Record {
  string s = &quot;&quot;;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Rewriting R using S2 will discard fields from S1 that are unknown in S2 (that is Record.i is lost).&lt;/p&gt;

&lt;p&gt;Ideally, there would be a way to maintain fields from S1 that are invisible through S2.&lt;br/&gt;
Writing R back without such loss implies merging S1 and S2 into a single schema that contains all fields from S1 and all fields from S2:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;Merged(S1,S2)&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;record Record {
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0;
  string s = &quot;&quot;;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12649040">AVRO-1338</key>
            <summary>Rewrite records with a reader schema different from the writer schema without losing fields from writer schema.</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="kryzthov">Christophe Taton</reporter>
                        <labels>
                    </labels>
                <created>Thu, 23 May 2013 05:10:28 +0000</created>
                <updated>Thu, 23 May 2013 05:14:21 +0000</updated>
                                            <version>1.7.2</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>2</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>329368</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 35 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ktpr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>329703</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1339] AvroSequenceFile is always uncompressed</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1339</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;It appears that AvroSequenceFile is not passing compression type/codec info down to the SequenceFile.Writer. This is because AvroSequenceFile.Writer is making a direct call to SequenceFile.Writer&apos;s public constructor rather than using one of the SequenceFile createWriter factory methods&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apache/avro/blob/trunk/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSequenceFile.java#L532&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/blob/trunk/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSequenceFile.java#L532&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a bit of workaround code that I came up with&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;AvroSequenceFile.Writer.Options options = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AvroSequenceFile.Writer.Options()
  .withConfiguration(hdfsInfo.getConf())
  .withFileSystem(hdfsInfo.getFileSystem())
  .withOutputPath(hdfsInfo.getPath())
  .withCompressionType(configuration.getCompressionType())
  .withCompressionCodec(configuration.getCompressionCodec().getCodec())
  .withProgressable(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Progressable() {
      @Override
      &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void progress(){

      }
  })
  .withKeySchema(configuration.getKeySchema())
  .withValueSchema(configuration.getValueSchema());

&lt;span class=&quot;code-comment&quot;&gt;// Have to &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; here b/c it&apos;s hidden in a &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; method :(
&lt;/span&gt;Metadata metadata = options.getMetadata();
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; != configuration.getKeySchema()) {
  metadata.set(AvroSequenceFile.METADATA_FIELD_KEY_SCHEMA, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Text(configuration.getKeySchema().toString()));
}
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; != configuration.getValueSchema()) {
  metadata.set(AvroSequenceFile.METADATA_FIELD_VALUE_SCHEMA, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Text(configuration.getValueSchema().toString()));
}

&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; SequenceFile.createWriter(
    options.getFileSystem(),
    options.getConfigurationWithAvroSerialization(),
    options.getOutputPath(),
    options.getKeyClass(),
    options.getValueClass(),
    options.getBufferSizeBytes(),
    options.getReplicationFactor(),
    options.getBlockSizeBytes(),
    options.getCompressionType(),
    options.getCompressionCodec(),
    options.getProgressable(),
    metadata);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I used this code to write a BZIP2 block compressed sequence file, and was able to read it using the Avro mapreduce classes just fine.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12649113">AVRO-1339</key>
            <summary>AvroSequenceFile is always uncompressed</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="mumrah">David Arthur</reporter>
                        <labels>
                    </labels>
                <created>Thu, 23 May 2013 13:02:04 +0000</created>
                <updated>Sun, 30 Dec 2018 04:17:16 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>329440</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 35 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ku5b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>329775</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1340] use default to allow old readers to specify default enum value when encountering new enum symbols</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1340</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The schema resolution page says:&lt;/p&gt;

&lt;p&gt;&amp;gt; if both are enums:&lt;br/&gt;
&amp;gt; if the writer&apos;s symbol is not present in the reader&apos;s enum, then an&lt;br/&gt;
error is signalled.&lt;/p&gt;

&lt;p&gt;This makes it difficult to use enum&apos;s because you can never add a enum value and keep old reader&apos;s compatible. Why not use the default option to refer to one of enum values so that when a old reader encounters a enum ordinal it does not recognize, it can default to the optional schema provided one. If the old schema does not provide a default then the older reader can continue to fail as it does today.&lt;/p&gt;</description>
                <environment>&lt;p&gt;N/A&lt;/p&gt;</environment>
        <key id="12649437">AVRO-1340</key>
            <summary>use default to allow old readers to specify default enum value when encountering new enum symbols</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="abellemare">Adam Bellemare</assignee>
                                    <reporter username="jdonofrio">Jim Donofrio</reporter>
                        <labels>
                    </labels>
                <created>Sat, 25 May 2013 05:35:30 +0000</created>
                <updated>Mon, 14 Jan 2019 15:36:43 +0000</updated>
                            <resolved>Wed, 2 May 2018 16:57:41 +0000</resolved>
                                                    <fixVersion>1.9.0</fixVersion>
                                    <component>spec</component>
                        <due></due>
                            <votes>19</votes>
                                    <watches>25</watches>
                                                                <comments>
                            <comment id="15173944" author="zolyfarkas" created="Tue, 1 Mar 2016 15:57:04 +0000"  >&lt;p&gt;Taking the default value when receiving a undefined value is most likely not optimal.&lt;/p&gt;

&lt;p&gt;enhancing current enum to something like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; Suit {
  SPADES, DIAMONDS, CLUBS, HEARTS, @undefined UNDEFINED 
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where the undefined attribute will mark the enum val to use to resolve values that cannot be recognized?&lt;/p&gt;</comment>
                            <comment id="15257352" author="felixgv" created="Tue, 26 Apr 2016 00:56:21 +0000"  >&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;Until this issue gets fixed, it seems to me like Avro enums are close to useless, since there is no way to evolve them gracefully. Is there any interest in fixing this?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zolyfarkas&quot; class=&quot;user-hover&quot; rel=&quot;zolyfarkas&quot;&gt;Zoltan Farkas&lt;/a&gt;&apos;s suggestion probably makes sense, though I can imagine some people may have different opinions.&lt;/p&gt;

&lt;p&gt;In any case, until this is resolved, it would probably be safer to put a warning in the Avro documentation stating that enums are not evolvable and should thus be used only at the user&apos;s own risk.&lt;/p&gt;

&lt;p&gt;-F&lt;/p&gt;</comment>
                            <comment id="15323752" author="mtth" created="Fri, 10 Jun 2016 02:27:21 +0000"  >&lt;p&gt;Zoltan&apos;s suggestion makes sense.&lt;/p&gt;

&lt;p&gt;Alternatively we could allow each enum symbol to optionally declare another symbol to use if the original doesn&#8217;t exist in the reader&#8217;s schema (resolution could be transitive). It&#8217;s slightly more flexible since it allows aliasing to be done per symbol and defined when the new symbol is added (rather than when the union is initially created). A downside is that it can be more verbose.&lt;/p&gt;

&lt;p&gt;The JSON schema could look something like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-javascript&quot;&gt;{
  &#8220;type&#8221;: &#8220;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&#8221;,
  &#8220;name&#8221;: &#8220;Suit&#8221;,
  &#8220;symbols&#8221;: [&#8220;UNKNOWN&#8221;, &lt;span class=&quot;code-quote&quot;&gt;&quot;CLUBS&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;HEARTS&quot;&lt;/span&gt;, &#8220;SPADES&#8221;, &#8220;DIAMONDS&#8221;],
  &#8220;symbolAliases&#8221;: {
    &#8220;DIAMONDS&#8221;: &#8220;UNKNOWN&#8221;,
    &#8220;SPADES&#8221;: &#8220;UNKNOWN&quot;
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the IDL:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; Suit {
  UNKNOWN,
  CLUBS,
  HEARTS,
  SPADES ? UNKNOWN,
  DIAMONDS ? UNKNOWN
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="15566400" author="zolyfarkas" created="Tue, 11 Oct 2016 19:50:54 +0000"  >&lt;p&gt;makes sense, I create awhile ago a JIRA to add alias support for enum symbols, linked the jira... somebody still needs to do the work...&lt;/p&gt;</comment>
                            <comment id="15568443" author="zi" created="Wed, 12 Oct 2016 11:21:00 +0000"  >&lt;p&gt;I like the mechanism suggested by Matthieu, but I think declaring it as &quot;aliases&quot; is very misleading. Although creating an alias is one possible use case for this mechanism, specifying a fallback is a more typical one. Maybe name them fallback values instead?&lt;/p&gt;</comment>
                            <comment id="15571571" author="zolyfarkas" created="Thu, 13 Oct 2016 10:46:21 +0000"  >&lt;p&gt;Agree, fallback and alias are different concepts. Alias implies that it is the same thing with a different name.&lt;/p&gt;

&lt;p&gt;The more I think, I think using the default value declared for the field is the better way.&lt;/p&gt;

&lt;p&gt;for example in v1:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; Suit {
  UNKNOWN,
  CLUBS,
  HEARTS,
}
...
Suit field = UNKNOWN;
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And v2:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; Suit {
  UNKNOWN,
  CLUBS,
  HEARTS,
  SPADES,
  DIAMONDS
}
...
Suit field = UNKNOWN;
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Originally I though using something specific for the fallback, but thinking through all the use cases you always end up having with an enum with a &quot;UNKNOWN&quot; value which is always the right default value...&lt;/p&gt;

&lt;p&gt;Aliases should be used for the same purpose as field aliases. (improving names...)&lt;/p&gt;
</comment>
                            <comment id="15571729" author="zi" created="Thu, 13 Oct 2016 12:08:23 +0000"  >&lt;p&gt;A generic fallback mechanism would allow different fallback values for different enum values, while the default value mechanism allows only a single fallback value. I see two different questions that could justify the different approaches:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Generic fallback mechanism&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The question for the generic fallback mechanism is what is the use-case for different fallback values? I agree with the previous comment that in the Suit enum it wouldn&apos;t make sense the make DIAMONDS fall back to HEARTS, but I think this enum is not the best example. I can&apos;t imagine anyone creating this enum with just two of the suits and then realizing months later that the other two also needs to be added. I would suggest a different example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; Error {
  SUCCESS,
  READ_FAILURE,
  ABORTED
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the next release it may be necessary to make the different error conditions more specific. Using some pseudo-syntax this would give us:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; Error {
  SUCCESS,
  @deprecated READ_FAILURE,
  @deprecated ABORTED,
  FILE_NOT_FOUND ? READ_FAILURE,
  NO_PERMISSION_TO_READ_FILE ? READ_FAILURE,
  DISK_ERROR ? READ_FAILURE,
  CANCELLED_BY_USER ? ABORTED,
  TIMED_OUT ? ABORTED
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This would allow old code that can only differentiate between the READ_FAILURE and ABORTED states to still handle new error states properly.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Single fallback value mechanism&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The question for the single fallback value mechanism is whether it provides any other use-case than unknown values? I personally don&apos;t see any other use for a single fallback value than adding an UNKNOWN value, if you have something in mind, please let me know.&lt;/p&gt;

&lt;p&gt;I ask this question because if unknown values is the only use-case, then in my opinion we should have an unknown value mechanism instead of a fallback mechanism, as implementing an unknown value mechanism using the fallback mechanism involves a lot of boilerplate code and is error-prone. You always have to add an UNKNOWN value to every enum you ever plan to extend and specify it as the default value. If you forgot to add an UNKNOWN value, you are out of luck, because even if you add it later and specify it as the fallback value, the UNKNOWN enum value will be literally &lt;em&gt;unknown&lt;/em&gt; to old code and we are back at the original problem.&lt;/p&gt;</comment>
                            <comment id="15571807" author="davelatham" created="Thu, 13 Oct 2016 12:43:59 +0000"  >&lt;p&gt;I think the 95% case is the UNKNOWN value.  I have a reader and I just don&apos;t want it to fall over when some new values that I don&apos;t know about start showing up in my enum.  Having general, writer-specified fallback logic is certainly more powerful, but gets much more complex for people to understand.  What about if you have multiple versions of old readers floating around?  Are you going to define multiple levels of fall back?  To take &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zi&quot; class=&quot;user-hover&quot; rel=&quot;zi&quot;&gt;Zoltan Ivanfi&lt;/a&gt;&apos;s example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; Error {
  SUCCESS,
  @deprecated READ_FAILURE,
  @deprecated ABORTED,
  FILE_NOT_FOUND ? READ_FAILURE,
  @deprecated NO_PERMISSION_TO_READ_FILE ? READ_FAILURE,
  DISK_ERROR ? READ_FAILURE,
  CANCELLED_BY_USER ? ABORTED,
  TIMED_OUT ? ABORTED
  AUTHENTICATION_ERROR ? NO_PERMISSION_TO_READ_FILE
  AUTHORIZATION_ERROR ? NO_PERMISSION_TO_READ_FILE
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we need to parse it as a graph, and outlaw cycles?&lt;/p&gt;

&lt;p&gt;I don&apos;t think it&apos;s worth the complexity.  We should start with a simple default or UNKNOWN value for readers who want to be able to handle unknown values, and see if in practice this is still a problem for people.&lt;/p&gt;</comment>
                            <comment id="15571887" author="zi" created="Thu, 13 Oct 2016 13:19:05 +0000"  >&lt;p&gt;I agree that the generic fallback mechanism may be overkill, I just argued that even though it is not useful for card suits, it can make sense with different types of enums.&lt;/p&gt;

&lt;p&gt;My main concern about introducing a default value for unknown values is that 1) it requires writing boiler-plate code, but 2) this requirement is not enforced and if the boiler-plate is not added initially it is impossible to handle the situation later. On the other hand, even with these shortcomings, the possibility to specify a default value is still better than the current situation.&lt;/p&gt;</comment>
                            <comment id="15571929" author="davelatham" created="Thu, 13 Oct 2016 13:34:32 +0000"  >&lt;p&gt;I think that&apos;s similar to other defaults in Avro.  If you don&apos;t have a default value for a field, and the writer changes the schema so that you can&apos;t find a value for it, you get an error.  If you want to be forward compatible - make a default and handle it.&lt;/p&gt;</comment>
                            <comment id="15571954" author="zi" created="Thu, 13 Oct 2016 13:42:50 +0000"  >&lt;p&gt;You&apos;re right, I&apos;m convinced. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15691842" author="githubbot" created="Thu, 24 Nov 2016 01:08:31 +0000"  >&lt;p&gt;GitHub user ksenji opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/163&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/163&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: use default to allow old readers to specify default enum v&#8230;&lt;/p&gt;

&lt;p&gt;    &#8230;alue when encountering new enum symbols&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/ksenji/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/ksenji/avro&lt;/a&gt; master&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/163.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/163.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #163&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit f7c775b347150e36f3200516dbce9e7e049506eb&lt;br/&gt;
Author: ksenji &amp;lt;ksenji@ebay.com&amp;gt;&lt;br/&gt;
Date:   2016-11-24T00:56:26Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: use default to allow old readers to specify default enum value when encountering new enum symbols&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="15859221" author="da77a" created="Thu, 9 Feb 2017 08:50:39 +0000"  >&lt;p&gt;An enum (enumerated type) is, type theoretically, a tagged union of unit types. Interestingly, in Avro, the binary representation of&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;enum&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-javascript&quot;&gt;{
  &#8220;type&#8221;: &#8220;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&#8221;,
  &#8220;name&#8221;: &#8220;Suit&#8221;,
  &#8220;symbols&#8221;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;CLUBS&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;HEARTS&quot;&lt;/span&gt;, &#8220;SPADES&#8221;, &#8220;DIAMONDS&#8221;]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;union of unit types&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-javascript&quot;&gt;[ 
{ &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;CLUBS&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [] },
{ &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;HEARTS&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [] },
{ &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;SPADES&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [] },
{ &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;DIAMONDS&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [] }
]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is the same.&lt;/p&gt;

&lt;p&gt;This gives a way (when using the union representation) to extend the enumeration and map new symbols (record names) to an existing one IF the reader schema is updated with aliases for the new symbols - but then if the reader can be updated, why not just update it to be the new enum schema...&lt;/p&gt;

&lt;p&gt;Which is where the suggestion in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1347&quot; title=&quot;Improve name and alias matching for named schemas&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1347&quot;&gt;AVRO-1347&lt;/a&gt; to improve name and alias matching for named schema (by allowing/using aliases in the WRITER schema) and which has been noted to allow unions in general to be extended starts to look like &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mtth&quot; class=&quot;user-hover&quot; rel=&quot;mtth&quot;&gt;Matthieu Monsch&lt;/a&gt; suggestion to have (writer) aliases for enum symbols and suggests a way to spell (in a writer schema) the name of a symbol that has a substitution (alias) to use if the reader schema does not include the symbol:&lt;/p&gt;

&lt;p&gt;An enum schema symbols list is represented as:  &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;lt;symbol&amp;gt;,&amp;lt;symbol&amp;gt;..,&amp;lt;symbol&amp;gt;&amp;#93;&lt;/span&gt;  where &amp;lt;symbol&amp;gt; is a string. If &amp;lt;symbol&amp;gt; were allowed to be an object having a name and an (optional) aliases field one could do this: &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;enum with aliases&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-javascript&quot;&gt;{
  &#8220;type&#8221;: &#8220;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&#8221;,
  &#8220;name&#8221;: &#8220;Suit&#8221;,
  &#8220;symbols&#8221;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;CLUBS&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;HEARTS&quot;&lt;/span&gt;, &#8220;SPADES&#8221;, &#8220;DIAMONDS&#8221;, {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;JOKERS&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;aliases&quot;&lt;/span&gt;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;CLUBS&quot;&lt;/span&gt;] } ]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in a new writer schema that adds jokers as a distinct suite but, with a fallback so that if a joker is ever read by an old reader, it will be treated as though it were clubs...&lt;/p&gt;

&lt;p&gt;It seems obvious that the symbols are the (unit type) fields of the enum &quot;union&quot; and the syntax and semantics for extending should be the same as any other union - and the fact that unions are not extensibe is the same problem (and could reasonably be fixed the same way i.e. allowing writer alias to be used when resolving).&lt;/p&gt;</comment>
                            <comment id="15859223" author="da77a" created="Thu, 9 Feb 2017 08:55:14 +0000"  >&lt;p&gt;Using alias specified in writer schema allows union evolution (extension) and by extension, enum extension (viewed as union of unit types).&lt;/p&gt;</comment>
                            <comment id="15859764" author="cutting" created="Thu, 9 Feb 2017 16:40:31 +0000"  >&lt;p&gt;A constaint on the design of new schema features is that they be both forward and backward compatible, unless we wish to trigger a major, Avro 2.0, release.  In this case, an implementation that did not know about this feature would not be able to read data that used this feature.  So new enum features cannot alter the syntax or semantics of the &quot;symbols&quot; but should probably rather add new attributes.&lt;/p&gt;</comment>
                            <comment id="15861056" author="da77a" created="Fri, 10 Feb 2017 10:30:58 +0000"  >&lt;p&gt;Anyone who needs this feature (the ability to extend enums) by definition needs new implementations. As use of the feature is entirely optional I don&apos;t really understand the rationale for this requiring an Avro 2.0 release. But ok. I&apos;m just looking for a way to get this to progress. &lt;/p&gt;

&lt;p&gt;What WOULD be an acceptable change? I expect the pull request by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ksenji&quot; class=&quot;user-hover&quot; rel=&quot;ksenji&quot;&gt;Kishore Senji&lt;/a&gt; is not ok in its current form as it changes the semantics of specifying a default value; requires that any extensible enum have a default value (something it wouldn&apos;t necessarily have); and requires that unknown values be mapped to the default (I can easily imagine cases where the value I want to default to is not the value I want if I read a value I don&apos;t expect). That said, its better than no extensibility.&lt;/p&gt;

&lt;p&gt;Whatever it is, I need it to actually make it into an Avro release and working for multiple languages (C++, java and javascript) to truly solve my problem, so guidance on what would potentially be acceptable would help....&lt;/p&gt;
</comment>
                            <comment id="15861536" author="cutting" created="Fri, 10 Feb 2017 16:58:15 +0000"  >&lt;p&gt;Currently implementations can read data written by any other implementation, provided they use the same schema.  For example, Java&apos;s GenericData can read any Avro data file, as can other implementations that don&apos;t depend on generated code.&lt;/p&gt;

&lt;p&gt;Schema evolution has limits.  Among these are that enums cannot easily evolve.  An attempt to read data with an altered enum schema may currently fail.  We&apos;d like to improve that here.  But, in doing so, we should not make uses that don&apos;t require schema evolution fail.  Changing the syntax of enums as you proposed would make that schema unparseable by existing implementations.&lt;/p&gt;

&lt;p&gt;The syntax that Matthieu suggested above is compatible and I believe semantically equivalent to your proposal.  Or, instead of a list of aliases, one might designate an extra symbol to be used when an unknown symbol is encountered, e.g.:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{
  &#8220;type&#8221;: &#8220;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&#8221;,
  &#8220;name&#8221;: &#8220;Suit&#8221;,
  &#8220;symbols&#8221;: [&#8220;UNKNOWN&#8221;, &lt;span class=&quot;code-quote&quot;&gt;&quot;CLUBS&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;HEARTS&quot;&lt;/span&gt;, &#8220;SPADES&#8221;, &#8220;DIAMONDS&#8221;],
  &#8220;extra&#8221;:  &#8220;UNKNOWN&#8221;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="16137220" author="zolyfarkas" created="Tue, 22 Aug 2017 19:11:11 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; what do you thing about the following:&lt;/p&gt;

&lt;p&gt;1)  Symbol aliases example to correct misspellings. (similar to field aliasses):  &lt;/p&gt;

&lt;p&gt; v1:&lt;/p&gt;

 &lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; { &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Suit&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt; : [&lt;span class=&quot;code-quote&quot;&gt;&quot;SPADES&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;HEARTS&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;DIAMONDS&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;CLUS&quot;&lt;/span&gt;]
 }
 &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; v2 (correcting CLUS):&lt;/p&gt;

 &lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; { &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Suit&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt; : [&lt;span class=&quot;code-quote&quot;&gt;&quot;SPADES&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;HEARTS&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;DIAMONDS&quot;&lt;/span&gt;, &quot;CLUB&#8221;]
   &#8220;symbolAliasses&#8221; : {
       &#8220;CLUB&#8221; : [&#8220;CLUS&#8221;]
   }
 }
 &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; v3 (correcting CLUB):&lt;/p&gt;

 &lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; { &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Suit&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt; : [&lt;span class=&quot;code-quote&quot;&gt;&quot;SPADES&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;HEARTS&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;DIAMONDS&quot;&lt;/span&gt;, &quot;CLUBS&#8221;]
   &#8220;symbolAliasses&#8221; : {
       &#8220;CLUBS&#8221; : [&#8220;CLUS&#8221;, &#8220;CLUB&#8221;]
   }
 }
 &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; sample conversion:&lt;/p&gt;

&lt;p&gt; v1: &lt;/p&gt;
{ &#8220;val&#8221; : &#8220;CLUS&#8221;}
&lt;p&gt; &amp;lt;-&amp;gt; v3: &lt;/p&gt;
{ &#8220;val&#8221; : &#8220;CLUBS&#8221; }

&lt;p&gt; the following enum schema would be illegal:&lt;/p&gt;

 &lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; { &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Suit&quot;&lt;/span&gt;, 
   &lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt; : [&lt;span class=&quot;code-quote&quot;&gt;&quot;SPADES&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;HEARTS&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;DIAMONDS&quot;&lt;/span&gt;, &quot;CLUBS&#8221;]
   &#8220;symbolAliasses&#8221; : {
       &#8220;CLUBS&#8221; : [&#8220;CLUS&#8221;, &#8220;CLUB&#8221;, &#8220;SPADES&#8221;]
   }
 }
 &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; since it contains a duplicate definition. (&#8220;SPADES&#8221;, &#8220;CLUBS&#8221;)&lt;/p&gt;

&lt;p&gt;2) Evolution example with a fallback symbol:&lt;/p&gt;

&lt;p&gt; V1:&lt;/p&gt;

 &lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; { &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Suit&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt; : [&#8220;UNKNOWN&#8221;, &#8221;SPADES&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;HEARTS&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;DIAMONDS&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;CLUBS&#8221;],
   &#8220;symbolAliasses&#8221; : {
       &#8220;CLUBS&#8221; : [&#8220;CLUS&#8221;, &#8220;CLUB&#8221;]
   },
   &#8220;fallbackSymbol&#8221; : &#8220;UNKNOWN&#8221;
 }
 &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; and a record using the above enum:&lt;/p&gt;

 &lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; {
   &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &#8220;Example&#8221;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [
     {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &#8220;enumValue&#8221;,
       &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &#8220;Suit&#8221;,
       &#8220;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&#8221; : &#8220;SPADES&#8221;},
   ]
 }
 &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; V2 (adding &quot;NEWVAL&quot; symbol):&lt;/p&gt;

 &lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; { &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Suit&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt; : [&#8220;UNKNOWN&#8221;, &#8221;SPADES&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;HEARTS&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;DIAMONDS&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;CLUBS&#8221;, &#8220;NEWVAL&#8221;]
   &#8220;symbolAliasses&#8221; : {
       &#8220;CLUBS&#8221; : [&#8220;CLUS&#8221;, &#8220;CLUB&#8221;],
   },
   &#8220;fallbackSymbol&#8221; : &#8220;UNKNOWN&#8221;
 }
 &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; V3 (removing &quot;SPADES&quot; symbol):&lt;/p&gt;

 &lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; { &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Suit&quot;&lt;/span&gt;,
   &lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt; : [&#8220;UNKNOWN&#8221;,  &lt;span class=&quot;code-quote&quot;&gt;&quot;HEARTS&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;DIAMONDS&quot;&lt;/span&gt;, &quot;CLUBS&#8221;, &#8220;NEWVAL&#8221;]
   &#8220;symbolAliasses&#8221; : {
       &#8220;CLUBS&#8221; : [&#8220;CLUS&#8221;, &#8220;CLUB&#8221;],
   },
   &#8220;fallbackSymbol&#8221; : &#8220;UNKNOWN&#8221;
 }
 &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt; sample conversions:&lt;/p&gt;

&lt;p&gt; v2 : &lt;/p&gt;
{ &#8220;enumValue&#8221; : &#8220;NEWVAL&#8221; }
&lt;p&gt; -&amp;gt; v1 : &lt;/p&gt;
{&#8220;enumValue&#8221; : &#8220;UNKNOWN&#8221;}

&lt;p&gt; v1: &lt;/p&gt;
{&#8220;enumValue&#8221; : &#8220;UNKNOWN&#8221;}
&lt;p&gt; -&amp;gt; v2  : &lt;/p&gt;
{&#8220;enumValue&#8221; : &#8220;UNKNOWN&#8221;}

&lt;p&gt; v1: &lt;/p&gt;
{&#8220;enumValue&#8221; : &#8220;SPADES&#8221;}
&lt;p&gt; -&amp;gt; v3  : &lt;/p&gt;
{&#8220;enumValue&#8221; : &#8220;UNKNOWN&#8221;}

&lt;p&gt; would this be acceptable?&lt;/p&gt;
</comment>
                            <comment id="16142833" author="zolyfarkas" created="Sat, 26 Aug 2017 14:56:34 +0000"  >&lt;p&gt;Anyone opinions on my previous suggestion?&lt;br/&gt;
I have implemented the above at: &lt;a href=&quot;https://github.com/zolyfarkas/avro/pull/3/files&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/zolyfarkas/avro/pull/3/files&lt;/a&gt;&lt;br/&gt;
(this PR is against my fork which is a bit off sync with the official, but close enough)&lt;br/&gt;
thanks!&lt;/p&gt;</comment>
                            <comment id="16143120" author="felixgv" created="Sun, 27 Aug 2017 14:27:08 +0000"  >&lt;p&gt;Can you please describe the compatibility rules for changing not just &quot;symbols&quot; but also for changing &quot;symbolAliases&quot; and &quot;fallbackSymbol&quot;?&lt;/p&gt;

&lt;p&gt;Can v1 have no &quot;fallbackSymbol&quot;, v2 define &quot;fallbackSymbol&quot;:&quot;SPADES&quot; and then v3 define &quot;fallbackSymbol&quot;:&quot;HEART&quot;?&lt;/p&gt;

&lt;p&gt;If I were to run the compatibility checker on those schemas, would they appear to be compatible?&lt;/p&gt;

&lt;p&gt;The same types of questions can be constructed for &quot;symbolAliases&quot;...&lt;/p&gt;

&lt;p&gt;I think the generic fallback mechanism is a little complicated to reason about and may not be worth it if it&apos;s only useful for 5% of cases. Having a proper &quot;default&quot; mechanism for unknown values is definitely the biggest pain point in Avro. In fact, in our project, we maintain enums in code but always encode them as int in Avro, and we recommend every other project to do the same, otherwise it is code smell. But fixing typos or having fancy fallback rules doesn&apos;t strike me as a particularly compelling use case, and is probably not worth adding schema and compatibility complexity for...&lt;/p&gt;

&lt;p&gt;BTW, why not name &quot;fallbackSymbol&quot; as &quot;default&quot;, to keep it inline with regular Avro syntax?&lt;/p&gt;</comment>
                            <comment id="16143153" author="zolyfarkas" created="Sun, 27 Aug 2017 16:24:54 +0000"  >&lt;p&gt;FELIX&amp;gt; Can v1 have no &quot;fallbackSymbol&quot;, v2 define &quot;fallbackSymbol&quot;:&quot;SPADES&quot; and then v3 define &quot;fallbackSymbol&quot;:&quot;HEART&quot;?&lt;/p&gt;

&lt;p&gt;Z&amp;gt;Yes, In the case above if v2 adds a symbol that is not present in v1, a v2 record will not be convertible to v1, but it will be the other way around. Having v2 and v3 with different fallback symbols would be fine with the logic that when converting records to v2 and v3 unknown symbols will be converted to different symbols...&lt;/p&gt;

&lt;p&gt;The symbol aliases the way I described and implemented above allows only the renaming of a enum symbol in a backwards compatible matter. (A alias is just another name for the same thing like with field aliasses)&lt;br/&gt;
if you have enum symbol BADNAME you can rename it in v+1: CORRECT_NAME with symbolAliasses : &quot;CORRECT_NAME&quot; : &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;BADNAME&amp;quot;&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;a example of how this would work you can see at: &lt;a href=&quot;https://github.com/zolyfarkas/avro/pull/3/files#diff-e7505abebad7702fa59c473f4e976b0fR41&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/zolyfarkas/avro/pull/3/files#diff-e7505abebad7702fa59c473f4e976b0fR41&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;FELIX&amp;gt;why not name &quot;fallbackSymbol&quot; as &quot;default&quot;, to keep it inline with regular Avro syntax?&lt;/p&gt;

&lt;p&gt;Z&amp;gt; This does not feel like a default value... currently default values apply only to fields... for we would declare a field as:&lt;br/&gt;
Enum field = &quot;SPADE&quot;&lt;br/&gt;
but fallbackSymbol would be &quot;UNKNOWN&quot;.&lt;br/&gt;
I am not sure fallbackSymbol is the best name, I am open for any suggestions for: &quot;symbol to use when we don&apos;t have a match&quot;. Default for me means &quot;symbol to use when no symbol is provided&quot;...&lt;/p&gt;

&lt;p&gt;let me know if it makes sense....&lt;/p&gt;
</comment>
                            <comment id="16143160" author="felixgv" created="Sun, 27 Aug 2017 16:38:15 +0000"  >&lt;p&gt;I am not convinced that it should be compatible to change &quot;fallbackSymbol&quot;. Let&apos;s take a more realistic example than cards to illustrate the point.&lt;/p&gt;

&lt;p&gt;V1:&lt;br/&gt;
&quot;name&quot;:&quot;httpResponseCode&quot;,&lt;br/&gt;
&quot;symbols&quot;:&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;UNKNOWN&amp;quot;, &amp;quot;200&amp;quot;, &amp;quot;404&amp;quot;, &amp;quot;500&amp;quot;&amp;#93;&lt;/span&gt;,&lt;br/&gt;
&quot;fallbackSymbol&quot;: &quot;UNKNOWN&quot;&lt;/p&gt;

&lt;p&gt;V2:&lt;br/&gt;
// same, except:&lt;br/&gt;
&quot;fallbackSymbol&quot;:&quot;500&quot;&lt;/p&gt;

&lt;p&gt;This is a significant semantic difference in the data definition. I used to be able to throw new HTTP codes into the enum and expect that non-upgraded consumers had to implement a sensible unknown strategy for them. But then in V2, I am changing the contract so that it will treat any unknown codes as 500s (internal server errors). A redirect (30x) is a non-error code, and I don&apos;t want it to be assumed to be an error.&lt;/p&gt;

&lt;p&gt;Of course, this is use case-dependent. There could be cases where changing the fall-back is sensible. But I think it could lead to confusing behavior in other cases...&lt;/p&gt;</comment>
                            <comment id="16143186" author="zolyfarkas" created="Sun, 27 Aug 2017 18:37:45 +0000"  >&lt;p&gt;In you example if v2 symbols are identical with v1 symbols, converting from v1 &amp;lt;-&amp;gt; v2 will never involve the fallbackValue as such conversion will correct. But if  we have v3:&lt;/p&gt;

&lt;p&gt;V3:&lt;br/&gt;
&quot;name&quot;:&quot;httpResponseCode&quot;,&lt;br/&gt;
&quot;symbols&quot;:&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;UNKNOWN&amp;quot;, &amp;quot;200&amp;quot;, &amp;quot;404&amp;quot;, &amp;quot;500&amp;quot;, &amp;quot;300&amp;quot;&amp;#93;&lt;/span&gt;,&lt;br/&gt;
&quot;fallbackSymbol&quot;: &quot;UNKNOWN&quot;&lt;/p&gt;

&lt;p&gt;When converting v3 &quot;300&quot; to v1 we get UNKNOWN and to v2 we would get &quot;500&quot;...  not pretty... but on the other hand code written against v1 and v2 might deal with this correctly... but yuck...&lt;/p&gt;

&lt;p&gt;All the use cases I have in mind, changing the fallback symbol does not make much sense... so unless somebody has a use case where fallback symbol change makes sense I am in favor of enforcing the fallbackSymbol to stay the same... one thing less to miss-use...&lt;/p&gt;
</comment>
                            <comment id="16143200" author="felixgv" created="Sun, 27 Aug 2017 19:46:01 +0000"  >&lt;p&gt;I think we&apos;re on the same page...&lt;/p&gt;

&lt;p&gt;Going from no fallback to a fallback is probably acceptable. But going from a fallback to another fallback, or from a fallback to no fallback is probably wrong...&lt;/p&gt;

&lt;p&gt;Another edge case to consider, however, is if removing enum values is acceptable. Is it only acceptable within enums that have a fallback drfined? What if I try to remove an enum value that is also selected as the fallback, is that prohibited in that case?&lt;/p&gt;

&lt;p&gt;There are lots of edge cases to define, which is why I&apos;m in favor of doing just a fallback and doing it right, than to also provide generic enum aliases and introducing even more edge case complexity...&lt;/p&gt;

&lt;p&gt;I&apos;d be curious to hear the others&apos; opinions on these latest proposals.&lt;/p&gt;</comment>
                            <comment id="16143208" author="zolyfarkas" created="Sun, 27 Aug 2017 20:10:19 +0000"  >&lt;p&gt;Removing a value would only be possible if a fallback exists.&lt;br/&gt;
This is in similar with removal of fields from records, you can remove a field as long as you have a default value defined.&lt;/p&gt;</comment>
                            <comment id="16146369" author="cutting" created="Wed, 30 Aug 2017 00:00:06 +0000"  >&lt;p&gt;I haven&apos;t had a chance to evaluate this thoroughly, but, in general, aliases seem like a good approach.&lt;/p&gt;

&lt;p&gt;I glanced at the patch and saw that you made EnumSchema public.  That breaks the convention that all Schema subclasses are private.  Instead, we&apos;ve historically added accessors to Schema that fail if the schema is not of the correct type.&lt;/p&gt;</comment>
                            <comment id="16147068" author="zolyfarkas" created="Wed, 30 Aug 2017 11:05:16 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; Thanks for reviewing the code, I can change the code with that approach.&lt;br/&gt;
I can prepare a PR against official master, but first I would like to know if the described functionality is conceptually sound.&lt;/p&gt;</comment>
                            <comment id="16151114" author="cutting" created="Fri, 1 Sep 2017 20:42:26 +0000"  >&lt;p&gt;Looking back at this issue&apos;s description, the problem is adding a symbol to an enum and being able to read items with the old schema which does not have that symbol.  Alternately put, the issue is being able to remove an enum symbol in a subsequent version of a schema.&lt;/p&gt;

&lt;p&gt;Adding a fallback symbol alone fixes this issue, doesn&apos;t it?  Aliases seem to be solving another problem, that of renaming symbols.  Perhaps that can be a separate issue, helping us to focus on the task here?&lt;/p&gt;</comment>
                            <comment id="16151176" author="zolyfarkas" created="Fri, 1 Sep 2017 21:29:05 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; There is &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1752&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-1752&lt;/a&gt; which is for aliases and it is linked to this JIRA, I am fine either way with 2 PRs or 1...&lt;/p&gt;</comment>
                            <comment id="16151515" author="felixgv" created="Sat, 2 Sep 2017 14:47:19 +0000"  >&lt;p&gt;It seems to me like symbolAliases offer a lot of overlap with the functionality of the fallbackSymbol. If the desired long-term direction is to have symbolAliases (which I&apos;m still not convinced is useful, but I wouldn&apos;t mind having them anyway) then it may be less confusing overall to have JUST symbolAliases and not the fallbackSymbol as well.&lt;/p&gt;

&lt;p&gt;Otherwise, having both creates yet another set of edge cases stemming from the combination of the two concepts. While it is definitely possible to come up with appropriate policies for all such edge cases and make the implementation compliant with those policies, I am still wary of the cognitive burden that it will place on developers. A simple API is a very valuable asset.&lt;/p&gt;

&lt;p&gt;For example: let&apos;s take the HTTP response code logging example from above, assuming &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zolyfarkas&quot; class=&quot;user-hover&quot; rel=&quot;zolyfarkas&quot;&gt;Zoltan Farkas&lt;/a&gt;&apos;s V3 as the starting point.&lt;/p&gt;

&lt;p&gt;V3:&lt;br/&gt;
&quot;name&quot;:&quot;httpResponseCode&quot;,&lt;br/&gt;
&quot;symbols&quot;:&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;UNKNOWN&amp;quot;, &amp;quot;200&amp;quot;, &amp;quot;404&amp;quot;, &amp;quot;500&amp;quot;, &amp;quot;300&amp;quot;&amp;#93;&lt;/span&gt;,&lt;br/&gt;
&quot;fallbackSymbol&quot;: &quot;UNKNOWN&quot;&lt;/p&gt;

&lt;p&gt;V4:&lt;br/&gt;
&quot;name&quot;:&quot;httpResponseCode&quot;,&lt;br/&gt;
&quot;symbols&quot;:&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;UNKNOWN&amp;quot;, &amp;quot;200&amp;quot;, &amp;quot;404&amp;quot;, &amp;quot;500&amp;quot;, &amp;quot;300&amp;quot;&amp;#93;&lt;/span&gt;,&lt;br/&gt;
&quot;symbolAliases&quot;:&lt;/p&gt;
{&quot;300&quot;:[&quot;301&quot;, &quot;302&quot;]}
&lt;p&gt;,&lt;br/&gt;
&quot;fallbackSymbol&quot;: &quot;UNKNOWN&quot;&lt;/p&gt;

&lt;p&gt;V5:&lt;br/&gt;
&quot;name&quot;:&quot;httpResponseCode&quot;,&lt;br/&gt;
&quot;symbols&quot;:&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;UNKNOWN&amp;quot;, &amp;quot;200&amp;quot;, &amp;quot;404&amp;quot;, &amp;quot;500&amp;quot;, &amp;quot;300&amp;quot;, &amp;quot;301&amp;quot;, &amp;quot;302&amp;quot;&amp;#93;&lt;/span&gt;,&lt;br/&gt;
&quot;symbolAliases&quot;:&lt;/p&gt;
{&quot;300&quot;:[&quot;301&quot;, &quot;302&quot;]}
&lt;p&gt;,&lt;br/&gt;
&quot;fallbackSymbol&quot;: &quot;UNKNOWN&quot;&lt;/p&gt;

&lt;p&gt;V6:&lt;br/&gt;
&quot;name&quot;:&quot;httpResponseCode&quot;,&lt;br/&gt;
&quot;symbols&quot;:&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;UNKNOWN&amp;quot;, &amp;quot;200&amp;quot;, &amp;quot;404&amp;quot;, &amp;quot;500&amp;quot;, &amp;quot;300&amp;quot;, &amp;quot;301&amp;quot;, &amp;quot;302&amp;quot;&amp;#93;&lt;/span&gt;,&lt;br/&gt;
&quot;fallbackSymbol&quot;: &quot;UNKNOWN&quot;&lt;/p&gt;

&lt;p&gt;Which of these schemas are supposed to be compatible with one another, and what is the outcome of sending 301 between the various combinations? Let&apos;s take a stab at it:&lt;/p&gt;

&lt;p&gt;V5-&amp;gt;V3: Do I use the writer&apos;s translation rule or the reader&apos;s? If I use the writer&apos;s, then my 301 will be read as 300, if I use the reader&apos;s, then it&apos;ll be read as UNKNOWN.&lt;/p&gt;

&lt;p&gt;V5-&amp;gt;V4: Same fallback and aliases on both the reader and writer. Which of the two rules take precedence over the other?&lt;/p&gt;

&lt;p&gt;V5-&amp;gt;V6: Both have 301 defined, so no special rules come into play.&lt;/p&gt;

&lt;p&gt;V6-&amp;gt;V3: 301 is definitely UNKNOWN.&lt;/p&gt;

&lt;p&gt;V6-&amp;gt;V4: Do I do the opposite as the V5-&amp;gt;V3 translation? i.e.: writer&apos;s rule changes 301 to UNKNOWN, reader&apos;s rule changes 301 to 300. Or do we instead disregard reader and writer as the criterion, and rather give precedence to one type of rule over the other (aliases take precedence over fallback, no matter which side they&apos;re defined on, or vice versa). Moving on.&lt;/p&gt;

&lt;p&gt;V6-&amp;gt;V5: Both have 301 defined, so no special rules come into play.&lt;/p&gt;

&lt;p&gt;&amp;#8211;&lt;/p&gt;

&lt;p&gt;3 of the above translations (V5-&amp;gt;V3, V5-&amp;gt;V4, V6-&amp;gt;V4) have ambiguous behaviour. Do we decide some translation rules for each of them and mark them as compatible? Or do we mark them as incompatible? Either of these seem to leave a bitter taste.&lt;/p&gt;

&lt;p&gt;I would much rather have just a single enum evolution mechanism, either fallback, or aliases, but not both.&lt;/p&gt;

&lt;p&gt;In that regard, treating the two as separate issues may prevent us from making a holistic design choice.&lt;/p&gt;</comment>
                            <comment id="16154041" author="cutting" created="Tue, 5 Sep 2017 17:42:15 +0000"  >&lt;p&gt;I don&apos;t see how aliases alone resolve this issue.  If someone adds a new symbol and writes new data containing it, what aliases would be used so that old code can read this new symbol?&lt;/p&gt;

&lt;p&gt;Unless I&apos;m missing something, aliases belong in a separate issue.  They don&apos;t enable addition and deletion of symbols, but rather renamings.  A uniform mechanism that handled both might be nice, but I don&apos;t see how aliases accomplish this, so until someone proposes such a mechanism, let&apos;s keep the issues separate.&lt;/p&gt;</comment>
                            <comment id="16154434" author="felixgv" created="Tue, 5 Sep 2017 21:54:04 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;I think I may not have been clear in how I was describing it. Here is a potential way that aliases can serve not only the use case of renaming fields, but also the default value use case:&lt;/p&gt;

&lt;p&gt;Let&apos;s assume that the new compatibility rule is that a schema adding a new enum value, must provide an alias from the new value to one of the old values. This would allow use cases such as:&lt;/p&gt;

&lt;p&gt;V3:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;httpResponseCode&quot;&lt;/span&gt;,
&lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt;:[&lt;span class=&quot;code-quote&quot;&gt;&quot;UNKNOWN&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;200&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;404&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;500&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;300&quot;&lt;/span&gt;]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;V5:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;httpResponseCode&quot;&lt;/span&gt;,
&lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt;:[&lt;span class=&quot;code-quote&quot;&gt;&quot;UNKNOWN&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;200&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;404&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;500&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;300&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;301&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;302&quot;&lt;/span&gt;],
&lt;span class=&quot;code-quote&quot;&gt;&quot;symbolAliases&quot;&lt;/span&gt;: {&lt;span class=&quot;code-quote&quot;&gt;&quot;300&quot;&lt;/span&gt;:[&lt;span class=&quot;code-quote&quot;&gt;&quot;301&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;302&quot;&lt;/span&gt;]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When performing the translation, a V3 reader armed with the V5 writer schema would be capable of reading the new enum values (301, 302) as if they were another value which they already know about (in this case, 300).&lt;/p&gt;

&lt;p&gt;This aliasing mechanism could be considered slightly more powerful than default values (also referred to as a fallback symbol in the above proposals) because they could basically allow different fallbacks for different enum values. For example:&lt;/p&gt;

&lt;p&gt;V7:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;httpResponseCode&quot;&lt;/span&gt;,
&lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt;:[&lt;span class=&quot;code-quote&quot;&gt;&quot;UNKNOWN&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;200&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;404&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;500&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;300&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;301&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;302&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;400&quot;&lt;/span&gt;],
&lt;span class=&quot;code-quote&quot;&gt;&quot;symbolAliases&quot;&lt;/span&gt;: {&lt;span class=&quot;code-quote&quot;&gt;&quot;300&quot;&lt;/span&gt;:[&lt;span class=&quot;code-quote&quot;&gt;&quot;301&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;302&quot;&lt;/span&gt;], &lt;span class=&quot;code-quote&quot;&gt;&quot;400&quot;&lt;/span&gt;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;UNKNOWN&quot;&lt;/span&gt;]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basically, in this model, it is the responsibility of the new schema to define how readers using the old schema will interact with data written using the new schema.&lt;/p&gt;

&lt;p&gt;It may be a little awkward, and too flexible for most use cases&apos; needs, but I think the above examples demonstrate how it can potentially serve as a &quot;default value&quot; mechanism as well as a renaming mechanism.&lt;/p&gt;

&lt;p&gt;I&apos;m not advocating for having aliases rather than default values BTW. I am arguing that having just one of the two mechanisms would be simpler to reason with than having both.&lt;/p&gt;</comment>
                            <comment id="16154531" author="cutting" created="Tue, 5 Sep 2017 23:06:55 +0000"  >&lt;p&gt;Felix, thanks for explaining how aliases can be used when adding new symbols.&lt;/p&gt;

&lt;p&gt;So we have three options: aliases alone, fallback alone, or both.&lt;/p&gt;

&lt;p&gt;Is there consensus that adding both aliases and a fallback symbol is overly complicated?  If so, then are there folks who strongly feel that fallback alone is not powerful enough?  If so then that might point to implementing aliases alone.&lt;/p&gt;</comment>
                            <comment id="16154576" author="zolyfarkas" created="Tue, 5 Sep 2017 23:45:16 +0000"  >&lt;p&gt;I am not sure I like a enum defined like:&lt;/p&gt;

&lt;p&gt;&quot;name&quot;:&quot;httpResponseCode&quot;,&lt;br/&gt;
&quot;symbols&quot;:&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;UNKNOWN&amp;quot;, &amp;quot;200&amp;quot;, &amp;quot;404&amp;quot;, &amp;quot;500&amp;quot;, &amp;quot;300&amp;quot;, &amp;quot;301&amp;quot;, &amp;quot;302&amp;quot;, &amp;quot;400&amp;quot;&amp;#93;&lt;/span&gt;,&lt;br/&gt;
&quot;symbolAliases&quot;: &lt;/p&gt;
{&quot;300&quot;:[&quot;301&quot;, &quot;302&quot;], &quot;400&quot;: [&quot;UNKNOWN&quot;]}

&lt;p&gt;this would imply that symbols: &quot;300&quot;, &quot;301&quot;, &quot;302&quot; are equivalent (an alias is just another name)... and 400 is equivalent with &quot;UNKNOWN&quot;... which does not seem right..&lt;/p&gt;

&lt;p&gt;this would allow things like:&lt;/p&gt;

&lt;p&gt;switch (myEnum) {&lt;br/&gt;
    case 300:&lt;br/&gt;
      dosomething&lt;br/&gt;
    case 301:&lt;br/&gt;
      dosomethingelse&lt;br/&gt;
}&lt;br/&gt;
which would be error prone..&lt;/p&gt;

&lt;p&gt;I think the enforcing the &quot;symbols&quot; to be distinct (applying aliases) might make sense...&lt;/p&gt;
</comment>
                            <comment id="16154592" author="felixgv" created="Tue, 5 Sep 2017 23:58:11 +0000"  >&lt;p&gt;They&apos;re equivalent only in so far as the reader doesn&apos;t know about the new enum values... then they can fall-back on an alias during schema evolution. But a reader that does know about an enum value would get precisely that value, not a (presumably less precise) alias.&lt;/p&gt;

&lt;p&gt;Or anyway, that&apos;s how I had understood the original proposal to work. I could have mistaken the intent, of course.&lt;/p&gt;

&lt;p&gt;There are a few general design choices to make as part of this proposal. One of the big choices, IMHO, is to decide whether ensuring changes are compatible is a responsibility of the reader or the writer? Or if both can define it, then which side takes precedence when evaluating the evolution rules? Once this is figured out, then the semantics of how to declare changes and fallbacks and aliases should become more evident...&lt;/p&gt;</comment>
                            <comment id="16249501" author="danabr" created="Mon, 13 Nov 2017 12:23:58 +0000"  >&lt;p&gt;One difference between the alias and fallback proposals, is that the former would affect the data format, whereas the latter would not. I think that makes the fallback proposal favorable.&lt;/p&gt;</comment>
                            <comment id="16325334" author="abellemare" created="Sat, 13 Jan 2018 21:07:34 +0000"  >&lt;p&gt;Avro enum &quot;UNKNOWN&quot; defaults has become extremely important to our company in the past while, especially as we&apos;re using Kafka and Avro integrations extensively. This ticket is very relevant to what we&apos;re doing. Here are my thoughts, let me know if I am missing something. I&apos;ve been following this thread for a while and I&apos;m hoping that I can help get it moving towards some form of resolution.&lt;/p&gt;



&lt;p&gt;enum values have a specific meaning tied to them. Aliasing works well in the following conditions:&lt;/p&gt;

&lt;p&gt;1) When the value added is entirely NEW to the data producer, and should therefore be aliased to UNKNOWN. If you alias it to an existing enum value you are redefining the data contract of that value. In this case a conversation should occur between the producer and the consumers of this data as it is now about renegotiating the data contract.&lt;/p&gt;

&lt;p&gt;2) When the new enum values to be added added are entirely a COMPLETE SUBSET of an existing enum. For example, if the producer produces all 3xx HttpResponseCode as 300, splitting the enum value into 300, 301 and 302 and aliasing them all to 300 makes sense. It was always 300, and adding more granularity to the current schema is OK as it maps directly back to the single, original enum value.&lt;/p&gt;

&lt;p&gt;The only real value I can see aliasing adding is for #2 above, as #1 is the same as having a default field for unknown values. #2 above is a scenario that I have not yet encountered, and I question how common it is. Without aliasing it would also be possible to work around that issue, simply by creating a new enum entry with the newly defined enum values and eventually phasing out the old one. Note that this would be highly specific to the scenario where you need to split an enum value into a complete subset of other values. Additions of enums can be done easily, as the UNKNOWN default value will simply be used by older reader schemas.&lt;/p&gt;

&lt;p&gt;Redefining enum values via aliasing can be extremely dangerous. For instance, if HttpResponseCode = 300 was always ONLY just 300, then aliasing 301 and 302 to it breaks the definition of the enum value and can have consequences for downstream consumers of this data. As it stands I have major concerns that adding aliasing to enum values will greatly weaken the &quot;data contract&quot; aspect of a given enum as it would normalize the redefinition of enum values in a way that is transparent to the consumers of the data. &lt;/p&gt;</comment>
                            <comment id="16325367" author="davelatham" created="Sat, 13 Jan 2018 22:53:14 +0000"  >&lt;p&gt;Is there anyone actually asking for aliasing for their application, or is it just an idea that people have been exploring that sounds interesting?&lt;/p&gt;

&lt;p&gt;Let&apos;s get a simple fallback/unknown value in as many people have been needing it.  Then consider aliasing separately if people want it and it&apos;s actually worth the complexity.&lt;/p&gt;</comment>
                            <comment id="16326252" author="abellemare" created="Mon, 15 Jan 2018 13:52:15 +0000"  >&lt;p&gt;I agree with Dave. I see that this ticket has been open for several years and no one has chimed in&#160; requiring aliasing of enum values.&lt;/p&gt;

&lt;p&gt;If a producer needs to split out an enum value into more granular enum values without aliasing, the simplest solution would be to keep the old enum and create a new, more granular enum. Set both of them accordingly (ie: HttpResponseCode: 300, NewHttpResponseCode &lt;span class=&quot;error&quot;&gt;&amp;#91;one of 300,301,302&amp;#93;&lt;/span&gt; ) and have the downstream consumers migrate in their own time. Though it is verbose, it is a contractually safe redefinition of the data contract as old consumers are not affected by the changes.&lt;/p&gt;

&lt;p&gt;Aliasing only partially solves the issue. The example that Zoltan gave above about multiple levels of fallback would still need to be addressed (&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zi&quot; class=&quot;user-hover&quot; rel=&quot;zi&quot;&gt;Zoltan Ivanfi&lt;/a&gt; added a comment - 13/Oct/16 12:08 ), as over time you would end up with multiple evolutions of enum values aliased to other values. Maintaining it would become very difficult as you would need to test that every new alias added doesn&apos;t alter the resolution of previous aliases. It would be easy to introduce a semantically-correct-but-logically-incorrect change to the aliases that invalidate the original data contract terms.&lt;/p&gt;

&lt;p&gt;At this point, the schema creator user would probably just give up, define a new enum with the current values and leave the complex nesting of aliasing behind in the old enum. This is functionally equivalent to simply just defining a new enum for any non-additive change (ie: breaking 300 into 300, 301, 302).&lt;/p&gt;

&lt;p&gt;Aliasing only seems to work for simple use-cases and seems quite attractive for that, but it opens up a large can of worms and doesn&apos;t really add any value that isn&apos;t already available in Avro.&lt;/p&gt;

&lt;p&gt;Can we move forward with just the simple fallback value?&lt;/p&gt;</comment>
                            <comment id="16326481" author="felixgv" created="Mon, 15 Jan 2018 18:05:32 +0000"  >&lt;p&gt;I personally do not perceive sufficient value in the alias proposal to warrant its complexity. My previous comments should not be construed as endorsements of the aliasing proposal, but rather, were simply to ensure that we fully considered the edge cases of these various mechanisms.&lt;/p&gt;

&lt;p&gt;I believe supporting a single &#8220;fallback symbol&#8221; per enum is much simpler and cleaner. It would seem very intuitive to me to annotate the enum field with &#8220;default&#8221; in order to specify such fallback symbol, but I know some people above commented on some implementation challenges of naming it as such, and thus proposed the different nomenclature of &#8220;fallback symbol&#8221;. I don&#8217;t fully grok why such challenges may exist, but it is fine either way I guess.&lt;/p&gt;

&lt;p&gt;First-class support for enum evolution would be a big boon for Avro, and hopefully the mechanism will be easy to reason about.&lt;/p&gt;</comment>
                            <comment id="16327480" author="cutting" created="Tue, 16 Jan 2018 18:00:45 +0000"  >&lt;p&gt;So it seems there&apos;s an emerging consensus to add a default value for enums but not aliases.&#160; Conveniently, there&apos;s also a patch by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ksenji%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;ksenji@gmail.com&quot;&gt;Kishore Senji&lt;/a&gt; that implements this.&#160; Rather than&#160;extend enum syntax,&#160;the patch uses the default from the field whose value is the enum, extending&#160;Avro&apos;s&#160;existing default mechanism&#160;to work for enums.&lt;/p&gt;

&lt;p&gt;Is that implementation acceptable?&#160; If not, what why, and what would be better?&lt;/p&gt;</comment>
                            <comment id="16327575" author="zolyfarkas" created="Tue, 16 Jan 2018 18:48:15 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;&#160;I believe the best place to define a fallback symbol is at type level (enum) (&quot;fallbackSymbol&quot;: &quot;SOME SYMBOL&quot;)&lt;/p&gt;

&lt;p&gt;field default value in my opinion is conceptually something different that a &quot;enum unknown value&quot;... and I believe it is error prone to assume field default is the right value when a unknown symbol is received...&lt;/p&gt;

&lt;p&gt;here is some example to try to explain what I mean:&lt;/p&gt;

&lt;p&gt;Lets have for example a record: Transaction with a enum field transactionType (type1, type2) with default value type1...&lt;/p&gt;

&lt;p&gt;if somebody extends this enum later with type3  it will be problematic since older versions of Transaction will treat this as type1 which will probably be really bad...&lt;/p&gt;

&lt;p&gt;To not have the above we can do:&lt;/p&gt;

&lt;p&gt;Transaction with a enum field transactionType (type1, type2, unknown) with default value unknown...&lt;br/&gt;
This will make extending the enum safer as long as developers use the right default value every time they use this enum.... which tells me that the right place this needs to be defined is at the type level... &lt;/p&gt;



</comment>
                            <comment id="16327640" author="cutting" created="Tue, 16 Jan 2018 19:24:40 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zolyfarkas&quot; class=&quot;user-hover&quot; rel=&quot;zolyfarkas&quot;&gt;Zoltan Farkas&lt;/a&gt;, couldn&apos;t one specify (type1, type2, unknown) with default of unknown regardless of whether the default is in the field or in the enum definition itself?&#160; Also, enums already support the default field value, in the case that the writer didn&apos;t have the enum field at all.&#160; The proposal is simply to extend it to the case where the writer&apos;s symbol didn&apos;t match any in the reader&apos;s enum.&#160; Do these cases need to be distinguished?&lt;/p&gt;

&lt;p&gt;The advantage I see to adding the default to the enum&apos;s schema definition is that it better localizes things: the default lives with the enum rather than with every use of it.&#160; Perhaps that&apos;s your point.&#160; In this case, I prefer it be called &quot;default&quot; rather than &quot;fallback&quot; since it&apos;s conceptually similar to a field&apos;s default (both are used when the writer&apos;s missing something from the reader&apos;s schema).&lt;/p&gt;

&lt;p&gt;Lastly, if we define it in the enum, then we need to decide how it interacts with the field&apos;s default value.&#160; My intuition is that the field&apos;s default should override the enum&apos;s default.&lt;/p&gt;</comment>
                            <comment id="16331144" author="abellemare" created="Thu, 18 Jan 2018 20:20:37 +0000"  >&lt;p&gt;I don&apos;t know how much clarity this will add, but I have tried to map out the two processes described above as best I can&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;field-default and enum-default(fallback)&lt;/li&gt;
	&lt;li&gt;field-default only&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1YkTBnHCBPGz2t0gQI3OioKS_xP9h9lq_a-gS2jSGFAc/edit?usp=sharing&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://docs.google.com/spreadsheets/d/1YkTBnHCBPGz2t0gQI3OioKS_xP9h9lq_a-gS2jSGFAc/edit?usp=sharing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems that this process works best with #1. It gives us both the ability to set an &quot;UNKNOWN&quot; value at the enum level, but to also allow individual readers of the data to determine their own defaults for system usage. Also, we can do handle different behaviour between missing enum values (not set by writer) and evolved or possible incorrect values. This way our consumer schema will look like:&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;,
&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : {
&#160;&#160;&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;,
&#160;&#160;&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;Bar&quot;&lt;/span&gt;,
&#160;&#160;&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;FieldDefault&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;EnumDefault&quot;&lt;/span&gt;],
&#160;&#160;&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;EnumDefault&quot;&lt;/span&gt;
&#160; },
&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;FieldDefault&quot;&lt;/span&gt;
}]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I would expect the enum value resolution to follow this order:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;If a field-default value is set, it must exist in the enum symbols. enum-default is also required to be in the symbols.&lt;/li&gt;
	&lt;li&gt;Reader field-default is applied if the value is not set by the writer&lt;/li&gt;
	&lt;li&gt;Reader enum-default (aka: fallback) is applied if the input symbol does not match any values in the reader enum symbols.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;My understanding is that the field-default must be applied before the enum-default to preserve existing functionality. We have to apply the field default for unset values before we can override it with a fallback symbol.&lt;/p&gt;

&lt;p&gt;Is my understanding of this correct?&lt;/p&gt;</comment>
                            <comment id="16331452" author="cutting" created="Thu, 18 Jan 2018 23:51:09 +0000"  >&lt;p&gt;I don&apos;t understand your &quot;None&quot; column.&#160; I see two cases:&lt;/p&gt;

&lt;p&gt;(1)&#160;A field with this name did not exist in the writer&apos;s schema.&#160; In the case of&#160;an enum-valued field, a default value, whether in the enum definition or field definition should be used. An error should be signalled if no default of either sort is specified.&lt;/p&gt;

&lt;p&gt;(2) The symbol written&#160;does not exist in the reader&apos;s schema.&#160; In this case also,&#160;a&#160;specified default should be used.&#160; If both are specifiable, the field&apos;s default should have priority over the enum&apos;s.&#160; We cannot require that the reader know of unknown symbols, that would defeat the purpose.&#160; We want to permit folks to be able to add &amp;amp; remove new symbols.&#160; An error should again only be thrown if no default is specified.&lt;/p&gt;

&lt;p&gt;So I don&apos;t see a significant difference in the semantics&#160;of a field default or an enum default.&#160; Permitting both allows more powerful scoping of defaults but adds complexity.&#160; Do folks need that power enough to justify the complexity?&lt;/p&gt;</comment>
                            <comment id="16331615" author="abellemare" created="Fri, 19 Jan 2018 02:03:53 +0000"  >&lt;p&gt;The &quot;None&quot; column was meant to indicate that there was no field with that name present. I have updated the doc to change &quot;None&quot; to &quot;No Field Present&quot;. This means the field did not exist in the writers schema.&lt;/p&gt;

&lt;p&gt;I think we are largely in agreement. The only point of contention I have is that in scenario 2 you listed above, using the field-default for an unknown symbol changes the existing functionality. Instead of an exception being thrown, the default value will be assigned.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&#160;&lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [ {
&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;,
&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : {
&#160;&#160;&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;,
&#160;&#160;&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;Bar&quot;&lt;/span&gt;,
&#160;&#160;&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;symbols&quot;&lt;/span&gt; : [ &lt;span class=&quot;code-quote&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;FieldDefault&quot;&lt;/span&gt;]
&#160; },
&#160; &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;FieldDefault&quot;&lt;/span&gt;
}]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the schema above is used currently and a Writer writes with Symbol &quot;C&quot;, upon reading the schema the Reader will throw an &quot;Error reading Avro: org.apache.avro.AvroTypeException: No match for C&quot; in my testing with the Java implementation. With the change you propose, it would not throw an exception but instead return &quot;FieldDefault&quot;, though the schema would be the same in both cases. Do I understand that scenario correctly? My only real concern is about breaking existing behaviour.&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;</comment>
                            <comment id="16331632" author="abellemare" created="Fri, 19 Jan 2018 02:17:31 +0000"  >&lt;p&gt;And to clarify, I don&apos;t need both for my use cases. I would be fine if the single default was the functionality from day 1, but I am only concerned about the change of behaviour.&lt;/p&gt;</comment>
                            <comment id="16332796" author="cutting" created="Fri, 19 Jan 2018 19:31:37 +0000"  >&lt;p&gt;I&apos;m not overly concerned about that compatibility change.&#160; But if we want to avoid it, we&#160;could&#160;use the field default only when the writer did not contain the field (1, above) and the enum&apos;s default only when the enum is missing the symbol (2, above).&#160;&#160;I think that&apos;s what you&apos;re assuming in the first spreadsheet.&lt;/p&gt;

&lt;p&gt;A few clarifications about the first spreadsheet: In rows 11, 12 &amp;amp; 13, I think you mean that the enum symbols are &quot;A,B,bar&quot;, not just &quot;A,B&quot;, right?&#160; But &quot;foo&quot; is never in the enum, right?&#160; And your &quot;Violates Rules&quot; are things that should be caught at schema-parse time, not while reading data, right?&lt;/p&gt;</comment>
                            <comment id="16334501" author="abellemare" created="Mon, 22 Jan 2018 16:26:23 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; &quot;I think that&apos;s what you&apos;re assuming in the first spreadsheet.&quot;&lt;br/&gt;
 Yes, that is correct.&lt;/p&gt;

&lt;p&gt;With regards to row 11, 12 &amp;amp; 13, yes, I have made a mistake and bar should be in the enum (as per the current field default rules). An correct, &quot;foo&quot; is never in the enum.&lt;br/&gt;
 &quot;Violates Rules&quot; should be caught at schema-parse time, not read time. I have updated the doc to clarify these issues.&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;I am okay with the compatibility change, where a reader that used to throw an exception on an unknown field would now simply use the default. Perhaps this should be up to the client to determine if they would prefer to throw the exception or if they would simply prefer to use the default.&lt;/p&gt;</comment>
                            <comment id="16336623" author="cutting" created="Wed, 24 Jan 2018 00:23:28 +0000"  >&lt;p&gt;I&apos;m warming to the idea that the field default is only used when there writer had no such field, and the enum default is used when the writer had an enum but with a symbol that&apos;s no longer present.&#160; I&apos;d also be fine if one default were used for both purposes.&lt;/p&gt;

&lt;p&gt;It sounds like we have designs that at least a couple of us find acceptable.&#160; Now we just need an implementation...&lt;/p&gt;</comment>
                            <comment id="16336659" author="felixgv" created="Wed, 24 Jan 2018 00:43:19 +0000"  >&lt;p&gt;I&apos;m glad to hear that we&apos;re nearing a conclusion to this (: !&lt;/p&gt;

&lt;p&gt;I&apos;ll be honest: I have not kept up with the spreadsheets and nuances of the past few posts.&lt;/p&gt;

&lt;p&gt;I&apos;d like to propose the following litmus test for the new design: Can&#160;one of you pretend I&apos;m an Avro user, and jot down&#160;a 30 second elevator pitch explaining what would I need to specify in my schema to do enum evolution in Avro?&lt;/p&gt;

&lt;p&gt;If it is possible to distill the compatibility rules in 30 seconds, then I think I would be onboard, no matter what it is (:&lt;/p&gt;

&lt;p&gt;If it proves impossible, I&#160;might still be onboard, but it may turn out to be a bittersweet resolution... API simplicity is very important.&lt;/p&gt;

&lt;p&gt;Hopefully I&apos;m not making unreasonable demands on you fine gentlemen.&lt;/p&gt;

&lt;p&gt;-F&lt;/p&gt;</comment>
                            <comment id="16337979" author="cutting" created="Wed, 24 Jan 2018 17:55:10 +0000"  >&lt;p&gt;The short version is, if you want something to be able to evolve, specify a default value for it.&#160; Fields already have default values, and this issue may add one to enums.&#160; If written data uses an enum symbol that&apos;s no longer present, currently things break.&#160; In the future, the default value would be used.&lt;/p&gt;</comment>
                            <comment id="16338445" author="felixgv" created="Wed, 24 Jan 2018 23:54:09 +0000"  >&lt;p&gt;But... do I need to specify the default value in the field or in the enum?&lt;/p&gt;</comment>
                            <comment id="16339565" author="cutting" created="Thu, 25 Jan 2018 18:04:18 +0000"  >&lt;p&gt;That depends on exactly how this gets implemented.&#160; One proposal is to extend the field default to serve both purposes, the other is to add an enum default for missing enum symbols.&#160; I now slightly prefer the latter.&#160; Stay tuned.&lt;/p&gt;</comment>
                            <comment id="16340986" author="abellemare" created="Fri, 26 Jan 2018 12:34:18 +0000"  >&lt;p&gt;I too prefer the latter. How does this come to consensus? I may be able to pull together a pull request to try this out.&lt;/p&gt;</comment>
                            <comment id="16343674" author="cutting" created="Mon, 29 Jan 2018 17:29:14 +0000"  >&lt;p&gt;In this case, consensus is the absence of dissent.&#160; It would be great if you could take a stab at it.&#160; Thanks!&lt;/p&gt;</comment>
                            <comment id="16394600" author="githubbot" created="Sun, 11 Mar 2018 18:54:43 +0000"  >&lt;p&gt;bellemare opened a new pull request #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added Enums to Defaults.&lt;/li&gt;
	&lt;li&gt;Enum Defaults are only applied to values which don&apos;t match the enum symbols.&lt;/li&gt;
	&lt;li&gt;Enum Defaults do not override any Field Default behaviour. Field Defaults are used when a reader reads a datum that does not have the Field defined (as is current behaviour).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   To see an example table of this behaviour, see Final Default &amp;amp; Fallback tab in:&lt;br/&gt;
   &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1YkTBnHCBPGz2t0gQI3OioKS_xP9h9lq_a-gS2jSGFAc/edit?usp=sharing&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://docs.google.com/spreadsheets/d/1YkTBnHCBPGz2t0gQI3OioKS_xP9h9lq_a-gS2jSGFAc/edit?usp=sharing&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16394601" author="abellemare" created="Sun, 11 Mar 2018 18:58:59 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=felixgv&quot; class=&quot;user-hover&quot; rel=&quot;felixgv&quot;&gt;Felix GV&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zolyfarkas&quot; class=&quot;user-hover&quot; rel=&quot;zolyfarkas&quot;&gt;Zoltan Farkas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I submitted a PR above. Sorry for the delay, it took me a bit longer than I thought it would. I did change the implementation a bit as I went - the enum default is now only used when a unmatching symbol is read by the reader. It doesn&apos;t affect anything when a field is just not found by the reader (that is still the Field default&apos;s responsibility). I didn&apos;t the interplay between the two and the code was getting somewhat gnarly, so I simplified it and went with what you now see in the PR.&lt;/p&gt;</comment>
                            <comment id="16397566" author="githubbot" created="Tue, 13 Mar 2018 20:03:27 +0000"  >&lt;p&gt;cutting commented on a change in pull request #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#discussion_r174264624&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#discussion_r174264624&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -1450,7 +1473,7 @@ private static Schema applyAliases(Schema s, Map&amp;lt;Schema,Schema&amp;gt; seen,&lt;br/&gt;
     case ENUM:&lt;br/&gt;
       if (aliases.containsKey(name))&lt;br/&gt;
         result = Schema.createEnum(aliases.get(name).full, s.getDoc(), null,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;s.getEnumSymbols());&lt;br/&gt;
+                                   s.getEnumSymbols(), s.getEnumDefault());&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   I scanned for other places where Schema.createEnum is called to see which need updates.&lt;br/&gt;
   ResolvingVisitor.java also needs this same change.  This is used to support IDL.  We should also add support to IDL for enum defaults.&lt;br/&gt;
   SchemaBuilder.java should be changed to permit specifying an enum default.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16397567" author="githubbot" created="Tue, 13 Mar 2018 20:03:27 +0000"  >&lt;p&gt;cutting commented on a change in pull request #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#discussion_r174256844&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#discussion_r174256844&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -765,6 +781,7 @@ public boolean equals(Object o) &lt;/p&gt;
{
         &amp;amp;&amp;amp; symbols.equals(that.symbols)
         &amp;amp;&amp;amp; props.equals(that.props);
     }
&lt;p&gt;+    public String getEnumDefault() &lt;/p&gt;
{ return enumDefault; }

&lt;p&gt; Review comment:&lt;br/&gt;
   needs @Override?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16397659" author="cutting" created="Tue, 13 Mar 2018 21:13:51 +0000"  >&lt;p&gt;As I said on GitHub, the patch looks good. We&apos;l eventually need:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;an update to the specification defining how enum defaults work.&lt;/li&gt;
	&lt;li&gt;a Java implementation of enum defaults (the submitted patch).&lt;/li&gt;
	&lt;li&gt;support for enum defaults in IDL&lt;/li&gt;
	&lt;li&gt;support for enum defaults in the Java builder&lt;/li&gt;
	&lt;li&gt;support for enum defaults in other languages&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;These could all be separate issues or some bundled together. (1) is a pre-requisite, so might naturally be bundled into this issue. We should probably implement (3) and (4) before we make a release including this, so if we don&apos;t include them here then we should file separate issues for them before this is committed.&lt;/p&gt;</comment>
                            <comment id="16400648" author="githubbot" created="Thu, 15 Mar 2018 16:14:47 +0000"  >&lt;p&gt;bellemare commented on a change in pull request #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#discussion_r174841826&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#discussion_r174841826&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -1450,7 +1473,7 @@ private static Schema applyAliases(Schema s, Map&amp;lt;Schema,Schema&amp;gt; seen,&lt;br/&gt;
     case ENUM:&lt;br/&gt;
       if (aliases.containsKey(name))&lt;br/&gt;
         result = Schema.createEnum(aliases.get(name).full, s.getDoc(), null,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;s.getEnumSymbols());&lt;br/&gt;
+                                   s.getEnumSymbols(), s.getEnumDefault());&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   Okay yes, I can add that to this PR. &lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16400653" author="abellemare" created="Thu, 15 Mar 2018 16:17:13 +0000"  >&lt;p&gt;I can add 1, 3 and 4 to this patch. I think it makes sense to have it all available at the same time or not at all. I will try to get this in as soon as I can.&lt;/p&gt;</comment>
                            <comment id="16420496" author="abellemare" created="Fri, 30 Mar 2018 13:36:14 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; - &lt;/p&gt;

&lt;p&gt;What do you think of the IDL format of:&lt;/p&gt;

&lt;p&gt;enum {A,B,C} = C&lt;/p&gt;

&lt;p&gt;to specify the default?&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;That being said, I tried to get it to work for a few hours with idl.jj, but I am very unfamiliar with the tokenizer and compiler and came up empty handed. I may want to pass this part off to someone who understands that part of the system better.&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;</comment>
                            <comment id="16420956" author="cutting" created="Fri, 30 Mar 2018 21:39:08 +0000"  >&lt;p&gt;The following changes to idl.jj work for me:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+++ b/lang/java/compiler/src/main/javacc/org/apache/avro/compiler/idl/idl.jj
@@ -1099,13 +1099,16 @@ Schema EnumDeclaration():
 {
   &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; name;
   List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; symbols;
+  &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; defaultSymbol = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
 }
 {
   &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt;&quot;&lt;/span&gt;
   name = Identifier()
   symbols = EnumBody()
+    [ &amp;lt;EQUALS&amp;gt; defaultSymbol=Identifier() &amp;lt;SEMICOLON&amp;gt;]
   {
-    Schema s = Schema.createEnum(name, getDoc(), &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.namespace, symbols);
+    Schema s = Schema.createEnum(name, getDoc(), &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.namespace, symbols,
+                                 defaultSymbol);
     names.put(s.getFullName(), s);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Does that not work for you?&lt;/p&gt;</comment>
                            <comment id="16421034" author="howellbridger" created="Fri, 30 Mar 2018 22:47:43 +0000"  >&lt;p&gt;I think it&apos;s worth noting that new syntax isn&apos;t strictly necessary in this case, since there&apos;s generic property setting provided by IDL through annotations. With a special enum default syntax, it&apos;s possible to run into a weird situation where there&apos;s an &lt;tt&gt;@default&lt;/tt&gt; annotation and the new syntax.&lt;/p&gt;

&lt;p&gt;I think there are two ways to go on this:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Add the new syntax, and make&#160;&lt;tt&gt;&quot;default&quot;&lt;/tt&gt; be a reserved property for schema objects, so that the new syntax is the only way to use the feature. (This is how most things in IDL work - defaults, field names and schema names.)&lt;/li&gt;
	&lt;li&gt;Retain the annotation syntax, and let it have added meaning in the new version of the compiler, but still make&#160;&lt;tt&gt;&quot;default&quot;&lt;/tt&gt; a reserved property so that accidents don&apos;t happen. (The way namespaces are handled in IDL is an example of this.)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With the second option, older versions of the IDL compiler would then have partial support for enum defaults already built in.&lt;/p&gt;</comment>
                            <comment id="16421406" author="felixgv" created="Sat, 31 Mar 2018 17:19:54 +0000"  >&lt;p&gt;I don&#8217;t get what is the use case served by having a field default as well as an enum default. I am looking at the &#8220;Default and Fallback&#8221; tab in the google spreadsheet, and I am confused at the inconsistent outcomes.&lt;/p&gt;

&lt;p&gt;I am left wondering: &#8220;wouldn&#8217;t it be simpler if it was illegal to define a schema with a different field default and enum default?&#8221; ... in which case, of course, if it was illegal to make them different, then there is probably no point in having both.&lt;/p&gt;

&lt;p&gt;This is why I kept pushing for a quick 30 second description of what the proposed semantic is. Doing the implementation first and retrofitting the explanation backwards to match it seems like a roundabout and inefficient way of designing an API.&lt;/p&gt;

&lt;p&gt;Currently, my recommendation to my users is this: &#8220;Do not use Avro enums as they are a broken un-evolvable part of the specification. If you need enum-like semantics, then define an int field and map it manually to an enum in your Java code.&#8221;&lt;/p&gt;

&lt;p&gt;Now, with this proposed implementation, I honestly wonder whether it is simpler to maintain exactly the same narrative (&#8220;avro enums are broken so you should use an int instead&#8221;) or to tell my users &#8220;avro enums are broken unless you specify the same value in the enum default and field dedault&#8221; or if it&#8217;s worth trying to explain the full matrix of possibilities.&lt;/p&gt;

&lt;p&gt;Although I feel like API semantics should be crystal clear enough to stand on their own in abstract terms, it does help sometimes to provide an explanation by way of an example. Can you provide one such example where the intricacy of this API serves a useful purpose?&lt;/p&gt;</comment>
                            <comment id="16421420" author="howellbridger" created="Sat, 31 Mar 2018 17:48:09 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=felixgv&quot; class=&quot;user-hover&quot; rel=&quot;felixgv&quot;&gt;Felix GV&lt;/a&gt;: I don&apos;t think the semantics of this implementation are complicated, although the chart is hard to read.&lt;/p&gt;

&lt;p&gt;Here are the basic principles that explain this:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Field defaults allow records to be able to read record schemas that are missing a field (by providing a value to use when this condition holds). This has not changed.&lt;/li&gt;
	&lt;li&gt;Enum defaults allow enums to be able to read enum schemas that have more symbols (by providing a fallback value to use when this condition holds).&lt;/li&gt;
	&lt;li&gt;Unusable (enum) defaults should be disallowed at parse time.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think the second semantic is very useful for allowing readers to handle writer enum changes without breaking, where those enum changes are otherwise unimportant to whatever guarantee the a reader might need to provide.&lt;/p&gt;

&lt;p&gt;If you could point to an instance in the &quot;Final Default &amp;amp; Fallback&quot; table that you think is particularly confusing or unacceptable, I think that would be helpful to this discussion.&lt;/p&gt;</comment>
                            <comment id="16421422" author="felixgv" created="Sat, 31 Mar 2018 18:17:24 +0000"  >&lt;p&gt;I find everything but line 10 to be confusing and cumbersome to explain to my users.&lt;/p&gt;

&lt;p&gt;What is an example of a use case where you would need a different field default and enum default?&lt;/p&gt;</comment>
                            <comment id="16421446" author="howellbridger" created="Sat, 31 Mar 2018 19:41:22 +0000"  >&lt;p&gt;Well, looking the semantics for field defaults and enum defaults, they play different roles, so you don&apos;t necessarily want both of them to apply all of the time. Allowing an enum field to be optional shouldn&apos;t need to have any connection to allowing an enum&apos;s values to not come from a finite set.&lt;/p&gt;

&lt;p&gt;Here&apos;s an example where you would want a field default, but not an enum default:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Suppose you have some consumer that reads a record schema &lt;tt&gt;UserRegistration&lt;/tt&gt; and fulfills some important requirement off of that information.&lt;/li&gt;
	&lt;li&gt;Now you want to support registering different types of users, so you add an enum field &lt;tt&gt;userType&lt;/tt&gt; to indicate which type of user that was registered, and you want this consumer to understand the old data as having just the old value of &lt;tt&gt;UserType.NORMAL&lt;/tt&gt;.&lt;/li&gt;
	&lt;li&gt;At this point, you add the enum and field default of&#160;&lt;tt&gt;NORMAL&lt;/tt&gt; and keep going.&lt;/li&gt;
	&lt;li&gt;Now suppose somebody wants to add a value to that enum, of which your consumer will need to be aware of since it was fulfilling an important requirement in real-time.&lt;/li&gt;
	&lt;li&gt;If the field default also counts as a fallback, that update will go through compatibly, and your cosumer will start treating this new&#160;&lt;tt&gt;UserType&lt;/tt&gt; value as just &lt;tt&gt;UserType.NORMAL&lt;/tt&gt;, even though the consumer needed to be changed to add support for that value. If the field default and enum default are inseparable, as soon as the consumer indicated that the enum field was optional, that also meant that values passed to it no longer had to come from a known finite set.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Alternatively, here is a situation where you would want an enum default and not a field default:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Suppose you have some processor that reads &lt;tt&gt;UserRegistration&lt;/tt&gt; data that comes with a &lt;tt&gt;userType&lt;/tt&gt; field, and builds analytics off of that data for user tracking.&lt;/li&gt;
	&lt;li&gt;It can be easily re-run on a particular set of data, but it&apos;s important that the analytics eventually come out correctly.&lt;/li&gt;
	&lt;li&gt;Since it&apos;s just computing analytics off of the data, it shouldn&apos;t block development of new values of &lt;tt&gt;UserType&lt;/tt&gt;.&lt;/li&gt;
	&lt;li&gt;Hence, this processor wants to require that {{userType }}is present, but to allow faster development it doesn&apos;t want to necessarily limit values it receives to it&apos;s current finite set. If field default and enum default were tied together, it would be impossible for the schema provide this guarantee.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&#160;&lt;/p&gt;</comment>
                            <comment id="16421480" author="felixgv" created="Sat, 31 Mar 2018 21:20:17 +0000"  >&lt;p&gt;Ok, I get it. Two follow up questions:&lt;/p&gt;

&lt;p&gt;1. Does the enum default allow specifying &#8220;null&#8221;?&lt;br/&gt;
2. All defaults (field and enum) of the writer schema are ignored, correct?&lt;/p&gt;</comment>
                            <comment id="16421841" author="howellbridger" created="Sun, 1 Apr 2018 23:05:39 +0000"  >&lt;ol&gt;
	&lt;li&gt;The current PR looks like it has the parser treat anything that is not a textual value as if nothing were specified.&lt;br/&gt;
 So an enum schema with &lt;tt&gt;&quot;default&quot;: null&lt;/tt&gt; or &lt;tt&gt;&quot;default&quot;: 2&lt;/tt&gt; would be successfully parsed, but would have no effect. &lt;br/&gt;
 Otherwise, if the default is a string, it is only successfully parsed if it is contained in the enum symbols.&lt;br/&gt;
 Given that only string values make sense for an enum fallback, I could definitely see an argument for raising a parse error in those cases.&lt;/li&gt;
	&lt;li&gt;That seems correct according my understanding of schema resolution and reading how &lt;tt&gt;SchemaCompatibility&lt;/tt&gt; and &lt;tt&gt;ResolvingGrammarGenerator&lt;/tt&gt; are implemented. The idea that only the reader can add support for new writers makes sense to me, and it &lt;em&gt;should&lt;/em&gt; be preserved with the addition of enum defaults.&lt;br/&gt;
(I&apos;m not completely confident on that answer, however. Any correction or confirmation from somebody who has a more comprehensive understanding of schema resolution would be helpful.)&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="16427629" author="cutting" created="Thu, 5 Apr 2018 21:23:11 +0000"  >&lt;p&gt;That&apos;s right, defaults are used by readers, not writers.&#160; In general, schema resolution is done at read time to adapt written data to&#160;a reader&apos;s schema.&#160; Defaults are part of schema resolution.&lt;/p&gt;

&lt;p&gt;(Defaults&#160;may also&#160;be used when creating instances programmatically. For example, GenericRecordBuilder#build() will set unset fields to their default.)&lt;/p&gt;

&lt;p&gt;As for validating an enum&apos;s default, program-generated schemas might reasonably have &quot;default&quot;:null and I see no harm in treating that the same as no default specified.&#160; It might be best to abide by Postel&apos;s law here.&lt;/p&gt;</comment>
                            <comment id="16429851" author="abellemare" created="Sun, 8 Apr 2018 19:02:58 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; - Thanks for the code solution above - however, I notice that my simple.avdl fails when trying that code (this is actually exactly pretty much what I had when I got stuck and couldn&apos;t find a way out). The results below show the compiler/src/test/idl/input/simple.avdl file failing:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-------------------------------------------------------
&#160;T E S T S
-------------------------------------------------------
Running org.apache.avro.compiler.idl.TestIdl
Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.397 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! - in org.apache.avro.compiler.idl.TestIdl
runTests(org.apache.avro.compiler.idl.TestIdl)&#160; Time elapsed: 0.336 sec&#160; &amp;lt;&amp;lt;&amp;lt; FAILURE!
org.junit.ComparisonFailure: expected:&amp;lt;...ame&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;Kind&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;doc&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;A[ kind of record.&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;symbols&lt;span class=&quot;code-quote&quot;&gt;&quot;:[&quot;&lt;/span&gt;FOO&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;BAR&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;BAZ&lt;span class=&quot;code-quote&quot;&gt;&quot;],&quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;:[&quot;&lt;/span&gt;org.foo.KindOf&lt;span class=&quot;code-quote&quot;&gt;&quot;]},{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;fixed&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;MD5&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;doc&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;An MD5 hash.]&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;size&lt;span class=&quot;code-quote&quot;&gt;&quot;:16,&quot;&lt;/span&gt;foo&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;b...&amp;gt; but was:&amp;lt;...ame&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;Kind&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;doc&lt;span class=&quot;code-quote&quot;&gt;&quot;:&quot;&lt;/span&gt;A[n MD5 hash.&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;symbols&lt;span class=&quot;code-quote&quot;&gt;&quot;:[&quot;&lt;/span&gt;FOO&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;BAR&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;BAZ&lt;span class=&quot;code-quote&quot;&gt;&quot;],&quot;&lt;/span&gt;aliases&lt;span class=&quot;code-quote&quot;&gt;&quot;:[&quot;&lt;/span&gt;org.foo.KindOf&quot;]},

{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;fixed&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;MD5]&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;size&quot;&lt;/span&gt;:16,&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;:&quot;b...&amp;gt; &#160;&#160; &#160;at org.apache.avro.compiler.idl.TestIdl.runTests(TestIdl.java:95)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It looks like the comment for the Fixed MD5 get parsed into the Kind enum. Did you not get this error? I have just pulled down the latest avro code today and have built my branch off of master. If you do not see this error though it would be very reassuring and I would just need to figure out why my tests are protesting. &#160; &lt;/p&gt;


&lt;p&gt;As for &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=howellbridger&quot; class=&quot;user-hover&quot; rel=&quot;howellbridger&quot;&gt;Bridger Howell&lt;/a&gt;&apos;s two points about using the Default notation vs adding a new syntax, I can&apos;t really provide much insight one way or another on which I think would be better. I am open to suggestions if we do not wish to go with a format like: &lt;/p&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; Foo {A,B,C} = C
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks for your help so far everyone&lt;/p&gt;</comment>
                            <comment id="16436069" author="cutting" created="Thu, 12 Apr 2018 18:07:29 +0000"  >&lt;p&gt;Can you please add the change to idl.jj to your pull request &amp;amp; make the other changes requested?&#160; I&apos;d be happy to try to debug the idl issue then.&#160; Thanks!&lt;/p&gt;</comment>
                            <comment id="16438393" author="abellemare" created="Sat, 14 Apr 2018 15:42:38 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; - Done as per your request. Thanks for your help, let me know if I am missing something or if you need anything from me.&lt;/p&gt;</comment>
                            <comment id="16440169" author="githubbot" created="Mon, 16 Apr 2018 23:41:50 +0000"  >&lt;p&gt;cutting commented on issue #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#issuecomment-381783583&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#issuecomment-381783583&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Here&apos;s a fix for the IDL problem.  The grammar change seems to cause the parser to lookahead farther, so the last documentation comment that&apos;s been seen is too far along.  I changed it to grab the doc string once it&apos;s seen the enum keyword and that seems to fix it.&lt;br/&gt;
   ```--- a/lang/java/compiler/src/main/javacc/org/apache/avro/compiler/idl/idl.jj&lt;br/&gt;
   +++ b/lang/java/compiler/src/main/javacc/org/apache/avro/compiler/idl/idl.jj&lt;br/&gt;
   @@ -1102,12 +1102,12 @@ Schema EnumDeclaration():&lt;br/&gt;
      String defaultSymbol = null;&lt;br/&gt;
    }&lt;br/&gt;
    {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;enum&quot;&lt;br/&gt;
   +  &quot;enum&quot; 
{   String doc = getDoc(); }
&lt;p&gt;      name = Identifier()&lt;br/&gt;
      symbols = EnumBody()&lt;br/&gt;
          [ &amp;lt;EQUALS&amp;gt; defaultSymbol=Identifier() &amp;lt;SEMICOLON&amp;gt;]&lt;br/&gt;
      {&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;Schema s = Schema.createEnum(name, getDoc(), this.namespace, symbols,&lt;br/&gt;
   +    Schema s = Schema.createEnum(name, doc, this.namespace, symbols,&lt;br/&gt;
                                     defaultSymbol);&lt;br/&gt;
        names.put(s.getFullName(), s);&lt;br/&gt;
        return s;&lt;br/&gt;
   ```&lt;br/&gt;
   Patch otherwise looks good.  We should also test the IDL change.  Maybe change simple.avdl to specify an enum default, then update simple.avpr to contain the new output?  (You can use &apos;mvn package -dskipTests&apos; to create a tools.jar so &apos;java -jar tools.jar idl ...&apos; can be used to create the new compiler test output file.)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16441068" author="githubbot" created="Tue, 17 Apr 2018 15:50:46 +0000"  >&lt;p&gt;bellemare commented on issue #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#issuecomment-382043682&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#issuecomment-382043682&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @cutting - Thanks Doug. I applied the patch, added a test and built the tooling to validate that it works. Is there anything else you forsee being required? Also, do we need additional eyes on this? I recall that someone mentioned in the JIRA thread about the &quot;@default&quot; annotation - I don&apos;t have any idea how it would interact with this.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16442897" author="githubbot" created="Wed, 18 Apr 2018 17:23:49 +0000"  >&lt;p&gt;cutting commented on issue #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#issuecomment-382464584&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#issuecomment-382464584&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   We&apos;re almost there.  I just looked at the builder integration, and think it would be better if we instead added defaultSymbol(String) method to EnumBuilder.  We also need javadoc for this new method, and should update the EnumBuilder example in the SchemaBuilder class javadoc to specify a default symbol.&lt;/p&gt;

&lt;p&gt;   Also, we need to update doc/src/content/xdocs/idl.xml to describe enum defaults.  This can be in the &quot;Defining and Enumeration&quot; section.  We can update the example to include a default.&lt;/p&gt;

&lt;p&gt;   Additional eyes are not required.  Folks have the opportunity to follow here &amp;amp; object.  I&apos;ll commit this once we&apos;re happy with it.  We could add an @default annotation now, or commit this now and add that later, I don&apos;t have a strong feeling.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16442954" author="githubbot" created="Wed, 18 Apr 2018 18:04:07 +0000"  >&lt;p&gt;BirdHowl commented on issue #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#issuecomment-382476911&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#issuecomment-382476911&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   &amp;gt;  We could add an `@default` annotation now, or commit this now and add that later, I don&apos;t have a strong feeling.&lt;/p&gt;

&lt;p&gt;   I think there&apos;s some misunderstanding here - `@default` already works, since IDL lets &lt;em&gt;any&lt;/em&gt; JSON property be set through annotations (although that behavior isn&apos;t well-documented). Anything that doesn&apos;t work as an annotation doesn&apos;t work because of being a reserved property. `default`, however is a reserved property only for fields.&lt;/p&gt;

&lt;p&gt;   If I take this a protocol file named `test.avdl`:&lt;br/&gt;
   ```&lt;br/&gt;
   protocol Test {&lt;br/&gt;
     @default(&quot;UNKNOWN&quot;)&lt;br/&gt;
     enum Status &lt;/p&gt;
{
         SUCCESS,
         FAILURE,
         UNKNOWN
     }
&lt;p&gt;   }&lt;br/&gt;
   ```&lt;/p&gt;

&lt;p&gt;   And then run `avro-tools.jar idl test.avdl` (tested on both this branch and `master`), I get this output:&lt;br/&gt;
   ```&lt;br/&gt;
   {&lt;br/&gt;
     &quot;protocol&quot; : &quot;Test&quot;,&lt;br/&gt;
     &quot;namespace&quot; : null,&lt;br/&gt;
     &quot;types&quot; : [ &lt;/p&gt;
{
       &quot;type&quot; : &quot;enum&quot;,
       &quot;name&quot; : &quot;Status&quot;,
       &quot;symbols&quot; : [ &quot;SUCCESS&quot;, &quot;FAILURE&quot;, &quot;UNKNOWN&quot; ],
       &quot;default&quot; : &quot;UNKNOWN&quot;
     }
&lt;p&gt; ],&lt;br/&gt;
     &quot;messages&quot; : { }&lt;br/&gt;
   }&lt;br/&gt;
   ```&lt;/p&gt;

&lt;p&gt;   In my JIRA post, I was attempting to provide reasonable answers to the question: &quot;how should we handle cases when both `@default` and the new `=` syntax are present.&quot;&lt;/p&gt;

&lt;p&gt;   (Currently on this branch, if I use both I get JSON like:&lt;/p&gt;

&lt;p&gt;   ```&lt;br/&gt;
   {&lt;br/&gt;
     &quot;protocol&quot; : &quot;Test&quot;,&lt;br/&gt;
     &quot;namespace&quot; : null,&lt;br/&gt;
     &quot;types&quot; : [ &lt;/p&gt;
{
       &quot;type&quot; : &quot;enum&quot;,
       &quot;name&quot; : &quot;Status&quot;,
       &quot;symbols&quot; : [ &quot;SUCCESS&quot;, &quot;FAILURE&quot;, &quot;UNKNOWN&quot; ],
       &quot;default&quot; : &quot;FAILURE&quot;,
       &quot;default&quot; : &quot;UNKOWN&quot;
     }
&lt;p&gt; ],&lt;br/&gt;
     &quot;messages&quot; : { }&lt;br/&gt;
   }&lt;br/&gt;
   ```&lt;br/&gt;
   )&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16452589" author="cutting" created="Wed, 25 Apr 2018 16:30:02 +0000"  >&lt;p&gt;Sorry, I misunderstood the question.&#160; The atsign notation should not work here.&#160; For field defaults, attempting&#160;the atsign notation would result in an error when it tries to set that schema property.&#160; (The compiler builds a schema then generates Json from it.)&#160; We should similarly fix the enum schema API to prohibit &quot;default&quot; as a settable property name, in Schema.java.&lt;/p&gt;

&lt;p&gt;To minimize incompatiblity, I think we should&#160;create a list of reserved&#160;property names for EnumSchema that adds &quot;default&quot; to SCHEMA_RESERVED.&lt;/p&gt;</comment>
                            <comment id="16457326" author="abellemare" created="Sat, 28 Apr 2018 02:50:09 +0000"  >&lt;p&gt;Okay, I put up a new commit with the changes mentioned above. Please take a look and let me know about the changes made, especially around the definition of the ENUM_RESERVED component.&lt;/p&gt;</comment>
                            <comment id="16457328" author="githubbot" created="Sat, 28 Apr 2018 02:52:57 +0000"  >&lt;p&gt;bellemare commented on a change in pull request #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#discussion_r184837417&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#discussion_r184837417&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -561,6 +561,17 @@ public void testEnum() &lt;/p&gt;
{
     Assert.assertEquals(expected, schema);
   }

&lt;p&gt;+  @Test&lt;br/&gt;
+  public void testEnumWithDefault() {&lt;br/&gt;
+    List&amp;lt;String&amp;gt; symbols = Arrays.asList(&quot;a&quot;, &quot;b&quot;);&lt;br/&gt;
+    String enumDefault = &quot;a&quot;;&lt;br/&gt;
+    Schema expected = Schema.createEnum(&quot;myenum&quot;, null, null, symbols, enumDefault);&lt;br/&gt;
+    expected.addProp(&quot;p&quot;, &quot;v&quot;);&lt;br/&gt;
+    Schema schema = SchemaBuilder.enumeration(&quot;myenum&quot;)&lt;br/&gt;
+      .prop(&quot;p&quot;, &quot;v&quot;).defaultSymbol(enumDefault).symbols(&quot;a&quot;, &quot;b&quot;);&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   So this particular code decision means that the default must be set before calling .symbols(). It will not work the other way around.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16457330" author="githubbot" created="Sat, 28 Apr 2018 02:55:49 +0000"  >&lt;p&gt;bellemare commented on a change in pull request #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#discussion_r184837513&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#discussion_r184837513&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -1354,9 +1359,14 @@ static Schema parse(JsonNode schema, Names names) {&lt;br/&gt;
       } else&lt;br/&gt;
         throw new SchemaParseException(&quot;Type not supported: &quot;+type);&lt;br/&gt;
       Iterator&amp;lt;String&amp;gt; i = schema.getFieldNames();&lt;br/&gt;
+&lt;br/&gt;
+      Set reserved = SCHEMA_RESERVED;&lt;br/&gt;
+      if (type.equals(&quot;enum&quot;)) &lt;/p&gt;
{
+        reserved = ENUM_RESERVED;
+      }

&lt;p&gt; Review comment:&lt;br/&gt;
   The intention here was to not cause any unintended side effects. &lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16457331" author="githubbot" created="Sat, 28 Apr 2018 02:59:38 +0000"  >&lt;p&gt;bellemare commented on issue #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#issuecomment-385135011&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#issuecomment-385135011&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   One more quick statement - I noticed that there is next to no testing around the usage of the &quot;@default&quot; notation. I know that my changes work only because I cannot use the &quot;@default&quot; notation on my enums anymore. However, I do not have any tests to prove that. Should this also be part of this JIRA?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16459837" author="githubbot" created="Tue, 1 May 2018 16:42:21 +0000"  >&lt;p&gt;cutting commented on a change in pull request #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#discussion_r185267660&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#discussion_r185267660&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: doc/src/content/xdocs/idl.xml&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -152,14 +152,24 @@ protocol MyProtocol {&lt;br/&gt;
     &amp;lt;section id=&quot;format_enums&quot;&amp;gt;&lt;br/&gt;
       &amp;lt;title&amp;gt;Defining an Enumeration&amp;lt;/title&amp;gt;&lt;br/&gt;
       &amp;lt;p&amp;gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Enums are defined in Avro IDL using a syntax similar to C or Java:&lt;br/&gt;
+        Enums are defined in Avro IDL using a syntax similar to C or Java. They may also be defined with an optional default.&lt;br/&gt;
+        In the case that a reader schema is unable to recognize a symbol written by the writer, the reader will fall back to using the defined default value.&lt;br/&gt;
+        Note that this default is only used when an incompatible symbol is read but not if the enum field is missing.&lt;br/&gt;
+        Example Writer Schema:&lt;br/&gt;
       &amp;lt;/p&amp;gt;&lt;br/&gt;
       &amp;lt;source&amp;gt;&lt;br/&gt;
-enum Suit 
{
-  SPADES, DIAMONDS, CLUBS, HEARTS
-}
&lt;p&gt;+      enum Shapes &lt;/p&gt;
{
+        SQUARE, TRIANGLE, CIRCLE, OVAL
+      }
&lt;p&gt;+      &amp;lt;/source&amp;gt;&lt;br/&gt;
+      &amp;lt;p&amp;gt;Example Reader Schema&amp;lt;/p&amp;gt;&lt;br/&gt;
+      &amp;lt;source&amp;gt;&lt;br/&gt;
+        enum Shapes &lt;/p&gt;
{
+          SQUARE, TRIANGLE, CIRCLE
+        }
&lt;p&gt; = CIRCLE&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   This needs a semicolon.  I don&apos;t know if that&apos;s the best syntax, but it is what we implemented!&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16459838" author="githubbot" created="Tue, 1 May 2018 16:42:21 +0000"  >&lt;p&gt;cutting commented on a change in pull request #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#discussion_r185266952&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#discussion_r185266952&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -1354,9 +1359,14 @@ static Schema parse(JsonNode schema, Names names) {&lt;br/&gt;
       } else&lt;br/&gt;
         throw new SchemaParseException(&quot;Type not supported: &quot;+type);&lt;br/&gt;
       Iterator&amp;lt;String&amp;gt; i = schema.getFieldNames();&lt;br/&gt;
+&lt;br/&gt;
+      Set reserved = SCHEMA_RESERVED;&lt;br/&gt;
+      if (type.equals(&quot;enum&quot;)) {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   The test should instead be &apos;type == ENUM&apos;, no?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16459841" author="githubbot" created="Tue, 1 May 2018 16:47:32 +0000"  >&lt;p&gt;cutting commented on issue #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#issuecomment-385720732&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#issuecomment-385720732&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   As far as @default, I think it&apos;s probably a bug that this was not a reserved word in IDL from the start.  We could fix that, but it might break folks who&apos;ve relied on it (although you could not have used it to set field defaults previously, only to provide a property named &quot;default&quot; on other kinds of schemas).  So only breaking folks who used it on enums is probably best, since we&apos;re changing the semantics of that case anyway.  Does that seem reasonable?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16459908" author="githubbot" created="Tue, 1 May 2018 17:40:04 +0000"  >&lt;p&gt;bellemare commented on issue #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#issuecomment-385735723&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#issuecomment-385735723&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   My preference is to always impose a minimal change centered around the functionality. In this case I would prefer to leave the @default behaviour as it currently is except for changing it for enum. That being said, I would be happy to file a bug ticket for it as a separate fix - that way if there is a bunch of issues with it that it would be addressable on its own and not affect this commit.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16459909" author="githubbot" created="Tue, 1 May 2018 17:40:12 +0000"  >&lt;p&gt;bellemare commented on issue #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#issuecomment-385735723&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#issuecomment-385735723&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   My preference is to impose a minimal change centered around the functionality. In this case I would prefer to leave the @default behaviour as it currently is except for changing it for enum. That being said, I would be happy to file a bug ticket for it as a separate fix - that way if there is a bunch of issues with it that it would be addressable on its own and not affect this commit.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16459914" author="githubbot" created="Tue, 1 May 2018 17:42:45 +0000"  >&lt;p&gt;bellemare commented on a change in pull request #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#discussion_r185283579&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#discussion_r185283579&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -1354,9 +1359,14 @@ static Schema parse(JsonNode schema, Names names) {&lt;br/&gt;
       } else&lt;br/&gt;
         throw new SchemaParseException(&quot;Type not supported: &quot;+type);&lt;br/&gt;
       Iterator&amp;lt;String&amp;gt; i = schema.getFieldNames();&lt;br/&gt;
+&lt;br/&gt;
+      Set reserved = SCHEMA_RESERVED;&lt;br/&gt;
+      if (type.equals(&quot;enum&quot;)) {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   I just kept it consistent with the other references to it in this file. See line 1274 and 1330. &quot;type&quot; is actually a string here, believe it or not.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16459963" author="githubbot" created="Tue, 1 May 2018 18:11:51 +0000"  >&lt;p&gt;cutting commented on a change in pull request #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#discussion_r185291558&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#discussion_r185291558&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -1354,9 +1359,14 @@ static Schema parse(JsonNode schema, Names names) {&lt;br/&gt;
       } else&lt;br/&gt;
         throw new SchemaParseException(&quot;Type not supported: &quot;+type);&lt;br/&gt;
       Iterator&amp;lt;String&amp;gt; i = schema.getFieldNames();&lt;br/&gt;
+&lt;br/&gt;
+      Set reserved = SCHEMA_RESERVED;&lt;br/&gt;
+      if (type.equals(&quot;enum&quot;)) {&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Sorry, I somehow tagged the wrong line.  I meant line 105, not this one.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16459967" author="githubbot" created="Tue, 1 May 2018 18:14:20 +0000"  >&lt;p&gt;cutting commented on issue #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#issuecomment-385745237&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#issuecomment-385745237&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   It sounds like we agree about @default.  With the current patch its behavior is only changed for enums, and that this is appropriate.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16460084" author="githubbot" created="Tue, 1 May 2018 20:07:47 +0000"  >&lt;p&gt;cutting commented on a change in pull request #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#discussion_r185319837&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#discussion_r185319837&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: doc/src/content/xdocs/idl.xml&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -152,15 +152,29 @@ protocol MyProtocol {&lt;br/&gt;
     &amp;lt;section id=&quot;format_enums&quot;&amp;gt;&lt;br/&gt;
       &amp;lt;title&amp;gt;Defining an Enumeration&amp;lt;/title&amp;gt;&lt;br/&gt;
       &amp;lt;p&amp;gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Enums are defined in Avro IDL using a syntax similar to C or Java:&lt;br/&gt;
+        Enums are defined in Avro IDL using a syntax similar to C or Java. An Avro Enum supports optional default values.&lt;br/&gt;
+        In the case that a reader schema is unable to recognize a symbol written by the writer, the reader will fall back to using the defined default value.&lt;br/&gt;
+        This default is only used when an incompatible symbol is read. It is not used if the enum field is missing.&lt;br/&gt;
+      &amp;lt;/p&amp;gt;&lt;br/&gt;
+      &amp;lt;p&amp;gt;&lt;br/&gt;
+        Example Writer Enum Definition&lt;br/&gt;
       &amp;lt;/p&amp;gt;&lt;br/&gt;
       &amp;lt;source&amp;gt;&lt;br/&gt;
-enum Suit {&lt;/li&gt;
	&lt;li&gt;SPADES, DIAMONDS, CLUBS, HEARTS&lt;br/&gt;
+enum Shapes 
{
+  SQUARE, TRIANGLE, CIRCLE, OVAL
 }
&lt;p&gt;       &amp;lt;/source&amp;gt;&lt;br/&gt;
       &amp;lt;p&amp;gt;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;Note that, unlike the JSON format, anonymous enums cannot be defined.&lt;br/&gt;
+        Example Reader Enum Definition&lt;br/&gt;
+      &amp;lt;/p&amp;gt;&lt;br/&gt;
+      &amp;lt;source&amp;gt;&lt;br/&gt;
+enum Shapes 
{
+  SQUARE, TRIANGLE, CIRCLE
+}
&lt;p&gt; = CIRCLE&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Review comment:&lt;br/&gt;
   need a semicolon at EOL&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16461286" author="githubbot" created="Wed, 2 May 2018 16:50:57 +0000"  >&lt;p&gt;cutting closed pull request #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/doc/src/content/xdocs/idl.xml b/doc/src/content/xdocs/idl.xml&lt;br/&gt;
index c9a809f61..08c4585c2 100644&lt;br/&gt;
&amp;#8212; a/doc/src/content/xdocs/idl.xml&lt;br/&gt;
+++ b/doc/src/content/xdocs/idl.xml&lt;br/&gt;
@@ -152,15 +152,29 @@ protocol MyProtocol {&lt;br/&gt;
     &amp;lt;section id=&quot;format_enums&quot;&amp;gt;&lt;br/&gt;
       &amp;lt;title&amp;gt;Defining an Enumeration&amp;lt;/title&amp;gt;&lt;br/&gt;
       &amp;lt;p&amp;gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Enums are defined in Avro IDL using a syntax similar to C or Java:&lt;br/&gt;
+        Enums are defined in Avro IDL using a syntax similar to C or Java. An Avro Enum supports optional default values.&lt;br/&gt;
+        In the case that a reader schema is unable to recognize a symbol written by the writer, the reader will fall back to using the defined default value.&lt;br/&gt;
+        This default is only used when an incompatible symbol is read. It is not used if the enum field is missing.&lt;br/&gt;
+      &amp;lt;/p&amp;gt;&lt;br/&gt;
+      &amp;lt;p&amp;gt;&lt;br/&gt;
+        Example Writer Enum Definition&lt;br/&gt;
       &amp;lt;/p&amp;gt;&lt;br/&gt;
       &amp;lt;source&amp;gt;&lt;br/&gt;
-enum Suit {&lt;/li&gt;
	&lt;li&gt;SPADES, DIAMONDS, CLUBS, HEARTS&lt;br/&gt;
+enum Shapes 
{
+  SQUARE, TRIANGLE, CIRCLE, OVAL
 }
&lt;p&gt;       &amp;lt;/source&amp;gt;&lt;br/&gt;
       &amp;lt;p&amp;gt;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;Note that, unlike the JSON format, anonymous enums cannot be defined.&lt;br/&gt;
+        Example Reader Enum Definition&lt;br/&gt;
+      &amp;lt;/p&amp;gt;&lt;br/&gt;
+      &amp;lt;source&amp;gt;&lt;br/&gt;
+enum Shapes 
{
+  SQUARE, TRIANGLE, CIRCLE
+}
&lt;p&gt; = CIRCLE;&lt;br/&gt;
+      &amp;lt;/source&amp;gt;&lt;br/&gt;
+      &amp;lt;p&amp;gt;&lt;br/&gt;
+        In the above example, the reader will use the default value of CIRCLE whenever reading data written with the OVAL symbol of the writer.&lt;br/&gt;
+        Also note that, unlike the JSON format, anonymous enums cannot be defined.&lt;br/&gt;
       &amp;lt;/p&amp;gt;&lt;br/&gt;
     &amp;lt;/section&amp;gt;&lt;br/&gt;
     &amp;lt;section id=&quot;format_fixed&quot;&amp;gt;&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/Schema.java b/lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;br/&gt;
index 9333b7984..9fcbfd3a7 100644&lt;/p&gt;
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;br/&gt;
@@ -102,7 +102,7 @@&lt;br/&gt;
   private LogicalType logicalType = null;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   Schema(Type type) &lt;/p&gt;
{
-    super(SCHEMA_RESERVED);
+    super(type == Type.ENUM ? ENUM_RESERVED : SCHEMA_RESERVED);
     this.type = type;
   }

&lt;p&gt;@@ -127,6 +127,11 @@ public static Schema create(Type type) &lt;/p&gt;
{
                        &quot;doc&quot;, &quot;fields&quot;, &quot;items&quot;, &quot;name&quot;, &quot;namespace&quot;,
                        &quot;size&quot;, &quot;symbols&quot;, &quot;values&quot;, &quot;type&quot;, &quot;aliases&quot;);
   }
&lt;p&gt;+  private static final Set&amp;lt;String&amp;gt; ENUM_RESERVED = new HashSet&amp;lt;&amp;gt;();&lt;br/&gt;
+  static &lt;/p&gt;
{
+    ENUM_RESERVED.add(&quot;default&quot;);
+    ENUM_RESERVED.addAll(SCHEMA_RESERVED);
+  }

&lt;p&gt;   int hashCode = NO_HASHCODE;&lt;/p&gt;

&lt;p&gt;@@ -171,7 +176,14 @@ public static Schema createRecord(String name, String doc, String namespace,&lt;br/&gt;
   public static Schema createEnum(String name, String doc, String namespace,&lt;br/&gt;
                                   List&amp;lt;String&amp;gt; values) &lt;/p&gt;
{
     return new EnumSchema(new Name(name, namespace), doc,
-        new LockableArrayList&amp;lt;&amp;gt;(values));
+      new LockableArrayList&amp;lt;&amp;gt;(values), null);
+  }
&lt;p&gt;+&lt;br/&gt;
+  /** Create an enum schema. */&lt;br/&gt;
+  public static Schema createEnum(String name, String doc, String namespace,&lt;br/&gt;
+                                  List&amp;lt;String&amp;gt; values, String enumDefault) &lt;/p&gt;
{
+    return new EnumSchema(new Name(name, namespace), doc,
+        new LockableArrayList&amp;lt;&amp;gt;(values), enumDefault);
   }

&lt;p&gt;   /** Create an array schema. */&lt;br/&gt;
@@ -233,6 +245,11 @@ public void setFields(List&amp;lt;Field&amp;gt; fields) &lt;/p&gt;
{
     throw new AvroRuntimeException(&quot;Not an enum: &quot;+this);
   }

&lt;p&gt;+  /** If this is an enum, return its default value. */&lt;br/&gt;
+  public String getEnumDefault() &lt;/p&gt;
{
+    throw new AvroRuntimeException(&quot;Not an enum: &quot;+this);
+  }
&lt;p&gt;+&lt;br/&gt;
   /** If this is an enum, return a symbol&apos;s ordinal value. */&lt;br/&gt;
   public int getEnumOrdinal(String symbol) {&lt;br/&gt;
     throw new AvroRuntimeException(&quot;Not an enum: &quot;+this);&lt;br/&gt;
@@ -748,15 +765,19 @@ void fieldsToJson(Names names, JsonGenerator gen) throws IOException {&lt;br/&gt;
   private static class EnumSchema extends NamedSchema {&lt;br/&gt;
     private final List&amp;lt;String&amp;gt; symbols;&lt;br/&gt;
     private final Map&amp;lt;String,Integer&amp;gt; ordinals;&lt;br/&gt;
+    private final String enumDefault;&lt;br/&gt;
     public EnumSchema(Name name, String doc,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;LockableArrayList&amp;lt;String&amp;gt; symbols) {&lt;br/&gt;
+        LockableArrayList&amp;lt;String&amp;gt; symbols, String enumDefault) 
{
       super(Type.ENUM, name, doc);
       this.symbols = symbols.lock();
       this.ordinals = new HashMap&amp;lt;&amp;gt;();
+      this.enumDefault = enumDefault;
       int i = 0;
       for (String symbol : symbols)
         if (ordinals.put(validateName(symbol), i++) != null)
           throw new SchemaParseException(&quot;Duplicate enum symbol: &quot;+symbol);
+      if (enumDefault != null &amp;amp;&amp;amp; !symbols.contains(enumDefault))
+        throw new SchemaParseException(&quot;The Enum Default: &quot; + enumDefault + &quot; is not in the enum symbol set: &quot; + symbols);
     }
&lt;p&gt;     public List&amp;lt;String&amp;gt; getEnumSymbols() &lt;/p&gt;
{ return symbols; }
&lt;p&gt;     public boolean hasEnumSymbol(String symbol) {&lt;br/&gt;
@@ -771,6 +792,8 @@ public boolean equals(Object o) &lt;/p&gt;
{
         &amp;amp;&amp;amp; symbols.equals(that.symbols)
         &amp;amp;&amp;amp; props.equals(that.props);
     }
&lt;p&gt;+    @Override&lt;br/&gt;
+    public String getEnumDefault() &lt;/p&gt;
{ return enumDefault; }
&lt;p&gt;     @Override int computeHash() &lt;/p&gt;
{ return super.computeHash() + symbols.hashCode(); }
&lt;p&gt;     void toJson(Names names, JsonGenerator gen) throws IOException {&lt;br/&gt;
       if (writeNameRef(names, gen)) return;&lt;br/&gt;
@@ -783,6 +806,8 @@ void toJson(Names names, JsonGenerator gen) throws IOException {&lt;br/&gt;
       for (String symbol : symbols)&lt;br/&gt;
         gen.writeString(symbol);&lt;br/&gt;
       gen.writeEndArray();&lt;br/&gt;
+      if (getEnumDefault() != null)&lt;br/&gt;
+        gen.writeStringField(&quot;default&quot;, getEnumDefault());&lt;br/&gt;
       writeProps(gen);&lt;br/&gt;
       aliasesToJson(gen);&lt;br/&gt;
       gen.writeEndObject();&lt;br/&gt;
@@ -1309,7 +1334,11 @@ static Schema parse(JsonNode schema, Names names) &lt;/p&gt;
{
         LockableArrayList&amp;lt;String&amp;gt; symbols = new LockableArrayList&amp;lt;&amp;gt;(symbolsNode.size());
         for (JsonNode n : symbolsNode)
           symbols.add(n.getTextValue());
-        result = new EnumSchema(name, doc, symbols);
+        JsonNode enumDefault = schema.get(&quot;default&quot;);
+        String defaultSymbol = null;
+        if (enumDefault != null)
+          defaultSymbol = enumDefault.getTextValue();
+        result = new EnumSchema(name, doc, symbols, defaultSymbol);
         if (name != null) names.add(result);
       }
&lt;p&gt; else if (type.equals(&quot;array&quot;)) {          // array&lt;br/&gt;
         JsonNode itemsNode = schema.get(&quot;items&quot;);&lt;br/&gt;
@@ -1330,9 +1359,14 @@ static Schema parse(JsonNode schema, Names names) {&lt;br/&gt;
       } else&lt;br/&gt;
         throw new SchemaParseException(&quot;Type not supported: &quot;+type);&lt;br/&gt;
       Iterator&amp;lt;String&amp;gt; i = schema.getFieldNames();&lt;br/&gt;
+&lt;br/&gt;
+      Set reserved = SCHEMA_RESERVED;&lt;br/&gt;
+      if (type.equals(&quot;enum&quot;)) &lt;/p&gt;
{
+        reserved = ENUM_RESERVED;
+      }
&lt;p&gt;       while (i.hasNext()) &lt;/p&gt;
{                       // add properties
         String prop = i.next();
-        if (!SCHEMA_RESERVED.contains(prop))      // ignore reserved
+        if (!reserved.contains(prop))      // ignore reserved
           result.addProp(prop, schema.get(prop));
       }
&lt;p&gt;       // parse logical type if present&lt;br/&gt;
@@ -1456,7 +1490,7 @@ private static Schema applyAliases(Schema s, Map&amp;lt;Schema,Schema&amp;gt; seen,&lt;br/&gt;
     case ENUM:&lt;br/&gt;
       if (aliases.containsKey(name))&lt;br/&gt;
         result = Schema.createEnum(aliases.get(name).full, s.getDoc(), null,&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;s.getEnumSymbols());&lt;br/&gt;
+                                   s.getEnumSymbols(), s.getEnumDefault());&lt;br/&gt;
       break;&lt;br/&gt;
     case ARRAY:&lt;br/&gt;
       Schema e = applyAliases(s.getElementType(), seen, aliases, fieldAliases);&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java b/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java&lt;br/&gt;
index 9c768f279..579ecd0b5 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java&lt;br/&gt;
@@ -767,6 +767,7 @@ public R size(int size) {&lt;br/&gt;
     private EnumBuilder(Completion&amp;lt;R&amp;gt; context, NameContext names, String name) 
{
       super(context, names, name);
     }
&lt;p&gt;+    private String enumDefault = null;&lt;/p&gt;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     private static &amp;lt;R&amp;gt; EnumBuilder&amp;lt;R&amp;gt; create(Completion&amp;lt;R&amp;gt; context,&lt;br/&gt;
         NameContext names, String name) {&lt;br/&gt;
@@ -778,14 +779,19 @@ private EnumBuilder(Completion&amp;lt;R&amp;gt; context, NameContext names, String name) &lt;/p&gt;
{
       return this;
     }

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;/** Configure this enum type&apos;s symbols, and end its configuration. **/&lt;br/&gt;
+    /** Configure this enum type&apos;s symbols, and end its configuration. Populates the default if it was set.**/&lt;br/&gt;
     public R symbols(String... symbols) 
{
       Schema schema = Schema.createEnum(name(), doc(), space(),
-          Arrays.asList(symbols));
+          Arrays.asList(symbols), this.enumDefault);
       completeSchema(schema);
       return context().complete(schema);
     }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+    /** Set the default value of the enum. */&lt;br/&gt;
+    public EnumBuilder&amp;lt;R&amp;gt; defaultSymbol(String enumDefault) &lt;/p&gt;
{
+      this.enumDefault = enumDefault;
+      return self();
+    }
&lt;p&gt;   }&lt;/p&gt;

&lt;p&gt;   /**&lt;br/&gt;
@@ -1200,14 +1206,14 @@ public final R nullType() {&lt;/p&gt;

&lt;p&gt;     /** Build an Avro enum type. Example usage:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;pre&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;* enumeration(&quot;Suits&quot;).namespace(&quot;org.cards&quot;).doc(&quot;card suit names&quot;)&lt;br/&gt;
+     * enumeration(&quot;Suits&quot;).namespace(&quot;org.cards&quot;).doc(&quot;card suit names&quot;).defaultSymbol(&quot;HEART&quot;)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;.symbols(&quot;HEART&quot;, &quot;SPADE&quot;, &quot;DIAMOND&quot;, &quot;CLUB&quot;)&lt;/li&gt;
	&lt;li&gt;&amp;lt;/pre&amp;gt;&lt;/li&gt;
	&lt;li&gt;Equivalent to Avro JSON Schema:&lt;/li&gt;
	&lt;li&gt;&amp;lt;pre&amp;gt;&lt;/li&gt;
	&lt;li&gt;{&quot;type&quot;:&quot;enum&quot;, &quot;name&quot;:&quot;Suits&quot;, &quot;namespace&quot;:&quot;org.cards&quot;,
      *  &quot;doc&quot;:&quot;card suit names&quot;, &quot;symbols&quot;:[
-     *    &quot;HEART&quot;, &quot;SPADE&quot;, &quot;DIAMOND&quot;, &quot;CLUB&quot;]}
&lt;p&gt;+     *    &quot;HEART&quot;, &quot;SPADE&quot;, &quot;DIAMOND&quot;, &quot;CLUB&quot;], &quot;default&quot;:&quot;HEART&quot;}&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;/pre&amp;gt;&lt;br/&gt;
      **/&lt;br/&gt;
     public final EnumBuilder&amp;lt;R&amp;gt; enumeration(String name) {&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/SchemaCompatibility.java b/lang/java/avro/src/main/java/org/apache/avro/SchemaCompatibility.java&lt;br/&gt;
index 5ec07375a..b1a499e73 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/avro/src/main/java/org/apache/avro/SchemaCompatibility.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/SchemaCompatibility.java&lt;br/&gt;
@@ -418,10 +418,15 @@ private SchemaCompatibilityResult checkReaderWriterRecordFields(final Schema rea&lt;br/&gt;
           // Reader field does not correspond to any field in the writer record schema, so the&lt;br/&gt;
           // reader field must have a default value.&lt;br/&gt;
           if (readerField.defaultValue() == null) {&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;// reader field has no default value&lt;/li&gt;
	&lt;li&gt;result = result.mergedWith(SchemaCompatibilityResult.incompatible(&lt;br/&gt;
+            // reader field has no default value. Check for the enum default value&lt;br/&gt;
+            if (readerField.schema().getType() == Type.ENUM &amp;amp;&amp;amp; readerField.schema().getEnumDefault() != null) 
{
+              result = result.mergedWith(getCompatibility(&quot;type&quot;, readerField.schema(),
+                writerField.schema(), location));
+            }
&lt;p&gt; else &lt;/p&gt;
{
+              result = result.mergedWith(SchemaCompatibilityResult.incompatible(
                 SchemaIncompatibilityType.READER_FIELD_MISSING_DEFAULT_VALUE, reader, writer,
                 readerField.name(), asList(location)));
+            }
&lt;p&gt;           }&lt;br/&gt;
         } else {&lt;br/&gt;
           result = result.mergedWith(getCompatibility(&quot;type&quot;, readerField.schema(),&lt;br/&gt;
@@ -443,9 +448,14 @@ private SchemaCompatibilityResult checkReaderEnumContainsAllWriterEnumSymbols(&lt;br/&gt;
       final Set&amp;lt;String&amp;gt; symbols = new TreeSet&amp;lt;&amp;gt;(writer.getEnumSymbols());&lt;br/&gt;
       symbols.removeAll(reader.getEnumSymbols());&lt;br/&gt;
       if (!symbols.isEmpty()) {&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;result = SchemaCompatibilityResult.incompatible(&lt;br/&gt;
+        if(reader.getEnumDefault() != null &amp;amp;&amp;amp; reader.getEnumSymbols().contains(reader.getEnumDefault())) 
{
+          symbols.clear();
+          result = SchemaCompatibilityResult.compatible();
+        }
&lt;p&gt; else &lt;/p&gt;
{
+          result = SchemaCompatibilityResult.incompatible(
             SchemaIncompatibilityType.MISSING_ENUM_SYMBOLS, reader, writer,
             symbols.toString(), asList(location));
+        }
&lt;p&gt;       }&lt;br/&gt;
       // POP &quot;symbols&quot; literal&lt;br/&gt;
       location.removeFirst();&lt;br/&gt;
diff --git a/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java b/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java&lt;br/&gt;
index 7c5da1169..51d9bc992 100644&lt;/p&gt;
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java&lt;br/&gt;
@@ -99,7 +99,7 @@ public Symbol generate(Schema writer, Schema reader,&lt;br/&gt;
         if (writer.getFullName() == null
&lt;div class=&apos;table-wrap&apos;&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; writer.getFullName().equals(reader.getFullName())) 
{
           return Symbol.seq(mkEnumAdjust(writer.getEnumSymbols(),
-                  reader.getEnumSymbols()), Symbol.ENUM);
+                  reader.getEnumSymbols(), reader.getEnumDefault()), Symbol.ENUM);
         }
&lt;p&gt;         break;&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@@ -416,11 +416,15 @@ public static void encode(Encoder e, Schema s, JsonNode n)&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private static Symbol mkEnumAdjust(List&amp;lt;String&amp;gt; wsymbols,&lt;/li&gt;
	&lt;li&gt;List&amp;lt;String&amp;gt; rsymbols){&lt;br/&gt;
+  private static Symbol mkEnumAdjust(List&amp;lt;String&amp;gt; wsymbols, List&amp;lt;String&amp;gt; rsymbols, Object rEnumDefault){&lt;br/&gt;
     Object[] adjustments = new Object&lt;span class=&quot;error&quot;&gt;&amp;#91;wsymbols.size()&amp;#93;&lt;/span&gt;;&lt;br/&gt;
     for (int i = 0; i &amp;lt; adjustments.length; i++) {&lt;br/&gt;
       int j = rsymbols.indexOf(wsymbols.get&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;);&lt;br/&gt;
+      if (j == -1) 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+        if (rEnumDefault instanceof String) {
+          j = rsymbols.indexOf(rEnumDefault);
+        }+      }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;       adjustments&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; = (j == -1 ? &quot;No match for &quot; + wsymbols.get&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
                                 : new Integer(j));&lt;br/&gt;
     }&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java b/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java&lt;br/&gt;
index e250ffef1..af15c388d 100644&lt;/p&gt;
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java&lt;br/&gt;
@@ -561,6 +561,17 @@ public void testEnum() 
{
     Assert.assertEquals(expected, schema);
   }&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  @Test&lt;br/&gt;
+  public void testEnumWithDefault() &lt;/p&gt;
{
+    List&amp;lt;String&amp;gt; symbols = Arrays.asList(&quot;a&quot;, &quot;b&quot;);
+    String enumDefault = &quot;a&quot;;
+    Schema expected = Schema.createEnum(&quot;myenum&quot;, null, null, symbols, enumDefault);
+    expected.addProp(&quot;p&quot;, &quot;v&quot;);
+    Schema schema = SchemaBuilder.enumeration(&quot;myenum&quot;)
+      .prop(&quot;p&quot;, &quot;v&quot;).defaultSymbol(enumDefault).symbols(&quot;a&quot;, &quot;b&quot;);
+    Assert.assertEquals(expected, schema);
+  }
&lt;p&gt;+&lt;br/&gt;
   @Test&lt;br/&gt;
   public void testFixed() {&lt;br/&gt;
     Schema expected = Schema.createFixed(&quot;myfixed&quot;, null, null, 16);&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCompatibility.java b/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCompatibility.java&lt;br/&gt;
index d46bfd322..05726e989 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCompatibility.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCompatibility.java&lt;br/&gt;
@@ -35,6 +35,12 @@&lt;br/&gt;
 import static org.apache.avro.TestSchemas.ENUM1_ABC_SCHEMA;&lt;br/&gt;
 import static org.apache.avro.TestSchemas.ENUM1_AB_SCHEMA;&lt;br/&gt;
 import static org.apache.avro.TestSchemas.ENUM1_BC_SCHEMA;&lt;br/&gt;
+import static org.apache.avro.TestSchemas.ENUM_AB_FIELD_DEFAULT_A_ENUM_DEFAULT_B_RECORD;&lt;br/&gt;
+import static org.apache.avro.TestSchemas.ENUM_ABC_FIELD_DEFAULT_B_ENUM_DEFAULT_A_RECORD;&lt;br/&gt;
+import static org.apache.avro.TestSchemas.ENUM_AB_ENUM_DEFAULT_A_RECORD;&lt;br/&gt;
+import static org.apache.avro.TestSchemas.ENUM_ABC_ENUM_DEFAULT_A_RECORD;&lt;br/&gt;
+import static org.apache.avro.TestSchemas.ENUM_AB_ENUM_DEFAULT_A_SCHEMA;&lt;br/&gt;
+import static org.apache.avro.TestSchemas.ENUM_ABC_ENUM_DEFAULT_A_SCHEMA;&lt;br/&gt;
 import static org.apache.avro.TestSchemas.FIXED_4_BYTES;&lt;br/&gt;
 import static org.apache.avro.TestSchemas.FLOAT_SCHEMA;&lt;br/&gt;
 import static org.apache.avro.TestSchemas.FLOAT_UNION_SCHEMA;&lt;br/&gt;
@@ -74,9 +80,11 @@&lt;br/&gt;
 import org.apache.avro.SchemaCompatibility.SchemaIncompatibilityType;&lt;br/&gt;
 import org.apache.avro.SchemaCompatibility.SchemaPairCompatibility;&lt;br/&gt;
 import org.apache.avro.TestSchemas.ReaderWriter;&lt;br/&gt;
+import org.apache.avro.generic.GenericData;&lt;br/&gt;
 import org.apache.avro.generic.GenericData.EnumSymbol;&lt;br/&gt;
 import org.apache.avro.generic.GenericDatumReader;&lt;br/&gt;
 import org.apache.avro.generic.GenericDatumWriter;&lt;br/&gt;
+import org.apache.avro.generic.GenericRecord;&lt;br/&gt;
 import org.apache.avro.io.DatumReader;&lt;br/&gt;
 import org.apache.avro.io.DatumWriter;&lt;br/&gt;
 import org.apache.avro.io.Decoder;&lt;br/&gt;
@@ -97,6 +105,9 @@&lt;br/&gt;
       new Schema.Field(&quot;oldfield1&quot;, INT_SCHEMA, null, null),&lt;br/&gt;
       new Schema.Field(&quot;oldfield2&quot;, STRING_SCHEMA, null, null)));&lt;/p&gt;

&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
   @Test&lt;br/&gt;
   public void testValidateSchemaPairMissingField() throws Exception {&lt;br/&gt;
     final List&amp;lt;Schema.Field&amp;gt; readerFields = list(&lt;br/&gt;
@@ -358,7 +369,10 @@ public void testUnionReaderWriterSubsetIncompatibility() {&lt;br/&gt;
       new ReaderWriter(LONG_LIST_RECORD, LONG_LIST_RECORD),&lt;br/&gt;
       new ReaderWriter(LONG_LIST_RECORD, INT_LIST_RECORD),&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;new ReaderWriter(NULL_SCHEMA, NULL_SCHEMA)&lt;br/&gt;
+      new ReaderWriter(NULL_SCHEMA, NULL_SCHEMA),&lt;br/&gt;
+      new ReaderWriter(ENUM_AB_ENUM_DEFAULT_A_RECORD, ENUM_ABC_ENUM_DEFAULT_A_RECORD),&lt;br/&gt;
+      new ReaderWriter(ENUM_AB_FIELD_DEFAULT_A_ENUM_DEFAULT_B_RECORD, ENUM_ABC_FIELD_DEFAULT_B_ENUM_DEFAULT_A_RECORD)&lt;br/&gt;
+&lt;br/&gt;
   );&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   // -----------------------------------------------------------------------------------------------&lt;br/&gt;
@@ -502,6 +516,10 @@ public Object getDecodedDatum() {&lt;br/&gt;
           ENUM1_ABC_SCHEMA, new EnumSymbol(ENUM1_ABC_SCHEMA, &quot;B&quot;),&lt;br/&gt;
           ENUM1_BC_SCHEMA, new EnumSymbol(ENUM1_BC_SCHEMA, &quot;B&quot;)),&lt;/p&gt;

&lt;p&gt;+      new DecodingTestCase(&lt;br/&gt;
+          ENUM_ABC_ENUM_DEFAULT_A_SCHEMA, new EnumSymbol(ENUM_ABC_ENUM_DEFAULT_A_SCHEMA, &quot;C&quot;),&lt;br/&gt;
+          ENUM_AB_ENUM_DEFAULT_A_SCHEMA, new EnumSymbol(ENUM_AB_ENUM_DEFAULT_A_SCHEMA, &quot;A&quot;)),&lt;br/&gt;
+&lt;br/&gt;
       new DecodingTestCase(&lt;br/&gt;
           INT_STRING_UNION_SCHEMA, &quot;the string&quot;,&lt;br/&gt;
           STRING_SCHEMA, new Utf8(&quot;the string&quot;)),&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCompatibilityEnumDefaults.java b/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCompatibilityEnumDefaults.java&lt;br/&gt;
new file mode 100644&lt;br/&gt;
index 000000000..159733ac7&lt;br/&gt;
&amp;#8212; /dev/null&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCompatibilityEnumDefaults.java&lt;br/&gt;
@@ -0,0 +1,146 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ * Licensed to the Apache Software Foundation (ASF) under one&lt;br/&gt;
+ * or more contributor license agreements.  See the NOTICE file&lt;br/&gt;
+ * distributed with this work for additional information&lt;br/&gt;
+ * regarding copyright ownership.  The ASF licenses this file&lt;br/&gt;
+ * to you under the Apache License, Version 2.0 (the&lt;br/&gt;
+ * &quot;License&quot;); you may not use this file except in compliance&lt;br/&gt;
+ * with the License.  You may obtain a copy of the License at&lt;br/&gt;
+ *&lt;br/&gt;
+ *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
+ *&lt;br/&gt;
+ * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
+ * See the License for the specific language governing permissions and&lt;br/&gt;
+ * limitations under the License.&lt;br/&gt;
+ */&lt;br/&gt;
+package org.apache.avro;&lt;br/&gt;
+&lt;br/&gt;
+import org.apache.avro.generic.GenericData;&lt;br/&gt;
+import org.apache.avro.generic.GenericDatumReader;&lt;br/&gt;
+import org.apache.avro.generic.GenericDatumWriter;&lt;br/&gt;
+import org.apache.avro.generic.GenericRecord;&lt;br/&gt;
+import org.apache.avro.io.DatumReader;&lt;br/&gt;
+import org.apache.avro.io.DatumWriter;&lt;br/&gt;
+import org.apache.avro.io.Decoder;&lt;br/&gt;
+import org.apache.avro.io.DecoderFactory;&lt;br/&gt;
+import org.apache.avro.io.Encoder;&lt;br/&gt;
+import org.apache.avro.io.EncoderFactory;&lt;br/&gt;
+import org.junit.Rule;&lt;br/&gt;
+import org.junit.Test;&lt;br/&gt;
+import org.junit.rules.ExpectedException;&lt;br/&gt;
+import org.junit.runner.RunWith;&lt;br/&gt;
+import org.junit.runners.Parameterized;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.ByteArrayOutputStream;&lt;br/&gt;
+&lt;br/&gt;
+import static org.apache.avro.TestSchemaCompatibility.validateIncompatibleSchemas;&lt;br/&gt;
+import static org.apache.avro.TestSchemas.*;&lt;br/&gt;
+import static org.junit.Assert.assertEquals;&lt;br/&gt;
+&lt;br/&gt;
+public class TestSchemaCompatibilityEnumDefaults {&lt;br/&gt;
+  @Rule&lt;br/&gt;
+  public ExpectedException expectedException = ExpectedException.none();&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testEnumDefaultNotAppliedWhenWriterFieldMissing() throws Exception &lt;/p&gt;
{
+    expectedException.expect(AvroTypeException.class);
+    expectedException.expectMessage(&quot;Found Record1, expecting Record1, missing required field field1&quot;);
+
+    Schema writerSchema = SchemaBuilder.record(&quot;Record1&quot;).fields()
+      .name(&quot;field2&quot;).type(ENUM2_AB_SCHEMA).noDefault()
+      .endRecord();
+
+    Schema readerSchema = SchemaBuilder.record(&quot;Record1&quot;).fields()
+      .name(&quot;field1&quot;).type(ENUM_AB_ENUM_DEFAULT_A_SCHEMA).noDefault()
+      .endRecord();
+
+    GenericRecord datum = new GenericData.Record(writerSchema);
+    datum.put(&quot;field2&quot;, new GenericData.EnumSymbol(writerSchema, &quot;B&quot;));
+    serializeWithWriterThenDeserializeWithReader(writerSchema, datum, readerSchema);
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testEnumDefaultAppliedWhenNoFieldDefaultDefined() throws Exception &lt;/p&gt;
{
+    Schema writerSchema = SchemaBuilder.record(&quot;Record1&quot;).fields()
+      .name(&quot;field1&quot;).type(ENUM_ABC_ENUM_DEFAULT_A_SCHEMA).noDefault()
+      .endRecord();
+
+    Schema readerSchema = SchemaBuilder.record(&quot;Record1&quot;).fields()
+      .name(&quot;field1&quot;).type(ENUM_AB_ENUM_DEFAULT_A_SCHEMA).noDefault()
+      .endRecord();
+
+    GenericRecord datum = new GenericData.Record(writerSchema);
+    datum.put(&quot;field1&quot;, new GenericData.EnumSymbol(writerSchema, &quot;C&quot;));
+    GenericRecord decodedDatum = serializeWithWriterThenDeserializeWithReader(writerSchema, datum, readerSchema);
+    //The A is the Enum fallback value.
+    assertEquals(&quot;A&quot;, decodedDatum.get(&quot;field1&quot;).toString());
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testEnumDefaultNotAppliedWhenCompatibleSymbolIsFound() throws Exception &lt;/p&gt;
{
+    Schema writerSchema = SchemaBuilder.record(&quot;Record1&quot;).fields()
+      .name(&quot;field1&quot;).type(ENUM_ABC_ENUM_DEFAULT_A_SCHEMA).noDefault()
+      .endRecord();
+
+    Schema readerSchema = SchemaBuilder.record(&quot;Record1&quot;).fields()
+      .name(&quot;field1&quot;).type(ENUM_AB_ENUM_DEFAULT_A_SCHEMA).noDefault()
+      .endRecord();
+
+    GenericRecord datum = new GenericData.Record(writerSchema);
+    datum.put(&quot;field1&quot;, new GenericData.EnumSymbol(writerSchema, &quot;B&quot;));
+    GenericRecord decodedDatum = serializeWithWriterThenDeserializeWithReader(writerSchema, datum, readerSchema);
+    assertEquals(&quot;B&quot;, decodedDatum.get(&quot;field1&quot;).toString());
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testEnumDefaultAppliedWhenFieldDefaultDefined() throws Exception &lt;/p&gt;
{
+    Schema writerSchema = SchemaBuilder.record(&quot;Record1&quot;).fields()
+      .name(&quot;field1&quot;).type(ENUM_ABC_ENUM_DEFAULT_A_SCHEMA).noDefault()
+      .endRecord();
+
+    Schema readerSchema = SchemaBuilder.record(&quot;Record1&quot;).fields()
+      .name(&quot;field1&quot;).type(ENUM_AB_ENUM_DEFAULT_A_SCHEMA).withDefault(&quot;B&quot;)
+      .endRecord();
+
+    GenericRecord datum = new GenericData.Record(writerSchema);
+    datum.put(&quot;field1&quot;, new GenericData.EnumSymbol(writerSchema, &quot;C&quot;));
+    GenericRecord decodedDatum = serializeWithWriterThenDeserializeWithReader(writerSchema, datum, readerSchema);
+    //The A is the Enum default, which is assigned since C is not in [A,B].
+    assertEquals(&quot;A&quot;, decodedDatum.get(&quot;field1&quot;).toString());
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testFieldDefaultNotAppliedForUnknownSymbol() throws Exception &lt;/p&gt;
{
+    expectedException.expect(AvroTypeException.class);
+    expectedException.expectMessage(&quot;No match for C&quot;);
+
+    Schema writerSchema = SchemaBuilder.record(&quot;Record1&quot;).fields()
+      .name(&quot;field1&quot;).type(ENUM1_ABC_SCHEMA).noDefault()
+      .endRecord();
+    Schema readerSchema = SchemaBuilder.record(&quot;Record1&quot;).fields()
+      .name(&quot;field1&quot;).type(ENUM1_AB_SCHEMA).withDefault(&quot;A&quot;)
+      .endRecord();
+
+    GenericRecord datum = new GenericData.Record(writerSchema);
+    datum.put(&quot;field1&quot;, new GenericData.EnumSymbol(writerSchema, &quot;C&quot;));
+    serializeWithWriterThenDeserializeWithReader(writerSchema, datum, readerSchema);
+  }
&lt;p&gt;+&lt;br/&gt;
+  private GenericRecord serializeWithWriterThenDeserializeWithReader(Schema writerSchema, GenericRecord datum, Schema readerSchema) throws Exception &lt;/p&gt;
{
+    ByteArrayOutputStream baos = new ByteArrayOutputStream();
+    Encoder encoder = EncoderFactory.get().binaryEncoder(baos, null);
+    DatumWriter&amp;lt;Object&amp;gt; datumWriter = new GenericDatumWriter&amp;lt;&amp;gt;(writerSchema);
+    datumWriter.write(datum, encoder);
+    encoder.flush();
+
+    byte[] bytes = baos.toByteArray();
+    Decoder decoder = DecoderFactory.get().resolvingDecoder(
+      writerSchema, readerSchema,
+      DecoderFactory.get().binaryDecoder(bytes, null));
+    DatumReader&amp;lt;Object&amp;gt; datumReader = new GenericDatumReader&amp;lt;&amp;gt;(readerSchema);
+    return (GenericRecord)datumReader.read(null, decoder);
+  }
&lt;p&gt;+&lt;br/&gt;
+}&lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/TestSchemas.java b/lang/java/avro/src/test/java/org/apache/avro/TestSchemas.java&lt;br/&gt;
index 39dd1a241..466f1fd63 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/TestSchemas.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/TestSchemas.java&lt;br/&gt;
@@ -19,7 +19,10 @@&lt;/p&gt;

&lt;p&gt; import static org.junit.Assert.assertTrue;&lt;br/&gt;
 import java.util.ArrayList;&lt;br/&gt;
+import java.util.Arrays;&lt;br/&gt;
 import java.util.Collections;&lt;br/&gt;
+import java.util.List;&lt;br/&gt;
+&lt;br/&gt;
 import org.apache.avro.Schema.Field;&lt;/p&gt;

&lt;p&gt; /** Schemas used by other tests in this package. Therefore package protected. */&lt;br/&gt;
@@ -47,6 +50,22 @@&lt;br/&gt;
       list(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;));&lt;br/&gt;
   static final Schema ENUM1_BC_SCHEMA = Schema.createEnum(&quot;Enum1&quot;, null, null, list(&quot;B&quot;, &quot;C&quot;));&lt;br/&gt;
   static final Schema ENUM2_AB_SCHEMA = Schema.createEnum(&quot;Enum2&quot;, null, null, list(&quot;A&quot;, &quot;B&quot;));&lt;br/&gt;
+  static final Schema ENUM_ABC_ENUM_DEFAULT_A_SCHEMA = Schema.createEnum(&quot;Enum&quot;, null, null, list(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), &quot;A&quot;);&lt;br/&gt;
+  static final Schema ENUM_AB_ENUM_DEFAULT_A_SCHEMA = Schema.createEnum(&quot;Enum&quot;, null, null, list(&quot;A&quot;, &quot;B&quot;), &quot;A&quot;);&lt;br/&gt;
+  static final Schema ENUM_ABC_ENUM_DEFAULT_A_RECORD = Schema.createRecord(&quot;Record&quot;, null, null, false);&lt;br/&gt;
+  static final Schema ENUM_AB_ENUM_DEFAULT_A_RECORD = Schema.createRecord(&quot;Record&quot;, null, null, false);&lt;br/&gt;
+  static final Schema ENUM_ABC_FIELD_DEFAULT_B_ENUM_DEFAULT_A_RECORD = Schema.createRecord(&quot;Record&quot;, null, null, false);&lt;br/&gt;
+  static final Schema ENUM_AB_FIELD_DEFAULT_A_ENUM_DEFAULT_B_RECORD = Schema.createRecord(&quot;Record&quot;, null, null, false);&lt;br/&gt;
+  static &lt;/p&gt;
{
+    ENUM_ABC_ENUM_DEFAULT_A_RECORD.setFields(
+      list(new Schema.Field(&quot;Field&quot;, Schema.createEnum(&quot;Schema&quot;, null, null, list(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;), &quot;A&quot;), null, null)));
+    ENUM_AB_ENUM_DEFAULT_A_RECORD.setFields(
+      list(new Schema.Field(&quot;Field&quot;, Schema.createEnum(&quot;Schema&quot;, null, null, list(&quot;A&quot;,&quot;B&quot;), &quot;A&quot;), null, null)));
+    ENUM_ABC_FIELD_DEFAULT_B_ENUM_DEFAULT_A_RECORD.setFields(
+      list(new Schema.Field(&quot;Field&quot;, Schema.createEnum(&quot;Schema&quot;, null, null, list(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;), &quot;A&quot;), null, &quot;B&quot;)));
+    ENUM_AB_FIELD_DEFAULT_A_ENUM_DEFAULT_B_RECORD.setFields(
+      list(new Schema.Field(&quot;Field&quot;, Schema.createEnum(&quot;Schema&quot;, null, null, list(&quot;A&quot;,&quot;B&quot;), &quot;B&quot;), null, &quot;A&quot;)));
+  }

&lt;p&gt;   static final Schema EMPTY_UNION_SCHEMA = Schema.createUnion(new ArrayList&amp;lt;&amp;gt;());&lt;br/&gt;
   static final Schema NULL_UNION_SCHEMA = Schema.createUnion(list(NULL_SCHEMA));&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/java/org/apache/avro/compiler/idl/ResolvingVisitor.java b/lang/java/compiler/src/main/java/org/apache/avro/compiler/idl/ResolvingVisitor.java&lt;br/&gt;
index 88b1d6ff0..9ccd7e7a5 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/java/org/apache/avro/compiler/idl/ResolvingVisitor.java&lt;br/&gt;
+++ b/lang/java/compiler/src/main/java/org/apache/avro/compiler/idl/ResolvingVisitor.java&lt;br/&gt;
@@ -73,7 +73,7 @@ public SchemaVisitorAction visitTerminal(final Schema terminal) {&lt;br/&gt;
       break;&lt;br/&gt;
       case ENUM:&lt;br/&gt;
         newSchema = Schema.createEnum(terminal.getName(), terminal.getDoc(),&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;terminal.getNamespace(), terminal.getEnumSymbols());&lt;br/&gt;
+                terminal.getNamespace(), terminal.getEnumSymbols(), terminal.getEnumDefault());&lt;br/&gt;
         break;&lt;br/&gt;
       case FIXED:&lt;br/&gt;
         newSchema = Schema.createFixed(terminal.getName(), terminal.getDoc(),&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/javacc/org/apache/avro/compiler/idl/idl.jj b/lang/java/compiler/src/main/javacc/org/apache/avro/compiler/idl/idl.jj&lt;br/&gt;
index c0ec7f5d0..cae241ffc 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/compiler/src/main/javacc/org/apache/avro/compiler/idl/idl.jj&lt;br/&gt;
+++ b/lang/java/compiler/src/main/javacc/org/apache/avro/compiler/idl/idl.jj&lt;br/&gt;
@@ -1099,13 +1099,16 @@ Schema EnumDeclaration():
 {
   String name;
   List&amp;lt;String&amp;gt; symbols;
+  String defaultSymbol = null;
 }
&lt;p&gt; {&lt;/p&gt;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;&quot;enum&quot;&lt;br/&gt;
+  &quot;enum&quot; 
{   String doc = getDoc(); }
&lt;p&gt;   name = Identifier()&lt;br/&gt;
   symbols = EnumBody()&lt;br/&gt;
+      [ &amp;lt;EQUALS&amp;gt; defaultSymbol=Identifier() &amp;lt;SEMICOLON&amp;gt;]&lt;/p&gt;
   {
-    Schema s = Schema.createEnum(name, getDoc(), this.namespace, symbols);
+    Schema s = Schema.createEnum(name, doc, this.namespace, symbols,
+                                 defaultSymbol);
     names.put(s.getFullName(), s);
     return s;
   }
&lt;p&gt;diff --git a/lang/java/compiler/src/test/idl/input/simple.avdl b/lang/java/compiler/src/test/idl/input/simple.avdl&lt;br/&gt;
index 0ad7c7e37..29b013c9e 100644&lt;/p&gt;
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/compiler/src/test/idl/input/simple.avdl&lt;br/&gt;
+++ b/lang/java/compiler/src/test/idl/input/simple.avdl&lt;br/&gt;
@@ -30,6 +30,12 @@ protocol Simple 
{
     BAZ
   }&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  enum Status &lt;/p&gt;
{
+    A,
+    B,
+    C
+  }
&lt;p&gt; = C;&lt;br/&gt;
+&lt;br/&gt;
   /** An MD5 hash. */&lt;br/&gt;
   fixed MD5(16);&lt;/p&gt;

&lt;p&gt;@@ -41,6 +47,9 @@ protocol Simple {&lt;br/&gt;
     /** The kind of record. */&lt;br/&gt;
     Kind @order(&quot;descending&quot;) kind;&lt;/p&gt;

&lt;p&gt;+    /** The status of the record. */&lt;br/&gt;
+    Status status = &quot;A&quot;;&lt;br/&gt;
+&lt;br/&gt;
     @foo(&quot;bar&quot;) MD5 hash = &quot;0000000000000000&quot;;&lt;/p&gt;

&lt;p&gt;     union &lt;/p&gt;
{null, MD5}
&lt;p&gt; @aliases(&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;hash&amp;quot;, &amp;quot;hsh&amp;quot;&amp;#93;&lt;/span&gt;) nullableHash = null;&lt;br/&gt;
diff --git a/lang/java/compiler/src/test/idl/output/simple.avpr b/lang/java/compiler/src/test/idl/output/simple.avpr&lt;br/&gt;
index ae155f53b..ddcb626ad 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/test/idl/output/simple.avpr&lt;br/&gt;
+++ b/lang/java/compiler/src/test/idl/output/simple.avpr&lt;br/&gt;
@@ -9,6 +9,11 @@&lt;br/&gt;
     &quot;doc&quot; : &quot;A kind of record.&quot;,&lt;br/&gt;
     &quot;symbols&quot; : [ &quot;FOO&quot;, &quot;BAR&quot;, &quot;BAZ&quot; ],&lt;br/&gt;
     &quot;aliases&quot; : [ &quot;org.foo.KindOf&quot; ]&lt;br/&gt;
+  }, &lt;/p&gt;
{
+   &quot;type&quot; : &quot;enum&quot;,
+   &quot;name&quot; : &quot;Status&quot;,
+   &quot;symbols&quot; : [ &quot;A&quot;, &quot;B&quot;, &quot;C&quot; ],
+   &quot;default&quot; : &quot;C&quot;
   }
&lt;p&gt;, &lt;/p&gt;
{
     &quot;type&quot; : &quot;fixed&quot;,
     &quot;name&quot; : &quot;MD5&quot;,
@@ -29,6 +34,11 @@
       &quot;type&quot; : &quot;Kind&quot;,
       &quot;doc&quot; : &quot;The kind of record.&quot;,
       &quot;order&quot; : &quot;descending&quot;
+    }
&lt;p&gt;, &lt;/p&gt;
{
+      &quot;name&quot; : &quot;status&quot;,
+      &quot;type&quot; : &quot;Status&quot;,
+      &quot;doc&quot; : &quot;The status of the record.&quot;,
+      &quot;default&quot; : &quot;A&quot;
     }
&lt;p&gt;, {&lt;br/&gt;
       &quot;name&quot; : &quot;hash&quot;,&lt;br/&gt;
       &quot;type&quot; : &quot;MD5&quot;,&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16461287" author="jira-bot" created="Wed, 2 May 2018 16:50:59 +0000"  >&lt;p&gt;Commit 238714d324d1623f144ca09c0dfb10330a2ba2c4 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abellemare&quot; class=&quot;user-hover&quot; rel=&quot;abellemare&quot;&gt;Adam Bellemare&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;. Java: Add enum defaults, including builder &amp;amp; IDL support.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added support for enum defaults to SchemaBuilder&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added ResolvingVisitor enum default, introduces an attempt at the idl.jj for enum default but tests not passing for simple.avdl&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added override annotation to getEnumDefault() implementation&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Doug Cutting\&apos;s fix to the idl.jj for Avro enum parsing. Added test case to simple.avdl and simple.avpr&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated docs, updated the reserved keywords for enums so that the @default annotation no longer works on enum avdl definitions. Updated the way that SchemaBuilder allows an enum to be built sith a default by separating out the default setter.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the docs and verified that the generated doc is readable and well-formatted.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the enum type check to a reasonable, sane check.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added the missing  semicolon to enum doc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16461288" author="jira-bot" created="Wed, 2 May 2018 16:51:01 +0000"  >&lt;p&gt;Commit 238714d324d1623f144ca09c0dfb10330a2ba2c4 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abellemare&quot; class=&quot;user-hover&quot; rel=&quot;abellemare&quot;&gt;Adam Bellemare&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;. Java: Add enum defaults, including builder &amp;amp; IDL support.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added support for enum defaults to SchemaBuilder&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added ResolvingVisitor enum default, introduces an attempt at the idl.jj for enum default but tests not passing for simple.avdl&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added override annotation to getEnumDefault() implementation&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Doug Cutting\&apos;s fix to the idl.jj for Avro enum parsing. Added test case to simple.avdl and simple.avpr&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated docs, updated the reserved keywords for enums so that the @default annotation no longer works on enum avdl definitions. Updated the way that SchemaBuilder allows an enum to be built sith a default by separating out the default setter.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the docs and verified that the generated doc is readable and well-formatted.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the enum type check to a reasonable, sane check.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added the missing  semicolon to enum doc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16461289" author="jira-bot" created="Wed, 2 May 2018 16:51:03 +0000"  >&lt;p&gt;Commit 238714d324d1623f144ca09c0dfb10330a2ba2c4 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abellemare&quot; class=&quot;user-hover&quot; rel=&quot;abellemare&quot;&gt;Adam Bellemare&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;. Java: Add enum defaults, including builder &amp;amp; IDL support.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added support for enum defaults to SchemaBuilder&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added ResolvingVisitor enum default, introduces an attempt at the idl.jj for enum default but tests not passing for simple.avdl&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added override annotation to getEnumDefault() implementation&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Doug Cutting\&apos;s fix to the idl.jj for Avro enum parsing. Added test case to simple.avdl and simple.avpr&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated docs, updated the reserved keywords for enums so that the @default annotation no longer works on enum avdl definitions. Updated the way that SchemaBuilder allows an enum to be built sith a default by separating out the default setter.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the docs and verified that the generated doc is readable and well-formatted.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the enum type check to a reasonable, sane check.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added the missing  semicolon to enum doc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16461290" author="jira-bot" created="Wed, 2 May 2018 16:51:04 +0000"  >&lt;p&gt;Commit 238714d324d1623f144ca09c0dfb10330a2ba2c4 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abellemare&quot; class=&quot;user-hover&quot; rel=&quot;abellemare&quot;&gt;Adam Bellemare&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;. Java: Add enum defaults, including builder &amp;amp; IDL support.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added support for enum defaults to SchemaBuilder&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added ResolvingVisitor enum default, introduces an attempt at the idl.jj for enum default but tests not passing for simple.avdl&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added override annotation to getEnumDefault() implementation&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Doug Cutting\&apos;s fix to the idl.jj for Avro enum parsing. Added test case to simple.avdl and simple.avpr&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated docs, updated the reserved keywords for enums so that the @default annotation no longer works on enum avdl definitions. Updated the way that SchemaBuilder allows an enum to be built sith a default by separating out the default setter.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the docs and verified that the generated doc is readable and well-formatted.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the enum type check to a reasonable, sane check.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added the missing  semicolon to enum doc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16461291" author="jira-bot" created="Wed, 2 May 2018 16:51:06 +0000"  >&lt;p&gt;Commit 238714d324d1623f144ca09c0dfb10330a2ba2c4 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abellemare&quot; class=&quot;user-hover&quot; rel=&quot;abellemare&quot;&gt;Adam Bellemare&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;. Java: Add enum defaults, including builder &amp;amp; IDL support.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added support for enum defaults to SchemaBuilder&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added ResolvingVisitor enum default, introduces an attempt at the idl.jj for enum default but tests not passing for simple.avdl&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added override annotation to getEnumDefault() implementation&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Doug Cutting\&apos;s fix to the idl.jj for Avro enum parsing. Added test case to simple.avdl and simple.avpr&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated docs, updated the reserved keywords for enums so that the @default annotation no longer works on enum avdl definitions. Updated the way that SchemaBuilder allows an enum to be built sith a default by separating out the default setter.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the docs and verified that the generated doc is readable and well-formatted.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the enum type check to a reasonable, sane check.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added the missing  semicolon to enum doc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16461292" author="jira-bot" created="Wed, 2 May 2018 16:51:07 +0000"  >&lt;p&gt;Commit 238714d324d1623f144ca09c0dfb10330a2ba2c4 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abellemare&quot; class=&quot;user-hover&quot; rel=&quot;abellemare&quot;&gt;Adam Bellemare&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;. Java: Add enum defaults, including builder &amp;amp; IDL support.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added support for enum defaults to SchemaBuilder&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added ResolvingVisitor enum default, introduces an attempt at the idl.jj for enum default but tests not passing for simple.avdl&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added override annotation to getEnumDefault() implementation&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Doug Cutting\&apos;s fix to the idl.jj for Avro enum parsing. Added test case to simple.avdl and simple.avpr&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated docs, updated the reserved keywords for enums so that the @default annotation no longer works on enum avdl definitions. Updated the way that SchemaBuilder allows an enum to be built sith a default by separating out the default setter.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the docs and verified that the generated doc is readable and well-formatted.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the enum type check to a reasonable, sane check.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added the missing  semicolon to enum doc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16461293" author="jira-bot" created="Wed, 2 May 2018 16:51:09 +0000"  >&lt;p&gt;Commit 238714d324d1623f144ca09c0dfb10330a2ba2c4 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abellemare&quot; class=&quot;user-hover&quot; rel=&quot;abellemare&quot;&gt;Adam Bellemare&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;. Java: Add enum defaults, including builder &amp;amp; IDL support.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added support for enum defaults to SchemaBuilder&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added ResolvingVisitor enum default, introduces an attempt at the idl.jj for enum default but tests not passing for simple.avdl&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added override annotation to getEnumDefault() implementation&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Doug Cutting\&apos;s fix to the idl.jj for Avro enum parsing. Added test case to simple.avdl and simple.avpr&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated docs, updated the reserved keywords for enums so that the @default annotation no longer works on enum avdl definitions. Updated the way that SchemaBuilder allows an enum to be built sith a default by separating out the default setter.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the docs and verified that the generated doc is readable and well-formatted.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the enum type check to a reasonable, sane check.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added the missing  semicolon to enum doc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16461294" author="jira-bot" created="Wed, 2 May 2018 16:51:11 +0000"  >&lt;p&gt;Commit 238714d324d1623f144ca09c0dfb10330a2ba2c4 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abellemare&quot; class=&quot;user-hover&quot; rel=&quot;abellemare&quot;&gt;Adam Bellemare&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;. Java: Add enum defaults, including builder &amp;amp; IDL support.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added support for enum defaults to SchemaBuilder&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added ResolvingVisitor enum default, introduces an attempt at the idl.jj for enum default but tests not passing for simple.avdl&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added override annotation to getEnumDefault() implementation&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Doug Cutting\&apos;s fix to the idl.jj for Avro enum parsing. Added test case to simple.avdl and simple.avpr&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated docs, updated the reserved keywords for enums so that the @default annotation no longer works on enum avdl definitions. Updated the way that SchemaBuilder allows an enum to be built sith a default by separating out the default setter.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the docs and verified that the generated doc is readable and well-formatted.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the enum type check to a reasonable, sane check.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added the missing  semicolon to enum doc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16461295" author="jira-bot" created="Wed, 2 May 2018 16:51:12 +0000"  >&lt;p&gt;Commit 238714d324d1623f144ca09c0dfb10330a2ba2c4 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abellemare&quot; class=&quot;user-hover&quot; rel=&quot;abellemare&quot;&gt;Adam Bellemare&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;. Java: Add enum defaults, including builder &amp;amp; IDL support.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added support for enum defaults to SchemaBuilder&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added ResolvingVisitor enum default, introduces an attempt at the idl.jj for enum default but tests not passing for simple.avdl&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added override annotation to getEnumDefault() implementation&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Doug Cutting\&apos;s fix to the idl.jj for Avro enum parsing. Added test case to simple.avdl and simple.avpr&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated docs, updated the reserved keywords for enums so that the @default annotation no longer works on enum avdl definitions. Updated the way that SchemaBuilder allows an enum to be built sith a default by separating out the default setter.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the docs and verified that the generated doc is readable and well-formatted.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the enum type check to a reasonable, sane check.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added the missing  semicolon to enum doc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16461296" author="jira-bot" created="Wed, 2 May 2018 16:51:14 +0000"  >&lt;p&gt;Commit 238714d324d1623f144ca09c0dfb10330a2ba2c4 in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=abellemare&quot; class=&quot;user-hover&quot; rel=&quot;abellemare&quot;&gt;Adam Bellemare&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=238714d&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;. Java: Add enum defaults, including builder &amp;amp; IDL support.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added support for enum defaults to SchemaBuilder&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added ResolvingVisitor enum default, introduces an attempt at the idl.jj for enum default but tests not passing for simple.avdl&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added override annotation to getEnumDefault() implementation&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Doug Cutting\&apos;s fix to the idl.jj for Avro enum parsing. Added test case to simple.avdl and simple.avpr&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated docs, updated the reserved keywords for enums so that the @default annotation no longer works on enum avdl definitions. Updated the way that SchemaBuilder allows an enum to be built sith a default by separating out the default setter.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the docs and verified that the generated doc is readable and well-formatted.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Updated the enum type check to a reasonable, sane check.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added the missing  semicolon to enum doc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16461304" author="cutting" created="Wed, 2 May 2018 16:57:41 +0000"  >&lt;p&gt;I committed this.&#160; Thanks, Adam!&lt;/p&gt;</comment>
                            <comment id="16461319" author="githubbot" created="Wed, 2 May 2018 17:05:38 +0000"  >&lt;p&gt;bellemare commented on issue #298: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;: Added Enum Defaults and unit tests.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/298#issuecomment-386049750&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/298#issuecomment-386049750&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @cutting Thanks for your help Doug, I really appreciate all the feedback and assistance.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16585013" author="alexeyt820" created="Sun, 19 Aug 2018 05:08:32 +0000"  >&lt;p&gt;When 1.9 is planned to release ?&#160;&lt;/p&gt;</comment>
                            <comment id="16664249" author="githubbot" created="Thu, 25 Oct 2018 20:26:45 +0000"  >&lt;p&gt;rstata opened a new pull request #357: Updated spec to agree with implementation of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/357&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/357&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16664289" author="githubbot" created="Thu, 25 Oct 2018 21:06:17 +0000"  >&lt;p&gt;cutting commented on a change in pull request #357: Updated spec to agree with implementation of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/357#discussion_r228334530&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/357#discussion_r228334530&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; ##########&lt;br/&gt;
 File path: doc/src/content/xdocs/spec.xml&lt;br/&gt;
 ##########&lt;br/&gt;
 @@ -172,6 +172,13 @@&lt;br/&gt;
 	    be unique; duplicates are prohibited.  Every symbol must&lt;br/&gt;
 	    match the regular expression &amp;lt;code&amp;gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;A-Za-z_&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;A-Za-z0-9_&amp;#93;&lt;/span&gt;*&amp;lt;/code&amp;gt;&lt;br/&gt;
 	    (the same requirement as for &amp;lt;a href=&quot;#names&quot;&amp;gt;names&amp;lt;/a&amp;gt;).&amp;lt;/li&amp;gt;&lt;br/&gt;
+	    &amp;lt;li&amp;gt;&amp;lt;code&amp;gt;default:&amp;lt;/code&amp;gt; A default value for this&lt;br/&gt;
+	      enumeration, used during resolution when the reader&lt;br/&gt;
+	      encounters a symbol from the writer that isn&apos;t defined&lt;br/&gt;
+	      in the reader&apos;s schema.  See documentation for record&lt;/p&gt;

&lt;p&gt; Review comment:&lt;br/&gt;
   Are you referring to the Java documentation here?  Probably best not to.  Rather we can say that the default symbol must be present in the enum.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16664357" author="githubbot" created="Thu, 25 Oct 2018 22:29:30 +0000"  >&lt;p&gt;rstata commented on issue #357: Updated spec to agree with implementation of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/357#issuecomment-433226979&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/357#issuecomment-433226979&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Addressed Doug&apos;s comment.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16664363" author="githubbot" created="Thu, 25 Oct 2018 22:36:07 +0000"  >&lt;p&gt;cutting closed pull request #357: Updated spec to agree with implementation of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/357&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/357&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/doc/src/content/xdocs/spec.xml b/doc/src/content/xdocs/spec.xml&lt;br/&gt;
index 3a680a2ed..fd780f9ec 100644&lt;br/&gt;
&amp;#8212; a/doc/src/content/xdocs/spec.xml&lt;br/&gt;
+++ b/doc/src/content/xdocs/spec.xml&lt;br/&gt;
@@ -172,6 +172,14 @@&lt;br/&gt;
 	    be unique; duplicates are prohibited.  Every symbol must&lt;br/&gt;
 	    match the regular expression &amp;lt;code&amp;gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;A-Za-z_&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;A-Za-z0-9_&amp;#93;&lt;/span&gt;*&amp;lt;/code&amp;gt;&lt;br/&gt;
 	    (the same requirement as for &amp;lt;a href=&quot;#names&quot;&amp;gt;names&amp;lt;/a&amp;gt;).&amp;lt;/li&amp;gt;&lt;br/&gt;
+	    &amp;lt;li&amp;gt;&amp;lt;code&amp;gt;default&amp;lt;/code&amp;gt;: A default value for this&lt;br/&gt;
+	      enumeration, used during resolution when the reader&lt;br/&gt;
+	      encounters a symbol from the writer that isn&apos;t defined&lt;br/&gt;
+	      in the reader&apos;s schema (optional).  The value provided&lt;br/&gt;
+	      here must be a JSON string that&apos;s a member of&lt;br/&gt;
+	      the &amp;lt;code&amp;gt;symbols&amp;lt;/code&amp;gt; array.&lt;br/&gt;
+	      See documentation on schema resolution for how this gets&lt;br/&gt;
+	      used.&amp;lt;/li&amp;gt;&lt;br/&gt;
 	  &amp;lt;/ul&amp;gt;&lt;br/&gt;
 	  &amp;lt;p&amp;gt;For example, playing card suits might be defined with:&amp;lt;/p&amp;gt;&lt;br/&gt;
 	  &amp;lt;source&amp;gt;&lt;br/&gt;
@@ -1139,7 +1147,8 @@&lt;/p&gt;

&lt;p&gt;         &amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;if both are enums:&amp;lt;/strong&amp;gt;&lt;br/&gt;
           &amp;lt;p&amp;gt;if the writer&apos;s symbol is not present in the reader&apos;s&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;enum, then an error is signalled.&amp;lt;/p&amp;gt;&lt;br/&gt;
+            enum and the reader has a &amp;lt;code&amp;gt;default&amp;lt;/code&amp;gt; value, then&lt;br/&gt;
+            that value is used, otherwise an error is signalled.&amp;lt;/p&amp;gt;&lt;br/&gt;
         &amp;lt;/li&amp;gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;         &amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;if both are arrays:&amp;lt;/strong&amp;gt;&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16664364" author="jira-bot" created="Thu, 25 Oct 2018 22:36:11 +0000"  >&lt;p&gt;Commit 764c9322c136f0e3b8bd1e3f646d683321927e1a in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=raymie&quot; class=&quot;user-hover&quot; rel=&quot;raymie&quot;&gt;Raymie Stata&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=764c932&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=764c932&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Updated spec to agree with implementation of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt; (#357)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Updated spec to agree with implementation of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Improvement&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16664365" author="jira-bot" created="Thu, 25 Oct 2018 22:36:12 +0000"  >&lt;p&gt;Commit 764c9322c136f0e3b8bd1e3f646d683321927e1a in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=raymie&quot; class=&quot;user-hover&quot; rel=&quot;raymie&quot;&gt;Raymie Stata&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=764c932&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=764c932&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Updated spec to agree with implementation of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt; (#357)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Updated spec to agree with implementation of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1340&quot; title=&quot;use default to allow old readers to specify default enum value when encountering new enum symbols&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1340&quot;&gt;&lt;del&gt;AVRO-1340&lt;/del&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Improvement&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="16736362" author="felixgv" created="Mon, 7 Jan 2019 21:15:36 +0000"  >&lt;p&gt;It is great to see this issue resolved! Avro 1.9.0 is not released yet, right?&lt;/p&gt;

&lt;p&gt;Is there any documentation on how to use this feature? (i.e.: schema design, expected semantics, etc.)&lt;/p&gt;

&lt;p&gt;I have tried the following but the page is not there yet: &lt;a href=&quot;https://avro.apache.org/docs/1.9.0/spec.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://avro.apache.org/docs/1.9.0/spec.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;-F&lt;/p&gt;</comment>
                            <comment id="16742216" author="abellemare" created="Mon, 14 Jan 2019 15:36:43 +0000"  >&lt;p&gt;I too would like to see this get released. Unfortunately I am not very active in the Avro community otherwise, so I can&apos;t comment on when (or if) we&apos;ll see another release.&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12907457">AVRO-1752</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12652454">AVRO-1347</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 1 Mar 2016 15:57:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>329764</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10342"><![CDATA[Incompatible change]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 week ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1kw5b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>330099</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
