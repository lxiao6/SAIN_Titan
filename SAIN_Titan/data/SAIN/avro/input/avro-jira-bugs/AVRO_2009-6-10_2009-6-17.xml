<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:12:17 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2009-6-10+AND+created+%3C%3D+2009-6-17+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="6" total="6"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-49] Efficient positive varints</title>
                <link>https://issues.apache.org/jira/browse/AVRO-49</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Avro looks like an interesting project, so I was looking at the specification. I noticed that varints use zig-zag encoding which is a good signed representation. However, id-like values are very common and they are often always positive. I think it would be nice to support them as efficiently as possible too (like Protocol Buffers, for example). Would something like this be considered at all?&lt;/p&gt;</description>
                <environment></environment>
        <key id="12427594">AVRO-49</key>
            <summary>Efficient positive varints</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="ijuma">Ismael Juma</reporter>
                        <labels>
                    </labels>
                <created>Wed, 10 Jun 2009 20:38:13 +0000</created>
                <updated>Tue, 14 Jul 2009 23:04:48 +0000</updated>
                            <resolved>Tue, 23 Jun 2009 19:57:02 +0000</resolved>
                                                                    <component>spec</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12720381" author="cutting" created="Tue, 16 Jun 2009 22:18:57 +0000"  >&lt;p&gt;Many target languages (Java, Python, Perl, PigLatin) do not distinguish between signed and unsigned types.  (Some don&apos;t distinguish between 32 and 64-bit types, which is already awkward.)  Adding more such distinctions makes compatibility harder.  At this point I&apos;d also rather avoid adding more types.  Yes, there is a slight size advantage to avoiding zig-zag encoding, but my feeling is that making things a bit smaller is not worth the complexity this would bring.&lt;/p&gt;</comment>
                            <comment id="12723260" author="cutting" created="Tue, 23 Jun 2009 19:26:39 +0000"  >&lt;p&gt;Any objections to closing this as &quot;won&apos;t fix&quot;?&lt;/p&gt;</comment>
                            <comment id="12723264" author="ijuma" created="Tue, 23 Jun 2009 19:39:49 +0000"  >&lt;p&gt;Sorry, I have been meaning to reply to this, but have been a bit busy. The fact that some languages don&apos;t distinguish between signed and unsigned types doesn&apos;t seem to be a deterrent for protocol buffers, so I am not sure if that&apos;s a strong argument.&lt;/p&gt;

&lt;p&gt;However, there is no question that adding more choice at this level introduces additional complexity. I still think that id-like integers are common enough (in my experience, more common than signed integers) that it&apos;s worth optimising them as much as possible, but I understand the motivation for not doing so.&lt;/p&gt;

&lt;p&gt;In summary, from my point of view, &quot;won&apos;t fix&quot; is not ideal, but acceptable. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12723271" author="cutting" created="Tue, 23 Jun 2009 19:57:02 +0000"  >&lt;p&gt;Ismael, thanks for your understanding.  I am closing this as &apos;won&apos;t fix&apos;.&lt;/p&gt;</comment>
                            <comment id="12723297" author="scott_carey" created="Tue, 23 Jun 2009 20:39:51 +0000"  >&lt;p&gt;On average, this will waste one bit per int if all numbers are positive.  Performance should be slightly lower as well due to the extra bit shift (perhaps imperceptibly so). &lt;/p&gt;

&lt;p&gt;I do find that &quot;id&quot; types are extremely common, although a third common type is one that is positive for almost all values, and occasionally contains small negative numbers (most often, -1).&lt;/p&gt;

&lt;p&gt;However perhaps the most common case will be the length fields in all &quot;string&quot; and &quot;bytes&quot; fields, which by definition are always positive or zero, but are encoded as if they could be negative.&lt;/p&gt;

&lt;p&gt;Although not optimal, a client can &apos;pack&apos; their positive number data into the current format if space is a huge concern:  If even, bit shift to the right one and set the sign bit indicating negative on write, and on read multiply negative numbers by two and flip the sign.  &lt;br/&gt;
The length fields of strings and bytes can even do this &amp;#8211; although its somewhat of a waste to rotate the int one way in the client and then back again in the low level encode.  &lt;/p&gt;

&lt;p&gt;Perhaps the best thing is to do the reverse and pack unsigned internally, and have the &quot;int&quot; and &quot;long&quot; types pack the sign bit?&lt;/p&gt;


&lt;p&gt;The other variable length type I can think of is a Numeric data of arbitrary, exact precision  (Think BigDecimal)&lt;/p&gt;

&lt;p&gt;It is possible to pack something like that into the bytes type though.&lt;/p&gt;</comment>
                            <comment id="12723303" author="cutting" created="Tue, 23 Jun 2009 21:01:23 +0000"  >&lt;p&gt;&amp;gt; On average, this will waste one bit per int if all numbers are positive.&lt;br/&gt;
&amp;gt; [ ... ] perhaps the most common case will be the length fields in all &quot;string&quot; and &quot;bytes&quot; fields,&lt;/p&gt;

&lt;p&gt;For strings less than 64 bytes, no space is added. The worst case is if all strings are 64 bytes, then the added space is about 0.2%.  As they get longer, the added space diminishes.  When strings average around 1kB, this bit adds just 0.01%.  So, yes, there is some waste, but not a lot.&lt;/p&gt;

&lt;p&gt;Design-wise this gets to the question of whether Avro should include the intersection or the union of common programming language data representation features.  My feeling is that compatibility will be simplified if we aim more for the intersection, so long as that intersection is not too impoverished or inefficient.  There are judgement calls to be made in this analysis, but unsigned numbers seem in the &quot;union&quot; camp to me. &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 16 Jun 2009 22:18:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94378</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 31 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxx3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79425</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-50] bidrectional text representation of AVRO data</title>
                <link>https://issues.apache.org/jira/browse/AVRO-50</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;It would be very useful to add a text representation of AVRO data to the spec, and implement toString() and fromString() in all implementations.  Faced with binary data, it&apos;ll be a useful operation to decode it for debugging, ad-hoc manipulation, etc.&lt;/p&gt;

&lt;p&gt;I suspect the text format will:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;be JSON&lt;/li&gt;
	&lt;li&gt;require the schema for full interpretation&lt;/li&gt;
	&lt;li&gt;map easily onto the binary format (if the binary format has a signifier to take a specific branch of a union, the text format will have such a signifier as well)&lt;/li&gt;
	&lt;li&gt;not be unique (there&apos;s more than one way to encode a given number (e.g., &lt;tt&gt;0x0 == 0&lt;/tt&gt;) or string (e.g., &lt;tt&gt;&quot;\u0061&quot; == &quot;a&quot;&lt;/tt&gt;, not to mention flexible whitespace)&lt;/li&gt;
	&lt;li&gt;be compatible, for the binary type, with whatever is decided in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-36&quot; title=&quot;binary default values do not decode base64&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-36&quot;&gt;&lt;del&gt;AVRO-36&lt;/del&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12427816">AVRO-50</key>
            <summary>bidrectional text representation of AVRO data</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="philip">Philip Zeyliger</reporter>
                        <labels>
                    </labels>
                <created>Sat, 13 Jun 2009 16:56:07 +0000</created>
                <updated>Wed, 16 Sep 2009 22:31:44 +0000</updated>
                            <resolved>Wed, 22 Jul 2009 20:21:18 +0000</resolved>
                                                    <fixVersion>1.1.0</fixVersion>
                                    <component>spec</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12720938" author="cutting" created="Wed, 17 Jun 2009 22:10:42 +0000"  >&lt;p&gt;If we have the schema in hand, then we can use the same JSON representations that are used for default values (&lt;a href=&quot;http://hadoop.apache.org/avro/docs/current/spec.html#Records&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hadoop.apache.org/avro/docs/current/spec.html#Records&lt;/a&gt;), with the exception of unions.&lt;/p&gt;

&lt;p&gt;Unions will need to be labeled.  For example, a union with a map and a record would be ambiguous, since both are represented as JSON objects, and unions of bytes and bytes, enums and or strings would also be ambiguous.&lt;/p&gt;

&lt;p&gt;For unions we can use a two-element JSON array whose first element is the name of the type in the union and whose second element is the JSON-encoded value.  For example, given the schema &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;string|bytes&amp;#93;&lt;/span&gt;&quot;, the value &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;string&amp;quot;,&amp;quot;foo&amp;quot;&amp;#93;&lt;/span&gt; would be a string, while &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;bytes&amp;quot;,&amp;quot;foo&amp;quot;&amp;#93;&lt;/span&gt; would be bytes.  If a value is not a JSON array then it is assumed to be of the first element of the union.  So, with the above schema, the value &quot;foo&quot; alone would be a string.  Note however that if a union includes an array, then JSON values must always use the array form.  Thoughts?&lt;/p&gt;</comment>
                            <comment id="12720953" author="cutting" created="Wed, 17 Jun 2009 22:19:11 +0000"  >&lt;p&gt;&amp;gt; given the schema &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;string|bytes&amp;#93;&lt;/span&gt;&quot;&lt;/p&gt;

&lt;p&gt;That schema should of course instead be &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;string&amp;quot;, &amp;quot;bytes&amp;quot;&amp;#93;&lt;/span&gt;.&lt;/p&gt;</comment>
                            <comment id="12720956" author="philip" created="Wed, 17 Jun 2009 22:28:07 +0000"  >&lt;p&gt;From the draft spec:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unions may not contain more than one schema with the same type, except for the named types record and fixed. For example, unions containing two array types or two map types are not permitted, but two types with different names are permitted. (Names permit efficient resolution when reading and writing unions.)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think &lt;span class=&quot;error&quot;&gt;&amp;#91;type, value&amp;#93;&lt;/span&gt; for unions breaks down if you have a fixed2 unioned with a fixed4.&lt;/p&gt;

&lt;p&gt;The easiest thing to do is to specify unions as &lt;span class=&quot;error&quot;&gt;&amp;#91;position, value&amp;#93;&lt;/span&gt;, but annoyingly the position becomes an opaque number in that case.&lt;/p&gt;</comment>
                            <comment id="12720968" author="cutting" created="Wed, 17 Jun 2009 22:52:35 +0000"  >&lt;p&gt;&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;type, value&amp;#93;&lt;/span&gt; for unions breaks down if you have a fixed2 unioned with a fixed4.&lt;/p&gt;

&lt;p&gt;In the case of fixed (and records) we use the defined name of the type.  E.g. a value of type &lt;/p&gt;
{&quot;type&quot;: &quot;fixed&quot;, &quot;name&quot;: &quot;MD5&quot;, &quot;size&quot;: 16}
&lt;p&gt; could, if in a union, have a JSON value like &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;MD5&amp;quot;, &amp;quot;0123456789abcdef&amp;quot;&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Note also that, except for records and fixed, unions are not permitted to contain multiple entries of the same type ((&lt;a href=&quot;http://hadoop.apache.org/avro/docs/current/spec.html#Unions&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hadoop.apache.org/avro/docs/current/spec.html#Unions&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="12720972" author="philip" created="Wed, 17 Jun 2009 23:02:35 +0000"  >&lt;p&gt;Excellent; I&apos;d missed the fact that fixed records have names.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12720976" author="cutting" created="Wed, 17 Jun 2009 23:10:39 +0000"  >&lt;p&gt;FWIW, the spec does not currently mention enum there, but they also have a required name and should clearly get the same treatment as record and fixed.  I just filed &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-55&quot; title=&quot;minor spec improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-55&quot;&gt;&lt;del&gt;AVRO-55&lt;/del&gt;&lt;/a&gt; for this.&lt;/p&gt;</comment>
                            <comment id="12722026" author="cutting" created="Fri, 19 Jun 2009 21:31:36 +0000"  >&lt;p&gt;To implement this in Java, we should be able to implement a JsonValueReader and JsonValueWriter that wrap Jackson JsonParser and JsonGenerator instances.&lt;/p&gt;</comment>
                            <comment id="12722043" author="cutting" created="Fri, 19 Jun 2009 22:00:22 +0000"  >&lt;p&gt;If we&apos;re going to implement this as a ValueReader/ValueWriter we might wait until after that class is renamed and made abstract by &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-57&quot; title=&quot;rename ValueReader and ValueWriter and make them abstract&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-57&quot;&gt;&lt;del&gt;AVRO-57&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12722048" author="cutting" created="Fri, 19 Jun 2009 22:01:45 +0000"  >&lt;p&gt;We should decide on a representation for binary values before implementing this.&lt;/p&gt;</comment>
                            <comment id="12724749" author="cutting" created="Fri, 26 Jun 2009 22:37:17 +0000"  >&lt;p&gt;Here&apos;s a patch that implements this.  It uses Jackson&apos;s SAX-like API for both reading and writing, so should perform well.&lt;/p&gt;

&lt;p&gt;I changed the representation of unions from what was discussed above to instead use a JSON object, pairing the type name with the value, special casing just null.  So, with the union &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;null&amp;quot;, &amp;quot;string&amp;quot;, &amp;quot;long&amp;quot;&amp;#93;&lt;/span&gt;, a string would be encoded as &lt;/p&gt;
{&quot;string&quot;: &quot;foo&quot;}
&lt;p&gt;, a long would be encoded as &lt;/p&gt;
{&quot;long&quot;: 1}
&lt;p&gt;, but a null is written as just null.  In other words, except when the selected branch is null, enums are always tagged, and a null is never tagged.  Yes, other cases are unambiguous (e.g., the above example), and we could permit more cases to go untagged, but it seemed better to optimize this one common case and keep the algorithm simple.&lt;/p&gt;

&lt;p&gt;To implement this I had to make substantial changes to the Encoder and Decoder API.&lt;/p&gt;

&lt;p&gt;I added new methods to:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;start/end read/write record methods, to put braces around records&lt;/li&gt;
	&lt;li&gt;read/write record field name, to store field names, elided in binary&lt;/li&gt;
	&lt;li&gt;read/write map key, to store map keys, instead of just using read/write string&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I changed the read/write array/map api so that the start methods no longer read/write the size, but only the (logical) braces.&lt;/p&gt;

&lt;p&gt;I also added a schema parameter to the union and enum read/write methods so that names can be used in JSON instead of numbers.  (The numbers would be unambiguous and more compact, but not user-friendly, as a text format ought to be.) &lt;/p&gt;

&lt;p&gt;Thiru: this last change is not complete for the resolving and validating encoder/decoder implementations, since the schema is not available in the parsing table.  Can you please have a look at adding this?  It would be nice if one could use these to generate JSON output too.  Thanks!&lt;/p&gt;

&lt;p&gt;If folks like this, I&apos;ll update the spec document to describe it before committing.&lt;/p&gt;</comment>
                            <comment id="12725282" author="cutting" created="Mon, 29 Jun 2009 17:56:19 +0000"  >&lt;p&gt;I spoke with Raymie about this, and he suggested that the parser-based schema handling logic in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-29&quot; title=&quot;Validation and resolution for ValueInput/ValueOutput&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-29&quot;&gt;&lt;del&gt;AVRO-29&lt;/del&gt;&lt;/a&gt; might be instead used to insert record boundaries, field names, etc.  So one might instead add these methods only to a parser-based encoder/decoder subclasses rather than to the base classes, so that applications that read and write data need not explicitly invoke them.&lt;/p&gt;</comment>
                            <comment id="12726519" author="raymie" created="Thu, 2 Jul 2009 15:33:42 +0000"  >&lt;p&gt;Here&apos;s the conversation Doug was alluding to:&lt;/p&gt;

&lt;p&gt;Doug mentioned that he added start-record/end-record and related methods to value-reader/writer to support reading and writing from the JSON syntax.  Neither of us really like this, because it adds a lot of noise to clients of the API, and also because it&apos;s the tail (JSON format) wagging the dog (Avro binary).&lt;/p&gt;

&lt;p&gt;To understand the motivation for methods like start-record, consider writing the schema:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;{type:record, name:r1, fields:[
    {name:f11, value:int}
    {name:f12, value:{type:record,name:r2,fields:[{name:f21, value:int}]}}
  ]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the current design of value-writer, all the client needs to do is call writeInt and writeInt, and all the record stuff is handled implicitly.  This implicit handling works well for the Avro binary representation, which does not surround records or their fields with any delimiters.  But the JSON format &lt;em&gt;does&lt;/em&gt; surround records and their fields with brackets and field-labels, which raises the question: How does the JSON-implementation of value-reader/writer know how to handle this bracketing and labeling?&lt;/p&gt;

&lt;p&gt;The solution of adding start/end-record and related methods to the value-reader/writer API forces this task of bracketing and labeling onto the client of value-writer,  which has the problems listed above.&lt;/p&gt;

&lt;p&gt;However, Doug and I realized that the parser has all the state needed to output the bracketing and labeling.  So instead of adding a bunch of noise-methods to value-reader/writer, we can use the existing APIs, and use the parsing code to implement value reader/writers that handle the JSON format.  (The parser would be something closer to the Resolving parser than the validating one.)&lt;/p&gt;</comment>
                            <comment id="12726521" author="raymie" created="Thu, 2 Jul 2009 15:42:50 +0000"  >&lt;p&gt;The spec for JSON records does not indicate whether or not records-fields in the JSON syntax need to appear in the order they&apos;re specified in the Avro schema.  It would be helpful if they did: the current usage-pattern of the value-reader (and -writer) API is that values come in-order, so out-of-order arrival would be very disruptive.&lt;/p&gt;

&lt;p&gt;On this point, the JSON serialization format might be a different from the Avro-schema format used for default values.  In the case of default values, these are written primarily by users, who would really appreciate a format that&apos;s forgiving regarding the order of fields.  And the code that processes these values can easily adjust the order without impacting clients of the overall Avro API.  So order insensitivity makes sense in this context.&lt;/p&gt;

&lt;p&gt;However, the JSON serialization format is written primarily by machines, which don&apos;t care about this sensitivity.  And, as just indicated, there is a non-trivial cost to allowing out-of-order in serialized values themselves.  So order sensitivity makes sense here.&lt;/p&gt;

&lt;p&gt;So I propose that the default-values be insensitive to order and the serialization format be order-sensitive.&lt;/p&gt;</comment>
                            <comment id="12726533" author="cutting" created="Thu, 2 Jul 2009 16:24:47 +0000"  >&lt;p&gt;&amp;gt; So I propose that the default-values be insensitive to order and the serialization format be order-sensitive.&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="12726616" author="thiru_mg" created="Thu, 2 Jul 2009 18:40:40 +0000"  >&lt;p&gt;This patch is modified version of Doug&apos;s patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It includes all fixes in ValidatingDecoder/Encoder and ResolvingDecoder to fully support the changes made to Decoder/Encoder abstract classes (to enable Json encoding)&lt;/li&gt;
	&lt;li&gt;This does not include the new approach that Raymie and Doug have suggested.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I understand the new proposal. But I have a couple of questions regarding the exact class hierarchies. I&apos;ll talk to Raymie tomorrow and submit a new patch later.&lt;/p&gt;</comment>
                            <comment id="12733196" author="thiru_mg" created="Mon, 20 Jul 2009 11:40:48 +0000"  >&lt;p&gt;Raymie and I have reimplemented the JSON encoder and decoder using the parser instead of direct implementation of Encoder and Decoder. This enabled us to implement JSON encoder and decoder with minimal additional support from the clients of Encoder and Decoder. The additional information required such as record boundaries etc. are derived from the parser&apos;s state. The only change I&apos;ve made to Encoder and Decoder is to distingush between map key and string. This distinction makes JSON implementation easy. Consequently, some minor changes were required in the clients of Encoder and Decoder. The only other change was to move reset() as part of Encoder. This must have been part of the interface when we separated Encoder from its implementation BinaryEncoder.&lt;/p&gt;

&lt;p&gt;When trying to implement this, we realized that the original implementation of the parser was too inflexible and unreadable. We have completely reimplemented the parser generator. The new version is slightly faster than the original one. As part of this refactoring, we have moved all those classes that are not required by users of avro.io package into a subpackage called parsing under it.&lt;/p&gt;

&lt;p&gt;When trying to validate various uses of the Decoder and Encoder interfaces, I discovered there were some wrong uses. These errors do not have any impact with the binary format but will have trouble with JSON format. for example, at one place, writeInt() was instead of writeEnum(). All such cases have been fixed.&lt;/p&gt;

&lt;p&gt;The JSON decoder streams contents from its input, so it expects the fields of records in the order of their definition in the schema. There is no problem in consuming the data  generated by JSON encoder. But if the such data is passed through some other JSON tool, the ordering of field may get changed and hence may not get accepted by JSON decoder.&lt;/p&gt;

&lt;p&gt;One additional functionality in this patch that was not present earlier is that the ResolvingDecoder can supply values for the fields for whcih the reader&apos;s schema has defined default values and the writer&apos;s schema has omitted. This feature, naturally, uses JSON decoder. Consequently, the default values for records should be defined the correct field order.&lt;/p&gt;
</comment>
                            <comment id="12733350" author="cutting" created="Mon, 20 Jul 2009 20:59:30 +0000"  >&lt;p&gt;I think you forgot to include the new files, JsonEncoder.java and JsonDecoder.java, no?&lt;/p&gt;</comment>
                            <comment id="12733431" author="thiru_mg" created="Tue, 21 Jul 2009 01:41:16 +0000"  >&lt;p&gt;Oops. Yes. Here is the correct patch.&lt;/p&gt;</comment>
                            <comment id="12733645" author="thiru_mg" created="Tue, 21 Jul 2009 14:42:11 +0000"  >&lt;p&gt;Please apply the patch first and then run the shell script.&lt;/p&gt;</comment>
                            <comment id="12733803" author="cutting" created="Tue, 21 Jul 2009 20:11:41 +0000"  >&lt;p&gt;Here&apos;s an updated patch.  I fixed some javadoc comments, moved the doc-files directory, and re-added my changes to TestSchema.java to test the JSON code.&lt;/p&gt;

&lt;p&gt;Thiru, Raymie tells me you still intend to do more cleanup here, so I&apos;ve not committed this yet.&lt;/p&gt;</comment>
                            <comment id="12733863" author="raymie" created="Tue, 21 Jul 2009 22:31:41 +0000"  >&lt;p&gt;I&apos;m not a big fan of introducing new methods into Encoder/Decoder.  Instead of introducing the new method readMapKey (and writeMapKey), what if we put a new terminal MAPKEYMARKER into the productions for map schemas.  It can be used to control the behavior of readString as follows:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  public Utf8 readString(Utf8 old) throws IOException {
    parser.advance(Symbol.STRING);
    String result;
    if (parser.topSymbol() == Symbol.MAPKEYMARKER) {
      parser.advance(Symbol.MAPKEYMARKER));
      if (in.getCurrentToken() == JsonToken.FIELD_NAME) {
        result = in.getText();
      } else {
        throw error(&quot;map-key&quot;);
      } 
    } else if (in.getCurrentToken() == JsonToken.VALUE_STRING) {
      result = in.getText();
    } else {
      throw error(&quot;string&quot;);
    }
    in.nextToken();
    return new Utf8(result);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12734234" author="thiru_mg" created="Wed, 22 Jul 2009 18:23:15 +0000"  >&lt;p&gt;Here is a new patch based on Doug&apos;s.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This incorporates Raymie&apos;s suggestion about avoiding read/write/skip mapKeys.&lt;/li&gt;
	&lt;li&gt;We are doing away with the reset() in encoders and decoders. The parser automatically resets itself when a complete object has been parsed. There is no noticeable performance penalty due to this.&lt;/li&gt;
	&lt;li&gt;The earlier patch did not validate the number of items written within an array or map. This one does. I didn&apos;t notice any performance problems due to this additional check. (The check does not happen for every item. It happens on the subsequent setItemCount(), writeArrayEnd() or writeMapEnd())&lt;/li&gt;
	&lt;li&gt;Added copyright messages files which lacked them&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12734293" author="cutting" created="Wed, 22 Jul 2009 20:21:18 +0000"  >&lt;p&gt;I just committed this.  Thanks, Thiru!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12426144">AVRO-36</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12428420">AVRO-57</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12414229" name="AVRO-50.patch" size="153735" author="thiru_mg" created="Wed, 22 Jul 2009 18:23:15 +0000"/>
                            <attachment id="12414136" name="AVRO-50.patch" size="152954" author="cutting" created="Tue, 21 Jul 2009 20:11:41 +0000"/>
                            <attachment id="12414050" name="AVRO-50.patch" size="202483" author="thiru_mg" created="Tue, 21 Jul 2009 01:41:16 +0000"/>
                            <attachment id="12413997" name="AVRO-50.patch" size="130584" author="thiru_mg" created="Mon, 20 Jul 2009 11:03:04 +0000"/>
                            <attachment id="12412411" name="AVRO-50.patch" size="139634" author="thiru_mg" created="Thu, 2 Jul 2009 18:40:39 +0000"/>
                            <attachment id="12411967" name="AVRO-50.patch" size="51253" author="cutting" created="Fri, 26 Jun 2009 22:37:17 +0000"/>
                            <attachment id="12414137" name="AVRO-50.sh" size="344" author="cutting" created="Tue, 21 Jul 2009 20:11:41 +0000"/>
                            <attachment id="12414104" name="AVRO-50.sh" size="266" author="thiru_mg" created="Tue, 21 Jul 2009 14:42:11 +0000"/>
                            <attachment id="12413998" name="AVRO-50.sh" size="234" author="thiru_mg" created="Mon, 20 Jul 2009 11:03:04 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 17 Jun 2009 22:10:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94379</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 27 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxxb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79426</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-51] testio.py doesn&apos;t exist correctly</title>
                <link>https://issues.apache.org/jira/browse/AVRO-51</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Very simple bug: exit was defined, but not being called.  Attaching a one-line diff.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12427817">AVRO-51</key>
            <summary>testio.py doesn&apos;t exist correctly</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="philip">Philip Zeyliger</assignee>
                                    <reporter username="philip">Philip Zeyliger</reporter>
                        <labels>
                    </labels>
                <created>Sat, 13 Jun 2009 17:36:22 +0000</created>
                <updated>Tue, 14 Jul 2009 22:50:13 +0000</updated>
                            <resolved>Mon, 15 Jun 2009 05:47:22 +0000</resolved>
                                                    <fixVersion>1.0.0</fixVersion>
                                    <component>python</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12719407" author="sharadag" created="Mon, 15 Jun 2009 05:47:22 +0000"  >&lt;p&gt;I committed this. Thanks Philip!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12410545" name="AVRO-51.patch" size="438" author="philip" created="Sat, 13 Jun 2009 17:36:45 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 15 Jun 2009 05:47:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94380</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 33 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxxj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79427</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-52] Need a usage/lifecycle test to explain the python API</title>
                <link>https://issues.apache.org/jira/browse/AVRO-52</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;AVRO/python will eventually need something analogous to &lt;a href=&quot;http://wiki.apache.org/thrift/ThriftUsagePython&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/thrift/ThriftUsagePython&lt;/a&gt;, the Thrift Lightning talk at &lt;a href=&quot;http://x1024.net/blog/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://x1024.net/blog/&lt;/a&gt;, or  &lt;a href=&quot;http://code.google.com/apis/protocolbuffers/docs/pythontutorial.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://code.google.com/apis/protocolbuffers/docs/pythontutorial.html&lt;/a&gt; .  While the API is still being developed, however, it may make sense to simply have a unit test that illustrates reasonable usage of the APIs.  This can also serve as a place that users look at to learn the APIs and comment on their friendliness and pythonicity.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12427819">AVRO-52</key>
            <summary>Need a usage/lifecycle test to explain the python API</summary>
                <type id="6" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/requirement.png">Test</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="hammer">Jeff Hammerbacher</assignee>
                                    <reporter username="philip">Philip Zeyliger</reporter>
                        <labels>
                    </labels>
                <created>Sat, 13 Jun 2009 19:13:15 +0000</created>
                <updated>Mon, 4 Jan 2010 17:48:54 +0000</updated>
                                                                            <component>python</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="12719175" author="philip" created="Sat, 13 Jun 2009 19:15:14 +0000"  >&lt;p&gt;Attaching a very first pass of such a test.  Someone more familiar with the APIs should take a look to see if I&apos;m using them as intended, and there are several TODOs.&lt;/p&gt;</comment>
                            <comment id="12719510" author="sharadag" created="Mon, 15 Jun 2009 10:30:28 +0000"  >&lt;p&gt;Aren&apos;t the existing tests also doing the similar thing? In case more coverage is required, we can add more tests but for API usage illustration etc, won&apos;t tutorial documentation be more helpful than tests ? I think we should add to the docs to illustrate python APIs.&lt;/p&gt;</comment>
                            <comment id="12719718" author="philip" created="Mon, 15 Jun 2009 19:13:04 +0000"  >&lt;p&gt;It is true that a usage test wouldn&apos;t add much more in the way of coverage, but that&apos;s not its sole point.  Think of it more as a first draft of a tutorial: a new user could look through it and see how the APIs are intended to be used.  Of course, this could be written as a static documentation page, but, the trouble with that is, for a new project live AVRO, it will get out of date very quickly.  Having the tutorial code enshrined in a unit test helps.  When faced with a new technology, I tend to go straight towards the examples, and some of the best examples are typically in the test code: that code shows both how to use it, and what it should be doing.  &lt;/p&gt;

&lt;p&gt;I suspect it&apos;ll be nice to have some very simple tests banging around, since they tend to be easier to debug.  The random-data tests are thorough, but they&apos;re quite tricky to understand.&lt;/p&gt;

&lt;p&gt;One way to approach this could be as python doctests (&lt;a href=&quot;http://docs.python.org/library/doctest.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.python.org/library/doctest.html&lt;/a&gt;), but, in practice, I find the regular unittest framework to be easier to work with.&lt;/p&gt;</comment>
                            <comment id="12731192" author="cutting" created="Tue, 14 Jul 2009 23:12:04 +0000"  >&lt;p&gt;What should we do with this?  Perhaps we should have an examples/ tree that contains runnable code, that we can run from unit tests.  We could also link to it from the documentation.  Thoughts?&lt;/p&gt;</comment>
                            <comment id="12731300" author="sharadag" created="Wed, 15 Jul 2009 06:23:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;we should have an examples/ tree that contains runnable code, that we can run from unit tests. We could also link to it from the documentation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="12731585" author="philip" created="Wed, 15 Jul 2009 17:42:22 +0000"  >&lt;p&gt;+1 to the examples/ tree idea.&lt;/p&gt;</comment>
                            <comment id="12778282" author="hammer" created="Mon, 16 Nov 2009 10:15:18 +0000"  >&lt;p&gt;Does Patrick Hunt&apos;s Avro RPC Quickstart on Github satisfy the requirements of this ticket? &lt;a href=&quot;http://github.com/phunt/avro-rpc-quickstart&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/phunt/avro-rpc-quickstart&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12778344" author="philip" created="Mon, 16 Nov 2009 13:56:39 +0000"  >&lt;p&gt;Sure.  Would be great for the quickstart(s) to be part of the project itself, though, so that they&apos;re easier to find.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12410547" name="AVRO-52.patch" size="3254" author="philip" created="Sat, 13 Jun 2009 19:15:14 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 15 Jun 2009 10:30:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94381</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 11 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxxr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79428</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-53] use ivy to retrieve dependencies</title>
                <link>https://issues.apache.org/jira/browse/AVRO-53</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Avro should use Ivy to retrieve its dependencies.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12428045">AVRO-53</key>
            <summary>use ivy to retrieve dependencies</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Tue, 16 Jun 2009 20:59:43 +0000</created>
                <updated>Tue, 14 Jul 2009 22:50:13 +0000</updated>
                            <resolved>Wed, 17 Jun 2009 20:20:40 +0000</resolved>
                                                    <fixVersion>1.0.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12720351" author="cutting" created="Tue, 16 Jun 2009 21:06:18 +0000"  >&lt;p&gt;This patch removes most jar files from Avro, retrieving them instead with Ivy.  Offline builds are still possible with &apos;ant -Doffline=true&apos;.&lt;/p&gt;

&lt;p&gt;Note that the most recent version of TestNG in Maven is 5.8, so I&apos;ve had to disable Avro&apos;s use of some 5.9-specific features.&lt;/p&gt;</comment>
                            <comment id="12720373" author="cutting" created="Tue, 16 Jun 2009 22:05:39 +0000"  >&lt;p&gt;Here&apos;s an improved patch that also generates a POM and checksum files so that the Avro jar is easy to upload to a Maven repo.&lt;/p&gt;

&lt;p&gt;Barring objections, I will commit this tomorrow.&lt;/p&gt;</comment>
                            <comment id="12720865" author="cutting" created="Wed, 17 Jun 2009 20:20:40 +0000"  >&lt;p&gt;I just committed this.&lt;/p&gt;

&lt;p&gt;Note that I changed it so that one no longer needs to specify -Doffline=true when offline.  So long as the versions of the libraries declared in ivy.xml and the version of Ivy declared in build.xml have not changed since an online build was done, offline builds will succeed.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12428046">AVRO-54</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12410857" name="AVRO-53.patch" size="7732" author="cutting" created="Tue, 16 Jun 2009 22:05:39 +0000"/>
                            <attachment id="12410853" name="AVRO-53.patch" size="6705" author="cutting" created="Tue, 16 Jun 2009 21:06:18 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94382</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 32 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxxz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79429</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-54] upgrade to TestNG 5.9</title>
                <link>https://issues.apache.org/jira/browse/AVRO-54</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Once TestNG 5.9 is available in Maven, Avro should switch back to it and re-enable its custom TestNG event listeners.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12428046">AVRO-54</key>
            <summary>upgrade to TestNG 5.9</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Tue, 16 Jun 2009 21:07:47 +0000</created>
                <updated>Wed, 16 Sep 2009 22:31:44 +0000</updated>
                            <resolved>Sat, 18 Jul 2009 04:18:44 +0000</resolved>
                                                    <fixVersion>1.1.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12722000" author="cutting" created="Fri, 19 Jun 2009 20:52:41 +0000"  >&lt;p&gt;Here&apos;s a patch.  This cannot be applied until TestNG 5.9 is in the Maven repo.&lt;/p&gt;</comment>
                            <comment id="12732838" author="cutting" created="Sat, 18 Jul 2009 04:18:44 +0000"  >&lt;p&gt;I just committed this.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12428045">AVRO-53</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12411262" name="AVRO-54.patch" size="1637" author="cutting" created="Fri, 19 Jun 2009 20:52:41 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94383</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 28 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0dxy7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79430</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
