<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:13:25 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2010-2-2+AND+created+%3C%3D+2010-2-9+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="18" total="18"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-392] Binary Decoder Performance and flexibility overhaul</title>
                <link>https://issues.apache.org/jira/browse/AVRO-392</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;BinaryDecoder has room for significant performance improvement.  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-327&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;AVRO-327&lt;/a&gt; has some preliminary work here, but in order to satisfy some use cases there is much more work to do.&lt;/p&gt;

&lt;p&gt;I am opening a new ticket because the scope of the changes needed to do this the right way are larger.&lt;/p&gt;

&lt;p&gt;I have done a large bulk of a new implementation that abstracts a &apos;ByteSource&apos; from the BinaryDecoder.  Currently BinaryDecoder is tightly coupled to InputStream.  The ByteSource can wrap an InputStream, FileChannel, or byte[] in this version, but could be extended to support other channel types, sockets, etc.  This abstraction allows the BinaryDecoder to buffer data from various sources while supporting interleaved access to the underlying data and greater flexibility going forward.&lt;br/&gt;
The performance of this abstraction has been heavily tuned so that maximum performance can be achieved even for slower ByteSource implementations.&lt;/p&gt;

&lt;p&gt;For readers that must interleave reads on a stream with the decoder, this includes a&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; InputStream inputStream();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;method on the decoder that can serve interleaved reads.  &lt;/p&gt;

&lt;p&gt;Additionally it will be necessary to have a constructor on BinaryDecoder that allows two BinaryDecoders to share a stream (and buffer).&lt;/p&gt;


&lt;p&gt;Performance results on this new version is better than previous prototypes:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;current trunk BinaryDecoder&lt;/b&gt;&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ReadInt: 983 ms, 30.497877855999185 million entries/sec
ReadLongSmall: 1058 ms, 28.336666040111496 million entries/sec
ReadLong: 1518 ms, 19.75179889508437 million entries/sec
ReadFloat: 657 ms, 45.61031157924184 million entries/sec
ReadDouble: 761 ms, 39.387756709704355 million entries/sec
ReadBoolean: 331 ms, 90.4268145647456 million entries/sec
RepeaterTest: 7718 ms, 3.886725782038378 million entries/sec
NestedRecordTest: 1884 ms, 15.91964611687992 million entries/sec
ResolverTest: 8296 ms, 3.616055866616717 million entries/sec
MigrationTest: 21216 ms, 1.4139999570144013 million entries/sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;b&gt;buffering BinaryDecoder&lt;/b&gt;&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ReadInt: 187 ms, 160.22131904871262 million entries/sec
ReadLongSmall: 372 ms, 80.4863521975457 million entries/sec
ReadLong: 613 ms, 48.882385721129246 million entries/sec
ReadFloat: 253 ms, 118.16606270679061 million entries/sec
ReadDouble: 275 ms, 108.94314257389068 million entries/sec
ReadBoolean: 222 ms, 134.85327963176064 million entries/sec
RepeaterTest: 3335 ms, 8.993007936329503 million entries/sec
NestedRecordTest: 1152 ms, 26.0256943004597 million entries/sec
ResolverTest: 4213 ms, 7.120659335077578 million entries/sec
MigrationTest: 15310 ms, 1.9594884898992941 million entries/sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Performance is 2x to 5x the throughput of trunk on most tests.  &lt;/p&gt;</description>
                <environment></environment>
        <key id="12455154">AVRO-392</key>
            <summary>Binary Decoder Performance and flexibility overhaul</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.svg">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="scott_carey">Scott Carey</assignee>
                                    <reporter username="scott_carey">Scott Carey</reporter>
                        <labels>
                    </labels>
                <created>Wed, 3 Feb 2010 10:49:03 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:23 +0000</updated>
                            <resolved>Fri, 19 Feb 2010 21:46:13 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12829018" author="scott_carey" created="Wed, 3 Feb 2010 10:57:16 +0000"  >&lt;p&gt;Partial patch &amp;#8211; no tests, does not pass tests without changes elsewhere.&lt;/p&gt;

&lt;p&gt;This is intended to:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Show the performance gains of this approach.&lt;/li&gt;
	&lt;li&gt;Invite criticism on the API changes and approach to abstracting the decoding from the fetching of bytes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I expect that there will be minor changes in many places to accommodate these changes (as noted in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-327&quot; title=&quot;Performance improvements to BinaryDecoder.readLong()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-327&quot;&gt;&lt;del&gt;AVRO-327&lt;/del&gt;&lt;/a&gt;).  Additionally, there are optimizations and cleanup in the Avro file reader code that can be done if this approach is agreed upon.&lt;/p&gt;</comment>
                            <comment id="12829021" author="scott_carey" created="Wed, 3 Feb 2010 10:58:40 +0000"  >&lt;p&gt;This ticket may end up encompassing all of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-327&quot; title=&quot;Performance improvements to BinaryDecoder.readLong()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-327&quot;&gt;&lt;del&gt;AVRO-327&lt;/del&gt;&lt;/a&gt; and more.&lt;/p&gt;</comment>
                            <comment id="12829140" author="cutting" created="Wed, 3 Feb 2010 17:03:56 +0000"  >&lt;p&gt;This patch doesn&apos;t include the new implementations of #readInt(), etc., just some high-level API changes.&lt;/p&gt;

&lt;p&gt;Instead of Decoder#init(File), perhaps we should have Decoder#init(ReadableByteChannel)?  It&apos;s hard to tell whether even this is required without a more detailed patch.&lt;/p&gt;</comment>
                            <comment id="12829201" author="scott_carey" created="Wed, 3 Feb 2010 19:10:12 +0000"  >&lt;p&gt;I started with ReadableByteChannel, but it does not have the ability to skip bytes naturally (one has to read them to skip them).  It has close(), isOpen() and read().   FileChannel has position() and size(). For a file source, skipping long distances by reading instead of seeking would be bad.&lt;br/&gt;
A ByteSource implementation for a generic ReadableByteChannel could be added, but I suspect specific implementations that take advantage of each channel&apos;s capability will be preferred.&lt;/p&gt;

&lt;p&gt;The performance of the decoding &amp;#8211; though highly sensitive to the details of the readX() and ensureBounds() methods &amp;#8211; is not very sensitive to the ByteSource method implementation details.  The JIT inlines most of the methods, but leaves the ByteSource a virtual call.  Because these happen infrequently this is faster &amp;#8211; the method body for the common path is smaller.&lt;/p&gt;

&lt;p&gt;There are changes to readInt() and other read methods included.  All have improved performance with some tweaks.  ReadInt&apos;s fastest form I could find is:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;@Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; readInt() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    ensureBounds(5); &lt;span class=&quot;code-comment&quot;&gt;// won&apos;t &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; index out of bounds
&lt;/span&gt;    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; len = 1;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; b = buf[pos] &amp;amp; 0xff;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; n = b &amp;amp; 0x7f;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (b &amp;gt; 0x7f) {
      b = buf[pos + len++] &amp;amp; 0xff;
      n ^= (b &amp;amp; 0x7f) &amp;lt;&amp;lt; 7;
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (b &amp;gt; 0x7f) {
        b = buf[pos + len++] &amp;amp; 0xff;
        n ^= (b &amp;amp; 0x7f) &amp;lt;&amp;lt; 14;
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (b &amp;gt; 0x7f) {
          b = buf[pos + len++] &amp;amp; 0xff;
          n ^= (b &amp;amp; 0x7f) &amp;lt;&amp;lt; 21;
          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (b &amp;gt; 0x7f) {
            b = buf[pos + len++] &amp;amp; 0xff;
            n ^= (b &amp;amp; 0x7f) &amp;lt;&amp;lt; 28;
          }
        }
      }
    }
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (pos + len &amp;gt; limit) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; EOFException();
    }
    pos += len;
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (n &amp;gt;&amp;gt;&amp;gt; 1) ^ -(n &amp;amp; 1); &lt;span class=&quot;code-comment&quot;&gt;// back to two&apos;s-complement
&lt;/span&gt;  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12829215" author="scott_carey" created="Wed, 3 Feb 2010 19:39:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;It&apos;s hard to tell whether even this is required without a more detailed patch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oh, I see the confusion.  The prototype version of a new BinaryDecoder is the BufferedBinaryDecoder that I failed to include in the patch.   &lt;/p&gt;</comment>
                            <comment id="12829225" author="scott_carey" created="Wed, 3 Feb 2010 19:54:19 +0000"  >&lt;p&gt;This patch includes the prototype BinaryDecoder replacement:  BufferedBinaryDecoder.&lt;/p&gt;

&lt;p&gt;Perf.java can be configured to run tests against this by changing the Decoder initialized in the newDecoder() method, line 164 of Perf.java after the patch.&lt;/p&gt;</comment>
                            <comment id="12829230" author="cutting" created="Wed, 3 Feb 2010 20:08:00 +0000"  >&lt;p&gt;&amp;gt; FileChannel has position() and size().&lt;/p&gt;

&lt;p&gt;Sure, then perhaps the API should accept FileChannel instead of File.  Applications need to be able to seek.  So either one must be able to construct a Decoder using a pre-positioned file handle, or one must be able to reposition the file handle that the decoder wraps.  In the current patch, neither is possible so far as I can tell.&lt;/p&gt;</comment>
                            <comment id="12829274" author="scott_carey" created="Wed, 3 Feb 2010 21:24:40 +0000"  >&lt;p&gt;I&apos;d like to focus on the core of the BufferedBinaryDecoder change and the ByteSource concept within first.  The other changes are mostly a consequence of that or use cases in the file writer and reader.&lt;br/&gt;
If we get that right, then the API details around the edges will be easy to adjust. &lt;/p&gt;

&lt;p&gt;The current patch has an initialization from a File because for simplicity I wanted to align it with the Jackson API as a starting point.  If it was a FileChannel, it would be difficult to have the JsonDecoder operate on it.&lt;/p&gt;

&lt;p&gt;As far as construction and initialization go, we have many options to consider.  I am delaying decisions on this until it is more clear what is needed to allow BufferedBinaryDecoder to replace BinaryDecoder and for two decoders to share one input/buffer.&lt;/p&gt;

&lt;p&gt;Before the number of constructors/initializes publicly available grows too far, a factory might be a useful abstraction to use instead for decoders and encoders.  Especially as more variations come up, some that will share concepts and some that will not.  &lt;/p&gt;
</comment>
                            <comment id="12829558" author="scott_carey" created="Thu, 4 Feb 2010 09:53:54 +0000"  >&lt;p&gt;Nearly complete patch.  BinaryDecoder replaced with a buffering optimized one.  All tests pass.  Main changes are in BinaryDecoder, BinaryData, DataFileReader, DataFileStream, and Codecs.  Need to add more tests and decide on final changes to Decoder API.&lt;/p&gt;

&lt;p&gt;This patch adds an isEnd() method to BinaryDecoder, that is used by the DataFileReader.  This changes the API of the Codec to depend on BinaryDecoder instead of Decoder.  I have not looked into how one would implement isEnd() for the JsonDecoder which would be required to move that to Decoder.  Do we expect to write JsonDecoder data to the file format?&lt;/p&gt;
</comment>
                            <comment id="12829562" author="scott_carey" created="Thu, 4 Feb 2010 09:57:37 +0000"  >&lt;p&gt;Perf.java results with the new BinaryDecoder:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ReadInt: 183 ms, 163.80731891100893 million entries/sec
ReadLongSmall: 374 ms, 80.17681660622226 million entries/sec
ReadLong: 621 ms, 48.24873186249755 million entries/sec
ReadFloat: 277 ms, 108.25010103342763 million entries/sec
ReadDouble: 301 ms, 99.60291637339141 million entries/sec
ReadBoolean: 222 ms, 134.65897614291805 million entries/sec
RepeaterTest: 3334 ms, 8.997873802420488 million entries/sec
NestedRecordTest: 1164 ms, 25.764828947300618 million entries/sec
ResolverTest: 4106 ms, 7.306147806779666 million entries/sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12829804" author="cutting" created="Thu, 4 Feb 2010 21:45:30 +0000"  >&lt;p&gt;This is fast!  Some comments&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;please don&apos;t make whitespace-only changes, reorder imports or make other extraneous changes that just make the patch harder to read.&lt;/li&gt;
	&lt;li&gt;the new JsonDecoder constuctors have bad javadoc.&lt;/li&gt;
	&lt;li&gt;the BinaryDecoder javadoc has been lost&lt;/li&gt;
	&lt;li&gt;why is DataFileStream#vin now protected?  can&apos;t we keep this package protected?&lt;/li&gt;
	&lt;li&gt;does ByteSource need to be public?  I&apos;d prefer it were not.&lt;/li&gt;
	&lt;li&gt;finally, you&apos;ve added new Decoder constructors and init() methods for File and byte[], but, as far as I can see, these are not yet used.  can we separate this from the rest of this patch to be considered in a separate issue? the different ByteSource implementations could be removed for now too.  if i&apos;m not mistaken, you&apos;re getting the above speedups with InputStream-based methods only.  i&apos;d prefer if this issue could focus on the minimal API changes needed to get these performance improvements.  if further performance improvements can be had with API changes, let&apos;s do that separately.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12829818" author="scott_carey" created="Thu, 4 Feb 2010 22:15:09 +0000"  >&lt;p&gt;Thanks for the feedback Doug.&lt;/p&gt;

&lt;p&gt;One at a time:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;please don&apos;t make whitespace-only changes, reorder imports or make other extraneous changes that just make the patch harder to read.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I wish there was a way to back out of it, but I experimented with a few dozen variations on almost every bit of BinaryDecoder, so its almost impossible to track down the white space changes without a lot of trial and error.  I can fix the import changes.   DataFileReader is also heavily modified.  The other classes I can clean up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
	&lt;li&gt;the new JsonDecoder constuctors have bad javadoc.&lt;/li&gt;
	&lt;li&gt;the BinaryDecoder javadoc has been lost&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&apos;ll clean up the javadoc.  Are there any places that could be better documented or explained?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;why is DataFileStream#vin now protected? can&apos;t we keep this package protected?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not sure.  I&apos;ll change it back.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;does ByteSource need to be public? I&apos;d prefer it were not.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good catch.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
	&lt;li&gt;finally, you&apos;ve added new Decoder constructors and init() methods for File and byte[], but, as far as I can see, these are not yet used. can we separate this from the rest of this patch to be considered in a separate issue? the different ByteSource implementations could be removed for now too. if i&apos;m not mistaken, you&apos;re getting the above speedups with InputStream-based methods only. i&apos;d prefer if this issue could focus on the minimal API changes needed to get these performance improvements. if further performance improvements can be had with API changes, let&apos;s do that separately.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;The byte[] initializer and ByteSource is used for optimizations on file reading with NullCodec, and for BinaryData$Decoders.set().  The File initializer and FileChannelByteSource is more of a prototype.   I can move out for now since it is intended for a future optimization for the DataFileReader, it might be best as a FileChannel anyway.    I did need to prototype the other ByteSource variants to make sure the concept was flexible enough for future evolution.  I&apos;ll move all these things to another patch for a different issue.&lt;/p&gt;


&lt;p&gt;What about the isEnd() method on BinaryDecoder?  Should this be moved to Decoder?  Its public, but it could be package protected if we move the classes in org.apache.avro.file into o.a.a.io.  This would also allow ByteSource to be shared between file types, codecs, and decoders.  I suspect there will be more things we want to share between classes in o.a.a.file and o.a.a.io since these are so tightly related.&lt;/p&gt;


&lt;p&gt;A heads-up:  the same approach will help BinaryEncoder, but we need a good set of tests first.  That side of things should be easier because Encoder already has buffering semantics.&lt;/p&gt;</comment>
                            <comment id="12829857" author="cutting" created="Thu, 4 Feb 2010 23:41:32 +0000"  >&lt;p&gt;&amp;gt; What about the isEnd() method on BinaryDecoder? Should this be moved to Decoder?&lt;/p&gt;

&lt;p&gt;It would be great to have a public Decoder#isEnd() method.  We could then clean up loops to call this instead of catching EOFException.&lt;/p&gt;

&lt;p&gt;If ByteSource needs to be shared with codecs, files, decoders, etc.  then it should probably be a public, documented class.  But we don&apos;t need to go there yet, do we?&lt;/p&gt;</comment>
                            <comment id="12829891" author="scott_carey" created="Fri, 5 Feb 2010 00:51:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;If ByteSource needs to be shared with codecs, files, decoders, etc. then it should probably be a public, documented class. But we don&apos;t need to go there yet, do we?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Nope!  But getting a sense of the future direction that code will take always helps minimize thrashing later.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It would be great to have a public Decoder#isEnd() method. We could then clean up loops to call this instead of catching EOFException.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok, lets plan on doing that later.  I&apos;m not sure how do do it on the JSON side right now, and the patch I&apos;ve got now is looking good and cleaned up.&lt;/p&gt;</comment>
                            <comment id="12829915" author="scott_carey" created="Fri, 5 Feb 2010 02:02:59 +0000"  >&lt;p&gt;Cleaned up patch.  Incorporates all of Doug&apos;s concerns.  Found a few more placed where I lost the Javadoc in BinaryDecoder and corrected those.&lt;/p&gt;

&lt;p&gt;I have left the FileChannelByteSource in BinaryDecoder, but it is not used or exposed yet.  Remove it if you wish.&lt;/p&gt;

&lt;p&gt;I have additionally expanded TestBinaryDecoder to cover both types of BinaryDecoder sources.&lt;/p&gt;</comment>
                            <comment id="12829916" author="scott_carey" created="Fri, 5 Feb 2010 02:04:06 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-392&quot; title=&quot;Binary Decoder Performance and flexibility overhaul&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-392&quot;&gt;&lt;del&gt;AVRO-392&lt;/del&gt;&lt;/a&gt;.patch  &quot;2010-02-05 02:02 AM&quot; &lt;/p&gt;</comment>
                            <comment id="12830150" author="thiru_mg" created="Fri, 5 Feb 2010 16:16:47 +0000"  >&lt;p&gt;The performance improvement is impressive. Great!&lt;/p&gt;

&lt;p&gt;I was looking at the new BinaryDecoder. I&apos;m sorry I am coming up with my comments so late. I hope they are still useful.&lt;/p&gt;

&lt;p&gt;As Doug suggested earlier, can we call this BufferedBinaryReader and encourage everyone to use it? If someone needs to have the no-overshoot feature and does not want to (or cannot, for whatever reason) use our inputStream() method, they can use the (original) BinaryDecoder. It should be trivial to support the new functions of Decoder in the original BinaryDecoder. If we are starting from scratch today, I wouldn&apos;t ask for it. But since we already have it, why throw it away? If agree on this proposal, we can refactor the common portions of BinaryDecoder and BufferedBinaryDecoder into an abstract base class.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Spec/correctness issues&lt;/b&gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think ByteSource.read(byte[], int, int) does not conform to the InputStream spec under a specific condition. If the buffer has some bytes less than the number of desired bytes it copies that data into the destination buffer. Then it calls tryReadRaw(). If tryReadRaw() returns 0, it returns -1. It should return the number of bytes copied so far.&lt;/li&gt;
	&lt;li&gt;If the underlying stream has fewer than desired length, readRaw would throw EOFException. Wouldn&apos;t be useful to somehow let the client know the actual number of bytes read into the buffer passed?&lt;/li&gt;
	&lt;li&gt;Is there a need to have mark() with empty body in ByteSource. InputStream already has an identical implementation.&lt;/li&gt;
	&lt;li&gt;InputStream.skipSourceBytes() catches EOFException and does something. The only method called in that function is InputStream.skip(). InputStream.skip() newer throws EOFException. It indicates EOF thorough a return value of 0. The similar observation applies to InputStream.read() within InputStreamByteSource.tryReadRaw().&lt;/li&gt;
	&lt;li&gt;In BinaryDecoder.readFloat() and readDouble(), we check if we have enough number of bytes in the buffer after converting bytes into int&apos;s. It will be better if we check before converting. This logic is sound for readInt() and readLong() since we don&apos;t know the number of bytes needed. But for readFloat() and readDouble(), we know the number of bytes needed, so we check early.&lt;/li&gt;
	&lt;li&gt;I think minpos is not used correctly in BinaryDecoder.ensureBounds(). The remaining bytes in the buffer are moved to location starting at minPos, but pos is set to 0. It should be set to minPos, right?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;b&gt;Nit&lt;/b&gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Indentation for continuation lines is the same as the first line in a small number of places. E.g the definition of the method ByteSource.skipSourceBytes().&lt;/li&gt;
	&lt;li&gt;Some documentation around ByteSource and BufferAccessor classes will be useful.&lt;/li&gt;
	&lt;li&gt;In InputStreamByteSource.readRaw(), the variable &lt;em&gt;read&lt;/em&gt; is only used within the while loop. So, the declaration can move inside the while loop.&lt;/li&gt;
	&lt;li&gt;There are many occasions like &lt;em&gt;if (c) return x; esle return y;&lt;/em&gt;. I feel it&apos;ll be more readable if we have &lt;em&gt;return c ? x : y&lt;/em&gt;. Of course, it is a matter of taste.&lt;/li&gt;
	&lt;li&gt;There are many occassions with code &lt;em&gt;pos += x; setPos(pos); return xx&lt;/em&gt;. Will it be better if we write &lt;em&gt;setPos(pos + x); return xx;&lt;/em&gt;? Again, it&apos;s a matter of taste.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12830353" author="scott_carey" created="Fri, 5 Feb 2010 22:59:49 +0000"  >&lt;p&gt;I am unsure about splitting BinaryDecoder up into two.  Should the old version implement all of the same constructors/initializers?  Or only maintain the InputStream one?   One option is to make a &quot;DirectBinaryDecoder&quot; class that has the same capabilities as the old one, and supports only InputStream construction.   This implementation is not buffered if given a byte[], buffering is optional and depends on the ByteSource, so BufferedBinaryDecoder might not be the right name.  This would mean that clients that cannot allow any read-ahead can switch to that, but all others will by default get the new one.&lt;br/&gt;
A second class also raises some important testing questions.  Do we need to duplicate a lot of tests to run against both?  How many clients actually need a guarantee that it does not read more bytes than absolutely necessary? &lt;br/&gt;
Can anyone come up with a use case where inputStream() combined with remaining() to detect how far ahead it read and the means to retrieve those bytes, is not sufficient?&lt;/p&gt;

&lt;p&gt;Splitting it up with an abstract parent may hurt performance a bit, enough implementations of a method eventually trigger the JIT to de-optimize and prevent method inlining.  For most things this doesn&apos;t matter, but for something in a tight loop like ReadInt() it might.&lt;/p&gt;

&lt;p&gt;Another problem is that there will likely be features going forward that will depend on the buffering, or only be needed by the buffering, which will further branch the two implementations.   I would also prefer not to maintain two versions of every readType() method if possible.&lt;br/&gt;
What use cases are there where inputStream() is not sufficient?  Can we add to the new BinaryDecoder to address those rather than keep another variation? &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Issues&lt;/b&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think ByteSource.read(byte[], int, int) does not conform to the InputStream spec under a specific condition. If the buffer has some bytes less than the number of desired bytes it copies that data into the destination buffer. Then it calls tryReadRaw(). If tryReadRaw() returns 0, it returns -1. It should return the number of bytes copied so far.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Good catch.  Fixed to add the result of tryReadRaw() to reamaining, and check that total for 0 for the -1 return.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the underlying stream has fewer than desired length, readRaw would throw EOFException. Wouldn&apos;t be useful to somehow let the client know the actual number of bytes read into the buffer passed?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That is what tryReadRaw() is for.  It should always return how many bytes are actually read, up to MIN(maximum available, requested).  A client that must know how much data is copied should use tryReadRaw and treat a 0 return as EOF.  I tried removing readRaw() and only having tryReadRaw(), but that hurt performance since the clients had to have more conditionals in &apos;common path&apos; code &amp;#8211; that is most of the time is not EOF, so checking for it on every read hurts tight loops.  This is essentially what is wrong with InputStream &amp;#8211; checks for EOF happen on both the client and internal side of the read() methods all the time even though the common case is not EOF.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is there a need to have mark() with empty body in ByteSource. InputStream already has an identical implementation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Removed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;InputStream.skipSourceBytes() catches EOFException and does something. The only method called in that function is InputStream.skip(). InputStream.skip() newer throws EOFException. It indicates EOF thorough a return value of 0. The similar observation applies to InputStream.read() within InputStreamByteSource.tryReadRaw().&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That was the first implementation, but ByteBufferInputStream and InflaterInputStream both do not adhere to the InputStream contract and throw EOFException instead of returning -1 in some cases.  If you remove the catch, tests do not pass (in fact, its worse, the SocketServer test spins in an infinite loop forever).  For example:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java.io.EOFException
	at org.apache.avro.ipc.ByteBufferInputStream.getBuffer(ByteBufferInputStream.java:84)
	at org.apache.avro.ipc.ByteBufferInputStream.read(ByteBufferInputStream.java:46)
	at org.apache.avro.io.BinaryDecoder$InputStreamByteSource.tryReadRaw(BinaryDecoder.java:683)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Because the declared contract of skip() and read() can throw IOException, I have to be defensive and catch the EOF subtype EOFExeption since the InputStream javadoc contract is not enforced by the compiler, and trySkipBytes and tryReadRaw both must never throw EOFException.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In BinaryDecoder.readFloat() and readDouble(), we check if we have enough number of bytes in the buffer after converting bytes into int&apos;s. It will be better if we check before converting. This logic is sound for readInt() and readLong() since we don&apos;t know the number of bytes needed. But for readFloat() and readDouble(), we know the number of bytes needed, so we check early.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This started out as an optimization that was worth about 10% in decoding performance when &lt;em&gt;pos&lt;/em&gt; was incremented with each read.  But, by removing the false dependency between the check and the read it doesn&apos;t matter as much as in the past.  Placing the most common case first and the unusual case (EOF) second tends to help performance.  For smaller buffer sizes, or less aggressive compilers this helps.&lt;br/&gt;
The check and the load are not dependent.  Although the code looks at first glance that one part is &apos;first&apos; and one part is &apos;second&apos;, the compiler and CPU are free to reorder these and speculatively execute since one operation does not depend on the other.  Placing the conditional second is a sort of compiler &apos;hint&apos; that we want this to be a speculative load &amp;#8211; load the bytes and deal with the consequences of the conditional simultaneously if possible; avoid waiting on the conditional before initiating the loads and do both concurrently if possible.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think minpos is not used correctly in BinaryDecoder.ensureBounds(). The remaining bytes in the buffer are moved to location starting at minPos, but pos is set to 0. It should be set to minPos, right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good catch!  I enhanced a test in TestBinaryDecoder to detect this bug.  This test reliably breaks without minPos and limit set properly.  It found an additional bug one line below as well:  limit did not account for minPos.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
	&lt;li&gt;Indentation for continuation lines is the same as the first line in a small number of places. E.g the definition of the method ByteSource.skipSourceBytes().&lt;/li&gt;
	&lt;li&gt;Some documentation around ByteSource and BufferAccessor classes will be useful.&lt;/li&gt;
	&lt;li&gt;In InputStreamByteSource.readRaw(), the variable read is only used within the while loop. So, the declaration can move inside the while loop.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&apos;ll clean those up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
	&lt;li&gt;There are many occasions like if (c) return x; esle return y;. I feel it&apos;ll be more readable if we have return c ? x : y. Of course, it is a matter of taste.&lt;/li&gt;
	&lt;li&gt;There are many occassions with code pos += x; setPos(pos); return xx. Will it be better if we write setPos(pos + x); return xx;? Again, it&apos;s a matter of taste.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yeah, its a matter of taste.  I prefer separating complex statements into multiple lines since it is easier to debug when stepping through code line by line and watching the variables change state.  Additionally, if the code changes, and the statements are less condensed, the diff better represents the change.&lt;/p&gt;</comment>
                            <comment id="12830354" author="scott_carey" created="Fri, 5 Feb 2010 23:00:27 +0000"  >&lt;p&gt;New patch incorporating changes from Thiru&apos;s review.&lt;/p&gt;</comment>
                            <comment id="12830449" author="thiru_mg" created="Sat, 6 Feb 2010 03:57:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can anyone come up with a use case where inputStream() combined with remaining() to detect how far ahead it read and the means to retrieve those bytes, is not sufficient?&lt;/p&gt;&lt;/blockquote&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; GenericDatumReader&amp;lt;X&amp;gt; reader;
&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; f(InputStream in) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (some_condition) {
         BinaryDecoder d = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BinaryDecoder(in);
         X x = reder.read(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, d);
         &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; f2(x);
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;code-comment&quot;&gt;// Do something &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; with in.
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; 100;
    }
}

void f2(InputStream in) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (some_condition) {
       f(in);
    }
    &lt;span class=&quot;code-comment&quot;&gt;// dome something more with in.
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now the decision to do use Avro is local to f(). But to make it work with the overshoot-Binary decoder, it must somehow return a new InputStream.  For the same reason, f2, which is not even aware of Avro, must return an InputStream. If the InputStream gets passed for n levels, all n levels should somehow return the new InputStream, which I think is a pain.&lt;/p&gt;

&lt;p&gt;If the original InputStream is a field in a class, it cannot be final.&lt;/p&gt;

&lt;p&gt;Assume that one is willing to return InputStream all the way. This InputStream is actually InputStreamByteSource. The further users of this inputstream will go though additional function call overhead due to InputStreamByteSource for the rest of its lifetime. With the current implementation, it means single-byte IO.&lt;/p&gt;

&lt;p&gt;If Avro is a small part of project, it would pollute the design for small performance improvement for them. With the old BinaryDecoder, they have a choice - clean interface or performance.&lt;/p&gt;

&lt;p&gt;Agreed InputStream is bad for performance and people should not use it, if they can. But it is the most common binary input interface in Java and is not going to go away anytime soon.&lt;/p&gt;

&lt;p&gt;Bq. One option is to make a &quot;DirectBinaryDecoder&quot; class that has the same capabilities as the old one, and supports only InputStream construction.&lt;br/&gt;
Name doesn&apos;t matter to me. You can trivially support init(byte[], int, int) with a ByteArrayInputStream. We could move out the inputStream() method out of Decoder.&lt;/p&gt;</comment>
                            <comment id="12830453" author="philip" created="Sat, 6 Feb 2010 04:16:21 +0000"  >&lt;blockquote&gt;
&lt;p&gt;doug&amp;gt; please don&apos;t make whitespace-only changes, reorder imports or make other extraneous changes that just make the patch harder to read.&lt;/p&gt;

&lt;p&gt;scott&amp;gt; I wish there was a way to back out of it, but I experimented with a few dozen variations on almost every bit of BinaryDecoder, so its almost impossible to track down the white space changes without a lot of trial and error. I can fix the import changes. DataFileReader is also heavily modified. The other classes I can clean up.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Both git and svn diffs seem to have an ignore whitespace option.  To be honest, I haven&apos;t tried them, but they might be worth a shot.&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  -x [--extensions] ARG    : Default: &apos;-u&apos;. When Subversion is invoking an
                             external diff program, ARG is simply passed along
                             to the program. But when Subversion is using its
                             default internal diff implementation, or when
                             Subversion is displaying blame annotations, ARG
                             could be any of the following:
                                -u (--unified):
                                   Output 3 lines of unified context.
                                -b (--ignore-space-change):
                                   Ignore changes in the amount of white space.
                                -w (--ignore-all-space):
                                   Ignore all white space.
                                --ignore-eol-style:
                                   Ignore changes in EOL style.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12830462" author="philip" created="Sat, 6 Feb 2010 04:49:04 +0000"  >&lt;p&gt;Took a quick pass here.  Excellent speed improvements.&lt;/p&gt;

&lt;p&gt;I&apos;m a bit concerned that we haven&apos;t tested all of the edges cases here.  Introducing buffering into the Decoder has certainly increased the code complexity.  We could run a code coverage tool to see if all the new code is touched by the existing TestBinaryDecoder code.  I didn&apos;t see (though I only had a chance to do a quick pass) tests that detect EOFExceptions on the tricky ensureBounds() codepath.  Likewise, I&apos;d be more comfortable if the two variants of ByteSource had their own unit tests.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;if (pos + len &amp;gt; limit) &lt;/p&gt;
{                                                                
  throw new EOFException();                                                             
 }
&lt;p&gt;                  &lt;br/&gt;
{noformat]&lt;br/&gt;
Do we distinguish between malformed data (a varint that hasn&apos;t finished) and a genuine EOF?  I think we don&apos;t need to (that&apos;s the job of the level high up), but just want to make sure.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;static class BufferAccessor&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why is BufferAccessor static?  It seems that it attaches itself only ever to a BinaryDecoder object.  I don&apos;t know that it makes a difference; might be just a style preference.&lt;/p&gt;</comment>
                            <comment id="12832148" author="scott_carey" created="Wed, 10 Feb 2010 19:47:40 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Now the decision to do use Avro is local to f(). But to make it work with the overshoot-Binary decoder, it must somehow return a new InputStream. For the same reason, f2, which is not even aware of Avro, must return an InputStream. If the InputStream gets passed for n levels, all n levels should somehow return the new InputStream, which I think is a pain.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Generally, its not a good design to pass anything around other than the &apos;top-most&apos; stream since one layer might buffer.  The semantics are the same as a BufferedInputStream, for example.  What if we just made BinaryDecoder a BufferedInputStream? In the use case above, the user would pass that around and construct it external to the two methods, and the f() method can then choose to use the InputStream methods or the Decoder methods depending on some &quot;use_avro&quot; flag.&lt;br/&gt;
This would require that Decoder become an interface instead of an Abstract Class however.&lt;/p&gt;

&lt;p&gt;Alternatively, a separate DirectBinaryDecoder class could be fine.  But at this point It would make more sense to have a Factory class to deal with all the Decoder variations than proliferate classes and constructors.  This leaves Decoder as an abstract class and removes inputStream() from it, and helps abstract out future changes to these classes &amp;#8211; a factory getDirectBinaryDecoder() might return a concrete instance that is DirectBinaryDecoder today, and some other class tomorrow, without causing an API change.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;br/&gt;
Assume that one is willing to return InputStream all the way. This InputStream is actually InputStreamByteSource. The further users of this inputstream will go though additional function call overhead due to InputStreamByteSource for the rest of its lifetime. With the current implementation, it means single-byte IO.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The performance impact will be small to zero, and often improved if the underlying stream was not buffered.  The current implementation reads from the buffer until it is empty and then delegates.  It could always buffer if the performance impact of the InputStream wrapper is of concern.  It only does single-byte-IO if the underlying Source does single-byte-IO and the client is requesting single-byte-IO, otherwise it does array-range-IO.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Unless there are objections, I am going to work on a variation that centralizes construction of Decoders to an AvroFactory.  This way, we can have a DirectBinaryDecoder implementation, a BufferedBinaryDecoder implementation, and more, without having to worry about breaking APIs later by switching implementations.  This will be modeled after Jackson&apos;s JsonFactory &amp;#8211; An instance stores configuration parameters (such as buffer size, direct or buffered decoders, etc) and a limited set of methods create Decoder instances.  The factory is thread safe and can be kept around for the life of the application.  Multiple factory instances can exist with different configurations.&lt;br/&gt;
I envision this same factory will likely be used for Encoders eventually, and we could consider it for other things as well.&lt;/p&gt;</comment>
                            <comment id="12832166" author="scott_carey" created="Wed, 10 Feb 2010 20:11:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do we distinguish between malformed data (a varint that hasn&apos;t finished) and a genuine EOF? I think we don&apos;t need to (that&apos;s the job of the level high up), but just want to make sure.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We might want to introduce something like a &apos;BinaryFormatException&apos; to deal with the &quot;this can&apos;t be an encoded int&quot; -like cases. but we can do that in another ticket.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why is BufferAccessor static? It seems that it attaches itself only ever to a BinaryDecoder object. I don&apos;t know that it makes a difference; might be just a style preference.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;2 things.  &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Style &amp;#8211; Since a non-static private class has a hidden private member &apos;this&apos; that points to the parent object, it has more overhead.  So by default I start with static and remove it if needed.&lt;/li&gt;
	&lt;li&gt;Flexibility &amp;#8211; I wasn&apos;t sure if I&apos;d want to share a source or &apos;reattach&apos; one.  For example, two decoders could share one source.  Once it was coded to work as static, I left it that way.  With the current use cases, it doesn&apos;t matter much.&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;I&apos;m a bit concerned that we haven&apos;t tested all of the edges cases here. Introducing buffering into the Decoder has certainly increased the code complexity. We could run a code coverage tool to see if all the new code is touched by the existing TestBinaryDecoder code. I didn&apos;t see (though I only had a chance to do a quick pass) tests that detect EOFExceptions on the tricky ensureBounds() codepath. Likewise, I&apos;d be more comfortable if the two variants of ByteSource had their own unit tests.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve used EclEmma in eclipse to generate code coverage reports.  The main parts missing (counting coverage from TestBinaryDecoder and TestDataFile) are:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Invalid Int/Long encoding.&lt;/li&gt;
	&lt;li&gt;Most skipXX methods.&lt;/li&gt;
	&lt;li&gt;BufferAccessor when detached.&lt;/li&gt;
	&lt;li&gt;.inputStream() read and skip methods.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;ll add some tests to cover these.  Several of the above are covered in other tests (for example, the skipXXX methods).&lt;/p&gt;</comment>
                            <comment id="12832664" author="scott_carey" created="Thu, 11 Feb 2010 19:46:19 +0000"  >&lt;p&gt;I&apos;m not sure it is a good idea to support both &quot;buffered&quot; and non-buffered binary decoders anymore.  &lt;/p&gt;

&lt;p&gt;I spent a lot of time coming up with a factory scheme that works well, and then to have both implementations share what they could from an abstract parent. &lt;/p&gt;

&lt;p&gt;But no matter what, theier API&apos;s won&apos;t be the same, besides the read-ahead versus read-minimal semantics:&lt;/p&gt;

&lt;p&gt;The &apos;direct&apos; one cannot have an &apos;isEnd()&apos; method.  Because the InputStream API is what it is, the only way to find out if one is at the end is to try and read &amp;#8211; and only the buffered implementation can do that without losing data.  This means the simple, abstract factory pattern won&apos;t work:  &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; BinaryDecoder createBinaryDecoder(InputStream in, BinaryDecoder reuse);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where the above returns a direct or buffered implementation depending on the factory configuration and the concrete type of &apos;reuse&apos;.  This pattern got rid of all the public &quot;init&quot; methods and is fairly clean, but if the BinaryDecoder supertype can&apos;t have an isEnd() method, it all breaks down.  Factory methods would have to be specific to a type, rather than generic, exposing the concrete types and defeating half of the purpose of the factory (unless we go with an interface per concrete class and make a more brittle API which I think is a bad idea at this stage).&lt;/p&gt;

&lt;p&gt;So, there are a few options:&lt;/p&gt;

&lt;p&gt;1. The buffered and direct implementations have separate instantiation semantics, and are essentially distinct.  This will solidify having two distinct implementations in the API.  Clients will access two specific &lt;em&gt;types&lt;/em&gt; &amp;#8211; one that is &apos;direct&apos; and one that is &apos;buffered&apos; than access one type that is configured to behave either way (but behind the scenes is currently two implementations).&lt;br/&gt;
2. Go back to my last patch or something close, and don&apos;t have a direct version. (we can add one back later if it turns out to be a big issue).&lt;br/&gt;
3. get rid of isEnd, and make any consumer that wants to write an iterator interface around a Decoder force an EOF exception to check for the end.&lt;/p&gt;

&lt;p&gt;I don&apos;t like the third option because it maps very poorly to anything but InputStream data sources.  Also, the more I think about it, the less that having the two classes share too &lt;br/&gt;
much of a common parent type for the Factory to expose as a primary type makes sense.  The semantics are rather different, and if we maintain both, the API of each type will likely diverge due to that, isEnd() isn&apos;t the only thing that buffering can facilitate.   There is some basic overlap however.&lt;/p&gt;

&lt;p&gt;So, if we do maintain a &apos;direct&apos; binary decoder, we will probably always have to maintain that, and expose it as a &lt;em&gt;distinct&lt;/em&gt; api from the buffered one.  They won&apos;t be able to share identical APIs and simply have slightly different semantics.&lt;/p&gt;

&lt;p&gt;Is that an acceptable cost to the project in order to deal with a few corner cases where the buffered version&apos;s &apos;.inputStream()&apos; method is not convinient? (I am not worried about the performance cost of the wrapper, that can be improved).&lt;/p&gt;


&lt;p&gt;Thoughts on what the right approach is?&lt;/p&gt;

</comment>
                            <comment id="12832939" author="scott_carey" created="Fri, 12 Feb 2010 10:49:33 +0000"  >&lt;p&gt;This patch changes several things:&lt;/p&gt;

&lt;p&gt;The Decoder API is now unchanged.  All new constructor types and variants are hidden behind AvroFactory.java.&lt;/p&gt;

&lt;p&gt;I have removed the use of these old constructors and init methods from all tests and the rest of the code and replaced it with the factory.&lt;br/&gt;
We can decide to deprecate the old constructors and and the init(InputStream) method on Decoder and put that in another patch if we wish.  I had included that deprecation at first, but have several other things dependant on this patch and wish to get it committed soon and leave details like that for another ticket.&lt;/p&gt;

&lt;p&gt;Unit tests in TestBinaryDecoder were significantly enhanced.  There is 92.5% instruction coverage on BinaryDecoder from this class (with trivial items left) as measured by EclEmma code coverage plugin in Eclipse.  This single unit test class by itself covers 11% of all of org.apache.avro.&lt;b&gt;.&lt;/b&gt;  &lt;/p&gt;

&lt;p&gt;This patch does not have a &quot;DirectBinaryDecoder&quot;, but is build to easily bolt that on.  I have a separate patch with that in it, or we can commit this and do that addition in another ticket.   Adding it is as easy as adding a factory method, and svn cp&apos;ing an old BinaryDecoder to a new DirectBinaryDecoder and then applying a patch to change its name and some signatures.&lt;/p&gt;

&lt;p&gt;The Performance test has been modified to be more consistent and balance time between tests better. The first test was too fast because it had not compiled other variations of Decoder ant Test and was able to inline the decoder calls into the test &amp;#8211; once the polymorphism of the Decoder interface is seen by the JIT, it has to deoptimize some.  &lt;br/&gt;
Results on my laptop are:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ReadInt: 475 ms, 105.22084803794685 million entries/sec.  264.7735331687679 million bytes/sec
ReadLongSmall: 742 ms, 67.30978926651177 million entries/sec.  169.37566131867953 million bytes/sec
ReadLong: 964 ms, 51.819754312180855 million entries/sec.  226.4181253063843 million bytes/sec
ReadFloat: 408 ms, 122.33463415827654 million entries/sec.  489.34343001847253 million bytes/sec
ReadDouble: 412 ms, 121.10613499458655 million entries/sec.  968.8539242020922 million bytes/sec
ReadBoolean: 369 ms, 135.35646124067733 million entries/sec.  135.36187549912694 million bytes/sec
RepeaterTest: 1039 ms, 8.017210110940177 million entries/sec.  311.1342336699734 million bytes/sec
NestedRecordTest: 1766 ms, 28.312137923146135 million entries/sec.  71.243531384288 million bytes/sec
ResolverTest: 1193 ms, 6.9835422054685 million entries/sec.  271.0193474205395 million bytes/sec
MigrationTest: 3785 ms, 2.2012176566554804 million entries/sec.  85.4254983051707 million bytes/sec
GenericReaderTest: 3243 ms, 2.5692238249338963 million entries/sec.  99.70718926358578 million bytes/sec
GenericReaderTestWithDefaultTest: 6494 ms, 1.283021087397709 million entries/sec.  49.791857427457266 million bytes/sec
GenericReaderTestWithOutOfOrderTest: 3257 ms, 2.5579396506737884 million entries/sec.  99.26926973017773 million bytes/sec
GenericReaderTestWithPromotionTest: 3415 ms, 2.439907076813885 million entries/sec.  94.68862709916043 million bytes/sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Results with the old decoder:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ReadInt: 2025 ms, 24.68210680539985 million entries/sec.  62.109066280835975 million bytes/sec
ReadLongSmall: 1519 ms, 32.91266558362055 million entries/sec.  82.8201151679994 million bytes/sec
ReadLong: 2455 ms, 20.360469903356993 million entries/sec.  88.96181556753385 million bytes/sec
ReadFloat: 1268 ms, 39.41542199333249 million entries/sec.  157.66326459020968 million bytes/sec
ReadDouble: 1266 ms, 39.472365002538076 million entries/sec.  315.7804989149047 million bytes/sec
ReadBoolean: 555 ms, 89.94391097711467 million entries/sec.  89.94750873355376 million bytes/sec
RepeaterTest: 2387 ms, 3.490798376127346 million entries/sec.  135.4719238517502 million bytes/sec
NestedRecordTest: 3346 ms, 14.942269049301121 million entries/sec.  37.600128144899365 million bytes/sec
ResolverTest: 2498 ms, 3.3354787991155557 million entries/sec.  129.4442363022417 million bytes/sec
MigrationTest: 5160 ms, 1.6148558208740609 million entries/sec.  62.66979677001705 million bytes/sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 
&lt;p&gt;(Generic tests are harder to replace the decoder in).&lt;/p&gt;</comment>
                            <comment id="12833096" author="scott_carey" created="Fri, 12 Feb 2010 18:06:15 +0000"  >&lt;p&gt;A version of the patch with a DirectBinaryDecoder.java class.&lt;/p&gt;

&lt;p&gt;One would want to &lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;svn cp lang/java/src/java/org/apache/avro/io/BinaryDecoder.java lang/java/src/java/org/apache/avro/io/DirectBinaryDecoder.java
rm lang/java/src/java/org/apache/avro/io/DirectBinaryDecoder.java
patch -p0 AVRO-392-with_DirectBinaryDecoder.patch
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to make sure that svn knows that DirectBinaryDecoder is a branch of the original BinaryDecoder.&lt;/p&gt;</comment>
                            <comment id="12833239" author="cutting" created="Fri, 12 Feb 2010 23:21:33 +0000"  >&lt;p&gt;Some concerns with the current patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the javadoc for DirectBinaryDecoder should be updated to describe that it is a non-buffering variant.&lt;/li&gt;
	&lt;li&gt;AvroFactory is not a good name.  If the intent is to eventually support encoders to, then might better be named CodecFactory, were not the term codec already used for compression codecs.  We could perhaps rename those Compressors or somesuch.  Or we could just name this DecoderFactory, since that&apos;s all it does at present.&lt;/li&gt;
	&lt;li&gt;Is there a reason we can&apos;t add #isEnd() to Decoder?  That would make it easier to write Decoder-agnostic programs.&lt;/li&gt;
	&lt;li&gt;BinaryDecoder might become an abstract class, like a tag interface, with concrete subclasses BufferedBinaryDecoder and DirectBinaryDecoder.  That would enable applications to accept a BinaryDecoder that&apos;s either buffered or not.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12833283" author="scott_carey" created="Sat, 13 Feb 2010 01:49:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;AvroFactory is not a good name. If the intent is to eventually support encoders to, then might better be named CodecFactory, were not the term codec already used for compression codecs. We could perhaps rename those Compressors or somesuch. Or we could just name this DecoderFactory, since that&apos;s all it does at present.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think it should work with encoders too.  Configuration might overlap, and one central place to deal with these is probably better than two.&lt;br/&gt;
The compression codec name collision is an issue, but that is in the file spec.  There already is a class named CodecFactory.  Maybe renaming them should go in a different ticket?  Also, CodecFactory is not the best name either, since Codec means to do both Decoding and Encoding, and these do one or the other. Hmm.  Maybe two is better just so the naming is clean.  Opinions?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is there a reason we can&apos;t add #isEnd() to Decoder? That would make it easier to write Decoder-agnostic programs.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;A DirectBinaryDecoder could never implement it othter than by always returning the same value or throwing an exception.  It must actually attempt a read in order to figure out if it is at the end, which means it might &apos;overshoot&apos; its input, the whole point of its existence is not to do that.  &lt;br/&gt;
If we want isEnd() to be universally useable without side-effects for all decoders (or binary decoders), we can&apos;t have DirectBinaryDecoder.  It will be significantly easier to maintain a nice common interface if the semantics don&apos;t differ too much.   What semantics for read-ahead and &apos;isEnd&apos; from Jacson on the Json side?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;BinaryDecoder might become an abstract class, like a tag interface, with concrete subclasses BufferedBinaryDecoder and DirectBinaryDecoder. That would enable applications to accept a BinaryDecoder that&apos;s either buffered or not.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That is how I started out.  The factory also created the abstract BinaryDecoder type and the implementations were hidden, and the &apos;best&apos; type given the factory configuration was returned (even if &apos;direct&apos; is requested, the buffered one doesn&apos;t buffer when accessing a byte array so it is preferred).  But the DataFileReader needed isEnd(), and couldn&apos;t operate on this type, which broke that factory paradigm.  In short, the parent type became no more useful than Decoder. &lt;br/&gt;
I thought about it more, and realized that the semantic differences between one implementation that &lt;em&gt;must&lt;/em&gt; never read ahead and &lt;em&gt;must&lt;/em&gt; work with InputStreams and another that may read ahead and can work with a variety of data sources is going to continue to cause very different client API needs.&lt;/p&gt;

&lt;p&gt;A user who has the need to use the &apos;direct&apos; form and also for whatever reason can&apos;t use the .inputStream() proxy is going to have peculiar special needs that I don&apos;t think belong on a supertype.&lt;br/&gt;
A user who has simpler needs and will primarily be streaming data from various sources where all data is Avro will have their own unique needs.&lt;/p&gt;

&lt;p&gt;So I&apos;m guessing that isEnd(), is only the beginning &amp;#8211; of things we can do easily on one but not on the other that are useful for some and not for others.&lt;/p&gt;

&lt;p&gt;I think that the first use case is extremely rare.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;the javadoc for DirectBinaryDecoder should be updated to describe that it is a non-buffering variant.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If we decide to keep that class, I&apos;ll clean it up.&lt;/p&gt;


&lt;p&gt;So in summary:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Change the factory name to DecoderFactory unless someone comes up with a good name for a factory that is both a DecoderFactory and an EncoderFactory&lt;/li&gt;
	&lt;li&gt;Decide if we really want a DirectBinaryDecoder and how much of an API it shares with a read-ahead one.  Clean up javadoc for DirectBinaryDecoder if it is kept.&lt;/li&gt;
	&lt;li&gt;Consider a new ticket to rename file block Codec&apos;s to something much more distinct from Decoder and Encoder.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12833325" author="thiru_mg" created="Sat, 13 Feb 2010 05:00:09 +0000"  >&lt;p&gt;+1 to name the factory DecoderFactory.&lt;/p&gt;

&lt;p&gt;I support adding isEnd() to Decoder. DirectBinaryDecoder would always return &lt;em&gt;false&lt;/em&gt;. If someone does not want buffering, he cannot rely on isEnd(). isEnd() will be called by &quot;high-level&quot; functions and not by functions that work with a single Avro object corresponding to a schema. If such a high-level function needs to mix Avro and non-avro data in the stream, it should know when avro data ends, and so it would not need to call isEnd(). The high-level functions that rely on isEnd() to recognize the end of avro data cannot mix avro data and non-avro data.&lt;/p&gt;

&lt;p&gt;We can also add inputStream() to decoder. It would simply return the underlying InputStream() for DirectBinaryDecoder.&lt;/p&gt;

&lt;p&gt;+1 to keep the DirectBinaryDecoder, as you&apos;d have guessed. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; One option is that we can add a boolean to the factory methods that specifies if one wants buffering or not. Another option is to have additional factory methods. I prefer the former, but okay with the other, too.&lt;/p&gt;
</comment>
                            <comment id="12833344" author="thiru_mg" created="Sat, 13 Feb 2010 08:18:15 +0000"  >&lt;p&gt;BinaryData class seems to know the internals of BinaryDecoder. Is there a way to avoid it?&lt;/p&gt;

&lt;p&gt;There are significant code that is common between BinaryEncoder and DirectBinaryEncoder, like skipBytes, skipString, readBytes, readString, all array and map functions etc. I think refactroring them into a common abstract base class will be good. I suppose the performance impact will be near zero if a program uses only one of the implementations (Direct or Buffered).&lt;/p&gt;

&lt;p&gt;Can we not make ByteArrayByteSource.compactAndFill(), by simply setting the minPos to pos, instead of creating a new array? Am I missing something?&lt;/p&gt;

&lt;p&gt;The fields &lt;em&gt;position&lt;/em&gt; and &lt;em&gt;max&lt;/em&gt; in ByteArrayByteSource are used in attach(). After that they are merely tracking the the corresponding fields in &lt;em&gt;ba&lt;/em&gt;, with apparent reason. Since a single ByteSource gets attached only once, that too immediately after constuction, we get get rid of the attach() and move the logic to the constructors. This way, (1) we can avoid passing the unused bufferSize parameter to ByteArrayBufferSource, (2) get rid of the fields &lt;em&gt;position&lt;/em&gt; and &lt;em&gt;max&lt;/em&gt; in ByteArrayByteSource.&lt;/p&gt;

&lt;p&gt;I think ByteArrayByteSource.close() should set the eof flag and ba.setPos(ba.limit()) so that all subsequent reads will fail.&lt;/p&gt;

&lt;p&gt;The indentation isn&apos;t consistent. The most common problem is that the close brace is not indented properly (sometimes too much, sometimes too little), but there are other lines too.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;nit&amp;#93;&lt;/span&gt; In ByteSource.skip &quot;if (remaining &amp;gt; n)&quot; could be &quot;if (remaining &amp;gt;= n)&quot;.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;nit&amp;#93;&lt;/span&gt; There is a useless return statement in ByteArrayByteSource.attach()&lt;/p&gt;</comment>
                            <comment id="12833490" author="scott_carey" created="Sun, 14 Feb 2010 01:59:29 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;I support adding isEnd() to Decoder. DirectBinaryDecoder would always &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;. If someone does not want buffering, he cannot rely on isEnd(). isEnd() will be called by &lt;span class=&quot;code-quote&quot;&gt;&quot;high-level&quot;&lt;/span&gt; functions and not by functions that work with a single Avro object corresponding to a schema. If such a high-level function needs to mix Avro and non-avro data in the stream, it should know when avro data ends, and so it would not need to call isEnd(). The high-level functions that rely on isEnd() to recognize the end of avro data cannot mix avro data and non-avro data.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That isn&apos;t quite enough.  For example, if we did that, then the file format would break if implementations switched, since it throws an exception if isEnd() doesn&apos;t return true at the end of a data block.&lt;br/&gt;
I strongly prefer APIs that aren&apos;t wish-washy.  So a client needs to know if isEnd is guaranteed to work, or if not.  We could do an isEnd() if we also did a supportsIsEnd(), so that a client could enforce the use of the feature.  This is acceptable, and jives with the configurable factory (&quot;give me an instance that supports isEnd please&quot; --&amp;gt; (buffered impl).  &quot;give me one that supports isEnd and is also direct&quot; --&amp;gt; sorry!&lt;/p&gt;

&lt;p&gt;We could generalize this, and have one method on Decoder:&lt;br/&gt;
boolean isFeatureSupported(Feature f);&lt;br/&gt;
Where Feature is an enum in Decoder, and would currently have IS_END, INPUTSTREAM_PROXY, and NO_READAHEAD, or something like that.&lt;/p&gt;

&lt;p&gt;Putting inputStream() on Decoder has similar issues, JsonDecoder for example can&apos;t always support that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One option is that we can add a boolean to the factory methods that specifies if one wants buffering or not. Another option is to have additional factory methods. I prefer the former, but okay with the other, too.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The way i&apos;ll build this would be like Jackson&apos;s Factory API.  Configure the factory to make instances with certain configuration settings, and then there would be even fewer (smarter) factory methods. Otherwise, we&apos;ll find a few more configuration parameters, and end up with 5 booleans and two ints on each method signature.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;BinaryData class seems to know the internals of BinaryDecoder. Is there a way to avoid it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Probably not, but i&apos;ll have another look.  They are intimately related classes.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There are significant code that is common between . . .&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, my original version had a parent BinaryEncoder with the readahead and direct ones as children.  But I got frustrated with isEnd() &amp;#8211; The DataFileStream class would have to know for sure that it had an instance with a functioning isEnd().  If we do want to have both decoders and maintain them, this is an option to merge that shared code.  &lt;/p&gt;

&lt;p&gt;However it could be worth it to wait.  Merging them implies standardizing on an API that has to have optionally supported parts, like isEnd() + supportsIsEnd(), forever.  I suspect that these optional parts will grow over time, and all client code will have to check for them, specify them at factory configuration, etc.  All that adds up to a non-trivial set of baggage to manage the decoders with different semantics.  I still think that it would be easier to add features to the Decoder/Encoder APIs for interleaving non-Avro data.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can we not make ByteArrayByteSource.compactAndFill(), by simply setting the minPos to pos, instead of creating a new array? Am I missing something?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It used to do an arraycopy() to the front of the array, but that mutated the data which made it impossible to for example, read the same array twice.  Since the purpose of compactAndFill() is for use by ensureBounds(), it has to make a new (usually very small) array to deal with the leftovers so that readLong() won&apos;t overflow bounds.  Well, I suppose we could try catching IndexOutOfBounds instead, or something else.  &lt;br/&gt;
Since this wasn&apos;t clear, I should add code comments or organize the code so that it is more clear what is going on there.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think ByteArrayByteSource.close() should set the eof flag and ba.setPos(ba.limit()) so that all subsequent reads will fail.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good idea!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The indentation isn&apos;t consistent. The most common problem is that the close brace is not indented properly (sometimes too much, sometimes too little), but there are other lines too.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was worried that would happen &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  I used the &apos;ignore whitespace&apos; option of svn diff.  This is a side effect &amp;#8211; less consistent whitespace for recipients of the patch.  The benefit is for those who wanted to make the patch easier to read by minimizing line changes that only affected whitespace, another solution to that is to use a diff viewing tool that makes it clear what changes are whitespace-only.&lt;br/&gt;
For a patch this big, I&apos;m going to go for including whitespace and producing consistently indented final output for files where half or more lines are already changing.  I get it that one shouldn&apos;t change whitespace or formatting in a small patch, but this is an overhaul of a couple classes and the final result should be self-consistent.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The fields position and max in ByteArrayByteSource are used in attach(). After that they are merely tracking the the corresponding fields in ba, with apparent reason. Since a single ByteSource gets attached only once, that too immediately after constuction, we get get rid of the attach() and move the logic to the constructors. This way, (1) we can avoid passing the unused bufferSize parameter to ByteArrayBufferSource, (2) get rid of the fields position and max in ByteArrayByteSource.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sounds like a good simplification.  Position and max were there for the detach() use case, the buffer accessor might be enough.  I&apos;ll look more deeply at this.&lt;/p&gt;
</comment>
                            <comment id="12833569" author="thiru_mg" created="Sun, 14 Feb 2010 14:33:57 +0000"  >&lt;p&gt;This is modification over Scott&apos;s latest patch. The primary motivation for this modification was to share the tests for BinaryDecoder and DirectBinaryDecoder. I thought it&apos;d be easier to do it than to describe. &lt;/p&gt;

&lt;p&gt;The other changes are:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Fixed the indentation for BinaryDecoder.java&lt;/li&gt;
	&lt;li&gt;Made DirectBinaryDecoder package private. Consequently its init() is no longer available outside so, it is no longer depricated.&lt;/li&gt;
	&lt;li&gt;Added a couple of more factory methods for ease of use with DirectBinaryDecoder. Since DirectBinaryDecoder does not add anything to the interface, I have returned and accepted Decoder in the factory methods.&lt;/li&gt;
	&lt;li&gt;Replaced a couple of uses of BinaryDecoder with Decoder as BinaryDecoder functionality wasn&apos;t needed there&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Scott, I hope I&apos;ve not stomped over any of your local changes. If you like, please consider accepting a Decoder in the factory methods for BinaryDecoder the way I&apos;ve done for DirectBinaryDecoder. This will allow users like Requestor work with just Decoder. Thanks.&lt;/p&gt;</comment>
                            <comment id="12834565" author="scott_carey" created="Wed, 17 Feb 2010 00:19:50 +0000"  >&lt;p&gt;Ok, I&apos;ve got some time to make another patch for tomorrow.   &lt;/p&gt;

&lt;p&gt;@Thiru &amp;#8211; &lt;br/&gt;
For the factory, I think we should consider simplification:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  /**
   * Equivalent to createDirectBinaryDecoder(
   *    &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ByteArrayInputStream(bytes, start, length), reuse)
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Decoder createDirectBinaryDecoder(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bytes,
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; start, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length, Decoder reuse) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; createDirectBinaryDecoder(
        &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ByteArrayInputStream(bytes, start, length), reuse);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This isn&apos;t necessary, there is no point in using a DirectBinaryDecoder on a set of bytes, BinaryDecoder doesn&apos;t buffer/copy/alter the bytes, so there is no reason to be &apos;direct&apos;.  &lt;/p&gt;

&lt;p&gt;My earlier Idea for the factory would be to not even have a createDirectBinaryDecoder() method at all.  There would be a configureDirect(true) method on the factory, and the factory in this state&lt;br/&gt;
would return a direct instance only when needed (when initialized on an InputStream for now).  But this requires that the return type be a shared superclass.  So inputStream() and isEnd() have to either&lt;br/&gt;
go on Decoder() or DirectBinaryDecoder has to extend whatever type has those two methods.&lt;/p&gt;

&lt;p&gt;I think I&apos;ll just propose putting inputStream() and isEnd() in Decder.  &lt;br/&gt;
This is the simplest thing.  However, in order to allow those methods to be strict, the contract will be that&lt;/p&gt;

&lt;p&gt;boolean supportsIsEnd()&lt;br/&gt;
and&lt;br/&gt;
boolean supportsInputStream()&lt;/p&gt;

&lt;p&gt;be also added, and that if these return true, their corresponding methods have strict behavior &amp;#8211; IsEnd() never lies, and inputStream() always returns a valid object that can read bytes interleaved with  the decoder.&lt;br/&gt;
If false, these methods throw IllegalStateException.&lt;/p&gt;

&lt;p&gt;Does that approach sound like a good compromise?  If so I&apos;ll get started tomorrow and produce a patch with the above design.&lt;/p&gt;</comment>
                            <comment id="12834761" author="thiru_mg" created="Wed, 17 Feb 2010 13:48:21 +0000"  >&lt;p&gt;@Scott&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;This isn&apos;t necessary, there is no point in using a DirectBinaryDecoder on a set of bytes, BinaryDecoder doesn&apos;t buffer/copy/alter the bytes, so there is no reason to be &apos;direct&apos;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good point. Please get rid of it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There would be a configureDirect(true) method on the factory, and the factory in this state would return a direct instance only when needed (when initialized on an InputStream for now). But this requires that the return type be a shared superclass. So inputStream() and isEnd() have to either go on Decoder() or DirectBinaryDecoder has to extend whatever type has those two methods.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Instead of having a state for the factory, can we have a boolean argument to the factory method that takes an InputStream? If we have the state, we need to have another method returns the state etc.&lt;/p&gt;

&lt;p&gt;I like your approach of having only the decoder visible outside the package and having the isEnd() and inputStream() in it. But instead of adding supported() methods, can we have these methods throw OperationNotSupportedException(). If the clients encounter, for example isEndSupported() == false, they have to somehow manage the situation, They can now handle the exception to achieve the same. at least it makes the interface simpler. What do you think?&lt;/p&gt;</comment>
                            <comment id="12834899" author="scott_carey" created="Wed, 17 Feb 2010 18:05:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;Instead of having a state for the factory, can we have a boolean argument to the factory method that takes an InputStream? If we have the state, we need to have another method returns the state etc.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m concerned about the future flexibility of a boolean flag.  It is essentially exposing the implementation detail that the current BinaryDecoder is not &apos;direct&apos; for InputStreams, but is for the other stuff.&lt;/p&gt;

&lt;p&gt;If the mapping of which factory methods return different instances for &apos;direct&apos; and non-direct changes for some reason, it affects the API.&lt;br/&gt;
For example, maybe in the future, we add support for a factory method that operates on an Iterator&amp;lt;ByteBuffer&amp;gt;.  The first implementation might &apos;read-ahead&apos; past the minimum ByteBuffer necessary and thus not be applicable when &apos;direct&apos; is used.&lt;br/&gt;
But, a later implementation might fix this and ensure that the iterator never advances past the minimum necessary position and become applicable for &apos;direct&apos; needs.  With a state flag on the factory, this all remains hidden.  With a flag on the factory method, it is exposed.&lt;/p&gt;

&lt;p&gt;Maybe the flexibility is a bit of overkill for this one use case, but if we end up with more and more configuration state flags over time, the factory methods don&apos;t have to change.  If we push all that to the method signatures, it is harder to evolve.&lt;br/&gt;
We currently have one state variable in the factory &amp;#8211; the buffer size.  It is only applicable to the InputStream factory at the moment.  &lt;br/&gt;
The factory could be static if we put that on the factory method, but that would have the same drawbacks &amp;#8211; bufferSize may be applicable to some implementations, and not others, and which implementations are returned from each factory may change too.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;But instead of adding supported() methods, can we have these methods throw OperationNotSupportedException(). If the clients encounter, for example isEndSupported() == false, they have to somehow manage the situation, They can now handle the exception to achieve the same. at least it makes the interface simpler. What do you think?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think that implementations that don&apos;t support these operations should definitely throw OperationNotSupportedException (or equivalent).  But a client should be able to test for support proactively.  &lt;br/&gt;
I suppose that can be done with a try / catch instead of an if(), but I guess I belong to the &quot;exceptions are for exceptional situations&quot; school.  Its not exceptional for a user to want to know if a method is going to work, so I feel that &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!isEndSupported()) {
  logger.error(&quot;Decoder must support isEnd());
  &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; ... &lt;span class=&quot;code-comment&quot;&gt;// or &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;, or whatever the client needs to &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;is cleaner than&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
  isEnd();
} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (OperationNotSupportedException e) {
  logger.error(&quot;Decoder must support isEnd());
  &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;  &lt;span class=&quot;code-comment&quot;&gt;// or &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;, or whatever the client needs to &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, there may be cases where a client could have&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isEndSupported()) {
  &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; one thing
&lt;/span&gt;} &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
  &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; something &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Which is much uglier (and significantly slower) in exception form.&lt;/p&gt;

&lt;p&gt;But that is definitely a style thing.  I can go either way here.&lt;/p&gt;

&lt;p&gt;We agree on the core of all this so I&apos;ll start working on that right now.  What is left will be a decision on whether we should remove the supportsXX on Decoder and whether to put the &apos;direct&apos; part of the factory as a method flag or a state variable.  Some input/opinions from some others would help resolve that quickly.&lt;/p&gt;</comment>
                            <comment id="12835007" author="cutting" created="Wed, 17 Feb 2010 21:40:06 +0000"  >&lt;p&gt;I personally am not a fan of isXSupported() methods and would rather see an exception used here.&lt;/p&gt;</comment>
                            <comment id="12835109" author="scott_carey" created="Thu, 18 Feb 2010 03:49:13 +0000"  >&lt;p&gt;I&apos;m nearly done with the updated patch.  As for supportsIsEnd() this is what it looks like with and without it for the unit tests:&lt;/p&gt;


&lt;p&gt;without supportsIsEnd() the unit tests have blocks like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;      &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
        Assert.assertTrue(bd.isEnd());
      } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (UnsupportedOperationException e) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (bd.getClass() != DirectBinaryDecoder.class) {
          &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
        }
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;with supportsIsEnd() it is:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (supportsIsEnd()) {
  Assert.assertTrue(bd.isEnd());
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The latter will break only if the implementations tested are themselves broken.  The former depends on the tests having knowledge of which types support what, and will break if the test is not kept in sync with that.&lt;/p&gt;</comment>
                            <comment id="12835115" author="scott_carey" created="Thu, 18 Feb 2010 04:20:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;The fields position and max in ByteArrayByteSource are used in attach(). After that they are merely tracking the the corresponding fields in ba, with apparent reason. Since a single ByteSource gets attached only once, that too immediately after constuction, we get get rid of the attach() and move the logic to the constructors. This way, (1) we can avoid passing the unused bufferSize parameter to ByteArrayBufferSource, (2) get rid of the fields position and max in ByteArrayByteSource.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That is unsafe because the old source must be detached before the new one is attached.  &lt;br/&gt;
If we attach in the source constructor, we would have to detach the old before the source is constructed.   That is a little opaque.&lt;br/&gt;
This would prevent us from validating the source during/after construction before detaching the old one.&lt;/p&gt;

&lt;p&gt;The ByteSource API separates the construction step from the attachment so that it is more flexible and can deal with a wider variety of possible future input types. &lt;br/&gt;
The consequence is that the buffer size gets passed to all source types, regardless of whether that type buffers or not., and that simple sources have to separate the attach from the construction.&lt;/p&gt;</comment>
                            <comment id="12835122" author="scott_carey" created="Thu, 18 Feb 2010 05:07:54 +0000"  >&lt;p&gt;This patch incorporates a few changes:&lt;/p&gt;

&lt;p&gt;DirectBinaryDecoder now extends BinaryDecoder. &lt;/p&gt;

&lt;p&gt;BinaryDecoder has isEnd() and inputStream() , but Decoder does not.  It is now trivial to pull either of these to Decoder if desired &amp;#8211; with the default implementation there throwing an exception.  isEnd is more broadly applicable to resolving decoders, etc, but will frequently be unusable since JsonDecoder and DirectBinaryDecoder can&apos;t support it.&lt;/p&gt;

&lt;p&gt;Factory methods return BinaryDecoder instances, and based on the factory configuration, return different implementations.&lt;br/&gt;
The factory in this form is easy to use as a parameterized input for a unit tests or otherwise.  &lt;/p&gt;
</comment>
                            <comment id="12835776" author="thiru_mg" created="Fri, 19 Feb 2010 15:25:28 +0000"  >&lt;p&gt;+1 for the patch.&lt;/p&gt;

&lt;p&gt;A couple of nits:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In ResolvingDecoder, we can use the simpler createBinaryDecoder(byte[], BinaryDecoder).&lt;/li&gt;
	&lt;li&gt;Nobody seems to use the constructor BinaryDecoder(InputStream), which is marked depricated. I think we can get rid of it.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12835889" author="cutting" created="Fri, 19 Feb 2010 19:01:29 +0000"  >&lt;p&gt;I&apos;d like to get this committed today and roll a new 1.3 release candidate.&lt;/p&gt;

&lt;p&gt;A few other nits I&apos;ve noticed:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;many javadoc comments still mention AvroFactory.  These should instead link to DecoderFactory now.  Using links helps check class names.&lt;/li&gt;
	&lt;li&gt;the class javadoc for BinaryDecoder should link to DecoderFactory.  it should also be broken into multiple paragraphs.  and, when buffering is mentioned, it should link to the DecoderFactory method that creates a non-buffering BinaryDecoder.&lt;/li&gt;
	&lt;li&gt;the class javadoc for DirectBinaryDecoder should just be something like, &quot;a non-buffering version of BinaryDecoder&quot;.&lt;/li&gt;
	&lt;li&gt;BinaryDecoder#vin should be package-private, not protected, no?  I don&apos;t think this should appear in end-user javadoc.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Scott, do you agree with Thiru&apos;s latest recommendations &amp;amp; mine?  If so, will you be able to make a new patch today?&lt;/p&gt;</comment>
                            <comment id="12835906" author="scott_carey" created="Fri, 19 Feb 2010 19:25:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;Nobody seems to use the constructor BinaryDecoder(InputStream), which is marked depricated. I think we can get rid of it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It is public, &apos;someone&apos; might be using it.  If others think this is an OK API compatibility break, I&apos;ll remove it.  Its much cleaner to funnel everything through the factory.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Scott, do you agree with Thiru&apos;s latest recommendations &amp;amp; mine? If so, will you be able to make a new patch today?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, I can get to this in a couple hours.  The javadoc cleanup is useful (and with all the variations of this patch, a likely place where I missed something).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;BinaryDecoder#vin should be package-private, not protected, no? I don&apos;t think this should appear in end-user javadoc.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ahh, javadoc.   Protected is more access restricted than package level, so from a code point of view preferred (no other classes in the package should see it).  &lt;br/&gt;
But its more open on the javadoc side that way, which we don&apos;t want.&lt;/p&gt;

&lt;p&gt;I&apos;ll change that for now so its hidden.  If we ever design the file reader to be extended by users we can re-visit that.&lt;/p&gt;</comment>
                            <comment id="12835915" author="cutting" created="Fri, 19 Feb 2010 19:37:06 +0000"  >&lt;p&gt;&amp;gt; If others think this is an OK API compatibility break, I&apos;ll remove it.&lt;/p&gt;

&lt;p&gt;I&apos;m okay leaving this deprecated and removing it in the next release.&lt;/p&gt;

&lt;p&gt;&amp;gt; Yes, I can get to this in a couple hours.&lt;/p&gt;

&lt;p&gt;Great!&lt;/p&gt;

&lt;p&gt;&amp;gt; Protected is more access restricted than package level [ ... ]&lt;/p&gt;

&lt;p&gt;Protected can be accessed from a subclass in another package, while package-private cannot.  Packages can be sealed to prevent new classes from being added to them.&lt;/p&gt;</comment>
                            <comment id="12835953" author="scott_carey" created="Fri, 19 Feb 2010 21:18:52 +0000"  >&lt;p&gt;Addresses points brought up by Thiru and Doug. &lt;/p&gt;

&lt;p&gt;BinaryDecoder(InputStream in) &lt;br/&gt;
remains deprecated, we expect to remove this in a later version.&lt;/p&gt;</comment>
                            <comment id="12835969" author="cutting" created="Fri, 19 Feb 2010 21:46:13 +0000"  >&lt;p&gt;I just committed this.  Thanks, Scott!&lt;/p&gt;</comment>
                            <comment id="12836290" author="thiru_mg" created="Sun, 21 Feb 2010 00:55:36 +0000"  >&lt;p&gt;A local  setting leaked into the trunk. Fixed it.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Index: lang/java/src/test/java/org/apache/avro/TestDataFile.java
===================================================================
--- lang/java/src/test/java/org/apache/avro/TestDataFile.java   (revision 912267
)
+++ lang/java/src/test/java/org/apache/avro/TestDataFile.java   (working copy)
@@ -69,7 +69,7 @@
   &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; File DIR
     = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.getProperty(&lt;span class=&quot;code-quote&quot;&gt;&quot;test.dir&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp&quot;&lt;/span&gt;));
   &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; File DATAFILE_DIR
-    = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.getProperty(&lt;span class=&quot;code-quote&quot;&gt;&quot;test.dir&quot;&lt;/span&gt;, &quot;/Users/scottc/Documents/workspac
e/avro2/build/interop/data&quot;));
+    = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.getProperty(&lt;span class=&quot;code-quote&quot;&gt;&quot;test.dir&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp&quot;&lt;/span&gt;));
   &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; SEED = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
   &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; SCHEMA_JSON =
     &lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;: \&quot;&lt;/span&gt;record\&lt;span class=&quot;code-quote&quot;&gt;&quot;, \&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;: \&quot;&lt;/span&gt;Test\&lt;span class=&quot;code-quote&quot;&gt;&quot;, \&quot;&lt;/span&gt;fields\&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Committed revision 912268.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12456166">AVRO-414</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="12445497">AVRO-327</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12434701" name="AVRO-392-preview.patch" size="36771" author="scott_carey" created="Wed, 3 Feb 2010 19:54:19 +0000"/>
                            <attachment id="12435863" name="AVRO-392-with_DirectBinaryDecoder-2.patch" size="109184" author="thiru_mg" created="Mon, 15 Feb 2010 12:42:11 +0000"/>
                            <attachment id="12435715" name="AVRO-392-with_DirectBinaryDecoder.patch" size="106213" author="scott_carey" created="Fri, 12 Feb 2010 18:06:15 +0000"/>
                            <attachment id="12436374" name="AVRO-392.patch" size="110217" author="scott_carey" created="Fri, 19 Feb 2010 21:18:51 +0000"/>
                            <attachment id="12436177" name="AVRO-392.patch" size="109742" author="scott_carey" created="Thu, 18 Feb 2010 05:07:54 +0000"/>
                            <attachment id="12435687" name="AVRO-392.patch" size="94560" author="scott_carey" created="Fri, 12 Feb 2010 10:49:33 +0000"/>
                            <attachment id="12435028" name="AVRO-392.patch" size="64330" author="scott_carey" created="Fri, 5 Feb 2010 23:00:27 +0000"/>
                            <attachment id="12434917" name="AVRO-392.patch" size="60906" author="scott_carey" created="Fri, 5 Feb 2010 02:02:59 +0000"/>
                            <attachment id="12434802" name="AVRO-392.patch" size="63048" author="scott_carey" created="Thu, 4 Feb 2010 09:53:54 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 3 Feb 2010 17:03:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94718</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 49 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e01z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79771</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-393] byte[] constructor for Utf8 desired</title>
                <link>https://issues.apache.org/jira/browse/AVRO-393</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;We&apos;ve come across a few use cases where we know that a given byte array is properly Utf8 encoded, but Utf8 has no constructor to take it. Instead, we have to turn it into a String first just to have it swapped back. This is sucky.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12455244">AVRO-393</key>
            <summary>byte[] constructor for Utf8 desired</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jmhodges">Jeff Hodges</assignee>
                                    <reporter username="jmhodges">Jeff Hodges</reporter>
                        <labels>
                    </labels>
                <created>Wed, 3 Feb 2010 23:25:47 +0000</created>
                <updated>Tue, 13 Dec 2011 19:06:50 +0000</updated>
                            <resolved>Thu, 4 Feb 2010 00:26:20 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12829315" author="jmhodges" created="Wed, 3 Feb 2010 23:26:26 +0000"  >&lt;p&gt;Here&apos;s a patch that adds a byte[] constructor to Utf8 and adds the beginnings of a TestUtf8 class.&lt;/p&gt;</comment>
                            <comment id="12829319" author="kevinoliver" created="Wed, 3 Feb 2010 23:33:34 +0000"  >&lt;p&gt;While its not obvious, the work around is to use something like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] myBytes = ...;
Utf8 utf8 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Utf8();
utf8.setLength(myBytes.length);
&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.arraycopy(myBytes, 0, utf8.getBytes(), 0, myBytes.length);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That said, I agree that a Utf8(byte[]) constructor would be useful.&lt;/p&gt;</comment>
                            <comment id="12829340" author="cutting" created="Thu, 4 Feb 2010 00:26:20 +0000"  >&lt;p&gt;I just committed this.  I made two minor changes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;in the test, I specified &quot;UTF-8&quot;, as String#getBytes() uses the installation&apos;s default encoding by default.&lt;/li&gt;
	&lt;li&gt;i also used 2-space-per-level indentation&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks, Jeff!&lt;/p&gt;</comment>
                            <comment id="12829362" author="thiru_mg" created="Thu, 4 Feb 2010 01:12:27 +0000"  >&lt;p&gt;While at it, it will be useful to add another constructor that takes a sub-array:&lt;/p&gt;

&lt;p&gt;Utf8(byte[] bytes, int start, int len);&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12434727" name="byte_utf8.patch" size="2076" author="jmhodges" created="Wed, 3 Feb 2010 23:26:26 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 3 Feb 2010 23:33:34 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94719</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 51 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e027:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79772</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-394] Simplify and consolidate all data structures into hash tables</title>
                <link>https://issues.apache.org/jira/browse/AVRO-394</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Previously, I was using a singly-linked tail queue for lists/array of data structures.&lt;/p&gt;

&lt;p&gt;To make the code cleaner, performant and easier to maintain, I&apos;ve dropped queue.h and instead use the numerical hash tables in st.h/st.c. &lt;/p&gt;
</description>
                <environment></environment>
        <key id="12455246">AVRO-394</key>
            <summary>Simplify and consolidate all data structures into hash tables</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="massie">Matt Massie</assignee>
                                    <reporter username="massie">Matt Massie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 3 Feb 2010 23:38:18 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:23 +0000</updated>
                            <resolved>Thu, 4 Feb 2010 00:10:40 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12829334" author="massie" created="Thu, 4 Feb 2010 00:10:40 +0000"  >&lt;p&gt;Committed to trunk&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12434730" name="AVRO-394.patch" size="53357" author="massie" created="Wed, 3 Feb 2010 23:41:10 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94720</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 51 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e02f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79773</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-395] Add a cscope Makefile target</title>
                <link>https://issues.apache.org/jira/browse/AVRO-395</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description></description>
                <environment></environment>
        <key id="12455269">AVRO-395</key>
            <summary>Add a cscope Makefile target</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="eli">Eli Collins</assignee>
                                    <reporter username="eli">Eli Collins</reporter>
                        <labels>
                    </labels>
                <created>Thu, 4 Feb 2010 04:48:11 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:23 +0000</updated>
                            <resolved>Thu, 4 Feb 2010 05:03:21 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12829445" author="eli" created="Thu, 4 Feb 2010 04:50:04 +0000"  >&lt;p&gt;Patch attached.&lt;/p&gt;</comment>
                            <comment id="12829450" author="massie" created="Thu, 4 Feb 2010 05:03:21 +0000"  >&lt;p&gt;Thanks, Eli!  Committed to trunk.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12434784" name="avro-395-1.patch" size="724" author="eli" created="Thu, 4 Feb 2010 04:50:04 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 4 Feb 2010 05:03:21 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94721</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 51 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e02n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79774</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-396] Add DataFileReadTool equivalent to Avro C</title>
                <link>https://issues.apache.org/jira/browse/AVRO-396</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description></description>
                <environment></environment>
        <key id="12455271">AVRO-396</key>
            <summary>Add DataFileReadTool equivalent to Avro C</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dcreager">Douglas Creager</assignee>
                                    <reporter username="eli">Eli Collins</reporter>
                        <labels>
                    </labels>
                <created>Thu, 4 Feb 2010 05:00:32 +0000</created>
                <updated>Tue, 1 Nov 2011 18:36:00 +0000</updated>
                            <resolved>Fri, 15 Jul 2011 01:24:06 +0000</resolved>
                                                    <fixVersion>1.6.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13045545" author="dcreager" created="Tue, 7 Jun 2011 17:14:17 +0000"  >&lt;p&gt;I have an implementation of two new command-line tools, avrocat and avropipe, available on a github tracking branch:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dcreager/avro/tree/avropipe&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/dcreager/avro/tree/avropipe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The avrocat tool prints the contents of an Avro data file to stdout, one record per line, using the JSON encoding.  I haven&apos;t used DataFileReadTool, but I&apos;m guessing they&apos;re equivalent.  (avrocat is definitely equivalent to the Python binding&apos;s &quot;avro tool dump&quot; command.)&lt;/p&gt;

&lt;p&gt;The avropipe command prints out a slightly different format, where each scalar value appears on a single line.  The values are prefixed with a &quot;path&quot; that indicates where the scalar is in the arbitrarily deep input record format.  The output is equivalent to treating the data file as an array of JSON values, and sending that array through the &lt;a href=&quot;https://github.com/dvxhouse/jsonpipe&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;jsonpipe&lt;/a&gt; command.&lt;/p&gt;

&lt;p&gt;The commands depend on the new value interface from &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-837&quot; title=&quot;New Avro value interface&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-837&quot;&gt;&lt;del&gt;AVRO-837&lt;/del&gt;&lt;/a&gt;, which I wasn&apos;t planning on back-porting to the 1.5 library.  Once &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-837&quot; title=&quot;New Avro value interface&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-837&quot;&gt;&lt;del&gt;AVRO-837&lt;/del&gt;&lt;/a&gt; has been tested and committed to SVN, I&apos;ll commit this as well.&lt;/p&gt;</comment>
                            <comment id="13065654" author="dcreager" created="Fri, 15 Jul 2011 01:24:06 +0000"  >&lt;p&gt;Committed to SVN.  avrocat and avropipe will get installed into $PREFIX/bin as part of a standard install.&lt;/p&gt;</comment>
                            <comment id="13065655" author="dcreager" created="Fri, 15 Jul 2011 01:24:19 +0000"  >&lt;p&gt;(But only in 1.6.0, not in 1.5.x)&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 7 Jun 2011 17:14:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>67987</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 28 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e02v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79775</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-397] Whitespace change and comment clarification in datafile.py</title>
                <link>https://issues.apache.org/jira/browse/AVRO-397</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-386&quot; title=&quot;Python implementation of compression&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-386&quot;&gt;&lt;del&gt;AVRO-386&lt;/del&gt;&lt;/a&gt; introduced compression to datafile.py (thanks, Philip!), but left a typo in the comment and one inconsistent use of whitespace. This patch fixes things.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12455278">AVRO-397</key>
            <summary>Whitespace change and comment clarification in datafile.py</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.svg">Trivial</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="hammer">Jeff Hammerbacher</assignee>
                                    <reporter username="hammer">Jeff Hammerbacher</reporter>
                        <labels>
                    </labels>
                <created>Thu, 4 Feb 2010 08:05:51 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:23 +0000</updated>
                            <resolved>Thu, 4 Feb 2010 08:12:43 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>python</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12829523" author="hammer" created="Thu, 4 Feb 2010 08:12:43 +0000"  >&lt;p&gt;Committed revision 906393.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12434793" name="AVRO-397.patch" size="761" author="hammer" created="Thu, 4 Feb 2010 08:06:25 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94722</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 51 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e033:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79776</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-398] avro_read_file doesn&apos;t detect eof</title>
                <link>https://issues.apache.org/jira/browse/AVRO-398</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;avro_read_file needs to check both ferror and feof.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12455285">AVRO-398</key>
            <summary>avro_read_file doesn&apos;t detect eof</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="eli">Eli Collins</assignee>
                                    <reporter username="eli">Eli Collins</reporter>
                        <labels>
                    </labels>
                <created>Thu, 4 Feb 2010 08:58:10 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:23 +0000</updated>
                            <resolved>Fri, 5 Feb 2010 23:49:40 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12829540" author="eli" created="Thu, 4 Feb 2010 09:00:00 +0000"  >&lt;p&gt;Patch attached.&lt;/p&gt;</comment>
                            <comment id="12830377" author="massie" created="Fri, 5 Feb 2010 23:49:40 +0000"  >&lt;p&gt;Committed to trunk.  Thanks, Eli!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12434797" name="avro-398-1.patch" size="390" author="eli" created="Thu, 4 Feb 2010 09:00:00 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 5 Feb 2010 23:49:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94723</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 51 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e03b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79777</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-399] Make data file interop tests work with the Python implementation</title>
                <link>https://issues.apache.org/jira/browse/AVRO-399</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description></description>
                <environment></environment>
        <key id="12455286">AVRO-399</key>
            <summary>Make data file interop tests work with the Python implementation</summary>
                <type id="6" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/requirement.png">Test</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="hammer">Jeff Hammerbacher</assignee>
                                    <reporter username="hammer">Jeff Hammerbacher</reporter>
                        <labels>
                    </labels>
                <created>Thu, 4 Feb 2010 09:11:17 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:23 +0000</updated>
                            <resolved>Thu, 11 Feb 2010 00:09:16 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>python</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12829918" author="hammer" created="Fri, 5 Feb 2010 02:13:07 +0000"  >&lt;p&gt;Patch needs a data generator added.&lt;/p&gt;</comment>
                            <comment id="12830172" author="cutting" created="Fri, 5 Feb 2010 17:12:12 +0000"  >&lt;p&gt;We might commit this w/o a data generator and add that in a separate issue?  Some interop testing is better than none.&lt;/p&gt;</comment>
                            <comment id="12831777" author="hammer" created="Wed, 10 Feb 2010 00:29:47 +0000"  >&lt;p&gt;Here&apos;s an implementation of the Python data file interop and data file generator&lt;/p&gt;</comment>
                            <comment id="12831785" author="cutting" created="Wed, 10 Feb 2010 00:51:51 +0000"  >&lt;p&gt;This fails for me.&lt;/p&gt;

&lt;p&gt;&amp;gt; (cd lang/py; ant interop-data-generate)&lt;br/&gt;
Buildfile: build.xml&lt;/p&gt;

&lt;p&gt;interop-data-generate:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;mkdir&amp;#93;&lt;/span&gt; Created dir: /home/cutting/src/avro/trunk/build/interop/data&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; Traceback (most recent call last):&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;   File &quot;/home/cutting/src/avro/trunk/lang/py/test/gen_interop_data.py&quot;, line 2, in &amp;lt;module&amp;gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     from avro import schema&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; ImportError: No module named avro&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; Result: 1&lt;/p&gt;
</comment>
                            <comment id="12831847" author="hammer" created="Wed, 10 Feb 2010 03:58:48 +0000"  >&lt;p&gt;Oh, you want it to work on your computer, not just my own? FINE.&lt;/p&gt;</comment>
                            <comment id="12832186" author="cutting" created="Wed, 10 Feb 2010 20:41:04 +0000"  >&lt;p&gt;The interop test now work for me, but&lt;/p&gt;

&lt;p&gt;./build.sh clean; cd lang/py ; ant test&lt;/p&gt;

&lt;p&gt;fails with&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;py-test&amp;#93;&lt;/span&gt; OSError: &lt;span class=&quot;error&quot;&gt;&amp;#91;Errno 2&amp;#93;&lt;/span&gt; No such file or directory: &apos;/home/cutting/src/avro/trunk/lang/py/test/../../../build/interop/data&apos;&lt;/p&gt;
</comment>
                            <comment id="12832276" author="hammer" created="Wed, 10 Feb 2010 23:04:42 +0000"  >&lt;p&gt;Exclude test_datafile_interop.py from being run by the &quot;test&quot; ant target.&lt;/p&gt;</comment>
                            <comment id="12832277" author="hammer" created="Wed, 10 Feb 2010 23:04:51 +0000"  >&lt;p&gt;Doug: try now.&lt;/p&gt;</comment>
                            <comment id="12832297" author="cutting" created="Wed, 10 Feb 2010 23:43:57 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;&apos;./build.sh clean test&apos; now works for me.  Thanks, Jeff!&lt;/p&gt;</comment>
                            <comment id="12832314" author="hammer" created="Thu, 11 Feb 2010 00:09:16 +0000"  >&lt;p&gt;Committed revision 908770.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12445440">AVRO-321</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12444646">AVRO-287</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12435514" name="AVRO-399.patch" size="5305" author="hammer" created="Wed, 10 Feb 2010 23:04:42 +0000"/>
                            <attachment id="12435408" name="AVRO-399.patch" size="5100" author="hammer" created="Wed, 10 Feb 2010 03:58:48 +0000"/>
                            <attachment id="12435382" name="AVRO-399.patch" size="5034" author="hammer" created="Wed, 10 Feb 2010 00:29:47 +0000"/>
                            <attachment id="12434798" name="AVRO-399.patch" size="2542" author="hammer" created="Thu, 4 Feb 2010 09:16:02 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 5 Feb 2010 17:12:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94724</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 50 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e03j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79778</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-400] Adding warning for unused parameters</title>
                <link>https://issues.apache.org/jira/browse/AVRO-400</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Adds -Wextra -Wunused-parameter to the C makefiles and removes a bunch of unused parameters. Matt, lemme know if you had left these parameters in for future use.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12455293">AVRO-400</key>
            <summary>Adding warning for unused parameters</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="eli">Eli Collins</assignee>
                                    <reporter username="eli">Eli Collins</reporter>
                        <labels>
                    </labels>
                <created>Thu, 4 Feb 2010 09:53:40 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:23 +0000</updated>
                            <resolved>Sat, 6 Feb 2010 01:16:04 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12830362" author="eli" created="Fri, 5 Feb 2010 23:15:07 +0000"  >&lt;p&gt;Updated patch attached. Adds warnings for unused parameters to the relevant makefiles but doesn&apos;t remove the unused parameters that the last patch did (those will be used in the future). Also corrects the type of the size field in avro_fixed_schema_t and a printf format string in lang/c/examples/quickstop.c&lt;/p&gt;
</comment>
                            <comment id="12830400" author="massie" created="Sat, 6 Feb 2010 01:16:04 +0000"  >&lt;p&gt;Committed to trunk.   Thanks, Eli.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12434803" name="avro-400-1.patch" size="11307" author="eli" created="Thu, 4 Feb 2010 09:54:47 +0000"/>
                            <attachment id="12435029" name="avro-400-2.patch" size="2174" author="eli" created="Fri, 5 Feb 2010 23:15:07 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 6 Feb 2010 01:16:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94725</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 51 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e03r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79779</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-401] Second occurrence of &quot;ascending&quot; in ordering spec for records should read &quot;descending&quot;</title>
                <link>https://issues.apache.org/jira/browse/AVRO-401</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;In the section on ordering &quot;ascending&quot; appears twice for mutually incompatible orderings.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12455337">AVRO-401</key>
            <summary>Second occurrence of &quot;ascending&quot; in ordering spec for records should read &quot;descending&quot;</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tomwhite">Tom White</assignee>
                                    <reporter username="tomwhite">Tom White</reporter>
                        <labels>
                    </labels>
                <created>Thu, 4 Feb 2010 18:19:00 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:24 +0000</updated>
                            <resolved>Thu, 4 Feb 2010 20:47:44 +0000</resolved>
                                    <version>1.2.0</version>
                                    <fixVersion>1.3.0</fixVersion>
                                    <component>spec</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12829678" author="tomwhite" created="Thu, 4 Feb 2010 18:20:11 +0000"  >&lt;p&gt;Trivial patch.&lt;/p&gt;</comment>
                            <comment id="12829771" author="cutting" created="Thu, 4 Feb 2010 20:47:44 +0000"  >&lt;p&gt;I just committed this.  Thanks, Tom!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12434846" name="AVRO-401.patch" size="539" author="tomwhite" created="Thu, 4 Feb 2010 18:20:11 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 4 Feb 2010 20:47:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94726</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 51 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e03z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79780</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-402] Add method for writing avro_schema_t structure to an avro_writer_t</title>
                <link>https://issues.apache.org/jira/browse/AVRO-402</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;This patch add the ability to write an avro_schema_t to an avro_writer_t.&lt;/p&gt;

&lt;p&gt;This functionality is necessary for file interop support.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12455357">AVRO-402</key>
            <summary>Add method for writing avro_schema_t structure to an avro_writer_t</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="massie">Matt Massie</assignee>
                                    <reporter username="massie">Matt Massie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 4 Feb 2010 21:35:57 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:24 +0000</updated>
                            <resolved>Thu, 4 Feb 2010 21:42:52 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12829802" author="massie" created="Thu, 4 Feb 2010 21:42:52 +0000"  >&lt;p&gt;Committed to trunk&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12434874" name="AVRO-402.patch" size="18055" author="massie" created="Thu, 4 Feb 2010 21:39:51 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94727</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 51 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e047:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79781</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-403] Add file object container support to C implementation</title>
                <link>https://issues.apache.org/jira/browse/AVRO-403</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;This patch adds support for the file object container format in C including updating the build.sh scripts to generate and test the interop data.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12455493">AVRO-403</key>
            <summary>Add file object container support to C implementation</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="massie">Matt Massie</assignee>
                                    <reporter username="massie">Matt Massie</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Feb 2010 21:04:29 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:24 +0000</updated>
                            <resolved>Sat, 6 Feb 2010 00:57:11 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12830394" author="massie" created="Sat, 6 Feb 2010 00:57:11 +0000"  >&lt;p&gt;Committed to trunk&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12435040" name="AVRO-403.patch" size="18089" author="massie" created="Sat, 6 Feb 2010 00:55:45 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94728</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 51 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e04f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79782</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-404] Support &quot;mixin properties&quot; for specific codegen</title>
                <link>https://issues.apache.org/jira/browse/AVRO-404</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;As we add more features for RPC and the specific codegen, there are some codegen options that should be provided as annotations on schema fields. For example, some users may want to turn binary fields into byte[], and other people may prefer ByteBuffer. Since these are codegen-scoped and not data-scoped, it would be nice to allow the properties to be &quot;mixed in&quot; at codegen time. By moving them out of the main schema definition, different users of the same Avro protocol could make different choices for the codegen in their specific applications.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12455504">AVRO-404</key>
            <summary>Support &quot;mixin properties&quot; for specific codegen</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="tlipcon">Todd Lipcon</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Feb 2010 22:39:48 +0000</created>
                <updated>Sat, 6 Feb 2010 05:12:38 +0000</updated>
                                                                            <component>java</component>
                    <component>spec</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12830347" author="cutting" created="Fri, 5 Feb 2010 22:51:38 +0000"  >&lt;p&gt;The reflect API uses the &quot;java-class&quot; property in a schema for a related purpose.  It also uses annotations to specify this.&lt;/p&gt;</comment>
                            <comment id="12830467" author="philip" created="Sat, 6 Feb 2010 05:12:38 +0000"  >&lt;p&gt;I think I know what Todd is talking about here, so I&apos;ll do an example.&lt;/p&gt;

&lt;p&gt;We might have a record X.  One user might want to annotate it with &quot;java-class: org.foo.X&quot;.  Another user might want to also use the reflection API, but annotate it with &quot;org.bar.X&quot;.  Since X has been defined externally (in some other project, say), nobody really wants to fork X, both &apos;foo&apos; and &apos;bar&apos; users merely want to add some mix-ins.   They could certainly do so at runtime, but then the schema is this weird &quot;mixed-mode&quot; thing.  That&apos;s the reflect API example.  The specific API example happens when we end up having options about how we generate the generated code, and different users want different options.&lt;/p&gt;

&lt;p&gt;I think we might be able to make this more of a &quot;genavro&quot;/(avroidl?) issue rather than a schema issue.  Support some sort of modification of existing schemas after inclusion...&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 5 Feb 2010 22:51:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94729</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 51 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e04n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79783</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-405] Netty-based Java RPC server</title>
                <link>https://issues.apache.org/jira/browse/AVRO-405</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;A nonblocking RPC server based on Netty should be more scalable than the current implementation.&lt;/p&gt;

&lt;p&gt;We should provide two mechanisms for interfacing the RPC server to the implementations:&lt;/p&gt;

&lt;p&gt;1) &quot;Blocking&quot; RPC implementations run inside a worker threadpool. Implementators would not know that they&apos;re working in a non-blocking context.&lt;br/&gt;
2) &quot;Event-driven&quot; RPC implementations that receive requests and some kind of request context. They are responsible for eventually calling context.respond(response) or somesuch. This would allow more scalable interaction with downstream services.&lt;/p&gt;

&lt;p&gt;I propose we focus on (1) first.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12455505">AVRO-405</key>
            <summary>Netty-based Java RPC server</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="coolwhy">harry wang</assignee>
                                    <reporter username="tlipcon">Todd Lipcon</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Feb 2010 22:45:53 +0000</created>
                <updated>Mon, 2 Jul 2012 00:11:49 +0000</updated>
                            <resolved>Thu, 1 Jul 2010 21:26:55 +0000</resolved>
                                                    <fixVersion>1.4.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>11</watches>
                                                                <comments>
                            <comment id="12830344" author="tlipcon" created="Fri, 5 Feb 2010 22:48:30 +0000"  >&lt;p&gt;I think the server type 1 above could become the default Java RPC server implementation. It has the nice scalability properties of being able to handle a lot of concurrent connections, and as long as the RPC handler isn&apos;t doing further downstream RPCs, it shouldn&apos;t be much worse than #2.&lt;/p&gt;</comment>
                            <comment id="12830345" author="ryanobjc" created="Fri, 5 Feb 2010 22:50:54 +0000"  >&lt;p&gt;I am interested in this, both needing it and working on it as well. Netty seems like a great framework for dealing with these.&lt;/p&gt;

&lt;p&gt;What protocol are you thinking about?&lt;/p&gt;</comment>
                            <comment id="12830357" author="tlipcon" created="Fri, 5 Feb 2010 23:04:36 +0000"  >&lt;p&gt;I&apos;d like to do the protocol self-described as avro records. I think Matt Massie has some work on this somewhere - do we have an open JIRA for non-HTTP RPC?&lt;/p&gt;

&lt;p&gt;Also, SASL support is a strong requirement for this to be used in Hadoop.&lt;/p&gt;</comment>
                            <comment id="12830465" author="philip" created="Sat, 6 Feb 2010 05:07:34 +0000"  >&lt;p&gt;A Netty based server relates to figuring out the &quot;server protocol&quot; that we want to do.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12843703" author="cutting" created="Wed, 10 Mar 2010 19:00:54 +0000"  >&lt;p&gt;Ning&apos;s posted an async Java HTTP client that might be useful for Avro.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://code.ning.com/2010/03/introducing-nings-asynchronous-http-client-library/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://code.ning.com/2010/03/introducing-nings-asynchronous-http-client-library/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12843710" author="scott_carey" created="Wed, 10 Mar 2010 19:18:10 +0000"  >&lt;p&gt;Don&apos;t forget Apache HTTP Components:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hc.apache.org/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hc.apache.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the evolution of the old Apache Commons HttpClient.   HTTP Components adds server side components and asynchronous I/O capability.&lt;/p&gt;

&lt;p&gt;My experience with the old HttpClient was that it was significantly better performing and robust than the built-in sun java http client.   Under high load with a lot of concurrent connections, there was a big (50% to 100%) difference.   &lt;/p&gt;</comment>
                            <comment id="12853324" author="bshi" created="Mon, 5 Apr 2010 07:01:42 +0000"  >&lt;p&gt;Anyone working on this?  I had a bit of free time this weekend to go through the avro and netty tutorials and threw together something that might fit the bill.  The implementation is mostly plumbing;  I put together frame encoding and decoding a handler that wraps a Responder instance.  Would welcome any comments.&lt;/p&gt;</comment>
                            <comment id="12853325" author="bshi" created="Mon, 5 Apr 2010 07:02:50 +0000"  >&lt;p&gt;netty-based socket rpc implementation&lt;/p&gt;</comment>
                            <comment id="12853327" author="tlipcon" created="Mon, 5 Apr 2010 07:06:47 +0000"  >&lt;p&gt;Nice, Bo! I was planning on working on this but haven&apos;t had a chance to yet, so feel free to grab it. I&apos;ll try to take a look at your patch early this week.&lt;/p&gt;</comment>
                            <comment id="12853412" author="bshi" created="Mon, 5 Apr 2010 15:49:50 +0000"  >&lt;p&gt;Thanks Todd; I am going to try to post an update within the next couple of days as (1) needs a bit of a re-org into multiple files instead of one monolithic source file and (b) the frame decoder needs some hardening against random/invalid/malicious input (e.g. &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-391&quot; title=&quot;DoS possible on java rpc servers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-391&quot;&gt;AVRO-391&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/THRIFT-601&quot; title=&quot;sending random data crashes thrift service&quot; class=&quot;issue-link&quot; data-issue-key=&quot;THRIFT-601&quot;&gt;&lt;del&gt;THRIFT-601&lt;/del&gt;&lt;/a&gt;).  Hopefully the async server will be less susceptible to memory-related issues.&lt;/p&gt;</comment>
                            <comment id="12853417" author="gonzo" created="Mon, 5 Apr 2010 16:03:08 +0000"  >&lt;p&gt;hi bo -&lt;/p&gt;

&lt;p&gt;  i have started piecing some some of this together and have placed the prototype code on github:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;http://github.com/jwtodd/netty-avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/jwtodd/netty-avro&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    note: the project is sparse but does work to a degree&lt;/p&gt;

&lt;p&gt;  i would love to collaborate on this work.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;james&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12853529" author="gonzo" created="Mon, 5 Apr 2010 20:19:28 +0000"  >&lt;p&gt;attached is zip file that contains all of the netty/avro patch files as found in &lt;a href=&quot;http://github.com/jwtodd/netty-avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/jwtodd/netty-avro&lt;/a&gt; minus the (large) libs/* files&lt;/p&gt;</comment>
                            <comment id="12854589" author="gonzo" created="Wed, 7 Apr 2010 16:42:32 +0000"  >&lt;p&gt;aim to merge patches and publish for review by this coming weekend&lt;/p&gt;</comment>
                            <comment id="12854671" author="bshi" created="Wed, 7 Apr 2010 20:04:47 +0000"  >&lt;p&gt;Hi James,&lt;/p&gt;

&lt;p&gt;Some comments on a quick review of the current github link HEAD before you get too far into your merge&lt;/p&gt;

&lt;p&gt;These are mostly related to server-side, as I haven&apos;t been following async client implementation at all.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I&apos;m warming up to chaining existing netty decoders as you have done in your pipeline definition although I think we should characterize the performance impact compared to implementing the decode/encode in one pass.  Likely in real-world RPC implementations the decode/encode step becomes a very small part of the total computation performed per call, still though we can probably get some gains for cheap here (in particular LengthFieldBasedFrameDecoder &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; does way more than we need - maybe we just use a stripped down version - the implementation is very simple).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Taking the lead from existing client/server implementation in avro, our async server should implement the org.apache.avro.ipc.Server interface and the client should extend the org.apache.avro.ipc.Transceiver abstract class.  Doing this, you won&apos;t have to modify the unit test in my patch and it will enable one liner switch to nonblocking rpc in projects like &lt;a href=&quot;http://github.com/phunt/avro-rpc-quickstart&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/phunt/avro-rpc-quickstart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;(minor) In the github repo, the package prototype.netty.avro is further divided into three sub-packages.  It seems to me that a simple flat package structure is sufficient for this implementation (I don&apos;t forsee see the need to support more than one binary protocol).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Todd L: Any word on when the streaming protocol will be finalized?&lt;/p&gt;


&lt;p&gt;Regards,&lt;br/&gt;
Bo&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://grepcode.com/file/repository.jboss.com/maven2/org.jboss.netty/netty/3.1.0.BETA2/org/jboss/netty/handler/codec/frame/LengthFieldBasedFrameDecoder.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://grepcode.com/file/repository.jboss.com/maven2/org.jboss.netty/netty/3.1.0.BETA2/org/jboss/netty/handler/codec/frame/LengthFieldBasedFrameDecoder.java&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12854682" author="gonzo" created="Wed, 7 Apr 2010 20:19:37 +0000"  >&lt;p&gt;great points bo.&lt;/p&gt;

&lt;p&gt;i took the approach of the protobuf codecs as the baseline and opted to not dig into the backing pipeline impl details. put another way, striving to &quot;make it work&quot; followed by &quot;make it work right and make it work fast.&quot; definitely cut some corners. i would expect the netty impls to be efficient, though. on the other hand streamlining is not a bad thing.&lt;/p&gt;

&lt;p&gt;thx for the test heads up! that&apos;s definitely a good one to work in.&lt;/p&gt;

&lt;p&gt;yeah, likely over refactored the packages a bit. did that as a part of componentizing the impl given we are evaluating using this code inhouse. flattening things out is likely needed.&lt;/p&gt;

&lt;p&gt;i did leave a note on #netty for trustin to given him a heads up, see if the codec part of this work should/could reside w/ netty/etc.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;james&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12854705" author="tlipcon" created="Wed, 7 Apr 2010 20:55:01 +0000"  >&lt;p&gt;Assigning to unassigned since I can&apos;t seem to assign to either of you two &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Regrading the streaming protocol, I don&apos;t think anyone is currently actively working on it &amp;#8211; other things have eclipsed it on the great priority queue &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. If either of you wanted to submit a proposal that would be great!&lt;/p&gt;</comment>
                            <comment id="12855811" author="gonzo" created="Mon, 12 Apr 2010 02:44:39 +0000"  >&lt;p&gt;i&apos;ll grab this one as we work through the initial blocking netty patch.&lt;/p&gt;</comment>
                            <comment id="12855833" author="gonzo" created="Mon, 12 Apr 2010 04:47:17 +0000"  >&lt;p&gt;deps:&lt;/p&gt;

&lt;p&gt;  patch is relative to the &lt;span class=&quot;error&quot;&gt;&amp;#91;avro&amp;#93;&lt;/span&gt;/lang/java directory (ie cd &lt;span class=&quot;error&quot;&gt;&amp;#91;avro&amp;#93;&lt;/span&gt;/lang/java; patch -p0 &amp;lt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-405&quot; title=&quot;Netty-based Java RPC server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-405&quot;&gt;&lt;del&gt;AVRO-405&lt;/del&gt;&lt;/a&gt;.patch)&lt;br/&gt;
  requires netty 3.1.5GA&lt;br/&gt;
    workaround: download netty-3.1.5.GA.jar and copy it to the build/lib dir (note: would be optimal to update ivy.xml)&lt;/p&gt;

&lt;p&gt;addressed:&lt;/p&gt;

&lt;p&gt;  flattened package (see org.apache.avro.ipc.netty, opted to not co-populate o.a.a.ipc at this time)&lt;br/&gt;
  included ref/proto code (see org.apache.avro.ipc.netty.prototype)&lt;br/&gt;
  o.a.a.ipc.netty.NettyServer implements o.a.a.ipc.Server&lt;br/&gt;
  o.a.a.ipc.netty.NettyClient does &lt;b&gt;not&lt;/b&gt; extend o.a.a.ipc.Transceiver&lt;br/&gt;
    note: .o.a.a.ipc.netty.AvroClientHandler includes an internal o.a.a.ipc.Transceiver for netty/avro delegation&lt;br/&gt;
              we should be able to reconstruct the tests accordingly&lt;br/&gt;
  opted to continue to use/leverage/delegate-to netty classes&lt;br/&gt;
    note: there should be upside in having the netty code look as netty-native as possible and optimizations should&lt;br/&gt;
              perhaps be considered downstream a bit, eg once we move past the current impl of accumulating ByteBuffer&lt;/p&gt;

&lt;p&gt;issues/todo:&lt;/p&gt;

&lt;p&gt;  implement requestor/responder factory (eg via post handshake factory, etc)&lt;br/&gt;
  references to the Mail/Message prototype code (borrowed from avro-rpc-quickstart) persist until we can introspect&lt;br/&gt;
    the outbound/inbound message and make the relevant instantiations (see above issue)&lt;br/&gt;
  construct/support/migrate tests&lt;/p&gt;</comment>
                            <comment id="12855834" author="gonzo" created="Mon, 12 Apr 2010 04:50:36 +0000"  >&lt;p&gt;hey bo shi, todd -&lt;/p&gt;

&lt;p&gt;  attached is a first cut at merging our patches along with the associated notes (eg assumptions, addressed issues, todo issues, etc).&lt;/p&gt;

&lt;p&gt;  i feel pretty good with this patch noting that there are a few open issues, namely we need to refactor out the explicit avro instance invocations&lt;br/&gt;
  for Mail/Message via request/responder post handshake factory delegation, something i can likely start to chew on should this patch look ok.&lt;/p&gt;

&lt;p&gt;  hth,&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;james&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12882669" author="coolwhy" created="Fri, 25 Jun 2010 18:34:12 +0000"  >&lt;p&gt;I just submit my implementation (&lt;a href=&quot;http://github.com/coolwhy/avro-rpc-on-netty&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/coolwhy/avro-rpc-on-netty&lt;/a&gt;) patch as another choice. Maybe we could make the final design better &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12882670" author="coolwhy" created="Fri, 25 Jun 2010 18:38:02 +0000"  >&lt;p&gt;My implementation patch, anyone can try it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12882681" author="coolwhy" created="Fri, 25 Jun 2010 18:54:35 +0000"  >&lt;p&gt;oh, I found my patch is alike with Bo Shi&apos;s ... did I invent the wheel again ? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/tongue.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12882920" author="coolwhy" created="Sun, 27 Jun 2010 06:39:34 +0000"  >&lt;p&gt;The patch file &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-405&quot; title=&quot;Netty-based Java RPC server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-405&quot;&gt;&lt;del&gt;AVRO-405&lt;/del&gt;&lt;/a&gt;-coolwhy.patch I provided still has bugs. How can I delete it?&lt;/p&gt;</comment>
                            <comment id="12883021" author="scott_carey" created="Mon, 28 Jun 2010 04:20:46 +0000"  >&lt;p&gt;There is no reason to delete it.  If you have an improved version, you can submit that one as well.&lt;/p&gt;


&lt;p&gt;We have had much delay in committing this feature.   This is largely the fault of committers (like me) not reviewing the patches and providing feedback.&lt;/p&gt;

&lt;p&gt;I personally think this is a great contribution effort and that we&apos;ll want a Netty RPC implementation in 1.4.  &lt;/p&gt;

&lt;p&gt;I won&apos;t have time to review this in the next couple weeks.  I can&apos;t speak to the availability of any others to review.  &lt;/p&gt;
</comment>
                            <comment id="12883038" author="gonzo" created="Mon, 28 Jun 2010 06:17:33 +0000"  >&lt;p&gt;hey scott -&lt;/p&gt;

&lt;p&gt;  i welcome feedback re &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-405&quot; title=&quot;Netty-based Java RPC server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-405&quot;&gt;&lt;del&gt;AVRO-405&lt;/del&gt;&lt;/a&gt;.patch, please see above comments for associated context.&lt;/p&gt;

&lt;p&gt;  remaining work, assuming the work thus far is viable/etc (i have received feedback from several indicating it works as expected), includes:&lt;/p&gt;

&lt;p&gt;    (resolve TODO) be adding a responder delegate interface that is invoked during request handshake but before request processing&lt;/p&gt;

&lt;p&gt;    use latest netty distribution (should be trivial)&lt;/p&gt;

&lt;p&gt;    build alternative protocol specified by bruce&lt;/p&gt;

&lt;p&gt;  i would appreciate a sync check/feedback for the current patch before proceeding. again, there should be ample review context in the above associated comments and the patch proper.&lt;/p&gt;

&lt;p&gt;  hth,&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;james&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12883198" author="cutting" created="Mon, 28 Jun 2010 15:56:03 +0000"  >&lt;p&gt;I hope to have time later this week to review this.  At a glance, it looked like it could be nearly ready to commit.&lt;/p&gt;

&lt;p&gt;&amp;gt; adding a responder delegate interface that is invoked during request handshake but before request processing&lt;/p&gt;

&lt;p&gt;That sounds like a separate issue.  Why is it required before we commit Harry&apos;s patch?&lt;/p&gt;

&lt;p&gt;&amp;gt; build alternative protocol specified by bruce&lt;/p&gt;

&lt;p&gt;That&apos;s also a separate issue.  Having a Netty-based Transceiver and Server would be useful and Harry&apos;s patch appears to provide a complete implementation.  Long-term we should consider improving responder delegation, and we need to specify an RPC transport that&apos;s high-performance than HTTP.  But those shouldn&apos;t prevent the addition of a simple Netty-based Transceiver and Server now, should they?&lt;/p&gt;</comment>
                            <comment id="12883411" author="coolwhy" created="Tue, 29 Jun 2010 04:51:57 +0000"  >&lt;p&gt;My new patch to make the NettyTransceiver look better. The transport protocol has been changed to support some async call feature in the client side.&lt;/p&gt;</comment>
                            <comment id="12884429" author="cutting" created="Thu, 1 Jul 2010 21:26:54 +0000"  >&lt;p&gt;I just committed this.  Thanks, Harry!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12455507">AVRO-406</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12464267">AVRO-539</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12467816">AVRO-585</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12446398">HDFS-916</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12461144">ZOOKEEPER-733</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12460976">HBASE-2400</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12455264">HBASE-2182</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12595357">GIRAPH-211</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12441447" name="ASF.LICENSE.NOT.GRANTED--AVRO-405.patch" size="28369" author="gonzo" created="Mon, 12 Apr 2010 04:47:17 +0000"/>
                            <attachment id="12448275" name="AVRO-405-coolwhy-new.patch" size="26461" author="coolwhy" created="Tue, 29 Jun 2010 04:51:57 +0000"/>
                            <attachment id="12448078" name="AVRO-405-coolwhy.patch" size="23781" author="coolwhy" created="Fri, 25 Jun 2010 18:38:02 +0000"/>
                            <attachment id="12440734" name="AVRO-405-for-review.patch" size="10111" author="bshi" created="Mon, 5 Apr 2010 07:02:50 +0000"/>
                            <attachment id="12440789" name="netty-avro.zip" size="18659" author="gonzo" created="Mon, 5 Apr 2010 20:19:28 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 5 Feb 2010 22:50:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94730</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 30 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e04v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79784</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-406] Support streaming RPC calls</title>
                <link>https://issues.apache.org/jira/browse/AVRO-406</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Avro nicely supports chunking of container types into multiple frames. We need to expose this to RPC layer to facilitate use cases like the Hadoop Datanode where a single &quot;RPC&quot; can yield far more data than should be buffered in memory.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12455507">AVRO-406</key>
            <summary>Support streaming RPC calls</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="tlipcon">Todd Lipcon</reporter>
                        <labels>
                            <label>rpc</label>
                    </labels>
                <created>Fri, 5 Feb 2010 22:50:43 +0000</created>
                <updated>Wed, 28 Oct 2015 21:05:15 +0000</updated>
                                                                            <component>java</component>
                    <component>spec</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>27</watches>
                                                                <comments>
                            <comment id="12830356" author="tlipcon" created="Fri, 5 Feb 2010 23:01:19 +0000"  >&lt;p&gt;Here&apos;s one proposal I discussed a bit with Philip yesterday:&lt;/p&gt;

&lt;p&gt;An RPC can only be considered &quot;streamable&quot; if at least one of the following is true:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;The response type is array&amp;lt;X&amp;gt; and marked &quot;streamed&quot; in the protocol.&lt;/li&gt;
	&lt;li&gt;The last request parameter is array&amp;lt;X&amp;gt; and marked &quot;streamed&quot; in the protocol.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The &quot;streamed&quot; marking is probably best suited as a mixin property (see &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-404&quot; title=&quot;Support &amp;quot;mixin properties&amp;quot; for specific codegen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-404&quot;&gt;AVRO-404&lt;/a&gt;) since this should be entirely backwards-compatible for RPC clients/servers that don&apos;t support streaming. It just specifies to the RPC client/server that a particular API should be used.&lt;/p&gt;

&lt;p&gt;Let&apos;s take the following example RPCs for discussion:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;record Chunk {
  fixed checksum(4);
  binary data;
}
streamed array&amp;lt;Chunk&amp;gt; getBlock(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; blockId);
PutResult putBlock(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; blockid, streamed array&amp;lt;Chunk&amp;gt; chunks)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The non-streamed java interfaces would look like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;List&amp;lt;Chunk&amp;gt; getBlock(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; blockId);
PutResult putBlock(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; blockId, List&amp;lt;Chunk&amp;gt; chunks);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If streaming is enabled for these chunks, it would change to:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Iterable&amp;lt;Chunk&amp;gt; getBlock(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; blockId);
PutResult putBlock(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; blockId, Iterable&amp;lt;Chunk&amp;gt; chunks);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, the iterable would stream the data in from the network as it is iterated for putBlock. And getBlock would be responsible for returning an iterable that generates response packets until the block has been entirely sent.&lt;/p&gt;

&lt;p&gt;Users of this would probably do something like the following most often:&lt;/p&gt;

&lt;p&gt;record ReadHeader {&lt;br/&gt;
  int statusCode;&lt;br/&gt;
  ...&lt;br/&gt;
}&lt;br/&gt;
union ReadPacket &lt;/p&gt;
{ ReadHeader, Chunk }
&lt;p&gt;;&lt;br/&gt;
streamed array&amp;lt;ReadPacket&amp;gt; getBlock(int blockId);&lt;/p&gt;

&lt;p&gt;and then document that it will always send one ReadHeader followed by an unspecified number of chunks.&lt;/p&gt;

&lt;p&gt;The streaming parameters and streaming response could certainly be used together (eg to provide a putBlock() that &quot;acks&quot; sequence numbers as they&apos;re written to disk)&lt;/p&gt;

&lt;p&gt;For an event-driven server or client, the APIs would probably be more callback-oriented, but let&apos;s start here.&lt;/p&gt;</comment>
                            <comment id="12830358" author="cutting" created="Fri, 5 Feb 2010 23:08:15 +0000"  >&lt;p&gt;The existing API to minimize copies is Decoder#readBytes(ByteBuffer).  When writing data, if a value is larger than 4k or so, it is written as a separate frame.  If, when reading, one calls Decoder#readBytes(ByteBuffer) at a frame boundary, it should read directly from the socket or file handle without intermediate buffering.&lt;/p&gt;

&lt;p&gt;For the datanode case, I had imagined that one would make RPC requests to read a chunk at a time, and each would be returned with its checksum.  To avoid round-trip delays, the RPC client would need to be able to submit requests without blocking.  It could then submit multiple requests, then read responses until the number of outstanding requests fell below some threshold, then submit more requests.  If the transport can return responses out of order then the client would need to re-order them.  Alternately, if a transport like HTTP is used, multiple requests can be sent over a connection and their responses are guaranteed to be returned in order.&lt;/p&gt;</comment>
                            <comment id="12830361" author="tlipcon" created="Fri, 5 Feb 2010 23:14:10 +0000"  >&lt;p&gt;Sending an RPC per chunk seems like a significant amount of overhead. A streaming RPC response also makes good sense for scan or multiget APIs in HBase - if you want to perform a scan of a few thousand rows with minimal latency, it&apos;s best not to have to worry about sending 1000 separate RPCs and congealing the responses. That would add up to a significant CPU overhead, and probably transfer overhead as well - imagine a multiget where each cell is only a few bytes, but you want several thousand of them.&lt;/p&gt;</comment>
                            <comment id="12830366" author="cutting" created="Fri, 5 Feb 2010 23:26:53 +0000"  >&lt;p&gt;I don&apos;t have a problem with streaming RPC responses. The Encoder and Decoder API do support streaming, but currently with the assumption that no single binary value is bigger than can be buffered.  Have you looked at the BlockingEncoder?&lt;/p&gt;</comment>
                            <comment id="12830463" author="philip" created="Sat, 6 Feb 2010 04:55:29 +0000"  >&lt;p&gt;We support blocking for complex types (arrays and maps) on the wire.  But, the way all the APIs are right now, the RPC client would have to be able to put the whole thing in memory, which often doesn&apos;t make sense.  That&apos;s what Todd&apos;s approach is suggesting.  You should be able to have a meaningful &quot;sendMeFiveHundredMegabytes()&quot; command that can be used by a client with only a modicum of clever handling.&lt;/p&gt;</comment>
                            <comment id="12831088" author="cutting" created="Mon, 8 Feb 2010 20:09:47 +0000"  >&lt;p&gt;&amp;gt; You should be able to have a meaningful &quot;sendMeFiveHundredMegabytes()&quot; command that can be used by a client with only a modicum of clever handling.&lt;/p&gt;

&lt;p&gt;A way of doing this without changing anything in the spec is to transmit an array of chunks, since arrays are already blocked and may be arbitrarily long.  Todd&apos;s API above makes the array of chunks explicit, so perhaps we&apos;re okay with that approach?&lt;/p&gt;

&lt;p&gt;BlockingBinaryEncoder intelligently breaks arrays when they&apos;re too big for a block, but not otherwise, minimizing block overhead.  Applications can stream writes and reads of arbitrarily-large complex objects using this class.  One option is thus to code directly to the Encoder/Decoder API and rely on ValidatingEncoder and ValidatingDecoder to ensure that calls conform to a schema: Encoder/Decoder is Avro&apos;s streaming API.&lt;/p&gt;

&lt;p&gt;We don&apos;t yet have a higher-level API that permits streaming arbitrarily large items.  The Iterable&amp;lt;Chunk&amp;gt; approach Todd proposes should work in some cases.  To my thinking it is only applicable when the final parameter of a method is an array type and/or when the return type is an array type.  Does that sound right?  One could annotate the schema somehow, so that the compiler generates this alternate API, or perhaps the compiler could simply be modified to always generate both styles of methods when these conditions are met.&lt;/p&gt;

&lt;p&gt;The Transceiver interface would also need to change from using List&amp;lt;ByteBuffer&amp;gt; to Iterator&amp;lt;ByteBuffer&amp;gt;, so that it can return a response before it has been entirely read and accept a request before it has been entirely written.&lt;/p&gt;</comment>
                            <comment id="12831111" author="tlipcon" created="Mon, 8 Feb 2010 20:52:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;A way of doing this without changing anything in the spec is to transmit an array of chunks, since arrays are already blocked and may be arbitrarily long&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;To my thinking it is only applicable when the final parameter of a method is an array type and/or when the return type is an array type&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed on both fronts. Having multiple streamed parameters would be very tricky to understand since you can&apos;t start streaming the second parameter until the first is complete. The same goes for streamed record members - I don&apos;t think we should allow it since we can&apos;t ensure that the client will consume them in the correct order.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One could annotate the schema somehow, so that the compiler generates this alternate API&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This was my &quot;streamed array&amp;lt;Chunk&amp;gt;&quot; notation above. In JSON syntax it might look something like&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
{ &quot;type&quot;: &quot;array&quot;,
  &quot;items&quot;: &quot;Chunk&quot;,
  &quot;streamed: &quot;true&quot; }

&lt;p&gt;This would modify the interfaces for both client and server to generate the streaming-style APIs. This is a good example usecase for mixin annotations (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-404&quot; title=&quot;Support &amp;quot;mixin properties&amp;quot; for specific codegen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-404&quot;&gt;AVRO-404&lt;/a&gt;) since some users might want the &quot;simple API&quot; instead. The call would be completely wire-compatible between streamed and non-streamed implementations, of course.&lt;/p&gt;
</comment>
                            <comment id="12831122" author="cutting" created="Mon, 8 Feb 2010 21:12:16 +0000"  >&lt;p&gt;&amp;gt; This was my &quot;streamed array&amp;lt;Chunk&amp;gt;&quot; notation above&lt;/p&gt;

&lt;p&gt;Right, but I&apos;m not yet convinced we need an optional notation.  Above I meant to suggest that the compiler could always emit both APIs when the last parameter is an array, i.e both &apos;putChunks(List&amp;lt;Chunk&amp;gt;)&apos; and &apos;putChunks(Iterable&amp;lt;Chunk&amp;gt;)&apos;.  However that wouldn&apos;t work for return values, since we can&apos;t overload them, so we&apos;d have to mangle names, which is ugly.&lt;/p&gt;

&lt;p&gt;Instead, perhaps the compiler and runtime could always use Iterable for Array parameters and return values?  Then, folks can pass either a list or something that&apos;s lazier and materialized on the fly.  The runtime, when the return type is an array that uses more than one block, could return an iterator that reads remaining responses directly from the connection.&lt;/p&gt;</comment>
                            <comment id="12831155" author="tlipcon" created="Mon, 8 Feb 2010 22:06:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;Above I meant to suggest that the compiler could always emit both APIs when the last parameter is an array&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this makes sense on the client side, but for the server side interface, you wouldn&apos;t want to have to implement both, right?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Then, folks can pass either a list or something that&apos;s lazier and materialized on the fly&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The disadvantage here of treating everything like an Iterable is that we won&apos;t be able to check .size() ahead of time to set up the right size array block, and we&apos;ll end up chunking all arrays in single-element blocks. We could of course do something like if (ret instanceof Collection) &lt;/p&gt;
{ int size = ret.size(); }
&lt;p&gt; but it seems kind of evil.&lt;/p&gt;</comment>
                            <comment id="12831160" author="cutting" created="Mon, 8 Feb 2010 22:22:47 +0000"  >&lt;p&gt;&amp;gt; The disadvantage here of treating everything like an Iterable is that we won&apos;t be able to check .size() ahead of time to set up the right size array block, and we&apos;ll end up chunking all arrays in single-element blocks.&lt;/p&gt;

&lt;p&gt;BlockingBinaryEncoder solves this already this for small objects, buffering them until a block is full.  And if an element is a large ByteBuffer, then it can be immediately written as a single-element block without copying and without significant overhead.&lt;/p&gt;
</comment>
                            <comment id="12831252" author="ryanobjc" created="Tue, 9 Feb 2010 01:55:21 +0000"  >&lt;p&gt;The HBase API is really returning a 2 dimensional array of byte arrays... Each cell (row/col/version) is one byte array, and then each row is an array of those, and each result set is multiple rows.  Perhaps another way to think of this is an endless array of cells with inferred &apos;next row&apos; from watching the row key between cells. &lt;/p&gt;

&lt;p&gt;The optimization available to us here is that each hbase RPC call spends very little time actually &lt;em&gt;in hbase&lt;/em&gt; but ends up waiting on Datanode to get the data back.  Some kind of async framework on the server side could help chain daemons that make multiple RPCs and avoid busy-waiting threads.&lt;/p&gt;

&lt;p&gt;One other thought, right now we use a block-oriented loader, since right now you have to store the entire value in RAM at least once (during RPC and memstore times), but if someone wanted to store massive values in hbase we could use the DN streaming API and stream those chunks back to the client.  Right now everything is modelled as arrays of bytes, so that might not be so hard to do.  I&apos;m a little wary of large object APIs, since you might as well store the data in HDFS directly. &lt;/p&gt;

&lt;p&gt;Right now the return type might be:&lt;br/&gt;
array of array of byte&lt;/p&gt;

&lt;p&gt;if you say only the first enclosing array is &apos;streaming&apos; that means the sub-array is NOT streamed, right?&lt;/p&gt;

&lt;p&gt;If so, then streaming excessively large objects in the process of streaming normal and other associated objects might not be the right thing to do.&lt;/p&gt;</comment>
                            <comment id="12831253" author="tlipcon" created="Tue, 9 Feb 2010 02:04:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;if you say only the first enclosing array is &apos;streaming&apos; that means the sub-array is NOT streamed, right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Correct. To be really technical, on a wire level we &lt;b&gt;could&lt;/b&gt; stream any structure that is &quot;tail streamable&quot;... by which I mean array&amp;lt;foo&amp;gt;, or array&amp;lt;array&amp;lt;foo&amp;gt;&amp;gt;, or array&amp;lt;array&amp;lt;MyRecord&amp;gt;&amp;gt; where MyRecord&apos;s last field is &quot;tail streamable&quot;. However, it will be impossible to enforce that clients or servers consume/provide the values in the correct order. For example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;void doStuff(Iterable&amp;lt;Iterable&amp;lt;Foo&amp;gt;&amp;gt; inputFoos) {
  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Iterable&amp;lt;Foo&amp;gt; fooIter : inputFoos) {
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Foo foos : fooIter) {
      &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; something with foo
&lt;/span&gt;    }
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;could work, since the user is consuming the input in the same order it&apos;s being serialized on the wire. However, if the outer iterator were moved before all of the inner iterator&apos;s data was consumed, it would no longer work (the second array&amp;lt;Foo&amp;gt; isn&apos;t available until the first array&amp;lt;Foo&amp;gt; is done). Granted, we could &quot;skip ahead&quot; at this point, but I think this complexity would be very bad, and probably not clear for framework users either.&lt;/p&gt;

&lt;p&gt;For your use case, could you get by with a bit more application-level logic and change your array&amp;lt;array&amp;lt;Cell&amp;gt;&amp;gt; to something more like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;record ResponseChunk {
  &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; continuingPreviousRow;
  array&amp;lt;Cell&amp;gt; cells;
} 
array&amp;lt;ResponseChunk&amp;gt; getCells(...)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where you&apos;d send a few cells at a time in a ResponseChunk, and unwrap them on the other side into whatever user-level API you want?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If so, then streaming excessively large objects in the process of streaming normal and other associated objects might not be the right thing to do.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry, I couldn&apos;t parse this sentence. Can you explain further what you mean? I guess you&apos;re referring to streaming large binary values? If so, I think it will be impossible to do it in a general way from the API even if the wire protocol supports it. The large binary values can always be &quot;chunked&quot; as above and it shouldn&apos;t be a big hassle for developers, right?&lt;/p&gt;

&lt;p&gt;(should be noted this is probably an &quot;advanced feature&quot; that only a few hardcore apps will need to use... in particular HBase and Hadoop &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; )&lt;/p&gt;</comment>
                            <comment id="12831256" author="tlipcon" created="Tue, 9 Feb 2010 02:09:43 +0000"  >&lt;p&gt;I think it&apos;s worth noting that I&apos;m essentially saying we should expect people to write &quot;mini protocols&quot; at the application on top of avro when they want to do really complicated stuff like this. It&apos;s a bit annoying, but I think it still provides good benefit over &quot;do it yourself transport&quot; - the protocol will be way easier to evolve, and all the other transport features will be leveraged.&lt;/p&gt;

&lt;p&gt;Would like to see arguments against this, though, if someone has one!&lt;/p&gt;</comment>
                            <comment id="12831265" author="ryanobjc" created="Tue, 9 Feb 2010 02:24:01 +0000"  >&lt;p&gt;I was just musing about the idea of mixing large objects and non-large objects in the same result stream, and streaming where necessary and not. But like you said if you are an array&amp;lt;array&amp;lt;byte&amp;gt;&amp;gt; then it&apos;d be hard to do tail streaming.&lt;/p&gt;

&lt;p&gt;If we make the hard easy and the impossible merely difficult i think the job will be a success.&lt;/p&gt;</comment>
                            <comment id="12831563" author="cutting" created="Tue, 9 Feb 2010 18:01:43 +0000"  >&lt;p&gt;&amp;gt; if you say only the first enclosing array is &apos;streaming&apos; that means the sub-array is NOT streamed, right?&lt;/p&gt;

&lt;p&gt;The current Avro binary data format supports streaming of nested arrays.  For example, BlockingBinaryEncoder implements this so that, if an inner array has millions of elements, it is blocked.  Each block is prefixed not just with the number of elements, but also with the number of bytes in the block.  So arbitrarily large, nested data structures may already be efficiently streamed through Avro.&lt;/p&gt;

&lt;p&gt;As I think about it more, I believe the Iterator&amp;lt;Iterator&amp;lt;Foo&amp;gt;&amp;gt; approach has merit.  Avro&apos;s runtime supports the notion of efficient skipping.  It doesn&apos;t seem overly complex for the outer iterator to know whether the inner iterator has completed or not, and, if it&apos;s not, skip accordingly.  I beleive this can be implemented with a call to ParsingDecoder#skipTo(level), where level is the parser&apos;s stack level of the outer iterator.  Note that, since &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-388&quot; title=&quot;Using ResolvingDecoder in GenericDatumReader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-388&quot;&gt;&lt;del&gt;AVRO-388&lt;/del&gt;&lt;/a&gt;, all Java Binary decoders are now parser-based, and hence support this.  I find the consistency and generality of this model attractive.&lt;/p&gt;

&lt;p&gt;Thiru, does this sound plausible?&lt;/p&gt;

</comment>
                            <comment id="12831614" author="tlipcon" created="Tue, 9 Feb 2010 19:35:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;As I think about it more, I believe the Iterator&amp;lt;Iterator&amp;lt;Foo&amp;gt;&amp;gt; approach has merit. Avro&apos;s runtime supports the notion of efficient skipping&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Skipping is one thing, but there&apos;s no way to rewind a socket. For example, what do we do about the following user code:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;void myStreamedRpc(Iterable&amp;lt;Iterable&amp;lt;Foo&amp;gt;&amp;gt; myArg) {
  Iterator outerIter = myArg.iterator();
  Iterator&amp;lt;Foo&amp;gt; firstIter = outerIter.next().iterator();
  Iterator&amp;lt;Foo&amp;gt; secondIter = outerIter.next().iterator();
  Foo a = secondIter.next();
  Foo b = firstIter.next();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code tries to read the data off the stream in the opposite order from which they arrive. When assigning &apos;a&apos; we could certainly skip all of firstIter&apos;s data, but then we&apos;d be screwed when it comes time to assign &apos;b&apos; since we can&apos;t skip back. We could buffer all of firstIter as soon as we access secondIter, but then we&apos;re not being very transparent at all to end users. I don&apos;t like the idea that users of this API would have to really understand its workings under the hood or else risk potentially unbounded memory buffering.&lt;/p&gt;

&lt;p&gt;Keeping the API restricted to &quot;you may have one streamed input and one streamed output&quot; has its downsides in loss of generality, but at least it is very transparent to implementors, and slight deviations in processing order can&apos;t cause huge swings in performance.&lt;/p&gt;</comment>
                            <comment id="12831624" author="cutting" created="Tue, 9 Feb 2010 19:47:05 +0000"  >&lt;p&gt;Todd, I think that last line could throw an exception.  I don&apos;t think it&apos;s unreasonable to define the lifetime of an inner iterator to end when next() is called on the outer iterator.&lt;/p&gt;</comment>
                            <comment id="12831647" author="tlipcon" created="Tue, 9 Feb 2010 20:27:08 +0000"  >&lt;p&gt;So would the restriction be that you can only have nested array&amp;lt;array&amp;lt;array&amp;lt;...&amp;gt;&amp;gt;&amp;gt; type streamables?&lt;/p&gt;

&lt;p&gt;Do we allow something like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;record MyRecord {
  array&amp;lt;Chunk&amp;gt; chunks;
  array&amp;lt;Blahs&amp;gt; blahs;
  StatusCode status;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;? In this case, it&apos;s not &quot;tail streamable&quot; to use my definition above. Do we force people to use accessors and then throw an exception if getStatus() is called before chunks and blahs have both been fully iterated? Do we enforce that you can&apos;t start iterating blahs until chunks have been iterated? I think this will be very confusing.&lt;/p&gt;</comment>
                            <comment id="12831655" author="cutting" created="Tue, 9 Feb 2010 20:44:25 +0000"  >&lt;p&gt;&amp;gt; Do we enforce that you can&apos;t start iterating blahs until chunks have been iterated?&lt;/p&gt;

&lt;p&gt;I&apos;m just exploring whether and how we might use a uniform, iterator-based API.  We might optimize the runtime in particular cases, and these optimizations might result in runtime restrictions.  These optimizations might be switchable at runtime.  So, tail-streamable might be enabled by default, and all others would be fully buffered.  But you might be able to call a #setStreamNested(boolean) method that permits nested things to be streamed but requires that datastructures be accessed in-order.&lt;/p&gt;</comment>
                            <comment id="12832617" author="philip" created="Thu, 11 Feb 2010 18:36:46 +0000"  >&lt;p&gt;I&apos;m wary of using Iterators all the time.  Users typically know at design time whether they have a small array, where they&apos;d like the advantages of random access and .size() or whether they have an iterator representing a possibly big stream.  Using an annotation in the schema to specify this makes quite a bit of sense.&lt;/p&gt;

&lt;p&gt;It might also be simpler to only do the iteration if it&apos;s top-level for return values.&lt;/p&gt;

&lt;p&gt;This also reminds me a bit of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-391&quot; title=&quot;DoS possible on java rpc servers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-391&quot;&gt;AVRO-391&lt;/a&gt; (DoS possible).  It would be a neat feature to put in &quot;maximum_allowable_size&quot; in schemas, saying that, hey, this record should never exceed 10K.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;</comment>
                            <comment id="12834983" author="tlipcon" created="Wed, 17 Feb 2010 20:50:56 +0000"  >&lt;p&gt;We just had a bit of a discussion about this. In discussion, we determined that the primary difficulty is going to be flow control when multiplexing several streamed RPCs over the same TCP pipe.&lt;/p&gt;

&lt;p&gt;For example, if there are two block writes streaming into one Hadoop DN, going to different disks, we need a way of applying backpressure on one write without backpressure on the other. This implies that we either (a) must implement our own flow control mechanism for streamed calls, or (b) cannot multiplex multiple streamed calls on the same TCP stream, thus allowing normal TCP backpressure to work here.&lt;/p&gt;

&lt;p&gt;Unfortunately, option A above is a pain, since we&apos;d end up reimplementing sliding window. Option B is a pain because we&apos;re throwing away other benefits of keeping a low number of sockets open (eg avoiding resetting TCP slow start for each block read).&lt;/p&gt;</comment>
                            <comment id="13226016" author="edevil" created="Fri, 9 Mar 2012 11:16:56 +0000"  >&lt;p&gt;Has streaming support been definitely abandoned? It would be very useful for Cassandra.&lt;/p&gt;</comment>
                            <comment id="14979222" author="zolyfarkas" created="Wed, 28 Oct 2015 21:05:15 +0000"  >&lt;p&gt;Its 2015 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Streaming functionality is implemented in GRPC which uses &lt;a href=&quot;http://www.grpc.io/docs/guides/wire.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.grpc.io/docs/guides/wire.html&lt;/a&gt; underneath.&lt;/p&gt;

&lt;p&gt;Grpc doc claims they can support any type of serialization... so maybe worth looking into integrating avro serialization into grpc?&lt;/p&gt;

&lt;p&gt;Grpc uses HTTP/2 underneath (uses netty in the java implementation) which allows for multiplexing multiple requests on the same tcp pipe...&lt;/p&gt;

&lt;p&gt;without streaming a rpc interface is not very useful... &lt;/p&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12458894">AVRO-459</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12462956">AVRO-528</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12455505">AVRO-405</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12445671">AVRO-341</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 5 Feb 2010 23:08:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94731</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 12 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e053:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79785</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-407] java data interop tests fail</title>
                <link>https://issues.apache.org/jira/browse/AVRO-407</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Java data file interop tests currently fail.&lt;/p&gt;

&lt;p&gt;If you run: cd lang/java; ant interop-data-generate interop-data-test&lt;/p&gt;

&lt;p&gt;Then the test log shows:&lt;/p&gt;

&lt;p&gt;java.io.IOException: Incomplete Block&lt;br/&gt;
org.apache.avro.AvroRuntimeException: java.io.IOException: Incomplete Block&lt;br/&gt;
	at org.apache.avro.file.DataFileStream.hasNext(DataFileStream.java:169)&lt;br/&gt;
	at org.apache.avro.TestDataFile.readFile(TestDataFile.java:193)&lt;br/&gt;
	at org.apache.avro.TestDataFile$InteropTest.readFiles(TestDataFile.java:238)&lt;br/&gt;
	at org.apache.avro.TestDataFile$InteropTest.testGeneratedGeneric(TestDataFile.java:216)&lt;br/&gt;
Caused by: java.io.IOException: Incomplete Block&lt;br/&gt;
	at org.apache.avro.file.DataFileStream.hasNext(DataFileStream.java:161)&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12455509">AVRO-407</key>
            <summary>java data interop tests fail</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.svg">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="scott_carey">Scott Carey</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Feb 2010 23:16:45 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:24 +0000</updated>
                            <resolved>Mon, 8 Feb 2010 23:38:20 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12830369" author="scott_carey" created="Fri, 5 Feb 2010 23:34:04 +0000"  >&lt;p&gt;FYI:  I am working on some enhancements to the  Java DataFileWriter and DataFileReader, and on my working copy these tests succeed.&lt;/p&gt;

&lt;p&gt;I plan on submitting the enhancements soon, which could clear this up as well.&lt;/p&gt;
</comment>
                            <comment id="12830372" author="cutting" created="Fri, 5 Feb 2010 23:42:59 +0000"  >&lt;p&gt;Do you know what the problem is?  It would be good to fix this independently ASAP, since it makes it harder for C and python folks to check interoperability when Java&apos;s interop tests fail.&lt;/p&gt;</comment>
                            <comment id="12830392" author="scott_carey" created="Sat, 6 Feb 2010 00:42:12 +0000"  >&lt;p&gt;I don&apos;t know what it is.&lt;/p&gt;

&lt;p&gt;I refactored DataFileStream to have a nextBlock() and hasNextBlock() method and during that resolved some unit test failures with similar stack traces to the above.  I&apos;ll check out from trunk separately and see if it looks familiar.&lt;/p&gt;</comment>
                            <comment id="12830413" author="scott_carey" created="Sat, 6 Feb 2010 01:43:26 +0000"  >&lt;p&gt;This patch fixes the issue.&lt;/p&gt;</comment>
                            <comment id="12830414" author="scott_carey" created="Sat, 6 Feb 2010 01:45:55 +0000"  >&lt;p&gt;The file was written fine, the reading of the file did not account for inputStream returning with a partial read.  We probably need to add a unit test that writes and reads a file with larger blocks, currently the tests all use small block sizes.&lt;/p&gt;</comment>
                            <comment id="12830442" author="philip" created="Sat, 6 Feb 2010 03:33:55 +0000"  >&lt;p&gt;Patch looks correct.  (I was a bit worried about this in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-380?focusedCommentId=12806025&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12806025&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-380?focusedCommentId=12806025&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12806025&lt;/a&gt;, but failed to write a unit test to convince myself.)&lt;/p&gt;

&lt;p&gt;Please do add a unit test that triggers this.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Philip&lt;/p&gt;
</comment>
                            <comment id="12831191" author="cutting" created="Mon, 8 Feb 2010 23:38:19 +0000"  >&lt;p&gt;I just committed this.  Thanks, Scott!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12435046" name="AVRO-407.patch" size="829" author="scott_carey" created="Sat, 6 Feb 2010 01:43:26 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 5 Feb 2010 23:34:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94732</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 50 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e05b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79786</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-408] lang/c/build.sh &apos;dist&apos; broken</title>
                <link>https://issues.apache.org/jira/browse/AVRO-408</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The lang/c/build.sh script fails on &apos;dist&apos;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12455514">AVRO-408</key>
            <summary>lang/c/build.sh &apos;dist&apos; broken</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="massie">Matt Massie</assignee>
                                    <reporter username="massie">Matt Massie</reporter>
                        <labels>
                    </labels>
                <created>Sat, 6 Feb 2010 01:05:55 +0000</created>
                <updated>Tue, 13 Dec 2011 19:10:04 +0000</updated>
                            <resolved>Sat, 6 Feb 2010 01:08:35 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>build</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12830397" author="massie" created="Sat, 6 Feb 2010 01:06:31 +0000"  >&lt;p&gt;Trivial patch&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Index: src/Makefile.am
===================================================================
--- src/Makefile.am	(revision 907144)
+++ src/Makefile.am	(working copy)
@@ -%ld,%ld +%ld,%ld @@
 libavro_la_SOURCES = st.c st.h schema.c schema.h schema_equal.c \
 datum.c datum_equal.c datum_validate.c datum_read.c datum_skip.c datum_write.c datum.h \
 io.c dump.c dump.h encoding_binary.c \
-container_of.h encoding.h datafile.c
+avro_private.h encoding.h datafile.c
 libavro_la_LIBADD = $(top_builddir)/jansson/src/.libs/libjansson.a
 libavro_la_LDFLAGS = \
         -version-info $(LIBAVRO_VERSION) \
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12830398" author="massie" created="Sat, 6 Feb 2010 01:08:35 +0000"  >&lt;p&gt;Committed to trunk&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94733</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 51 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e05j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79787</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-409] Update contact database example to use a file object container for C implementation</title>
                <link>https://issues.apache.org/jira/browse/AVRO-409</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Updating the demo to use the new file object container support in the C implementation&lt;/p&gt;</description>
                <environment></environment>
        <key id="12455521">AVRO-409</key>
            <summary>Update contact database example to use a file object container for C implementation</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="massie">Matt Massie</assignee>
                                    <reporter username="massie">Matt Massie</reporter>
                        <labels>
                    </labels>
                <created>Sat, 6 Feb 2010 03:34:20 +0000</created>
                <updated>Mon, 1 Mar 2010 17:09:24 +0000</updated>
                            <resolved>Sat, 6 Feb 2010 03:40:36 +0000</resolved>
                                                    <fixVersion>1.3.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12830446" author="massie" created="Sat, 6 Feb 2010 03:40:36 +0000"  >&lt;p&gt;Committed to trunk&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12435058" name="AVRO-409.patch" size="4260" author="massie" created="Sat, 6 Feb 2010 03:38:10 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94734</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 51 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e05r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79788</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
