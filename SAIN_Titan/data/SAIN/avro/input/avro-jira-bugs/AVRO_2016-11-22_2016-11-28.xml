<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:24:19 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2016-11-22+AND+created+%3C%3D+2016-11-28+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="2" total="2"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1961] [JAVA] Generate getters that return an Optional</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1961</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;A colleague of mine indicated that having getters that return an Optional (java 8 thingy) would be very useful for him.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13022470">AVRO-1961</key>
            <summary>[JAVA] Generate getters that return an Optional</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="nielsbasjes">Niels Basjes</assignee>
                                    <reporter username="nielsbasjes">Niels Basjes</reporter>
                        <labels>
                    </labels>
                <created>Tue, 22 Nov 2016 10:58:36 +0000</created>
                <updated>Tue, 20 Nov 2018 19:45:31 +0000</updated>
                            <resolved>Tue, 20 Nov 2018 19:45:31 +0000</resolved>
                                                    <fixVersion>1.9.0</fixVersion>
                                        <due></due>
                            <votes>3</votes>
                                    <watches>11</watches>
                                                                <comments>
                            <comment id="15688256" author="yibing" created="Tue, 22 Nov 2016 23:15:51 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nielsbasjes&quot; class=&quot;user-hover&quot; rel=&quot;nielsbasjes&quot;&gt;Niels Basjes&lt;/a&gt;, would you please provide more details of this request? Such as how the Optional type should be returned and what is the benefit of it.&lt;/p&gt;</comment>
                            <comment id="15689744" author="githubbot" created="Wed, 23 Nov 2016 10:54:25 +0000"  >&lt;p&gt;GitHub user nielsbasjes opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/162&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/162&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt;: Java: Generate getters that return a Java 8 Optional.&lt;/p&gt;

&lt;p&gt;    NOTE: This must wait until AFTER the release of Avro 1.8.2.&lt;/p&gt;

&lt;p&gt;    This is a first attempt at making the Java code generator have the option (default is off) to generate Java 8 Optional getters.&lt;/p&gt;

&lt;p&gt;    A few things about this that open and must be discussed before committing:&lt;/p&gt;

&lt;p&gt;    1. This will change the building of Avro to require JDK 8 to be installed. Building with JDK 7 will simply fail.&lt;br/&gt;
    2. The main runtime is still compiled with the setting &quot;JDK 6&quot;. So in theory that should remain backward compatible for systems that still rely in JDK 6.&lt;br/&gt;
    3. This is my first time playing with Optionals so a thorough review is really needed.&lt;/p&gt;

&lt;p&gt;    Also a big question is: Do we want this? &lt;br/&gt;
    I think it is a good idea to use the new Java features that make it easier for downstream developers.&lt;br/&gt;
    Yet the risk of breaking backward compatibility may be considered to be a problem.&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/nielsbasjes/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/nielsbasjes/avro&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/162.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/162.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #162&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit 2394bcf5f7abfd38239bdafd7f30666cc3bfc32a&lt;br/&gt;
Author: Niels Basjes &amp;lt;nbasjes@bol.com&amp;gt;&lt;br/&gt;
Date:   2016-11-22T16:23:18Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt;: Java: Generate getters that return a Java 8 Optional.&lt;/p&gt;

&lt;p&gt;commit 99b6adaa4407bdf02c893ab655ae514ccaf57f9b&lt;br/&gt;
Author: Niels Basjes &amp;lt;nbasjes@bol.com&amp;gt;&lt;br/&gt;
Date:   2016-11-23T10:27:37Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt;: Upgrade docker to jdk 8&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="15689789" author="nielsbasjes" created="Wed, 23 Nov 2016 11:12:58 +0000"  >&lt;p&gt;The idea is that the downstream application code becomes more readable when retrieving a field that is buried deep in a nested structure.&lt;br/&gt;
With Optionals you can rely on the fact that there will always be a value returned and this removes the need for having many &lt;tt&gt;if (foo != null)&lt;/tt&gt; type checks.&lt;br/&gt;
As you can see in the unit test I wrote you can do something like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;   assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;Chrome 123&quot;&lt;/span&gt;, Optional
      .of(request)
      .flatMap(Request::getOptionalHttpRequest)
      .flatMap(HttpRequest::getOptionalUserAgent)
      .flatMap(UserAgent::getOptionalUseragent)
      .orElse(&lt;span class=&quot;code-quote&quot;&gt;&quot;UNKNOWN&quot;&lt;/span&gt;));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="15691487" author="cluelessjoe" created="Wed, 23 Nov 2016 22:05:54 +0000"  >&lt;p&gt;Hi Niels and all&lt;/p&gt;

&lt;p&gt;Thanks a lot for this issue, I was about to create it.&lt;/p&gt;

&lt;p&gt;From what I&apos;ve seen in your code, you plan to let the current getter/setter and add a getOptionalFoo, not considering whether the field accepts null or not.&lt;/p&gt;

&lt;p&gt;Indeed, IMHO, the main goal of the optional is to make sure every developers knows a field can hold a null value (or not). In the current template, there&apos;s no easy way to figure this out, so one can easily forget to handle nullity. Which leads to plenty of NullPointerExcepteion.&lt;/p&gt;

&lt;p&gt;By letting the current getter (which return nulls), the risk is still highly present.&lt;/p&gt;

&lt;p&gt;When regenerating pojos with your optional, then the code would still compile whereas in many cases the developer may have forgotten the value can be null.&lt;/p&gt;

&lt;p&gt;When activating your createOptionalGetters, what about changing the getter to return Optional&amp;lt;Foo&amp;gt; instead of just Foo only when the field can have a null value? &lt;/p&gt;

&lt;p&gt;As such the IDE/type would make sure the developer handles the potential null values. NPE would be way less frequent.&lt;/p&gt;

&lt;p&gt;For the setter, I&apos;ve no opinion on the way to go. Currently we don&apos;t generate them. I guess changing the setter for potentially null values to setFoo(Optional&amp;lt;Foo&amp;gt; foo) would make sense again in terms of revealing the intent. Or maybe putting both, for convenience. Maybe the setter without an Optional could have its parameter name completed by &quot;OrNull&quot; to explicit the potential null value, for example setFoo(Foo fooOrNull).&lt;/p&gt;

&lt;p&gt;Whatever the choice made for the setter, we should then apply it as well to the builder.&lt;/p&gt;

&lt;p&gt;Eager to read you back&lt;/p&gt;

&lt;p&gt;Thanks again&lt;/p&gt;

&lt;p&gt;best&lt;br/&gt;
cluelessjoe&lt;/p&gt;</comment>
                            <comment id="15694408" author="nielsbasjes" created="Thu, 24 Nov 2016 23:28:34 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;First of all let me make clear my experience in using Optionals is very limited, so I have a lot to learn and welcome any advice in this matter.&lt;/p&gt;

&lt;p&gt;I create the &apos;Optional&apos; variant for everything because that is the easiest to implement. Finding out if a field is nullable in the code generator is something I need to look into if that is needed.&lt;/p&gt;

&lt;p&gt;The reason I left both the regular and the Optional versions remain side by side is because I expect that in existing applications it would be too hard to switch from one to the other overnight. Perhaps I&apos;m wrong in this, perhaps we should have a flag to do the switch completely as you suggested.&lt;/p&gt;

&lt;p&gt;I hadn&apos;t thought of the setters yet. For those I do think we must have both as the type system of Java will pick the right one depending on the type you call it with.&lt;/p&gt;
</comment>
                            <comment id="15694432" author="cluelessjoe" created="Thu, 24 Nov 2016 23:47:04 +0000"  >&lt;p&gt;Thanks a lot for your answer. And don&apos;t forget I&apos;m clueless, so it&apos;s all deeply open to discussion &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I&apos;ll do a PR on your repo tomorrow night regarding the null part, so at least this part will be solved.&lt;/p&gt;

&lt;p&gt;You&apos;re right to think of the transition We&apos;re using Avro at work and, to be honest, I was rather thinking of some breaking changes in our dev branches. A smoother transition would be great, but I don&apos;t see some currently. How would you  transition from the two getters (getFoo and getOptionalFoo) to the one Optional&amp;lt;Foo&amp;gt; getFoo() later on? &lt;/p&gt;

&lt;p&gt;For the setters, at least having both, with setFoo(Foo fooOrNull) and setFoo(Optional&amp;lt;Foo&amp;gt; foo), is doable code wise. Furthermore in the builder to have both seems handy. I would love to have more feedbacks on the matter actually, to know everyone&apos;s feeling.&lt;/p&gt;

&lt;p&gt;Best&lt;br/&gt;
cluelessjoe&lt;/p&gt;</comment>
                            <comment id="15695411" author="nielsbasjes" created="Fri, 25 Nov 2016 09:36:23 +0000"  >&lt;p&gt;Just now (as an experiment) I added the option to the code generator to replace the getters with a version that returns an Optional.&lt;br/&gt;
So there are two flags now that (should) allow any combination of the mentioned getters.&lt;/p&gt;</comment>
                            <comment id="15703263" author="cluelessjoe" created="Mon, 28 Nov 2016 21:57:57 +0000"  >&lt;p&gt;Hi Niels&lt;/p&gt;

&lt;p&gt;The changes I made are visible there &lt;a href=&quot;https://github.com/apache/avro/pull/165&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/165&lt;/a&gt;. They do the following: a getter for Foo foo returns Optionnal&amp;lt;Foo&amp;gt; when foo is nullable and gettersReturnOptionalOnNullableFields is set to true.&lt;/p&gt;

&lt;p&gt;Furthermore, I didn&apos;t find any way in the current tests to generate some pojos to make sure they fit what I expect. How should I do this ?&lt;/p&gt;

&lt;p&gt;What do you think of it ?&lt;/p&gt;

&lt;p&gt;Best regards&lt;br/&gt;
cluelessjoe&lt;/p&gt;</comment>
                            <comment id="15708244" author="gszadovszky" created="Wed, 30 Nov 2016 11:01:42 +0000"  >&lt;p&gt;Hi All,&lt;/p&gt;

&lt;p&gt;Thanks a lot for this issue. I really like using the new features of java8.&lt;/p&gt;

&lt;p&gt;I don&apos;t think it is that urgent to create setters for Optional. Optionals are more used for getting values and not for setting. However, having setters for both seems reasonable.&lt;/p&gt;

&lt;p&gt;I don&apos;t really like the two different flags for having separate getters for Optionals and returning Optionals by the original getters. I think, one flag for having Optionals returned by the original getters or keeping the actual behaviour is enough and less confusing. I don&apos;t think we really need both getters in the same time. This way, the default behaviour can also be switched easier in later major releases. &lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;</comment>
                            <comment id="15708587" author="tomwhite" created="Wed, 30 Nov 2016 13:20:27 +0000"  >&lt;p&gt;For compatibility reasons, I don&apos;t think getFoo() should ever return Optional&amp;lt;Foo&amp;gt;. Having getOptionalFoo() is much clearer and safer. Also, I noticed that the creator of Optional said &quot;I think routinely using it as a return value for getters would definitely be over-use&quot;, &lt;a href=&quot;http://stackoverflow.com/a/26328555&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://stackoverflow.com/a/26328555&lt;/a&gt;, so it&apos;s not necessarily true that everyone will want this feature. In other words, it may never become the default.&lt;/p&gt;

&lt;p&gt;Avro allows you to set the directory to load velocity templates from (by setting the org.apache.avro.specific.templates system property), so it should be possible to try this out with an existing Avro release. You would create a copy of the existing templates and change record.vm to have the getOptional*() methods.&lt;/p&gt;</comment>
                            <comment id="15712947" author="cluelessjoe" created="Thu, 1 Dec 2016 20:12:13 +0000"  >&lt;p&gt;Hi &lt;/p&gt;

&lt;p&gt;In the last few days I had the time to clarify why I was willing to go for optional: currently there&apos;s no easy way for an Avro pojo consumer to know whether a field is nullable or not.&lt;/p&gt;

&lt;p&gt;This leads to many nasty NPE when consuming messages. And in early stage of development, if a field becomes nullable, this is invisible to all the consumers, even if at the time they made sure to check nullability. The code goes on compiling... and then may break anytime.&lt;/p&gt;

&lt;p&gt;How could we avoid this?&lt;/p&gt;

&lt;p&gt;Optional&amp;lt;Foo&amp;gt; getFoo() for nullable fields and Foo getFoo() would non nullable fields would make sure everyone must handle nullabity when present, because nullabity would be expressed in a type safe way. No more looking around to check whether the field is nullable or not. And if a field becomes nullable (or non nullable), the consumer&apos;s code doesn&apos;t compile anymore.&lt;/p&gt;

&lt;p&gt;Regarding setter/builder/constructor: considering the initial goal, ie making obvious if a field is nullable or not, and what was achieved with getter through typesafety, I would like the same level of warranty. Which means having setter/builder/constructor with Optional&amp;lt;Foo&amp;gt; for nullable fields.&lt;/p&gt;

&lt;p&gt;Once again, nullability would be ensured in a typesafe way. If it changes in the schema, then the code using the generated pojo doesn&apos;t compile anymore.&lt;/p&gt;

&lt;p&gt;And we would gain extra readability: now a setter/builder/constructor would tell explicitly whether a field is required or not.&lt;/p&gt;

&lt;p&gt;Actually, on the setter/builder/constructor, we could even go a step further: a required field with a default value could be with Optional&amp;lt;Foo&amp;gt; as well. The matching getter would be without Optional. It would make the concept of default value type safe just as well. Sweet isn&apos;t it? &lt;/p&gt;

&lt;p&gt;And, in setter for a non nullable value, we could add some null check to make sure nulls don&apos;t make it through.&lt;/p&gt;

&lt;p&gt;In the end, the name of the settings on the specific compiler, currently gettersReturnOptionalOnNullableFields, isn&apos;t appropriate anymore. It should be something like &quot;pojoWithOptional&quot; (suggestions welcome!).&lt;/p&gt;

&lt;p&gt;Do we agree ?&lt;/p&gt;

&lt;p&gt;Technically speaking:&lt;/p&gt;

&lt;p&gt;1. Java 8 isn&apos;t required for Avro project for this to work&lt;/p&gt;

&lt;p&gt;All the &quot;magic&quot; happen uniquely through the template: the code could still compile with Java 6, but anyone using the &quot;pojoWithOptional&quot; flag should consume the generated pojo with Java 8 or backport Optional.&lt;/p&gt;

&lt;p&gt;2. Only 2 news methods required in the Schema class&lt;/p&gt;

&lt;p&gt;There is a need for isNullable and hasDefault methods on the Schema class, to use in the template. In case this &quot;pojoWithOptional&quot; proposal isn&apos;t accepted, could these 2 methods still be added?&lt;/p&gt;

&lt;p&gt;3. Not test for generated pojo in Avro&apos;s project code base AFAIK&lt;/p&gt;

&lt;p&gt;I haven&apos;t seen any test of the generation outcome. If I&apos;m wrong, please tell me.&lt;/p&gt;

&lt;p&gt;If not, then I would add something along these lines:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;defaultPojoGenerationSafetyNetTest: generating a pojo with default settings from a moderatly complex schema and then inspecting the generated .java class to make sure of its content. I would use this a &quot;safety net&quot; for the changes made.&lt;/li&gt;
	&lt;li&gt;pojoWithOptionalGenerationTest: generating a pojo with &quot;pojoWithOptional&quot; from the same schema as above and then inspecting it to make sure the above rules are respected.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;4. No arg constructor limit&lt;/p&gt;

&lt;p&gt;No arg constructors are needed for Avro&apos;s generated builders. Yet they may break the wanted type safety: an instance created with the no arg constructor may have non nullable fields being nulls. To limit this issue, I&apos;m thinking of adding a warning in the javadoc when pojoWithOptional is set. Something along the lines: used internally by Avro, do not use.&lt;/p&gt;

&lt;p&gt;5. Current pull request change imports&lt;/p&gt;

&lt;p&gt;My current pull request, &lt;a href=&quot;https://github.com/apache/avro/pull/165&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/165&lt;/a&gt;, changes the imports order. This is bad, I&apos;ll fix it.&lt;/p&gt;

&lt;p&gt;Misc:&lt;/p&gt;

&lt;p&gt;@Gabor Szadovszky:&lt;br/&gt;
Actually, for the setters/builders, having both setFoo(Foo foo) and setFoo(Optional&amp;lt;Foo&amp;gt; foo) would be cumbersome when passing null, which then would have to be cast explicitly.&lt;/p&gt;

&lt;p&gt;Regarding the getter, I agree with you &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;@Tom White&lt;br/&gt;
Having Optional&amp;lt;Foo&amp;gt; getFoo() instead of Foo getFoo() is made through a dedicated setting. It won&apos;t break backward compatibility unless you set the parameter to true.&lt;/p&gt;

&lt;p&gt;About this quote &quot;I think routinely using it as a return value for getters would definitely be over-used&quot;, it all depends of the context and the intent. For me the goal is to get rid of NullPointerException because the message&apos;s consumer didn&apos;t know/care which fields are nullable. These NPEs are really annoying and currently require extensive unit testing to (try to) prevent. Having type safety there would make nullability obvious.&lt;/p&gt;

&lt;p&gt;@Niels Basjes &lt;br/&gt;
In your comment of the 23/Nov/16 11:12, you said :&lt;br/&gt;
&quot;The idea is that the downstream application code becomes more readable when retrieving a field that is buried deep in a nested structure.&lt;br/&gt;
With Optionals you can rely on the fact that there will always be a value returned and this removes the need for having many if (foo != null) type checks.&quot;&lt;/p&gt;

&lt;p&gt;With the above proposal, you would be sure a getFoo would always return a value, so chaining call would also be straigthforward.&lt;/p&gt;

&lt;p&gt;Any comment welcome, all this pretty long text is just a suggestion &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;cheers&lt;/p&gt;</comment>
                            <comment id="15713643" author="yibing" created="Fri, 2 Dec 2016 01:23:22 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Actually, on the setter/builder/constructor, we could even go a step further: a required field with a default value could be with Optional&amp;lt;Foo&amp;gt; as well. The matching getter would be without Optional. It would make the concept of default value type safe just as well. Sweet isn&apos;t it?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;And Optional object indicates that the value could be null. It has a different meaning than having a default value. That is, you can skip passing in a value for this field doesn&apos;t mean you can pass in a null value for this field. Suggest not to apply this to fields with default values.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1. Java 8 isn&apos;t required for Avro project for this to work&lt;br/&gt;
All the &quot;magic&quot; happen uniquely through the template: the code could still compile with Java 6, but anyone using the &quot;pojoWithOptional&quot; flag should consume the generated pojo with Java 8 or backport Optional.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Is Java 8 is needed to test the pojoWithOptionalGenerationTest you are going to add?&lt;/p&gt;</comment>
                            <comment id="15714837" author="nielsbasjes" created="Fri, 2 Dec 2016 11:14:26 +0000"  >&lt;p&gt;Yes, Java 8 is needed to run the unit tests for this.&lt;br/&gt;
As you can see in my proposal I build de runtime code against Java 6 and build and run the tests against Java 8.&lt;/p&gt;</comment>
                            <comment id="15729960" author="cluelessjoe" created="Wed, 7 Dec 2016 21:26:06 +0000"  >&lt;p&gt;Hi&lt;/p&gt;

&lt;p&gt;For your information, I&apos;m working on a PR based on branch 1.8 and java 6. I&apos;ll first submit one with isUnion and isNullable (or isOptional, since I&apos;m not sure of the name).&lt;br/&gt;
It&apos;s taking a bit longer that I would hope for various reasons, I hope you don&apos;t mind it, if so let me know.&lt;/p&gt;

&lt;p&gt;@&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Yibing&quot; class=&quot;user-hover&quot; rel=&quot;Yibing&quot;&gt;Yibing Shi&lt;/a&gt; indeed the specs about default value says :&lt;br/&gt;
default: A default value for this field, used when reading instances that lack this field (optional). Permitted values depend on the field&apos;s schema type, according to the table below. Default values for union fields correspond to the first schema in the union. &lt;/p&gt;

&lt;p&gt;I&apos;m thinking of testing the content of the generated file directly (generating the .java, accessing it through a File, then parsing it for expected content), so no need for Java 8.&lt;/p&gt;

&lt;p&gt;@&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nielsbasjes&quot; class=&quot;user-hover&quot; rel=&quot;nielsbasjes&quot;&gt;Niels Basjes&lt;/a&gt; in the code I&apos;m writing I don&apos;t include anything needing Java 8 (so it could make it in the 1.8 branch I hope).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15730159" author="githubbot" created="Wed, 7 Dec 2016 22:38:37 +0000"  >&lt;p&gt;GitHub user cluelessjoe opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/169&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/169&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Branch 1.8 - &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt; : add isUnion and isNullable on Schema class&lt;/p&gt;

&lt;p&gt;    isUnion is needed since the class UnionSchema is private hence not accessible from outside code&lt;br/&gt;
    isNullable is needed for doing nullable schema&apos;s specific actions in templates&lt;/p&gt;

&lt;p&gt;    both methods add value whatever the outcome of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/cluelessjoe/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/cluelessjoe/avro&lt;/a&gt; branch-1.8&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/169.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/169.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #169&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit f912a42ecc7dc2ac305212c23af08b99ab355afc&lt;br/&gt;
Author: Joseph Pachod &amp;lt;joseph.pachod@berger-levrault.fr&amp;gt;&lt;br/&gt;
Date:   2016-12-07T21:53:13Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt;: Java: add isUnion and isNullable on Schema class&lt;/p&gt;

&lt;p&gt;commit 185291033a915e8221f6e2e6f55809256d68082b&lt;br/&gt;
Author: Joseph Pachod &amp;lt;joseph.pachod@berger-levrault.fr&amp;gt;&lt;br/&gt;
Date:   2016-12-07T22:14:03Z&lt;/p&gt;

&lt;p&gt;    format and clarify pre existing tests&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="15730167" author="cluelessjoe" created="Wed, 7 Dec 2016 22:40:35 +0000"  >&lt;p&gt;PR &lt;a href=&quot;https://github.com/apache/avro/pull/169&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/169&lt;/a&gt; created for isUnion and isNullable. If fine for merge, then I would go on with the above plan.&lt;/p&gt;</comment>
                            <comment id="15736150" author="cutting" created="Fri, 9 Dec 2016 19:49:17 +0000"  >&lt;p&gt;The new public Schema methods need Javadoc comments, no?&lt;/p&gt;</comment>
                            <comment id="15740412" author="cluelessjoe" created="Sun, 11 Dec 2016 21:51:10 +0000"  >&lt;p&gt;Javadoc just pushed.&lt;/p&gt;</comment>
                            <comment id="15743483" author="cluelessjoe" created="Mon, 12 Dec 2016 23:19:21 +0000"  >&lt;p&gt;Hi&lt;/p&gt;

&lt;p&gt;I feel like I&apos;ve done the &quot;pojoWithOptional&quot; code on my local repo: shall I push this to my github account and so update the above PR?&lt;/p&gt;

&lt;p&gt;Let me know &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15746107" author="cluelessjoe" created="Tue, 13 Dec 2016 19:58:17 +0000"  >&lt;p&gt;Finally I&apos;ve pushed it all.&lt;/p&gt;

&lt;p&gt;The option is named pojoWithOptional, adding Optional&amp;lt;Foo&amp;gt; only for nullable fields, be it in the pojo getter/setter or in the builder. It doesn&apos;t require Java 8 to generate such pojos, but for using them Java 8 is welcome or some backport of Optional.&lt;/p&gt;

&lt;p&gt;And some test of the generated content were already present, so I kept the way these tests work  and added some for my changes.&lt;/p&gt;</comment>
                            <comment id="15794729" author="cluelessjoe" created="Tue, 3 Jan 2017 10:33:59 +0000"  >&lt;p&gt;Hi&lt;/p&gt;

&lt;p&gt;In the end, any idea if the changes in &lt;a href=&quot;https://github.com/apache/avro/pull/169&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/169&lt;/a&gt; will be merged, and if so in which version?&lt;/p&gt;

&lt;p&gt;Happy new year and all &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;best&lt;/p&gt;</comment>
                            <comment id="15847288" author="jeff.maxwell" created="Tue, 31 Jan 2017 18:49:36 +0000"  >&lt;p&gt;For supported primitives (int, double, long) it may be preferential to return their respective specialized versions (&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/OptionalInt.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;OptionalInt&lt;/a&gt;,  &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/OptionalDouble.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;OptionalDouble&lt;/a&gt;,  &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/OptionalLong.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;OptionalLong&lt;/a&gt;).&lt;/p&gt;
</comment>
                            <comment id="16678196" author="githubbot" created="Wed, 7 Nov 2018 12:59:03 +0000"  >&lt;p&gt;Fokko commented on issue #162: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt;: Java: Generate getters that return a Java 8 Optional.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/162#issuecomment-436614690&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/162#issuecomment-436614690&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   @nielsbasjes Are you still interested in merging this into Avro 1.9? Can you rebase onto master?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16693667" author="jira-bot" created="Tue, 20 Nov 2018 19:05:55 +0000"  >&lt;p&gt;Commit 04d4423d4ee4f86e308fa761c6918223b55a6c5c in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dkulp&quot; class=&quot;user-hover&quot; rel=&quot;dkulp&quot;&gt;Daniel Kulp&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=04d4423&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=04d4423&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Squashed commit of the following:&lt;/p&gt;

&lt;p&gt;commit 6a919437bff0977926b33cd56165994b22fbdf74&lt;br/&gt;
Author: Niels Basjes &amp;lt;nbasjes@bol.com&amp;gt;&lt;br/&gt;
Date:   Fri Nov 25 10:31:40 2016 +0100&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt;: Extra flag to replace the regular getters with getters that return an Optional&lt;/p&gt;

&lt;p&gt;commit 91d58b5dba7562240a84f6885037f9c74dc973e6&lt;br/&gt;
Author: Niels Basjes &amp;lt;nbasjes@bol.com&amp;gt;&lt;br/&gt;
Date:   Tue Nov 22 17:23:18 2016 +0100&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt;: Java: Generate getters that return a Java 8 Optional.&lt;/p&gt;

&lt;p&gt;Closes #162&lt;/p&gt;</comment>
                            <comment id="16693668" author="jira-bot" created="Tue, 20 Nov 2018 19:05:56 +0000"  >&lt;p&gt;Commit 04d4423d4ee4f86e308fa761c6918223b55a6c5c in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dkulp&quot; class=&quot;user-hover&quot; rel=&quot;dkulp&quot;&gt;Daniel Kulp&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=04d4423&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=04d4423&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Squashed commit of the following:&lt;/p&gt;

&lt;p&gt;commit 6a919437bff0977926b33cd56165994b22fbdf74&lt;br/&gt;
Author: Niels Basjes &amp;lt;nbasjes@bol.com&amp;gt;&lt;br/&gt;
Date:   Fri Nov 25 10:31:40 2016 +0100&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt;: Extra flag to replace the regular getters with getters that return an Optional&lt;/p&gt;

&lt;p&gt;commit 91d58b5dba7562240a84f6885037f9c74dc973e6&lt;br/&gt;
Author: Niels Basjes &amp;lt;nbasjes@bol.com&amp;gt;&lt;br/&gt;
Date:   Tue Nov 22 17:23:18 2016 +0100&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt;: Java: Generate getters that return a Java 8 Optional.&lt;/p&gt;

&lt;p&gt;Closes #162&lt;/p&gt;</comment>
                            <comment id="16693669" author="githubbot" created="Tue, 20 Nov 2018 19:06:07 +0000"  >&lt;p&gt;dkulp closed pull request #162: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt;: Java: Generate getters that return a Java 8 Optional.&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/162&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/162&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/CHANGES.txt b/CHANGES.txt&lt;br/&gt;
index 3553e2a93..e145d1cc1 100644&lt;br/&gt;
&amp;#8212; a/CHANGES.txt&lt;br/&gt;
+++ b/CHANGES.txt&lt;br/&gt;
@@ -16,6 +16,8 @@ Trunk (not yet released)&lt;br/&gt;
     &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1932&quot; title=&quot;Allow setting the SchemaStore on generated classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1932&quot;&gt;&lt;del&gt;AVRO-1932&lt;/del&gt;&lt;/a&gt;: Java: Allow setting the SchemaStore on generated classes. &lt;br/&gt;
     (Niels Basjes)&lt;/p&gt;

&lt;p&gt;+    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt;: Java: Generate getters that return a Java 8 Optional. (Niels Basjes)&lt;br/&gt;
+&lt;br/&gt;
   OPTIMIZATIONS&lt;/p&gt;

&lt;p&gt;   IMPROVEMENTS&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
index 295949313..36e51c9fc 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
+++ b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
@@ -105,6 +105,8 @@&lt;br/&gt;
   private VelocityEngine velocityEngine;&lt;br/&gt;
   private String templateDir;&lt;br/&gt;
   private FieldVisibility fieldVisibility = FieldVisibility.PUBLIC_DEPRECATED;&lt;br/&gt;
+  private boolean createOptionalGetters = false;&lt;br/&gt;
+  private boolean gettersReturnOptional = false;&lt;br/&gt;
   private boolean createSetters = true;&lt;br/&gt;
   private boolean createAllArgsConstructor = true;&lt;br/&gt;
   private String outputCharacterEncoding;&lt;br/&gt;
@@ -217,6 +219,28 @@ public void setCreateSetters(boolean createSetters) &lt;/p&gt;
{
     this.createSetters = createSetters;
   }

&lt;p&gt;+  public boolean isCreateOptionalGetters() &lt;/p&gt;
{
+    return this.createOptionalGetters;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Set to false to not create the getters that return an Optional.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setCreateOptionalGetters(boolean createOptionalGetters) &lt;/p&gt;
{
+    this.createOptionalGetters = createOptionalGetters;
+  }
&lt;p&gt;+&lt;br/&gt;
+  public boolean isGettersReturnOptional() &lt;/p&gt;
{
+    return this.gettersReturnOptional;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Set to false to not create the getters that return an Optional.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setGettersReturnOptional(boolean gettersReturnOptional) &lt;/p&gt;
{
+    this.gettersReturnOptional = gettersReturnOptional;
+  }
&lt;p&gt;+&lt;br/&gt;
   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Set to true to use 
{@link java.math.BigDecimal}
&lt;p&gt; instead of&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;{@link java.nio.ByteBuffer}
&lt;p&gt; for logical type &quot;decimal&quot;&lt;br/&gt;
@@ -778,6 +802,16 @@ public static String generateGetMethod(Schema schema, Field field) &lt;/p&gt;
{
     return generateMethodName(schema, field, &quot;get&quot;, &quot;&quot;);
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  /**&lt;br/&gt;
+   * Generates the name of a field accessor method that returns a Java 8 Optional.&lt;br/&gt;
+   * @param schema the schema in which the field is defined.&lt;br/&gt;
+   * @param field the field for which to generate the accessor name.&lt;br/&gt;
+   * @return the name of the accessor method for the given field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public static String generateGetOptionalMethod(Schema schema, Field field) &lt;/p&gt;
{
+    return generateMethodName(schema, field, &quot;getOptional&quot;, &quot;&quot;);
+  }
&lt;p&gt;+&lt;br/&gt;
   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Generates the name of a field mutator method.&lt;/li&gt;
	&lt;li&gt;@param schema the schema in which the field is defined.&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
index 85c5e9d2f..04666e42a 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
+++ b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
@@ -25,6 +25,7 @@ import org.apache.avro.message.BinaryMessageEncoder;&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageDecoder;&lt;br/&gt;
 import org.apache.avro.message.SchemaStore;&lt;br/&gt;
 #end&lt;br/&gt;
+#if (${this.gettersReturnOptional} || ${this.createOptionalGetters})import java.util.Optional;#end&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; @SuppressWarnings(&quot;all&quot;)&lt;br/&gt;
 #if ($schema.getDoc())&lt;br/&gt;
@@ -184,6 +185,17 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt; #foreach ($field in $schema.getFields())&lt;br/&gt;
+#if (${this.gettersReturnOptional})&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;${this.mangle($field.name(), $schema.isError())}&apos; field as an Optional&amp;lt;${this.javaType($field.schema())}&amp;gt;.&lt;br/&gt;
+#if ($field.doc())      * $field.doc()&lt;br/&gt;
+#end&lt;br/&gt;
+   * @return The value wrapped in an Optional&amp;lt;${this.javaType($field.schema())}&amp;gt;.&lt;br/&gt;
+   */&lt;br/&gt;
+  public Optional&amp;lt;${this.javaType($field.schema())}&amp;gt; ${this.generateGetMethod($schema, $field)}() {&lt;br/&gt;
+    return Optional.&amp;lt;${this.javaType($field.schema())}&amp;gt;ofNullable(${this.mangle($field.name(), $schema.isError())});&lt;br/&gt;
+  }&lt;br/&gt;
+#else&lt;br/&gt;
   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Gets the value of the &apos;${this.mangle($field.name(), $schema.isError())}&apos; field.&lt;br/&gt;
 #if ($field.doc())   * @return $field.doc()&lt;br/&gt;
@@ -193,6 +205,19 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
   public ${this.javaType($field.schema())} ${this.generateGetMethod($schema, $field)}() {&lt;br/&gt;
     return ${this.mangle($field.name(), $schema.isError())};&lt;br/&gt;
   }&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
+#if (${this.createOptionalGetters})&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the &apos;${this.mangle($field.name(), $schema.isError())}&apos; field as an Optional&amp;lt;${this.javaType($field.schema())}&amp;gt;.&lt;br/&gt;
+#if ($field.doc())      * $field.doc()&lt;br/&gt;
+#end&lt;br/&gt;
+   * @return The value wrapped in an Optional&amp;lt;${this.javaType($field.schema())}&amp;gt;.&lt;br/&gt;
+   */&lt;br/&gt;
+  public Optional&amp;lt;${this.javaType($field.schema())}&amp;gt; ${this.generateGetOptionalMethod($schema, $field)}() {&lt;br/&gt;
+    return Optional.&amp;lt;${this.javaType($field.schema())}&amp;gt;ofNullable(${this.mangle($field.name(), $schema.isError())});&lt;br/&gt;
+  }&lt;br/&gt;
+#end&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; #if ($this.createSetters)&lt;br/&gt;
   /**&lt;br/&gt;
@@ -329,6 +354,18 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
       return ${this.mangle($field.name(), $schema.isError())};&lt;br/&gt;
     }&lt;/p&gt;

&lt;p&gt;+#if (${this.createOptionalGetters})&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the &apos;${this.mangle($field.name(), $schema.isError())}&apos; field as an Optional&amp;lt;${this.javaType($field.schema())}&amp;gt;.&lt;br/&gt;
+#if ($field.doc())      * $field.doc()&lt;br/&gt;
+#end&lt;br/&gt;
+      * @return The Optional&amp;lt;value&amp;gt;.&lt;br/&gt;
+      */&lt;br/&gt;
+    public Optional&amp;lt;${this.javaType($field.schema())}&amp;gt; ${this.generateGetOptionalMethod($schema, $field)}() {&lt;br/&gt;
+      return Optional.&amp;lt;${this.javaType($field.schema())}&amp;gt;ofNullable(${this.mangle($field.name(), $schema.isError())});&lt;br/&gt;
+    }&lt;br/&gt;
+#end&lt;br/&gt;
+&lt;br/&gt;
     /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Sets the value of the &apos;${this.mangle($field.name(), $schema.isError())}&apos; field.&lt;br/&gt;
 #if ($field.doc())      * $field.doc()&lt;br/&gt;
diff --git a/lang/java/ipc/pom.xml b/lang/java/ipc/pom.xml&lt;br/&gt;
index 186967fc9..38d6b7087 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/ipc/pom.xml&lt;br/&gt;
+++ b/lang/java/ipc/pom.xml&lt;br/&gt;
@@ -73,6 +73,8 @@&lt;br/&gt;
                 &amp;lt;exclude&amp;gt;org/apache/avro/data/Json.avsc&amp;lt;/exclude&amp;gt;&lt;br/&gt;
               &amp;lt;/excludes&amp;gt;&lt;br/&gt;
               &amp;lt;stringType&amp;gt;String&amp;lt;/stringType&amp;gt;&lt;br/&gt;
+              &amp;lt;createOptionalGetters&amp;gt;true&amp;lt;/createOptionalGetters&amp;gt;&lt;br/&gt;
+              &amp;lt;!-&lt;del&gt;&amp;lt;gettersReturnOptional&amp;gt;true&amp;lt;/gettersReturnOptional&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
               &amp;lt;sourceDirectory&amp;gt;${parent.project.basedir}/../../../../share/schemas/&amp;lt;/sourceDirectory&amp;gt;&lt;br/&gt;
               &amp;lt;outputDirectory&amp;gt;${project.build.directory}/generated-sources/java&amp;lt;/outputDirectory&amp;gt;&lt;br/&gt;
               &amp;lt;testSourceDirectory&amp;gt;${parent.project.basedir}/../../../../share/test/schemas/&amp;lt;/testSourceDirectory&amp;gt;&lt;br/&gt;
@@ -81,6 +83,17 @@&lt;br/&gt;
           &amp;lt;/execution&amp;gt;&lt;br/&gt;
         &amp;lt;/executions&amp;gt;&lt;br/&gt;
       &amp;lt;/plugin&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+      &amp;lt;plugin&amp;gt;&lt;br/&gt;
+        &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br/&gt;
+        &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
+        &amp;lt;configuration&amp;gt;&lt;br/&gt;
+          &amp;lt;source&amp;gt;${jdkVersion}&amp;lt;/source&amp;gt;&lt;br/&gt;
+          &amp;lt;target&amp;gt;${jdkVersion}&amp;lt;/target&amp;gt;&lt;br/&gt;
+          &amp;lt;testSource&amp;gt;${jdk8Version}&amp;lt;/testSource&amp;gt;&lt;br/&gt;
+          &amp;lt;testTarget&amp;gt;${jdk8Version}&amp;lt;/testTarget&amp;gt;&lt;br/&gt;
+        &amp;lt;/configuration&amp;gt;&lt;br/&gt;
+      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
       &amp;lt;plugin&amp;gt;&lt;br/&gt;
         &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br/&gt;
         &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
diff --git a/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java b/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java&lt;br/&gt;
index a0ad619e3..10cda9a39 100644&lt;/li&gt;
			&lt;li&gt;a/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java&lt;br/&gt;
+++ b/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificBuilderTree.java&lt;br/&gt;
@@ -21,8 +21,11 @@&lt;br/&gt;
 import org.junit.Test;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; import java.util.ArrayList;&lt;br/&gt;
+import java.util.Optional;&lt;br/&gt;
+import java.util.function.Consumer;&lt;/p&gt;

&lt;p&gt; import static org.junit.Assert.assertEquals;&lt;br/&gt;
+import static org.junit.Assert.assertFalse;&lt;br/&gt;
 import static org.junit.Assert.fail;&lt;/p&gt;

&lt;p&gt; public class TestSpecificBuilderTree {&lt;br/&gt;
@@ -254,4 +257,53 @@ public void lastOneWins_Builder() &lt;/p&gt;
{
     assertEquals(&quot;/index.html&quot;,     request.getHttpRequest().getURI().getPath());
   }

&lt;p&gt;+  @Test&lt;br/&gt;
+  public void validateBrowsingOptionals() &lt;/p&gt;
{
+    Request.Builder requestBuilder = Request.newBuilder();
+    requestBuilder.setTimestamp(1234567890);
+
+    requestBuilder
+      .getHttpRequestBuilder()
+        .getUserAgentBuilder()
+          .setUseragent(&quot;Chrome 123&quot;);
+
+    requestBuilder
+      .getHttpRequestBuilder()
+        .getURIBuilder()
+          .setMethod(HttpMethod.GET)
+          .setPath(&quot;/index.html&quot;);
+
+    Request request = requestBuilder.build();
+
+    assertEquals(&quot;Chrome 123&quot;, Optional
+      .of(request)
+      .flatMap(Request::getOptionalHttpRequest)
+      .flatMap(HttpRequest::getOptionalUserAgent)
+      .flatMap(UserAgent::getOptionalUseragent)
+      .orElse(&quot;UNKNOWN&quot;));
+
+    assertFalse(Optional
+      .of(request)
+      .flatMap(Request::getOptionalHttpRequest)
+      .flatMap(HttpRequest::getOptionalUserAgent)
+      .flatMap(UserAgent::getOptionalId)
+      .isPresent());
+
+    assertEquals(HttpMethod.GET, Optional
+      .of(request)
+      .flatMap(Request::getOptionalHttpRequest)
+      .flatMap(HttpRequest::getOptionalURI)
+      .flatMap(HttpURI::getOptionalMethod)
+      .orElse(null));
+
+    assertEquals(&quot;/index.html&quot;, Optional
+      .of(request)
+      .flatMap(Request::getOptionalHttpRequest)
+      .flatMap(HttpRequest::getOptionalURI)
+      .flatMap(HttpURI::getOptionalPath)
+      .orElse(null));
+
+  }
&lt;p&gt;+&lt;br/&gt;
+&lt;br/&gt;
 }&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java&lt;br/&gt;
index 9d78ede91..e192f4cda 100644&lt;br/&gt;
&amp;#8212; a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java&lt;br/&gt;
@@ -114,6 +114,25 @@&lt;br/&gt;
    */&lt;br/&gt;
   protected String templateDirectory = &quot;/org/apache/avro/compiler/specific/templates/java/classic/&quot;;&lt;/p&gt;

&lt;p&gt;+  /**&lt;br/&gt;
+   * The createOptionalGetters parameter enables generating the getOptional...&lt;br/&gt;
+   * methods that return an Optional of the requested type.&lt;br/&gt;
+   * This works ONLY on Java 8+&lt;br/&gt;
+   *&lt;br/&gt;
+   * @parameter property=&quot;createOptionalGetters&quot;&lt;br/&gt;
+   */&lt;br/&gt;
+  protected boolean createOptionalGetters = false;&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * The gettersReturnOptional parameter enables generating get...&lt;br/&gt;
+   * methods that return an Optional of the requested type.&lt;br/&gt;
+   * This will replace the&lt;br/&gt;
+   * This works ONLY on Java 8+&lt;br/&gt;
+   *&lt;br/&gt;
+   * @parameter property=&quot;gettersReturnOptional&quot;&lt;br/&gt;
+   */&lt;br/&gt;
+  protected boolean gettersReturnOptional = false;&lt;br/&gt;
+&lt;br/&gt;
   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Determines whether or not to create setters for the fields of the record.&lt;/li&gt;
	&lt;li&gt;The default is to create setters.&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java&lt;br/&gt;
index 3f61ac2a2..b1ed7fbfc 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java&lt;br/&gt;
@@ -92,6 +92,8 @@ protected void doCompile(String filename, File sourceDirectory, File outputDirec&lt;br/&gt;
       compiler.setStringType(GenericData.StringType.valueOf(stringType));&lt;br/&gt;
       compiler.setTemplateDir(templateDirectory);&lt;br/&gt;
       compiler.setFieldVisibility(getFieldVisibility());&lt;br/&gt;
+      compiler.setCreateOptionalGetters(createOptionalGetters);&lt;br/&gt;
+      compiler.setGettersReturnOptional(gettersReturnOptional);&lt;br/&gt;
       compiler.setCreateSetters(createSetters);&lt;br/&gt;
       compiler.setEnableDecimalLogicalType(enableDecimalLogicalType);&lt;br/&gt;
       compiler.compileToDestination(null, outputDirectory);&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java&lt;br/&gt;
index a30a08245..c2a2a4927 100644&lt;/li&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java&lt;br/&gt;
@@ -60,6 +60,8 @@ protected void doCompile(String filename, File sourceDirectory, File outputDirec&lt;br/&gt;
     compiler.setTemplateDir(templateDirectory);&lt;br/&gt;
     compiler.setStringType(StringType.valueOf(stringType));&lt;br/&gt;
     compiler.setFieldVisibility(getFieldVisibility());&lt;br/&gt;
+    compiler.setCreateOptionalGetters(createOptionalGetters);&lt;br/&gt;
+    compiler.setGettersReturnOptional(gettersReturnOptional);&lt;br/&gt;
     compiler.setCreateSetters(createSetters);&lt;br/&gt;
     compiler.setEnableDecimalLogicalType(enableDecimalLogicalType);&lt;br/&gt;
     compiler.compileToDestination(src, outputDirectory);&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java&lt;br/&gt;
index 9a849207f..b6d58daae 100644&lt;/li&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java&lt;br/&gt;
@@ -65,7 +65,7 @@ protected void doCompile(String filename, File sourceDirectory, File outputDirec&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     // This is necessary to maintain backward-compatibility. If there are&lt;br/&gt;
     // no imported files then isolate the schemas from each other, otherwise&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;// allow them to share a single schema so resuse and sharing of schema&lt;br/&gt;
+    // allow them to share a single schema so reuse and sharing of schema&lt;br/&gt;
     // is possible.&lt;br/&gt;
     if (imports == null) {&lt;br/&gt;
       schema = new Schema.Parser().parse(src);&lt;br/&gt;
@@ -77,6 +77,8 @@ protected void doCompile(String filename, File sourceDirectory, File outputDirec&lt;br/&gt;
     compiler.setTemplateDir(templateDirectory);&lt;br/&gt;
     compiler.setStringType(StringType.valueOf(stringType));&lt;br/&gt;
     compiler.setFieldVisibility(getFieldVisibility());&lt;br/&gt;
+    compiler.setCreateOptionalGetters(createOptionalGetters);&lt;br/&gt;
+    compiler.setGettersReturnOptional(gettersReturnOptional);&lt;br/&gt;
     compiler.setCreateSetters(createSetters);&lt;br/&gt;
     compiler.setEnableDecimalLogicalType(enableDecimalLogicalType);&lt;br/&gt;
     compiler.setOutputCharacterEncoding(project.getProperties().getProperty(&quot;project.build.sourceEncoding&quot;));&lt;br/&gt;
diff --git a/lang/java/pom.xml b/lang/java/pom.xml&lt;br/&gt;
index 8afcefd5d..789b8d74e 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/pom.xml&lt;br/&gt;
+++ b/lang/java/pom.xml&lt;br/&gt;
@@ -35,6 +35,8 @@&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   &amp;lt;properties&amp;gt;&lt;br/&gt;
     &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;br/&gt;
+    &amp;lt;jdkVersion&amp;gt;1.6&amp;lt;/jdkVersion&amp;gt;&lt;br/&gt;
+    &amp;lt;jdk8Version&amp;gt;1.8&amp;lt;/jdk8Version&amp;gt; &amp;lt;!-- Some tests need java 8 or newer --&amp;gt;&lt;/p&gt;

&lt;p&gt;     &amp;lt;!-- version properties for dependencies --&amp;gt;&lt;/p&gt;

&lt;p&gt;@@ -75,7 +77,7 @@&lt;/p&gt;

&lt;p&gt;     &amp;lt;!-- version properties for plugins --&amp;gt;&lt;br/&gt;
     &amp;lt;bundle-plugin-version&amp;gt;2.5.3&amp;lt;/bundle-plugin-version&amp;gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&amp;lt;compiler-plugin.version&amp;gt;3.1&amp;lt;/compiler-plugin.version&amp;gt;&lt;br/&gt;
+    &amp;lt;compiler-plugin.version&amp;gt;3.6.0&amp;lt;/compiler-plugin.version&amp;gt;&lt;br/&gt;
     &amp;lt;exec-plugin.version&amp;gt;1.3.2&amp;lt;/exec-plugin.version&amp;gt;&lt;br/&gt;
     &amp;lt;jar-plugin.version&amp;gt;2.5&amp;lt;/jar-plugin.version&amp;gt;&lt;br/&gt;
     &amp;lt;javacc-plugin.version&amp;gt;2.6&amp;lt;/javacc-plugin.version&amp;gt;&lt;br/&gt;
diff --git a/share/docker/Dockerfile b/share/docker/Dockerfile&lt;br/&gt;
index 01760554d..f97416749 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/share/docker/Dockerfile&lt;br/&gt;
+++ b/share/docker/Dockerfile&lt;br/&gt;
@@ -17,7 +17,7 @@&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
	&lt;li&gt;Dockerfile for installing the necessary dependencies for building Avro.&lt;/li&gt;
	&lt;li&gt;See BUILD.txt.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;-FROM java:7-jdk&lt;br/&gt;
+FROM java:8-jdk&lt;/p&gt;

&lt;p&gt; WORKDIR /root&lt;/p&gt;

&lt;p&gt;diff --git a/share/test/schemas/http.avdl b/share/test/schemas/http.avdl&lt;br/&gt;
index 52313e704..7e371f072 100644&lt;br/&gt;
&amp;#8212; a/share/test/schemas/http.avdl&lt;br/&gt;
+++ b/share/test/schemas/http.avdl&lt;br/&gt;
@@ -59,7 +59,7 @@ protocol Http {&lt;/p&gt;

&lt;p&gt;     record Request {&lt;br/&gt;
       long              timestamp;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;NetworkConnection connection;&lt;br/&gt;
+      union 
{ null, NetworkConnection }
&lt;p&gt; connection = null;&lt;br/&gt;
       HttpRequest       httpRequest;&lt;br/&gt;
     }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;






&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16693716" author="jira-bot" created="Tue, 20 Nov 2018 19:45:13 +0000"  >&lt;p&gt;Commit 021c01c4c2756f793a4eee3a0f914c2c131823ac in avro&apos;s branch refs/heads/master from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dkulp&quot; class=&quot;user-hover&quot; rel=&quot;dkulp&quot;&gt;Daniel Kulp&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://gitbox.apache.org/repos/asf?p=avro.git;h=021c01c&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gitbox.apache.org/repos/asf?p=avro.git;h=021c01c&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Squashed commit of the following:&lt;/p&gt;

&lt;p&gt;commit a3f86c2874ad6d86b11fc2edc908065adcefdeda&lt;br/&gt;
Author: Daniel Kulp &amp;lt;dkulp@apache.org&amp;gt;&lt;br/&gt;
Date:   Tue Nov 20 14:32:48 2018 -0500&lt;/p&gt;

&lt;p&gt;    Grab some more tests from other PR&lt;/p&gt;

&lt;p&gt;commit 7d7822b5960c157ddf6db7fa15a3d797d0b286ee&lt;br/&gt;
Author: Joseph Pachod &amp;lt;joseph.pachod@berger-levrault.fr&amp;gt;&lt;br/&gt;
Date:   Sun Dec 11 22:50:45 2016 +0100&lt;/p&gt;

&lt;p&gt;    new javadoc with same formatting as other javadoc&lt;/p&gt;

&lt;p&gt;commit 82e8f7af6736034f4e85a4e6e1bcaa803019082e&lt;br/&gt;
Author: Joseph Pachod &amp;lt;joseph.pachod@berger-levrault.fr&amp;gt;&lt;br/&gt;
Date:   Sun Dec 11 22:38:33 2016 +0100&lt;/p&gt;

&lt;p&gt;    restore initial imports&lt;/p&gt;

&lt;p&gt;commit 0ca9815c8c884bc30c73b5c8a3c5d4c6e5188cee&lt;br/&gt;
Author: Joseph Pachod &amp;lt;joseph.pachod@berger-levrault.fr&amp;gt;&lt;br/&gt;
Date:   Sun Dec 11 22:36:03 2016 +0100&lt;/p&gt;

&lt;p&gt;    javadoc&lt;/p&gt;

&lt;p&gt;commit 551e1eb4a6bdedf00260ef90576490648f9b4658&lt;br/&gt;
Author: Joseph Pachod &amp;lt;joseph.pachod@berger-levrault.fr&amp;gt;&lt;br/&gt;
Date:   Wed Dec 7 23:14:03 2016 +0100&lt;/p&gt;

&lt;p&gt;    format and clarify pre existing tests&lt;/p&gt;

&lt;p&gt;commit 857da0c70a2db321d5bf521b901fe0c035f32edc&lt;br/&gt;
Author: Joseph Pachod &amp;lt;joseph.pachod@berger-levrault.fr&amp;gt;&lt;br/&gt;
Date:   Wed Dec 7 22:53:13 2016 +0100&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt;: Java: add isUnion and isNullable on Schema class&lt;/p&gt;

&lt;p&gt;Closes #169&lt;/p&gt;</comment>
                            <comment id="16693717" author="githubbot" created="Tue, 20 Nov 2018 19:45:21 +0000"  >&lt;p&gt;dkulp closed pull request #169: Branch 1.8 - &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1961&quot; title=&quot;[JAVA] Generate getters that return an Optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1961&quot;&gt;&lt;del&gt;AVRO-1961&lt;/del&gt;&lt;/a&gt; : &lt;span class=&quot;error&quot;&gt;&amp;#91;JAVA&amp;#93;&lt;/span&gt; Generate getters that return an Optional&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/avro/pull/169&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/169&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/lang/java/avro/src/main/java/org/apache/avro/Schema.java b/lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;br/&gt;
index 2019c1f7d..7a962a09d 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;br/&gt;
+++ b/lang/java/avro/src/main/java/org/apache/avro/Schema.java&lt;br/&gt;
@@ -371,6 +371,26 @@ final boolean equalCachedHash(Schema other) &lt;/p&gt;
{
                        &quot;default&quot;,&quot;doc&quot;,&quot;name&quot;,&quot;order&quot;,&quot;type&quot;,&quot;aliases&quot;);
   }

&lt;p&gt;+  /** Returns true if this record is an union type. */&lt;br/&gt;
+  public boolean isUnion()&lt;/p&gt;
{
+    return this instanceof UnionSchema;
+  }
&lt;p&gt;+&lt;br/&gt;
+  /** Returns true if this record is an union type containing null. */&lt;br/&gt;
+  public boolean isNullable() {&lt;br/&gt;
+    if (!isUnion()) &lt;/p&gt;
{
+      return getType().equals(Schema.Type.NULL);
+    }
&lt;p&gt;+&lt;br/&gt;
+    for (Schema schema : getTypes()) {&lt;br/&gt;
+      if (schema.isNullable()) &lt;/p&gt;
{
+        return true;
+      }&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    return false;&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
   /** A field within a record. */&lt;br/&gt;
   public static class Field extends JsonProperties {&lt;br/&gt;
 &lt;br/&gt;
diff --git a/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java b/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java&lt;br/&gt;
index 242ee8ca0..f75b0ed5f 100644&lt;br/&gt;
&amp;#8212; a/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java&lt;br/&gt;
+++ b/lang/java/avro/src/test/java/org/apache/avro/TestSchema.java&lt;br/&gt;
@@ -18,11 +18,13 @@&lt;br/&gt;
 package org.apache.avro;&lt;br/&gt;
 &lt;br/&gt;
 import static org.junit.Assert.assertEquals;&lt;br/&gt;
+import static org.junit.Assert.assertFalse;&lt;br/&gt;
 import static org.junit.Assert.assertNotNull;&lt;br/&gt;
 import static org.junit.Assert.assertTrue;&lt;br/&gt;
 import static org.junit.Assert.fail;&lt;br/&gt;
 &lt;br/&gt;
 import java.util.ArrayList;&lt;br/&gt;
+import java.util.Collections;&lt;br/&gt;
 import java.util.List;&lt;br/&gt;
 &lt;br/&gt;
 import org.apache.avro.Schema.Field;&lt;br/&gt;
@@ -33,35 +35,36 @@&lt;br/&gt;
   @Test&lt;br/&gt;
   public void testSplitSchemaBuild() {
     Schema s = SchemaBuilder
-       .record(&quot;HandshakeRequest&quot;)
-       .namespace(&quot;org.apache.avro.ipc&quot;).fields()
-         .name(&quot;clientProtocol&quot;).type().optional().stringType()
-         .name(&quot;meta&quot;).type().optional().map().values().bytesType()
-         .endRecord();
+        .record(&quot;HandshakeRequest&quot;)
+        .namespace(&quot;org.apache.avro.ipc&quot;).fields()
+        .name(&quot;clientProtocol&quot;).type().optional().stringType()
+        .name(&quot;meta&quot;).type().optional().map().values().bytesType()
+        .endRecord();
 
     String schemaString = s.toString();
-    final int mid = schemaString.length() / 2;
+    int mid = schemaString.length() / 2;
 
     Schema parsedStringSchema = new org.apache.avro.Schema.Parser().parse(s.toString());
     Schema parsedArrayOfStringSchema =
-      new org.apache.avro.Schema.Parser().parse
-      (schemaString.substring(0, mid), schemaString.substring(mid));
+        new org.apache.avro.Schema.Parser().parse
+            (schemaString.substring(0, mid), schemaString.substring(mid));
     assertNotNull(parsedStringSchema);
     assertNotNull(parsedArrayOfStringSchema);
     assertEquals(parsedStringSchema.toString(), parsedArrayOfStringSchema.toString());
   }&lt;br/&gt;
 &lt;br/&gt;
   @Test&lt;br/&gt;
-  public void testDuplicateRecordFieldName() {&lt;br/&gt;
-    final Schema schema = Schema.createRecord(&quot;RecordName&quot;, null, null, false);&lt;br/&gt;
-    final List&amp;lt;Field&amp;gt; fields = new ArrayList&amp;lt;Field&amp;gt;();&lt;br/&gt;
+  public void testDefaultRecordWithDuplicateFieldName() {&lt;br/&gt;
+    String recordName = &quot;name&quot;;&lt;br/&gt;
+    Schema schema = Schema.createRecord(recordName, &quot;doc&quot;, &quot;namespace&quot;, false);&lt;br/&gt;
+    List&amp;lt;Field&amp;gt; fields = new ArrayList&amp;lt;Field&amp;gt;();&lt;br/&gt;
     fields.add(new Field(&quot;field_name&quot;, Schema.create(Type.NULL), null, null));&lt;br/&gt;
     fields.add(new Field(&quot;field_name&quot;, Schema.create(Type.INT), null, null));&lt;br/&gt;
     try {
       schema.setFields(fields);
       fail(&quot;Should not be able to create a record with duplicate field name.&quot;);
     } catch (AvroRuntimeException are) {
-      assertTrue(are.getMessage().contains(&quot;Duplicate field field_name in record RecordName&quot;));
+      assertTrue(are.getMessage().contains(&quot;Duplicate field field_name in record &quot; + recordName));
     }&lt;br/&gt;
   }&lt;br/&gt;
 &lt;br/&gt;
@@ -76,9 +79,23 @@ public void testCreateUnionVarargs() {
     assertEquals(expected, schema);
   }&lt;br/&gt;
 &lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testRecordWithNullDoc() {
+    Schema schema = Schema.createRecord(&quot;name&quot;, null, &quot;namespace&quot;, false);
+    String schemaString = schema.toString();
+    assertNotNull(schemaString);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testRecordWithNullNamespace() {
+    Schema schema = Schema.createRecord(&quot;name&quot;, &quot;doc&quot;, null, false);
+    String schemaString = schema.toString();
+    assertNotNull(schemaString);
+  }&lt;br/&gt;
+&lt;br/&gt;
   @Test&lt;br/&gt;
   public void testEmptyRecordSchema() {
-    Schema schema = Schema.createRecord(&quot;foobar&quot;, null, null, false);
+    Schema schema = createDefaultRecord();
     String schemaString = schema.toString();
     assertNotNull(schemaString);
   }&lt;br/&gt;
@@ -88,7 +105,8 @@ public void testSchemaWithFields() {&lt;br/&gt;
     List&amp;lt;Field&amp;gt; fields = new ArrayList&amp;lt;Field&amp;gt;();&lt;br/&gt;
     fields.add(new Field(&quot;field_name1&quot;, Schema.create(Type.NULL), null, null));&lt;br/&gt;
     fields.add(new Field(&quot;field_name2&quot;, Schema.create(Type.INT), null, null));&lt;br/&gt;
-    Schema schema = Schema.createRecord(&quot;foobar&quot;, null, null, false, fields);&lt;br/&gt;
+    Schema schema = createDefaultRecord();&lt;br/&gt;
+    schema.setFields(fields);&lt;br/&gt;
     String schemaString = schema.toString();&lt;br/&gt;
     assertNotNull(schemaString);&lt;br/&gt;
     assertEquals(2, schema.getFields().size());&lt;br/&gt;
@@ -96,8 +114,71 @@ public void testSchemaWithFields() {&lt;br/&gt;
 &lt;br/&gt;
   @Test(expected = NullPointerException.class)&lt;br/&gt;
   public void testSchemaWithNullFields() {
-    Schema.createRecord(&quot;foobar&quot;, null, null, false, null);
+    Schema.createRecord(&quot;name&quot;, &quot;doc&quot;, &quot;namespace&quot;, false, null);
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testIsUnionOnUnionWithMultipleElements() {
+    Schema schema = Schema.createUnion(Schema.create(Type.NULL), Schema.create(Type.LONG));
+    assertTrue(schema.isUnion());
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testIsUnionOnUnionWithOneElement() {
+    Schema schema = Schema.createUnion(Schema.create(Type.LONG));
+    assertTrue(schema.isUnion());
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testIsUnionOnRecord() {
+    Schema schema = createDefaultRecord();
+    assertFalse(schema.isUnion());
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testIsUnionOnArray() {
+    Schema schema = Schema.createArray(Schema.create(Type.LONG));
+    assertFalse(schema.isUnion());
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testIsUnionOnEnum() {
+    Schema schema = Schema.createEnum(&quot;name&quot;, &quot;doc&quot;, &quot;namespace&quot;, Collections.singletonList(&quot;value&quot;));
+    assertFalse(schema.isUnion());
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testIsUnionOnFixed() {
+    Schema schema = Schema.createFixed(&quot;name&quot;, &quot;doc&quot;, &quot;space&quot;, 10);
+    assertFalse(schema.isUnion());
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testIsUnionOnMap() {
+    Schema schema = Schema.createMap(Schema.create(Type.LONG));
+    assertFalse(schema.isUnion());
   }&lt;br/&gt;
 &lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testIsNullableOnUnionWithNull() {
+    Schema schema = Schema.createUnion(Schema.create(Type.NULL), Schema.create(Type.LONG));
+    assertTrue(schema.isNullable());
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testIsNullableOnUnionWithoutNull() {
+    Schema schema = Schema.createUnion(Schema.create(Type.LONG));
+    assertFalse(schema.isNullable());
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testIsNullableOnRecord() {
+    Schema schema = createDefaultRecord();
+    assertFalse(schema.isNullable());
+  }&lt;br/&gt;
+&lt;br/&gt;
+  private Schema createDefaultRecord() {
+    return Schema.createRecord(&quot;name&quot;, &quot;doc&quot;, &quot;namespace&quot;, false);
+  }&lt;br/&gt;
 &lt;br/&gt;
 }&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
index 295949313..8158972f9 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
+++ b/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java&lt;br/&gt;
@@ -106,6 +106,7 @@&lt;br/&gt;
   private String templateDir;&lt;br/&gt;
   private FieldVisibility fieldVisibility = FieldVisibility.PUBLIC_DEPRECATED;&lt;br/&gt;
   private boolean createSetters = true;&lt;br/&gt;
+  private boolean pojoWithOptional = false;&lt;br/&gt;
   private boolean createAllArgsConstructor = true;&lt;br/&gt;
   private String outputCharacterEncoding;&lt;br/&gt;
   private boolean enableDecimalLogicalType = false;&lt;br/&gt;
@@ -206,6 +207,9 @@ public void setFieldVisibility(FieldVisibility fieldVisibility) {
     this.fieldVisibility = fieldVisibility;
   }&lt;br/&gt;
 &lt;br/&gt;
+  /**&lt;br/&gt;
+   * @return true if the record fields should have setter methods.&lt;br/&gt;
+   */&lt;br/&gt;
   public boolean isCreateSetters() {
       return this.createSetters;
   }&lt;br/&gt;
@@ -217,6 +221,20 @@ public void setCreateSetters(boolean createSetters) {
     this.createSetters = createSetters;
   }&lt;br/&gt;
 &lt;br/&gt;
+  /**&lt;br/&gt;
+   * @return true if the record nullable fields should have getter/setter/builder methods with Optional.&lt;br/&gt;
+   */&lt;br/&gt;
+  public boolean isPojoWithOptional() {
+    return this.pojoWithOptional;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Set to false to not create getter/setter methods with Optional for nullable fields of the record.&lt;br/&gt;
+   */&lt;br/&gt;
+  public void setPojoWithOptional(boolean pojoWithOptional) {
+    this.pojoWithOptional = pojoWithOptional;
+  }&lt;br/&gt;
+&lt;br/&gt;
   /**&lt;br/&gt;
    * Set to true to use {@link java.math.BigDecimal} instead of&lt;br/&gt;
    * {@link java.nio.ByteBuffer} for logical type &quot;decimal&quot;&lt;br/&gt;
@@ -585,6 +603,16 @@ public String javaType(Schema schema) {
     return javaType(schema, true);
   }&lt;br/&gt;
 &lt;br/&gt;
+  /** Utility for template use.  Returns true if any field of the current schema is nullable. */&lt;br/&gt;
+  public boolean containsNullableField(Schema schema) {&lt;br/&gt;
+    for (Field field : schema.getFields()) {&lt;br/&gt;
+      if (field.schema().isNullable()) {+        return true;+      }
&lt;p&gt;+    }&lt;br/&gt;
+    return false;&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
   private String javaType(Schema schema, boolean checkConvertedLogicalType) {&lt;br/&gt;
     if (checkConvertedLogicalType) {&lt;br/&gt;
       String convertedLogicalType = getConvertedLogicalType(schema);&lt;br/&gt;
diff --git a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
index 85c5e9d2f..ecd09ecde 100644&lt;br/&gt;
&amp;#8212; a/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
+++ b/lang/java/compiler/src/main/velocity/org/apache/avro/compiler/specific/templates/java/classic/record.vm&lt;br/&gt;
@@ -25,6 +25,7 @@ import org.apache.avro.message.BinaryMessageEncoder;&lt;br/&gt;
 import org.apache.avro.message.BinaryMessageDecoder;&lt;br/&gt;
 import org.apache.avro.message.SchemaStore;&lt;br/&gt;
 #end&lt;br/&gt;
+#if (${this.pojoWithOptional} &amp;amp;&amp;amp; ${this.containsNullableField($schema)})import java.util.Optional;#end&lt;/p&gt;

&lt;p&gt; @SuppressWarnings(&quot;all&quot;)&lt;br/&gt;
 #if ($schema.getDoc())&lt;br/&gt;
@@ -184,6 +185,17 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt; #foreach ($field in $schema.getFields())&lt;br/&gt;
+#if (${this.pojoWithOptional} &amp;amp;&amp;amp; ${field.schema().isNullable()})&lt;br/&gt;
+  /**&lt;br/&gt;
+   * Gets the value of the nullable &apos;${this.mangle($field.name(), $schema.isError())}&apos; field.&lt;br/&gt;
+#if ($field.doc())      * $field.doc()&lt;br/&gt;
+#end&lt;br/&gt;
+   * @return The value of the &apos;${this.mangle($field.name(), $schema.isError())}&apos; field.&lt;br/&gt;
+   */&lt;br/&gt;
+  public Optional&amp;lt;${this.javaType($field.schema())}&amp;gt; ${this.generateGetMethod($schema, $field)}() {&lt;br/&gt;
+    return Optional.ofNullable(${this.mangle($field.name(), $schema.isError())});&lt;br/&gt;
+  }&lt;br/&gt;
+#else&lt;br/&gt;
   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Gets the value of the &apos;${this.mangle($field.name(), $schema.isError())}&apos; field.&lt;br/&gt;
 #if ($field.doc())   * @return $field.doc()&lt;br/&gt;
@@ -193,8 +205,20 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
   public ${this.javaType($field.schema())} ${this.generateGetMethod($schema, $field)}() {&lt;br/&gt;
     return ${this.mangle($field.name(), $schema.isError())};&lt;br/&gt;
   }&lt;br/&gt;
+#end&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; #if ($this.createSetters)&lt;br/&gt;
+#if (${this.pojoWithOptional} &amp;amp;&amp;amp; ${field.schema().isNullable()})&lt;br/&gt;
+/**&lt;br/&gt;
+* Sets the value of the nullable &apos;${this.mangle($field.name(), $schema.isError())}&apos; field.&lt;br/&gt;
+    #if ($field.doc())   * $field.doc()&lt;br/&gt;
+    #end&lt;br/&gt;
+* @param value the value to set.&lt;br/&gt;
+*/&lt;br/&gt;
+public void ${this.generateSetMethod($schema, $field)}(Optional&amp;lt;${this.javaType($field.schema())}&amp;gt; value) {&lt;br/&gt;
+this.${this.mangle($field.name(), $schema.isError())} = value.orElse(null);&lt;br/&gt;
+}&lt;br/&gt;
+#else&lt;br/&gt;
   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Sets the value of the &apos;${this.mangle($field.name(), $schema.isError())}&apos; field.&lt;br/&gt;
 #if ($field.doc())   * $field.doc()&lt;br/&gt;
@@ -205,6 +229,7 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
     this.${this.mangle($field.name(), $schema.isError())} = value;&lt;br/&gt;
   }&lt;br/&gt;
 #end&lt;br/&gt;
+#end&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; #end&lt;br/&gt;
   /**&lt;br/&gt;
@@ -319,10 +344,41 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
 #end&lt;/p&gt;

&lt;p&gt; #foreach ($field in $schema.getFields())&lt;br/&gt;
+#if (${this.pojoWithOptional} &amp;amp;&amp;amp; ${field.schema().isNullable()})&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Gets the value of the nullable &apos;${this.mangle($field.name(), $schema.isError())}&apos; field.&lt;br/&gt;
+        #if ($field.doc())      * $field.doc()&lt;br/&gt;
+        #end&lt;br/&gt;
+      * @return The value.&lt;br/&gt;
+      */&lt;br/&gt;
+    public Optional&amp;lt;${this.javaType($field.schema())}&amp;gt; ${this.generateGetMethod($schema, $field)}() {&lt;br/&gt;
+      return Optional.ofNullable(${this.mangle($field.name(), $schema.isError())});&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
+      * Sets the value of the nullable &apos;${this.mangle($field.name(), $schema.isError())}&apos; field.&lt;br/&gt;
+        #if ($field.doc())      * $field.doc()&lt;br/&gt;
+        #end&lt;br/&gt;
+      * @param value The value of &apos;${this.mangle($field.name(), $schema.isError())}&apos;.&lt;br/&gt;
+      * @return This builder.&lt;br/&gt;
+      */&lt;br/&gt;
+    public #if ($schema.getNamespace())$schema.getNamespace().#end${this.mangle($schema.getName())}.Builder ${this.generateSetMethod($schema, $field)}(Optional&amp;lt;${this.javaType($field.schema())}&amp;gt; value) {&lt;br/&gt;
+    ${this.javaType($field.schema())} effectiveValue = value.orElse(null);&lt;br/&gt;
+    validate(fields()&lt;span class=&quot;error&quot;&gt;&amp;#91;$field.pos()&amp;#93;&lt;/span&gt;, effectiveValue);&lt;br/&gt;
+        #if (${this.hasBuilder($field.schema())})&lt;br/&gt;
+        this.${this.mangle($field.name(), $schema.isError())}Builder = null;&lt;br/&gt;
+        #end&lt;br/&gt;
+    this.${this.mangle($field.name(), $schema.isError())} = effectiveValue;&lt;br/&gt;
+    fieldSetFlags()&lt;span class=&quot;error&quot;&gt;&amp;#91;$field.pos()&amp;#93;&lt;/span&gt; = true;&lt;br/&gt;
+    return this;&lt;br/&gt;
+    }&lt;br/&gt;
+#else&lt;br/&gt;
+&lt;br/&gt;
     /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Gets the value of the &apos;${this.mangle($field.name(), $schema.isError())}&apos; field.&lt;br/&gt;
-#if ($field.doc())      * $field.doc()&lt;br/&gt;
-#end&lt;br/&gt;
+        #if ($field.doc())      * $field.doc()&lt;br/&gt;
+        #end&lt;/li&gt;
	&lt;li&gt;@return The value.&lt;br/&gt;
       */&lt;br/&gt;
     public ${this.javaType($field.schema())} ${this.generateGetMethod($schema, $field)}() {&lt;br/&gt;
@@ -345,6 +401,7 @@ public class ${this.mangle($schema.getName())}#if ($schema.isError()) extends or&lt;br/&gt;
       fieldSetFlags()&lt;span class=&quot;error&quot;&gt;&amp;#91;$field.pos()&amp;#93;&lt;/span&gt; = true;&lt;br/&gt;
       return this;&lt;br/&gt;
     }&lt;br/&gt;
+#end&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Checks whether the &apos;${this.mangle($field.name(), $schema.isError())}&apos; field has been set.&lt;br/&gt;
diff --git a/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java b/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java&lt;br/&gt;
index 07328d300..94aac9f86 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java&lt;br/&gt;
+++ b/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java&lt;br/&gt;
@@ -532,7 +532,65 @@ public void testConversionInstanceWithDecimalLogicalTypeEnabled() throws Excepti&lt;br/&gt;
         &quot;null&quot;, compiler.conversionInstance(uuidSchema));&lt;br/&gt;
   }&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public void testToFromByteBuffer() {&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testPojoWithOptionalTurnedOffByDefault() throws IOException {&lt;br/&gt;
+    SpecificCompiler compiler = createCompiler();&lt;br/&gt;
+    assertFalse(compiler.isPojoWithOptional());&lt;br/&gt;
+    compiler.compileToDestination(this.src, this.outputDir);&lt;br/&gt;
+    assertTrue(this.outputFile.exists());&lt;br/&gt;
+    BufferedReader reader = null;&lt;br/&gt;
+    try 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+      reader = new BufferedReader(new FileReader(this.outputFile));+      String line;+      while ((line = reader.readLine()) != null) {
+        line = line.trim();
+        assertFalse(line.contains(&quot;Optional&quot;));
+      }+    }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt; finally &lt;/p&gt;
{
+      if (reader != null)
+        reader.close();
+    }&lt;br/&gt;
+  }&lt;br/&gt;
 &lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testPojoWithOptionalCreatedWhenOptionTurnedOn() throws IOException {&lt;br/&gt;
+    SpecificCompiler compiler = createCompiler();&lt;br/&gt;
+    compiler.setPojoWithOptional(true);&lt;br/&gt;
+    assertTrue(compiler.isPojoWithOptional());&lt;br/&gt;
+    compiler.compileToDestination(this.src, this.outputDir);&lt;br/&gt;
+    assertTrue(this.outputFile.exists());&lt;br/&gt;
+    int optionalFound = 0;&lt;br/&gt;
+    BufferedReader reader = null;&lt;br/&gt;
+    try {&lt;br/&gt;
+      reader = new BufferedReader(new FileReader(this.outputFile));&lt;br/&gt;
+&lt;br/&gt;
+      String line;&lt;br/&gt;
+      while ((line = reader.readLine()) != null) {&lt;br/&gt;
+        line = line.trim();&lt;br/&gt;
+        if (line.contains(&quot;Optional&quot;)) {
+          optionalFound++;
+        }&lt;br/&gt;
+      }&lt;br/&gt;
+    } finally {+      if (reader != null)+        reader.close();+    }
&lt;p&gt;+    assertEquals(7, optionalFound);&lt;br/&gt;
+  }&lt;br/&gt;
+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testContainsNullableFieldWorksOnRecordWithoutField()&lt;/p&gt;
{
+    Schema recordWithoutFieldSchema = SchemaBuilder.builder().record(&quot;recordWithoutField&quot;).fields().endRecord();
+    assertFalse( new SpecificCompiler().containsNullableField(recordWithoutFieldSchema));
+  }
&lt;p&gt;+&lt;br/&gt;
+  @Test&lt;br/&gt;
+  public void testContainsNullableFieldWorksOnSchemaWithoutNullableField()&lt;/p&gt;
{
+    Schema recordWithoutNullableFieldSchema = SchemaBuilder.builder()
+        .record(&quot;recordWithoutNullableField&quot;)
+        .fields()
+        .name(&quot;value&quot;).type().intType().noDefault()
+        .endRecord();
+    assertFalse( new SpecificCompiler().containsNullableField(recordWithoutNullableFieldSchema));
   }
&lt;p&gt; }&lt;br/&gt;
diff --git a/lang/java/compiler/src/test/resources/simple_record.avsc b/lang/java/compiler/src/test/resources/simple_record.avsc&lt;br/&gt;
index 85781c5c9..d78fd17e6 100644&lt;/p&gt;
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/compiler/src/test/resources/simple_record.avsc&lt;br/&gt;
+++ b/lang/java/compiler/src/test/resources/simple_record.avsc&lt;br/&gt;
@@ -2,6 +2,7 @@&lt;br/&gt;
   &quot;type&quot;: &quot;record&quot;, &lt;br/&gt;
   &quot;name&quot;: &quot;SimpleRecord&quot;,&lt;br/&gt;
   &quot;fields&quot; : [&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;{&quot;name&quot;: &quot;value&quot;, &quot;type&quot;: &quot;int&quot;}
&lt;p&gt;+    &lt;/p&gt;
{&quot;name&quot;: &quot;value&quot;, &quot;type&quot;: &quot;int&quot;}
&lt;p&gt;,&lt;br/&gt;
+    &lt;/p&gt;
{&quot;name&quot;: &quot;nullableValue&quot;, &quot;type&quot;: [&quot;null&quot;,&quot;int&quot;], &quot;doc&quot; : &quot;doc&quot;}
&lt;p&gt;   ]&lt;br/&gt;
 }&lt;br/&gt;
\ No newline at end of file&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java&lt;br/&gt;
index 9d78ede91..191598d37 100644&lt;/p&gt;
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/AbstractAvroMojo.java&lt;br/&gt;
@@ -122,6 +122,14 @@&lt;br/&gt;
    */&lt;br/&gt;
   protected boolean createSetters;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+  /**&lt;br/&gt;
+   * Determines whether or not to have getter/setter/builder methods with Optional for nullable fields of the record.&lt;br/&gt;
+   * The default is not to have getter/setter/builder methods with Optional.&lt;br/&gt;
+   *&lt;br/&gt;
+   * @parameter default-value=&quot;false&quot;&lt;br/&gt;
+   */&lt;br/&gt;
+  protected boolean pojoWithOptional;&lt;br/&gt;
+&lt;br/&gt;
   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Determines whether or not to use Java classes for decimal types&lt;br/&gt;
    *&lt;br/&gt;
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java&lt;br/&gt;
index 3f61ac2a2..63221ea6e 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/IDLProtocolMojo.java&lt;br/&gt;
@@ -93,6 +93,7 @@ protected void doCompile(String filename, File sourceDirectory, File outputDirec&lt;br/&gt;
       compiler.setTemplateDir(templateDirectory);&lt;br/&gt;
       compiler.setFieldVisibility(getFieldVisibility());&lt;br/&gt;
       compiler.setCreateSetters(createSetters);&lt;br/&gt;
+      compiler.setPojoWithOptional(pojoWithOptional);&lt;br/&gt;
       compiler.setEnableDecimalLogicalType(enableDecimalLogicalType);&lt;br/&gt;
       compiler.compileToDestination(null, outputDirectory);&lt;br/&gt;
     } catch (ParseException e) 
{
diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java
index a30a08245..cf55597a5 100644
--- a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/ProtocolMojo.java
@@ -61,6 +61,7 @@ protected void doCompile(String filename, File sourceDirectory, File outputDirec
     compiler.setStringType(StringType.valueOf(stringType));
     compiler.setFieldVisibility(getFieldVisibility());
     compiler.setCreateSetters(createSetters);
+    compiler.setPojoWithOptional(pojoWithOptional);
     compiler.setEnableDecimalLogicalType(enableDecimalLogicalType);
     compiler.compileToDestination(src, outputDirectory);
   }
&lt;p&gt;diff --git a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java&lt;br/&gt;
index 9a849207f..6557b7229 100644&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;a/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java&lt;br/&gt;
+++ b/lang/java/maven-plugin/src/main/java/org/apache/avro/mojo/SchemaMojo.java&lt;br/&gt;
@@ -78,6 +78,7 @@ protected void doCompile(String filename, File sourceDirectory, File outputDirec&lt;br/&gt;
     compiler.setStringType(StringType.valueOf(stringType));&lt;br/&gt;
     compiler.setFieldVisibility(getFieldVisibility());&lt;br/&gt;
     compiler.setCreateSetters(createSetters);&lt;br/&gt;
+    compiler.setPojoWithOptional(pojoWithOptional);&lt;br/&gt;
     compiler.setEnableDecimalLogicalType(enableDecimalLogicalType);&lt;br/&gt;
     compiler.setOutputCharacterEncoding(project.getProperties().getProperty(&quot;project.build.sourceEncoding&quot;));&lt;br/&gt;
     compiler.compileToDestination(src, outputDirectory);&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 22 Nov 2016 23:15:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i36mlr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1962] Support UUID logical type</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1962</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1554&quot; title=&quot;Avro should have support for common constructs like UUID and Date&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1554&quot;&gt;&lt;del&gt;AVRO-1554&lt;/del&gt;&lt;/a&gt; ticket seems to suggest that the issue of representing UUIDs is resolved with &lt;a href=&quot;http://avro.apache.org/docs/1.8.1/spec.html#Logical+Types&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;logical types&lt;/a&gt; in Avro&lt;br/&gt;
1.8.1. However, there is &lt;a href=&quot;https://github.com/apache/avro/blob/release-1.8.1/lang/java/compiler/src/main/javacc/org/apache/avro/compiler/idl/idl.jj#L214-L244&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;no UUID logical type in Avro 1.8.1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The specification offers several examples of using logical types; decimals&lt;br/&gt;
are represented as:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{

  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;bytes&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;logicalType&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;decimal&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;precision&quot;&lt;/span&gt;: 4,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;scale&quot;&lt;/span&gt;: 2
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No examples for UUID are offered, presumably because UUIDs are not supported.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Yibing&quot; class=&quot;user-hover&quot; rel=&quot;Yibing&quot;&gt;Yibing Shi&lt;/a&gt;&apos;s confirmation on the mailing list that this is the case.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13022672">AVRO-1962</key>
            <summary>Support UUID logical type</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Not A Problem</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="xiongtx">Tianxiang Xiong</reporter>
                        <labels>
                    </labels>
                <created>Tue, 22 Nov 2016 23:42:08 +0000</created>
                <updated>Tue, 7 Nov 2017 08:32:29 +0000</updated>
                            <resolved>Wed, 23 Nov 2016 00:32:01 +0000</resolved>
                                    <version>1.8.1</version>
                                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="15688400" author="yibing" created="Wed, 23 Nov 2016 00:22:42 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=xiongtx&quot; class=&quot;user-hover&quot; rel=&quot;xiongtx&quot;&gt;Tianxiang Xiong&lt;/a&gt;, sorry for the misleading info in mail list! UUID type can be specified like below:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{
  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;string&quot;&lt;/span&gt;,
  &lt;span class=&quot;code-quote&quot;&gt;&quot;logicalType&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;uuid&quot;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="15688424" author="xiongtx" created="Wed, 23 Nov 2016 00:32:01 +0000"  >&lt;p&gt;Per &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Yibing&quot; class=&quot;user-hover&quot; rel=&quot;Yibing&quot;&gt;Yibing Shi&lt;/a&gt;, there is already a way of specifying UUIDs using logical types.&lt;/p&gt;</comment>
                            <comment id="16239806" author="tylerjharden" created="Mon, 6 Nov 2017 01:42:07 +0000"  >&lt;p&gt;To both &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Yibing&quot; class=&quot;user-hover&quot; rel=&quot;Yibing&quot;&gt;Yibing Shi&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=xiongtx&quot; class=&quot;user-hover&quot; rel=&quot;xiongtx&quot;&gt;Tianxiang Xiong&lt;/a&gt; - According to both the 1.8.1 and 1.8.2 documentation for the Avro specification:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://avro.apache.org/docs/1.8.1/spec.html#Logical+Types&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://avro.apache.org/docs/1.8.1/spec.html#Logical+Types&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://avro.apache.org/docs/1.8.2/spec.html#Logical+Types&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://avro.apache.org/docs/1.8.2/spec.html#Logical+Types&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;br/&gt;
There is not any explicit support for &quot;UUID&quot; as an underlying logical type for string fields. However, when you look at the Avro source code for logical types:&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/apache/avro/blob/17f2d75132021fafeca29edbdcade40df960fdc9/lang/java/avro/src/main/java/org/apache/avro/LogicalTypes.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/blob/17f2d75132021fafeca29edbdcade40df960fdc9/lang/java/avro/src/main/java/org/apache/avro/LogicalTypes.java&lt;/a&gt;&lt;br/&gt;
There is support for UUID.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The docs do not line up with the source code, which is extremely confusing given the barrage of issues surrounding this across the JIRA board. Additionally, is a string type even the most logical storage medium? As opposed to a fixed type at 128 bytes?&lt;/p&gt;</comment>
                            <comment id="16240598" author="rdblue" created="Mon, 6 Nov 2017 17:40:51 +0000"  >&lt;p&gt;There is no UUID logical type in the Avro spec, which means that there is no interoperability requirement for UUIDs across Avro implementations or downstream projects. I suggested adding it to Parquet, but that&apos;s because Parquet doesn&apos;t allow logical types that aren&apos;t defined in the spec. Avro, on the other hand, allows logical types that are custom and are used to annotate data that should be transformed. UUID is an example of a type where we don&apos;t need interop requirements when storing the value as a String, but it is nice to get the result from deserialization as a Java UUID, or be able to pass a UUID in to be serialized.&lt;/p&gt;

&lt;p&gt;If we want to start storing UUIDs as 16-byte binary, then we should add UUID to the spec and define how it should be stored as either a String or as big-endian bytes.&lt;/p&gt;</comment>
                            <comment id="16241673" author="nkollar" created="Tue, 7 Nov 2017 08:32:29 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-2021&quot; title=&quot;uuid logical type is not documented&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-2021&quot;&gt;&lt;del&gt;AVRO-2021&lt;/del&gt;&lt;/a&gt; added UUID to the Avro spec, though it is not yet included in any release. Should we use this Jira to track UUID type&apos;s fixed implementation too?&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 23 Nov 2016 00:22:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 10 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i36nun:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
