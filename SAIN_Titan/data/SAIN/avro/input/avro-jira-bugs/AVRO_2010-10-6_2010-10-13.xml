<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:14:38 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2010-10-6+AND+created+%3C%3D+2010-10-13+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="3" total="3"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-678] implement ReflectData#compare()</title>
                <link>https://issues.apache.org/jira/browse/AVRO-678</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Order comparison is not implemented for reflected data.  It ought to be.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12476708">AVRO-678</key>
            <summary>implement ReflectData#compare()</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21146&amp;avatarType=issuetype">Sub-task</type>
                            <parent id="12474354">AVRO-669</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cutting">Doug Cutting</assignee>
                                    <reporter username="cutting">Doug Cutting</reporter>
                        <labels>
                    </labels>
                <created>Wed, 6 Oct 2010 20:15:04 +0000</created>
                <updated>Sat, 12 Mar 2011 00:32:44 +0000</updated>
                            <resolved>Fri, 22 Oct 2010 22:19:04 +0000</resolved>
                                                    <fixVersion>1.5.0</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12918658" author="cutting" created="Wed, 6 Oct 2010 20:18:36 +0000"  >&lt;p&gt;Here&apos;s a patch that implements this, with tests.  It also moves getField() and setField() methods from the reader/writers to GenericData, so that the generic implementation of record comparison can be shared. This also eliminates some duplicate code.&lt;/p&gt;</comment>
                            <comment id="12918663" author="cutting" created="Wed, 6 Oct 2010 20:21:52 +0000"  >&lt;p&gt;This is incompatible, since protected getField and setField methods have moved to a different class.  This may affect folks who&apos;ve implemented a DatumReader or DatumWriter that overrides or calls these methods.&lt;/p&gt;</comment>
                            <comment id="12924057" author="cutting" created="Fri, 22 Oct 2010 22:19:04 +0000"  >&lt;p&gt;I just committed this.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12456534" name="AVRO-678.patch" size="15954" author="cutting" created="Wed, 6 Oct 2010 20:18:35 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4168</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10342"><![CDATA[Incompatible change]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 14 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1t3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80055</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-679] Improved encodings for arrays</title>
                <link>https://issues.apache.org/jira/browse/AVRO-679</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;There are better ways to encode arrays of varints &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; which are faster to decode, and more space efficient than encoding varints independently.&lt;/p&gt;

&lt;p&gt;Extending the idea to other types of variable length data like &apos;bytes&apos; and &apos;string&apos;, you could encode the entries for an array block as an array of lengths, followed by contiguous byte/utf8 data.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; group varint encoding: slides 57-63 of &lt;a href=&quot;http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/people/jeff/WSDM09-keynote.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/people/jeff/WSDM09-keynote.pdf&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12476959">AVRO-679</key>
            <summary>Improved encodings for arrays</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="4">Incomplete</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="stuhood">Stu Hood</reporter>
                        <labels>
                    </labels>
                <created>Sun, 10 Oct 2010 20:48:51 +0000</created>
                <updated>Fri, 6 May 2011 19:18:37 +0000</updated>
                            <resolved>Fri, 22 Apr 2011 18:20:54 +0000</resolved>
                                                                    <component>spec</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12919875" author="cutting" created="Mon, 11 Oct 2010 15:48:43 +0000"  >&lt;p&gt;Adding a new fundamental type or encoding is hard to do compatibly.  Rather I wonder whether this could be layered, as a library?  One might automatically rewrite schemas and have a layer that transforms datastructures accordingly?  This could perhaps be done without copying data, as wrapping DatumWriter and DatumReader implementations.&lt;/p&gt;

&lt;p&gt;Also related is columnar compression in a data file.  In this case, a data file is a sequence of records whose schema might be re-written.  For example, a file containing &amp;lt;string,long&amp;gt; pairs might be represented as a data file containing &amp;lt;int,string,long&amp;gt; records where the int contains the number of characters shared with the previous string and the long the difference from the previous long.  Schema properties could indicate which fields should be represented as differences.  If random-access is required, e.g., for mapreduce splitting, then the container (DataFileReader &amp;amp; DataFileWriter in Java) might have per-block callbacks.&lt;/p&gt;</comment>
                            <comment id="12919886" author="stuhood" created="Mon, 11 Oct 2010 16:20:27 +0000"  >&lt;p&gt;&amp;gt; Adding a new fundamental type or encoding is hard to do compatibly.&lt;br/&gt;
Agreed: but this particular optimization is only possible with Avro&apos;s support, and opens up a lot of other interesting possibilities. For instance, in your prefix encoding example, encoding a block of &amp;lt;int,string,long&amp;gt; as a record &lt;tt&gt;array&amp;lt;int&amp;gt;, array&amp;lt;long&amp;gt;, array&amp;lt;string&amp;gt;&lt;/tt&gt; might give a 3-6x increase in decode speed (based on the numbers suggested in the link).&lt;/p&gt;

&lt;p&gt;It is worth considering how the specification can evolve backwards compatibly as well: perhaps the next revision of the specification could require a magical &apos;spec revision&apos; number to be present in all schemas, and would assume that a schema that is missing the rev number is a legacy format? This would allow readers and writers to communicate across spec revision boundaries by disabling optimizations/encodings that the other side does not support.&lt;/p&gt;

&lt;p&gt;&amp;gt; One might automatically rewrite schemas and have a layer that transforms datastructures accordingly?&lt;br/&gt;
Yea: there is probably room for a schema translation layer above Avro for things like RLE / prefix encoding, but I think it is a separate area of focus.&lt;/p&gt;</comment>
                            <comment id="12920544" author="cutting" created="Wed, 13 Oct 2010 13:39:24 +0000"  >&lt;p&gt;&amp;gt; encoding a block of &amp;lt;int,string,long&amp;gt; as a record array&amp;lt;int&amp;gt;, array&amp;lt;long&amp;gt;, array&amp;lt;string&amp;gt; might give a 3-6x increase in decode speed&lt;/p&gt;

&lt;p&gt;That&apos;s what I meant by a schema transformation.  You&apos;re transforming &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;lt;int,string,long&amp;gt;&amp;#93;&lt;/span&gt; to &amp;lt;&lt;span class=&quot;error&quot;&gt;&amp;#91;int&amp;#93;&lt;/span&gt;,&lt;span class=&quot;error&quot;&gt;&amp;#91;string&amp;#93;&lt;/span&gt;,&lt;span class=&quot;error&quot;&gt;&amp;#91;long&amp;#93;&lt;/span&gt;&amp;gt;.  This might be done automatically by a layer that implements DatumReader and DatumWriter.  The actual schema of the datafile would be &amp;lt;&lt;span class=&quot;error&quot;&gt;&amp;#91;int&amp;#93;&lt;/span&gt;,&lt;span class=&quot;error&quot;&gt;&amp;#91;string&amp;#93;&lt;/span&gt;,&lt;span class=&quot;error&quot;&gt;&amp;#91;long&amp;#93;&lt;/span&gt;&amp;gt; but application code would treat it as  &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;lt;int,string,long&amp;gt;&amp;#93;&lt;/span&gt;.&lt;/p&gt;</comment>
                            <comment id="12920620" author="stuhood" created="Wed, 13 Oct 2010 15:57:21 +0000"  >&lt;p&gt;&amp;gt; That&apos;s what I meant by a schema transformation.&lt;br/&gt;
As far as I know, there is no way to transform a schema that will allow you to dodge Avro&apos;s varint encoding and do group varint encoding instead: that was where I was suggesting you would get the encoding/decoding speed benefits by using multiple arrays.&lt;/p&gt;</comment>
                            <comment id="12920629" author="scott_carey" created="Wed, 13 Oct 2010 16:05:03 +0000"  >&lt;p&gt;Its doing more than transforming &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;lt;int,string,long&amp;gt;&amp;#93;&lt;/span&gt; to &amp;lt;&lt;span class=&quot;error&quot;&gt;&amp;#91;int&amp;#93;&lt;/span&gt;,&lt;span class=&quot;error&quot;&gt;&amp;#91;string&amp;#93;&lt;/span&gt;,&lt;span class=&quot;error&quot;&gt;&amp;#91;long&amp;#93;&lt;/span&gt;&amp;gt;.&lt;/p&gt;

&lt;p&gt;First, its changing how a sequence of varints are encoded, from zig-zag encoding to group varint encoding.  This is where the decode speed improvements happen.&lt;/p&gt;

&lt;p&gt;Then, its doing the transformation above,  then it is doing one more:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;string&amp;#93;&lt;/span&gt; is currently an int length followed by a sequence of bytes of that length.  This would transform &lt;span class=&quot;error&quot;&gt;&amp;#91;string&amp;#93;&lt;/span&gt; into an &amp;lt;&lt;span class=&quot;error&quot;&gt;&amp;#91;lengths&amp;#93;&lt;/span&gt;,bytes&amp;gt;, with group varint encoding for the lengths.&lt;/p&gt;

&lt;p&gt;I see this sort of thing as most useful for the file format and other block based sequence of records formats &amp;#8211; for the file format we could have a columnar format that transformed records and arrays this way.  Unions would be a bit tricky to do however.&lt;/p&gt;

&lt;p&gt;For the core avro spec, this is only useful for arrays and maps and schema translation is not sufficient IMO without group varint encoding which even if we had consensus to add it to the current binary format, we could not add until Avro 2.0.&lt;/p&gt;

&lt;p&gt;Perhaps we consider group varint encodings at some point, along with some other features like bitmasks for nullables, to an &apos;extended&apos; or &apos;columnar&apos; binary format and leave the &apos;core&apos; format as simple as possible.&lt;/p&gt;

</comment>
                            <comment id="12920630" author="brucem" created="Wed, 13 Oct 2010 16:06:14 +0000"  >&lt;p&gt;If something happens here, it would be nice to be able to bypass the varint encoding entirely by specifically stating the length of the integers (int8, int16, int32, int64 or whatever). There are use cases where the varint encoding chews up a lot of time and the space savings aren&apos;t as important.&lt;/p&gt;</comment>
                            <comment id="12991257" author="stuhood" created="Mon, 7 Feb 2011 03:05:24 +0000"  >&lt;p&gt;I&apos;m having trouble getting an implementation of group varint encoding to be significantly (or any) faster than Avro&apos;s varint encoding, so this ticket is probably invalid.&lt;/p&gt;

&lt;p&gt;On a side note though, I&apos;m curious what I might be doing wrong in BinaryEncoder setup for it to be so expensive: see &lt;a href=&quot;https://github.com/stuhood/gvi#readme&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/stuhood/gvi#readme&lt;/a&gt; and the benchmark code &lt;a href=&quot;https://github.com/stuhood/gvi/blob/master/src/test/java/net/hoodidge/gvi/GroupVarIntBenchmark.java#L53&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/stuhood/gvi/blob/master/src/test/java/net/hoodidge/gvi/GroupVarIntBenchmark.java#L53&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12991284" author="scott_carey" created="Mon, 7 Feb 2011 06:22:41 +0000"  >&lt;p&gt;I&apos;d expect bigger gains for longs and for encode than for decode.&lt;/p&gt;

&lt;p&gt;Avro&apos;s int decode runs at about 4 to 5 clock cycles per byte, trying to shave a clock cycle off that is hard since every byte requires a conditional operation, an array write, a counter increment, and some masking and shifting.&lt;br/&gt;
The group varint stuff can cut that down though.  &lt;br/&gt;
Longs are still at 8 or so cycles per byte and might have more room to gain than Ints.&lt;/p&gt;

&lt;p&gt;For your code, the big thing that is likely slowing you down is:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;            buff.put(b(m));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;buff.put is a lot slower than byte array assignment.  All ByteBuffer access is slow at this level.&lt;br/&gt;
Unfortunately, ByteBuffer is polymorphic and thus &apos;put&apos; is a virtual method.  A couple things to try:  perhaps use ReadWriteHeapByteBuffer, which is final and so can be better optimized and is not polymorphic at your call site.  Or, unpack the byte buffer higher up and pass around (byte[], position) through your methods to get raw byte[] access which is fastest.&lt;/p&gt;

&lt;p&gt;You might also try using the Avro Perf.java test and add a new read method to BinaryDecoder to test it there.  The way the methods and buffers are set up in BinaryDecoder was tweaked heavily to get the JVM to inline and optimize the right methods in the right order.  Several equivalent rearrangements of the code in BinaryDecoder are slower.  It would be easier to isolate the differences if both used the same general setup and buffer.&lt;/p&gt;


&lt;p&gt;Group Varint encoding lends itself to specialized processor instructions such as SIMD and vectorized instructions.  So it might benefit C/C++ more than Java.&lt;/p&gt;

&lt;p&gt;On the encode side, Avro isn&apos;t optimized well yet.  See &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-753&quot; title=&quot;Java:  Improve BinaryEncoder Performance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-753&quot;&gt;&lt;del&gt;AVRO-753&lt;/del&gt;&lt;/a&gt;.  We should be able to improve int and long encoding by about a factor of 2.5.&lt;/p&gt;</comment>
                            <comment id="12991293" author="stuhood" created="Mon, 7 Feb 2011 07:26:31 +0000"  >&lt;p&gt;&amp;gt; Unfortunately, ByteBuffer is polymorphic and thus &apos;put&apos; is a virtual method.&lt;br/&gt;
I had not thought of the polymorphism in ByteBuffer: thanks for the tip! Since groups are of a known length, copying to and from a temporary byte[] of the max group length would probably work swimmingly.&lt;/p&gt;</comment>
                            <comment id="13023319" author="stuhood" created="Fri, 22 Apr 2011 18:20:54 +0000"  >&lt;p&gt;Closing this in favor of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-806&quot; title=&quot;add a column-major file format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-806&quot;&gt;&lt;del&gt;AVRO-806&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks again for your optimization help Scott.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 11 Oct 2010 15:48:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94963</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 40 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1tb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80056</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-680] Allow for non-string keys</title>
                <link>https://issues.apache.org/jira/browse/AVRO-680</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Based on an email thread back in April, Doug Cutting proposed a possible solution for having non-string keys:&lt;/p&gt;

&lt;p&gt;Stu Hood wrote:&lt;br/&gt;
&amp;gt; I can understand the reasoning behind &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-9&quot; title=&quot;restrict map keys to strings&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-9&quot;&gt;&lt;del&gt;AVRO-9&lt;/del&gt;&lt;/a&gt;, but now I need to look for an alternative to a &apos;map&apos; that will allow me to store an association of bytes keys to values.&lt;/p&gt;

&lt;p&gt;A map of Foo has the same binary format as an array of records, each&lt;br/&gt;
with a string field and a Foo field.  So an application can use an array&lt;br/&gt;
schema similar to this to represent map-like structures with, e.g.,&lt;br/&gt;
non-string keys.&lt;/p&gt;

&lt;p&gt;Perhaps we could establish standard properties that indicate that a&lt;br/&gt;
given array of records should be represented in a map-like way if&lt;br/&gt;
possible?  E.g.,:&lt;/p&gt;

&lt;p&gt;{&quot;type&quot;: &quot;array&quot;, &quot;isMap&quot;: true, &quot;items&quot;: {&quot;type&quot;:&quot;record&quot;, ...}}&lt;/p&gt;

&lt;p&gt;Doug&lt;/p&gt;</description>
                <environment></environment>
        <key id="12477168">AVRO-680</key>
            <summary>Allow for non-string keys</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sachingoyal">Sachin Goyal</assignee>
                                    <reporter username="jeromatron">Jeremy Hanna</reporter>
                        <labels>
                    </labels>
                <created>Tue, 12 Oct 2010 18:37:09 +0000</created>
                <updated>Wed, 28 Jun 2017 02:43:24 +0000</updated>
                            <resolved>Sun, 15 Mar 2015 03:30:54 +0000</resolved>
                                    <version>1.7.6</version>
                    <version>1.7.7</version>
                                    <fixVersion>1.8.0</fixVersion>
                                        <due></due>
                            <votes>5</votes>
                                    <watches>11</watches>
                                                                <comments>
                            <comment id="12930215" author="darose" created="Tue, 9 Nov 2010 18:14:13 +0000"  >&lt;p&gt;I too see the logic behind &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-9&quot; title=&quot;restrict map keys to strings&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-9&quot;&gt;&lt;del&gt;AVRO-9&lt;/del&gt;&lt;/a&gt;.  But I&apos;m also having a need in my code to create a map with non-string keys, and without that capability built-in, defining a schema to achieve that functionality is really ugly.  e.g.:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;...
	{
		&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;KVMappings&quot;&lt;/span&gt;,
		&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: {
			&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;array&quot;&lt;/span&gt;,
			&lt;span class=&quot;code-quote&quot;&gt;&quot;items&quot;&lt;/span&gt;: {
				&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;KVMapping&quot;&lt;/span&gt;,
				&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
				&lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; : [
					{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Key&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&quot;&lt;/span&gt;},
					{&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Value&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;&quot;&lt;/span&gt;}
				]
			}
		}
	}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not to mention that the code for reading/writing to/from a record with such a schema is an ugly hack too.&lt;/p&gt;

&lt;p&gt;Is there any way to add/restore the functionality make it possible for Avro to create non-string-based maps?&lt;/p&gt;

&lt;p&gt;Perhaps a good implementation would be for string-based keys to be the default, but allowing the user to have the option to specify an alternate key type if they desire.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="13272316" author="gaurav324" created="Thu, 10 May 2012 13:26:27 +0000"  >&lt;p&gt;Have we any plans to provide support for non-string keys?&lt;/p&gt;</comment>
                            <comment id="14045307" author="sachingoyal" created="Thu, 26 Jun 2014 23:09:11 +0000"  >&lt;p&gt;I have submitted a patch for non-string map keys along with circular references support at &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-695&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-695&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It serializes a map into array and then deserializes it back to the Map.&lt;br/&gt;
The serialized schema and JSON can be read by any other tool also which does not support non-string map keys.&lt;br/&gt;
Detailed comments available in the above link.&lt;/p&gt;</comment>
                            <comment id="14051006" author="sachingoyal" created="Thu, 3 Jul 2014 02:46:28 +0000"  >&lt;p&gt;For a map with non-string keys in Java such as:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Map &amp;lt;EmployeeId, EmployeeInfo&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;,&lt;/p&gt;

&lt;p&gt;the map is converted to an array using:&lt;br/&gt;
&lt;b&gt;GenericDatumWriter.java&lt;/b&gt;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;map.entrySet()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Corresponding schema change is done in &lt;b&gt;ReflectData.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Diff created using &lt;em&gt;diff -ru&lt;/em&gt;&lt;br/&gt;
Patch can be applied using &lt;em&gt;patch -i non_string_map_keys.patch&lt;/em&gt;&lt;br/&gt;
Unit tests included.&lt;/p&gt;</comment>
                            <comment id="14051742" author="cutting" created="Thu, 3 Jul 2014 17:38:28 +0000"  >&lt;p&gt;Any automated support for this should probably be restricted to ReflectData.  Generic and Specific generally conform closely to what&apos;s defined in the schema, while Reflect&apos;s goal is to adapt to what&apos;s been defined in Java.  In this case, the goal is to support a Java feature (non-string Map keys) that&apos;s not directly supported by Avro schemas, so such support belongs in entirely in Reflect.&lt;/p&gt;

&lt;p&gt;ReflectData#isArray would thus return true for maps with non-string keys, and #isMap would return false.  ReflectData#createSchema would return the schema, and ReflectDatumReader#readArray and ReflectDatumWriter#writeArray would handle reading &amp;amp; writing, respectively.&lt;/p&gt;

&lt;p&gt;The key/value pair schemas should perhaps only have a numeric suffix when there&apos;s more than one, and might be named something like Pair, so that in most cases folks would see schemas like,&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;array&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;elements&quot;&lt;/span&gt;:{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.avro.reflect.Pair&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;key&quot;&lt;/span&gt;,...},{&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;value&quot;&lt;/span&gt;,...}]}}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="14052750" author="sachingoyal" created="Sat, 5 Jul 2014 01:32:25 +0000"  >&lt;p&gt;Incorporated all the suggestions.&lt;/p&gt;

&lt;p&gt;Changes are only in 3 files now: &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;ReflectData.java&lt;/li&gt;
	&lt;li&gt;ReflectDatumReader.java and&lt;/li&gt;
	&lt;li&gt;ReflectDatumWriter.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Please suggest changes if any.&lt;/p&gt;</comment>
                            <comment id="14066828" author="cutting" created="Fri, 18 Jul 2014 20:18:12 +0000"  >&lt;p&gt;This is looking good!&lt;/p&gt;

&lt;p&gt;I am still concerned about the potential for name conflicts.  If you have two different non-string maps in two classes that reference each other then if you get the schema for one record first the pairs will be named differently than if you get the second first.  Consider:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;R1 { 
  map&amp;lt;A,B&amp;gt; 
  @Nullable R2 r2;
}
&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;R2 {
   map&amp;lt;C,D&amp;gt;
   @Nullable R1 r1;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, the logic to create the non-string-key map schema might be moved to a separate method rather than nested in the (already too large) getClass() method.&lt;/p&gt;</comment>
                            <comment id="14066839" author="cutting" created="Fri, 18 Jul 2014 20:30:51 +0000"  >&lt;p&gt;We might use the names of the types in the pair to name it, e.g, PairAB and PairCD, but, with packages those could get ugly.&lt;/p&gt;

&lt;p&gt;Alternately we might use the hex of the schema fingerprint.  We could:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;call SchemaNormalization#parsingFingerprint64 to get the key &amp;amp; value fingerprints&lt;/li&gt;
	&lt;li&gt;xor these to get the pair fingerprint&lt;/li&gt;
	&lt;li&gt;use Pair&amp;lt;Hex&amp;gt; for the pair record name&lt;br/&gt;
This unfortunately has the problem that, if you add a field to a record that&apos;s in the key or value then its fingerprint will change, the pair name would change and schema evolution will be broken.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Maybe append the full names of the key and value schemas, then use SchemaNormalization#fingerprint64 of that UTF-8 encoded string?  That would be stable through changes to the key and value schemas and also create a small, valid record name.&lt;/p&gt;</comment>
                            <comment id="14067786" author="sachingoyal" created="Sun, 20 Jul 2014 03:53:14 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, I have incorporated both the suggestions: &lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;&lt;b&gt;createNonStringMapSchema()&lt;/b&gt; is made a separate function&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;getNameForNonStringMapRecord()&lt;/b&gt; gets rid of the counter for generating unique-names. Now it uses the fingerprint of keyName+valueName to generate unique but consistent names.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The same is verified by adding a unit test as well.&lt;br/&gt;
Diff created using &lt;b&gt;diff -ru&lt;/b&gt;&lt;br/&gt;
Patch can be applied using &lt;b&gt;patch -i non_string_map_keys3/non_string_map_keys3.patch&lt;/b&gt;&lt;/p&gt;</comment>
                            <comment id="14069406" author="cutting" created="Mon, 21 Jul 2014 22:10:28 +0000"  >&lt;p&gt;Here&apos;s a slightly modified version of the patch.  In particular:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;all changes are in a single patch file, the preferred format&lt;/li&gt;
	&lt;li&gt;wrap lines to 80 columns&lt;/li&gt;
	&lt;li&gt;ignore sign in hashing &amp;#8211; collisions already very unlikely but possible, preserving sign does little to change that and makes names more confusing&lt;/li&gt;
	&lt;li&gt;changed Pair names to include hex of hash rather than decimal&lt;/li&gt;
	&lt;li&gt;removed &apos;reflect&apos; from Pair name, since other impls should use same encoding if they decide to support non-string map keys&lt;/li&gt;
	&lt;li&gt;perhaps a few other cosmetic changes&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;One thing I don&apos;t understand is the change in ReflectDatumWriter.  It&apos;s not clear to me how the Pair schema generated permits one to write a collection of java.util.Map.Entry instances.  How is this working?&lt;/p&gt;</comment>
                            <comment id="14069485" author="sachingoyal" created="Mon, 21 Jul 2014 23:08:57 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have confirmed that the changes are in sync with the original patch.&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
The change in ReflectDatumWriter.java&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (datum &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; Map
             &amp;amp;&amp;amp; ReflectData.isMapWithNonStringKeysSchema(schema))
      datum = ((Map)datum).entrySet();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;corresponds to the following code in ReflectData.java&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (key != &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.class) {                    &lt;span class=&quot;code-comment&quot;&gt;// non-&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; map
&lt;/span&gt;          Schema nsMapSchema =
            createNonStringMapSchema (params[0], params[1], names);
          nsMapSchema.addProp(CLASS_PROP, raw.getName());
          &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; nsMapSchema;
     }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So ReflectData proactively converts the schema for non-string map-keys.&lt;br/&gt;
And that&apos;s why, when the same-type of object is seen in ReflectDataWriter.java, the only thing it expects is an array of key-value records which we give by calling &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;((Map)datum).entrySet()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;
Could you please share the diff/patch command you used to generate this patch file?&lt;br/&gt;
This will help me in generating patches in the future.&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
Also, thanks for 80-column change. &lt;br/&gt;
I wonder why the maven check-style did not catch it?&lt;/p&gt;</comment>
                            <comment id="14069528" author="cutting" created="Mon, 21 Jul 2014 23:46:29 +0000"  >&lt;p&gt;I use &apos;svn diff&apos; to generate patches, &apos;svn add&apos; to add new files.&lt;/p&gt;

&lt;p&gt;I still don&apos;t understand how a Collection&amp;lt;Map.Entry&amp;gt; is correctly serialized by ReflectDatumWriter#writeArray() using the schema created by createNonStringMapSchema.  I think it works because AbstractMap.SimpleEntry has private fields named &quot;key&quot; and &quot;value&quot;, and ReflectData#getField() doesn&apos;t check the class name but just sets and gets fields with those names.  If so, then a Map.Entry implementation that used different names for those fields would fail to work.&lt;/p&gt;</comment>
                            <comment id="14069542" author="sachingoyal" created="Mon, 21 Jul 2014 23:56:32 +0000"  >&lt;p&gt;Yes, that is correct.&lt;br/&gt;
AbstractMap.SimpleEntry does have the private fields &quot;key&quot; and &quot;value&quot;.&lt;br/&gt;
And AbstractMap is used by number of other classes as shown &lt;a href=&quot;http://grepcode.com/search/usages?id=repository.grepcode.com$java$root@jdk$openjdk@6-b14@java$util@AbstractMap&amp;amp;type=type&amp;amp;k=u&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most maps would seem to work: &lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/TreeMap.java#TreeMap.Entry&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;TreeMap.Entry&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/LinkedHashMap.java#LinkedHashMap.Entry&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;LinkedHashMap.Entry&lt;/a&gt; and even&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/concurrent/ConcurrentHashMap.java#ConcurrentHashMap.HashEntry&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;ConcurrentHashMap.Entry&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Do you see cases where this can be different, except say really custom-written Map implementations?&lt;/p&gt;</comment>
                            <comment id="14069551" author="cutting" created="Mon, 21 Jul 2014 23:59:05 +0000"  >&lt;p&gt;As evidence of this fragility, if we change NS_MAP_KEY from &quot;key&quot; to &quot;k&quot; then the patch fails to work with null pointer exceptions.  We could either convert the map to a sequence of generic record instances, or add a writeNonStringMap method that looks like GenericDatumWriter#writeArray() but instead writes the keys and values of an array.&lt;/p&gt;</comment>
                            <comment id="14069564" author="sachingoyal" created="Tue, 22 Jul 2014 00:12:00 +0000"  >&lt;p&gt;Sorry, I did not get what is meant by &quot;instead writes the keys and values of an array&quot;.&lt;br/&gt;
The current method also writes keys and values of an array.&lt;br/&gt;
Could you please elaborate more on this?&lt;/p&gt;</comment>
                            <comment id="14069606" author="cutting" created="Tue, 22 Jul 2014 00:40:32 +0000"  >&lt;p&gt;Sorry, I meant the keys and values of a map. I can post pseudocode tomorrow, if you&apos;d like.&lt;/p&gt;</comment>
                            <comment id="14069687" author="sachingoyal" created="Tue, 22 Jul 2014 01:47:12 +0000"  >&lt;p&gt;Yes, that would help.&lt;br/&gt;
Please add the pseudocode.&lt;/p&gt;</comment>
                            <comment id="14070470" author="cutting" created="Tue, 22 Jul 2014 16:32:59 +0000"  >&lt;p&gt;The pseudocode pretty much already exists in the Javadoc for Encoder#writeArrayStart().&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://avro.apache.org/docs/current/api/java/org/apache/avro/io/Encoder.html#writeArrayStart(&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://avro.apache.org/docs/current/api/java/org/apache/avro/io/Encoder.html#writeArrayStart(&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Except instead of iterating over a list, it should iterate over a Map and write each key and value, effectively inlining a call to writeRecord(), as done in that pseudocode.&lt;/p&gt;

&lt;p&gt;We should add a ReflectDatumWriter#writeNonStringMap() method that does this and is called by ReflectDatumWriter#writeArray() to write non-string maps as arrays that contain two-element records.&lt;/p&gt;

&lt;p&gt;It might also be good to add a test that serializes and deserializes non-string maps as JSON, using JsonEncoder and JsonDecoder.  Checking against a different encoder/decoder implementation provides greater confidence that the encoder &amp;amp; decoder interfaces are used correctly.&lt;/p&gt;</comment>
                            <comment id="14070486" author="sachingoyal" created="Tue, 22 Jul 2014 16:45:19 +0000"  >&lt;p&gt;I will try to submit a patch with these suggestions by tomorrow.&lt;/p&gt;</comment>
                            <comment id="14075300" author="sachingoyal" created="Sat, 26 Jul 2014 08:15:47 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, I have incorporated the above suggestions.&lt;/p&gt;

&lt;p&gt;Apparently, it isn&apos;t exactly possible to call ReflectDatumWriter#writeNonStringMap() from inside ReflectDatumWriter#writeArray(). This is so because if that happens, then it means the array-part of non-string-map is already processed and we are at the individual record level. And at this level, we cannot distinguish the map-entry from a normal array-element. Due to this, mapEntry.getKey() and mapEntry.getValue() could not be called, leading us back to relying on the names &quot;key&quot; and &quot;value&quot;.&lt;/p&gt;

&lt;p&gt;So, I have written a slightly modified version where ReflectDatumWriter#writeNonStringMap() writes an array and calls ReflectDatumWriter#writeNonStringMapEntry() to write the individual entries.&lt;/p&gt;

&lt;p&gt;Also added test-case for JsonEncoder.&lt;/p&gt;

&lt;p&gt;Please review and let me know your comments.&lt;/p&gt;</comment>
                            <comment id="14082732" author="cutting" created="Fri, 1 Aug 2014 18:48:28 +0000"  >&lt;p&gt;Thanks!  This is looking good.&lt;/p&gt;

&lt;p&gt;A few minor improvements still required:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why do we need to add GenericDatumWriter#getRecordState()?  Can&apos;t we just call getData().getRecordState()?  If we add a new protected method then we need to add javadoc, but better yet let&apos;s not add it if we don&apos;t need it.&lt;/li&gt;
	&lt;li&gt;writeNonStringMap and writeNonStringMapEntry should have comments explaining that they&apos;re writing an array of records.  In general a small comment at each substantially modified point describing this strategy would help folks reading the code to understand what&apos;s going on, since it&apos;s not what one might expect.  Just something like, &quot;encode maps with non-string keys as array of key/value pair records&quot;&lt;/li&gt;
	&lt;li&gt;getNameForNonStringMapRecord should be passed the value of Schema#getFullName() for the key and value schemas, not the class name.  This will permit non-Java implementations of non-string maps.  E.g., we should hash &quot;int&quot;, not &quot;java.lang.Integer&quot; as the name.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14082798" author="sachingoyal" created="Fri, 1 Aug 2014 19:22:38 +0000"  >&lt;p&gt;Agree with the above. Will add the modified patch today.&lt;br/&gt;
Thanks for reviewing.&lt;/p&gt;</comment>
                            <comment id="14083021" author="sachingoyal" created="Fri, 1 Aug 2014 21:58:23 +0000"  >&lt;p&gt;non_string_map_keys5.patch is attached with fixes for #2 and #3 suggestions above.&lt;/p&gt;

&lt;p&gt;For #1, getRecordState is currently protected in GenericData and ReflectData.&lt;br/&gt;
To make it visible via getData().getRecordState() in ReflectDatumWriter, this method would need to be made public in GenericData and ReflectData.&lt;br/&gt;
But I am not sure if the end-users need to have visibility for these methods.&lt;br/&gt;
That&apos;s why a new method was added initially.&lt;br/&gt;
Please suggest if you think the visibility for these methods should be increased to avoid adding similar method in GenericDatumWriter.&lt;/p&gt;
</comment>
                            <comment id="14086880" author="cutting" created="Tue, 5 Aug 2014 22:12:52 +0000"  >&lt;p&gt;The resolveUnion logic in the latest patch does not seem right.  isMap() should not be true for a non-string map.  In Avro terms, it is an array, not a map.  Probably a test is needed for this.&lt;/p&gt;

&lt;p&gt;Why are writeNonStringMap and writeNonStringMap protected?  Can&apos;t they remain private?&lt;/p&gt;

&lt;p&gt;Probably we should just make GenericData#getRecordState public, rather than add a new method to GenericDatumWriter to access this.&lt;/p&gt;
</comment>
                            <comment id="14088027" author="sachingoyal" created="Wed, 6 Aug 2014 18:49:21 +0000"  >&lt;p&gt;I am not sure how to find that the given map has non-string map-keys in isMap() and isArray() functions.&lt;br/&gt;
This is because the type information of a parameterized map-object is lost due to type-erasure.&lt;/p&gt;

&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Field;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.ParameterizedType;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;NonStringMapTest
{
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; args[]) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception
    {
        NSMFoo obj = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; NSMFoo();
        Field field = obj.getClass().getDeclaredFields()[0];
        &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; type = field.getType();
        ParameterizedType pt = (ParameterizedType)field.getGenericType();
        &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; map = field.get(obj);
        &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println (&lt;span class=&quot;code-quote&quot;&gt;&quot;Field: &quot;&lt;/span&gt; + field);
        &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println (&lt;span class=&quot;code-quote&quot;&gt;&quot;Type: &quot;&lt;/span&gt; + type);
        &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println (&lt;span class=&quot;code-quote&quot;&gt;&quot;GenericType (Field): &quot;&lt;/span&gt; + pt);
        &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println (&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt; (Datum): &quot;&lt;/span&gt; + map.getClass());
    }
}

&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;NSMFoo
{
    Map &amp;lt;NSMKey, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; map = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;NSMKey, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt;();
}

&lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;NSMKey
{
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the output from it is:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Field: java.util.Map reflection.NSMFoo.map
Type: &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; java.util.Map
GenericType (Field): java.util.Map&amp;lt;reflection.NSMKey, java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt;
&lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt; (Datum): &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;java.util.HashMap
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The isMap and isArray functions are receiving just the datum and no Field object.&lt;br/&gt;
If there is a way to deduce that the given map datum has non-string keys, then I can add that logic in those functions.&lt;/p&gt;

&lt;p&gt;I don&apos;t think passing the Field object all the way to isArray and isMap would be good.&lt;br/&gt;
What do you think?&lt;/p&gt;</comment>
                            <comment id="14088183" author="sachingoyal" created="Wed, 6 Aug 2014 20:18:07 +0000"  >&lt;p&gt;Adding another patch with following fixes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why are writeNonStringMap and writeNonStringMap protected? Can&apos;t they remain private?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Made private.&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Probably we should just make GenericData#getRecordState public, rather than add a new method to GenericDatumWriter to access this.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Removed new method and increased visibility of GenericData#getRecordState&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The resolveUnion logic in the latest patch does not seem right. isMap() should not be true for a non-string map. In Avro terms, it is an array, not a map. Probably a test is needed for this.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Please see the code/question above this comment.&lt;/p&gt;</comment>
                            <comment id="14094384" author="sachingoyal" created="Tue, 12 Aug 2014 17:46:48 +0000"  >
&lt;p&gt;Also, I tried an schema1.equals(schema2) check for non-string map-keys and it is working well.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  @Test
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testSchemaEquality () &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    Schema s1 = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ReflectData()).getSchema(Company2.class);
    Schema s2 = (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ReflectData()).getSchema(Company2.class);
    assertEquals (s1, s2);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Do you see a use case where isMap should return false for non-string-map-key and isArray should return true?&lt;/p&gt;</comment>
                            <comment id="14097281" author="cutting" created="Thu, 14 Aug 2014 17:52:34 +0000"  >&lt;p&gt;&amp;gt; Do you see a use case where isMap should return false for non-string-map-key and isArray should return true?&lt;/p&gt;

&lt;p&gt;In general, isArray must return true only for things that have an array schema and isMap must return true only for things that have a map schema.  Non-string-key maps have array schemas so isArray should return true and isMap should return false.  Things that assume this are, e.g., GenericData#validate, #toString, #instanceOf, and #getSchemaName.  These must work correctly in order to, e.g., correctly write unions that contains arrays and/or maps.  This is the same reason that, e.g., we don&apos;t use java.lang.String for enum symbols or byte[] for fixed, but have distinct runtime types for these.&lt;/p&gt;</comment>
                            <comment id="14097789" author="sachingoyal" created="Thu, 14 Aug 2014 22:19:12 +0000"  >
&lt;p&gt;Please see my comment on 06/Aug/14 11:49&lt;/p&gt;

&lt;p&gt;It doesn&apos;t appear that one can find out the non-string (and hence the array) nature of datum without&lt;br/&gt;
its corresponding java.lang.reflect.Field or Schema object.&lt;/p&gt;

&lt;p&gt;On seeing the call hierarchy for isMap/isArray, it seems that they do not have too many callers and&lt;br/&gt;
the callers would need to add a case for non-string map-keys if they really need it.&lt;br/&gt;
&lt;span class=&quot;image-wrap&quot; style=&quot;&quot;&gt;&lt;img src=&quot;https://issues.apache.org/jira/secure/attachment/12661905/12661905_isMap_Call_Hierarchy.png&quot; style=&quot;border: 0px solid black&quot; /&gt;&lt;/span&gt;&lt;br/&gt;
That&apos;s why the patch is adding a special case for it in one of the callers #resolveUnion&lt;/p&gt;

&lt;p&gt;If there is another way, please suggest.&lt;/p&gt;</comment>
                            <comment id="14098780" author="cutting" created="Fri, 15 Aug 2014 17:22:54 +0000"  >&lt;p&gt;We should not force every caller to work around a bug in the implementation of isMap and isArray.  Rather we should either fix the bug or not introduce it in the first place.&lt;/p&gt;

&lt;p&gt;If the size of the map is non-zero then we can probe it and see if the key is a non-string.  Then isMap/isArray could only be inconsistent with getSchema() for empty non-string maps.  I&apos;m not sure whether that&apos;s acceptable.&lt;/p&gt;</comment>
                            <comment id="14098976" author="sachingoyal" created="Fri, 15 Aug 2014 19:32:37 +0000"  >&lt;p&gt;Consider the following code in GenericData#toString()&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;} &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isArray(datum)) {
      Collection&amp;lt;?&amp;gt; array = (Collection&amp;lt;?&amp;gt;)datum;
      buffer.append(&lt;span class=&quot;code-quote&quot;&gt;&quot;[&quot;&lt;/span&gt;);
      &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; last = array.size()-1;
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0;
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; element : array) {
        toString(element, buffer);
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (i++ &amp;lt; last)
          buffer.append(&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;);
      }        
      buffer.append(&lt;span class=&quot;code-quote&quot;&gt;&quot;]&quot;&lt;/span&gt;);
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isMap(datum)) {
      buffer.append(&lt;span class=&quot;code-quote&quot;&gt;&quot;{&quot;&lt;/span&gt;);
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; count = 0;
      @SuppressWarnings(value=&lt;span class=&quot;code-quote&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;)
      Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;&amp;gt; map = (Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;&amp;gt;)datum;
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;&amp;gt; entry : map.entrySet()) {
        toString(entry.getKey(), buffer);
        buffer.append(&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;);
        toString(entry.getValue(), buffer);
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (++count &amp;lt; map.size())
          buffer.append(&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;);
      }
      buffer.append(&lt;span class=&quot;code-quote&quot;&gt;&quot;}&quot;&lt;/span&gt;);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we make isMap return false and isArray return true, then the above code would fail while typecasting Map to a Collection. Thus, one of the callers of isMap/isArray would need to change to support non-string maps if we make the suggested change.&lt;/p&gt;

&lt;p&gt;Same holds true for #validate():&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; ARRAY:
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!(isArray(datum))) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; element : (Collection&amp;lt;?&amp;gt;)datum)
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!validate(schema.getElementType(), element))
          &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
    &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; MAP:
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!(isMap(datum))) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
      @SuppressWarnings(value=&lt;span class=&quot;code-quote&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;)
      Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;&amp;gt; map = (Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;&amp;gt;)datum;
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;&amp;gt; entry : map.entrySet())
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!validate(schema.getValueType(), entry.getValue()))
          &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ditto, for #induce():&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isArray(datum)) {
      Schema elementType = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; element : (Collection&amp;lt;?&amp;gt;)datum) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;getSchemaName() is being called from resolveUnion() only.&lt;br/&gt;
So with current patch, it does not need to change.&lt;/p&gt;

&lt;p&gt;#instanceOf() don&apos;t seem to be used.&lt;br/&gt;
So I am not sure if we need to count it.&lt;/p&gt;

&lt;p&gt;So IMHO, it should be safe to use the current patch.&lt;br/&gt;
If you still think otherwise, I will change all the above methods along with isMap and isArray.&lt;/p&gt;

</comment>
                            <comment id="14102946" author="cutting" created="Tue, 19 Aug 2014 22:19:16 +0000"  >&lt;p&gt;&amp;gt; If we make isMap return false and isArray return true, then the above code would fail while typecasting Map to a Collection.&lt;/p&gt;

&lt;p&gt;Yes, but if we &lt;b&gt;don&apos;t&lt;/b&gt; make isMap return false and isArray return true then it will render invalid JSON, since JSON only permits string-keyed maps (a.k.a objects).&lt;/p&gt;

&lt;p&gt;&amp;gt; Same holds true for #validate()&lt;/p&gt;

&lt;p&gt;But here, without the change, validate will not validate keys of non-string maps, since they&apos;re assumed to be strings.&lt;/p&gt;

&lt;p&gt;&amp;gt; Ditto, for #induce():&lt;/p&gt;

&lt;p&gt;And without the change it won&apos;t generate the correct schema.&lt;/p&gt;

&lt;p&gt;So in each case, making the change would cause them to throw exceptions, while not making it would just cause them silently do the wrong thing.&lt;/p&gt;</comment>
                            <comment id="14103106" author="sachingoyal" created="Wed, 20 Aug 2014 00:05:20 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, I agree with the above comments.&lt;br/&gt;
Here is another patch with the requested changes.&lt;/p&gt;

&lt;p&gt;isMap and isArray now return false and true respectively for non-string maps.&lt;br/&gt;
ReflectData#resolveUnion is no longer required and is removed.&lt;/p&gt;</comment>
                            <comment id="14105895" author="sachingoyal" created="Thu, 21 Aug 2014 20:23:16 +0000"  >&lt;p&gt;avro_circular_refs6.patch is created using &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;lang/java/avro% svn diff src/
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It eliminates the need to add an extra field per record and relies on the order of record-writing and reading.&lt;/p&gt;

&lt;p&gt;In this patch, there is an equals check at 3 places of the form:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;schema.getFullName().equals(CircularRef.&lt;span class=&quot;code-keyword&quot;&gt;class.&lt;/span&gt;getName())
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think this could be improved by adding a boolean-property in the schema for CircularRef or somehow comparing the class.&lt;br/&gt;
Comments are welcome.&lt;/p&gt;</comment>
                            <comment id="14105909" author="sachingoyal" created="Thu, 21 Aug 2014 20:27:33 +0000"  >&lt;p&gt;Please remove avro_circular_refs6.patch and the comment above this one. They were meant for &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-695&quot; title=&quot;Cycle Reference Support&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-695&quot;&gt;&lt;del&gt;AVRO-695&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;non_string_map_keys7.patch is the latest patch to be seen for this issue.&lt;/p&gt;</comment>
                            <comment id="14114492" author="cutting" created="Thu, 28 Aug 2014 22:29:36 +0000"  >&lt;p&gt;Here&apos;s an updated patch that makes some cosmetic changes, simplifications, refactorings and optimizations.  Since this touches a lot of code, we should probably run the Perf.java benchmarks with and without out it to make sure that performance is not inadvertantly impacted before committing it.&lt;/p&gt;</comment>
                            <comment id="14114683" author="sachingoyal" created="Fri, 29 Aug 2014 00:53:23 +0000"  >&lt;p&gt;I confirm the new patch is in sync with the older one.&lt;br/&gt;
Thank you for the changes.&lt;/p&gt;

&lt;p&gt;How do I run the Perf.java from the command line?&lt;br/&gt;
Also, I am not sure how to get it committed. Can you please advise on this?&lt;/p&gt;</comment>
                            <comment id="14115365" author="cutting" created="Fri, 29 Aug 2014 15:59:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;How do I run the Perf.java from the command line.&lt;/p&gt;&lt;/blockquote&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;mvn install -DskipTests
cd lang/java/ipc/
mvn exec:java -Dexec.mainClass=org.apache.avro.io.Perf -Dexec.classpathScope=&lt;span class=&quot;code-quote&quot;&gt;&quot;test&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A project committer will commit this if and when there is consensus that it is ready.&lt;/p&gt;</comment>
                            <comment id="14115796" author="sachingoyal" created="Fri, 29 Aug 2014 20:47:35 +0000"  >&lt;p&gt;Attaching the result of perf runs.&lt;/p&gt;

&lt;p&gt;I see no difference in bytes/cycle counts.&lt;/p&gt;

&lt;p&gt;Time, entries/sec and bytes/sec aren&apos;t consistent - increasing some time and decreasing some time but I think that depends on the CPU load and expected to be non-constant.&lt;/p&gt;</comment>
                            <comment id="14115861" author="cutting" created="Fri, 29 Aug 2014 21:33:48 +0000"  >&lt;p&gt;The bytes/cycle do not indicate performance and probably should be removed from Perf output.&lt;/p&gt;

&lt;p&gt;The timings are what we care about.  These need to be run on a relatively unloaded machine, and will still vary from run to run, but are the best we can do.  We need to watch for things that are consistently faster or slower.  I don&apos;t see any strong patterns in the data you posted.  What JVM did you use?  What OS?&lt;/p&gt;

&lt;p&gt;It would be great to have something that took a pair of runs and identified those tests that varied by more than a few percent.  Then we could re-run just those to check whether it was spurious.  We also might try increasing CYCLES to see if that decreases the inter-run variations.&lt;/p&gt;</comment>
                            <comment id="14117803" author="sachingoyal" created="Tue, 2 Sep 2014 00:24:48 +0000"  >&lt;blockquote&gt;
&lt;p&gt;It would be great to have something that took a pair of runs and identified those tests that varied by more than a few percent. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I have created such a utility in Tcl and its attached in the latest zip PERF_8000_cycles.zip&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Then we could re-run just those to check whether it was spurious. We also might try increasing CYCLES to see if that decreases the inter-run variations.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Here is a sample run using the above utility (Data corresponding to this is also there in the zip attachment.)&lt;br/&gt;
Cycles&apos; count is increased 10 times to 8000&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;% tclsh perf_processor.tcl all/orig.txt all/nsmk.txt 
Finding tests where time is 1.05 times more than the original
             orig.txt   nsmk.txt
GenericWrite: 34552    37893
StringWrite: 60999    65273
GenericOneTimeDecoderUse_Read: 38315 40928

&lt;span class=&quot;code-comment&quot;&gt;// Run only the above tests &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; patched and unpatched code
&lt;/span&gt;% mvn exec:java -Dexec.mainClass=org.apache.avro.io.Perf -Dexec.classpathScope=&lt;span class=&quot;code-quote&quot;&gt;&quot;test&quot;&lt;/span&gt; -Dexec.args=&lt;span class=&quot;code-quote&quot;&gt;&quot;-G -s -Gotd&quot;&lt;/span&gt;

% tclsh perf_processor.tcl reduced/orig.txt reduced/nsmk.txt
Finding tests where time is 1.05 times more than the original

% 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;
In summary, the tests with and without the patch do not show a variance of more than 5%&lt;br/&gt;
Also, the less-than-5% performance decrease is &lt;b&gt;not&lt;/b&gt; always on the patched-code.&lt;br/&gt;
It is more or less equally distributed on the patched as well as the unpatched code.&lt;/p&gt;</comment>
                            <comment id="14120389" author="robair" created="Wed, 3 Sep 2014 20:32:19 +0000"  >&lt;p&gt;I appreciate the work that has gone into this already, but, I think we should consider going the elegant route and reversing &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-9&quot; title=&quot;restrict map keys to strings&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-9&quot;&gt;&lt;del&gt;AVRO-9&lt;/del&gt;&lt;/a&gt; and allowing map keys to be defined in the schema and IDL. I think most of the languages support hash/dictionary implementations that allow object keys, Perl and PHP do not directly but there are workarounds. &lt;/p&gt;</comment>
                            <comment id="14284694" author="sachingoyal" created="Wed, 21 Jan 2015 00:11:40 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, can you help decide what would be a better approach to go here?&lt;br/&gt;
I think non-string keys is a useful feature and we should get it to work either by my patch or previous support (if it covers all the cases).&lt;br/&gt;
Your opinion would help.&lt;/p&gt;</comment>
                            <comment id="14317431" author="rdblue" created="Thu, 12 Feb 2015 02:12:06 +0000"  >&lt;p&gt;Overall, this patch is looking really good. I flagged a few things:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;In &lt;tt&gt;getNameForNonStringMapRecord&lt;/tt&gt;, an &lt;tt&gt;UnsupportedEncodingException&lt;/tt&gt; is wrapped in &lt;tt&gt;RuntimeException&lt;/tt&gt; with no reported error. I think it should be &lt;tt&gt;AvroRuntimeException&lt;/tt&gt; with a sensible error message explaining what action failed.&lt;/li&gt;
	&lt;li&gt;For name generation, what about using easier to read names? As long as you don&apos;t expect to find an actual class named &lt;tt&gt;org.apache.avro.reflect.Pair776ea00e586e8427&lt;/tt&gt;, then the name can be anything fairly unique. I&apos;d prefer a simpler namespace since it won&apos;t actually find a class, like &quot;pairs&quot;, and it would be great to generate the name from the key and value types. At least for primitives, this would be a lot more readable: &quot;IntBooleanPair&quot;, &quot;LongStringPair&quot;, etc.&lt;/li&gt;
	&lt;li&gt;This doesn&apos;t seem to produce the array-of-pairs schema when I call getSchema. All map schemas are producing this: 
{&quot;type&quot;:&quot;record&quot;,&quot;name&quot;:&quot;HashMap&quot;,&quot;namespace&quot;:&quot;java.util&quot;,&quot;fields&quot;:[]}
&lt;p&gt;. It does work when I call it on Company.class, so I think it might be a bug.&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;Is it possible to use the normal writeArray logic? It looks like it would be easier to change &lt;tt&gt;write(schema,datum,encoder)&lt;/tt&gt; so that a non-string map replaces datum with its entry set, then that set is written as a collection and each &lt;tt&gt;Map.Entry&lt;/tt&gt; is passed to &lt;tt&gt;write(schema,datum,encoder&lt;/tt&gt; individually. That would eliminate the odd control flow in write and match how such maps are handled elsewhere with the addition of &lt;tt&gt;getArrayAsCollection&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14318926" author="sachingoyal" created="Thu, 12 Feb 2015 20:30:23 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, my responses on the same:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Good catch.&lt;br/&gt;
Will change RuntimeException into AvroRuntimeException with a proper message.&lt;/li&gt;
&lt;/ol&gt;


&lt;ol&gt;
	&lt;li&gt;Are you proposing simpler name generation only for primitive types?&lt;br/&gt;
  For user-defined classes like `Map&amp;lt;Foo, Bar&amp;gt;`, we cannot generate `FooBarPair` because the Foo/Bar names may be present in multiple packages.&lt;br/&gt;
  If you are proposing current naming strategy for complex types and simpler naming strategy for primitives, then I am fine with that.&lt;/li&gt;
&lt;/ol&gt;


&lt;ol&gt;
	&lt;li&gt;Can you give me the code which did not give array schema for a non-string map?&lt;/li&gt;
&lt;/ol&gt;


&lt;ol&gt;
	&lt;li&gt;The very initial patch had normal array write logic with some special handling to indicate non-string maps.&lt;br/&gt;
However we changed that to the current implementation based on some discussion that happened above (Please see the comments around 21/Jul/14).&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="14318976" author="rdblue" created="Thu, 12 Feb 2015 21:08:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;For user-defined classes like `Map&amp;lt;Foo, Bar&amp;gt;`, we cannot generate `FooBarPair` because the Foo/Bar names may be present in multiple packages.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True, but this is only a problem if you have a conflict that is used in the same position in the resulting Avro schema. So you need both &lt;tt&gt;one.Foo&lt;/tt&gt; and &lt;tt&gt;two.Foo&lt;/tt&gt; classes, present in the same Avro schema, both used as keys (or both used as values), and paired with the same type. That seems unlikely enough that I&apos;m comfortable with it. Otherwise, we could restrict it to just primitive types.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can you give me the code which did not give array schema for a non-string map?&lt;/p&gt;&lt;/blockquote&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; m = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt;();
m.put(34, &lt;span class=&quot;code-quote&quot;&gt;&quot;s&quot;&lt;/span&gt;);
ReflectData.get().getSchema(m);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;we changed &lt;span class=&quot;error&quot;&gt;&amp;#91;normal array write logic&amp;#93;&lt;/span&gt; to the current implementation based on some discussion that happened above&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think you&apos;re referring to this comment:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Apparently, it isn&apos;t exactly possible to call ReflectDatumWriter#writeNonStringMap() from inside ReflectDatumWriter#writeArray(). This is so because if that happens, then it means the array-part of non-string-map is already processed and we are at the individual record level. And at this level, we cannot distinguish the map-entry from a normal array-element. Due to this, mapEntry.getKey() and mapEntry.getValue() could not be called, leading us back to relying on the names &quot;key&quot; and &quot;value&quot;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Does this still apply? In &lt;tt&gt;ReflectDatumWriter#writeNonStringMap&lt;/tt&gt;, you call &lt;tt&gt;writeField(mapEntry, keyField, outEnc, state)&lt;/tt&gt; that doesn&apos;t call &lt;tt&gt;mapEntry.getKey()&lt;/tt&gt;. It looks like you use the accessor and rely on the field&apos;s name being &quot;key&quot; anyway. It would also make sense to have the accessor fall back to &lt;tt&gt;Map.Entry#getKey()&lt;/tt&gt; if the underlying field isn&apos;t available. I think you might be able to change back to the regular array logic now.&lt;/p&gt;</comment>
                            <comment id="14319175" author="sachingoyal" created="Thu, 12 Feb 2015 22:59:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;Otherwise, we could restrict it to just primitive types.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, my 2 cents would be restricting it to primitive types. &lt;br/&gt;
I will make this change in the new patch.&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; m = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt;();
m.put(34, &lt;span class=&quot;code-quote&quot;&gt;&quot;s&quot;&lt;/span&gt;);
ReflectData.get().getSchema(m);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It is not possible to have this patch work when the top-level field is a map because type-information is not present for top-level maps.&lt;br/&gt;
The type information for generics is available only when the map is a field.&lt;br/&gt;
Please share some code with me if you think its possible.&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It would also make sense to have the accessor fall back to Map.Entry#getKey() if the underlying field isn&apos;t available.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This should work for most of the common map-type fields.&lt;br/&gt;
For others, where this could fail, can we please cross the bridge when it comes? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt;, thoughts?&lt;/p&gt;</comment>
                            <comment id="14328284" author="sachingoyal" created="Thu, 19 Feb 2015 23:09:52 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, here is a new patch with the above suggestions.&lt;/p&gt;

&lt;p&gt;Main change is in getNameForNonStringMapRecord():&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (keyType &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt; &amp;amp;&amp;amp; valueType &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;) {
        &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt; keyClass = (&lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;)keyType;
        &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt; valueClass = (&lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;)valueType;
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (keyClass.getPackage().equals(JAVA_LANG_PKG) &amp;amp;&amp;amp;
            valueClass.getPackage().equals(JAVA_LANG_PKG)) {
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; NS_MAP_ARRAY_RECORD +
                keyClass.getSimpleName() + valueClass.getSimpleName();
        }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So it generates names like PairIntegerString for all classes inside the java.lang package.&lt;br/&gt;
A test for the same has also been added in the new patch.&lt;/p&gt;

&lt;p&gt;The RuntimeException is also fixed.&lt;/p&gt;</comment>
                            <comment id="14328289" author="githubbot" created="Thu, 19 Feb 2015 23:13:00 +0000"  >&lt;p&gt;GitHub user sachingsachin opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/17&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/17&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-680&quot; title=&quot;Allow for non-string keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-680&quot;&gt;&lt;del&gt;AVRO-680&lt;/del&gt;&lt;/a&gt;: Non-string map keys support&lt;/p&gt;



&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/sachingsachin/avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sachingsachin/avro&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-680&quot; title=&quot;Allow for non-string keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-680&quot;&gt;&lt;del&gt;AVRO-680&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/17.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/17.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #17&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit f02f88cc237db252efe9c4c688ad7d91adb3b47e&lt;br/&gt;
Author: Sachin Goyal &amp;lt;sgoyal@walmart.com&amp;gt;&lt;br/&gt;
Date:   2015-02-19T23:11:02Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-680&quot; title=&quot;Allow for non-string keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-680&quot;&gt;&lt;del&gt;AVRO-680&lt;/del&gt;&lt;/a&gt;: Non-string map keys support&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="14328293" author="sachingoyal" created="Thu, 19 Feb 2015 23:14:43 +0000"  >&lt;p&gt;If its more convenient, I have also created a pull request in github for easier commenting.&lt;br/&gt;
&lt;a href=&quot;https://github.com/apache/avro/pull/17&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/17&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14333687" author="sachingoyal" created="Mon, 23 Feb 2015 19:21:25 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, I have fixed the following as well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It would also make sense to have the accessor fall back to Map.Entry#getKey() if the underlying field isn&apos;t available.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
Now there is no separate &lt;b&gt;writeNonStringMap&lt;/b&gt; function.&lt;br/&gt;
We just switch the map to an array-like form by calling:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  datum = ((Map)datum).entrySet();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please suggest if you see any more issues and let me know how I can get this committed.&lt;/p&gt;</comment>
                            <comment id="14339158" author="rdblue" created="Thu, 26 Feb 2015 21:04:20 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sachingoyal&quot; class=&quot;user-hover&quot; rel=&quot;sachingoyal&quot;&gt;Sachin Goyal&lt;/a&gt;, thanks for the update! I found a couple more things that I missed last time (this is why I like pull requests better) so there are a few things to fix on the PR.&lt;/p&gt;

&lt;p&gt;Then there are a couple other items:&lt;br/&gt;
1. Are you sure we can&apos;t get the type of a map at the top level? It seems like we should be able to based on the same inspection that you use in &lt;tt&gt;isNonStringMap(Object)&lt;/tt&gt;.&lt;br/&gt;
2. Empty maps are assumed to be String maps; should this be an option?&lt;/p&gt;

&lt;p&gt;I&apos;d still prefer not to use the fingerprint, but other than risking collision on record names, I can&apos;t think of a much better solution. I don&apos;t think this is a blocker.&lt;/p&gt;</comment>
                            <comment id="14339421" author="sachingoyal" created="Thu, 26 Feb 2015 23:45:02 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, I have updated the pull request with my comments.&lt;/p&gt;

&lt;p&gt;1. Here is a small java program to show why top-level maps cannot be analyzed for non-stringiness.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.ParameterizedType;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;MapType {

	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; m = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt;();

	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
		m.put(34, &lt;span class=&quot;code-quote&quot;&gt;&quot;s&quot;&lt;/span&gt;);
		&lt;span class=&quot;code-comment&quot;&gt;// This returns &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; we &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; to gather type-information of the keys
&lt;/span&gt;		&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println (m &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; ParameterizedType);
		&lt;span class=&quot;code-comment&quot;&gt;// This returns &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt; because type-information is available when accessing it from Field
&lt;/span&gt;		&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println (MapType.&lt;span class=&quot;code-keyword&quot;&gt;class.&lt;/span&gt;getField(&lt;span class=&quot;code-quote&quot;&gt;&quot;m&quot;&lt;/span&gt;).getGenericType() &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; ParameterizedType);
	}
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The problem is that we only pass the type of the object and not the actual object while getting the schema.&lt;br/&gt;
Due to this, for top-level maps, we do not have the &quot;generic-type&quot; which is readily available in *Field*s.&lt;br/&gt;
Hence this issue.&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;
2. I am not sure about this.&lt;br/&gt;
I don&apos;t think we can fall back to analyzing the type of map for empty maps, because its type-information would be lost due to type-erasure.&lt;br/&gt;
So just by looking at the instance, I think its not possible to find out if its a non-string map.&lt;/p&gt;</comment>
                            <comment id="14351849" author="rdblue" created="Sun, 8 Mar 2015 00:44:58 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sachingoyal&quot; class=&quot;user-hover&quot; rel=&quot;sachingoyal&quot;&gt;Sachin Goyal&lt;/a&gt;, you&apos;re right about #1. For some reason I was thinking that the method worked with instances and not classes. Thanks for your patience with me on that. I&apos;m fine with #2 as it is.&lt;/p&gt;</comment>
                            <comment id="14352582" author="sachingoyal" created="Mon, 9 Mar 2015 05:47:12 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;, glad that I was able to clear this.&lt;br/&gt;
I have updated the pull request with the other suggestions.&lt;br/&gt;
Please review those too.&lt;/p&gt;</comment>
                            <comment id="14357337" author="rdblue" created="Wed, 11 Mar 2015 18:23:51 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sachingoyal&quot; class=&quot;user-hover&quot; rel=&quot;sachingoyal&quot;&gt;Sachin Goyal&lt;/a&gt;! Everything looks good, I&apos;ll commit this soon unless there are objections.&lt;/p&gt;</comment>
                            <comment id="14357968" author="sachingoyal" created="Thu, 12 Mar 2015 01:56:54 +0000"  >&lt;p&gt;Thanks a lot &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt;.&lt;br/&gt;
Its good to go from my side.&lt;/p&gt;</comment>
                            <comment id="14359672" author="rdblue" created="Fri, 13 Mar 2015 00:14:43 +0000"  >&lt;p&gt;Sorry for the delay, it is taking forever to clone the SVN repo and I&apos;ve had it fail twice when I moved my laptop without thinking. I&apos;ll clone it overnight and commit tomorrow.&lt;/p&gt;</comment>
                            <comment id="14360834" author="sachingoyal" created="Fri, 13 Mar 2015 18:09:06 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rdblue&quot; class=&quot;user-hover&quot; rel=&quot;rdblue&quot;&gt;Ryan Blue&lt;/a&gt; for helping me with this.&lt;br/&gt;
Side-note: I thought one could just hit the &apos;merge&apos; button in the git pull request to merge and commit. Is that not so in this case?&lt;/p&gt;</comment>
                            <comment id="14362173" author="jira-bot" created="Sun, 15 Mar 2015 03:26:59 +0000"  >&lt;p&gt;Commit 1666774 from blue@apache.org in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1666774&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1666774&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-680&quot; title=&quot;Allow for non-string keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-680&quot;&gt;&lt;del&gt;AVRO-680&lt;/del&gt;&lt;/a&gt;. Java: Support non-string map keys. Contributed by Sachin Goyal.&lt;/p&gt;</comment>
                            <comment id="14362178" author="rdblue" created="Sun, 15 Mar 2015 03:30:54 +0000"  >&lt;p&gt;I&apos;ve committed this. Thanks for contributing &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sachingoyal&quot; class=&quot;user-hover&quot; rel=&quot;sachingoyal&quot;&gt;Sachin Goyal&lt;/a&gt;!&lt;/p&gt;</comment>
                            <comment id="14362182" author="hudson" created="Sun, 15 Mar 2015 03:39:11 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #513 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/513/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/513/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-680&quot; title=&quot;Allow for non-string keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-680&quot;&gt;&lt;del&gt;AVRO-680&lt;/del&gt;&lt;/a&gt;. Java: Support non-string map keys. Contributed by Sachin Goyal. (blue: rev 1666774)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumReader.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumWriter.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/test/java/org/apache/avro/reflect/TestNonStringMapKeys.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15133230" author="githubbot" created="Thu, 4 Feb 2016 22:53:41 +0000"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/avro/pull/17&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/avro/pull/17&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="16065846" author="mingleizhang" created="Wed, 28 Jun 2017 02:42:24 +0000"  >&lt;p&gt;I upgrade Avro to 1.8.2 in flink, but it seems Avro have a compatibility issue with 1.7.7 version, as it will cause an error on generated code &lt;tt&gt;Fixed16&lt;/tt&gt;, ask me to implements &lt;tt&gt;writeExternal&lt;/tt&gt;. Is this a problem ? &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12699767" name="AVRO-680.patch" size="33515" author="sachingoyal" created="Thu, 19 Feb 2015 23:09:52 +0000"/>
                            <attachment id="12665128" name="AVRO-680.patch" size="32333" author="cutting" created="Thu, 28 Aug 2014 22:29:36 +0000"/>
                            <attachment id="12656971" name="AVRO-680.patch" size="24230" author="cutting" created="Mon, 21 Jul 2014 22:10:28 +0000"/>
                            <attachment id="12665822" name="PERF_8000_cycles.zip" size="6462" author="sachingoyal" created="Tue, 2 Sep 2014 00:24:48 +0000"/>
                            <attachment id="12661905" name="isMap_Call_Hierarchy.png" size="197086" author="sachingoyal" created="Thu, 14 Aug 2014 22:14:17 +0000"/>
                            <attachment id="12653745" name="non_string_map_keys.zip" size="5641" author="sachingoyal" created="Thu, 3 Jul 2014 02:47:11 +0000"/>
                            <attachment id="12654157" name="non_string_map_keys2.zip" size="5410" author="sachingoyal" created="Sat, 5 Jul 2014 01:32:25 +0000"/>
                            <attachment id="12656773" name="non_string_map_keys3.zip" size="6315" author="sachingoyal" created="Sun, 20 Jul 2014 03:53:14 +0000"/>
                            <attachment id="12657980" name="non_string_map_keys4.patch" size="27349" author="sachingoyal" created="Sat, 26 Jul 2014 08:15:47 +0000"/>
                            <attachment id="12659257" name="non_string_map_keys5.patch" size="27905" author="sachingoyal" created="Fri, 1 Aug 2014 21:58:23 +0000"/>
                            <attachment id="12660217" name="non_string_map_keys6.patch" size="28405" author="sachingoyal" created="Wed, 6 Aug 2014 20:18:07 +0000"/>
                            <attachment id="12662917" name="non_string_map_keys7.patch" size="32489" author="sachingoyal" created="Wed, 20 Aug 2014 00:05:20 +0000"/>
                            <attachment id="12665409" name="non_string_map_perf.txt" size="9851" author="sachingoyal" created="Fri, 29 Aug 2014 20:47:35 +0000"/>
                            <attachment id="12665410" name="non_string_map_perf2.txt" size="9339" author="sachingoyal" created="Fri, 29 Aug 2014 20:47:35 +0000"/>
                            <attachment id="12665408" name="original_perf.txt" size="9339" author="sachingoyal" created="Fri, 29 Aug 2014 20:47:35 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>15.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 9 Nov 2010 18:14:13 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94964</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 29 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e1tj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80057</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
