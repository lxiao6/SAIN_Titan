<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:15:51 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2011-7-13+AND+created+%3C%3D+2011-7-20+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="4" total="4"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-858] Add --fields to &apos;avro cat&apos; to select fields printed out</title>
                <link>https://issues.apache.org/jira/browse/AVRO-858</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Sometimes we want to see just a subset of the fields (specially if the record is big). Adding a --fields to select a subset of fields will help.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12514064">AVRO-858</key>
            <summary>Add --fields to &apos;avro cat&apos; to select fields printed out</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tebeka">Miki Tebeka</assignee>
                                    <reporter username="tebeka">Miki Tebeka</reporter>
                        <labels>
                            <label>patch</label>
                            <label>python</label>
                    </labels>
                <created>Thu, 14 Jul 2011 13:30:41 +0000</created>
                <updated>Tue, 1 Nov 2011 18:36:06 +0000</updated>
                            <resolved>Mon, 19 Sep 2011 18:48:56 +0000</resolved>
                                                    <fixVersion>1.6.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13065304" author="philip" created="Thu, 14 Jul 2011 14:56:31 +0000"  >&lt;p&gt;The way the Java version does this is by letting you specify a read schema.  Then it projects the data through that schema, and that&apos;s how you lose fields.  Thoughts about that approach?&lt;/p&gt;</comment>
                            <comment id="13065445" author="tebeka" created="Thu, 14 Jul 2011 18:40:02 +0000"  >&lt;p&gt;I think it&apos;s more complicated to use in the command line. You&apos;ll need to create the read schema and pass it as an argument. Specifying --fields is easier (IMO) and requires less knowledge of Avro (which is one of the goals of this utility).&lt;/p&gt;</comment>
                            <comment id="13104116" author="tebeka" created="Wed, 14 Sep 2011 00:51:14 +0000"  >&lt;p&gt;Any progress on this one?&lt;/p&gt;</comment>
                            <comment id="13104862" author="cutting" created="Wed, 14 Sep 2011 20:46:31 +0000"  >&lt;p&gt;The two approaches seem complimentary to me.  I&apos;m happy to see this committed.  Does anyone object?&lt;/p&gt;</comment>
                            <comment id="13108049" author="cutting" created="Mon, 19 Sep 2011 18:48:56 +0000"  >&lt;p&gt;I committed this.  Thanks, Miki!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12486439" name="AVRO-858.diff" size="2579" author="tebeka" created="Thu, 14 Jul 2011 13:31:14 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 14 Jul 2011 14:56:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>60182</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 19 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2wf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80232</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-859] Java: Data Flow Overhaul -- Composition and Symmetry</title>
                <link>https://issues.apache.org/jira/browse/AVRO-859</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Data flow in Avro is currently broken into two parts:  Read and Write.  These share many common patterns but almost no common code.  &lt;br/&gt;
Additionally, the APIs for this are DatumReader and DatumWriter, which requires that implementations know how to traverse Schemas and use the Resolver.&lt;/p&gt;

&lt;p&gt;This is a proposal to overhaul the inner workings of Avro Java between the Decoder/Encoder APIs and DatumReader/DatumWriter such that there is significantly more code re-use and much greater opportunity for new features that can all share in general optimizations and dynamic code generation.&lt;/p&gt;

&lt;p&gt;The two primary concepts involved are:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;em&gt;&lt;b&gt;Functional Composition&lt;/b&gt;&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;&lt;em&gt;&lt;b&gt;Symmetry&lt;/b&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;&lt;a name=&quot;FunctionalComposition&quot;&gt;&lt;/a&gt;Functional Composition&lt;/h4&gt;
&lt;p&gt;All read and write operations can be broken into functional bits and composed rather than writing monolithic classes.  This allows a &quot;DatumWriter2&quot; to be a graph of functions that pre-compute all state required from a schema rather than traverse a schema for each write.&lt;/p&gt;

&lt;h4&gt;&lt;a name=&quot;Symmetry&quot;&gt;&lt;/a&gt;Symmetry&lt;/h4&gt;
&lt;p&gt;Avro&apos;s data flow can be made symmetric.  Rather than thinking in terms of Read and Write, think in terms of:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;em&gt;&lt;b&gt;Source&lt;/b&gt;&lt;/em&gt;: Where data that is represented by an Avro schema comes from &amp;#8211; this may be a Decoder, or an Object graph.&lt;/li&gt;
	&lt;li&gt;&lt;em&gt;&lt;b&gt;Target&lt;/b&gt;&lt;/em&gt;: Where data that represents an Avro schema is sent &amp;#8211; this may be an Encoder or an Object graph.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;(More detail in the comments)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12514087">AVRO-859</key>
            <summary>Java: Data Flow Overhaul -- Composition and Symmetry</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="scott_carey">Scott Carey</assignee>
                                    <reporter username="scott_carey">Scott Carey</reporter>
                        <labels>
                    </labels>
                <created>Thu, 14 Jul 2011 16:42:01 +0000</created>
                <updated>Thu, 21 Jul 2011 18:17:53 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13065402" author="scott_carey" created="Thu, 14 Jul 2011 17:30:00 +0000"  >&lt;h4&gt;&lt;a name=&quot;FunctionalComposition&quot;&gt;&lt;/a&gt;Functional Composition&lt;/h4&gt;
&lt;p&gt;All read and write operations can be broken into functional bits and composed rather than writing monolithic classes.  This allows a &quot;DatumWriter2&quot; to be a graph of functions that pre-compute all state required from a schema rather than traverse a schema for each write.  Additionally, if the functions are all of a common set of types, it becomes easy to use code generation:  either directly or by parsing the resulting function graph and converting to code that the JVM can better optimize.&lt;/p&gt;

&lt;h4&gt;&lt;a name=&quot;Symmetry&quot;&gt;&lt;/a&gt;Symmetry&lt;/h4&gt;
&lt;p&gt;Avro&apos;s data flow can be made symmetric.  Rather than thinking in terms of Read and Write, think in terms of:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;em&gt;&lt;b&gt;Source&lt;/b&gt;&lt;/em&gt;: Where data that is represented by an Avro schema comes from &amp;#8211; this may be a Decoder, or an Object graph.&lt;/li&gt;
	&lt;li&gt;&lt;em&gt;&lt;b&gt;Target&lt;/b&gt;&lt;/em&gt;: Where data that represents an Avro schema is sent &amp;#8211; this may be an Encoder or an Object graph.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Combine the two ideas together and you can create &lt;em&gt;&lt;b&gt;Flows&lt;/b&gt;&lt;/em&gt; &amp;#8211; The combination of a Source and a Target for a specific Schema (or resolvable Schema pair).&lt;br/&gt;
The machinery that requires traversing and resolving schemas can be written once, and &quot;DatumReader&quot; written once, with different source and targets combined to make different tools:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;An Decoder source + GenericData target = GenericDatumReader&lt;/li&gt;
	&lt;li&gt;A SpecificData source +  Encoder target = GenericDatumWriter&lt;/li&gt;
	&lt;li&gt;BinaryDecoder source + JsonEncoder target = transform from binary to json without any intermediate objects!&lt;/li&gt;
	&lt;li&gt;SpecificData source + GeneridData target = transform one object type to another&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Add in new sources and targets (Pig, ProtoBuf, Thrift objects; Pig binary, Protobuf binary, Thrift binary) and you can mix/match more transformation tasks.&lt;/p&gt;

&lt;p&gt;Additinally, one can write a generic Equals/Compare implementation that takes two Sources, and compares them or checks for equality.  Then, you can compare binary with an object, or two objects.&lt;br/&gt;
Data flow could also tee:  one source with many targets.&lt;/p&gt;



&lt;h4&gt;&lt;a name=&quot;Functionalunits&quot;&gt;&lt;/a&gt;Functional units&lt;/h4&gt;
&lt;p&gt;After much prototyping and desingn, I have identified that all Avro data flow can be done by the composition of two functors:&lt;br/&gt;
The Unary Functor, which I have named &lt;b&gt;Access&lt;/b&gt;: &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Access&amp;lt;A,B&amp;gt; {
 B access(A a);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And a Binary Functor with two types named &lt;b&gt;Flow&lt;/b&gt;:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Flow&amp;lt;A,B&amp;gt; {
 B flow(A a, B b);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In most cases, you can replace &quot;A&quot; with &quot;FROM&quot; and &quot;B&quot; with &quot;TO&quot; in relation to Target and Source concepts.  These functions can naturally compose in all the ways required for data to flow from a target to a source.&lt;/p&gt;

&lt;p&gt;.h4 Making Symmetry&lt;br/&gt;
Consider this simple example, a Flow over the schema: &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;Foo&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;:
  [{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;}]
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the current implementation, a GenericDatumReader has the following API:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;D read(D reuse, Decoder in);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which internally parses a Schema step by step, recursively calling methods with a similar signature.&lt;br/&gt;
When we get to the leaf field, we return an integer, and on return insert that into a GenericData.Record as the first field.&lt;br/&gt;
A very similar process occurs with GenericDatumWriter:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;void write(D datum, Encoder out);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Which traverses a schema, recursively calling methods with a similar signature.&lt;br/&gt;
On the way down the schema graph, we access objects and pass portions of the data through, and when we hit the leaf field, we write it to the encoder and return.&lt;/p&gt;

&lt;p&gt;Consider the innermost operation for both of the above:&lt;br/&gt;
Fetch an integer, then put it somewhere:&lt;/p&gt;
&lt;div class=&apos;table-wrap&apos;&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; step &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Source &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Target &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Source op &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Target op &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; flow signature &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; read an integer &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; IndexedRecord &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Encoder &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; IndexedRecord.get() &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; (null) &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; int access(IndexedRecord) &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; read an integer &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Decoder &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; IndexedRecord &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Decoder.readInt() &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; (null) &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; int access(Decoder) &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; send integer to output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; IndexedRecord &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Encoder &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; (null) &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Encoder.writeInt() &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Encoder flow(int, Encoder) &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; send integer to output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Decoder &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; IndexedRecord &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; (null) &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; IndexedRecord.put() &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; IndexedRecord flow(int, IndexedRecord) &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;


&lt;p&gt;The access and flow signatures compose as follows:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; access(A);
 FollowedBy
B flow(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, B);
Equals:

B flow(A, B);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the above two examples compose to:&lt;/p&gt;
&lt;div class=&apos;table-wrap&apos;&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; step &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Source &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Target &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Source op &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Target op &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; flow signature &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; int flow &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; IndexedRecord &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Encoder &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; IndexedRecord.get() &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Encoder.writeInt() &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Encoder flow(IndexedRecord, Encoder) &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; int flow &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Decoder &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; IndexedRecord &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Decoder.readInt() &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; IndexedRecord.put() &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; IndexedRecord flow(Decoder, IndexedRecord) &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;


&lt;p&gt;As can be seen, one can compose the following two functions for an integer field, one function provided by the Source, and one function provided by the Target, and produce a Flow of data between them.&lt;br/&gt;
The source and target each have their own contexts &amp;#8211; the object types that an integer field represents &amp;#8211; but to not have to know anything about the other side.  The flow composition also does not need any information about the source or target &amp;#8211; they meet only at &quot;int&quot;.&lt;/p&gt;</comment>
                            <comment id="13065521" author="scott_carey" created="Thu, 14 Jul 2011 20:42:59 +0000"  >&lt;p&gt;Another feature that this symmetry brings:&lt;/p&gt;

&lt;p&gt;Schema resolution will apply to any operation, not just &apos;read&apos;.&lt;/p&gt;

&lt;p&gt;A resolution applies from a schema &apos;source&apos; to a schema &apos;target&apos;.  The source could be an object graph, with the target another object graph or the source could be bytes, and the target bytes.  One could have an object graph representing one schema and write it to bytes in a subset schema (projection on write).&lt;/p&gt;</comment>
                            <comment id="13069091" author="dcreager" created="Thu, 21 Jul 2011 17:29:59 +0000"  >&lt;p&gt;Awesome stuff.  Whenever we decided to implement the Haskell Avro library, this will be a good definition of the inevitable monad that we&apos;ll have to write.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I&apos;ve also been working on something similar in the C library.  Hopefully we can have some cross-pollination of ideas here.&lt;/p&gt;

&lt;p&gt;It started off with the &#8220;consumer&#8221; interface that I introduced in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-762&quot; title=&quot;Better schema resolution&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-762&quot;&gt;&lt;del&gt;AVRO-762&lt;/del&gt;&lt;/a&gt;.  I think this corresponds to the Target in your description above.  In addition to the generic consumer interface, I wrote an implementation of that consumer interface that would perform schema resolution.  And then a generic function that would consume binary Avro data, and pass the results into a consumer.&lt;/p&gt;

&lt;p&gt;The natural next step would&apos;ve been to add a &#8220;producer&#8221; interface, which would&apos;ve corresponded to the Source in your model.  However, the one main issue I had with this approach is that you&apos;d have two competing models: one where you push data through a chain of consumers, and one where you pull data through a chain of producers.  It didn&apos;t seem like either pushing or pulling could be used as the &#8220;one true way&#8221;.&lt;/p&gt;

&lt;p&gt;To get around this, I decided to go with a new &#8220;value&#8221; interface (&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-837&quot; title=&quot;New Avro value interface&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-837&quot;&gt;&lt;del&gt;AVRO-837&lt;/del&gt;&lt;/a&gt;), rather than separate consumer and producer interfaces.  In this model, an &lt;tt&gt;avro_value_t&lt;/tt&gt; is anything that can mimic an Avro value.  It&apos;s basically a big collection of getter and setter methods for the content of an Avro value of a particular schema.  Binary decoding doesn&apos;t have its own value implementation, but it can use the setter methods to fill in any value implementation &#8212; including one that just immediately serializes the contents into a JSON encoding, for instance.&lt;/p&gt;

&lt;p&gt;Schema resolution can then be implemented as two separate value implementations.  (I have this one coded up, but I don&apos;t have an issue open for it yet.  I should get on that.)  The schema resolution classes provide a &#8220;view&#8221; into an existing Avro value, allowing you to treat it as if it were an instance of a different schema.  You need two classes because the wrapped value might be on either the &#8220;writer schema&#8221; or &#8220;reader schema&#8221; end of the resolution process.&lt;/p&gt;</comment>
                            <comment id="13069101" author="dcreager" created="Thu, 21 Jul 2011 17:47:24 +0000"  >&lt;p&gt;One possible issue with the &#8220;BinaryDecoder source + JsonEncoder target&#8221; example that you give.  I think that this will only work easily when you&apos;re not doing any schema resolution.  This gets back to the push-vs-pull thing I mention in my previous comment.  In this example, you can either have the BinaryDecoder control things, and send data into the JsonEncoder as its decoded.  Or you can have the JsonEncoder control things, and pull data from the BinaryDecoder as its needed.  If there&apos;s no schema resolution, this works great.  Either (a) the BinaryDecoder reads a value, and because there&apos;s no resolution, that&apos;s exactly the value that the JsonEncoder will need next; or (b) the JsonEncoder asks for a value, and because there&apos;s no schema resolution, that&apos;s exactly the value that the BinaryDecoder will expect to read next from the stream.&lt;/p&gt;

&lt;p&gt;If you&apos;re doing schema resolution, though, the decoder and encoder will be working with different schemas.  And the fields of a record type might be in a different order.  If the decoder is pushing data into the encoder, the encoder will have to buffer things if it receives a field that isn&apos;t the next one that it needs to serialize.  And vice versa &#8212; if the encoder is pulling data, the decoder might have to deserialize and buffer a bunch of intermediary fields until it gets to the one that was requested by the encoder.&lt;/p&gt;

&lt;p&gt;None of this is a deal-breaker, but it highlights that you really want to support both pushing and pulling; ideally in this situation, you&apos;d have the decoder push the data into an in-memory representation (doing the schema resolution there to be able to skip over any fields that will be dropped).  That in-memory representation would be the buffering that you use to get around field reordering.  And then as a separate process, you have the encoder pull data from the in-memory object.  That way each operation gets to be written either as push or pull, whichever is most natural, and without any extra complication.&lt;/p&gt;</comment>
                            <comment id="13069114" author="scott_carey" created="Thu, 21 Jul 2011 18:17:53 +0000"  >&lt;p&gt;I really need to look more deeply at the changes you have done in the C implementation.  I started my work thinking in terms of &quot;push&quot; and &quot;pull&quot; and was doing something that sounds similar to your description of the &quot;consumer&quot; form &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-762&quot; title=&quot;Better schema resolution&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-762&quot;&gt;&lt;del&gt;AVRO-762&lt;/del&gt;&lt;/a&gt;.  The result was an implementation of Writing that was much faster than the current implementation and based on functional composition &amp;#8211; it composed functions with signatures like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;void send(FROM f, TO t);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Implementing readers turned out to be more difficult and there was much code duplication and no symmetry.  Requests for features on the user mailing list included things like converting Specific objects to Generic ones, and that got me thinking about splitting read/write up into symmetric components.  This isn&apos;t very easy, especially for Maps and Arrays.  Records and Unions aren&apos;t so tough, they turn into &apos;composite&apos; and &apos;branch&apos; flows fairly easily.&lt;/p&gt;

&lt;p&gt;For &quot;push&quot; versus &quot;pull&quot; I have come to the realization that you can mix the two if you define the boundary very carefully and use the &quot;flow&quot; function, which is a mix of both.&lt;br/&gt;
&quot;Push&quot; in general is easier, but at the lowest level you must pull and then invert that into a push.  The Access functor has a method on that &quot;thenFlow&quot; to change a pull to a push.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Access&amp;lt;FROM, T&amp;gt; {
  T access(FROM f);
  Flow&amp;lt;FROM, NEXT&amp;gt; thenFlow(Flow&amp;lt;T, NEXT&amp;gt; then);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And this is where &quot;source&quot; and &quot;target&quot; meet in most cases &amp;#8211; the FlowFactory takes the Source Access functor, and creates a composite flow from the target flow functor &amp;#8211; the two match because the common type is T, which is determined by the schema node.&lt;/p&gt;

&lt;p&gt;For everything but Arrays/Maps I have a working implementation that I&apos;m hoping to submit here soon, but Arrays/Maps (especially maps) have turned out trickier.  I will make them work in a slightly less elegant way (Source implementations will have to loop over their type and trigger callbacks in a special target callback, rather than composing functors).&lt;/p&gt;

&lt;p&gt;I wish I could use Scala here... about every 6 lines of Java would reduce to 1 in Scala for the function type definitions.&lt;/p&gt;

&lt;p&gt;For schema resolution, everything but record re-ordering will be easy &amp;#8211; requiring simply one more functor or replacing a functor to transform a type, with the addition of &quot;skip&quot; functors for the source.&lt;br/&gt;
For record re-ordering I will need a tag type that specifies whether a source or target requires field order or not.  If either side is &apos;unordered&apos; then it is simple. If both sides require order, a buffer will be required.  This buffer can be generic so that no source or target implementations have to worry about it other than declaring whether they require order, but it is non-trivial. &lt;/p&gt;

&lt;p&gt;Likewise, default values will need some work. In the Java implementation they are handled by storing a Jackson JSON node with the default.  This is not ideal.  It would be beneficial to convert default values to the most efficient representation that a Target would need to insert it when the source does not have the value.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 21 Jul 2011 17:29:59 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>67238</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 27 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2wn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80233</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-860] Invalid JSON when printing out records with unicode</title>
                <link>https://issues.apache.org/jira/browse/AVRO-860</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;I have an avro file, that when printed returns invalid JSON.&lt;br/&gt;
The code for iterating and printing is:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
            DatumReader&amp;lt;GenericRecord&amp;gt; reader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader&amp;lt;GenericRecord&amp;gt;();
            DataFileReader&amp;lt;GenericRecord&amp;gt; dataFileReader =
                &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DataFileReader&amp;lt;GenericRecord&amp;gt;(data, reader);

            &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (dataFileReader.hasNext()) {
                &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(dataFileReader.next().toString());
            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and the relevant JSON snippet is&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-quote&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Move&#8482; offers advertisers the opportunity to deliver messages to consumers at a time when consumers are making the biggest purchases of their lives\uMOVE&#8482; OFFERS ADVERTISERS THE OPPORTUNITY TO DELIVER MESSAGES TO CONSUMERS AT A TIME WHEN CONSUMERS ARE MAKING THE BIGGEST PURCHASES OF THEIR LIVES&#8212;OR REMODELING, REDECORATING AND MAINTAINING THEIR MOST IMPORTANT ASSETS.or remodeling, redecorating and maintaining their most important assets.&quot;&lt;/span&gt;,
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(The \uMOVE is the problematic part).&lt;/p&gt;

&lt;p&gt;However if I do:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;                GenericRecord record = dataFileReader.next();
                Utf8 desc = (Utf8)record.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;description&quot;&lt;/span&gt;);
                &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(desc);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I get&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Move&#8482; offers advertisers the opportunity to deliver messages to consumers at a time when consumers are making the biggest purchases of their lives&#8212;or remodeling, redecorating and maintaining their most important assets.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12514104">AVRO-860</key>
            <summary>Invalid JSON when printing out records with unicode</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="tebeka">Miki Tebeka</assignee>
                                    <reporter username="tebeka">Miki Tebeka</reporter>
                        <labels>
                            <label>java</label>
                            <label>json</label>
                            <label>unicode</label>
                    </labels>
                <created>Thu, 14 Jul 2011 18:37:54 +0000</created>
                <updated>Tue, 25 Sep 2012 21:22:59 +0000</updated>
                            <resolved>Thu, 13 Sep 2012 20:09:07 +0000</resolved>
                                    <version>1.5.1</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13065467" author="cutting" created="Thu, 14 Jul 2011 19:03:55 +0000"  >&lt;p&gt;The problem looks to be in GenericData#writeEscapedString(), added in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-713&quot; title=&quot;GenericRecord.toString can produce invalid JSON&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-713&quot;&gt;&lt;del&gt;AVRO-713&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13065616" author="tebeka" created="Thu, 14 Jul 2011 23:42:55 +0000"  >&lt;p&gt;Any reason the JSON is constructed manually and not using jackson? (which is already an requirement).&lt;/p&gt;</comment>
                            <comment id="13065618" author="cutting" created="Thu, 14 Jul 2011 23:46:16 +0000"  >&lt;p&gt;No good reason.  History.  Schema.toString() uses Jackson.&lt;/p&gt;</comment>
                            <comment id="13066148" author="tebeka" created="Fri, 15 Jul 2011 19:19:48 +0000"  >&lt;p&gt;Patch to have toString use jackson&lt;/p&gt;</comment>
                            <comment id="13066158" author="scott_carey" created="Fri, 15 Jul 2011 19:53:45 +0000"  >&lt;p&gt;Looks good, is there a unit test that shows this error before the patch, but works after?  If not, we should add it to this patch.&lt;/p&gt;</comment>
                            <comment id="13066206" author="tebeka" created="Fri, 15 Jul 2011 21:06:35 +0000"  >&lt;p&gt;OK, I&apos;ll work on that. Note the Java is not my strong side (I&apos;m a Python developer). Will try to dig out an offending avro file.&lt;/p&gt;</comment>
                            <comment id="13066216" author="cutting" created="Fri, 15 Jul 2011 21:19:47 +0000"  >&lt;p&gt;I think the &quot;&#8482;&quot; above is what triggered the bug and that any string with this would be mis-encoded.&lt;/p&gt;</comment>
                            <comment id="13066231" author="scott_carey" created="Fri, 15 Jul 2011 21:47:29 +0000"  >&lt;p&gt;It could be as simple as creating a very simple GenercData.Record with a string field set to have the &quot;&#8482;&quot; in there (you can place unicode utf8 directly in the source, or use a \u literal).&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Schema s = Schema.parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;record\&lt;span class=&quot;code-quote&quot;&gt;&quot;, \&quot;&lt;/span&gt;fields\&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{\&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;bar\&lt;span class=&quot;code-quote&quot;&gt;&quot;, \&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;string\&lt;span class=&quot;code-quote&quot;&gt;&quot;}]}&quot;&lt;/span&gt;);
GenericData.Record foo = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Record(s);
foo.put(0, &lt;span class=&quot;code-quote&quot;&gt;&quot;utf8 trademark &lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;-&amp;gt; &#8482; &amp;lt;-&quot;&lt;/span&gt;);
Assert.assertEquals(expected, foo.toString());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; </comment>
                            <comment id="13066237" author="tebeka" created="Fri, 15 Jul 2011 21:55:28 +0000"  >&lt;p&gt;Avro file that is encoded to invalid JSON&lt;/p&gt;</comment>
                            <comment id="13066244" author="scott_carey" created="Fri, 15 Jul 2011 22:05:27 +0000"  >&lt;p&gt;I tried adding the below to TestGenericData.java:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  @Test
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testUtf8String() {
    Schema s = Schema.parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;record\&lt;span class=&quot;code-quote&quot;&gt;&quot;, \&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;foo\&lt;span class=&quot;code-quote&quot;&gt;&quot;, \&quot;&lt;/span&gt;fields\&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{\&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;bar\&lt;span class=&quot;code-quote&quot;&gt;&quot;, \&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:[\&quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;string\&lt;span class=&quot;code-quote&quot;&gt;&quot;]}]}&quot;&lt;/span&gt;);
    GenericRecord foo = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Record(s);
    foo.put(0, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Utf8(&lt;span class=&quot;code-quote&quot;&gt;&quot;utf8 trademark &lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;-&amp;gt; &#8482; &amp;lt;-&quot;&lt;/span&gt;));
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(foo);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But it did not print out anything suspicious.  I have not tried it using your data file.  This is with trunk &amp;#8211; are you using trunk or 1.5.1?&lt;/p&gt;</comment>
                            <comment id="13066260" author="tebeka" created="Fri, 15 Jul 2011 22:21:31 +0000"  >&lt;p&gt;Adding the test Scott suggested.&lt;/p&gt;</comment>
                            <comment id="13066296" author="scott_carey" created="Fri, 15 Jul 2011 23:22:52 +0000"  >&lt;p&gt;Sorry, I should have noticed this earlier:  This was fixed in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-851&quot; title=&quot;Unicode issue in JSON encoding from Java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-851&quot;&gt;&lt;del&gt;AVRO-851&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The test below fails if I revert &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-851&quot; title=&quot;Unicode issue in JSON encoding from Java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-851&quot;&gt;&lt;del&gt;AVRO-851&lt;/del&gt;&lt;/a&gt; on trunk.  &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-851&quot; title=&quot;Unicode issue in JSON encoding from Java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-851&quot;&gt;&lt;del&gt;AVRO-851&lt;/del&gt;&lt;/a&gt; likely fixes the issue you see too.  I am not sure if &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-851&quot; title=&quot;Unicode issue in JSON encoding from Java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-851&quot;&gt;&lt;del&gt;AVRO-851&lt;/del&gt;&lt;/a&gt; made it into 1.5.2&apos;s release candidate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-851&quot; title=&quot;Unicode issue in JSON encoding from Java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-851&quot;&gt;&lt;del&gt;AVRO-851&lt;/del&gt;&lt;/a&gt; did not switch out to Jackson,  I think that is still a valuable improvement.  &lt;/p&gt;

&lt;p&gt;However, it appears that the patch here alters the output &amp;#8211; it does not escape the character: &apos;\u2013&apos;, leaving it as a literal utf8 char (&apos;&#8211;&apos;).  Is it required to escape unicode characters in this range?  Jackson apparently does not in the default configuration.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  @Test
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testUtf8StringPrint() {
    Schema s = Schema.parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;record\&lt;span class=&quot;code-quote&quot;&gt;&quot;, \&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;foo\&lt;span class=&quot;code-quote&quot;&gt;&quot;, \&quot;&lt;/span&gt;fields\&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{\&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;bar\&lt;span class=&quot;code-quote&quot;&gt;&quot;, \&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:[\&quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;string\&lt;span class=&quot;code-quote&quot;&gt;&quot;]}]}&quot;&lt;/span&gt;);
    GenericRecord foo = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericData.Record(s);
    foo.put(0, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Utf8(&lt;span class=&quot;code-quote&quot;&gt;&quot;unicode &lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;-&amp;gt; \u2013 &amp;lt;-&quot;&lt;/span&gt;));
    assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;bar\&lt;span class=&quot;code-quote&quot;&gt;&quot;: \&quot;&lt;/span&gt;unicode &lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;-&amp;gt; \\u2013 &amp;lt;-\&lt;span class=&quot;code-quote&quot;&gt;&quot;}&quot;&lt;/span&gt;, foo.toString());
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13067172" author="tebeka" created="Mon, 18 Jul 2011 17:47:29 +0000"  >&lt;p&gt;I&apos;m not an expert on the subject, but IMO JSON is utf-8.&lt;/p&gt;</comment>
                            <comment id="13067283" author="scott_carey" created="Mon, 18 Jul 2011 20:45:27 +0000"  >&lt;p&gt;&lt;a href=&quot;http://www.json.org/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.json.org/&lt;/a&gt;&lt;br/&gt;
indicates that all Unicode characters that are not control characters or &quot; or \  are valid.  It does not specify what encoding is valid, just that it is Unicode.  So I assume that it must be consistent with whatever encoding the entire document is in.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4627.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.ietf.org/rfc/rfc4627.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Is more precise, and Jackson seems to be implementing that.  In that case, only the control characters between 00 and 1F inclusive are required to be encoded, along with \ and &quot;.  &lt;/p&gt;

&lt;p&gt;The old code encoded more code points, which will print out more cleanly in some cases but has nothing to do with JSON compliance.&lt;/p&gt;

&lt;p&gt;I think we can safely delegate this to Jackson and trust it outputs valid JSON string encodings.&lt;/p&gt;
</comment>
                            <comment id="13070718" author="cutting" created="Mon, 25 Jul 2011 19:53:04 +0000"  >&lt;p&gt;So we have two different patches for this, one here and one in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-851&quot; title=&quot;Unicode issue in JSON encoding from Java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-851&quot;&gt;&lt;del&gt;AVRO-851&lt;/del&gt;&lt;/a&gt;.  This one has the advantage that it uses Jackson, and is thus more likely to produce valid JSON.  However it makes a deep copy of data structures, which probably adversely affects performance.  Performance here is probably important.&lt;/p&gt;

&lt;p&gt;We could develop an implementation that, instead of Jackson&apos;s ObjectMapper, uses Jackson&apos;s lower-level JsonGenerator API, as is done in Schema.java.  That might both perform well and delegate JSON details to Jackson.  On the other hand, JSON is simple enough that the approach in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-851&quot; title=&quot;Unicode issue in JSON encoding from Java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-851&quot;&gt;&lt;del&gt;AVRO-851&lt;/del&gt;&lt;/a&gt; might be less code and work well enough.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="13455199" author="cutting" created="Thu, 13 Sep 2012 20:09:07 +0000"  >&lt;p&gt;Closing this as a duplicate of &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-851&quot; title=&quot;Unicode issue in JSON encoding from Java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-851&quot;&gt;&lt;del&gt;AVRO-851&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="12512935">AVRO-851</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12486694" name="AVRO-860.diff" size="7176" author="tebeka" created="Fri, 15 Jul 2011 22:21:31 +0000"/>
                            <attachment id="12486665" name="AVRO-860.diff" size="6173" author="tebeka" created="Fri, 15 Jul 2011 19:19:48 +0000"/>
                            <attachment id="12486689" name="m.avro" size="403" author="tebeka" created="Fri, 15 Jul 2011 21:55:28 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 14 Jul 2011 19:03:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>66988</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 years, 19 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2wv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80234</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-861] Remove dependency on C99 stdbool.h header</title>
                <link>https://issues.apache.org/jira/browse/AVRO-861</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Buildbot raised on error on Solaris, saying that the stdbool.h header is only allowed in C99 code.  Bruce pointed out that it would be safer and more portable to not rely on any C99 standards if we don&apos;t have to.  In this case, it&apos;s easy enough to replace bool with int, true with 1, and false with 0.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12514134">AVRO-861</key>
            <summary>Remove dependency on C99 stdbool.h header</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dcreager">Douglas Creager</assignee>
                                    <reporter username="dcreager">Douglas Creager</reporter>
                        <labels>
                    </labels>
                <created>Thu, 14 Jul 2011 23:11:06 +0000</created>
                <updated>Tue, 1 Nov 2011 18:36:09 +0000</updated>
                            <resolved>Fri, 15 Jul 2011 00:58:31 +0000</resolved>
                                    <version>1.6.0</version>
                                    <fixVersion>1.6.0</fixVersion>
                                    <component>c</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13065599" author="dcreager" created="Thu, 14 Jul 2011 23:12:06 +0000"  >&lt;p&gt;Here&apos;s a patch that removes all traces of stdbool.h&lt;/p&gt;</comment>
                            <comment id="13065642" author="dcreager" created="Fri, 15 Jul 2011 00:58:31 +0000"  >&lt;p&gt;Committed to SVN.  The Solaris buildbot is succeeding again.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12486532" name="0001-AVRO-861.-C-Remove-dependency-on-stdbool.h.patch" size="23959" author="dcreager" created="Thu, 14 Jul 2011 23:12:06 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>67989</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 28 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e2x3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>80235</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
