<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:13:53 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2010-5-5+AND+created+%3C%3D+2010-5-12+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="4" total="4"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-536] ruby: AvroTypeError should propagate back from the server</title>
                <link>https://issues.apache.org/jira/browse/AVRO-536</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Datum write error with the wrong schema (AvroTypeError) should propagate back from the server. Should also check for datum reader errors propagating back correctly.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12463724">AVRO-536</key>
            <summary>ruby: AvroTypeError should propagate back from the server</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="jmhodges">Jeff Hodges</assignee>
                                    <reporter username="jmhodges">Jeff Hodges</reporter>
                        <labels>
                    </labels>
                <created>Wed, 5 May 2010 00:42:39 +0000</created>
                <updated>Thu, 26 Aug 2010 19:57:59 +0000</updated>
                                                                            <component>ruby</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94848</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 38 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e0xj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79913</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-537] ruby: keep connection between requests to same client</title>
                <link>https://issues.apache.org/jira/browse/AVRO-537</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Currently, all ruby servers will disconnect (sort of) a client after serving one request to said client.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12463742">AVRO-537</key>
            <summary>ruby: keep connection between requests to same client</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="gabortorok">Gabor Torok</assignee>
                                    <reporter username="jmhodges">Jeff Hodges</reporter>
                        <labels>
                    </labels>
                <created>Wed, 5 May 2010 07:04:02 +0000</created>
                <updated>Fri, 16 Dec 2011 17:45:27 +0000</updated>
                            <resolved>Fri, 8 Oct 2010 21:06:38 +0000</resolved>
                                    <version>1.3.2</version>
                                    <fixVersion>1.4.1</fixVersion>
                                    <component>ruby</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12916632" author="gabortorok" created="Thu, 30 Sep 2010 20:07:06 +0000"  >&lt;p&gt;This is esp. a problem when using avro with cassandra (svn trunk). The 1.3 version of avro won&apos;t work with cassandra because of this bug. I made the following change to get it to work:&lt;/p&gt;

&lt;p&gt;The ruby code creates a new http connection for each call to transceive. Here &lt;br/&gt;
is what I changed to make it work:&lt;/p&gt;

&lt;p&gt;gabor$ diff /usr/local/lib/ruby/gems/1.8/gems/avro-1.4.0/lib/avro/ipc.rb &lt;br/&gt;
~/avro-trunk/lang/ruby/lib/avro/ipc.rb &lt;br/&gt;
518d517&lt;br/&gt;
&amp;lt;   require &quot;net/http&quot;&lt;br/&gt;
525d523&lt;br/&gt;
&amp;lt;       @conn = Net::HTTP.start host, port&lt;br/&gt;
531c529,531&lt;br/&gt;
&amp;lt;       resp = @conn.post(&apos;/&apos;, writer.to_s, &lt;/p&gt;
{&apos;Content-Type&apos; =&amp;gt; &apos;avro/binary&apos;})&lt;br/&gt;
&amp;#8212;&lt;br/&gt;
&amp;gt;       resp = Net::HTTP.start(host, port) do |http|&lt;br/&gt;
&amp;gt;         http.post(&apos;/&apos;, writer.to_s, {&apos;Content-Type&apos; =&amp;gt; &apos;avro/binary&apos;}
&lt;p&gt;)&lt;br/&gt;
&amp;gt;       end&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12919083" author="cutting" created="Thu, 7 Oct 2010 22:28:09 +0000"  >&lt;p&gt;I&apos;ve converted your diff to a patch file.  This passes tests for me.  Jeff, any objection to committing this?&lt;/p&gt;</comment>
                            <comment id="12919378" author="cutting" created="Fri, 8 Oct 2010 21:06:38 +0000"  >&lt;p&gt;I just committed this.&lt;/p&gt;</comment>
                            <comment id="13171085" author="pdlug" created="Fri, 16 Dec 2011 17:27:08 +0000"  >&lt;p&gt;This was reported as fixed in 1.4.1, I have the latest ruby gem (1.6.1) and the patch is not included.&lt;/p&gt;</comment>
                            <comment id="13171095" author="cutting" created="Fri, 16 Dec 2011 17:45:27 +0000"  >&lt;p&gt;When I download from &lt;a href=&quot;http://rubygems.org/gems/avro/versions/1.6.1&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://rubygems.org/gems/avro/versions/1.6.1&lt;/a&gt; and extract the files, I find that ipc.rb contains the text &apos;resp = @conn.post&apos; as added by this patch.  Whether this patch achieves the desired effect is something that I cannot attest to, since no test was provided with the patch.  If this is still a problem, please open a new issue.  Thanks!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12456639" name="AVRO-537.patch" size="1008" author="cutting" created="Thu, 7 Oct 2010 22:28:09 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 30 Sep 2010 20:07:06 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94849</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 6 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e0xr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79914</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-538] No way to raise errors in a Ruby IPC server such that they get returned as an avro error type</title>
                <link>https://issues.apache.org/jira/browse/AVRO-538</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Raising an AvroError or even a subclass thereof doesn&apos;t simply return a nice clean Error to the client despite errors being specified in the schema.&lt;/p&gt;

&lt;p&gt;Instead, the client sees:&lt;/p&gt;

&lt;p&gt;.../lib/ruby/gems/1.8/gems/avro-1.4.0.pre1/lib/avro/io.rb:46:in `byte!&apos;: undefined method `[]&apos; for nil:NilClass (NoMethodError)&lt;br/&gt;
.../lib/ruby/gems/1.8/gems/avro-1.4.0.pre1/lib/avro/io.rb:63:in `read_long&apos;&lt;br/&gt;
.../lib/ruby/gems/1.8/gems/avro-1.4.0.pre1/lib/avro/io.rb:379:in `read_union&apos;&lt;br/&gt;
.../lib/ruby/gems/1.8/gems/avro-1.4.0.pre1/lib/avro/io.rb:315:in `read_data&apos;&lt;br/&gt;
.../lib/ruby/gems/1.8/gems/avro-1.4.0.pre1/lib/avro/io.rb:281:in `read&apos;&lt;br/&gt;
.../lib/ruby/gems/1.8/gems/avro-1.4.0.pre1/lib/avro/ipc.rb:224:in `read_error&apos;&lt;br/&gt;
.../lib/ruby/gems/1.8/gems/avro-1.4.0.pre1/lib/avro/ipc.rb:213:in `read_call_response&apos;&lt;br/&gt;
.../lib/ruby/gems/1.8/gems/avro-1.4.0.pre1/lib/avro/ipc.rb:113:in `request&apos;&lt;/p&gt;</description>
                <environment>&lt;p&gt;Mac OS X&lt;/p&gt;</environment>
        <key id="12463831">AVRO-538</key>
            <summary>No way to raise errors in a Ruby IPC server such that they get returned as an avro error type</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="raelity">Rael Dornfest</reporter>
                        <labels>
                    </labels>
                <created>Wed, 5 May 2010 23:22:20 +0000</created>
                <updated>Wed, 5 May 2010 23:22:20 +0000</updated>
                                            <version>1.4.0</version>
                                                    <component>ruby</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>94850</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 38 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e0xz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79915</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-539] Allow asynchronous clients to specify a callback to be run when server processing completes</title>
                <link>https://issues.apache.org/jira/browse/AVRO-539</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description></description>
                <environment></environment>
        <key id="12464267">AVRO-539</key>
            <summary>Allow asynchronous clients to specify a callback to be run when server processing completes</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jbaldassari">James Baldassari</assignee>
                                    <reporter username="hammer">Jeff Hammerbacher</reporter>
                        <labels>
                    </labels>
                <created>Tue, 11 May 2010 17:17:21 +0000</created>
                <updated>Tue, 13 Dec 2011 19:06:45 +0000</updated>
                            <resolved>Thu, 16 Jun 2011 09:35:35 +0000</resolved>
                                                    <fixVersion>1.5.2</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13042624" author="jbaldassari" created="Thu, 2 Jun 2011 06:23:46 +0000"  >&lt;p&gt;Patch to enable asynchronous RPCs in Java&lt;/p&gt;</comment>
                            <comment id="13042626" author="jbaldassari" created="Thu, 2 Jun 2011 06:26:50 +0000"  >&lt;p&gt;Here&apos;s a high-level description of my changes copied from my e-mail to the users list:&lt;/p&gt;

&lt;p&gt;I just finished a second attempt at the asynchronous RPC implementation incorporating Philip&apos;s feedback and some other ideas that I had.  I think it&apos;s easiest to explain how it works with an example.  So here&apos;s a simple IDL and schema:&lt;/p&gt;

&lt;p&gt;IDL:&lt;br/&gt;
protocol Calculator {&lt;br/&gt;
  int add(int arg1, int arg2);&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;Schema:&lt;br/&gt;
{&quot;protocol&quot;:&quot;Calculator&quot;,&quot;messages&quot;:{&lt;br/&gt;
  &quot;add&quot;:{&lt;br/&gt;
    &quot;request&quot;:[&lt;/p&gt;
{&quot;name&quot;:&quot;arg1&quot;,&quot;type&quot;:&quot;int&quot;}
&lt;p&gt;,&lt;/p&gt;
{&quot;name&quot;:&quot;arg2&quot;,&quot;type&quot;:&quot;int&quot;}
&lt;p&gt;],&lt;br/&gt;
    &quot;response&quot;:&quot;int&quot;}}}&lt;/p&gt;

&lt;p&gt;No changes are required to the IDL or schema to enable async RPCs.  The Avro Java compiler will generate two interfaces instead of one.  The first interface, Calculator, contains the standard synchronous methods.  The second interface, CalculatorClient, extends Calculator and adds asynchronous methods for all two-way messages.  The reason why the async methods are separated out into a separate interface is that the responder/server side doesn&apos;t need to know (and shouldn&apos;t know) about the client-side async methods.  So the Responder/server implements Calculator, and the Requestor/client can either use Calculator or CalculatorClient to invoke the RPCs.  For reference, here is what the two generated interfaces look like (without the PROTOCOL field and package names):&lt;/p&gt;

&lt;p&gt;public interface Calculator {&lt;br/&gt;
  int add(int arg1, int arg2) throws AvroRemoteException;&lt;br/&gt;
}&lt;br/&gt;
public interface CalculatorClient extends Calculator {&lt;br/&gt;
  CallFuture&amp;lt;Integer&amp;gt; addAsync(int arg1, int arg2) throws IOException;&lt;br/&gt;
  CallFuture&amp;lt;Integer&amp;gt; addAsync(int arg1, int arg2, Callback&amp;lt;Integer&amp;gt; callback) throws IOException;&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;The CalculatorClient interface is the only new component.  It has two methods for each message, one that takes a Callback and one that does not.  Both methods return a CallFuture so that the client has the option of using either the Future or the Callback to obtain the result of the RPC.  Future.get() blocks until the RPC is complete, and either returns the result or throws an exception if one occurred during the RPC.  The Callback interface has two methods, handleResult(T result) and handleError(Exception error).  One or the other is always called depending on whether the RPC was successful or an Exception was thrown.&lt;/p&gt;

&lt;p&gt;In addition to the compiler changes, I had to make some changes in the avro-ipc project to get the async plumbing to work correctly.  Most of these changes are in Requestor and NettyTransceiver.  As part of the changes I had to make to Requestor I ended up replacing a couple of large synchronized blocks with finer-grained critical sections protected by reentrant locks.  I think this change improved performance overall, at least in the case where multiple threads are using the same client.  I implemented a rudimentary performance test that spins up a bunch of threads, executes the same RPC (Simple.hello(String)) repeatedly for a fixed amount of time, and then calculates the average number of RPCs completed per second.  With Avro 1.5.1 I got 7,450 RPCs/sec, and with my modified version of trunk I got 19,050 RPCs/sec.  That was a very simple test, but if there is a standard benchmark that the Avro team uses I&apos;d be happy to rerun my tests using that.&lt;/p&gt;

&lt;p&gt;So that&apos;s basically it.  All existing unit tests pass, and I wrote additional tests for all the new async functionality.  I&apos;ve documented all public interfaces, and I think the changes are ready to be reviewed whenever the committers have time to take a look.  Please let me know if you have any comments/questions.&lt;/p&gt;</comment>
                            <comment id="13042628" author="jbaldassari" created="Thu, 2 Jun 2011 06:33:09 +0000"  >&lt;p&gt;Patch is in ReviewBoard: &lt;a href=&quot;https://reviews.apache.org/r/834/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/834/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13042654" author="cutting" created="Thu, 2 Jun 2011 09:10:38 +0000"  >&lt;p&gt;This is great stuff!  A few comments on the patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Rather than calling the new APIs &apos;asynchronous&apos; might we instead consider them &apos;Callback-based&apos; and/or &apos;Future-based&apos;?  They&apos;d be friendly to async implementations, but a synchronous implementation would be permitted.  In particular, I think we can remove &apos;asynchronous&apos; from the names of these methods.&lt;/li&gt;
	&lt;li&gt;Do we really need both Callback-based and Future-based APIs?&lt;/li&gt;
	&lt;li&gt;The name of the generated interface and methods should avoid potential collisions with user-defined interfaces and messages, perhaps by using &apos;$&apos;.  Alternately, we might just generate a single interface and not use different method names, rather distinguishing by method signature.  No user method should accept a org.apache.avro.ipc.Callback parameter, so we would not need to worry about method signature collisions.&lt;/li&gt;
	&lt;li&gt;Should we make generation of Callback/Future-based interfaces optional?&lt;/li&gt;
	&lt;li&gt;in Transceiver, can we implement the Callback/Future-based API synchronously in terms of the existing API, rather than throwing an exception?&lt;/li&gt;
	&lt;li&gt;in Requestor, can we implement the synchronous version in terms of the Callback-based API so that less logic is replicated?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13042828" author="jbaldassari" created="Thu, 2 Jun 2011 15:33:06 +0000"  >&lt;p&gt;Thanks for the comments, Doug!  I&apos;ll try to address them all:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Rather than calling the new APIs &apos;asynchronous&apos; might we instead consider them &apos;Callback-based&apos; and/or &apos;Future-based&apos;? They&apos;d be friendly to async implementations, but a synchronous implementation would be permitted. In particular, I think we can remove &apos;asynchronous&apos; from the names of these methods.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I see your point.  The new API could theoretically be used in synchronous calls when the Transceiver doesn&apos;t support async I/O, so it isn&apos;t inherently asynchronous.  I&apos;ll try to either eliminate the &quot;Asynchronous&quot; from the method names and simply overload them or, when necessary, change these new method names so that they end in &quot;Callback&quot; or &quot;Future&quot; as appropriate.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do we really need both Callback-based and Future-based APIs?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I personally find Callbacks to be more practical than Futures.  However, there may be use cases where Futures are more appropriate, so I just thought it would be better to give users the option to use either one.  Since the CallFuture class was already being used in NettyTransceiver before I started making changes, I basically got the Future API for free.  All I did was expose it in the public API.  Users can always ignore the CallFuture that is returned by the async methods.  However, I wouldn&apos;t be opposed to removing the Future API if you think it&apos;s just cluttering the interface.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The name of the generated interface and methods should avoid potential collisions with user-defined interfaces and messages, perhaps by using &apos;$&apos;. Alternately, we might just generate a single interface and not use different method names, rather distinguishing by method signature. No user method should accept a org.apache.avro.ipc.Callback parameter, so we would not need to worry about method signature collisions.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s a good point.  So one proposal is to generate methods like methodName$Callback(...) to eliminate naming conflicts.  Regarding your second proposal, I think it would be great to overload the original methods with the additional Callback parameter rather than creating special method names.  I&apos;ll see what I can do with that.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Should we make generation of Callback/Future-based interfaces optional?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think that&apos;s a good idea.  In my first attempt at this patch I made the interfaces optional by adding the &apos;async&apos; keyword/property to the IDL and schema.  Philip Zeyliger pointed out that this probably isn&apos;t the cleanest approach, and I agree.  Can you think of a better way to make the new interfaces optional?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;in Transceiver, can we implement the Callback/Future-based API synchronously in terms of the existing API, rather than throwing an exception?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think you&apos;re referring to the fact that the non-Netty Transceivers throw UnsupportedOperationException.  Yes, I think it should be possible to make these methods work in a synchronous way for non-Netty Transceivers.  So the default implementation in Transceiver would be synchronous, and NettyTransceiver would override it to make it asynchronous.  I&apos;ll work on that.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;in Requestor, can we implement the synchronous version in terms of the Callback-based API so that less logic is replicated?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I did quite a bit of refactoring in Requestor to prevent duplicating code between the sync and async interfaces.  However, once I make the change from your previous comment to make non-Netty Transceivers work with the async APIs, I think the synchronous methods can be implemented using only the asynchronous API.  So that will further reduce duplication.  Note that this is one case where it would be more useful to use the Future API rather than the Callback API.&lt;/p&gt;

&lt;p&gt;Thanks again for the feedback.  I think your suggestions are going to really improve this patch.  I&apos;ll work on making these changes and post an update to the patch.&lt;/p&gt;</comment>
                            <comment id="13043049" author="scott_carey" created="Thu, 2 Jun 2011 21:10:32 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can you think of a better way to make the new interfaces optional?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Make the SpecificCompiler take it as an option, and ant/maven can pass in a flag to enable it?  Can this option leverage templates?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;Note that this is one case where it would be more useful to use the Future API rather than the Callback API.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Futures are very useful for using an asynchronous API in a synchronous fashion, or in hybrid use cases.  Callbacks require more caution with concurrency issues, since the client does not control the thread that executes the callback.&lt;/p&gt;</comment>
                            <comment id="13043258" author="cutting" created="Fri, 3 Jun 2011 09:05:27 +0000"  >&lt;p&gt;I wonder if we might only implement a Future-based API, if they are less error-prone and more general, as Scott indicates.  James, can you elaborate on why you prefer Callbacks?&lt;/p&gt;

&lt;p&gt;Also, looking again at the patch, I wonder if can use Future&amp;lt;T&amp;gt; in the public APIs rather than CallFuture&amp;lt;T&amp;gt;?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="13043415" author="philip" created="Fri, 3 Jun 2011 15:46:07 +0000"  >&lt;p&gt;BTW, Google Guava has &lt;a href=&quot;http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/util/concurrent/ListenableFuture.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/util/concurrent/ListenableFuture.html&lt;/a&gt;, which may be a working middle ground.&lt;/p&gt;</comment>
                            <comment id="13043428" author="scott_carey" created="Fri, 3 Jun 2011 16:00:43 +0000"  >&lt;p&gt;I wouldn&apos;t say Futures are more general.  Its only a few lines of code to create a Future from a callback.&lt;/p&gt;

&lt;p&gt;A future is just a callback with a lock, that implements the callback by storing the result for access through the future API.  We could write a class or take one from elsewhere that does this, and users could pass this in as the callback.&lt;/p&gt;

&lt;p&gt;Futures are more natural to use for imperative style asynchronous work:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Send a request, do some other work, then get or wait for the result.&lt;/li&gt;
	&lt;li&gt;Iterate through a list of asynchronous requests, then iterate over the future results (pipelined batch).&lt;/li&gt;
	&lt;li&gt;Often more useful if there is shared state managed by the calling thread.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Callbacks are useful for event based / message based systems, or in general systems with a more functional style.  Generally useful for high throughput &apos;server&apos; applications or client applications with event based frameworks (often UI&apos;s).&lt;/p&gt;

&lt;p&gt;I think we need both, or an easy way for users to get one from the other.&lt;/p&gt;</comment>
                            <comment id="13043948" author="jbaldassari" created="Fri, 3 Jun 2011 18:30:21 +0000"  >&lt;p&gt;I agree that exposing both a future and callback API is preferable because it gives users a lot of flexibility in how they implement their clients.  I don&apos;t think there is a one-size-fits-all solution for asynchronous messaging.&lt;/p&gt;

&lt;p&gt;Doug, to answer a couple of your questions:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Yes, we can absolutely use Future&amp;lt;T&amp;gt; rather than CallFuture&amp;lt;T&amp;gt; in the generated interfaces as CallFuture implements Future, and the extra methods in CallFuture probably aren&apos;t useful to most clients anyway.&lt;/li&gt;
	&lt;li&gt;I prefer callbacks to futures in general because in a truly asynchronous programming style the callback pattern is easier to implement.  With a Future you either have to wait on it immediately (which isn&apos;t asynchronous from the client&apos;s perspective) or you have to stick it in some collection and have other threads iterating over that collection processing and cleaning up completed Futures.  Back to my original point, Futures are more convenient in some cases, which is why I think it&apos;s good to have both.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;One other thing users will have to be aware of when using the callback API is that their callback handlers should never perform long-running tasks because that will block the event handler thread in the Netty thread pool, potentially preventing future messages from being processed.  They should either perform very quick tasks or pass off the callback result to a queue/thread pool for processing.  We should explain some of these nuances on the wiki or in some quickstart guide.&lt;/p&gt;

&lt;p&gt;So unless anyone has any objections, I&apos;m going to proceed with a new version of the patch that generates client-facing interfaces like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;CalculatorClient.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; CalculatorClient &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Calculator {
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Protocol PROTOCOL = Calculator.PROTOCOL;
  Future&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; add(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; arg1, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; arg2, Callback&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; callback) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the user wants to use only the Future and not the Callback, the user can pass in a null for the Callback parameter.&lt;/p&gt;</comment>
                            <comment id="13044060" author="scott_carey" created="Fri, 3 Jun 2011 21:16:35 +0000"  >&lt;p&gt;One other option, don&apos;t return a future.  Instead a user can make one.  This is more verbose however:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void add(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; arg1, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; arg2, Callback&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; cb) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException; 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use a future:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  Future&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; f = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ProtocolFuture&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt;();
  add(1, 2, f);
  &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; result = f.get();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ProtocolFuture&amp;lt;T&amp;gt; is relatively simple, with pseudo-code like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;ProtocolFuture&amp;lt;T&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Future&amp;lt;T&amp;gt;, Callback&amp;lt;T&amp;gt; {
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; T result = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; CountDownLatch latch = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CountDownLatch(1);

  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; void handleResult(T result) {
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.result = result;
    latch.countDown();
  }

  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void T get() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException {
    latch.await();
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although the above class isn&apos;t so useful for Jetty, it could potentially be for other protocol implementations.&lt;/p&gt;

&lt;p&gt;For very high throughput, creating an unused Future with each call might be a small problem too.&lt;/p&gt;

&lt;p&gt;I&apos;m not convinced I like this solution better, it is an interesting alternative though.&lt;/p&gt;</comment>
                            <comment id="13044074" author="jbaldassari" created="Fri, 3 Jun 2011 21:40:35 +0000"  >&lt;p&gt;That is an interesting idea, Scott.  I think it&apos;s a good option for a couple of reasons.  We don&apos;t have to return a Future with every RPC call, which is likely to be ignored in most cases.  It also makes the generated interfaces cleaner and less confusing for someone trying to figure out how to use it for the first time.&lt;/p&gt;

&lt;p&gt;We would need to make a minor change to ProtocolFuture to override handleError(Exception e) and throw that Exception inside get() if an error is returned by the callback.  Also, ProtocolFuture could simply wrap a CallFuture&amp;lt;T&amp;gt;.  Something like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;ProtocolFuture&amp;lt;T&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Future&amp;lt;T&amp;gt;, Callback&amp;lt;T&amp;gt; {
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; CallFuture&amp;lt;T&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;future&lt;/span&gt; = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CallFuture&amp;lt;T&amp;gt;();

  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; void handleResult(T result) {
    &lt;span class=&quot;code-keyword&quot;&gt;future&lt;/span&gt;.setResponse(result);
  }

  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; void handleError(Exception e) {
    &lt;span class=&quot;code-keyword&quot;&gt;future&lt;/span&gt;.setError(e);
  }

  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; T get() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException, ExecutionException {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;future&lt;/span&gt;.get();
  }

  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; T get(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; timeout, TimeUnit unit) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException, ExecutionException, TimeoutException {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;future&lt;/span&gt;.get(timeout, unit);
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After thinking about it for a bit, I really like this approach.  The interface is clean, and you can still use either Callbacks or Futures.  Any other opinions?&lt;/p&gt;</comment>
                            <comment id="13044130" author="scott_carey" created="Fri, 3 Jun 2011 23:39:03 +0000"  >&lt;p&gt;I think CallFuture needs to use a CountDownLatch and not a Semaphore so that two consecutive calls to get() don&apos;t cause it to block forever.  Or , if there is a race condition between retrieval and setting the result I think the semaphore may block.&lt;/p&gt;

&lt;p&gt;The Future interface defines get() as the following in the javadoc:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;V get()
      throws InterruptedException,
             ExecutionException

    Waits if necessary for the computation to complete, and then retrieves its result.

    Returns:
        the computed result 
    Throws:
        CancellationException - if the computation was cancelled 
        ExecutionException - if the computation threw an exception 
        InterruptedException - if the current thread was interrupted while waiting

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I interpret that to mean that it only blocks if necessary &amp;#8211; if the result has not yet been returned.  That behavior can be achieved with a CountDownLatch, so that it blocks only until the count reaches 0.  Additionally, isDone() will not return true if get() is called after the result is set in the current implementation, which does not comply with the Future interface semantics.  Using a CountDownLatch also simplifies the code.&lt;/p&gt;

&lt;p&gt;Perhaps we should have CallFuture implement Callback&amp;lt;T&amp;gt;, replacing setResponse and setError with handleResponse and handleError? Do we want to expose CallFuture in the public API?&lt;/p&gt;</comment>
                            <comment id="13044174" author="jbaldassari" created="Sat, 4 Jun 2011 02:53:19 +0000"  >&lt;p&gt;Good catch, Scott.  It looks like CallFuture has been that way from the beginning.  I think you&apos;re right that it would be better to use a CountDownLatch in this case.&lt;/p&gt;

&lt;p&gt;I like your idea of having CallFuture implement Callback.  That would be a good reuse of code, and it would make it easier to implement the synchronous API using the callback API.  I&apos;ll try it out this weekend and see how it looks.&lt;/p&gt;</comment>
                            <comment id="13044639" author="jbaldassari" created="Sun, 5 Jun 2011 22:38:35 +0000"  >&lt;p&gt;I&apos;m just about ready to post a new version of the patch incorporating the ideas we&apos;ve discussed here.  I did run into one problem that I wanted to run by you guys.  I was trying to verify that all the various handshake scenarios worked to make sure that I didn&apos;t introduce any regressions.  I found that there was already a nice unit test for this, TestProtocolSpecific, in particular the testParamVariation() test.  However, there didn&apos;t appear to be a version of this test for Netty, so I made one by trivially extending TestProtocolSpecific like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;TestProtocolNetty &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; TestProtocolSpecific {
  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Server createServer(Responder testResponder) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; NettyServer(responder, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; InetSocketAddress(0));
  }
  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Transceiver createTransceiver() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception{
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; NettyTransceiver(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; InetSocketAddress(server.getPort()));
  } 
  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getExpectedHandshakeCount() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; REPEATING;
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When I ran that unit test, the testParamVariation() case hung.  I couldn&apos;t figure out what was wrong at first, so I decided to run that same test against a clean checkout of trunk which didn&apos;t have any of my changes.  It failed with a NPE when writing out data to the Netty channel.  So I started thinking this might be an existing bug.  When I dug deeper I figured out basically what was going on.  In NettyServer.NettyServerAvroHandler, around line 145, the server closes the Netty channel if the handshake is not complete:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;} &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(!connectionMetadata.isConnected()) {
    e.getChannel().close();
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So I believe what&apos;s happening is that the client performs the initial handshake, the server detects that the protocols aren&apos;t exactly the same, and then closes the channel.  However, the client (NettyTransceiver) doesn&apos;t ever re-establish the connection after the server closes it.  So the client attempts to write the second part of the handshake to the Netty channel, but the channel has been closed, so the server never receives the handshake and never sends its reply.  This is why the test was hanging for me while attempting to read from the channel (the client was waiting for a reply that never came).  When I commented out the &quot;e.getChannel().close()&quot; line in NettyServer the test passed both against a clean trunk and with my patch.  I was hoping someone could shed some light on why the server is closing the channel here.  Is this really necessary?&lt;/p&gt;</comment>
                            <comment id="13044680" author="jbaldassari" created="Mon, 6 Jun 2011 02:18:52 +0000"  >&lt;p&gt;I just finished a new version of the patch that I think addresses all the issues we&apos;ve been discussing here so far.  Here is a summary of the changes since the first patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Removed &quot;Asynchronous&quot; from all method names.  The new methods are just overloaded with an additional Callback parameter now.&lt;/li&gt;
	&lt;li&gt;Removed the CallFuture from the new generated client interfaces.  These methods simply take an additional Callback&amp;lt;T&amp;gt; parameter and return void.  For example:
	&lt;ul&gt;
		&lt;li&gt;void add(int arg1, int arg2, Callback&amp;lt;Integer&amp;gt;) throws IOException;&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Modified CallFuture
	&lt;ul&gt;
		&lt;li&gt;Replaced the Semaphore with a CountDownLatch&lt;/li&gt;
		&lt;li&gt;Made CallFuture implement Callback, and replaced the set(Result|Error) methods with handle(Result|Error)&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;If clients want to use a Future-based API, just create a new CallFuture&amp;lt;T&amp;gt; and pass it in as the Callback&amp;lt;T&amp;gt; parameter, then wait on the CallFuture.&lt;/li&gt;
	&lt;li&gt;The SpecificCompiler takes a new boolean argument, called generateClientInterface, that controls whether the client-specific interfaces with the Callback methods will be generated.  The Maven and Ant plugins also accept this parameter.  The default value is currently set to true, but it&apos;s easy enough to default it to false if that is preferred.&lt;/li&gt;
	&lt;li&gt;The default implementation of Transceiver.transceive(List&amp;lt;ByteBuffer&amp;gt;, TransceiverCallback) now works synchronously rather than throwing UnsupportedOperationException.  This allows the Callback-enabled interfaces to be used with non-Netty Transceivers.&lt;/li&gt;
	&lt;li&gt;Requestor.request(String, Object) is now implemented using the Callback API.  This eliminates duplication of code and functionality between the synchronous and callback APIs.&lt;/li&gt;
	&lt;li&gt;New unit test, TestProtocolNetty, which runs all TestProtocolSpecific tests using NettyServer and NettyTransceiver.  In particular, this verifies that the two-step protocol handshake works when using the Callback API (since the synchronous API is implemented using the Callback API)&lt;/li&gt;
	&lt;li&gt;Merged in changes from &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-832&quot; title=&quot;Java: requestor does not use schema resolution for message responses&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-832&quot;&gt;&lt;del&gt;AVRO-832&lt;/del&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think that&apos;s about it.  Please take a look when you get a chance, and let me know what you think.&lt;/p&gt;</comment>
                            <comment id="13044681" author="jbaldassari" created="Mon, 6 Jun 2011 02:19:50 +0000"  >&lt;p&gt;Version 2 of the 539 patch&lt;/p&gt;</comment>
                            <comment id="13044684" author="jbaldassari" created="Mon, 6 Jun 2011 02:27:59 +0000"  >&lt;p&gt;Please disregard &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-539&quot; title=&quot;Allow asynchronous clients to specify a callback to be run when server processing completes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-539&quot;&gt;&lt;del&gt;AVRO-539&lt;/del&gt;&lt;/a&gt;-v2.patch.  I accidentally made that one from the lang/java directory instead of the trunk root.  This one should apply cleanly to trunk.&lt;/p&gt;</comment>
                            <comment id="13045355" author="cutting" created="Tue, 7 Jun 2011 10:39:17 +0000"  >&lt;p&gt;Looking good!  A few comments and questions:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the flag might better be named &apos;generateCallbacks&apos; than &apos;generateClientInterface&apos;.&lt;/li&gt;
	&lt;li&gt;can we make this flag optional?  it would be nice if we don&apos;t incompatibly change so many public methods and the command line interface.&lt;/li&gt;
	&lt;li&gt;maybe instead of generating another file, we could generate a nested interface? e.g., 
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; Foo {
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; x();
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; Callbacks &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Foo {
    void x(Callback&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; callback);
  }
}&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;i don&apos;t think we need guards around log.debug statements that are passed a constant string.  and if the log strings are constructing then it&apos;s efficient with slf4j to use a format string, e.g., log.debug(&quot;Error in x: {}&quot;, e);&lt;/li&gt;
	&lt;li&gt;can Request, Response and RequestorTranscieverCallback be private or package-private?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Also, I will be mostly offline for the next week and may not be able to review patches very quickly.&lt;/p&gt;</comment>
                            <comment id="13045797" author="jbaldassari" created="Wed, 8 Jun 2011 05:46:47 +0000"  >&lt;p&gt;Thanks for looking it over!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;the flag might better be named &apos;generateCallbacks&apos; than &apos;generateClientInterface&apos;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;OK, easy change.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;can we make this flag optional?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I believe it&apos;s optional in the mojo and in the Ant plugin.  It should default to true if not specified.  Just in case anyone is calling SpecificCompiler directly, I&apos;ll add overloaded methods that will match the old signatures (without the generateCallbacks boolean) and will default generateCallbacks to true.  This way SpecificCompiler should be totally backwards compatible.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;maybe instead of generating another file, we could generate a nested interface?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sure.  I&apos;ll make that change.  It&apos;s probably a little cleaner with just one generated file per protocol.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;i don&apos;t think we need guards around log.debug statements that are passed a constant string&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No problem.  The isDebugEnabled checks were in there so that the full stack traces would be printed when debug mode enabled; otherwise only the exception message would be printed without the stack trace.  It&apos;s just a pattern I&apos;ve gotten used to working with high-throughput messaging in which a lot of errors can be written in a short amount of time.  I&apos;ll change these statements to be consistent with the Avro logging conventions.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;can Request, Response and RequestorTranscieverCallback be private or package-private?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Request and Response certainly can, so I&apos;ll change them.  TransceiverCallback can be made package-private, but then we should also make Transceiver.transceive(List&amp;lt;ByteBuffer&amp;gt;, TransceiverCallback) package private.  Since Transceiver.transceive(List&amp;lt;ByteBuffer&amp;gt;) is public, I thought the one that takes a Callback should also be public.  Then again, I don&apos;t think any of those transceiver methods are called from outside the package.  Your call.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also, I will be mostly offline for the next week and may not be able to review patches very quickly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That&apos;s fine.  I&apos;m swamped at work right now, so I don&apos;t think I&apos;ll have time to work on these changes until the weekend anyway.&lt;/p&gt;</comment>
                            <comment id="13045986" author="cutting" created="Wed, 8 Jun 2011 14:48:06 +0000"  >&lt;p&gt;I&apos;m now leaning towards simply eliminating the flag for callback API generation and always generating the nested interface that includes this.  Would anyone object to that?&lt;/p&gt;

&lt;p&gt;As for TranscieverCallback, you&apos;re right, it probably should remain public, or perhaps just replaced with Callback&amp;lt;List&amp;lt;ByteBuffer&amp;gt;&amp;gt;.&lt;/p&gt;
</comment>
                            <comment id="13046018" author="jbaldassari" created="Wed, 8 Jun 2011 15:38:20 +0000"  >&lt;p&gt;If no objections to always generating the Callback API, I&apos;ll revert my changes to the maven and ant plugins.&lt;/p&gt;

&lt;p&gt;TransceiverCallback doesn&apos;t really add anything, so it&apos;s probably easier to just change it to Callback&amp;lt;List&amp;lt;ByteBuffer&amp;gt;&amp;gt;.&lt;/p&gt;</comment>
                            <comment id="13048475" author="jbaldassari" created="Mon, 13 Jun 2011 05:50:01 +0000"  >&lt;p&gt;Here&apos;s a new version of the patch that addresses the latest round of comments.  The main changes are:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Reverted changes to SpecificCompiler and the maven/ant plugins because we&apos;ll always generate the callback API.&lt;/li&gt;
	&lt;li&gt;Moved callback API to in an inner class inside the generated protocol interface.  I named this sub-interface Callback.  I was also considering other names like WithCallbacks, e.g. Calculator.WithCallbacks.  Any preferences?&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13049681" author="cutting" created="Wed, 15 Jun 2011 08:47:04 +0000"  >&lt;p&gt;Looks great.  I applied this.  Tests pass.&lt;/p&gt;

&lt;p&gt;I have only a few cosmetic concerns now before I am ready to commit this.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;There are a number of whitespace-only changes and reordering of imports that are not required.  Can you please revert these?&lt;/li&gt;
	&lt;li&gt;Requestor#request(Request, Callback) should be private or package-private, no?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="13050164" author="jbaldassari" created="Thu, 16 Jun 2011 00:48:10 +0000"  >&lt;p&gt;Thanks, Doug.  I&apos;ll clean it up and submit a new patch soon.&lt;/p&gt;</comment>
                            <comment id="13050179" author="jbaldassari" created="Thu, 16 Jun 2011 01:47:58 +0000"  >&lt;p&gt;Here&apos;s a new patch.  I fixed a bunch of issues with whitespace and imports, and I changed the visibility of Requestor#request(Request, Callback).  I also removed the TransceiverCallback class.  I thought I had done that last time, but it was still there.  Please let me know if I missed anything.&lt;/p&gt;</comment>
                            <comment id="13050312" author="cutting" created="Thu, 16 Jun 2011 09:35:35 +0000"  >&lt;p&gt;I committed this.  Thanks, James!&lt;/p&gt;

&lt;p&gt;I made a few formatting changes, mostly to wrap lines longer than 80 columns.&lt;/p&gt;

&lt;p&gt;I&apos;ve only committed this to trunk so far, not (yet) to the 1.5 branch.  Are we confident enough that this is back-compatible that we should merge it to the 1.5 branch, including it in the 1.5.2 release?&lt;/p&gt;</comment>
                            <comment id="13050410" author="jbaldassari" created="Thu, 16 Jun 2011 13:33:19 +0000"  >&lt;p&gt;Thanks Doug!  And thanks to everyone who helped me out on this one.&lt;/p&gt;

&lt;p&gt;I think it would be compatible with 1.5, although I haven&apos;t tested that or checked if the patch will apply cleanly to the 1.5 branch.  Do you want me to try it out?  Also, is there a load/longevity test that people usually run to really put this stuff through its paces?  For example, start up an echo server and hammer it with RPCs for 24 hours.&lt;/p&gt;</comment>
                            <comment id="13051018" author="cutting" created="Fri, 17 Jun 2011 12:36:34 +0000"  >&lt;p&gt;There isn&apos;t load tester that I&apos;m aware of.  I think the patch will apply cleanly w/o any work.  So maybe we should just go for it, since it passes all of the unit tests w/o any changes to them?&lt;/p&gt;</comment>
                            <comment id="13051177" author="jbaldassari" created="Fri, 17 Jun 2011 16:38:04 +0000"  >&lt;p&gt;Regarding the 1.5 back-port, I think it would be fine to commit it.&lt;/p&gt;

&lt;p&gt;Is there documentation somewhere, like on the Avro website or wiki, that would need to be updated to demonstrate the new callback functionality?&lt;/p&gt;

&lt;p&gt;On the topic of load testing, I think it would be useful to have some sort of utility for testing RPCs that goes beyond what the unit tests do.  For example, this test/utility would use a thread pool on the client side and would invoke RPCs as quickly as possible against a test server.  This type of test might uncover problems like ConcurrentModificationException and other thread-safety issues, memory leaks, and anything else that might go wrong under load.  A simple version of this test could probably be added to the existing ipc project, perhaps bound to the integration-test phase rather than the test phase.  The default run time for the test could be short, but the test time and number of client threads could be overridden via system properties to run a longer test if desired.  Should I create an enhancement issue for this?&lt;/p&gt;</comment>
                            <comment id="13051224" author="cutting" created="Fri, 17 Jun 2011 17:57:56 +0000"  >&lt;p&gt;Okay, I merged this to the 1.5 branch for inclusion in 1.5.2.  It depended on &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-815&quot; title=&quot;Netty Transceiver fails processing one-way messages&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-815&quot;&gt;&lt;del&gt;AVRO-815&lt;/del&gt;&lt;/a&gt;, so I merged that too, which we probably should have done before anyway, as it was a compatible bugfix.&lt;/p&gt;</comment>
                            <comment id="13051275" author="scott_carey" created="Fri, 17 Jun 2011 19:33:03 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Is there documentation somewhere, like on the Avro website or wiki, that would need to be updated to demonstrate the new callback functionality?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I am not aware of any.  It would be great to have some documentation on the wiki about RPC and callbacks.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On the topic of load testing, I think it would be useful to have some sort of utility for testing RPCs that goes beyond what the unit tests do.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Absolutely.  It would be useful to have load testing facilities for RPC.  We have a crude load test (Perf.java) for Java serialization/deserialization.  It has helped us identify places to optimize and found regressions.  It runs manually, not bound to any maven phase or automatic test suite.  We have discussed using Apache&apos;s resources to run a daily performance report or something similar.&lt;/p&gt;

&lt;p&gt;Likewise, we are lacking in cross-language performance tests.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12455505">AVRO-405</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12462956">AVRO-528</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12481530" name="AVRO-539-v2-2.patch" size="90725" author="jbaldassari" created="Mon, 6 Jun 2011 02:27:59 +0000"/>
                            <attachment id="12481529" name="AVRO-539-v2.patch" size="89945" author="jbaldassari" created="Mon, 6 Jun 2011 02:19:50 +0000"/>
                            <attachment id="12482323" name="AVRO-539-v3.patch" size="73165" author="jbaldassari" created="Mon, 13 Jun 2011 05:50:01 +0000"/>
                            <attachment id="12482740" name="AVRO-539-v4.patch" size="64049" author="jbaldassari" created="Thu, 16 Jun 2011 01:47:58 +0000"/>
                            <attachment id="12481199" name="AVRO-539.patch" size="59152" author="jbaldassari" created="Thu, 2 Jun 2011 06:23:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 2 Jun 2011 06:23:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>65152</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 32 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0e0y7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>79916</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>
