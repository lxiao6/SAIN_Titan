<!--
RSS generated by JIRA (7.6.3#76005-sha1:8a4e38d34af948780dbf52044e7aafb13a7cae58) at Mon Jan 21 19:19:42 UTC 2019

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/issues/?jql=project+%3D+AVRO+AND+created+%3E%3D+2013-12-28+AND+created+%3C%3D+2014-1-7+ORDER+BY+key+ASC</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="7" total="7"/>
                <build-info>
            <version>7.6.3</version>
            <build-number>76005</build-number>
            <build-date>09-01-2018</build-date>
        </build-info>

<item>
            <title>[AVRO-1422] JSON-deserialization of recursively defined record causes stack overflow</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1422</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;A schema defined like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;recursiveSchema.avsc&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
 &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;RecursiveRecord&quot;&lt;/span&gt;,
 &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
   {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;child&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;RecursiveRecord&quot;&lt;/span&gt;}
 ]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;results in an infinite loop/stack overflow when ingesting JSON that looks like {{&lt;/p&gt;
{&quot;child&quot;: null}
&lt;p&gt;}} or {&lt;tt&gt;&quot;child&quot;: {&quot;null&quot;: null&lt;/tt&gt;}}.  For instance, I can compile and load the schema into a Scala REPL and then cause the error when trying to read in the JSON, like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;command-line-1&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;java -jar avro-tools-1.7.5.jar compile schema recursiveSchema.avsc .
javac RecursiveRecord.java -cp avro-tools-1.7.5.jar
scala -cp avro-tools-1.7.5.jar:.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;scala-repl-specific-1&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.io.DecoderFactory;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Schema;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.specific.SpecificDatumReader;

&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; output: RecursiveRecord = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RecursiveRecord();
val schema: Schema = output.getSchema();
val reader: SpecificDatumReader[RecursiveRecord] = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SpecificDatumReader[RecursiveRecord](schema);
output = reader.read(output, DecoderFactory.get().jsonDecoder(schema, &lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;child&lt;span class=&quot;code-quote&quot;&gt;&quot;: &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;}&quot;&lt;/span&gt;&quot;&quot;));
output = reader.read(output, DecoderFactory.get().jsonDecoder(schema, &lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;child&lt;span class=&quot;code-quote&quot;&gt;&quot;: {&quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;: &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;}}&quot;&lt;/span&gt;&quot;&quot;));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same is true if I attempt to load it into a generic object:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;scala-repl-generic-1&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.io.DecoderFactory;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Schema;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader;

val parser = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser();
val schema: Schema = parser.parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;record&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;RecursiveRecord&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;fields&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;child&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;RecursiveRecord&lt;span class=&quot;code-quote&quot;&gt;&quot;}]}&quot;&lt;/span&gt;&quot;&quot;);
val reader: GenericDatumReader[java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;] = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;](schema);
val output = reader.read(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, DecoderFactory.get().jsonDecoder(schema, &lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;child&lt;span class=&quot;code-quote&quot;&gt;&quot;: &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;}&quot;&lt;/span&gt;&quot;&quot;));
val output = reader.read(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, DecoderFactory.get().jsonDecoder(schema, &lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;child&lt;span class=&quot;code-quote&quot;&gt;&quot;: {&quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;: &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;}}&quot;&lt;/span&gt;&quot;&quot;));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In all cases, it is the &lt;tt&gt;reader.read&lt;/tt&gt; calls that cause stack overflows (all four of the ones described above).  The stack trace is apparently truncated, but what is shown repeats these two lines until cut off by the JVM:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;stack-trace&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;        at org.apache.avro.io.parsing.Symbol$Sequence.flattenedSize(Symbol.java:324)
        at org.apache.avro.io.parsing.Symbol.flattenedSize(Symbol.java:217)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same is not true if we (correctly?) declare the child as a union of null and a recursive record.  For instance,&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;recursiveSchema2.avsc&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;record&quot;&lt;/span&gt;,
 &lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;RecursiveRecord2&quot;&lt;/span&gt;,
 &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt;: [
   {&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;child&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;: [&lt;span class=&quot;code-quote&quot;&gt;&quot;RecursiveRecord2&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;]}
 ]}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;command-line-2&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;java -jar avro-tools-1.7.5.jar compile schema recursiveSchema2.avsc .
javac RecursiveRecord2.java -cp avro-tools-1.7.5.jar
scala -cp avro-tools-1.7.5.jar:.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;scala-repl-specific-2&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.io.DecoderFactory;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Schema;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.specific.SpecificDatumReader;

&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; output: RecursiveRecord2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RecursiveRecord2();
val schema: Schema = output.getSchema();
val reader: SpecificDatumReader[RecursiveRecord2] = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SpecificDatumReader[RecursiveRecord2](schema);
output = reader.read(output, DecoderFactory.get().jsonDecoder(schema, &lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;child&lt;span class=&quot;code-quote&quot;&gt;&quot;: &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;}&quot;&lt;/span&gt;&quot;&quot;));
output = reader.read(output, DecoderFactory.get().jsonDecoder(schema, &lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;child&lt;span class=&quot;code-quote&quot;&gt;&quot;: {&quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;: &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;}}&quot;&lt;/span&gt;&quot;&quot;));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;scala-repl-generic-2&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.io.DecoderFactory;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.Schema;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.avro.&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.GenericDatumReader;

val parser = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser()
val schema: Schema = parser.parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;record&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;RecursiveRecord2&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;fields&lt;span class=&quot;code-quote&quot;&gt;&quot;: [{&quot;&lt;/span&gt;name&lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt;child&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;type&lt;span class=&quot;code-quote&quot;&gt;&quot;: [&quot;&lt;/span&gt;RecursiveRecord2&lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;]}]}&quot;&lt;/span&gt;&quot;&quot;);
val reader: GenericDatumReader[java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;] = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericDatumReader[java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;](schema);
val output = reader.read(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, DecoderFactory.get().jsonDecoder(schema, &lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;child&lt;span class=&quot;code-quote&quot;&gt;&quot;: &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;}&quot;&lt;/span&gt;&quot;&quot;));
val output = reader.read(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, DecoderFactory.get().jsonDecoder(schema, &lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;&quot;{&quot;&lt;/span&gt;child&lt;span class=&quot;code-quote&quot;&gt;&quot;: {&quot;&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;: &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;}}&quot;&lt;/span&gt;&quot;&quot;));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For both specific and generic, &lt;tt&gt;RecursiveRecord2&lt;/tt&gt; works properly: it produces an object with recursive type and &lt;tt&gt;child == null&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;My understanding of the official schema is that only &lt;tt&gt;RecursiveRecord2&lt;/tt&gt; should be allowed to have a null &lt;tt&gt;child&lt;/tt&gt;, so the JSON I supplied would not have been valid input for &lt;tt&gt;RecursiveRecord&lt;/tt&gt;.  (If so, then it wouldn&apos;t even be possible to give it valid finite input.)  However, it should give a different error than a stack overflow, something to tell me that {{&lt;/p&gt;
{&quot;child&quot;: null}
&lt;p&gt;}} is not legal unless field &lt;tt&gt;child&lt;/tt&gt; is declared as a union that includes &lt;tt&gt;null&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;The reason one might want this (recursively defined types) is to make trees.  The example I gave had only one child for simplicity (i.e. it was a linked list), but the error would apply to binary trees as well.  For instance, here&apos;s a three-node list (a little cumbersome in JSON):&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;motivating-example&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;{&lt;span class=&quot;code-quote&quot;&gt;&quot;child&quot;&lt;/span&gt;: {&lt;span class=&quot;code-quote&quot;&gt;&quot;RecursiveRecord2&quot;&lt;/span&gt;: {&lt;span class=&quot;code-quote&quot;&gt;&quot;child&quot;&lt;/span&gt;: {&lt;span class=&quot;code-quote&quot;&gt;&quot;RecursiveRecord2&quot;&lt;/span&gt;: {&lt;span class=&quot;code-quote&quot;&gt;&quot;child&quot;&lt;/span&gt;: &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;}}}}}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I haven&apos;t tested this in Avro deserialization (which would be a more reasonable use-case), but I don&apos;t know of a way to generate the Avro-encoded data without first getting it from human-typable JSON.  (I&apos;m not constructing the Avro byte stream by hand.)&lt;/p&gt;</description>
                <environment>&lt;p&gt;Linux (but it doesn&apos;t matter because it&apos;s Java).&lt;/p&gt;</environment>
        <key id="12686586">AVRO-1422</key>
            <summary>JSON-deserialization of recursively defined record causes stack overflow</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jpivarski">Jim Pivarski</reporter>
                        <labels>
                            <label>infinite-loop</label>
                            <label>recursive</label>
                            <label>stack-overflow</label>
                    </labels>
                <created>Sat, 28 Dec 2013 00:02:43 +0000</created>
                <updated>Sat, 28 Dec 2013 00:03:46 +0000</updated>
                                            <version>1.7.5</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>4</watches>
                                                                        <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>365577</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 4 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1r0lj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>365884</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1423] Avrogen doesn&apos;t create the RPC methods from .avrp files</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1423</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;1. Get the .avpr file from &lt;a href=&quot;https://github.com/phunt/avro-rpc-quickstart/blob/master/src/main/avro/mail.avpr&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/phunt/avro-rpc-quickstart/blob/master/src/main/avro/mail.avpr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2. use the csharp avrogen.exe (eg: release-1.7.5\lang\csharp\build\codegen\Release\avrogen.exe ) to produce the csharp code-gen files as  &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; avrogen.exe -p mail.avpr . &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3. Review the generated .cs file - no RPC methods found (you should have a &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; send (Message message)  { ... }  &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; method in that code-gen&apos;d .cs file; current code-gen copy-pasted below)&lt;/p&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;// ------------------------------------------------------------------------------
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// &amp;lt;auto-generated&amp;gt;
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//    Generated by avrogen.exe, version 0.9.0.0
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//    Changes to &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; file may cause incorrect behavior and will be lost &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; code
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//    is regenerated
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// &amp;lt;/auto-generated&amp;gt;
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// ------------------------------------------------------------------------------
&lt;/span&gt;namespace example.proto
{
	using &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;;
	using &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.Collections.Generic;
	using &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.Text;
	using Avro;
	using Avro.Specific;
	
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; partial &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;Message : ISpecificRecord
	{
		&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; Schema _SCHEMA = Avro.Schema.Parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;type\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;record\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;Message\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;namespace\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;example.proto\&lt;span class=&quot;code-quote&quot;&gt;&quot;,\&quot;&lt;/span&gt;fields\&lt;span class=&quot;code-quote&quot;&gt;&quot;:[{\&quot;&lt;/span&gt;name\&lt;span class=&quot;code-quote&quot;&gt;&quot;:\&quot;&lt;/span&gt;&quot; +
				&lt;span class=&quot;code-quote&quot;&gt;&quot;to\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;string\&quot;&lt;/span&gt;},{\&lt;span class=&quot;code-quote&quot;&gt;&quot;name\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;from\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;string\&quot;&lt;/span&gt;},{\&lt;span class=&quot;code-quote&quot;&gt;&quot;name\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;body\&quot;&lt;/span&gt;,\&lt;span class=&quot;code-quote&quot;&gt;&quot;type\&quot;&lt;/span&gt;:\&lt;span class=&quot;code-quote&quot;&gt;&quot;stri&quot;&lt;/span&gt; +
				&lt;span class=&quot;code-quote&quot;&gt;&quot;ng\&quot;&lt;/span&gt;}]}&quot;);
		&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; string _to;
		&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; string _from;
		&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; string _body;
		&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; virtual Schema Schema
		{
			get
			{
				&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Message._SCHEMA;
			}
		}
		&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; string to
		{
			get
			{
				&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;._to;
			}
			set
			{
				&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;._to = value;
			}
		}
		&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; string from
		{
			get
			{
				&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;._from;
			}
			set
			{
				&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;._from = value;
			}
		}
		&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; string body
		{
			get
			{
				&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;._body;
			}
			set
			{
				&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;._body = value;
			}
		}
		&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; virtual object Get(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; fieldPos)
		{
			&lt;span class=&quot;code-keyword&quot;&gt;switch&lt;/span&gt; (fieldPos)
			{
			&lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; 0: &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.to;
			&lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; 1: &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.from;
			&lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; 2: &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.body;
			&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AvroRuntimeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Bad index &quot;&lt;/span&gt; + fieldPos + &lt;span class=&quot;code-quote&quot;&gt;&quot; in Get()&quot;&lt;/span&gt;);
			};
		}
		&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; virtual void Put(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; fieldPos, object fieldValue)
		{
			&lt;span class=&quot;code-keyword&quot;&gt;switch&lt;/span&gt; (fieldPos)
			{
			&lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; 0: &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.to = (&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)fieldValue; &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
			&lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; 1: &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.from = (&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)fieldValue; &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
			&lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; 2: &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.body = (&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)fieldValue; &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
			&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AvroRuntimeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Bad index &quot;&lt;/span&gt; + fieldPos + &lt;span class=&quot;code-quote&quot;&gt;&quot; in Put()&quot;&lt;/span&gt;);
			};
		}
	}
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12686864">AVRO-1423</key>
            <summary>Avrogen doesn&apos;t create the RPC methods from .avrp files</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.svg">Blocker</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="user874144">Sid S</reporter>
                        <labels>
                    </labels>
                <created>Tue, 31 Dec 2013 17:45:29 +0000</created>
                <updated>Mon, 6 Jan 2014 23:21:46 +0000</updated>
                                            <version>1.7.5</version>
                                                    <component>csharp</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13859601" author="user874144" created="Tue, 31 Dec 2013 18:15:01 +0000"  >&lt;p&gt;Also, the test project doesn&apos;t have any tests to catch any such failures. The code gen unit test doesn&apos;t have any &quot;messages&quot; in it&apos;s test schema and the protocol unit tests (which have &quot;messages&quot; in their schema) don&apos;t verify the code-gen - they only check if it&apos;s JSON&apos;d ok or not. &lt;/p&gt;</comment>
                            <comment id="13863522" author="cutting" created="Mon, 6 Jan 2014 22:32:33 +0000"  >&lt;p&gt;Avro 1.7.5 does not RPC for C#.  RPC support was added in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-975&quot; title=&quot;Support RPC in C#&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-975&quot;&gt;&lt;del&gt;AVRO-975&lt;/del&gt;&lt;/a&gt;, which will be included in the upcoming Avro 1.7.6.&lt;/p&gt;</comment>
                            <comment id="13863603" author="user874144" created="Mon, 6 Jan 2014 23:10:01 +0000"  >&lt;p&gt;Thanks. When is 1.7.6 due?&lt;/p&gt;</comment>
                            <comment id="13863621" author="cutting" created="Mon, 6 Jan 2014 23:21:46 +0000"  >&lt;p&gt;I&apos;m hoping to get 1.7.6 out in the next few weeks.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 6 Jan 2014 22:32:33 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>365857</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 2 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1r2br:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>366164</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>csharp avrogen</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1424] ValidatingDecoder hangs on large schema</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1424</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Try to create Validation decoder using attached schema. It hangs and causes huge memory allocation. The problem is because of boost::any which is making excessive copies of objects when creating Symbols.&lt;/p&gt;

&lt;p&gt;And also fixup method which is being called in validation decoder creation stack is also taking long very very long time.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12686991">AVRO-1424</key>
            <summary>ValidatingDecoder hangs on large schema</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thiru_mg">Thiruvalluvan M. G.</assignee>
                                    <reporter username="ramanasv">Ramana Suvarapu</reporter>
                        <labels>
                    </labels>
                <created>Thu, 2 Jan 2014 16:31:06 +0000</created>
                <updated>Thu, 23 Jan 2014 21:58:53 +0000</updated>
                            <resolved>Tue, 7 Jan 2014 17:31:34 +0000</resolved>
                                    <version>1.7.5</version>
                                    <fixVersion>1.7.6</fixVersion>
                                    <component>c++</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13860469" author="thiru_mg" created="Thu, 2 Jan 2014 18:15:07 +0000"  >&lt;p&gt;The attached patch addresses the problem.&lt;/p&gt;</comment>
                            <comment id="13861924" author="ramanasv" created="Fri, 3 Jan 2014 21:34:23 +0000"  >&lt;p&gt;Unable to apply the patch as patch was not generated from Avro-1.7.5 version of source code.&lt;/p&gt;</comment>
                            <comment id="13862115" author="thiru_mg" created="Sat, 4 Jan 2014 01:16:57 +0000"  >&lt;p&gt;The patch is against the latest trunk. I tested again against a fresh checkout and it applies cleanly.&lt;/p&gt;</comment>
                            <comment id="13863617" author="cutting" created="Mon, 6 Jan 2014 23:20:47 +0000"  >&lt;p&gt;This sounds like something we should perhaps include in 1.7.6, no?&lt;/p&gt;</comment>
                            <comment id="13863858" author="thiru_mg" created="Tue, 7 Jan 2014 02:57:57 +0000"  >&lt;p&gt;Yes Doug. I&apos;m waiting for Ramana to confirm that this works for his real use cases. Of course, I&apos;ve tested it with the sample schema he gave I just want to make sure that his other use cases are taken care, too.&lt;/p&gt;</comment>
                            <comment id="13864276" author="ramanasv" created="Tue, 7 Jan 2014 14:38:15 +0000"  >&lt;p&gt;Hi Thiru, the patch worked and you can check-in the changes to trunk.&lt;/p&gt;</comment>
                            <comment id="13864280" author="ramanasv" created="Tue, 7 Jan 2014 14:40:32 +0000"  >&lt;p&gt;Now ValidationDecoder is faster than the old one.&lt;/p&gt;</comment>
                            <comment id="13864426" author="jira-bot" created="Tue, 7 Jan 2014 17:31:10 +0000"  >&lt;p&gt;Commit 1556285 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=thiru_mg&quot; class=&quot;user-hover&quot; rel=&quot;thiru_mg&quot;&gt;Thiruvalluvan M. G.&lt;/a&gt; in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1556285&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1556285&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1424&quot; title=&quot;ValidatingDecoder hangs on large schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1424&quot;&gt;&lt;del&gt;AVRO-1424&lt;/del&gt;&lt;/a&gt; ValidatingDecoder hangs on large schema&lt;/p&gt;</comment>
                            <comment id="13864427" author="thiru_mg" created="Tue, 7 Jan 2014 17:31:34 +0000"  >&lt;p&gt;Committed revision 1556285. Thank you Ramana.&lt;/p&gt;</comment>
                            <comment id="13864514" author="hudson" created="Tue, 7 Jan 2014 18:39:34 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #417 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/417/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/417/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1424&quot; title=&quot;ValidatingDecoder hangs on large schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1424&quot;&gt;&lt;del&gt;AVRO-1424&lt;/del&gt;&lt;/a&gt; ValidatingDecoder hangs on large schema (thiru: rev 1556285)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/CMakeLists.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/BinaryEncoder.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/Compiler.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/json/JsonDom.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/json/JsonDom.hh&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/parsing/JsonCodec.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/parsing/ResolvingDecoder.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/parsing/Symbol.hh&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/parsing/ValidatingCodec.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/impl/parsing/ValidatingCodec.hh&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/jsonschemas/large_schema.avsc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/test/JsonTests.cc&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/c++/test/LargeSchemaTests.cc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12621123" name="AVRO-1424.patch" size="447598" author="thiru_mg" created="Thu, 2 Jan 2014 18:14:36 +0000"/>
                            <attachment id="12621096" name="model.avsc" size="385753" author="ramanasv" created="Thu, 2 Jan 2014 16:31:51 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 2 Jan 2014 18:15:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>365986</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 2 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1r34f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>366293</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1425] Fallback to thread context class loader in SpecificData.getClass()</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1425</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;While trying to implement a simple Avro serializer that works in an OSGi environment I stumbled on the fact that SpecificData.getClass() only uses its own ClassLoader. Letting it fallback to the thread context class loader (TCCL) makes it more OSGi-friendly, as callers can then set the TCCL as needed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-987&quot; title=&quot;Make Avro OSGi ready&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-987&quot;&gt;&lt;del&gt;AVRO-987&lt;/del&gt;&lt;/a&gt;, which hasn&apos;t been applied and is now stale, is about making Avro fully OSGi compliant and would fix my issue as well, but I tried to aim for the minimal changes that work for me (patch follows).&lt;/p&gt;

&lt;p&gt;My use case is at &lt;a href=&quot;https://github.com/bdelacretaz/avro-osgi-test&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/bdelacretaz/avro-osgi-test&lt;/a&gt; - at commit e3b4c47839 there my test passes with the attached patch applied to avro trunk revision 1552851.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12687208">AVRO-1425</key>
            <summary>Fallback to thread context class loader in SpecificData.getClass()</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="bdelacretaz">Bertrand Delacretaz</reporter>
                        <labels>
                    </labels>
                <created>Fri, 3 Jan 2014 16:52:21 +0000</created>
                <updated>Wed, 21 Nov 2018 14:41:33 +0000</updated>
                                            <version>1.7.5</version>
                                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13861666" author="bdelacretaz" created="Fri, 3 Jan 2014 16:56:12 +0000"  >&lt;p&gt;Patch that fixes my issue, created against revision 1552851, all tests pass with this patch applied.&lt;/p&gt;

&lt;p&gt;The ClassLoadingUtils class is a simplified variant of the one provided in the &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-987&quot; title=&quot;Make Avro OSGi ready&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-987&quot;&gt;&lt;del&gt;AVRO-987&lt;/del&gt;&lt;/a&gt; patch.&lt;/p&gt;</comment>
                            <comment id="13861749" author="cutting" created="Fri, 3 Jan 2014 18:26:55 +0000"  >&lt;p&gt;I&apos;d prefer we fix this more generally, as in &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-987&quot; title=&quot;Make Avro OSGi ready&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-987&quot;&gt;&lt;del&gt;AVRO-987&lt;/del&gt;&lt;/a&gt;.  Let me see if I can revive that patch.&lt;/p&gt;</comment>
                            <comment id="13862841" author="bdelacretaz" created="Mon, 6 Jan 2014 08:21:39 +0000"  >&lt;p&gt;Ok, I&apos;m happy to test the &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-987&quot; title=&quot;Make Avro OSGi ready&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-987&quot;&gt;&lt;del&gt;AVRO-987&lt;/del&gt;&lt;/a&gt; changes on my use cases, I&apos;ll keep an eye on that.&lt;/p&gt;</comment>
                            <comment id="16694783" author="manuel.richter" created="Wed, 21 Nov 2018 14:41:33 +0000"  >&lt;p&gt;FYI - this issue is still active:&lt;br/&gt;
Here&apos;s an issue I had with Spring-Boot:&lt;br/&gt;
&lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues/14622&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-boot/issues/14622&lt;/a&gt;&lt;br/&gt;
And here the minimum reproducible example I set up:&lt;br/&gt;
&lt;a href=&quot;https://github.com/TeNNoX/spring-boot-devtools-with-avro&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/TeNNoX/spring-boot-devtools-with-avro&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12537130">AVRO-987</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12621346" name="AVRO-1425.patch" size="4124" author="bdelacretaz" created="Fri, 3 Jan 2014 16:56:12 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 3 Jan 2014 18:26:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>366203</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1r4h3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>366514</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>


<item>
            <title>[AVRO-1426] Add New MapReduce Word Count Example</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1426</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;The MapReduce examples are missing a WordCount class that uses the new MapReduce API. I have written this class based on the old API one.&lt;/p&gt;

&lt;p&gt;The current MR docs say they only consider the old MapReduce API when there is some consideration of the new API. I also added references to the new API WordCount where the old API was mentioned.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12687323">AVRO-1426</key>
            <summary>Add New MapReduce Word Count Example</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="eljefe6a">Jesse Anderson</assignee>
                                    <reporter username="eljefe6a">Jesse Anderson</reporter>
                        <labels>
                    </labels>
                <created>Sat, 4 Jan 2014 18:50:30 +0000</created>
                <updated>Thu, 23 Jan 2014 21:58:54 +0000</updated>
                            <resolved>Mon, 6 Jan 2014 23:35:26 +0000</resolved>
                                    <version>1.7.5</version>
                                    <fixVersion>1.7.6</fixVersion>
                                    <component>doc</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13862383" author="eljefe6a" created="Sat, 4 Jan 2014 18:52:10 +0000"  >&lt;p&gt;Diff with new API MapReduce Word Count example and updated MR doc.&lt;/p&gt;</comment>
                            <comment id="13863634" author="jira-bot" created="Mon, 6 Jan 2014 23:34:05 +0000"  >&lt;p&gt;Commit 1556069 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1556069&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1556069&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1426&quot; title=&quot;Add New MapReduce Word Count Example&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1426&quot;&gt;&lt;del&gt;AVRO-1426&lt;/del&gt;&lt;/a&gt;. Java: Add mapreduce word count example.  Contributed by Jesse Anderson.&lt;/p&gt;</comment>
                            <comment id="13863640" author="cutting" created="Mon, 6 Jan 2014 23:35:26 +0000"  >&lt;p&gt;I committed this.  Thanks, Jesse!&lt;/p&gt;</comment>
                            <comment id="13863713" author="hudson" created="Tue, 7 Jan 2014 00:39:56 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #416 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/416/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/416/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1426&quot; title=&quot;Add New MapReduce Word Count Example&quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1426&quot;&gt;&lt;del&gt;AVRO-1426&lt;/del&gt;&lt;/a&gt;. Java: Add mapreduce word count example.  Contributed by Jesse Anderson. (cutting: rev 1556069)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/doc/examples/mr-example/src/main/java/example/MapReduceAvroWordCount.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/doc/src/content/xdocs/mr.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12621477" name="newapiwordcount.diff" size="7228" author="eljefe6a" created="Sat, 4 Jan 2014 18:52:10 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 6 Jan 2014 23:34:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>366322</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 2 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1r57j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>366633</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1427] Minor issues with Resolving Decoder Tests </title>
                <link>https://issues.apache.org/jira/browse/AVRO-1427</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;Hard coded TestValidatingIO.Encoding.BINARY is used rather than &quot;this.eEnc&quot; passed in via the @Parameterized test, preventing the other Encodings being tested.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;TestResolvingIOResolving.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  @Test
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testResolving()
    &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    Schema writerSchema = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser().parse(sJsWrtSchm);
    &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bytes = TestValidatingIO.make(writerSchema, sWrtCls,
        oaWrtVals, TestValidatingIO.Encoding.BINARY);
&lt;span class=&quot;code-comment&quot;&gt;// Needs changing to
&lt;/span&gt;  @Test
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testResolving()
    &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    Schema writerSchema = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.Parser().parse(sJsWrtSchm);
    &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bytes = TestValidatingIO.make(writerSchema, sWrtCls,
        oaWrtVals, eEnc);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Number types are not checked for exact matches in TestResolvingIO.check() so that an expected type of Integer 100 matches Long 100 at line 178 as follows:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;TestResolvingIOResolving.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;        { &lt;span class=&quot;code-quote&quot;&gt;&quot;[ \&quot;&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;\&lt;span class=&quot;code-quote&quot;&gt;&quot;, \&quot;&lt;/span&gt;string\&lt;span class=&quot;code-quote&quot;&gt;&quot;]&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;U0I&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;[] { 100 },
            &lt;span class=&quot;code-quote&quot;&gt;&quot;\&quot;&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;\&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;, &quot;&lt;/span&gt;L&quot;, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;[] { 100 } },
&lt;span class=&quot;code-comment&quot;&gt;// Needs changing to
&lt;/span&gt;        { &lt;span class=&quot;code-quote&quot;&gt;&quot;[ \&quot;&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;\&lt;span class=&quot;code-quote&quot;&gt;&quot;, \&quot;&lt;/span&gt;string\&lt;span class=&quot;code-quote&quot;&gt;&quot;]&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;U0I&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;[] { 100 },
            &lt;span class=&quot;code-quote&quot;&gt;&quot;\&quot;&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;\&lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;, &quot;&lt;/span&gt;L&quot;, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;[] { 100L } },
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above fix to TestResolvingIO.check() makes TestResolvingIO fail, so the expected values need to be generated with the correct type and not just reuse the random input values. This can be done by making the random generation deterministic so that correctly typed expected values may be generated.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;TestValidatingIO.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;[] randomValues(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; calls) {
    Random r = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Random();
&lt;span class=&quot;code-comment&quot;&gt;// Needs changing to
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;[] randomValues(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; calls) {
    Random r = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Random(0L);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Patch to follow.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12687373">AVRO-1427</key>
            <summary>Minor issues with Resolving Decoder Tests </summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="robair">Rob Turner</assignee>
                                    <reporter username="robair">Rob Turner</reporter>
                        <labels>
                            <label>test</label>
                    </labels>
                <created>Sun, 5 Jan 2014 22:51:35 +0000</created>
                <updated>Thu, 23 Jan 2014 21:58:57 +0000</updated>
                            <resolved>Thu, 9 Jan 2014 19:51:53 +0000</resolved>
                                    <version>1.7.5</version>
                                    <fixVersion>1.7.6</fixVersion>
                                    <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13862682" author="robair" created="Sun, 5 Jan 2014 22:57:58 +0000"  >&lt;p&gt;I also changed the deprecated Schema.parse to new Schema.Parser.parse().&lt;br/&gt;
Please review this patch as a solution to this issue.&lt;/p&gt;</comment>
                            <comment id="13863664" author="cutting" created="Mon, 6 Jan 2014 23:52:20 +0000"  >&lt;p&gt;Looks good to me.  I&apos;ll commit this soon unless someone objects.&lt;/p&gt;</comment>
                            <comment id="13866965" author="cutting" created="Thu, 9 Jan 2014 19:51:53 +0000"  >&lt;p&gt;I committed this.  Thanks, Rob!&lt;/p&gt;</comment>
                            <comment id="13866966" author="jira-bot" created="Thu, 9 Jan 2014 19:52:08 +0000"  >&lt;p&gt;Commit 1556934 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cutting&quot; class=&quot;user-hover&quot; rel=&quot;cutting&quot;&gt;Doug Cutting&lt;/a&gt; in branch &apos;avro/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1556934&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1556934&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1427&quot; title=&quot;Minor issues with Resolving Decoder Tests &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1427&quot;&gt;&lt;del&gt;AVRO-1427&lt;/del&gt;&lt;/a&gt;. Java: Improve ResolvingDecoder tests. Contributed by Rob Turner.&lt;/p&gt;</comment>
                            <comment id="13867028" author="hudson" created="Thu, 9 Jan 2014 20:40:22 +0000"  >&lt;p&gt;SUCCESS: Integrated in AvroJava #421 (See &lt;a href=&quot;https://builds.apache.org/job/AvroJava/421/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/AvroJava/421/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-1427&quot; title=&quot;Minor issues with Resolving Decoder Tests &quot; class=&quot;issue-link&quot; data-issue-key=&quot;AVRO-1427&quot;&gt;&lt;del&gt;AVRO-1427&lt;/del&gt;&lt;/a&gt;. Java: Improve ResolvingDecoder tests. Contributed by Rob Turner. (cutting: rev 1556934)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/avro/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/test/java/org/apache/avro/io/TestResolvingIO.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/test/java/org/apache/avro/io/TestResolvingIOResolving.java&lt;/li&gt;
	&lt;li&gt;/avro/trunk/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12621539" name="AVRO-1427.patch" size="8227" author="robair" created="Sun, 5 Jan 2014 22:57:58 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 6 Jan 2014 23:52:20 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>366372</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 2 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1r5if:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>366683</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>


<item>
            <title>[AVRO-1428] Schema.computeHash() to add if check to avoid unnecessary hashcode computation</title>
                <link>https://issues.apache.org/jira/browse/AVRO-1428</link>
                <project id="12310911" key="AVRO">Apache Avro</project>
                    <description>&lt;p&gt;In current Schma.java we have following implementation:&lt;br/&gt;
  public final int hashCode() &lt;/p&gt;
{
    if (hashCode == NO_HASHCODE)
      hashCode = computeHash();
    return hashCode;
  }

&lt;p&gt;  int computeHash() &lt;/p&gt;
{ return getType().hashCode() + props.hashCode(); }

&lt;p&gt;  While hashCode is doing the checking of &quot;if (hashCode == NO_HASHCODE)&quot;, the computeHash method is not. But the computeHash method is being called from Schema$Field.hashCode and the subclasses hashCode implementation like following:&lt;br/&gt;
public int hashCode() &lt;/p&gt;
{ return name.hashCode() + schema.computeHash(); }
&lt;p&gt;  //this is from Schema$Field class&lt;/p&gt;

&lt;p&gt;  This is causing the the calculation of hashCode getting called unnecessarily extensively. The proposed changed is to add the &quot;if&quot; check inside the computeHash method instead:&lt;/p&gt;

&lt;p&gt;    int computeHash()&lt;br/&gt;
    {&lt;br/&gt;
        if (hashCode == NO_HASHCODE)&lt;/p&gt;
        {
            hashCode = getType().hashCode() + props.hashCode();
        }
&lt;p&gt;        return hashCode;&lt;br/&gt;
}&lt;/p&gt;


&lt;p&gt;We did a simple test to compare the performance difference, below is a summary of the heap snapshot of comparing the difference:&lt;/p&gt;

&lt;p&gt;As a test I wrote a small program that creates a HashMap&amp;lt;Schema.Field, Integer&amp;gt;() and enters a loop simply identifying whether various Schema.Field instances are keys in the map. Obviously this is a pathological test case, but when running with the current implementation of Schema.Field it has (in about 30 seconds) used up nearly 8 GBytes of heap in instantiating intermediate objects associated with calling Schema.computeHash():&lt;/p&gt;

&lt;p&gt;Heap&lt;br/&gt;
PSYoungGen      total 17432576K, used 8666481K [0x0000000340000000, 0x0000000800000000, 0x0000000800000000)&lt;br/&gt;
  eden space 14942208K, 58% used [0x0000000340000000,0x0000000550f5c650,0x00000006d0000000)&lt;br/&gt;
  from space 2490368K, 0% used [0x0000000768000000,0x0000000768000000,0x0000000800000000)&lt;br/&gt;
  to   space 2490368K, 0% used [0x00000006d0000000,0x00000006d0000000,0x0000000768000000)&lt;br/&gt;
ParOldGen       total 1048576K, used 0K [0x0000000300000000, 0x0000000340000000, 0x0000000340000000)&lt;br/&gt;
  object space 1048576K, 0% used [0x0000000300000000,0x0000000300000000,0x0000000340000000)&lt;br/&gt;
PSPermGen       total 21504K, used 5782K [0x00000002fae00000, 0x00000002fc300000, 0x0000000300000000)&lt;br/&gt;
  object space 21504K, 26% used [0x00000002fae00000,0x00000002fb3a5818,0x00000002fc300000)&lt;/p&gt;

&lt;p&gt;When running with the modified implementation (and no other change) all the object allocation vanishes:&lt;/p&gt;

&lt;p&gt;Heap&lt;br/&gt;
PSYoungGen      total 17432576K, used 896532K [0x0000000340000000, 0x0000000800000000, 0x0000000800000000)&lt;br/&gt;
  eden space 14942208K, 6% used [0x0000000340000000,0x0000000376b852d0,0x00000006d0000000)&lt;br/&gt;
  from space 2490368K, 0% used [0x0000000768000000,0x0000000768000000,0x0000000800000000)&lt;br/&gt;
  to   space 2490368K, 0% used [0x00000006d0000000,0x00000006d0000000,0x0000000768000000)&lt;br/&gt;
ParOldGen       total 1048576K, used 0K [0x0000000300000000, 0x0000000340000000, 0x0000000340000000)&lt;br/&gt;
  object space 1048576K, 0% used [0x0000000300000000,0x0000000300000000,0x0000000340000000)&lt;br/&gt;
PSPermGen       total 21504K, used 5768K [0x00000002fae00000, 0x00000002fc300000, 0x0000000300000000)&lt;br/&gt;
  object space 21504K, 26% used [0x00000002fae00000,0x00000002fb3a2240,0x00000002fc300000)&lt;/p&gt;

&lt;p&gt;As a side-effect the test runs x3 faster with the modified hashCode() implementation.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12687509">AVRO-1428</key>
            <summary>Schema.computeHash() to add if check to avoid unnecessary hashcode computation</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="tonyliu73">Tie Liu</reporter>
                        <labels>
                    </labels>
                <created>Mon, 6 Jan 2014 19:47:32 +0000</created>
                <updated>Thu, 16 Jan 2014 19:43:22 +0000</updated>
                                                                            <component>java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13863334" author="tonyliu73" created="Mon, 6 Jan 2014 19:57:00 +0000"  >&lt;p&gt;This patch is to be applied on Schema.java under org.apache.avro package.&lt;/p&gt;</comment>
                            <comment id="13863703" author="cutting" created="Tue, 7 Jan 2014 00:28:16 +0000"  >&lt;p&gt;Your patch does not apply cleanly.  Can you please provide a proper patch file, generated with &apos;svn diff&apos;?  Thanks!&lt;/p&gt;

&lt;p&gt;Also, can you please provide your benchmark program?&lt;/p&gt;</comment>
                            <comment id="13866842" author="tonyliu73" created="Thu, 9 Jan 2014 17:46:02 +0000"  >&lt;p&gt;new patch file attached, it&apos;s generated using svn diff. The benchmark program is wrote by my colleague, will take to him to see whether its&apos; ok to upload.&lt;/p&gt;</comment>
                            <comment id="13872611" author="tonyliu73" created="Wed, 15 Jan 2014 21:23:07 +0000"  >&lt;p&gt;This is code my colleague to test the hash code generation.&lt;/p&gt;</comment>
                            <comment id="13872629" author="cutting" created="Wed, 15 Jan 2014 21:32:32 +0000"  >&lt;p&gt;Do you have an application that is computing hashes directly on Field, not on Schema?  I have a hard time imagining why one might do that.&lt;/p&gt;

&lt;p&gt;Does your application also frequently modify field properties?  Many have expressed a long-term desire to make schemas and fields immutable, so that in order to set a property you&apos;d need to create a new field &amp;amp; schema.  What is the use case for setting properties dynamically?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="13872656" author="tonyliu73" created="Wed, 15 Jan 2014 22:02:22 +0000"  >&lt;p&gt;Our code doesn&apos;t compute hashcode directly, but our schema are pretty big, it contains hundreds of types, and quite some types contain dozens of fields. Different types do have fields of same type. With the way current computeHash works, every time when it need to generate the hashcode for the schema of a type, it will generate the hashcode for every fields even though the hashcode for that field type has been computed before. Below is a stack trace of typical computeHash:&lt;br/&gt;
TRACE 313672: (thread=200023)&lt;br/&gt;
    java.util.LinkedHashMap$LinkedHashIterator.&amp;lt;init&amp;gt;(LinkedHashMap.java:366)&lt;br/&gt;
    java.util.LinkedHashMap$LinkedHashIterator.&amp;lt;init&amp;gt;(LinkedHashMap.java:366)&lt;br/&gt;
    java.util.LinkedHashMap$EntryIterator.&amp;lt;init&amp;gt;(LinkedHashMap.java:412)&lt;br/&gt;
    java.util.LinkedHashMap$EntryIterator.&amp;lt;init&amp;gt;(LinkedHashMap.java:412)&lt;br/&gt;
    java.util.LinkedHashMap.newEntryIterator(LinkedHashMap.java:419)&lt;br/&gt;
    java.util.HashMap$EntrySet.iterator(HashMap.java:1050)&lt;br/&gt;
    java.util.AbstractMap.hashCode(AbstractMap.java:492)&lt;br/&gt;
    org.apache.avro.Schema.computeHash(Schema.java:327)&lt;br/&gt;
    org.apache.avro.Schema$UnionSchema.computeHash(Schema.java:787)&lt;br/&gt;
    org.apache.avro.Schema$Field.hashCode(Schema.java:403)&lt;br/&gt;
    java.util.AbstractList.hashCode(AbstractList.java:541)&lt;br/&gt;
    org.apache.avro.Schema$RecordSchema.computeHash(Schema.java:605)&lt;br/&gt;
    org.apache.avro.Schema$UnionSchema.computeHash(Schema.java:787)&lt;br/&gt;
    org.apache.avro.Schema$Field.hashCode(Schema.java:403)&lt;br/&gt;
    java.util.AbstractList.hashCode(AbstractList.java:541)&lt;br/&gt;
    org.apache.avro.Schema$RecordSchema.computeHash(Schema.java:605)&lt;br/&gt;
    org.apache.avro.Schema$UnionSchema.computeHash(Schema.java:787)&lt;br/&gt;
    org.apache.avro.Schema$Field.hashCode(Schema.java:403)&lt;br/&gt;
    java.util.AbstractList.hashCode(AbstractList.java:541)&lt;br/&gt;
org.apache.avro.Schema$RecordSchema.computeHash(Schema.java:605)&lt;/p&gt;

&lt;p&gt;As you can see, the hashcode for the schema will be computed many many times unnecessarily. The code my colleague provide is just to demonstrate that computeHash is expensive operation.&lt;/p&gt;</comment>
                            <comment id="13872676" author="tonyliu73" created="Wed, 15 Jan 2014 22:12:44 +0000"  >&lt;p&gt;To explain the problem more clearly, in current implementation, when computing the hashcode for the RecordSchema:&lt;br/&gt;
        @Override&lt;br/&gt;
        int computeHash()&lt;/p&gt;
        {
        ...       
            return super.computeHash() + fields.hashCode();
        }
&lt;p&gt;the fields.hashCode will go through the fields and compute the hashCode for that schema of the field.&lt;/p&gt;

&lt;p&gt;Now when computing the hashcode for another recordSchema, it&apos;s doing the same thing, compute the hashCode for the fields of the new schema gain, though maybe the schema of the fields has already been computed before. The patch I propose is to avoid recalculate the hashcode if we already calculated them before.&lt;/p&gt;</comment>
                            <comment id="13872685" author="cutting" created="Wed, 15 Jan 2014 22:16:35 +0000"  >&lt;p&gt;But schema caches the hashcode.  Each schema generally only computes its hashcode once.  Computing the hashcode should be done no more frequently than each schema is created and should be considerably faster than creation.  So I&apos;m still not clear what the use case is where this makes a difference.  (I also don&apos;t like moving the caching into the method that&apos;s meant to compute, not cache, and am not convinced that change is correct in all cases.)&lt;/p&gt;</comment>
                            <comment id="13872689" author="cutting" created="Wed, 15 Jan 2014 22:19:39 +0000"  >&lt;p&gt;It seems you&apos;re arguing that Field should cache its hashcode, which might help cases where Field instances are reused in multiple schemas.  In that case, we should do this by adding a hashcode cache to Field, no?&lt;/p&gt;</comment>
                            <comment id="13872703" author="tonyliu73" created="Wed, 15 Jan 2014 22:29:58 +0000"  >&lt;p&gt;it&apos;s half right that I suggest cache the field hashCode. In the field.hashCode:&lt;br/&gt;
        public int hashCode()&lt;/p&gt;
        {
            return name.hashCode() + schema.computeHash();
        }
&lt;p&gt;The way I suggest is to avoid the &quot;schema.computeHash()&quot; in the field.hashCode since the hashcode for the field schema may already been calculated. What I really want is field.hashCode:&lt;br/&gt;
        public int hashCode()&lt;/p&gt;
        {
            return name.hashCode() + schema.hashCode();
        }
&lt;p&gt;but  we cannot do that since the schema.hashCode is defined as final, and subclasses of Schema (recordShema/UnionSchema/etc.) is overriding the computeHash instead.&lt;/p&gt;

&lt;p&gt;so to solve the problem, we need to either make schema.hashCode not final, and fields.hashCode call schema.hashCode, or move the hashcode cache check inside computeHash. How do you think?&lt;/p&gt;</comment>
                            <comment id="13872716" author="tonyliu73" created="Wed, 15 Jan 2014 22:34:27 +0000"  >&lt;p&gt;also for the UnionSchema, it&apos;s calculating the hashcode for each of the schema in the union. It&apos;s the similar case with field, we are calculating the hashcode many many times unnecessarily. With the current implementation, I still think the easiest way is to move the &quot;if&quot; check into the computeHash (this may not be the correct way). The correct way I think should make the schema.hashCode not final, and field/subclasses need to call the schema.hashcode instead of computeHash, this change requires touch more files.&lt;/p&gt;</comment>
                            <comment id="13872807" author="cutting" created="Wed, 15 Jan 2014 23:38:49 +0000"  >&lt;p&gt;The current design is:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;hashCode() re-computes if it&apos;s out of date, otherwise returns the cached value&lt;/li&gt;
	&lt;li&gt;computeHash() always re-computes.&lt;/li&gt;
	&lt;li&gt;subclasses override computeHash()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That seems consistent and clear to me.  If there are schema instances shared in multiple schemas then they may have their hashcode recomputed multiple times, once per schema that includes them, but that&apos;s not a common case that I&apos;ve seen.  The most common case is that schemas are parsed from JSON and do not share structure with other schemas.&lt;/p&gt;

&lt;p&gt;Moving the cache check into computeHash() on the base class (as you propose) means that only primitive classes have a cache: hashCode() on non-primitive schema subclasses will call computeHash() which will always perform the full calculation, since their base class no longer consults the cache.  Since your benchmark only measures hashCode on fields of a primitive type, this looks like an improvement, but in general I think it makes things worse.&lt;/p&gt;

&lt;p&gt;If we believed that improving the hashCode performance on schemas with shared structures would significantly help some applications then we might re-design this.  The complicated case to get right is circular schemas, especially circles involving multiple records, for example A contains a B that contains an A.  When you invalidate the cache for one element of the circle then you need to invalidate the cache for other elements of the circle, since they&apos;re interdependent.  With the current implementation this is not required, since if a cache is invalidated anywhere then no cache is used when things are recomputed.  A good example of complex circles is testSchemaExplosion.  Making this case work while still caching hashcodes for record schemas is hard.&lt;/p&gt;</comment>
                            <comment id="13873453" author="tonyliu73" created="Thu, 16 Jan 2014 14:47:47 +0000"  >&lt;p&gt;In following example, let&apos;s say we have unionSchema like following:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;null, TypeA, TypeB, TypeC&amp;#93;&lt;/span&gt;&lt;br/&gt;
and in all those 3 types it contains a field of typeD like this:&lt;br/&gt;
Type&lt;span class=&quot;error&quot;&gt;&amp;#91;A|B|C&amp;#93;&lt;/span&gt;&lt;br/&gt;
{&lt;br/&gt;
  TypeD fd;&lt;br/&gt;
}&lt;br/&gt;
in current implementation, when calculating the hashcode for the unionSchema, the computeHash for schema of TypeD will be called 3 times, because the field/subclasses is directly calling the computeHash, which bypass the cached hashcode check. &lt;/p&gt;</comment>
                            <comment id="13873786" author="cutting" created="Thu, 16 Jan 2014 19:10:08 +0000"  >&lt;p&gt;A given call to RecordSchema#computeHash() keeps track of which records its seen before only computes a hash for a given record once.  It does this to handle circularity.  So in a single call to hashCode(), a given record schema&apos;s hashcode will only be computed once.&lt;/p&gt;

&lt;p&gt;Again, what is the use case where Schema#hashCode() as implemented is a significant cost?&lt;/p&gt;</comment>
                            <comment id="13873831" author="tonyliu73" created="Thu, 16 Jan 2014 19:43:22 +0000"  >&lt;p&gt;yes, a given call to RecordSchema#computeHash keeps track of all the hashcodes for the schema has been calculated, but not the case for the UnionSchema. In the example I gave above, when calculating the hashcode for that union schema, it need to calculate the hashcode, it calls:&lt;br/&gt;
=&amp;gt;TypeASchema.computeHash =&amp;gt;TypeDSchema.computeHash&lt;br/&gt;
but after TypeASchema.computeHash return, it will clear the SEEN_HASHCODE. so when it calculate the TypeBSchema.computeHash, it need to compute TypeDSchema.computeHash again.&lt;/p&gt;

&lt;p&gt;RecordSchema.computeHash:&lt;br/&gt;
        @Override&lt;br/&gt;
        int computeHash()&lt;br/&gt;
        {&lt;br/&gt;
            Map seen = SEEN_HASHCODE.get();&lt;br/&gt;
            if (seen.containsKey(this))&lt;br/&gt;
                return 0; // prevent stack overflow&lt;br/&gt;
            boolean first = seen.isEmpty();&lt;br/&gt;
            try&lt;/p&gt;
            {
                seen.put(this, this);
                return super.computeHash() + fields.hashCode();
            }
&lt;p&gt;            finally&lt;/p&gt;
            {
                if (first)
                    seen.clear();
            }
&lt;p&gt;        }&lt;/p&gt;

&lt;p&gt;UnionSchema.computeHash:&lt;br/&gt;
        @Override&lt;br/&gt;
        int computeHash()&lt;/p&gt;
        {
            int hash = super.computeHash();
            for (Schema type : types)
                hash += type.computeHash();
            return hash;
        }</comment>
                    </comments>
                    <attachments>
                            <attachment id="12621656" name="AVRO-1428.patch" size="307" author="tonyliu73" created="Mon, 6 Jan 2014 19:57:00 +0000"/>
                            <attachment id="12622215" name="AVRO-1428.patch-V2" size="874" author="tonyliu73" created="Thu, 9 Jan 2014 17:44:52 +0000"/>
                            <attachment id="12623231" name="TestAvro.java" size="4416" author="tonyliu73" created="Wed, 15 Jan 2014 21:23:07 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 7 Jan 2014 00:28:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>366510</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 1 week, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1r6d3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>366821</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>
